pub fn app_get_float(property: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAppGetFloat {
    crate::__imports::native_app_get_float(property)
}
pub fn app_set_float(property: Option<&String>,
value: f32) -> altv_wasm_shared::natives_result::ResultOfAppSetFloat {
    crate::__imports::native_app_set_float(property,
value)
}
pub fn app_set_block(block_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAppSetBlock {
    crate::__imports::native_app_set_block(block_name)
}
pub fn app_set_string(property: Option<&String>,
value: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAppSetString {
    crate::__imports::native_app_set_string(property,
value)
}
pub fn app_delete_app_data(app_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAppDeleteAppData {
    crate::__imports::native_app_delete_app_data(app_name)
}
pub fn app_clear_block() -> altv_wasm_shared::natives_result::ResultOfAppClearBlock {
    crate::__imports::native_app_clear_block()
}
pub fn app_set_int(property: Option<&String>,
value: i32) -> altv_wasm_shared::natives_result::ResultOfAppSetInt {
    crate::__imports::native_app_set_int(property,
value)
}
pub fn app_has_linked_social_club_account() -> altv_wasm_shared::natives_result::ResultOfAppHasLinkedSocialClubAccount {
    crate::__imports::native_app_has_linked_social_club_account()
}
pub fn app_get_string(property: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAppGetString {
    crate::__imports::native_app_get_string(property)
}
pub fn app_data_valid() -> altv_wasm_shared::natives_result::ResultOfAppDataValid {
    crate::__imports::native_app_data_valid()
}
pub fn app_save_data() -> altv_wasm_shared::natives_result::ResultOfAppSaveData {
    crate::__imports::native_app_save_data()
}
pub fn app_get_deleted_file_status() -> altv_wasm_shared::natives_result::ResultOfAppGetDeletedFileStatus {
    crate::__imports::native_app_get_deleted_file_status()
}
pub fn app_has_synced_data(app_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAppHasSyncedData {
    crate::__imports::native_app_has_synced_data(app_name)
}
pub fn app_set_app(app_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAppSetApp {
    crate::__imports::native_app_set_app(app_name)
}
pub fn app_get_int(property: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAppGetInt {
    crate::__imports::native_app_get_int(property)
}
pub fn app_close_app() -> altv_wasm_shared::natives_result::ResultOfAppCloseApp {
    crate::__imports::native_app_close_app()
}
pub fn app_close_block() -> altv_wasm_shared::natives_result::ResultOfAppCloseBlock {
    crate::__imports::native_app_close_block()
}
pub fn start_audio_scene(scene: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfStartAudioScene {
    crate::__imports::native_start_audio_scene(scene)
}
pub fn unrequest_tennis_banks() -> altv_wasm_shared::natives_result::ResultOfUnrequestTennisBanks {
    crate::__imports::native_unrequest_tennis_banks()
}
pub fn set_vehicle_audio_body_damage_factor(vehicle: u32,
intensity: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleAudioBodyDamageFactor {
    crate::__imports::native_set_vehicle_audio_body_damage_factor(vehicle,
intensity)
}
pub fn is_ambient_zone_enabled(ambient_zone: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfIsAmbientZoneEnabled {
    crate::__imports::native_is_ambient_zone_enabled(ambient_zone)
}
pub fn get_vehicle_default_horn(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleDefaultHorn {
    crate::__imports::native_get_vehicle_default_horn(vehicle)
}
pub fn prepare_synchronized_audio_event_for_scene(scene_i_d: i32,
audio_event: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfPrepareSynchronizedAudioEventForScene {
    crate::__imports::native_prepare_synchronized_audio_event_for_scene(scene_i_d,
audio_event)
}
pub fn set_radio_position_audio_mute(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetRadioPositionAudioMute {
    crate::__imports::native_set_radio_position_audio_mute(p0)
}
pub fn unlock_radio_station_track_list(radio_station: Option<&String>,
track_list_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfUnlockRadioStationTrackList {
    crate::__imports::native_unlock_radio_station_track_list(radio_station,
track_list_name)
}
pub fn can_vehicle_receive_cb_radio(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfCanVehicleReceiveCbRadio {
    crate::__imports::native_can_vehicle_receive_cb_radio(vehicle)
}
pub fn set_vehicle_horn_sound_index(vehicle: u32,
value: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleHornSoundIndex {
    crate::__imports::native_set_vehicle_horn_sound_index(vehicle,
value)
}
pub fn start_alarm(alarm_name: Option<&String>,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfStartAlarm {
    crate::__imports::native_start_alarm(alarm_name,
p2)
}
pub fn set_portal_settings_override(p0: Option<&String>,
p1: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetPortalSettingsOverride {
    crate::__imports::native_set_portal_settings_override(p0,
p1)
}
pub fn is_ped_in_current_conversation(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedInCurrentConversation {
    crate::__imports::native_is_ped_in_current_conversation(ped)
}
pub fn is_radio_faded_out() -> altv_wasm_shared::natives_result::ResultOfIsRadioFadedOut {
    crate::__imports::native_is_radio_faded_out()
}
pub fn force_ped_panic_walla() -> altv_wasm_shared::natives_result::ResultOfForcePedPanicWalla {
    crate::__imports::native_force_ped_panic_walla()
}
pub fn set_ped_footsteps_events_enabled(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedFootstepsEventsEnabled {
    crate::__imports::native_set_ped_footsteps_events_enabled(ped,
toggle)
}
pub fn set_script_update_door_audio(door_hash: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetScriptUpdateDoorAudio {
    crate::__imports::native_set_script_update_door_audio(door_hash,
toggle)
}
pub fn set_conversation_audio_controlled_by_anim(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetConversationAudioControlledByAnim {
    crate::__imports::native_set_conversation_audio_controlled_by_anim(p0)
}
pub fn set_ped_voice_group_from_race_to_pvg(ped: u32,
voice_group_hash: u32) -> altv_wasm_shared::natives_result::ResultOfSetPedVoiceGroupFromRaceToPvg {
    crate::__imports::native_set_ped_voice_group_from_race_to_pvg(ped,
voice_group_hash)
}
pub fn is_vehicle_radio_on(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleRadioOn {
    crate::__imports::native_is_vehicle_radio_on(vehicle)
}
pub fn release_mission_audio_bank() -> altv_wasm_shared::natives_result::ResultOfReleaseMissionAudioBank {
    crate::__imports::native_release_mission_audio_bank()
}
pub fn does_player_veh_have_radio() -> altv_wasm_shared::natives_result::ResultOfDoesPlayerVehHaveRadio {
    crate::__imports::native_does_player_veh_have_radio()
}
pub fn set_mobile_radio_enabled_during_gameplay(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetMobileRadioEnabledDuringGameplay {
    crate::__imports::native_set_mobile_radio_enabled_during_gameplay(toggle)
}
pub fn unhint_named_script_audio_bank(audio_bank: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfUnhintNamedScriptAudioBank {
    crate::__imports::native_unhint_named_script_audio_bank(audio_bank)
}
pub fn clear_ambient_zone_list_state(ambient_zone: Option<&String>,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfClearAmbientZoneListState {
    crate::__imports::native_clear_ambient_zone_list_state(ambient_zone,
p1)
}
pub fn set_audio_special_effect_mode(mode: i32) -> altv_wasm_shared::natives_result::ResultOfSetAudioSpecialEffectMode {
    crate::__imports::native_set_audio_special_effect_mode(mode)
}
pub fn override_trevor_rage(voice_effect: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfOverrideTrevorRage {
    crate::__imports::native_override_trevor_rage(voice_effect)
}
pub fn set_ped_walla_density(p0: f32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedWallaDensity {
    crate::__imports::native_set_ped_walla_density(p0,
p1)
}
pub fn add_entity_to_audio_mix_group(entity: u32,
group_name: Option<&String>,
p2: f32) -> altv_wasm_shared::natives_result::ResultOfAddEntityToAudioMixGroup {
    crate::__imports::native_add_entity_to_audio_mix_group(entity,
group_name,
p2)
}
pub fn set_global_radio_signal_level(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetGlobalRadioSignalLevel {
    crate::__imports::native_set_global_radio_signal_level(p0)
}
pub fn clear_custom_radio_track_list(radio_station: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfClearCustomRadioTrackList {
    crate::__imports::native_clear_custom_radio_track_list(radio_station)
}
pub fn is_scripted_conversation_ongoing() -> altv_wasm_shared::natives_result::ResultOfIsScriptedConversationOngoing {
    crate::__imports::native_is_scripted_conversation_ongoing()
}
pub fn remove_entity_from_audio_mix_group(entity: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfRemoveEntityFromAudioMixGroup {
    crate::__imports::native_remove_entity_from_audio_mix_group(entity,
p1)
}
pub fn is_mission_complete_playing() -> altv_wasm_shared::natives_result::ResultOfIsMissionCompletePlaying {
    crate::__imports::native_is_mission_complete_playing()
}
pub fn unhint_ambient_audio_bank() -> altv_wasm_shared::natives_result::ResultOfUnhintAmbientAudioBank {
    crate::__imports::native_unhint_ambient_audio_bank()
}
pub fn set_user_radio_control_enabled(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetUserRadioControlEnabled {
    crate::__imports::native_set_user_radio_control_enabled(toggle)
}
pub fn set_ped_race_and_voice_group(ped: u32,
p1: i32,
voice_group: u32) -> altv_wasm_shared::natives_result::ResultOfSetPedRaceAndVoiceGroup {
    crate::__imports::native_set_ped_race_and_voice_group(ped,
p1,
voice_group)
}
pub fn blip_siren(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfBlipSiren {
    crate::__imports::native_blip_siren(vehicle)
}
pub fn set_veh_radio_station(vehicle: u32,
radio_station: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetVehRadioStation {
    crate::__imports::native_set_veh_radio_station(vehicle,
radio_station)
}
pub fn enable_vehicle_fanbelt_damage(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfEnableVehicleFanbeltDamage {
    crate::__imports::native_enable_vehicle_fanbelt_damage(vehicle,
toggle)
}
pub fn set_ambient_zone_state_persistent(ambient_zone: Option<&String>,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetAmbientZoneStatePersistent {
    crate::__imports::native_set_ambient_zone_state_persistent(ambient_zone,
p1,
p2)
}
pub fn prepare_music_event(event_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfPrepareMusicEvent {
    crate::__imports::native_prepare_music_event(event_name)
}
pub fn is_ped_ringtone_playing(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedRingtonePlaying {
    crate::__imports::native_is_ped_ringtone_playing(ped)
}
pub fn load_stream(stream_name: Option<&String>,
sound_set: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfLoadStream {
    crate::__imports::native_load_stream(stream_name,
sound_set)
}
pub fn set_siren_with_no_driver(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetSirenWithNoDriver {
    crate::__imports::native_set_siren_with_no_driver(vehicle,
toggle)
}
pub fn play_stream_from_position(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfPlayStreamFromPosition {
    crate::__imports::native_play_stream_from_position(x,
y,
z)
}
pub fn clear_ambient_zone_state(zone_name: Option<&String>,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfClearAmbientZoneState {
    crate::__imports::native_clear_ambient_zone_state(zone_name,
p1)
}
pub fn is_alarm_playing(alarm_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfIsAlarmPlaying {
    crate::__imports::native_is_alarm_playing(alarm_name)
}
pub fn start_preloaded_conversation() -> altv_wasm_shared::natives_result::ResultOfStartPreloadedConversation {
    crate::__imports::native_start_preloaded_conversation()
}
pub fn start_script_phone_conversation(p0: bool,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfStartScriptPhoneConversation {
    crate::__imports::native_start_script_phone_conversation(p0,
p1)
}
pub fn set_ped_cloth_events_enabled(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedClothEventsEnabled {
    crate::__imports::native_set_ped_cloth_events_enabled(ped,
toggle)
}
pub fn unblock_speech_context_group(p0: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfUnblockSpeechContextGroup {
    crate::__imports::native_unblock_speech_context_group(p0)
}
pub fn is_radio_station_favourited(radio_station: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfIsRadioStationFavourited {
    crate::__imports::native_is_radio_station_favourited(radio_station)
}
pub fn enable_vehicle_exhaust_pops(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfEnableVehicleExhaustPops {
    crate::__imports::native_enable_vehicle_exhaust_pops(vehicle,
toggle)
}
pub fn set_radio_frontend_fade_time(fade_time: f32) -> altv_wasm_shared::natives_result::ResultOfSetRadioFrontendFadeTime {
    crate::__imports::native_set_radio_frontend_fade_time(fade_time)
}
pub fn set_radio_track_with_start_offset(radio_station_name: Option<&String>,
mix_name: Option<&String>,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfSetRadioTrackWithStartOffset {
    crate::__imports::native_set_radio_track_with_start_offset(radio_station_name,
mix_name,
p2)
}
pub fn audio_is_scripted_music_playing() -> altv_wasm_shared::natives_result::ResultOfAudioIsScriptedMusicPlaying {
    crate::__imports::native_audio_is_scripted_music_playing()
}
pub fn get_network_id_from_sound_id(sound_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetNetworkIdFromSoundId {
    crate::__imports::native_get_network_id_from_sound_id(sound_id)
}
pub fn stop_all_alarms(stop: bool) -> altv_wasm_shared::natives_result::ResultOfStopAllAlarms {
    crate::__imports::native_stop_all_alarms(stop)
}
pub fn request_script_audio_bank(audio_bank: Option<&String>,
p1: bool,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfRequestScriptAudioBank {
    crate::__imports::native_request_script_audio_bank(audio_bank,
p1,
p2)
}
pub fn set_variable_on_stream(unk_variable: Option<&String>,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetVariableOnStream {
    crate::__imports::native_set_variable_on_stream(unk_variable,
p1)
}
pub fn is_any_positional_speech_playing() -> altv_wasm_shared::natives_result::ResultOfIsAnyPositionalSpeechPlaying {
    crate::__imports::native_is_any_positional_speech_playing()
}
pub fn set_position_for_null_conv_ped(p0: i32,
p1: f32,
p2: f32,
p3: f32) -> altv_wasm_shared::natives_result::ResultOfSetPositionForNullConvPed {
    crate::__imports::native_set_position_for_null_conv_ped(p0,
p1,
p2,
p3)
}
pub fn freeze_radio_station(radio_station: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfFreezeRadioStation {
    crate::__imports::native_freeze_radio_station(radio_station)
}
pub fn get_current_track_sound_name(radio_station_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetCurrentTrackSoundName {
    crate::__imports::native_get_current_track_sound_name(radio_station_name)
}
pub fn play_ped_ambient_speech_with_voice_native(ped: u32,
speech_name: Option<&String>,
voice_name: Option<&String>,
speech_param: Option<&String>,
p4: bool) -> altv_wasm_shared::natives_result::ResultOfPlayPedAmbientSpeechWithVoiceNative {
    crate::__imports::native_play_ped_ambient_speech_with_voice_native(ped,
speech_name,
voice_name,
speech_param,
p4)
}
pub fn release_sound_id(sound_id: i32) -> altv_wasm_shared::natives_result::ResultOfReleaseSoundId {
    crate::__imports::native_release_sound_id(sound_id)
}
pub fn set_aggressive_horns(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetAggressiveHorns {
    crate::__imports::native_set_aggressive_horns(toggle)
}
pub fn set_static_emitter_enabled(emitter_name: Option<&String>,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetStaticEmitterEnabled {
    crate::__imports::native_set_static_emitter_enabled(emitter_name,
toggle)
}
pub fn get_music_vol_slider() -> altv_wasm_shared::natives_result::ResultOfGetMusicVolSlider {
    crate::__imports::native_get_music_vol_slider()
}
pub fn play_vehicle_door_open_sound(vehicle: u32,
door_id: i32) -> altv_wasm_shared::natives_result::ResultOfPlayVehicleDoorOpenSound {
    crate::__imports::native_play_vehicle_door_open_sound(vehicle,
door_id)
}
pub fn preload_script_conversation(p0: bool,
p1: bool,
p2: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfPreloadScriptConversation {
    crate::__imports::native_preload_script_conversation(p0,
p1,
p2,
p3)
}
pub fn set_cutscene_audio_override(name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetCutsceneAudioOverride {
    crate::__imports::native_set_cutscene_audio_override(name)
}
pub fn set_vehicle_radio_enabled(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleRadioEnabled {
    crate::__imports::native_set_vehicle_radio_enabled(vehicle,
toggle)
}
pub fn set_gps_active(active: bool) -> altv_wasm_shared::natives_result::ResultOfSetGpsActive {
    crate::__imports::native_set_gps_active(active)
}
pub fn override_veh_horn(vehicle: u32,
r#override: bool,
horn_hash: i32) -> altv_wasm_shared::natives_result::ResultOfOverrideVehHorn {
    crate::__imports::native_override_veh_horn(vehicle,
r#override,
horn_hash)
}
pub fn set_veh_has_normal_radio(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfSetVehHasNormalRadio {
    crate::__imports::native_set_veh_has_normal_radio(vehicle)
}
pub fn get_current_track_play_time(radio_station_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetCurrentTrackPlayTime {
    crate::__imports::native_get_current_track_play_time(radio_station_name)
}
pub fn hint_mission_audio_bank(audio_bank: Option<&String>,
p1: bool,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfHintMissionAudioBank {
    crate::__imports::native_hint_mission_audio_bank(audio_bank,
p1,
p2)
}
pub fn set_ped_voice_full(ped: u32) -> altv_wasm_shared::natives_result::ResultOfSetPedVoiceFull {
    crate::__imports::native_set_ped_voice_full(ped)
}
pub fn get_sound_id() -> altv_wasm_shared::natives_result::ResultOfGetSoundId {
    crate::__imports::native_get_sound_id()
}
pub fn set_siren_can_be_controlled_by_audio(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetSirenCanBeControlledByAudio {
    crate::__imports::native_set_siren_can_be_controlled_by_audio(vehicle,
p1)
}
pub fn lock_radio_station(radio_station_name: Option<&String>,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfLockRadioStation {
    crate::__imports::native_lock_radio_station(radio_station_name,
toggle)
}
pub fn update_unlockable_dj_radio_tracks(enable_mixes: bool) -> altv_wasm_shared::natives_result::ResultOfUpdateUnlockableDjRadioTracks {
    crate::__imports::native_update_unlockable_dj_radio_tracks(enable_mixes)
}
pub fn get_current_scripted_conversation_line() -> altv_wasm_shared::natives_result::ResultOfGetCurrentScriptedConversationLine {
    crate::__imports::native_get_current_scripted_conversation_line()
}
pub fn does_context_exist_for_this_ped(ped: u32,
speech_name: Option<&String>,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfDoesContextExistForThisPed {
    crate::__imports::native_does_context_exist_for_this_ped(ped,
speech_name,
p2)
}
pub fn set_vehicle_boost_active(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleBoostActive {
    crate::__imports::native_set_vehicle_boost_active(vehicle,
toggle)
}
pub fn request_tennis_banks(ped: u32) -> altv_wasm_shared::natives_result::ResultOfRequestTennisBanks {
    crate::__imports::native_request_tennis_banks(ped)
}
pub fn set_radio_station_as_favourite(radio_station: Option<&String>,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetRadioStationAsFavourite {
    crate::__imports::native_set_radio_station_as_favourite(radio_station,
toggle)
}
pub fn force_music_track_list(radio_station: Option<&String>,
track_list_name: Option<&String>,
milliseconds: i32) -> altv_wasm_shared::natives_result::ResultOfForceMusicTrackList {
    crate::__imports::native_force_music_track_list(radio_station,
track_list_name,
milliseconds)
}
pub fn set_custom_radio_track_list(radio_station: Option<&String>,
track_list_name: Option<&String>,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetCustomRadioTrackList {
    crate::__imports::native_set_custom_radio_track_list(radio_station,
track_list_name,
p2)
}
pub fn get_stream_play_time() -> altv_wasm_shared::natives_result::ResultOfGetStreamPlayTime {
    crate::__imports::native_get_stream_play_time()
}
pub fn force_use_audio_game_object(vehicle: u32,
audio_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfForceUseAudioGameObject {
    crate::__imports::native_force_use_audio_game_object(vehicle,
audio_name)
}
pub fn get_audible_music_track_text_id() -> altv_wasm_shared::natives_result::ResultOfGetAudibleMusicTrackTextId {
    crate::__imports::native_get_audible_music_track_text_id()
}
pub fn has_loaded_mp_data_set() -> altv_wasm_shared::natives_result::ResultOfHasLoadedMpDataSet {
    crate::__imports::native_has_loaded_mp_data_set()
}
pub fn distant_cop_car_sirens(value: bool) -> altv_wasm_shared::natives_result::ResultOfDistantCopCarSirens {
    crate::__imports::native_distant_cop_car_sirens(value)
}
pub fn set_next_radio_track(radio_name: Option<&String>,
radio_track: Option<&String>,
p2: Option<&String>,
p3: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetNextRadioTrack {
    crate::__imports::native_set_next_radio_track(radio_name,
radio_track,
p2,
p3)
}
pub fn set_vehicle_conversations_persist(p0: bool,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleConversationsPersist {
    crate::__imports::native_set_vehicle_conversations_persist(p0,
p1)
}
pub fn play_stream_frontend() -> altv_wasm_shared::natives_result::ResultOfPlayStreamFrontend {
    crate::__imports::native_play_stream_frontend()
}
pub fn load_stream_with_start_offset(stream_name: Option<&String>,
start_offset: i32,
sound_set: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfLoadStreamWithStartOffset {
    crate::__imports::native_load_stream_with_start_offset(stream_name,
start_offset,
sound_set)
}
pub fn set_vehicle_audio_engine_damage_factor(vehicle: u32,
damage_factor: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleAudioEngineDamageFactor {
    crate::__imports::native_set_vehicle_audio_engine_damage_factor(vehicle,
damage_factor)
}
pub fn cancel_music_event(event_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfCancelMusicEvent {
    crate::__imports::native_cancel_music_event(event_name)
}
pub fn has_loaded_sp_data_set() -> altv_wasm_shared::natives_result::ResultOfHasLoadedSpDataSet {
    crate::__imports::native_has_loaded_sp_data_set()
}
pub fn play_sound_from_entity_hash(sound_id: i32,
model: u32,
entity: u32,
sound_set_hash: u32,
p4: i32,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfPlaySoundFromEntityHash {
    crate::__imports::native_play_sound_from_entity_hash(sound_id,
model,
entity,
sound_set_hash,
p4,
p5)
}
pub fn refresh_closest_ocean_shoreline() -> altv_wasm_shared::natives_result::ResultOfRefreshClosestOceanShoreline {
    crate::__imports::native_refresh_closest_ocean_shoreline()
}
pub fn is_vehicle_audibly_damaged(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleAudiblyDamaged {
    crate::__imports::native_is_vehicle_audibly_damaged(vehicle)
}
pub fn get_ambient_voice_name_hash(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetAmbientVoiceNameHash {
    crate::__imports::native_get_ambient_voice_name_hash(ped)
}
pub fn is_player_veh_radio_enable() -> altv_wasm_shared::natives_result::ResultOfIsPlayerVehRadioEnable {
    crate::__imports::native_is_player_veh_radio_enable()
}
pub fn preload_script_phone_conversation(p0: bool,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfPreloadScriptPhoneConversation {
    crate::__imports::native_preload_script_phone_conversation(p0,
p1)
}
pub fn set_conversation_audio_placeholder(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetConversationAudioPlaceholder {
    crate::__imports::native_set_conversation_audio_placeholder(p0)
}
pub fn play_vehicle_door_close_sound(vehicle: u32,
door_id: i32) -> altv_wasm_shared::natives_result::ResultOfPlayVehicleDoorCloseSound {
    crate::__imports::native_play_vehicle_door_close_sound(vehicle,
door_id)
}
pub fn link_static_emitter_to_entity(emitter_name: Option<&String>,
entity: u32) -> altv_wasm_shared::natives_result::ResultOfLinkStaticEmitterToEntity {
    crate::__imports::native_link_static_emitter_to_entity(emitter_name,
entity)
}
pub fn release_ambient_audio_bank() -> altv_wasm_shared::natives_result::ResultOfReleaseAmbientAudioBank {
    crate::__imports::native_release_ambient_audio_bank()
}
pub fn trigger_siren_audio(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfTriggerSirenAudio {
    crate::__imports::native_trigger_siren_audio(vehicle)
}
pub fn is_mission_news_story_unlocked(news_story: i32) -> altv_wasm_shared::natives_result::ResultOfIsMissionNewsStoryUnlocked {
    crate::__imports::native_is_mission_news_story_unlocked(news_story)
}
pub fn play_sound_frontend(sound_id: i32,
audio_name: Option<&String>,
audio_ref: Option<&String>,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfPlaySoundFrontend {
    crate::__imports::native_play_sound_frontend(sound_id,
audio_name,
audio_ref,
p3)
}
pub fn start_script_conversation(p0: bool,
p1: bool,
p2: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfStartScriptConversation {
    crate::__imports::native_start_script_conversation(p0,
p1,
p2,
p3)
}
pub fn stop_ped_ringtone(ped: u32) -> altv_wasm_shared::natives_result::ResultOfStopPedRingtone {
    crate::__imports::native_stop_ped_ringtone(ped)
}
pub fn set_ambient_voice_name(ped: u32,
name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetAmbientVoiceName {
    crate::__imports::native_set_ambient_voice_name(ped,
name)
}
pub fn is_game_in_control_of_music() -> altv_wasm_shared::natives_result::ResultOfIsGameInControlOfMusic {
    crate::__imports::native_is_game_in_control_of_music()
}
pub fn skip_radio_forward() -> altv_wasm_shared::natives_result::ResultOfSkipRadioForward {
    crate::__imports::native_skip_radio_forward()
}
pub fn is_mission_complete_ready_for_ui() -> altv_wasm_shared::natives_result::ResultOfIsMissionCompleteReadyForUi {
    crate::__imports::native_is_mission_complete_ready_for_ui()
}
pub fn set_player_vehicle_alarm_audio_active(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerVehicleAlarmAudioActive {
    crate::__imports::native_set_player_vehicle_alarm_audio_active(vehicle,
toggle)
}
pub fn trigger_music_event(event_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfTriggerMusicEvent {
    crate::__imports::native_trigger_music_event(event_name)
}
pub fn script_overrides_wind_elevation(p0: bool,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfScriptOverridesWindElevation {
    crate::__imports::native_script_overrides_wind_elevation(p0,
p1)
}
pub fn is_any_speech_playing(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsAnySpeechPlaying {
    crate::__imports::native_is_any_speech_playing(ped)
}
pub fn set_variable_on_under_water_stream(unk_variable_name: Option<&String>,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetVariableOnUnderWaterStream {
    crate::__imports::native_set_variable_on_under_water_stream(unk_variable_name,
value)
}
pub fn request_mission_audio_bank(audio_bank: Option<&String>,
p1: bool,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfRequestMissionAudioBank {
    crate::__imports::native_request_mission_audio_bank(audio_bank,
p1,
p2)
}
pub fn is_mobile_phone_call_ongoing() -> altv_wasm_shared::natives_result::ResultOfIsMobilePhoneCallOngoing {
    crate::__imports::native_is_mobile_phone_call_ongoing()
}
pub fn get_sound_id_from_network_id(net_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetSoundIdFromNetworkId {
    crate::__imports::native_get_sound_id_from_network_id(net_id)
}
pub fn override_microphone_settings(hash: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfOverrideMicrophoneSettings {
    crate::__imports::native_override_microphone_settings(hash,
toggle)
}
pub fn set_horn_enabled(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetHornEnabled {
    crate::__imports::native_set_horn_enabled(vehicle,
toggle)
}
pub fn set_radio_station_music_only(radio_station: Option<&String>,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetRadioStationMusicOnly {
    crate::__imports::native_set_radio_station_music_only(radio_station,
toggle)
}
pub fn release_named_script_audio_bank(audio_bank: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfReleaseNamedScriptAudioBank {
    crate::__imports::native_release_named_script_audio_bank(audio_bank)
}
pub fn release_script_audio_bank() -> altv_wasm_shared::natives_result::ResultOfReleaseScriptAudioBank {
    crate::__imports::native_release_script_audio_bank()
}
pub fn stop_current_playing_speech(ped: u32) -> altv_wasm_shared::natives_result::ResultOfStopCurrentPlayingSpeech {
    crate::__imports::native_stop_current_playing_speech(ped)
}
pub fn set_ped_voice_group(ped: u32,
voice_group_hash: u32) -> altv_wasm_shared::natives_result::ResultOfSetPedVoiceGroup {
    crate::__imports::native_set_ped_voice_group(ped,
voice_group_hash)
}
pub fn update_sound_coord(sound_id: i32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfUpdateSoundCoord {
    crate::__imports::native_update_sound_coord(sound_id,
x,
y,
z)
}
pub fn play_sound(sound_id: i32,
audio_name: Option<&String>,
audio_ref: Option<&String>,
p3: bool,
p4: i32,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfPlaySound {
    crate::__imports::native_play_sound(sound_id,
audio_name,
audio_ref,
p3,
p4,
p5)
}
pub fn stop_cutscene_audio() -> altv_wasm_shared::natives_result::ResultOfStopCutsceneAudio {
    crate::__imports::native_stop_cutscene_audio()
}
pub fn audio_is_music_playing() -> altv_wasm_shared::natives_result::ResultOfAudioIsMusicPlaying {
    crate::__imports::native_audio_is_music_playing()
}
pub fn pause_scripted_conversation(p0: bool) -> altv_wasm_shared::natives_result::ResultOfPauseScriptedConversation {
    crate::__imports::native_pause_scripted_conversation(p0)
}
pub fn set_initial_player_station(radio_station: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetInitialPlayerStation {
    crate::__imports::native_set_initial_player_station(radio_station)
}
pub fn play_stream_from_ped(ped: u32) -> altv_wasm_shared::natives_result::ResultOfPlayStreamFromPed {
    crate::__imports::native_play_stream_from_ped(ped)
}
pub fn set_entity_for_null_conv_ped(p0: i32,
entity: u32) -> altv_wasm_shared::natives_result::ResultOfSetEntityForNullConvPed {
    crate::__imports::native_set_entity_for_null_conv_ped(p0,
entity)
}
pub fn interrupt_conversation_and_pause(ped: u32,
p1: Option<&String>,
speaker: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfInterruptConversationAndPause {
    crate::__imports::native_interrupt_conversation_and_pause(ped,
p1,
speaker)
}
pub fn play_synchronized_audio_event(scene_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfPlaySynchronizedAudioEvent {
    crate::__imports::native_play_synchronized_audio_event(scene_i_d)
}
pub fn set_ped_interior_walla_density(p0: f32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedInteriorWallaDensity {
    crate::__imports::native_set_ped_interior_walla_density(p0,
p1)
}
pub fn find_radio_station_index(station_name_hash: u32) -> altv_wasm_shared::natives_result::ResultOfFindRadioStationIndex {
    crate::__imports::native_find_radio_station_index(station_name_hash)
}
pub fn play_sound_from_coord(sound_id: i32,
audio_name: Option<&String>,
x: f32,
y: f32,
z: f32,
audio_ref: Option<&String>,
is_network: bool,
range: i32,
p8: bool) -> altv_wasm_shared::natives_result::ResultOfPlaySoundFromCoord {
    crate::__imports::native_play_sound_from_coord(sound_id,
audio_name,
x,
y,
z,
audio_ref,
is_network,
range,
p8)
}
pub fn play_ped_ambient_speech_native(ped: u32,
speech_name: Option<&String>,
speech_param: Option<&String>,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfPlayPedAmbientSpeechNative {
    crate::__imports::native_play_ped_ambient_speech_native(ped,
speech_name,
speech_param,
p3)
}
pub fn hint_ambient_audio_bank(audio_bank: Option<&String>,
p1: bool,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfHintAmbientAudioBank {
    crate::__imports::native_hint_ambient_audio_bank(audio_bank,
p1,
p2)
}
pub fn is_ambient_speech_playing(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsAmbientSpeechPlaying {
    crate::__imports::native_is_ambient_speech_playing(ped)
}
pub fn stop_synchronized_audio_event(scene_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfStopSynchronizedAudioEvent {
    crate::__imports::native_stop_synchronized_audio_event(scene_i_d)
}
pub fn is_ambient_speech_disabled(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsAmbientSpeechDisabled {
    crate::__imports::native_is_ambient_speech_disabled(ped)
}
pub fn init_synch_scene_audio_with_entity(audio_event: Option<&String>,
entity: u32) -> altv_wasm_shared::natives_result::ResultOfInitSynchSceneAudioWithEntity {
    crate::__imports::native_init_synch_scene_audio_with_entity(audio_event,
entity)
}
pub fn set_ped_is_drunk(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedIsDrunk {
    crate::__imports::native_set_ped_is_drunk(ped,
toggle)
}
pub fn add_ped_to_conversation(index: i32,
ped: u32,
p2: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAddPedToConversation {
    crate::__imports::native_add_ped_to_conversation(index,
ped,
p2)
}
pub fn skip_to_next_scripted_conversation_line() -> altv_wasm_shared::natives_result::ResultOfSkipToNextScriptedConversationLine {
    crate::__imports::native_skip_to_next_scripted_conversation_line()
}
pub fn set_ambient_zone_list_state(ambient_zone: Option<&String>,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetAmbientZoneListState {
    crate::__imports::native_set_ambient_zone_list_state(ambient_zone,
p1,
p2)
}
pub fn set_vehicle_force_reverse_warning(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleForceReverseWarning {
    crate::__imports::native_set_vehicle_force_reverse_warning(p0,
p1)
}
pub fn set_ambient_voice_name_hash(ped: u32,
hash: u32) -> altv_wasm_shared::natives_result::ResultOfSetAmbientVoiceNameHash {
    crate::__imports::native_set_ambient_voice_name_hash(ped,
hash)
}
pub fn unhint_script_audio_bank() -> altv_wasm_shared::natives_result::ResultOfUnhintScriptAudioBank {
    crate::__imports::native_unhint_script_audio_bank()
}
pub fn restart_scripted_conversation() -> altv_wasm_shared::natives_result::ResultOfRestartScriptedConversation {
    crate::__imports::native_restart_scripted_conversation()
}
pub fn set_vehicle_conversations_persist_new(p0: bool,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleConversationsPersistNew {
    crate::__imports::native_set_vehicle_conversations_persist_new(p0,
p1,
p2)
}
pub fn set_horn_permanently_on(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfSetHornPermanentlyOn {
    crate::__imports::native_set_horn_permanently_on(vehicle)
}
pub fn set_horn_permanently_on_time(vehicle: u32,
time: f32) -> altv_wasm_shared::natives_result::ResultOfSetHornPermanentlyOnTime {
    crate::__imports::native_set_horn_permanently_on_time(vehicle,
time)
}
pub fn stop_ped_speaking(ped: u32,
shaking: bool) -> altv_wasm_shared::natives_result::ResultOfStopPedSpeaking {
    crate::__imports::native_stop_ped_speaking(ped,
shaking)
}
pub fn is_horn_active(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsHornActive {
    crate::__imports::native_is_horn_active(vehicle)
}
pub fn prepare_alarm(alarm_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfPrepareAlarm {
    crate::__imports::native_prepare_alarm(alarm_name)
}
pub fn interrupt_conversation(ped: u32,
voiceline: Option<&String>,
speaker: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfInterruptConversation {
    crate::__imports::native_interrupt_conversation(ped,
voiceline,
speaker)
}
pub fn is_music_oneshot_playing() -> altv_wasm_shared::natives_result::ResultOfIsMusicOneshotPlaying {
    crate::__imports::native_is_music_oneshot_playing()
}
pub fn is_radio_retuning() -> altv_wasm_shared::natives_result::ResultOfIsRadioRetuning {
    crate::__imports::native_is_radio_retuning()
}
pub fn stop_alarm(alarm_name: Option<&String>,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfStopAlarm {
    crate::__imports::native_stop_alarm(alarm_name,
toggle)
}
pub fn stop_sound(sound_id: i32) -> altv_wasm_shared::natives_result::ResultOfStopSound {
    crate::__imports::native_stop_sound(sound_id)
}
pub fn stop_stream() -> altv_wasm_shared::natives_result::ResultOfStopStream {
    crate::__imports::native_stop_stream()
}
pub fn set_ped_gender(ped: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedGender {
    crate::__imports::native_set_ped_gender(ped,
p1)
}
pub fn get_player_radio_station_genre() -> altv_wasm_shared::natives_result::ResultOfGetPlayerRadioStationGenre {
    crate::__imports::native_get_player_radio_station_genre()
}
pub fn set_audio_script_cleanup_time(time: i32) -> altv_wasm_shared::natives_result::ResultOfSetAudioScriptCleanupTime {
    crate::__imports::native_set_audio_script_cleanup_time(time)
}
pub fn set_radio_to_station_index(radio_station: i32) -> altv_wasm_shared::natives_result::ResultOfSetRadioToStationIndex {
    crate::__imports::native_set_radio_to_station_index(radio_station)
}
pub fn unregister_script_with_audio() -> altv_wasm_shared::natives_result::ResultOfUnregisterScriptWithAudio {
    crate::__imports::native_unregister_script_with_audio()
}
pub fn block_speech_context_group(p0: Option<&String>,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfBlockSpeechContextGroup {
    crate::__imports::native_block_speech_context_group(p0,
p1)
}
pub fn disable_ped_pain_audio(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfDisablePedPainAudio {
    crate::__imports::native_disable_ped_pain_audio(ped,
toggle)
}
pub fn get_variation_chosen_for_scripted_line(p0: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetVariationChosenForScriptedLine {
    crate::__imports::native_get_variation_chosen_for_scripted_line(p0)
}
pub fn stop_ped_speaking_synced(ped: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfStopPedSpeakingSynced {
    crate::__imports::native_stop_ped_speaking_synced(ped,
p1)
}
pub fn get_vehicle_default_horn_ignore_mods(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleDefaultHornIgnoreMods {
    crate::__imports::native_get_vehicle_default_horn_ignore_mods(vehicle)
}
pub fn set_emitter_radio_station(emitter_name: Option<&String>,
radio_station: Option<&String>,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfSetEmitterRadioStation {
    crate::__imports::native_set_emitter_radio_station(emitter_name,
radio_station,
p2)
}
pub fn set_variable_on_sound(sound_id: i32,
unk_variable: Option<&String>,
p2: f32) -> altv_wasm_shared::natives_result::ResultOfSetVariableOnSound {
    crate::__imports::native_set_variable_on_sound(sound_id,
unk_variable,
p2)
}
pub fn play_mission_complete_audio(audio_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfPlayMissionCompleteAudio {
    crate::__imports::native_play_mission_complete_audio(audio_name)
}
pub fn unlock_mission_news_story(news_story: i32) -> altv_wasm_shared::natives_result::ResultOfUnlockMissionNewsStory {
    crate::__imports::native_unlock_mission_news_story(news_story)
}
pub fn get_radio_station_name(radio_station: i32) -> altv_wasm_shared::natives_result::ResultOfGetRadioStationName {
    crate::__imports::native_get_radio_station_name(radio_station)
}
pub fn clear_all_broken_glass() -> altv_wasm_shared::natives_result::ResultOfClearAllBrokenGlass {
    crate::__imports::native_clear_all_broken_glass()
}
pub fn is_mobile_phone_radio_active() -> altv_wasm_shared::natives_result::ResultOfIsMobilePhoneRadioActive {
    crate::__imports::native_is_mobile_phone_radio_active()
}
pub fn set_radio_track(radio_station: Option<&String>,
radio_track: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetRadioTrack {
    crate::__imports::native_set_radio_track(radio_station,
radio_track)
}
pub fn remove_portal_settings_override(p0: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRemovePortalSettingsOverride {
    crate::__imports::native_remove_portal_settings_override(p0)
}
pub fn cancel_all_police_reports() -> altv_wasm_shared::natives_result::ResultOfCancelAllPoliceReports {
    crate::__imports::native_cancel_all_police_reports()
}
pub fn set_no_ducking_for_conversation(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetNoDuckingForConversation {
    crate::__imports::native_set_no_ducking_for_conversation(p0)
}
pub fn is_audio_scene_active(scene: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfIsAudioSceneActive {
    crate::__imports::native_is_audio_scene_active(scene)
}
pub fn set_microphone_position(toggle: bool,
x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
x3: f32,
y3: f32,
z3: f32) -> altv_wasm_shared::natives_result::ResultOfSetMicrophonePosition {
    crate::__imports::native_set_microphone_position(toggle,
x1,
y1,
z1,
x2,
y2,
z2,
x3,
y3,
z3)
}
pub fn play_stream_from_vehicle(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfPlayStreamFromVehicle {
    crate::__imports::native_play_stream_from_vehicle(vehicle)
}
pub fn enable_stunt_jump_audio() -> altv_wasm_shared::natives_result::ResultOfEnableStuntJumpAudio {
    crate::__imports::native_enable_stunt_jump_audio()
}
pub fn stop_current_playing_ambient_speech(ped: u32) -> altv_wasm_shared::natives_result::ResultOfStopCurrentPlayingAmbientSpeech {
    crate::__imports::native_stop_current_playing_ambient_speech(ped)
}
pub fn set_audio_flag(flag_name: Option<&String>,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetAudioFlag {
    crate::__imports::native_set_audio_flag(flag_name,
toggle)
}
pub fn stop_audio_scenes() -> altv_wasm_shared::natives_result::ResultOfStopAudioScenes {
    crate::__imports::native_stop_audio_scenes()
}
pub fn set_vehicle_radio_loud(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleRadioLoud {
    crate::__imports::native_set_vehicle_radio_loud(vehicle,
toggle)
}
pub fn play_pain(ped: u32,
pain_i_d: i32,
p1: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfPlayPain {
    crate::__imports::native_play_pain(ped,
pain_i_d,
p1,
p3)
}
pub fn set_variable_on_synch_scene_audio(unk_variable_name: Option<&String>,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetVariableOnSynchSceneAudio {
    crate::__imports::native_set_variable_on_synch_scene_audio(unk_variable_name,
value)
}
pub fn set_ambient_zone_state(zone_name: Option<&String>,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetAmbientZoneState {
    crate::__imports::native_set_ambient_zone_state(zone_name,
p1,
p2)
}
pub fn set_skip_minigun_spin_up_audio(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetSkipMinigunSpinUpAudio {
    crate::__imports::native_set_skip_minigun_spin_up_audio(p0)
}
pub fn set_mobile_phone_radio_state(state: bool) -> altv_wasm_shared::natives_result::ResultOfSetMobilePhoneRadioState {
    crate::__imports::native_set_mobile_phone_radio_state(state)
}
pub fn use_footstep_script_sweeteners(ped: u32,
p1: bool,
hash: u32) -> altv_wasm_shared::natives_result::ResultOfUseFootstepScriptSweeteners {
    crate::__imports::native_use_footstep_script_sweeteners(ped,
p1,
hash)
}
pub fn enable_stall_warning_sounds(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfEnableStallWarningSounds {
    crate::__imports::native_enable_stall_warning_sounds(vehicle,
toggle)
}
pub fn set_veh_forced_radio_this_frame(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfSetVehForcedRadioThisFrame {
    crate::__imports::native_set_veh_forced_radio_this_frame(vehicle)
}
pub fn set_radio_auto_unfreeze(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetRadioAutoUnfreeze {
    crate::__imports::native_set_radio_auto_unfreeze(toggle)
}
pub fn is_animal_vocalization_playing(ped_handle: u32) -> altv_wasm_shared::natives_result::ResultOfIsAnimalVocalizationPlaying {
    crate::__imports::native_is_animal_vocalization_playing(ped_handle)
}
pub fn add_line_to_conversation(index: i32,
p1: Option<&String>,
p2: Option<&String>,
p3: i32,
p4: i32,
p5: bool,
p6: bool,
p7: bool,
p8: bool,
p9: i32,
p10: bool,
p11: bool,
p12: bool) -> altv_wasm_shared::natives_result::ResultOfAddLineToConversation {
    crate::__imports::native_add_line_to_conversation(index,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8,
p9,
p10,
p11,
p12)
}
pub fn get_next_audible_beat(out1: f32,
out2: f32,
out3: i32) -> altv_wasm_shared::natives_result::ResultOfGetNextAudibleBeat {
    crate::__imports::native_get_next_audible_beat(out1,
out2,
out3)
}
pub fn play_ped_ambient_speech_and_clone_native(ped: u32,
speech_name: Option<&String>,
speech_param: Option<&String>,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfPlayPedAmbientSpeechAndCloneNative {
    crate::__imports::native_play_ped_ambient_speech_and_clone_native(ped,
speech_name,
speech_param,
p3)
}
pub fn set_radio_to_station_name(station_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetRadioToStationName {
    crate::__imports::native_set_radio_to_station_name(station_name)
}
pub fn register_script_with_audio(p0: i32) -> altv_wasm_shared::natives_result::ResultOfRegisterScriptWithAudio {
    crate::__imports::native_register_script_with_audio(p0)
}
pub fn prepare_synchronized_audio_event(audio_event: Option<&String>,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfPrepareSynchronizedAudioEvent {
    crate::__imports::native_prepare_synchronized_audio_event(audio_event,
p1)
}
pub fn is_mobile_interference_active() -> altv_wasm_shared::natives_result::ResultOfIsMobileInterferenceActive {
    crate::__imports::native_is_mobile_interference_active()
}
pub fn init_synch_scene_audio_with_position(audio_event: Option<&String>,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfInitSynchSceneAudioWithPosition {
    crate::__imports::native_init_synch_scene_audio_with_position(audio_event,
x,
y,
z)
}
pub fn preload_vehicle_audio_bank(vehicle_model: u32) -> altv_wasm_shared::natives_result::ResultOfPreloadVehicleAudioBank {
    crate::__imports::native_preload_vehicle_audio_bank(vehicle_model)
}
pub fn play_deferred_sound_frontend(sound_name: Option<&String>,
soundset_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfPlayDeferredSoundFrontend {
    crate::__imports::native_play_deferred_sound_frontend(sound_name,
soundset_name)
}
pub fn set_animal_mood(animal: u32,
mood: i32) -> altv_wasm_shared::natives_result::ResultOfSetAnimalMood {
    crate::__imports::native_set_animal_mood(animal,
mood)
}
pub fn is_scripted_speech_playing(p0: u32) -> altv_wasm_shared::natives_result::ResultOfIsScriptedSpeechPlaying {
    crate::__imports::native_is_scripted_speech_playing(p0)
}
pub fn play_end_credits_music(play: bool) -> altv_wasm_shared::natives_result::ResultOfPlayEndCreditsMusic {
    crate::__imports::native_play_end_credits_music(play)
}
pub fn release_weapon_audio() -> altv_wasm_shared::natives_result::ResultOfReleaseWeaponAudio {
    crate::__imports::native_release_weapon_audio()
}
pub fn activate_audio_slowmo_mode(mode: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfActivateAudioSlowmoMode {
    crate::__imports::native_activate_audio_slowmo_mode(mode)
}
pub fn is_stream_playing() -> altv_wasm_shared::natives_result::ResultOfIsStreamPlaying {
    crate::__imports::native_is_stream_playing()
}
pub fn create_new_scripted_conversation() -> altv_wasm_shared::natives_result::ResultOfCreateNewScriptedConversation {
    crate::__imports::native_create_new_scripted_conversation()
}
pub fn override_player_ground_material(hash: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfOverridePlayerGroundMaterial {
    crate::__imports::native_override_player_ground_material(hash,
toggle)
}
pub fn reset_vehicle_startup_rev_sound(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfResetVehicleStartupRevSound {
    crate::__imports::native_reset_vehicle_startup_rev_sound(vehicle)
}
pub fn get_vehicle_horn_sound_index(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleHornSoundIndex {
    crate::__imports::native_get_vehicle_horn_sound_index(vehicle)
}
pub fn freeze_microphone() -> altv_wasm_shared::natives_result::ResultOfFreezeMicrophone {
    crate::__imports::native_freeze_microphone()
}
pub fn stop_scripted_conversation(p0: bool) -> altv_wasm_shared::natives_result::ResultOfStopScriptedConversation {
    crate::__imports::native_stop_scripted_conversation(p0)
}
pub fn set_positioned_player_vehicle_radio_emitter_enabled(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetPositionedPlayerVehicleRadioEmitterEnabled {
    crate::__imports::native_set_positioned_player_vehicle_radio_emitter_enabled(p0)
}
pub fn set_radio_retune_down() -> altv_wasm_shared::natives_result::ResultOfSetRadioRetuneDown {
    crate::__imports::native_set_radio_retune_down()
}
pub fn deactivate_audio_slowmo_mode(mode: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDeactivateAudioSlowmoMode {
    crate::__imports::native_deactivate_audio_slowmo_mode(mode)
}
pub fn is_scripted_conversation_loaded() -> altv_wasm_shared::natives_result::ResultOfIsScriptedConversationLoaded {
    crate::__imports::native_is_scripted_conversation_loaded()
}
pub fn stop_audio_scene(scene: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfStopAudioScene {
    crate::__imports::native_stop_audio_scene(scene)
}
pub fn play_police_report(name: Option<&String>,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfPlayPoliceReport {
    crate::__imports::native_play_police_report(name,
p1)
}
pub fn stop_smoke_grenade_explosion_sounds() -> altv_wasm_shared::natives_result::ResultOfStopSmokeGrenadeExplosionSounds {
    crate::__imports::native_stop_smoke_grenade_explosion_sounds()
}
pub fn set_audio_vehicle_priority(vehicle: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetAudioVehiclePriority {
    crate::__imports::native_set_audio_vehicle_priority(vehicle,
p1)
}
pub fn play_sound_from_entity(sound_id: i32,
audio_name: Option<&String>,
entity: u32,
audio_ref: Option<&String>,
is_network: bool,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfPlaySoundFromEntity {
    crate::__imports::native_play_sound_from_entity(sound_id,
audio_name,
entity,
audio_ref,
is_network,
p5)
}
pub fn get_is_preloaded_conversation_ready() -> altv_wasm_shared::natives_result::ResultOfGetIsPreloadedConversationReady {
    crate::__imports::native_get_is_preloaded_conversation_ready()
}
pub fn reset_trevor_rage() -> altv_wasm_shared::natives_result::ResultOfResetTrevorRage {
    crate::__imports::native_reset_trevor_rage()
}
pub fn get_music_playtime() -> altv_wasm_shared::natives_result::ResultOfGetMusicPlaytime {
    crate::__imports::native_get_music_playtime()
}
pub fn get_player_radio_station_index() -> altv_wasm_shared::natives_result::ResultOfGetPlayerRadioStationIndex {
    crate::__imports::native_get_player_radio_station_index()
}
pub fn set_player_angry(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerAngry {
    crate::__imports::native_set_player_angry(ped,
toggle)
}
pub fn play_stream_from_object(object: u32) -> altv_wasm_shared::natives_result::ResultOfPlayStreamFromObject {
    crate::__imports::native_play_stream_from_object(object)
}
pub fn play_ambient_speech_from_position_native(speech_name: Option<&String>,
voice_name: Option<&String>,
x: f32,
y: f32,
z: f32,
speech_param: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfPlayAmbientSpeechFromPositionNative {
    crate::__imports::native_play_ambient_speech_from_position_native(speech_name,
voice_name,
x,
y,
z,
speech_param)
}
pub fn play_animal_vocalization(ped_handle: u32,
p1: i32,
speech_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfPlayAnimalVocalization {
    crate::__imports::native_play_animal_vocalization(ped_handle,
p1,
speech_name)
}
pub fn set_audio_scene_variable(scene: Option<&String>,
unk_variable: Option<&String>,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetAudioSceneVariable {
    crate::__imports::native_set_audio_scene_variable(scene,
unk_variable,
value)
}
pub fn block_death_jingle(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfBlockDeathJingle {
    crate::__imports::native_block_death_jingle(toggle)
}
pub fn get_num_unlocked_radio_stations() -> altv_wasm_shared::natives_result::ResultOfGetNumUnlockedRadioStations {
    crate::__imports::native_get_num_unlocked_radio_stations()
}
pub fn set_vehicle_startup_rev_sound(vehicle: u32,
p1: Option<&String>,
p2: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetVehicleStartupRevSound {
    crate::__imports::native_set_vehicle_startup_rev_sound(vehicle,
p1,
p2)
}
pub fn override_underwater_stream(p0: Option<&String>,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfOverrideUnderwaterStream {
    crate::__imports::native_override_underwater_stream(p0,
p1)
}
pub fn set_vehicle_missile_warning_enabled(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleMissileWarningEnabled {
    crate::__imports::native_set_vehicle_missile_warning_enabled(vehicle,
toggle)
}
pub fn set_ambient_zone_list_state_persistent(ambient_zone: Option<&String>,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetAmbientZoneListStatePersistent {
    crate::__imports::native_set_ambient_zone_list_state_persistent(ambient_zone,
p1,
p2)
}
pub fn reset_ped_audio_flags(ped: u32) -> altv_wasm_shared::natives_result::ResultOfResetPedAudioFlags {
    crate::__imports::native_reset_ped_audio_flags(ped)
}
pub fn set_siren_bypass_mp_driver_check(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetSirenBypassMpDriverCheck {
    crate::__imports::native_set_siren_bypass_mp_driver_check(vehicle,
toggle)
}
pub fn get_player_radio_station_name() -> altv_wasm_shared::natives_result::ResultOfGetPlayerRadioStationName {
    crate::__imports::native_get_player_radio_station_name()
}
pub fn set_frontend_radio_active(active: bool) -> altv_wasm_shared::natives_result::ResultOfSetFrontendRadioActive {
    crate::__imports::native_set_frontend_radio_active(active)
}
pub fn block_all_speech_from_ped(ped: u32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfBlockAllSpeechFromPed {
    crate::__imports::native_block_all_speech_from_ped(ped,
p1,
p2)
}
pub fn play_ped_ringtone(ringtone_name: Option<&String>,
ped: u32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfPlayPedRingtone {
    crate::__imports::native_play_ped_ringtone(ringtone_name,
ped,
p2)
}
pub fn use_siren_as_horn(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfUseSirenAsHorn {
    crate::__imports::native_use_siren_as_horn(vehicle,
toggle)
}
pub fn hint_script_audio_bank(audio_bank: Option<&String>,
p1: bool,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfHintScriptAudioBank {
    crate::__imports::native_hint_script_audio_bank(audio_bank,
p1,
p2)
}
pub fn record_broken_glass(x: f32,
y: f32,
z: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfRecordBrokenGlass {
    crate::__imports::native_record_broken_glass(x,
y,
z,
radius)
}
pub fn unfreeze_radio_station(radio_station: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfUnfreezeRadioStation {
    crate::__imports::native_unfreeze_radio_station(radio_station)
}
pub fn has_sound_finished(sound_id: i32) -> altv_wasm_shared::natives_result::ResultOfHasSoundFinished {
    crate::__imports::native_has_sound_finished(sound_id)
}
pub fn request_ambient_audio_bank(audio_bank: Option<&String>,
p1: bool,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfRequestAmbientAudioBank {
    crate::__imports::native_request_ambient_audio_bank(audio_bank,
p1,
p2)
}
pub fn set_radio_retune_up() -> altv_wasm_shared::natives_result::ResultOfSetRadioRetuneUp {
    crate::__imports::native_set_radio_retune_up()
}
pub fn lock_radio_station_track_list(radio_station: Option<&String>,
track_list_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfLockRadioStationTrackList {
    crate::__imports::native_lock_radio_station_track_list(radio_station,
track_list_name)
}
pub fn reactivate_all_world_brains_that_are_waiting_till_out_of_range() -> altv_wasm_shared::natives_result::ResultOfReactivateAllWorldBrainsThatAreWaitingTillOutOfRange {
    crate::__imports::native_reactivate_all_world_brains_that_are_waiting_till_out_of_range()
}
pub fn register_object_script_brain(script_name: Option<&String>,
model_hash: u32,
p2: i32,
activation_range: f32,
p4: i32,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfRegisterObjectScriptBrain {
    crate::__imports::native_register_object_script_brain(script_name,
model_hash,
p2,
activation_range,
p4,
p5)
}
pub fn disable_script_brain_set(brain_set: i32) -> altv_wasm_shared::natives_result::ResultOfDisableScriptBrainSet {
    crate::__imports::native_disable_script_brain_set(brain_set)
}
pub fn register_world_point_script_brain(script_name: Option<&String>,
activation_range: f32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfRegisterWorldPointScriptBrain {
    crate::__imports::native_register_world_point_script_brain(script_name,
activation_range,
p2)
}
pub fn reactivate_all_object_brains_that_are_waiting_till_out_of_range() -> altv_wasm_shared::natives_result::ResultOfReactivateAllObjectBrainsThatAreWaitingTillOutOfRange {
    crate::__imports::native_reactivate_all_object_brains_that_are_waiting_till_out_of_range()
}
pub fn add_script_to_random_ped(name: Option<&String>,
model: u32,
p2: f32,
p3: f32) -> altv_wasm_shared::natives_result::ResultOfAddScriptToRandomPed {
    crate::__imports::native_add_script_to_random_ped(name,
model,
p2,
p3)
}
pub fn enable_script_brain_set(brain_set: i32) -> altv_wasm_shared::natives_result::ResultOfEnableScriptBrainSet {
    crate::__imports::native_enable_script_brain_set(brain_set)
}
pub fn reactivate_named_world_brains_waiting_till_out_of_range(script_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfReactivateNamedWorldBrainsWaitingTillOutOfRange {
    crate::__imports::native_reactivate_named_world_brains_waiting_till_out_of_range(script_name)
}
pub fn reactivate_named_object_brains_waiting_till_out_of_range(script_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfReactivateNamedObjectBrainsWaitingTillOutOfRange {
    crate::__imports::native_reactivate_named_object_brains_waiting_till_out_of_range(script_name)
}
pub fn is_world_point_within_brain_activation_range() -> altv_wasm_shared::natives_result::ResultOfIsWorldPointWithinBrainActivationRange {
    crate::__imports::native_is_world_point_within_brain_activation_range()
}
pub fn is_object_within_brain_activation_range(object: u32) -> altv_wasm_shared::natives_result::ResultOfIsObjectWithinBrainActivationRange {
    crate::__imports::native_is_object_within_brain_activation_range(object)
}
pub fn is_gameplay_cam_shaking() -> altv_wasm_shared::natives_result::ResultOfIsGameplayCamShaking {
    crate::__imports::native_is_gameplay_cam_shaking()
}
pub fn set_gameplay_cam_max_motion_blur_strength_this_update(p0: f32) -> altv_wasm_shared::natives_result::ResultOfSetGameplayCamMaxMotionBlurStrengthThisUpdate {
    crate::__imports::native_set_gameplay_cam_max_motion_blur_strength_this_update(p0)
}
pub fn set_cam_active(cam: i32,
active: bool) -> altv_wasm_shared::natives_result::ResultOfSetCamActive {
    crate::__imports::native_set_cam_active(cam,
active)
}
pub fn is_cam_spline_paused(cam: i32) -> altv_wasm_shared::natives_result::ResultOfIsCamSplinePaused {
    crate::__imports::native_is_cam_spline_paused(cam)
}
pub fn is_cam_rendering(cam: i32) -> altv_wasm_shared::natives_result::ResultOfIsCamRendering {
    crate::__imports::native_is_cam_rendering(cam)
}
pub fn is_cam_interpolating(cam: i32) -> altv_wasm_shared::natives_result::ResultOfIsCamInterpolating {
    crate::__imports::native_is_cam_interpolating(cam)
}
pub fn get_cam_dof_strength(cam: i32) -> altv_wasm_shared::natives_result::ResultOfGetCamDofStrength {
    crate::__imports::native_get_cam_dof_strength(cam)
}
pub fn render_script_cams(render: bool,
ease: bool,
ease_time: i32,
p3: bool,
p4: bool,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfRenderScriptCams {
    crate::__imports::native_render_script_cams(render,
ease,
ease_time,
p3,
p4,
p5)
}
pub fn add_cam_spline_node_using_camera_frame(cam: i32,
cam2: i32,
length: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfAddCamSplineNodeUsingCameraFrame {
    crate::__imports::native_add_cam_spline_node_using_camera_frame(cam,
cam2,
length,
p3)
}
pub fn force_vehicle_cam_stunt_settings_this_update() -> altv_wasm_shared::natives_result::ResultOfForceVehicleCamStuntSettingsThisUpdate {
    crate::__imports::native_force_vehicle_cam_stunt_settings_this_update()
}
pub fn set_first_person_aim_cam_near_clip_this_update(p0: f32) -> altv_wasm_shared::natives_result::ResultOfSetFirstPersonAimCamNearClipThisUpdate {
    crate::__imports::native_set_first_person_aim_cam_near_clip_this_update(p0)
}
pub fn stop_gameplay_cam_shaking(p0: bool) -> altv_wasm_shared::natives_result::ResultOfStopGameplayCamShaking {
    crate::__imports::native_stop_gameplay_cam_shaking(p0)
}
pub fn add_cam_spline_node_using_camera(cam: i32,
cam2: i32,
length: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfAddCamSplineNodeUsingCamera {
    crate::__imports::native_add_cam_spline_node_using_camera(cam,
cam2,
length,
p3)
}
pub fn set_first_person_shooter_camera_heading(yaw: f32) -> altv_wasm_shared::natives_result::ResultOfSetFirstPersonShooterCameraHeading {
    crate::__imports::native_set_first_person_shooter_camera_heading(yaw)
}
pub fn set_first_person_flash_effect_vehicle_model_hash(vehicle_model: u32) -> altv_wasm_shared::natives_result::ResultOfSetFirstPersonFlashEffectVehicleModelHash {
    crate::__imports::native_set_first_person_flash_effect_vehicle_model_hash(vehicle_model)
}
pub fn set_cutscene_cam_far_clip_this_update(p0: f32) -> altv_wasm_shared::natives_result::ResultOfSetCutsceneCamFarClipThisUpdate {
    crate::__imports::native_set_cutscene_cam_far_clip_this_update(p0)
}
pub fn set_cam_spline_duration(cam: i32,
time_duration: i32) -> altv_wasm_shared::natives_result::ResultOfSetCamSplineDuration {
    crate::__imports::native_set_cam_spline_duration(cam,
time_duration)
}
pub fn hard_attach_cam_to_ped_bone(cam: i32,
ped: u32,
bone_index: i32,
p3: f32,
p4: f32,
p5: f32,
p6: f32,
p7: f32,
p8: f32,
p9: bool) -> altv_wasm_shared::natives_result::ResultOfHardAttachCamToPedBone {
    crate::__imports::native_hard_attach_cam_to_ped_bone(cam,
ped,
bone_index,
p3,
p4,
p5,
p6,
p7,
p8,
p9)
}
pub fn get_gameplay_cam_coord() -> altv_wasm_shared::natives_result::ResultOfGetGameplayCamCoord {
    crate::__imports::native_get_gameplay_cam_coord()
}
pub fn get_final_rendered_cam_motion_blur_strength() -> altv_wasm_shared::natives_result::ResultOfGetFinalRenderedCamMotionBlurStrength {
    crate::__imports::native_get_final_rendered_cam_motion_blur_strength()
}
pub fn set_cam_use_shallow_dof_mode(cam: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetCamUseShallowDofMode {
    crate::__imports::native_set_cam_use_shallow_dof_mode(cam,
toggle)
}
pub fn disable_cinematic_slow_mo_this_update() -> altv_wasm_shared::natives_result::ResultOfDisableCinematicSlowMoThisUpdate {
    crate::__imports::native_disable_cinematic_slow_mo_this_update()
}
pub fn set_gameplay_entity_hint(entity: u32,
x_offset: f32,
y_offset: f32,
z_offset: f32,
p4: bool,
time: i32,
ease_in_time: i32,
ease_out_time: i32,
p8: i32) -> altv_wasm_shared::natives_result::ResultOfSetGameplayEntityHint {
    crate::__imports::native_set_gameplay_entity_hint(entity,
x_offset,
y_offset,
z_offset,
p4,
time,
ease_in_time,
ease_out_time,
p8)
}
pub fn set_follow_vehicle_cam_zoom_level(zoom_level: i32) -> altv_wasm_shared::natives_result::ResultOfSetFollowVehicleCamZoomLevel {
    crate::__imports::native_set_follow_vehicle_cam_zoom_level(zoom_level)
}
pub fn get_cam_active_view_mode_context() -> altv_wasm_shared::natives_result::ResultOfGetCamActiveViewModeContext {
    crate::__imports::native_get_cam_active_view_mode_context()
}
pub fn disable_aim_cam_this_update() -> altv_wasm_shared::natives_result::ResultOfDisableAimCamThisUpdate {
    crate::__imports::native_disable_aim_cam_this_update()
}
pub fn set_cam_debug_name(camera: i32,
name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetCamDebugName {
    crate::__imports::native_set_cam_debug_name(camera,
name)
}
pub fn stop_script_global_shaking(p0: bool) -> altv_wasm_shared::natives_result::ResultOfStopScriptGlobalShaking {
    crate::__imports::native_stop_script_global_shaking(p0)
}
pub fn is_in_vehicle_mobile_phone_camera_rendering() -> altv_wasm_shared::natives_result::ResultOfIsInVehicleMobilePhoneCameraRendering {
    crate::__imports::native_is_in_vehicle_mobile_phone_camera_rendering()
}
pub fn hard_attach_cam_to_entity(cam: i32,
entity: u32,
x_rot: f32,
y_rot: f32,
z_rot: f32,
x_offset: f32,
y_offset: f32,
z_offset: f32,
is_relative: bool) -> altv_wasm_shared::natives_result::ResultOfHardAttachCamToEntity {
    crate::__imports::native_hard_attach_cam_to_entity(cam,
entity,
x_rot,
y_rot,
z_rot,
x_offset,
y_offset,
z_offset,
is_relative)
}
pub fn set_first_person_flash_effect_vehicle_model_name(vehicle_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetFirstPersonFlashEffectVehicleModelName {
    crate::__imports::native_set_first_person_flash_effect_vehicle_model_name(vehicle_name)
}
pub fn stop_cinematic_cam_shaking(p0: bool) -> altv_wasm_shared::natives_result::ResultOfStopCinematicCamShaking {
    crate::__imports::native_stop_cinematic_cam_shaking(p0)
}
pub fn set_cam_spline_phase(cam: i32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetCamSplinePhase {
    crate::__imports::native_set_cam_spline_phase(cam,
p1)
}
pub fn stop_code_gameplay_hint(p0: bool) -> altv_wasm_shared::natives_result::ResultOfStopCodeGameplayHint {
    crate::__imports::native_stop_code_gameplay_hint(p0)
}
pub fn get_cam_far_dof(cam: i32) -> altv_wasm_shared::natives_result::ResultOfGetCamFarDof {
    crate::__imports::native_get_cam_far_dof(cam)
}
pub fn get_final_rendered_remote_player_cam_rot(player: u32,
rotation_order: i32) -> altv_wasm_shared::natives_result::ResultOfGetFinalRenderedRemotePlayerCamRot {
    crate::__imports::native_get_final_rendered_remote_player_cam_rot(player,
rotation_order)
}
pub fn allow_motion_blur_decay(p0: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfAllowMotionBlurDecay {
    crate::__imports::native_allow_motion_blur_decay(p0,
p1)
}
pub fn use_script_cam_for_ambient_population_origin_this_frame(p0: bool,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfUseScriptCamForAmbientPopulationOriginThisFrame {
    crate::__imports::native_use_script_cam_for_ambient_population_origin_this_frame(p0,
p1)
}
pub fn force_bonnet_camera_relative_heading_and_pitch(p0: f32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfForceBonnetCameraRelativeHeadingAndPitch {
    crate::__imports::native_force_bonnet_camera_relative_heading_and_pitch(p0,
p1)
}
pub fn set_cam_view_mode_for_context(context: i32,
view_mode: i32) -> altv_wasm_shared::natives_result::ResultOfSetCamViewModeForContext {
    crate::__imports::native_set_cam_view_mode_for_context(context,
view_mode)
}
pub fn set_gameplay_cam_ignore_entity_collision_this_update(entity: u32) -> altv_wasm_shared::natives_result::ResultOfSetGameplayCamIgnoreEntityCollisionThisUpdate {
    crate::__imports::native_set_gameplay_cam_ignore_entity_collision_this_update(entity)
}
pub fn set_gameplay_ped_hint(ped: u32,
x1: f32,
y1: f32,
z1: f32,
p4: bool,
duration: i32,
blend_out_duration: i32,
blend_in_duration: i32) -> altv_wasm_shared::natives_result::ResultOfSetGameplayPedHint {
    crate::__imports::native_set_gameplay_ped_hint(ped,
x1,
y1,
z1,
p4,
duration,
blend_out_duration,
blend_in_duration)
}
pub fn set_cam_dof_max_near_in_focus_distance_blend_level(camera: i32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetCamDofMaxNearInFocusDistanceBlendLevel {
    crate::__imports::native_set_cam_dof_max_near_in_focus_distance_blend_level(camera,
p1)
}
pub fn set_first_person_aim_cam_relative_heading_limits_this_update(p0: f32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetFirstPersonAimCamRelativeHeadingLimitsThisUpdate {
    crate::__imports::native_set_first_person_aim_cam_relative_heading_limits_this_update(p0,
p1)
}
pub fn is_interpolating_from_script_cams() -> altv_wasm_shared::natives_result::ResultOfIsInterpolatingFromScriptCams {
    crate::__imports::native_is_interpolating_from_script_cams()
}
pub fn stop_cutscene_cam_shaking(p0: i32) -> altv_wasm_shared::natives_result::ResultOfStopCutsceneCamShaking {
    crate::__imports::native_stop_cutscene_cam_shaking(p0)
}
pub fn get_follow_ped_cam_zoom_level() -> altv_wasm_shared::natives_result::ResultOfGetFollowPedCamZoomLevel {
    crate::__imports::native_get_follow_ped_cam_zoom_level()
}
pub fn force_tightspace_custom_framing_this_update() -> altv_wasm_shared::natives_result::ResultOfForceTightspaceCustomFramingThisUpdate {
    crate::__imports::native_force_tightspace_custom_framing_this_update()
}
pub fn is_gameplay_cam_rendering() -> altv_wasm_shared::natives_result::ResultOfIsGameplayCamRendering {
    crate::__imports::native_is_gameplay_cam_rendering()
}
pub fn get_gameplay_cam_relative_pitch() -> altv_wasm_shared::natives_result::ResultOfGetGameplayCamRelativePitch {
    crate::__imports::native_get_gameplay_cam_relative_pitch()
}
pub fn set_cam_dof_planes(cam: i32,
p1: f32,
p2: f32,
p3: f32,
p4: f32) -> altv_wasm_shared::natives_result::ResultOfSetCamDofPlanes {
    crate::__imports::native_set_cam_dof_planes(cam,
p1,
p2,
p3,
p4)
}
pub fn set_cam_near_dof(cam: i32,
near_d_o_f: f32) -> altv_wasm_shared::natives_result::ResultOfSetCamNearDof {
    crate::__imports::native_set_cam_near_dof(cam,
near_d_o_f)
}
pub fn set_allow_custom_vehicle_drive_by_cam_this_update(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetAllowCustomVehicleDriveByCamThisUpdate {
    crate::__imports::native_set_allow_custom_vehicle_drive_by_cam_this_update(p0)
}
pub fn override_cam_spline_velocity(cam: i32,
p1: i32,
p2: f32,
p3: f32) -> altv_wasm_shared::natives_result::ResultOfOverrideCamSplineVelocity {
    crate::__imports::native_override_cam_spline_velocity(cam,
p1,
p2,
p3)
}
pub fn set_cam_anim_current_phase(cam: i32,
phase: f32) -> altv_wasm_shared::natives_result::ResultOfSetCamAnimCurrentPhase {
    crate::__imports::native_set_cam_anim_current_phase(cam,
phase)
}
pub fn set_third_person_aim_cam_near_clip_this_update(p0: f32) -> altv_wasm_shared::natives_result::ResultOfSetThirdPersonAimCamNearClipThisUpdate {
    crate::__imports::native_set_third_person_aim_cam_near_clip_this_update(p0)
}
pub fn use_dedicated_stunt_camera_this_update(cam_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfUseDedicatedStuntCameraThisUpdate {
    crate::__imports::native_use_dedicated_stunt_camera_this_update(cam_name)
}
pub fn set_follow_ped_cam_this_update(cam_name: Option<&String>,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetFollowPedCamThisUpdate {
    crate::__imports::native_set_follow_ped_cam_this_update(cam_name,
p1)
}
pub fn set_cam_inherit_roll_vehicle(cam: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetCamInheritRollVehicle {
    crate::__imports::native_set_cam_inherit_roll_vehicle(cam,
p1)
}
pub fn set_scripted_camera_is_first_person_this_frame(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetScriptedCameraIsFirstPersonThisFrame {
    crate::__imports::native_set_scripted_camera_is_first_person_this_frame(p0)
}
pub fn set_cam_dof_focal_length_multiplier(camera: i32,
multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetCamDofFocalLengthMultiplier {
    crate::__imports::native_set_cam_dof_focal_length_multiplier(camera,
multiplier)
}
pub fn force_camera_relative_heading_and_pitch(roll: f32,
pitch: f32,
yaw: f32) -> altv_wasm_shared::natives_result::ResultOfForceCameraRelativeHeadingAndPitch {
    crate::__imports::native_force_camera_relative_heading_and_pitch(roll,
pitch,
yaw)
}
pub fn are_widescreen_borders_active() -> altv_wasm_shared::natives_result::ResultOfAreWidescreenBordersActive {
    crate::__imports::native_are_widescreen_borders_active()
}
pub fn set_gameplay_cam_motion_blur_scaling_this_update(p0: f32) -> altv_wasm_shared::natives_result::ResultOfSetGameplayCamMotionBlurScalingThisUpdate {
    crate::__imports::native_set_gameplay_cam_motion_blur_scaling_this_update(p0)
}
pub fn disable_cam_collision_for_object(entity: u32) -> altv_wasm_shared::natives_result::ResultOfDisableCamCollisionForObject {
    crate::__imports::native_disable_cam_collision_for_object(entity)
}
pub fn set_cam_coord(cam: i32,
pos_x: f32,
pos_y: f32,
pos_z: f32) -> altv_wasm_shared::natives_result::ResultOfSetCamCoord {
    crate::__imports::native_set_cam_coord(cam,
pos_x,
pos_y,
pos_z)
}
pub fn is_cinematic_first_person_vehicle_interior_cam_rendering() -> altv_wasm_shared::natives_result::ResultOfIsCinematicFirstPersonVehicleInteriorCamRendering {
    crate::__imports::native_is_cinematic_first_person_vehicle_interior_cam_rendering()
}
pub fn set_fly_cam_horizontal_response(cam: i32,
p1: f32,
p2: f32,
p3: f32) -> altv_wasm_shared::natives_result::ResultOfSetFlyCamHorizontalResponse {
    crate::__imports::native_set_fly_cam_horizontal_response(cam,
p1,
p2,
p3)
}
pub fn set_gameplay_hint_fov(f_o_v: f32) -> altv_wasm_shared::natives_result::ResultOfSetGameplayHintFov {
    crate::__imports::native_set_gameplay_hint_fov(f_o_v)
}
pub fn set_cinematic_button_active(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetCinematicButtonActive {
    crate::__imports::native_set_cinematic_button_active(p0)
}
pub fn get_rendering_cam() -> altv_wasm_shared::natives_result::ResultOfGetRenderingCam {
    crate::__imports::native_get_rendering_cam()
}
pub fn point_cam_at_entity(cam: i32,
entity: u32,
p2: f32,
p3: f32,
p4: f32,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfPointCamAtEntity {
    crate::__imports::native_point_cam_at_entity(cam,
entity,
p2,
p3,
p4,
p5)
}
pub fn disable_first_person_flash_effect_this_update() -> altv_wasm_shared::natives_result::ResultOfDisableFirstPersonFlashEffectThisUpdate {
    crate::__imports::native_disable_first_person_flash_effect_this_update()
}
pub fn disable_near_clip_scan_this_update() -> altv_wasm_shared::natives_result::ResultOfDisableNearClipScanThisUpdate {
    crate::__imports::native_disable_near_clip_scan_this_update()
}
pub fn set_follow_ped_cam_view_mode(view_mode: i32) -> altv_wasm_shared::natives_result::ResultOfSetFollowPedCamViewMode {
    crate::__imports::native_set_follow_ped_cam_view_mode(view_mode)
}
pub fn is_screen_faded_in() -> altv_wasm_shared::natives_result::ResultOfIsScreenFadedIn {
    crate::__imports::native_is_screen_faded_in()
}
pub fn get_final_rendered_cam_rot(rotation_order: i32) -> altv_wasm_shared::natives_result::ResultOfGetFinalRenderedCamRot {
    crate::__imports::native_get_final_rendered_cam_rot(rotation_order)
}
pub fn set_first_person_flash_effect_type(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetFirstPersonFlashEffectType {
    crate::__imports::native_set_first_person_flash_effect_type(p0)
}
pub fn was_fly_cam_constrained_on_previous_udpate(cam: i32) -> altv_wasm_shared::natives_result::ResultOfWasFlyCamConstrainedOnPreviousUdpate {
    crate::__imports::native_was_fly_cam_constrained_on_previous_udpate(cam)
}
pub fn is_screen_fading_in() -> altv_wasm_shared::natives_result::ResultOfIsScreenFadingIn {
    crate::__imports::native_is_screen_fading_in()
}
pub fn set_follow_vehicle_cam_seat_this_update(seat_index: i32) -> altv_wasm_shared::natives_result::ResultOfSetFollowVehicleCamSeatThisUpdate {
    crate::__imports::native_set_follow_vehicle_cam_seat_this_update(seat_index)
}
pub fn set_gameplay_hint_camera_relative_side_offset(x_offset: f32) -> altv_wasm_shared::natives_result::ResultOfSetGameplayHintCameraRelativeSideOffset {
    crate::__imports::native_set_gameplay_hint_camera_relative_side_offset(x_offset)
}
pub fn trigger_vehicle_part_broken_camera_shake(vehicle: u32,
p1: i32,
p2: f32) -> altv_wasm_shared::natives_result::ResultOfTriggerVehiclePartBrokenCameraShake {
    crate::__imports::native_trigger_vehicle_part_broken_camera_shake(vehicle,
p1,
p2)
}
pub fn is_first_person_aim_cam_active() -> altv_wasm_shared::natives_result::ResultOfIsFirstPersonAimCamActive {
    crate::__imports::native_is_first_person_aim_cam_active()
}
pub fn create_camera(cam_hash: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfCreateCamera {
    crate::__imports::native_create_camera(cam_hash,
p1)
}
pub fn set_cam_dof_strength(cam: i32,
dof_strength: f32) -> altv_wasm_shared::natives_result::ResultOfSetCamDofStrength {
    crate::__imports::native_set_cam_dof_strength(cam,
dof_strength)
}
pub fn get_final_rendered_remote_player_cam_fov(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetFinalRenderedRemotePlayerCamFov {
    crate::__imports::native_get_final_rendered_remote_player_cam_fov(player)
}
pub fn add_cam_spline_node_using_gameplay_frame(cam: i32,
length: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfAddCamSplineNodeUsingGameplayFrame {
    crate::__imports::native_add_cam_spline_node_using_gameplay_frame(cam,
length,
p2)
}
pub fn attach_cam_to_ped_bone(cam: i32,
ped: u32,
bone_index: i32,
x: f32,
y: f32,
z: f32,
heading: bool) -> altv_wasm_shared::natives_result::ResultOfAttachCamToPedBone {
    crate::__imports::native_attach_cam_to_ped_bone(cam,
ped,
bone_index,
x,
y,
z,
heading)
}
pub fn camera_prevent_collision_settings_for_triplehead_in_interiors_this_update() -> altv_wasm_shared::natives_result::ResultOfCameraPreventCollisionSettingsForTripleheadInInteriorsThisUpdate {
    crate::__imports::native_camera_prevent_collision_settings_for_triplehead_in_interiors_this_update()
}
pub fn disable_cinematic_vehicle_idle_mode_this_update() -> altv_wasm_shared::natives_result::ResultOfDisableCinematicVehicleIdleModeThisUpdate {
    crate::__imports::native_disable_cinematic_vehicle_idle_mode_this_update()
}
pub fn use_vehicle_cam_stunt_settings_this_update() -> altv_wasm_shared::natives_result::ResultOfUseVehicleCamStuntSettingsThisUpdate {
    crate::__imports::native_use_vehicle_cam_stunt_settings_this_update()
}
pub fn get_gameplay_cam_fov() -> altv_wasm_shared::natives_result::ResultOfGetGameplayCamFov {
    crate::__imports::native_get_gameplay_cam_fov()
}
pub fn set_cam_controls_mini_map_heading(cam: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetCamControlsMiniMapHeading {
    crate::__imports::native_set_cam_controls_mini_map_heading(cam,
toggle)
}
pub fn point_cam_at_ped_bone(cam: i32,
ped: u32,
bone_index: i32,
x: f32,
y: f32,
z: f32,
p6: bool) -> altv_wasm_shared::natives_result::ResultOfPointCamAtPedBone {
    crate::__imports::native_point_cam_at_ped_bone(cam,
ped,
bone_index,
x,
y,
z,
p6)
}
pub fn is_aim_cam_active() -> altv_wasm_shared::natives_result::ResultOfIsAimCamActive {
    crate::__imports::native_is_aim_cam_active()
}
pub fn shake_cam(cam: i32,
r#type: Option<&String>,
amplitude: f32) -> altv_wasm_shared::natives_result::ResultOfShakeCam {
    crate::__imports::native_shake_cam(cam,
r#type,
amplitude)
}
pub fn create_camera_with_params(cam_hash: u32,
pos_x: f32,
pos_y: f32,
pos_z: f32,
rot_x: f32,
rot_y: f32,
rot_z: f32,
fov: f32,
p8: bool,
p9: i32) -> altv_wasm_shared::natives_result::ResultOfCreateCameraWithParams {
    crate::__imports::native_create_camera_with_params(cam_hash,
pos_x,
pos_y,
pos_z,
rot_x,
rot_y,
rot_z,
fov,
p8,
p9)
}
pub fn is_cam_shaking(cam: i32) -> altv_wasm_shared::natives_result::ResultOfIsCamShaking {
    crate::__imports::native_is_cam_shaking(cam)
}
pub fn set_gameplay_cam_relative_pitch(angle: f32,
scaling_factor: f32) -> altv_wasm_shared::natives_result::ResultOfSetGameplayCamRelativePitch {
    crate::__imports::native_set_gameplay_cam_relative_pitch(angle,
scaling_factor)
}
pub fn set_cam_motion_blur_strength(cam: i32,
strength: f32) -> altv_wasm_shared::natives_result::ResultOfSetCamMotionBlurStrength {
    crate::__imports::native_set_cam_motion_blur_strength(cam,
strength)
}
pub fn is_interpolating_to_script_cams() -> altv_wasm_shared::natives_result::ResultOfIsInterpolatingToScriptCams {
    crate::__imports::native_is_interpolating_to_script_cams()
}
pub fn set_first_person_aim_cam_zoom_factor(zoom_factor: f32) -> altv_wasm_shared::natives_result::ResultOfSetFirstPersonAimCamZoomFactor {
    crate::__imports::native_set_first_person_aim_cam_zoom_factor(zoom_factor)
}
pub fn is_gameplay_cam_looking_behind() -> altv_wasm_shared::natives_result::ResultOfIsGameplayCamLookingBehind {
    crate::__imports::native_is_gameplay_cam_looking_behind()
}
pub fn reset_gameplay_cam_full_attach_parent_transform_timer() -> altv_wasm_shared::natives_result::ResultOfResetGameplayCamFullAttachParentTransformTimer {
    crate::__imports::native_reset_gameplay_cam_full_attach_parent_transform_timer()
}
pub fn set_use_hi_dof_on_synced_scene_this_update() -> altv_wasm_shared::natives_result::ResultOfSetUseHiDofOnSyncedSceneThisUpdate {
    crate::__imports::native_set_use_hi_dof_on_synced_scene_this_update()
}
pub fn create_cinematic_shot(p0: u32,
time: i32,
p2: bool,
entity: u32) -> altv_wasm_shared::natives_result::ResultOfCreateCinematicShot {
    crate::__imports::native_create_cinematic_shot(p0,
time,
p2,
entity)
}
pub fn get_gameplay_cam_relative_heading() -> altv_wasm_shared::natives_result::ResultOfGetGameplayCamRelativeHeading {
    crate::__imports::native_get_gameplay_cam_relative_heading()
}
pub fn is_aim_cam_active_in_accurate_mode() -> altv_wasm_shared::natives_result::ResultOfIsAimCamActiveInAccurateMode {
    crate::__imports::native_is_aim_cam_active_in_accurate_mode()
}
pub fn set_first_person_shooter_camera_pitch(pitch: f32) -> altv_wasm_shared::natives_result::ResultOfSetFirstPersonShooterCameraPitch {
    crate::__imports::native_set_first_person_shooter_camera_pitch(pitch)
}
pub fn stop_cinematic_shot(p0: u32) -> altv_wasm_shared::natives_result::ResultOfStopCinematicShot {
    crate::__imports::native_stop_cinematic_shot(p0)
}
pub fn get_debug_cam() -> altv_wasm_shared::natives_result::ResultOfGetDebugCam {
    crate::__imports::native_get_debug_cam()
}
pub fn is_screen_fading_out() -> altv_wasm_shared::natives_result::ResultOfIsScreenFadingOut {
    crate::__imports::native_is_screen_fading_out()
}
pub fn set_table_games_camera_this_update(hash: u32) -> altv_wasm_shared::natives_result::ResultOfSetTableGamesCameraThisUpdate {
    crate::__imports::native_set_table_games_camera_this_update(hash)
}
pub fn ignore_menu_preference_for_bonnet_camera_this_update() -> altv_wasm_shared::natives_result::ResultOfIgnoreMenuPreferenceForBonnetCameraThisUpdate {
    crate::__imports::native_ignore_menu_preference_for_bonnet_camera_this_update()
}
pub fn set_cam_spline_node_extra_flags(cam: i32,
p1: i32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfSetCamSplineNodeExtraFlags {
    crate::__imports::native_set_cam_spline_node_extra_flags(cam,
p1,
flags)
}
pub fn get_cam_rot(cam: i32,
rotation_order: i32) -> altv_wasm_shared::natives_result::ResultOfGetCamRot {
    crate::__imports::native_get_cam_rot(cam,
rotation_order)
}
pub fn override_cam_spline_motion_blur(cam: i32,
p1: i32,
p2: f32,
p3: f32) -> altv_wasm_shared::natives_result::ResultOfOverrideCamSplineMotionBlur {
    crate::__imports::native_override_cam_spline_motion_blur(cam,
p1,
p2,
p3)
}
pub fn set_cam_dof_fnumber_of_lens(camera: i32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetCamDofFnumberOfLens {
    crate::__imports::native_set_cam_dof_fnumber_of_lens(camera,
p1)
}
pub fn get_first_person_aim_cam_zoom_factor() -> altv_wasm_shared::natives_result::ResultOfGetFirstPersonAimCamZoomFactor {
    crate::__imports::native_get_first_person_aim_cam_zoom_factor()
}
pub fn set_cam_death_fail_effect_state(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetCamDeathFailEffectState {
    crate::__imports::native_set_cam_death_fail_effect_state(p0)
}
pub fn get_final_rendered_cam_fov() -> altv_wasm_shared::natives_result::ResultOfGetFinalRenderedCamFov {
    crate::__imports::native_get_final_rendered_cam_fov()
}
pub fn get_gameplay_cam_rot(rotation_order: i32) -> altv_wasm_shared::natives_result::ResultOfGetGameplayCamRot {
    crate::__imports::native_get_gameplay_cam_rot(rotation_order)
}
pub fn set_cam_spline_node_ease(cam: i32,
easing_function: i32,
p2: i32,
p3: f32) -> altv_wasm_shared::natives_result::ResultOfSetCamSplineNodeEase {
    crate::__imports::native_set_cam_spline_node_ease(cam,
easing_function,
p2,
p3)
}
pub fn set_gameplay_object_hint(object: u32,
x_offset: f32,
y_offset: f32,
z_offset: f32,
p4: bool,
time: i32,
ease_in_time: i32,
ease_out_time: i32) -> altv_wasm_shared::natives_result::ResultOfSetGameplayObjectHint {
    crate::__imports::native_set_gameplay_object_hint(object,
x_offset,
y_offset,
z_offset,
p4,
time,
ease_in_time,
ease_out_time)
}
pub fn set_cam_rot(cam: i32,
rot_x: f32,
rot_y: f32,
rot_z: f32,
rotation_order: i32) -> altv_wasm_shared::natives_result::ResultOfSetCamRot {
    crate::__imports::native_set_cam_rot(cam,
rot_x,
rot_y,
rot_z,
rotation_order)
}
pub fn add_cam_spline_node(camera: i32,
x: f32,
y: f32,
z: f32,
x_rot: f32,
y_rot: f32,
z_rot: f32,
length: i32,
smoothing_style: i32,
rotation_order: i32) -> altv_wasm_shared::natives_result::ResultOfAddCamSplineNode {
    crate::__imports::native_add_cam_spline_node(camera,
x,
y,
z,
x_rot,
y_rot,
z_rot,
length,
smoothing_style,
rotation_order)
}
pub fn destroy_cam(cam: i32,
b_script_host_cam: bool) -> altv_wasm_shared::natives_result::ResultOfDestroyCam {
    crate::__imports::native_destroy_cam(cam,
b_script_host_cam)
}
pub fn do_screen_fade_out(duration: i32) -> altv_wasm_shared::natives_result::ResultOfDoScreenFadeOut {
    crate::__imports::native_do_screen_fade_out(duration)
}
pub fn get_focus_ped_on_screen(p0: f32,
p1: i32,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
p6: f32,
p7: i32,
p8: i32) -> altv_wasm_shared::natives_result::ResultOfGetFocusPedOnScreen {
    crate::__imports::native_get_focus_ped_on_screen(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8)
}
pub fn set_gameplay_cam_follow_ped_this_update(ped: u32) -> altv_wasm_shared::natives_result::ResultOfSetGameplayCamFollowPedThisUpdate {
    crate::__imports::native_set_gameplay_cam_follow_ped_this_update(ped)
}
pub fn replay_get_max_distance_allowed_from_player() -> altv_wasm_shared::natives_result::ResultOfReplayGetMaxDistanceAllowedFromPlayer {
    crate::__imports::native_replay_get_max_distance_allowed_from_player()
}
pub fn set_cam_affects_aiming(cam: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetCamAffectsAiming {
    crate::__imports::native_set_cam_affects_aiming(cam,
toggle)
}
pub fn get_follow_ped_cam_view_mode() -> altv_wasm_shared::natives_result::ResultOfGetFollowPedCamViewMode {
    crate::__imports::native_get_follow_ped_cam_view_mode()
}
pub fn attach_cam_to_vehicle_bone(cam: i32,
vehicle: u32,
bone_index: i32,
relative_rotation: bool,
rot_x: f32,
rot_y: f32,
rot_z: f32,
offset_x: f32,
offset_y: f32,
offset_z: f32,
fixed_direction: bool) -> altv_wasm_shared::natives_result::ResultOfAttachCamToVehicleBone {
    crate::__imports::native_attach_cam_to_vehicle_bone(cam,
vehicle,
bone_index,
relative_rotation,
rot_x,
rot_y,
rot_z,
offset_x,
offset_y,
offset_z,
fixed_direction)
}
pub fn destroy_all_cams(b_script_host_cam: bool) -> altv_wasm_shared::natives_result::ResultOfDestroyAllCams {
    crate::__imports::native_destroy_all_cams(b_script_host_cam)
}
pub fn set_third_person_cam_relative_heading_limits_this_update(minimum: f32,
maximum: f32) -> altv_wasm_shared::natives_result::ResultOfSetThirdPersonCamRelativeHeadingLimitsThisUpdate {
    crate::__imports::native_set_third_person_cam_relative_heading_limits_this_update(minimum,
maximum)
}
pub fn set_follow_vehicle_cam_high_angle_mode_this_update(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetFollowVehicleCamHighAngleModeThisUpdate {
    crate::__imports::native_set_follow_vehicle_cam_high_angle_mode_this_update(p0)
}
pub fn get_final_rendered_cam_far_dof() -> altv_wasm_shared::natives_result::ResultOfGetFinalRenderedCamFarDof {
    crate::__imports::native_get_final_rendered_cam_far_dof()
}
pub fn play_cam_anim(cam: i32,
anim_name: Option<&String>,
anim_dictionary: Option<&String>,
x: f32,
y: f32,
z: f32,
x_rot: f32,
y_rot: f32,
z_rot: f32,
p9: bool,
p10: i32) -> altv_wasm_shared::natives_result::ResultOfPlayCamAnim {
    crate::__imports::native_play_cam_anim(cam,
anim_name,
anim_dictionary,
x,
y,
z,
x_rot,
y_rot,
z_rot,
p9,
p10)
}
pub fn set_follow_vehicle_cam_high_angle_mode_every_update(p0: bool,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetFollowVehicleCamHighAngleModeEveryUpdate {
    crate::__imports::native_set_follow_vehicle_cam_high_angle_mode_every_update(p0,
p1)
}
pub fn invalidate_cinematic_vehicle_idle_mode() -> altv_wasm_shared::natives_result::ResultOfInvalidateCinematicVehicleIdleMode {
    crate::__imports::native_invalidate_cinematic_vehicle_idle_mode()
}
pub fn block_first_person_orientation_reset_this_update() -> altv_wasm_shared::natives_result::ResultOfBlockFirstPersonOrientationResetThisUpdate {
    crate::__imports::native_block_first_person_orientation_reset_this_update()
}
pub fn set_cam_active_with_interp(cam_to: i32,
cam_from: i32,
duration: i32,
ease_location: i32,
ease_rotation: i32) -> altv_wasm_shared::natives_result::ResultOfSetCamActiveWithInterp {
    crate::__imports::native_set_cam_active_with_interp(cam_to,
cam_from,
duration,
ease_location,
ease_rotation)
}
pub fn get_final_rendered_cam_near_dof() -> altv_wasm_shared::natives_result::ResultOfGetFinalRenderedCamNearDof {
    crate::__imports::native_get_final_rendered_cam_near_dof()
}
pub fn get_cam_anim_current_phase(cam: i32) -> altv_wasm_shared::natives_result::ResultOfGetCamAnimCurrentPhase {
    crate::__imports::native_get_cam_anim_current_phase(cam)
}
pub fn set_use_hi_dof() -> altv_wasm_shared::natives_result::ResultOfSetUseHiDof {
    crate::__imports::native_set_use_hi_dof()
}
pub fn get_final_rendered_cam_coord() -> altv_wasm_shared::natives_result::ResultOfGetFinalRenderedCamCoord {
    crate::__imports::native_get_final_rendered_cam_coord()
}
pub fn set_gameplay_vehicle_hint(vehicle: u32,
offset_x: f32,
offset_y: f32,
offset_z: f32,
p4: bool,
time: i32,
ease_in_time: i32,
ease_out_time: i32) -> altv_wasm_shared::natives_result::ResultOfSetGameplayVehicleHint {
    crate::__imports::native_set_gameplay_vehicle_hint(vehicle,
offset_x,
offset_y,
offset_z,
p4,
time,
ease_in_time,
ease_out_time)
}
pub fn animated_shake_cam(cam: i32,
p1: Option<&String>,
p2: Option<&String>,
p3: Option<&String>,
amplitude: f32) -> altv_wasm_shared::natives_result::ResultOfAnimatedShakeCam {
    crate::__imports::native_animated_shake_cam(cam,
p1,
p2,
p3,
amplitude)
}
pub fn set_cam_is_inside_vehicle(cam: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetCamIsInsideVehicle {
    crate::__imports::native_set_cam_is_inside_vehicle(cam,
toggle)
}
pub fn detach_cam(cam: i32) -> altv_wasm_shared::natives_result::ResultOfDetachCam {
    crate::__imports::native_detach_cam(cam)
}
pub fn force_cinematic_rendering_this_update(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfForceCinematicRenderingThisUpdate {
    crate::__imports::native_force_cinematic_rendering_this_update(toggle)
}
pub fn get_follow_vehicle_cam_view_mode() -> altv_wasm_shared::natives_result::ResultOfGetFollowVehicleCamViewMode {
    crate::__imports::native_get_follow_vehicle_cam_view_mode()
}
pub fn set_third_person_cam_relative_pitch_limits_this_update(minimum: f32,
maximum: f32) -> altv_wasm_shared::natives_result::ResultOfSetThirdPersonCamRelativePitchLimitsThisUpdate {
    crate::__imports::native_set_third_person_cam_relative_pitch_limits_this_update(minimum,
maximum)
}
pub fn set_cam_spline_node_velocity_scale(cam: i32,
p1: i32,
scale: f32) -> altv_wasm_shared::natives_result::ResultOfSetCamSplineNodeVelocityScale {
    crate::__imports::native_set_cam_spline_node_velocity_scale(cam,
p1,
scale)
}
pub fn bypass_camera_collision_buoyancy_test_this_update() -> altv_wasm_shared::natives_result::ResultOfBypassCameraCollisionBuoyancyTestThisUpdate {
    crate::__imports::native_bypass_camera_collision_buoyancy_test_this_update()
}
pub fn does_cam_exist(cam: i32) -> altv_wasm_shared::natives_result::ResultOfDoesCamExist {
    crate::__imports::native_does_cam_exist(cam)
}
pub fn set_gameplay_cam_shake_amplitude(amplitude: f32) -> altv_wasm_shared::natives_result::ResultOfSetGameplayCamShakeAmplitude {
    crate::__imports::native_set_gameplay_cam_shake_amplitude(amplitude)
}
pub fn force_cam_far_clip(cam: i32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfForceCamFarClip {
    crate::__imports::native_force_cam_far_clip(cam,
p1)
}
pub fn set_follow_vehicle_cam_view_mode(view_mode: i32) -> altv_wasm_shared::natives_result::ResultOfSetFollowVehicleCamViewMode {
    crate::__imports::native_set_follow_vehicle_cam_view_mode(view_mode)
}
pub fn disable_cinematic_bonnet_camera_this_update() -> altv_wasm_shared::natives_result::ResultOfDisableCinematicBonnetCameraThisUpdate {
    crate::__imports::native_disable_cinematic_bonnet_camera_this_update()
}
pub fn set_cam_far_clip(cam: i32,
far_clip: f32) -> altv_wasm_shared::natives_result::ResultOfSetCamFarClip {
    crate::__imports::native_set_cam_far_clip(cam,
far_clip)
}
pub fn disable_first_person_camera_water_clipping_test_this_update() -> altv_wasm_shared::natives_result::ResultOfDisableFirstPersonCameraWaterClippingTestThisUpdate {
    crate::__imports::native_disable_first_person_camera_water_clipping_test_this_update()
}
pub fn set_cam_fov(cam: i32,
field_of_view: f32) -> altv_wasm_shared::natives_result::ResultOfSetCamFov {
    crate::__imports::native_set_cam_fov(cam,
field_of_view)
}
pub fn is_cinematic_cam_rendering() -> altv_wasm_shared::natives_result::ResultOfIsCinematicCamRendering {
    crate::__imports::native_is_cinematic_cam_rendering()
}
pub fn is_screen_faded_out() -> altv_wasm_shared::natives_result::ResultOfIsScreenFadedOut {
    crate::__imports::native_is_screen_faded_out()
}
pub fn get_cam_spline_node_index(cam: i32) -> altv_wasm_shared::natives_result::ResultOfGetCamSplineNodeIndex {
    crate::__imports::native_get_cam_spline_node_index(cam)
}
pub fn set_gameplay_cam_relative_heading(heading: f32) -> altv_wasm_shared::natives_result::ResultOfSetGameplayCamRelativeHeading {
    crate::__imports::native_set_gameplay_cam_relative_heading(heading)
}
pub fn create_cam_with_params(cam_name: Option<&String>,
pos_x: f32,
pos_y: f32,
pos_z: f32,
rot_x: f32,
rot_y: f32,
rot_z: f32,
fov: f32,
p8: bool,
p9: i32) -> altv_wasm_shared::natives_result::ResultOfCreateCamWithParams {
    crate::__imports::native_create_cam_with_params(cam_name,
pos_x,
pos_y,
pos_z,
rot_x,
rot_y,
rot_z,
fov,
p8,
p9)
}
pub fn get_cam_spline_phase(cam: i32) -> altv_wasm_shared::natives_result::ResultOfGetCamSplinePhase {
    crate::__imports::native_get_cam_spline_phase(cam)
}
pub fn get_cam_far_clip(cam: i32) -> altv_wasm_shared::natives_result::ResultOfGetCamFarClip {
    crate::__imports::native_get_cam_far_clip(cam)
}
pub fn get_cam_coord(cam: i32) -> altv_wasm_shared::natives_result::ResultOfGetCamCoord {
    crate::__imports::native_get_cam_coord(cam)
}
pub fn is_cinematic_cam_shaking() -> altv_wasm_shared::natives_result::ResultOfIsCinematicCamShaking {
    crate::__imports::native_is_cinematic_cam_shaking()
}
pub fn set_first_person_aim_cam_relative_pitch_limits_this_update(p0: f32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetFirstPersonAimCamRelativePitchLimitsThisUpdate {
    crate::__imports::native_set_first_person_aim_cam_relative_pitch_limits_this_update(p0,
p1)
}
pub fn stop_cam_shaking(cam: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfStopCamShaking {
    crate::__imports::native_stop_cam_shaking(cam,
p1)
}
pub fn is_code_gameplay_hint_active() -> altv_wasm_shared::natives_result::ResultOfIsCodeGameplayHintActive {
    crate::__imports::native_is_code_gameplay_hint_active()
}
pub fn set_cam_params(cam: i32,
pos_x: f32,
pos_y: f32,
pos_z: f32,
rot_x: f32,
rot_y: f32,
rot_z: f32,
field_of_view: f32,
p8: i32,
p9: i32,
p10: i32,
p11: i32) -> altv_wasm_shared::natives_result::ResultOfSetCamParams {
    crate::__imports::native_set_cam_params(cam,
pos_x,
pos_y,
pos_z,
rot_x,
rot_y,
rot_z,
field_of_view,
p8,
p9,
p10,
p11)
}
pub fn get_cam_near_dof(cam: i32) -> altv_wasm_shared::natives_result::ResultOfGetCamNearDof {
    crate::__imports::native_get_cam_near_dof(cam)
}
pub fn animated_shake_script_global(p0: Option<&String>,
p1: Option<&String>,
p2: Option<&String>,
p3: f32) -> altv_wasm_shared::natives_result::ResultOfAnimatedShakeScriptGlobal {
    crate::__imports::native_animated_shake_script_global(p0,
p1,
p2,
p3)
}
pub fn get_cam_fov(cam: i32) -> altv_wasm_shared::natives_result::ResultOfGetCamFov {
    crate::__imports::native_get_cam_fov(cam)
}
pub fn set_cam_dof_max_near_in_focus_distance(camera: i32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetCamDofMaxNearInFocusDistance {
    crate::__imports::native_set_cam_dof_max_near_in_focus_distance(camera,
p1)
}
pub fn create_cam(cam_name: Option<&String>,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfCreateCam {
    crate::__imports::native_create_cam(cam_name,
p1)
}
pub fn get_cam_near_clip(cam: i32) -> altv_wasm_shared::natives_result::ResultOfGetCamNearClip {
    crate::__imports::native_get_cam_near_clip(cam)
}
pub fn set_cam_dof_focus_distance_bias(camera: i32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetCamDofFocusDistanceBias {
    crate::__imports::native_set_cam_dof_focus_distance_bias(camera,
p1)
}
pub fn is_follow_ped_cam_active() -> altv_wasm_shared::natives_result::ResultOfIsFollowPedCamActive {
    crate::__imports::native_is_follow_ped_cam_active()
}
pub fn set_cinematic_cam_shake_amplitude(p0: f32) -> altv_wasm_shared::natives_result::ResultOfSetCinematicCamShakeAmplitude {
    crate::__imports::native_set_cinematic_cam_shake_amplitude(p0)
}
pub fn set_cam_near_clip(cam: i32,
near_clip: f32) -> altv_wasm_shared::natives_result::ResultOfSetCamNearClip {
    crate::__imports::native_set_cam_near_clip(cam,
near_clip)
}
pub fn stop_rendering_script_cams_using_catch_up(render: bool,
p1: f32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfStopRenderingScriptCamsUsingCatchUp {
    crate::__imports::native_stop_rendering_script_cams_using_catch_up(render,
p1,
p2,
p3)
}
pub fn set_follow_ped_cam_ladder_align_this_update() -> altv_wasm_shared::natives_result::ResultOfSetFollowPedCamLadderAlignThisUpdate {
    crate::__imports::native_set_follow_ped_cam_ladder_align_this_update()
}
pub fn set_fly_cam_vertical_controls_this_update(cam: i32) -> altv_wasm_shared::natives_result::ResultOfSetFlyCamVerticalControlsThisUpdate {
    crate::__imports::native_set_fly_cam_vertical_controls_this_update(cam)
}
pub fn is_cam_playing_anim(cam: i32,
anim_name: Option<&String>,
anim_dictionary: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfIsCamPlayingAnim {
    crate::__imports::native_is_cam_playing_anim(cam,
anim_name,
anim_dictionary)
}
pub fn is_script_global_shaking() -> altv_wasm_shared::natives_result::ResultOfIsScriptGlobalShaking {
    crate::__imports::native_is_script_global_shaking()
}
pub fn set_fly_cam_coord_and_constrain(cam: i32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfSetFlyCamCoordAndConstrain {
    crate::__imports::native_set_fly_cam_coord_and_constrain(cam,
x,
y,
z)
}
pub fn set_gameplay_hint_camera_relative_vertical_offset(y_offset: f32) -> altv_wasm_shared::natives_result::ResultOfSetGameplayHintCameraRelativeVerticalOffset {
    crate::__imports::native_set_gameplay_hint_camera_relative_vertical_offset(y_offset)
}
pub fn is_cinematic_idle_cam_rendering() -> altv_wasm_shared::natives_result::ResultOfIsCinematicIdleCamRendering {
    crate::__imports::native_is_cinematic_idle_cam_rendering()
}
pub fn is_follow_vehicle_cam_active() -> altv_wasm_shared::natives_result::ResultOfIsFollowVehicleCamActive {
    crate::__imports::native_is_follow_vehicle_cam_active()
}
pub fn is_cinematic_shot_active(p0: u32) -> altv_wasm_shared::natives_result::ResultOfIsCinematicShotActive {
    crate::__imports::native_is_cinematic_shot_active(p0)
}
pub fn stop_gameplay_hint_being_cancelled_this_update(p0: bool) -> altv_wasm_shared::natives_result::ResultOfStopGameplayHintBeingCancelledThisUpdate {
    crate::__imports::native_stop_gameplay_hint_being_cancelled_this_update(p0)
}
pub fn set_first_person_aim_cam_zoom_factor_limits_this_update(p0: f32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetFirstPersonAimCamZoomFactorLimitsThisUpdate {
    crate::__imports::native_set_first_person_aim_cam_zoom_factor_limits_this_update(p0,
p1)
}
pub fn get_final_rendered_cam_near_clip() -> altv_wasm_shared::natives_result::ResultOfGetFinalRenderedCamNearClip {
    crate::__imports::native_get_final_rendered_cam_near_clip()
}
pub fn set_cam_spline_smoothing_style(cam: i32,
smoothing_style: i32) -> altv_wasm_shared::natives_result::ResultOfSetCamSplineSmoothingStyle {
    crate::__imports::native_set_cam_spline_smoothing_style(cam,
smoothing_style)
}
pub fn set_gameplay_hint_base_orbit_pitch_offset(value: f32) -> altv_wasm_shared::natives_result::ResultOfSetGameplayHintBaseOrbitPitchOffset {
    crate::__imports::native_set_gameplay_hint_base_orbit_pitch_offset(value)
}
pub fn do_screen_fade_in(duration: i32) -> altv_wasm_shared::natives_result::ResultOfDoScreenFadeIn {
    crate::__imports::native_do_screen_fade_in(duration)
}
pub fn set_gameplay_coord_hint(x: f32,
y: f32,
z: f32,
duration: i32,
blend_out_duration: i32,
blend_in_duration: i32,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfSetGameplayCoordHint {
    crate::__imports::native_set_gameplay_coord_hint(x,
y,
z,
duration,
blend_out_duration,
blend_in_duration,
p6)
}
pub fn is_bonnet_cinematic_cam_rendering() -> altv_wasm_shared::natives_result::ResultOfIsBonnetCinematicCamRendering {
    crate::__imports::native_is_bonnet_cinematic_cam_rendering()
}
pub fn set_cam_shake_amplitude(cam: i32,
amplitude: f32) -> altv_wasm_shared::natives_result::ResultOfSetCamShakeAmplitude {
    crate::__imports::native_set_cam_shake_amplitude(cam,
amplitude)
}
pub fn get_cam_spline_node_phase(cam: i32) -> altv_wasm_shared::natives_result::ResultOfGetCamSplineNodePhase {
    crate::__imports::native_get_cam_spline_node_phase(cam)
}
pub fn bypass_cutscene_cam_rendering_this_update() -> altv_wasm_shared::natives_result::ResultOfBypassCutsceneCamRenderingThisUpdate {
    crate::__imports::native_bypass_cutscene_cam_rendering_this_update()
}
pub fn set_gameplay_cam_altitude_fov_scaling_state(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetGameplayCamAltitudeFovScalingState {
    crate::__imports::native_set_gameplay_cam_altitude_fov_scaling_state(p0)
}
pub fn set_cinematic_news_channel_active_this_update() -> altv_wasm_shared::natives_result::ResultOfSetCinematicNewsChannelActiveThisUpdate {
    crate::__imports::native_set_cinematic_news_channel_active_this_update()
}
pub fn set_widescreen_borders(p0: bool,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetWidescreenBorders {
    crate::__imports::native_set_widescreen_borders(p0,
p1)
}
pub fn shake_cinematic_cam(shake_type: Option<&String>,
amount: f32) -> altv_wasm_shared::natives_result::ResultOfShakeCinematicCam {
    crate::__imports::native_shake_cinematic_cam(shake_type,
amount)
}
pub fn set_cinematic_mode_active(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetCinematicModeActive {
    crate::__imports::native_set_cinematic_mode_active(toggle)
}
pub fn set_follow_cam_ignore_attach_parent_movement_this_update() -> altv_wasm_shared::natives_result::ResultOfSetFollowCamIgnoreAttachParentMovementThisUpdate {
    crate::__imports::native_set_follow_cam_ignore_attach_parent_movement_this_update()
}
pub fn disable_on_foot_first_person_view_this_update() -> altv_wasm_shared::natives_result::ResultOfDisableOnFootFirstPersonViewThisUpdate {
    crate::__imports::native_disable_on_foot_first_person_view_this_update()
}
pub fn set_third_person_cam_orbit_distance_limits_this_update(p0: f32,
distance: f32) -> altv_wasm_shared::natives_result::ResultOfSetThirdPersonCamOrbitDistanceLimitsThisUpdate {
    crate::__imports::native_set_third_person_cam_orbit_distance_limits_this_update(p0,
distance)
}
pub fn is_cam_active(cam: i32) -> altv_wasm_shared::natives_result::ResultOfIsCamActive {
    crate::__imports::native_is_cam_active(cam)
}
pub fn get_final_rendered_cam_far_clip() -> altv_wasm_shared::natives_result::ResultOfGetFinalRenderedCamFarClip {
    crate::__imports::native_get_final_rendered_cam_far_clip()
}
pub fn set_cam_dof_overridden_focus_distance_blend_level(p0: i32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetCamDofOverriddenFocusDistanceBlendLevel {
    crate::__imports::native_set_cam_dof_overridden_focus_distance_blend_level(p0,
p1)
}
pub fn play_synchronized_cam_anim(p0: i32,
p1: i32,
anim_name: Option<&String>,
anim_dictionary: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfPlaySynchronizedCamAnim {
    crate::__imports::native_play_synchronized_cam_anim(p0,
p1,
anim_name,
anim_dictionary)
}
pub fn is_sphere_visible(x: f32,
y: f32,
z: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfIsSphereVisible {
    crate::__imports::native_is_sphere_visible(x,
y,
z,
radius)
}
pub fn set_gameplay_hint_camera_blend_to_follow_ped_medium_view_mode(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetGameplayHintCameraBlendToFollowPedMediumViewMode {
    crate::__imports::native_set_gameplay_hint_camera_blend_to_follow_ped_medium_view_mode(toggle)
}
pub fn is_gameplay_hint_active() -> altv_wasm_shared::natives_result::ResultOfIsGameplayHintActive {
    crate::__imports::native_is_gameplay_hint_active()
}
pub fn set_fly_cam_vertical_response(cam: i32,
p1: f32,
p2: f32,
p3: f32) -> altv_wasm_shared::natives_result::ResultOfSetFlyCamVerticalResponse {
    crate::__imports::native_set_fly_cam_vertical_response(cam,
p1,
p2,
p3)
}
pub fn set_in_vehicle_cam_state_this_update(p0: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetInVehicleCamStateThisUpdate {
    crate::__imports::native_set_in_vehicle_cam_state_this_update(p0,
p1)
}
pub fn disable_gameplay_cam_altitude_fov_scaling_this_update() -> altv_wasm_shared::natives_result::ResultOfDisableGameplayCamAltitudeFovScalingThisUpdate {
    crate::__imports::native_disable_gameplay_cam_altitude_fov_scaling_this_update()
}
pub fn is_allowed_independent_camera_modes() -> altv_wasm_shared::natives_result::ResultOfIsAllowedIndependentCameraModes {
    crate::__imports::native_is_allowed_independent_camera_modes()
}
pub fn set_cam_far_dof(cam: i32,
far_d_o_f: f32) -> altv_wasm_shared::natives_result::ResultOfSetCamFarDof {
    crate::__imports::native_set_cam_far_dof(cam,
far_d_o_f)
}
pub fn get_cam_view_mode_for_context(context: i32) -> altv_wasm_shared::natives_result::ResultOfGetCamViewModeForContext {
    crate::__imports::native_get_cam_view_mode_for_context(context)
}
pub fn get_follow_vehicle_cam_zoom_level() -> altv_wasm_shared::natives_result::ResultOfGetFollowVehicleCamZoomLevel {
    crate::__imports::native_get_follow_vehicle_cam_zoom_level()
}
pub fn stop_cam_pointing(cam: i32) -> altv_wasm_shared::natives_result::ResultOfStopCamPointing {
    crate::__imports::native_stop_cam_pointing(cam)
}
pub fn stop_gameplay_hint(p0: bool) -> altv_wasm_shared::natives_result::ResultOfStopGameplayHint {
    crate::__imports::native_stop_gameplay_hint(p0)
}
pub fn shake_script_global(p0: Option<&String>,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfShakeScriptGlobal {
    crate::__imports::native_shake_script_global(p0,
p1)
}
pub fn invalidate_idle_cam() -> altv_wasm_shared::natives_result::ResultOfInvalidateIdleCam {
    crate::__imports::native_invalidate_idle_cam()
}
pub fn set_cam_dof_overridden_focus_distance(camera: i32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetCamDofOverriddenFocusDistance {
    crate::__imports::native_set_cam_dof_overridden_focus_distance(camera,
p1)
}
pub fn is_cinematic_cam_input_active() -> altv_wasm_shared::natives_result::ResultOfIsCinematicCamInputActive {
    crate::__imports::native_is_cinematic_cam_input_active()
}
pub fn point_cam_at_coord(cam: i32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfPointCamAtCoord {
    crate::__imports::native_point_cam_at_coord(cam,
x,
y,
z)
}
pub fn set_gameplay_hint_follow_distance_scalar(value: f32) -> altv_wasm_shared::natives_result::ResultOfSetGameplayHintFollowDistanceScalar {
    crate::__imports::native_set_gameplay_hint_follow_distance_scalar(value)
}
pub fn set_fly_cam_max_height(cam: i32,
height: f32) -> altv_wasm_shared::natives_result::ResultOfSetFlyCamMaxHeight {
    crate::__imports::native_set_fly_cam_max_height(cam,
height)
}
pub fn set_gameplay_cam_entity_to_limit_focus_over_bounding_sphere_this_update(entity: u32) -> altv_wasm_shared::natives_result::ResultOfSetGameplayCamEntityToLimitFocusOverBoundingSphereThisUpdate {
    crate::__imports::native_set_gameplay_cam_entity_to_limit_focus_over_bounding_sphere_this_update(entity)
}
pub fn shake_gameplay_cam(shake_name: Option<&String>,
intensity: f32) -> altv_wasm_shared::natives_result::ResultOfShakeGameplayCam {
    crate::__imports::native_shake_gameplay_cam(shake_name,
intensity)
}
pub fn attach_cam_to_entity(cam: i32,
entity: u32,
x_offset: f32,
y_offset: f32,
z_offset: f32,
is_relative: bool) -> altv_wasm_shared::natives_result::ResultOfAttachCamToEntity {
    crate::__imports::native_attach_cam_to_entity(cam,
entity,
x_offset,
y_offset,
z_offset,
is_relative)
}
pub fn get_clock_minutes() -> altv_wasm_shared::natives_result::ResultOfGetClockMinutes {
    crate::__imports::native_get_clock_minutes()
}
pub fn get_clock_hours() -> altv_wasm_shared::natives_result::ResultOfGetClockHours {
    crate::__imports::native_get_clock_hours()
}
pub fn get_milliseconds_per_game_minute() -> altv_wasm_shared::natives_result::ResultOfGetMillisecondsPerGameMinute {
    crate::__imports::native_get_milliseconds_per_game_minute()
}
pub fn get_clock_day_of_month() -> altv_wasm_shared::natives_result::ResultOfGetClockDayOfMonth {
    crate::__imports::native_get_clock_day_of_month()
}
pub fn pause_clock(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfPauseClock {
    crate::__imports::native_pause_clock(toggle)
}
pub fn set_clock_time(hour: i32,
minute: i32,
second: i32) -> altv_wasm_shared::natives_result::ResultOfSetClockTime {
    crate::__imports::native_set_clock_time(hour,
minute,
second)
}
pub fn get_clock_seconds() -> altv_wasm_shared::natives_result::ResultOfGetClockSeconds {
    crate::__imports::native_get_clock_seconds()
}
pub fn get_local_time(year: i32,
month: i32,
day: i32,
hour: i32,
minute: i32,
second: i32) -> altv_wasm_shared::natives_result::ResultOfGetLocalTime {
    crate::__imports::native_get_local_time(year,
month,
day,
hour,
minute,
second)
}
pub fn get_utc_time(year: i32,
month: i32,
day: i32,
hour: i32,
minute: i32,
second: i32) -> altv_wasm_shared::natives_result::ResultOfGetUtcTime {
    crate::__imports::native_get_utc_time(year,
month,
day,
hour,
minute,
second)
}
pub fn get_clock_year() -> altv_wasm_shared::natives_result::ResultOfGetClockYear {
    crate::__imports::native_get_clock_year()
}
pub fn set_clock_date(day: i32,
month: i32,
year: i32) -> altv_wasm_shared::natives_result::ResultOfSetClockDate {
    crate::__imports::native_set_clock_date(day,
month,
year)
}
pub fn get_clock_month() -> altv_wasm_shared::natives_result::ResultOfGetClockMonth {
    crate::__imports::native_get_clock_month()
}
pub fn advance_clock_time_to(hour: i32,
minute: i32,
second: i32) -> altv_wasm_shared::natives_result::ResultOfAdvanceClockTimeTo {
    crate::__imports::native_advance_clock_time_to(hour,
minute,
second)
}
pub fn add_to_clock_time(hours: i32,
minutes: i32,
seconds: i32) -> altv_wasm_shared::natives_result::ResultOfAddToClockTime {
    crate::__imports::native_add_to_clock_time(hours,
minutes,
seconds)
}
pub fn get_clock_day_of_week() -> altv_wasm_shared::natives_result::ResultOfGetClockDayOfWeek {
    crate::__imports::native_get_clock_day_of_week()
}
pub fn get_posix_time(year: i32,
month: i32,
day: i32,
hour: i32,
minute: i32,
second: i32) -> altv_wasm_shared::natives_result::ResultOfGetPosixTime {
    crate::__imports::native_get_posix_time(year,
month,
day,
hour,
minute,
second)
}
pub fn set_cutscene_origin_and_orientation(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfSetCutsceneOriginAndOrientation {
    crate::__imports::native_set_cutscene_origin_and_orientation(x1,
y1,
z1,
x2,
y2,
z2,
p6)
}
pub fn set_cutscene_ped_prop_variation(cutscene_ent_name: Option<&String>,
component_id: i32,
drawable_id: i32,
texture_id: i32,
model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfSetCutscenePedPropVariation {
    crate::__imports::native_set_cutscene_ped_prop_variation(cutscene_ent_name,
component_id,
drawable_id,
texture_id,
model_hash)
}
pub fn request_cut_file(cutscene_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRequestCutFile {
    crate::__imports::native_request_cut_file(cutscene_name)
}
pub fn set_cutscene_multihead_fade_manual(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetCutsceneMultiheadFadeManual {
    crate::__imports::native_set_cutscene_multihead_fade_manual(p0)
}
pub fn get_entity_index_of_cutscene_entity(cutscene_ent_name: Option<&String>,
model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityIndexOfCutsceneEntity {
    crate::__imports::native_get_entity_index_of_cutscene_entity(cutscene_ent_name,
model_hash)
}
pub fn get_cut_file_concat_count(cutscene_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetCutFileConcatCount {
    crate::__imports::native_get_cut_file_concat_count(cutscene_name)
}
pub fn start_cutscene(flags: i32) -> altv_wasm_shared::natives_result::ResultOfStartCutscene {
    crate::__imports::native_start_cutscene(flags)
}
pub fn start_cutscene_at_coords(x: f32,
y: f32,
z: f32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfStartCutsceneAtCoords {
    crate::__imports::native_start_cutscene_at_coords(x,
y,
z,
flags)
}
pub fn set_cutscene_multihead_fade(p0: bool,
p1: bool,
p2: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfSetCutsceneMultiheadFade {
    crate::__imports::native_set_cutscene_multihead_fade(p0,
p1,
p2,
p3)
}
pub fn set_can_display_minimap_during_cutscene_this_update() -> altv_wasm_shared::natives_result::ResultOfSetCanDisplayMinimapDuringCutsceneThisUpdate {
    crate::__imports::native_set_can_display_minimap_during_cutscene_this_update()
}
pub fn has_this_cutscene_loaded(cutscene_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfHasThisCutsceneLoaded {
    crate::__imports::native_has_this_cutscene_loaded(cutscene_name)
}
pub fn set_cutscene_ped_component_variation_from_ped(cutscene_ent_name: Option<&String>,
ped: u32,
model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfSetCutscenePedComponentVariationFromPed {
    crate::__imports::native_set_cutscene_ped_component_variation_from_ped(cutscene_ent_name,
ped,
model_hash)
}
pub fn network_set_mocap_cutscene_can_be_skipped(p0: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetMocapCutsceneCanBeSkipped {
    crate::__imports::native_network_set_mocap_cutscene_can_be_skipped(p0)
}
pub fn was_cutscene_skipped() -> altv_wasm_shared::natives_result::ResultOfWasCutsceneSkipped {
    crate::__imports::native_was_cutscene_skipped()
}
pub fn set_cutscene_can_be_skipped(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetCutsceneCanBeSkipped {
    crate::__imports::native_set_cutscene_can_be_skipped(p0)
}
pub fn remove_cutscene() -> altv_wasm_shared::natives_result::ResultOfRemoveCutscene {
    crate::__imports::native_remove_cutscene()
}
pub fn get_cutscene_section_playing() -> altv_wasm_shared::natives_result::ResultOfGetCutsceneSectionPlaying {
    crate::__imports::native_get_cutscene_section_playing()
}
pub fn does_cutscene_entity_exist(cutscene_ent_name: Option<&String>,
model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfDoesCutsceneEntityExist {
    crate::__imports::native_does_cutscene_entity_exist(cutscene_ent_name,
model_hash)
}
pub fn set_cutscene_entity_streaming_flags(cutscene_ent_name: Option<&String>,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfSetCutsceneEntityStreamingFlags {
    crate::__imports::native_set_cutscene_entity_streaming_flags(cutscene_ent_name,
p1,
p2)
}
pub fn can_set_exit_state_for_registered_entity(cutscene_ent_name: Option<&String>,
model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfCanSetExitStateForRegisteredEntity {
    crate::__imports::native_can_set_exit_state_for_registered_entity(cutscene_ent_name,
model_hash)
}
pub fn is_cutscene_authorized(cutscene_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfIsCutsceneAuthorized {
    crate::__imports::native_is_cutscene_authorized(cutscene_name)
}
pub fn does_cutscene_handle_exist(cutscene_handle: i32) -> altv_wasm_shared::natives_result::ResultOfDoesCutsceneHandleExist {
    crate::__imports::native_does_cutscene_handle_exist(cutscene_handle)
}
pub fn get_cutscene_concat_section_playing() -> altv_wasm_shared::natives_result::ResultOfGetCutsceneConcatSectionPlaying {
    crate::__imports::native_get_cutscene_concat_section_playing()
}
pub fn get_cutscene_play_duration() -> altv_wasm_shared::natives_result::ResultOfGetCutscenePlayDuration {
    crate::__imports::native_get_cutscene_play_duration()
}
pub fn can_use_mobile_phone_during_cutscene() -> altv_wasm_shared::natives_result::ResultOfCanUseMobilePhoneDuringCutscene {
    crate::__imports::native_can_use_mobile_phone_during_cutscene()
}
pub fn can_set_enter_state_for_registered_entity(cutscene_ent_name: Option<&String>,
model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfCanSetEnterStateForRegisteredEntity {
    crate::__imports::native_can_set_enter_state_for_registered_entity(cutscene_ent_name,
model_hash)
}
pub fn has_cutscene_cut_this_frame() -> altv_wasm_shared::natives_result::ResultOfHasCutsceneCutThisFrame {
    crate::__imports::native_has_cutscene_cut_this_frame()
}
pub fn is_cutscene_playback_flag_set(flag: i32) -> altv_wasm_shared::natives_result::ResultOfIsCutscenePlaybackFlagSet {
    crate::__imports::native_is_cutscene_playback_flag_set(flag)
}
pub fn request_cutscene(cutscene_name: Option<&String>,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfRequestCutscene {
    crate::__imports::native_request_cutscene(cutscene_name,
flags)
}
pub fn has_cutscene_finished() -> altv_wasm_shared::natives_result::ResultOfHasCutsceneFinished {
    crate::__imports::native_has_cutscene_finished()
}
pub fn set_vehicle_model_player_will_exit_scene(model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleModelPlayerWillExitScene {
    crate::__imports::native_set_vehicle_model_player_will_exit_scene(model_hash)
}
pub fn set_cutscene_fade_values(p0: bool,
p1: bool,
p2: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfSetCutsceneFadeValues {
    crate::__imports::native_set_cutscene_fade_values(p0,
p1,
p2,
p3)
}
pub fn set_script_can_start_cutscene(thread_id: i32) -> altv_wasm_shared::natives_result::ResultOfSetScriptCanStartCutscene {
    crate::__imports::native_set_script_can_start_cutscene(thread_id)
}
pub fn get_cutscene_end_time() -> altv_wasm_shared::natives_result::ResultOfGetCutsceneEndTime {
    crate::__imports::native_get_cutscene_end_time()
}
pub fn set_cutscene_trigger_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32) -> altv_wasm_shared::natives_result::ResultOfSetCutsceneTriggerArea {
    crate::__imports::native_set_cutscene_trigger_area(x1,
y1,
z1,
x2,
y2,
z2)
}
pub fn is_cutscene_active() -> altv_wasm_shared::natives_result::ResultOfIsCutsceneActive {
    crate::__imports::native_is_cutscene_active()
}
pub fn is_multihead_fade_up() -> altv_wasm_shared::natives_result::ResultOfIsMultiheadFadeUp {
    crate::__imports::native_is_multihead_fade_up()
}
pub fn has_cut_file_loaded(cutscene_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfHasCutFileLoaded {
    crate::__imports::native_has_cut_file_loaded(cutscene_name)
}
pub fn can_set_exit_state_for_camera(p0: bool) -> altv_wasm_shared::natives_result::ResultOfCanSetExitStateForCamera {
    crate::__imports::native_can_set_exit_state_for_camera(p0)
}
pub fn can_request_assets_for_cutscene_entity() -> altv_wasm_shared::natives_result::ResultOfCanRequestAssetsForCutsceneEntity {
    crate::__imports::native_can_request_assets_for_cutscene_entity()
}
pub fn set_cutscene_origin(x: f32,
y: f32,
z: f32,
p3: f32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfSetCutsceneOrigin {
    crate::__imports::native_set_cutscene_origin(x,
y,
z,
p3,
p4)
}
pub fn set_cutscene_ped_component_variation(cutscene_ent_name: Option<&String>,
component_id: i32,
drawable_id: i32,
texture_id: i32,
model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfSetCutscenePedComponentVariation {
    crate::__imports::native_set_cutscene_ped_component_variation(cutscene_ent_name,
component_id,
drawable_id,
texture_id,
model_hash)
}
pub fn get_entity_index_of_registered_entity(cutscene_ent_name: Option<&String>,
model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityIndexOfRegisteredEntity {
    crate::__imports::native_get_entity_index_of_registered_entity(cutscene_ent_name,
model_hash)
}
pub fn request_cutscene_with_playback_list(cutscene_name: Option<&String>,
playback_flags: i32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfRequestCutsceneWithPlaybackList {
    crate::__imports::native_request_cutscene_with_playback_list(cutscene_name,
playback_flags,
flags)
}
pub fn has_cutscene_loaded() -> altv_wasm_shared::natives_result::ResultOfHasCutsceneLoaded {
    crate::__imports::native_has_cutscene_loaded()
}
pub fn set_pad_can_shake_during_cutscene(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPadCanShakeDuringCutscene {
    crate::__imports::native_set_pad_can_shake_during_cutscene(toggle)
}
pub fn stop_cutscene(p0: bool) -> altv_wasm_shared::natives_result::ResultOfStopCutscene {
    crate::__imports::native_stop_cutscene(p0)
}
pub fn remove_cut_file(cutscene_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRemoveCutFile {
    crate::__imports::native_remove_cut_file(cutscene_name)
}
pub fn stop_cutscene_immediately() -> altv_wasm_shared::natives_result::ResultOfStopCutsceneImmediately {
    crate::__imports::native_stop_cutscene_immediately()
}
pub fn is_cutscene_playing() -> altv_wasm_shared::natives_result::ResultOfIsCutscenePlaying {
    crate::__imports::native_is_cutscene_playing()
}
pub fn set_car_generators_can_update_during_cutscene(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetCarGeneratorsCanUpdateDuringCutscene {
    crate::__imports::native_set_car_generators_can_update_during_cutscene(p0)
}
pub fn register_entity_for_cutscene(cutscene_ped: u32,
cutscene_ent_name: Option<&String>,
p2: i32,
model_hash: u32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfRegisterEntityForCutscene {
    crate::__imports::native_register_entity_for_cutscene(cutscene_ped,
cutscene_ent_name,
p2,
model_hash,
p4)
}
pub fn get_cutscene_time() -> altv_wasm_shared::natives_result::ResultOfGetCutsceneTime {
    crate::__imports::native_get_cutscene_time()
}
pub fn get_cutscene_total_duration() -> altv_wasm_shared::natives_result::ResultOfGetCutsceneTotalDuration {
    crate::__imports::native_get_cutscene_total_duration()
}
pub fn datafile_select_creator_stats(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfDatafileSelectCreatorStats {
    crate::__imports::native_datafile_select_creator_stats(p0,
p1)
}
pub fn datadict_get_type(object_data: shared::MemoryBufferId,
key: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDatadictGetType {
    crate::__imports::native_datadict_get_type(object_data,
key)
}
pub fn dataarray_get_count(array_data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfDataarrayGetCount {
    crate::__imports::native_dataarray_get_count(array_data)
}
pub fn datadict_get_float(object_data: shared::MemoryBufferId,
key: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDatadictGetFloat {
    crate::__imports::native_datadict_get_float(object_data,
key)
}
pub fn datadict_get_bool(object_data: shared::MemoryBufferId,
key: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDatadictGetBool {
    crate::__imports::native_datadict_get_bool(object_data,
key)
}
pub fn datafile_has_loaded_file_data(request_id: i32) -> altv_wasm_shared::natives_result::ResultOfDatafileHasLoadedFileData {
    crate::__imports::native_datafile_has_loaded_file_data(request_id)
}
pub fn datafile_select_active_file(request_id: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfDatafileSelectActiveFile {
    crate::__imports::native_datafile_select_active_file(request_id,
p1)
}
pub fn datafile_store_mission_header(p0: i32) -> altv_wasm_shared::natives_result::ResultOfDatafileStoreMissionHeader {
    crate::__imports::native_datafile_store_mission_header(p0)
}
pub fn dataarray_add_string(array_data: shared::MemoryBufferId,
value: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDataarrayAddString {
    crate::__imports::native_dataarray_add_string(array_data,
value)
}
pub fn datadict_set_bool(object_data: shared::MemoryBufferId,
key: Option<&String>,
value: bool) -> altv_wasm_shared::natives_result::ResultOfDatadictSetBool {
    crate::__imports::native_datadict_set_bool(object_data,
key,
value)
}
pub fn dataarray_get_type(array_data: shared::MemoryBufferId,
array_index: i32) -> altv_wasm_shared::natives_result::ResultOfDataarrayGetType {
    crate::__imports::native_dataarray_get_type(array_data,
array_index)
}
pub fn datadict_get_string(object_data: shared::MemoryBufferId,
key: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDatadictGetString {
    crate::__imports::native_datadict_get_string(object_data,
key)
}
pub fn dataarray_get_int(array_data: shared::MemoryBufferId,
array_index: i32) -> altv_wasm_shared::natives_result::ResultOfDataarrayGetInt {
    crate::__imports::native_dataarray_get_int(array_data,
array_index)
}
pub fn dataarray_add_vector(array_data: shared::MemoryBufferId,
value_x: f32,
value_y: f32,
value_z: f32) -> altv_wasm_shared::natives_result::ResultOfDataarrayAddVector {
    crate::__imports::native_dataarray_add_vector(array_data,
value_x,
value_y,
value_z)
}
pub fn ugc_update_mission(content_id: Option<&String>,
content_name: Option<&String>,
description: Option<&String>,
tags_csv: Option<&String>,
content_type_name: Option<&String>,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfUgcUpdateMission {
    crate::__imports::native_ugc_update_mission(content_id,
content_name,
description,
tags_csv,
content_type_name,
p5)
}
pub fn datadict_get_vector(object_data: shared::MemoryBufferId,
key: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDatadictGetVector {
    crate::__imports::native_datadict_get_vector(object_data,
key)
}
pub fn datadict_set_vector(object_data: shared::MemoryBufferId,
key: Option<&String>,
value_x: f32,
value_y: f32,
value_z: f32) -> altv_wasm_shared::natives_result::ResultOfDatadictSetVector {
    crate::__imports::native_datadict_set_vector(object_data,
key,
value_x,
value_y,
value_z)
}
pub fn datafile_update_save_to_cloud(p0: bool) -> altv_wasm_shared::natives_result::ResultOfDatafileUpdateSaveToCloud {
    crate::__imports::native_datafile_update_save_to_cloud(p0)
}
pub fn dataarray_get_bool(array_data: shared::MemoryBufferId,
array_index: i32) -> altv_wasm_shared::natives_result::ResultOfDataarrayGetBool {
    crate::__imports::native_dataarray_get_bool(array_data,
array_index)
}
pub fn datafile_select_ugc_player_data(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfDatafileSelectUgcPlayerData {
    crate::__imports::native_datafile_select_ugc_player_data(p0,
p1)
}
pub fn dataarray_add_float(array_data: shared::MemoryBufferId,
value: f32) -> altv_wasm_shared::natives_result::ResultOfDataarrayAddFloat {
    crate::__imports::native_dataarray_add_float(array_data,
value)
}
pub fn datadict_create_array(object_data: shared::MemoryBufferId,
key: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDatadictCreateArray {
    crate::__imports::native_datadict_create_array(object_data,
key)
}
pub fn ugc_update_content(content_id: Option<&String>,
data: shared::MemoryBufferId,
data_count: i32,
content_name: Option<&String>,
description: Option<&String>,
tags_csv: Option<&String>,
content_type_name: Option<&String>,
p7: i32) -> altv_wasm_shared::natives_result::ResultOfUgcUpdateContent {
    crate::__imports::native_ugc_update_content(content_id,
data,
data_count,
content_name,
description,
tags_csv,
content_type_name,
p7)
}
pub fn dataarray_add_dict(array_data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfDataarrayAddDict {
    crate::__imports::native_dataarray_add_dict(array_data)
}
pub fn ugc_set_player_data(content_id: Option<&String>,
rating: f32,
content_type_name: Option<&String>,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfUgcSetPlayerData {
    crate::__imports::native_ugc_set_player_data(content_id,
rating,
content_type_name,
p3)
}
pub fn datafile_delete_for_additional_data_file(p0: i32) -> altv_wasm_shared::natives_result::ResultOfDatafileDeleteForAdditionalDataFile {
    crate::__imports::native_datafile_delete_for_additional_data_file(p0)
}
pub fn datafile_clear_watch_list() -> altv_wasm_shared::natives_result::ResultOfDatafileClearWatchList {
    crate::__imports::native_datafile_clear_watch_list()
}
pub fn datadict_get_int(object_data: shared::MemoryBufferId,
key: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDatadictGetInt {
    crate::__imports::native_datadict_get_int(object_data,
key)
}
pub fn datadict_get_array(object_data: shared::MemoryBufferId,
key: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDatadictGetArray {
    crate::__imports::native_datadict_get_array(object_data,
key)
}
pub fn datafile_start_save_to_cloud(filename: Option<&String>,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfDatafileStartSaveToCloud {
    crate::__imports::native_datafile_start_save_to_cloud(filename,
p1)
}
pub fn dataarray_get_dict(array_data: shared::MemoryBufferId,
array_index: i32) -> altv_wasm_shared::natives_result::ResultOfDataarrayGetDict {
    crate::__imports::native_dataarray_get_dict(array_data,
array_index)
}
pub fn dataarray_get_vector(array_data: shared::MemoryBufferId,
array_index: i32) -> altv_wasm_shared::natives_result::ResultOfDataarrayGetVector {
    crate::__imports::native_dataarray_get_vector(array_data,
array_index)
}
pub fn datafile_delete_requested_file(request_id: i32) -> altv_wasm_shared::natives_result::ResultOfDatafileDeleteRequestedFile {
    crate::__imports::native_datafile_delete_requested_file(request_id)
}
pub fn datadict_set_string(object_data: shared::MemoryBufferId,
key: Option<&String>,
value: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDatadictSetString {
    crate::__imports::native_datadict_set_string(object_data,
key,
value)
}
pub fn datafile_get_file_dict(p0: i32) -> altv_wasm_shared::natives_result::ResultOfDatafileGetFileDict {
    crate::__imports::native_datafile_get_file_dict(p0)
}
pub fn datafile_delete(p0: i32) -> altv_wasm_shared::natives_result::ResultOfDatafileDelete {
    crate::__imports::native_datafile_delete(p0)
}
pub fn datafile_select_ugc_stats(p0: i32,
p1: bool,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfDatafileSelectUgcStats {
    crate::__imports::native_datafile_select_ugc_stats(p0,
p1,
p2)
}
pub fn datadict_create_dict(object_data: shared::MemoryBufferId,
key: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDatadictCreateDict {
    crate::__imports::native_datadict_create_dict(object_data,
key)
}
pub fn ugc_create_mission(content_name: Option<&String>,
description: Option<&String>,
tags_csv: Option<&String>,
content_type_name: Option<&String>,
publish: bool,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfUgcCreateMission {
    crate::__imports::native_ugc_create_mission(content_name,
description,
tags_csv,
content_type_name,
publish,
p5)
}
pub fn datafile_select_ugc_data(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfDatafileSelectUgcData {
    crate::__imports::native_datafile_select_ugc_data(p0,
p1)
}
pub fn datafile_load_offline_ugc_for_additional_data_file(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfDatafileLoadOfflineUgcForAdditionalDataFile {
    crate::__imports::native_datafile_load_offline_ugc_for_additional_data_file(p0,
p1)
}
pub fn datafile_watch_request_id(request_id: i32) -> altv_wasm_shared::natives_result::ResultOfDatafileWatchRequestId {
    crate::__imports::native_datafile_watch_request_id(request_id)
}
pub fn datadict_get_dict(object_data: shared::MemoryBufferId,
key: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDatadictGetDict {
    crate::__imports::native_datadict_get_dict(object_data,
key)
}
pub fn datafile_is_save_pending() -> altv_wasm_shared::natives_result::ResultOfDatafileIsSavePending {
    crate::__imports::native_datafile_is_save_pending()
}
pub fn dataarray_get_float(array_data: shared::MemoryBufferId,
array_index: i32) -> altv_wasm_shared::natives_result::ResultOfDataarrayGetFloat {
    crate::__imports::native_dataarray_get_float(array_data,
array_index)
}
pub fn datadict_set_float(object_data: shared::MemoryBufferId,
key: Option<&String>,
value: f32) -> altv_wasm_shared::natives_result::ResultOfDatadictSetFloat {
    crate::__imports::native_datadict_set_float(object_data,
key,
value)
}
pub fn datafile_load_offline_ugc(filename: Option<&String>,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfDatafileLoadOfflineUgc {
    crate::__imports::native_datafile_load_offline_ugc(filename,
p1)
}
pub fn datafile_flush_mission_header() -> altv_wasm_shared::natives_result::ResultOfDatafileFlushMissionHeader {
    crate::__imports::native_datafile_flush_mission_header()
}
pub fn ugc_create_content(data: shared::MemoryBufferId,
data_count: i32,
content_name: Option<&String>,
description: Option<&String>,
tags_csv: Option<&String>,
content_type_name: Option<&String>,
publish: bool,
p7: i32) -> altv_wasm_shared::natives_result::ResultOfUgcCreateContent {
    crate::__imports::native_ugc_create_content(data,
data_count,
content_name,
description,
tags_csv,
content_type_name,
publish,
p7)
}
pub fn dataarray_add_int(array_data: shared::MemoryBufferId,
value: i32) -> altv_wasm_shared::natives_result::ResultOfDataarrayAddInt {
    crate::__imports::native_dataarray_add_int(array_data,
value)
}
pub fn datafile_create(p0: i32) -> altv_wasm_shared::natives_result::ResultOfDatafileCreate {
    crate::__imports::native_datafile_create(p0)
}
pub fn dataarray_get_string(array_data: shared::MemoryBufferId,
array_index: i32) -> altv_wasm_shared::natives_result::ResultOfDataarrayGetString {
    crate::__imports::native_dataarray_get_string(array_data,
array_index)
}
pub fn datafile_get_file_dict_for_additional_data_file(p0: i32) -> altv_wasm_shared::natives_result::ResultOfDatafileGetFileDictForAdditionalDataFile {
    crate::__imports::native_datafile_get_file_dict_for_additional_data_file(p0)
}
pub fn datadict_set_int(object_data: shared::MemoryBufferId,
key: Option<&String>,
value: i32) -> altv_wasm_shared::natives_result::ResultOfDatadictSetInt {
    crate::__imports::native_datadict_set_int(object_data,
key,
value)
}
pub fn dataarray_add_bool(array_data: shared::MemoryBufferId,
value: bool) -> altv_wasm_shared::natives_result::ResultOfDataarrayAddBool {
    crate::__imports::native_dataarray_add_bool(array_data,
value)
}
pub fn datafile_has_valid_file_data(request_id: i32) -> altv_wasm_shared::natives_result::ResultOfDatafileHasValidFileData {
    crate::__imports::native_datafile_has_valid_file_data(request_id)
}
pub fn datafile_is_valid_request_id(index: i32) -> altv_wasm_shared::natives_result::ResultOfDatafileIsValidRequestId {
    crate::__imports::native_datafile_is_valid_request_id(index)
}
pub fn decor_remove(entity: u32,
property_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDecorRemove {
    crate::__imports::native_decor_remove(entity,
property_name)
}
pub fn decor_exist_on(entity: u32,
property_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDecorExistOn {
    crate::__imports::native_decor_exist_on(entity,
property_name)
}
pub fn decor_set_int(entity: u32,
property_name: Option<&String>,
value: i32) -> altv_wasm_shared::natives_result::ResultOfDecorSetInt {
    crate::__imports::native_decor_set_int(entity,
property_name,
value)
}
pub fn decor_set_float(entity: u32,
property_name: Option<&String>,
value: f32) -> altv_wasm_shared::natives_result::ResultOfDecorSetFloat {
    crate::__imports::native_decor_set_float(entity,
property_name,
value)
}
pub fn decor_is_registered_as_type(property_name: Option<&String>,
r#type: i32) -> altv_wasm_shared::natives_result::ResultOfDecorIsRegisteredAsType {
    crate::__imports::native_decor_is_registered_as_type(property_name,
r#type)
}
pub fn decor_get_float(entity: u32,
property_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDecorGetFloat {
    crate::__imports::native_decor_get_float(entity,
property_name)
}
pub fn decor_set_bool(entity: u32,
property_name: Option<&String>,
value: bool) -> altv_wasm_shared::natives_result::ResultOfDecorSetBool {
    crate::__imports::native_decor_set_bool(entity,
property_name,
value)
}
pub fn decor_set_time(entity: u32,
property_name: Option<&String>,
timestamp: i32) -> altv_wasm_shared::natives_result::ResultOfDecorSetTime {
    crate::__imports::native_decor_set_time(entity,
property_name,
timestamp)
}
pub fn decor_register(property_name: Option<&String>,
r#type: i32) -> altv_wasm_shared::natives_result::ResultOfDecorRegister {
    crate::__imports::native_decor_register(property_name,
r#type)
}
pub fn decor_get_int(entity: u32,
property_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDecorGetInt {
    crate::__imports::native_decor_get_int(entity,
property_name)
}
pub fn decor_register_lock() -> altv_wasm_shared::natives_result::ResultOfDecorRegisterLock {
    crate::__imports::native_decor_register_lock()
}
pub fn decor_get_bool(entity: u32,
property_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDecorGetBool {
    crate::__imports::native_decor_get_bool(entity,
property_name)
}
pub fn on_enter_mp() -> altv_wasm_shared::natives_result::ResultOfOnEnterMp {
    crate::__imports::native_on_enter_mp()
}
pub fn get_is_loading_screen_active() -> altv_wasm_shared::natives_result::ResultOfGetIsLoadingScreenActive {
    crate::__imports::native_get_is_loading_screen_active()
}
pub fn are_any_ccs_pending() -> altv_wasm_shared::natives_result::ResultOfAreAnyCcsPending {
    crate::__imports::native_are_any_ccs_pending()
}
pub fn has_cloud_requests_finished(p0: bool,
unused: i32) -> altv_wasm_shared::natives_result::ResultOfHasCloudRequestsFinished {
    crate::__imports::native_has_cloud_requests_finished(p0,
unused)
}
pub fn is_dlc_present(dlc_hash: u32) -> altv_wasm_shared::natives_result::ResultOfIsDlcPresent {
    crate::__imports::native_is_dlc_present(dlc_hash)
}
pub fn get_ever_had_bad_pack_order() -> altv_wasm_shared::natives_result::ResultOfGetEverHadBadPackOrder {
    crate::__imports::native_get_ever_had_bad_pack_order()
}
pub fn get_extracontent_cloud_result() -> altv_wasm_shared::natives_result::ResultOfGetExtracontentCloudResult {
    crate::__imports::native_get_extracontent_cloud_result()
}
pub fn dlc_check_compat_pack_configuration() -> altv_wasm_shared::natives_result::ResultOfDlcCheckCompatPackConfiguration {
    crate::__imports::native_dlc_check_compat_pack_configuration()
}
pub fn get_is_initial_loading_screen_active() -> altv_wasm_shared::natives_result::ResultOfGetIsInitialLoadingScreenActive {
    crate::__imports::native_get_is_initial_loading_screen_active()
}
pub fn on_enter_sp() -> altv_wasm_shared::natives_result::ResultOfOnEnterSp {
    crate::__imports::native_on_enter_sp()
}
pub fn dlc_check_cloud_data_correct() -> altv_wasm_shared::natives_result::ResultOfDlcCheckCloudDataCorrect {
    crate::__imports::native_dlc_check_cloud_data_correct()
}
pub fn has_entity_clear_los_to_entity_in_front(entity1: u32,
entity2: u32) -> altv_wasm_shared::natives_result::ResultOfHasEntityClearLosToEntityInFront {
    crate::__imports::native_has_entity_clear_los_to_entity_in_front(entity1,
entity2)
}
pub fn remove_model_swap(x: f32,
y: f32,
z: f32,
radius: f32,
original_model: u32,
new_model: u32,
p6: bool) -> altv_wasm_shared::natives_result::ResultOfRemoveModelSwap {
    crate::__imports::native_remove_model_swap(x,
y,
z,
radius,
original_model,
new_model,
p6)
}
pub fn get_ped_index_from_entity_index(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedIndexFromEntityIndex {
    crate::__imports::native_get_ped_index_from_entity_index(entity)
}
pub fn does_entity_have_drawable(entity: u32) -> altv_wasm_shared::natives_result::ResultOfDoesEntityHaveDrawable {
    crate::__imports::native_does_entity_have_drawable(entity)
}
pub fn set_entity_coords(entity: u32,
x_pos: f32,
y_pos: f32,
z_pos: f32,
x_axis: bool,
y_axis: bool,
z_axis: bool,
clear_area: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityCoords {
    crate::__imports::native_set_entity_coords(entity,
x_pos,
y_pos,
z_pos,
x_axis,
y_axis,
z_axis,
clear_area)
}
pub fn find_anim_event_phase(anim_dictionary: Option<&String>,
anim_name: Option<&String>,
p2: Option<&String>,
p3: shared::MemoryBufferId,
p4: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfFindAnimEventPhase {
    crate::__imports::native_find_anim_event_phase(anim_dictionary,
anim_name,
p2,
p3,
p4)
}
pub fn set_entity_records_collisions(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityRecordsCollisions {
    crate::__imports::native_set_entity_records_collisions(entity,
toggle)
}
pub fn get_entity_forward_vector(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityForwardVector {
    crate::__imports::native_get_entity_forward_vector(entity)
}
pub fn is_entity_a_mission_entity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityAmissionEntity {
    crate::__imports::native_is_entity_a_mission_entity(entity)
}
pub fn set_entity_load_collision_flag(entity: u32,
toggle: bool,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfSetEntityLoadCollisionFlag {
    crate::__imports::native_set_entity_load_collision_flag(entity,
toggle,
p2)
}
pub fn set_entity_max_speed(entity: u32,
speed: f32) -> altv_wasm_shared::natives_result::ResultOfSetEntityMaxSpeed {
    crate::__imports::native_set_entity_max_speed(entity,
speed)
}
pub fn is_entity_touching_model(entity: u32,
model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityTouchingModel {
    crate::__imports::native_is_entity_touching_model(entity,
model_hash)
}
pub fn stop_synchronized_map_entity_anim(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: i32,
z2: f32) -> altv_wasm_shared::natives_result::ResultOfStopSynchronizedMapEntityAnim {
    crate::__imports::native_stop_synchronized_map_entity_anim(x1,
y1,
z1,
x2,
y2,
z2)
}
pub fn is_entity_static(entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityStatic {
    crate::__imports::native_is_entity_static(entity)
}
pub fn create_forced_object(x: f32,
y: f32,
z: f32,
p3: i32,
model_hash: u32,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfCreateForcedObject {
    crate::__imports::native_create_forced_object(x,
y,
z,
p3,
model_hash,
p5)
}
pub fn get_entity_max_health(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityMaxHealth {
    crate::__imports::native_get_entity_max_health(entity)
}
pub fn set_entity_max_health(entity: u32,
value: i32) -> altv_wasm_shared::natives_result::ResultOfSetEntityMaxHealth {
    crate::__imports::native_set_entity_max_health(entity,
value)
}
pub fn set_entity_dynamic(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityDynamic {
    crate::__imports::native_set_entity_dynamic(entity,
toggle)
}
pub fn set_entity_can_be_damaged(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityCanBeDamaged {
    crate::__imports::native_set_entity_can_be_damaged(entity,
toggle)
}
pub fn is_entity_touching_entity(entity: u32,
target_entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityTouchingEntity {
    crate::__imports::native_is_entity_touching_entity(entity,
target_entity)
}
pub fn get_offset_from_entity_in_world_coords(entity: u32,
offset_x: f32,
offset_y: f32,
offset_z: f32) -> altv_wasm_shared::natives_result::ResultOfGetOffsetFromEntityInWorldCoords {
    crate::__imports::native_get_offset_from_entity_in_world_coords(entity,
offset_x,
offset_y,
offset_z)
}
pub fn apply_force_to_entity_center_of_mass(entity: u32,
force_type: i32,
x: f32,
y: f32,
z: f32,
p5: bool,
is_direction_rel: bool,
is_force_rel: bool,
p8: bool) -> altv_wasm_shared::natives_result::ResultOfApplyForceToEntityCenterOfMass {
    crate::__imports::native_apply_force_to_entity_center_of_mass(entity,
force_type,
x,
y,
z,
p5,
is_direction_rel,
is_force_rel,
p8)
}
pub fn set_entity_use_max_distance_for_water_reflection(entity: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityUseMaxDistanceForWaterReflection {
    crate::__imports::native_set_entity_use_max_distance_for_water_reflection(entity,
p1)
}
pub fn set_entity_collision(entity: u32,
toggle: bool,
keep_physics: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityCollision {
    crate::__imports::native_set_entity_collision(entity,
toggle,
keep_physics)
}
pub fn set_entity_velocity(entity: u32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfSetEntityVelocity {
    crate::__imports::native_set_entity_velocity(entity,
x,
y,
z)
}
pub fn is_entity_upsidedown(entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityUpsidedown {
    crate::__imports::native_is_entity_upsidedown(entity)
}
pub fn get_entity_height_above_ground(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityHeightAboveGround {
    crate::__imports::native_get_entity_height_above_ground(entity)
}
pub fn is_entity_playing_anim(entity: u32,
anim_dict: Option<&String>,
anim_name: Option<&String>,
task_flag: i32) -> altv_wasm_shared::natives_result::ResultOfIsEntityPlayingAnim {
    crate::__imports::native_is_entity_playing_anim(entity,
anim_dict,
anim_name,
task_flag)
}
pub fn get_entity_of_type_attached_to_entity(entity: u32,
model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityOfTypeAttachedToEntity {
    crate::__imports::native_get_entity_of_type_attached_to_entity(entity,
model_hash)
}
pub fn is_entity_at_coord(entity: u32,
x_pos: f32,
y_pos: f32,
z_pos: f32,
x_size: f32,
y_size: f32,
z_size: f32,
p7: bool,
p8: bool,
p9: i32) -> altv_wasm_shared::natives_result::ResultOfIsEntityAtCoord {
    crate::__imports::native_is_entity_at_coord(entity,
x_pos,
y_pos,
z_pos,
x_size,
y_size,
z_size,
p7,
p8,
p9)
}
pub fn has_entity_anim_finished(entity: u32,
anim_dict: Option<&String>,
anim_name: Option<&String>,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfHasEntityAnimFinished {
    crate::__imports::native_has_entity_anim_finished(entity,
anim_dict,
anim_name,
p3)
}
pub fn get_entity_rotation_velocity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityRotationVelocity {
    crate::__imports::native_get_entity_rotation_velocity(entity)
}
pub fn does_entity_have_anim_director(entity: u32) -> altv_wasm_shared::natives_result::ResultOfDoesEntityHaveAnimDirector {
    crate::__imports::native_does_entity_have_anim_director(entity)
}
pub fn get_offset_from_entity_given_world_coords(entity: u32,
pos_x: f32,
pos_y: f32,
pos_z: f32) -> altv_wasm_shared::natives_result::ResultOfGetOffsetFromEntityGivenWorldCoords {
    crate::__imports::native_get_offset_from_entity_given_world_coords(entity,
pos_x,
pos_y,
pos_z)
}
pub fn set_entity_coords_no_offset(entity: u32,
x_pos: f32,
y_pos: f32,
z_pos: f32,
x_axis: bool,
y_axis: bool,
z_axis: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityCoordsNoOffset {
    crate::__imports::native_set_entity_coords_no_offset(entity,
x_pos,
y_pos,
z_pos,
x_axis,
y_axis,
z_axis)
}
pub fn set_ped_as_no_longer_needed(ped: u32) -> altv_wasm_shared::natives_result::ResultOfSetPedAsNoLongerNeeded {
    crate::__imports::native_set_ped_as_no_longer_needed(ped)
}
pub fn is_entity_attached_to_any_vehicle(entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityAttachedToAnyVehicle {
    crate::__imports::native_is_entity_attached_to_any_vehicle(entity)
}
pub fn stop_entity_anim(entity: u32,
animation: Option<&String>,
anim_group: Option<&String>,
p3: f32) -> altv_wasm_shared::natives_result::ResultOfStopEntityAnim {
    crate::__imports::native_stop_entity_anim(entity,
animation,
anim_group,
p3)
}
pub fn set_entity_anim_speed(entity: u32,
anim_dictionary: Option<&String>,
anim_name: Option<&String>,
speed_multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetEntityAnimSpeed {
    crate::__imports::native_set_entity_anim_speed(entity,
anim_dictionary,
anim_name,
speed_multiplier)
}
pub fn set_entity_motion_blur(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityMotionBlur {
    crate::__imports::native_set_entity_motion_blur(entity,
toggle)
}
pub fn set_entity_noweapondecals(entity: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityNoweapondecals {
    crate::__imports::native_set_entity_noweapondecals(entity,
p1)
}
pub fn get_entity_anim_current_time(entity: u32,
anim_dict: Option<&String>,
anim_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetEntityAnimCurrentTime {
    crate::__imports::native_get_entity_anim_current_time(entity,
anim_dict,
anim_name)
}
pub fn set_entity_can_only_be_damaged_by_script_participants(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityCanOnlyBeDamagedByScriptParticipants {
    crate::__imports::native_set_entity_can_only_be_damaged_by_script_participants(entity,
toggle)
}
pub fn set_allow_migrate_to_spectator(entity: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetAllowMigrateToSpectator {
    crate::__imports::native_set_allow_migrate_to_spectator(entity,
p1)
}
pub fn set_entity_invincible(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityInvincible {
    crate::__imports::native_set_entity_invincible(entity,
toggle)
}
pub fn set_entity_should_freeze_waiting_on_collision(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityShouldFreezeWaitingOnCollision {
    crate::__imports::native_set_entity_should_freeze_waiting_on_collision(entity,
toggle)
}
pub fn has_entity_clear_los_to_entity_adjust_for_cover(entity1: u32,
entity2: u32,
trace_type: i32) -> altv_wasm_shared::natives_result::ResultOfHasEntityClearLosToEntityAdjustForCover {
    crate::__imports::native_has_entity_clear_los_to_entity_adjust_for_cover(entity1,
entity2,
trace_type)
}
pub fn create_model_hide_excluding_script_objects(x: f32,
y: f32,
z: f32,
radius: f32,
model_hash: u32,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfCreateModelHideExcludingScriptObjects {
    crate::__imports::native_create_model_hide_excluding_script_objects(x,
y,
z,
radius,
model_hash,
p5)
}
pub fn set_object_as_no_longer_needed(object: u32) -> altv_wasm_shared::natives_result::ResultOfSetObjectAsNoLongerNeeded {
    crate::__imports::native_set_object_as_no_longer_needed(object)
}
pub fn get_entity_coords(entity: u32,
alive: bool) -> altv_wasm_shared::natives_result::ResultOfGetEntityCoords {
    crate::__imports::native_get_entity_coords(entity,
alive)
}
pub fn force_entity_ai_and_animation_update(entity: u32) -> altv_wasm_shared::natives_result::ResultOfForceEntityAiAndAnimationUpdate {
    crate::__imports::native_force_entity_ai_and_animation_update(entity)
}
pub fn get_entity_lod_dist(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityLodDist {
    crate::__imports::native_get_entity_lod_dist(entity)
}
pub fn freeze_entity_position(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfFreezeEntityPosition {
    crate::__imports::native_freeze_entity_position(entity,
toggle)
}
pub fn stop_synchronized_entity_anim(entity: u32,
p1: f32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfStopSynchronizedEntityAnim {
    crate::__imports::native_stop_synchronized_entity_anim(entity,
p1,
p2)
}
pub fn set_entity_anim_current_time(entity: u32,
anim_dictionary: Option<&String>,
anim_name: Option<&String>,
time: f32) -> altv_wasm_shared::natives_result::ResultOfSetEntityAnimCurrentTime {
    crate::__imports::native_set_entity_anim_current_time(entity,
anim_dictionary,
anim_name,
time)
}
pub fn set_entity_alpha(entity: u32,
alpha_level: i32,
skin: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityAlpha {
    crate::__imports::native_set_entity_alpha(entity,
alpha_level,
skin)
}
pub fn get_world_position_of_entity_bone(entity: u32,
bone_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetWorldPositionOfEntityBone {
    crate::__imports::native_get_world_position_of_entity_bone(entity,
bone_index)
}
pub fn get_entity_bone_postion(entity: u32,
bone_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetEntityBonePostion {
    crate::__imports::native_get_entity_bone_postion(entity,
bone_index)
}
pub fn is_entity_visible(entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityVisible {
    crate::__imports::native_is_entity_visible(entity)
}
pub fn get_entity_velocity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityVelocity {
    crate::__imports::native_get_entity_velocity(entity)
}
pub fn get_entity_attached_to(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityAttachedTo {
    crate::__imports::native_get_entity_attached_to(entity)
}
pub fn reset_pickup_entity_glow(entity: u32) -> altv_wasm_shared::natives_result::ResultOfResetPickupEntityGlow {
    crate::__imports::native_reset_pickup_entity_glow(entity)
}
pub fn set_entity_has_gravity(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityHasGravity {
    crate::__imports::native_set_entity_has_gravity(entity,
toggle)
}
pub fn get_vehicle_index_from_entity_index(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleIndexFromEntityIndex {
    crate::__imports::native_get_vehicle_index_from_entity_index(entity)
}
pub fn get_nearest_player_to_entity_on_team(entity: u32,
team: i32) -> altv_wasm_shared::natives_result::ResultOfGetNearestPlayerToEntityOnTeam {
    crate::__imports::native_get_nearest_player_to_entity_on_team(entity,
team)
}
pub fn get_entity_anim_total_time(entity: u32,
anim_dict: Option<&String>,
anim_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetEntityAnimTotalTime {
    crate::__imports::native_get_entity_anim_total_time(entity,
anim_dict,
anim_name)
}
pub fn is_entity_in_angled_area(entity: u32,
x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
width: f32,
debug: bool,
include_z: bool,
p10: i32) -> altv_wasm_shared::natives_result::ResultOfIsEntityInAngledArea {
    crate::__imports::native_is_entity_in_angled_area(entity,
x1,
y1,
z1,
x2,
y2,
z2,
width,
debug,
include_z,
p10)
}
pub fn is_entity_a_ped(entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityAped {
    crate::__imports::native_is_entity_a_ped(entity)
}
pub fn is_entity_upright(entity: u32,
angle: f32) -> altv_wasm_shared::natives_result::ResultOfIsEntityUpright {
    crate::__imports::native_is_entity_upright(entity,
angle)
}
pub fn is_entity_in_area(entity: u32,
x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
p7: bool,
p8: bool,
p9: i32) -> altv_wasm_shared::natives_result::ResultOfIsEntityInArea {
    crate::__imports::native_is_entity_in_area(entity,
x1,
y1,
z1,
x2,
y2,
z2,
p7,
p8,
p9)
}
pub fn set_entity_trafficlight_override(entity: u32,
state: i32) -> altv_wasm_shared::natives_result::ResultOfSetEntityTrafficlightOverride {
    crate::__imports::native_set_entity_trafficlight_override(entity,
state)
}
pub fn set_entity_lod_dist(entity: u32,
value: i32) -> altv_wasm_shared::natives_result::ResultOfSetEntityLodDist {
    crate::__imports::native_set_entity_lod_dist(entity,
value)
}
pub fn get_entity_alpha(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityAlpha {
    crate::__imports::native_get_entity_alpha(entity)
}
pub fn get_entity_height(entity: u32,
x: f32,
y: f32,
z: f32,
at_top: bool,
in_world_coords: bool) -> altv_wasm_shared::natives_result::ResultOfGetEntityHeight {
    crate::__imports::native_get_entity_height(entity,
x,
y,
z,
at_top,
in_world_coords)
}
pub fn set_entity_sort_bias(entity: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetEntitySortBias {
    crate::__imports::native_set_entity_sort_bias(entity,
p1)
}
pub fn get_last_material_hit_by_entity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetLastMaterialHitByEntity {
    crate::__imports::native_get_last_material_hit_by_entity(entity)
}
pub fn attach_entity_bone_to_entity_bone(entity1: u32,
entity2: u32,
bone_index1: i32,
bone_index2: i32,
p4: bool,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfAttachEntityBoneToEntityBone {
    crate::__imports::native_attach_entity_bone_to_entity_bone(entity1,
entity2,
bone_index1,
bone_index2,
p4,
p5)
}
pub fn is_entity_dead(entity: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfIsEntityDead {
    crate::__imports::native_is_entity_dead(entity,
p1)
}
pub fn has_entity_been_damaged_by_any_ped(entity: u32) -> altv_wasm_shared::natives_result::ResultOfHasEntityBeenDamagedByAnyPed {
    crate::__imports::native_has_entity_been_damaged_by_any_ped(entity)
}
pub fn remove_forced_object(x: f32,
y: f32,
z: f32,
p3: f32,
model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfRemoveForcedObject {
    crate::__imports::native_remove_forced_object(x,
y,
z,
p3,
model_hash)
}
pub fn set_entity_coords_without_plants_reset(entity: u32,
x_pos: f32,
y_pos: f32,
z_pos: f32,
alive: bool,
dead_flag: bool,
ragdoll_flag: bool,
clear_area: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityCoordsWithoutPlantsReset {
    crate::__imports::native_set_entity_coords_without_plants_reset(entity,
x_pos,
y_pos,
z_pos,
alive,
dead_flag,
ragdoll_flag,
clear_area)
}
pub fn set_vehicle_as_no_longer_needed(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleAsNoLongerNeeded {
    crate::__imports::native_set_vehicle_as_no_longer_needed(vehicle)
}
pub fn set_entity_cant_cause_collision_damaged_entity(entity1: u32,
entity2: u32) -> altv_wasm_shared::natives_result::ResultOfSetEntityCantCauseCollisionDamagedEntity {
    crate::__imports::native_set_entity_cant_cause_collision_damaged_entity(entity1,
entity2)
}
pub fn set_entity_requires_more_expensive_river_check(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityRequiresMoreExpensiveRiverCheck {
    crate::__imports::native_set_entity_requires_more_expensive_river_check(entity,
toggle)
}
pub fn is_entity_a_vehicle(entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityAvehicle {
    crate::__imports::native_is_entity_a_vehicle(entity)
}
pub fn set_entity_health(entity: u32,
health: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfSetEntityHealth {
    crate::__imports::native_set_entity_health(entity,
health,
p2)
}
pub fn attach_entity_to_entity(entity1: u32,
entity2: u32,
bone_index: i32,
x_pos: f32,
y_pos: f32,
z_pos: f32,
x_rot: f32,
y_rot: f32,
z_rot: f32,
p9: bool,
use_soft_pinning: bool,
collision: bool,
is_ped: bool,
vertex_index: i32,
fixed_rot: bool,
p15: i32) -> altv_wasm_shared::natives_result::ResultOfAttachEntityToEntity {
    crate::__imports::native_attach_entity_to_entity(entity1,
entity2,
bone_index,
x_pos,
y_pos,
z_pos,
x_rot,
y_rot,
z_rot,
p9,
use_soft_pinning,
collision,
is_ped,
vertex_index,
fixed_rot,
p15)
}
pub fn enable_entity_bullet_collision(entity: u32) -> altv_wasm_shared::natives_result::ResultOfEnableEntityBulletCollision {
    crate::__imports::native_enable_entity_bullet_collision(entity)
}
pub fn set_entity_only_damaged_by_relationship_group(entity: u32,
p1: bool,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfSetEntityOnlyDamagedByRelationshipGroup {
    crate::__imports::native_set_entity_only_damaged_by_relationship_group(entity,
p1,
p2)
}
pub fn get_nearest_player_to_entity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetNearestPlayerToEntity {
    crate::__imports::native_get_nearest_player_to_entity(entity)
}
pub fn does_entity_exist(entity: u32) -> altv_wasm_shared::natives_result::ResultOfDoesEntityExist {
    crate::__imports::native_does_entity_exist(entity)
}
pub fn set_entity_render_scorched(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityRenderScorched {
    crate::__imports::native_set_entity_render_scorched(entity,
toggle)
}
pub fn is_an_entity(handle: u32) -> altv_wasm_shared::natives_result::ResultOfIsAnEntity {
    crate::__imports::native_is_an_entity(handle)
}
pub fn is_entity_at_entity(entity1: u32,
entity2: u32,
x_size: f32,
y_size: f32,
z_size: f32,
p5: bool,
p6: bool,
p7: i32) -> altv_wasm_shared::natives_result::ResultOfIsEntityAtEntity {
    crate::__imports::native_is_entity_at_entity(entity1,
entity2,
x_size,
y_size,
z_size,
p5,
p6,
p7)
}
pub fn does_entity_have_skeleton(entity: u32) -> altv_wasm_shared::natives_result::ResultOfDoesEntityHaveSkeleton {
    crate::__imports::native_does_entity_have_skeleton(entity)
}
pub fn set_entity_quaternion(entity: u32,
x: f32,
y: f32,
z: f32,
w: f32) -> altv_wasm_shared::natives_result::ResultOfSetEntityQuaternion {
    crate::__imports::native_set_entity_quaternion(entity,
x,
y,
z,
w)
}
pub fn set_entity_is_in_vehicle(entity: u32) -> altv_wasm_shared::natives_result::ResultOfSetEntityIsInVehicle {
    crate::__imports::native_set_entity_is_in_vehicle(entity)
}
pub fn set_entity_only_damaged_by_player(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityOnlyDamagedByPlayer {
    crate::__imports::native_set_entity_only_damaged_by_player(entity,
toggle)
}
pub fn get_entity_quaternion(entity: u32,
x: f32,
y: f32,
z: f32,
w: f32) -> altv_wasm_shared::natives_result::ResultOfGetEntityQuaternion {
    crate::__imports::native_get_entity_quaternion(entity,
x,
y,
z,
w)
}
pub fn set_entity_lights(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityLights {
    crate::__imports::native_set_entity_lights(entity,
toggle)
}
pub fn play_entity_anim(entity: u32,
anim_name: Option<&String>,
anim_dict: Option<&String>,
p3: f32,
r#loop: bool,
stay_in_anim: bool,
p6: bool,
delta: f32,
bitset: i32) -> altv_wasm_shared::natives_result::ResultOfPlayEntityAnim {
    crate::__imports::native_play_entity_anim(entity,
anim_name,
anim_dict,
p3,
r#loop,
stay_in_anim,
p6,
delta,
bitset)
}
pub fn get_entity_roll(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityRoll {
    crate::__imports::native_get_entity_roll(entity)
}
pub fn set_entity_angular_velocity(entity: u32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfSetEntityAngularVelocity {
    crate::__imports::native_set_entity_angular_velocity(entity,
x,
y,
z)
}
pub fn get_entity_heading_from_eulers(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityHeadingFromEulers {
    crate::__imports::native_get_entity_heading_from_eulers(entity)
}
pub fn set_entity_rotation(entity: u32,
pitch: f32,
roll: f32,
yaw: f32,
rotation_order: i32,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityRotation {
    crate::__imports::native_set_entity_rotation(entity,
pitch,
roll,
yaw,
rotation_order,
p5)
}
pub fn get_entity_forward_y(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityForwardY {
    crate::__imports::native_get_entity_forward_y(entity)
}
pub fn is_entity_in_air(entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityInAir {
    crate::__imports::native_is_entity_in_air(entity)
}
pub fn create_model_hide(x: f32,
y: f32,
z: f32,
radius: f32,
model_hash: u32,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfCreateModelHide {
    crate::__imports::native_create_model_hide(x,
y,
z,
radius,
model_hash,
p5)
}
pub fn get_entity_type(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityType {
    crate::__imports::native_get_entity_type(entity)
}
pub fn has_entity_collided_with_anything(entity: u32) -> altv_wasm_shared::natives_result::ResultOfHasEntityCollidedWithAnything {
    crate::__imports::native_has_entity_collided_with_anything(entity)
}
pub fn get_entity_forward_x(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityForwardX {
    crate::__imports::native_get_entity_forward_x(entity)
}
pub fn is_entity_an_object(entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityAnObject {
    crate::__imports::native_is_entity_an_object(entity)
}
pub fn set_entity_heading(entity: u32,
heading: f32) -> altv_wasm_shared::natives_result::ResultOfSetEntityHeading {
    crate::__imports::native_set_entity_heading(entity,
heading)
}
pub fn create_model_swap(x: f32,
y: f32,
z: f32,
radius: f32,
original_model: u32,
new_model: u32,
p6: bool) -> altv_wasm_shared::natives_result::ResultOfCreateModelSwap {
    crate::__imports::native_create_model_swap(x,
y,
z,
radius,
original_model,
new_model,
p6)
}
pub fn has_entity_been_damaged_by_any_object(entity: u32) -> altv_wasm_shared::natives_result::ResultOfHasEntityBeenDamagedByAnyObject {
    crate::__imports::native_has_entity_been_damaged_by_any_object(entity)
}
pub fn get_entity_upright_value(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityUprightValue {
    crate::__imports::native_get_entity_upright_value(entity)
}
pub fn detach_entity(entity: u32,
dynamic: bool,
collision: bool) -> altv_wasm_shared::natives_result::ResultOfDetachEntity {
    crate::__imports::native_detach_entity(entity,
dynamic,
collision)
}
pub fn get_entity_speed_vector(entity: u32,
relative: bool) -> altv_wasm_shared::natives_result::ResultOfGetEntitySpeedVector {
    crate::__imports::native_get_entity_speed_vector(entity,
relative)
}
pub fn reset_entity_alpha(entity: u32) -> altv_wasm_shared::natives_result::ResultOfResetEntityAlpha {
    crate::__imports::native_reset_entity_alpha(entity)
}
pub fn set_entity_completely_disable_collision(entity: u32,
toggle: bool,
keep_physics: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityCompletelyDisableCollision {
    crate::__imports::native_set_entity_completely_disable_collision(entity,
toggle,
keep_physics)
}
pub fn get_entity_model(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityModel {
    crate::__imports::native_get_entity_model(entity)
}
pub fn set_entity_no_collision_entity(entity1: u32,
entity2: u32,
this_frame_only: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityNoCollisionEntity {
    crate::__imports::native_set_entity_no_collision_entity(entity1,
entity2,
this_frame_only)
}
pub fn get_entity_script(entity: u32,
script: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityScript {
    crate::__imports::native_get_entity_script(entity,
script)
}
pub fn clear_entity_last_damage_entity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfClearEntityLastDamageEntity {
    crate::__imports::native_clear_entity_last_damage_entity(entity)
}
pub fn get_last_entity_hit_by_entity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetLastEntityHitByEntity {
    crate::__imports::native_get_last_entity_hit_by_entity(entity)
}
pub fn set_can_climb_on_entity(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetCanClimbOnEntity {
    crate::__imports::native_set_can_climb_on_entity(entity,
toggle)
}
pub fn set_entity_always_prerender(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityAlwaysPrerender {
    crate::__imports::native_set_entity_always_prerender(entity,
toggle)
}
pub fn set_entity_as_mission_entity(entity: u32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityAsMissionEntity {
    crate::__imports::native_set_entity_as_mission_entity(entity,
p1,
p2)
}
pub fn delete_entity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfDeleteEntity {
    crate::__imports::native_delete_entity(entity)
}
pub fn get_entity_rotation(entity: u32,
rotation_order: i32) -> altv_wasm_shared::natives_result::ResultOfGetEntityRotation {
    crate::__imports::native_get_entity_rotation(entity,
rotation_order)
}
pub fn is_entity_attached_to_any_ped(entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityAttachedToAnyPed {
    crate::__imports::native_is_entity_attached_to_any_ped(entity)
}
pub fn set_entity_can_only_be_damaged_by_entity(entity1: u32,
entity2: u32) -> altv_wasm_shared::natives_result::ResultOfSetEntityCanOnlyBeDamagedByEntity {
    crate::__imports::native_set_entity_can_only_be_damaged_by_entity(entity1,
entity2)
}
pub fn get_entity_bone_count(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityBoneCount {
    crate::__imports::native_get_entity_bone_count(entity)
}
pub fn is_entity_attached(entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityAttached {
    crate::__imports::native_is_entity_attached(entity)
}
pub fn is_entity_in_zone(entity: u32,
zone: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfIsEntityInZone {
    crate::__imports::native_is_entity_in_zone(entity,
zone)
}
pub fn set_entity_as_no_longer_needed(entity: u32) -> altv_wasm_shared::natives_result::ResultOfSetEntityAsNoLongerNeeded {
    crate::__imports::native_set_entity_as_no_longer_needed(entity)
}
pub fn play_synchronized_map_entity_anim(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: i32,
z2: f32,
p6: Option<&String>,
p7: Option<&String>,
p8: f32,
p9: f32,
p10: i32,
p11: f32) -> altv_wasm_shared::natives_result::ResultOfPlaySynchronizedMapEntityAnim {
    crate::__imports::native_play_synchronized_map_entity_anim(x1,
y1,
z1,
x2,
y2,
z2,
p6,
p7,
p8,
p9,
p10,
p11)
}
pub fn get_entity_bone_object_rotation(entity: u32,
bone_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetEntityBoneObjectRotation {
    crate::__imports::native_get_entity_bone_object_rotation(entity,
bone_index)
}
pub fn get_entity_proofs(entity: u32,
bullet_proof: bool,
fire_proof: bool,
explosion_proof: bool,
collision_proof: bool,
melee_proof: bool,
steam_proof: bool,
p7: bool,
drown_proof: bool) -> altv_wasm_shared::natives_result::ResultOfGetEntityProofs {
    crate::__imports::native_get_entity_proofs(entity,
bullet_proof,
fire_proof,
explosion_proof,
collision_proof,
melee_proof,
steam_proof,
p7,
drown_proof)
}
pub fn set_entity_water_reflection_flag(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityWaterReflectionFlag {
    crate::__imports::native_set_entity_water_reflection_flag(entity,
toggle)
}
pub fn attach_entity_to_entity_physically(entity1: u32,
entity2: u32,
bone_index1: i32,
bone_index2: i32,
x_pos1: f32,
y_pos1: f32,
z_pos1: f32,
x_pos2: f32,
y_pos2: f32,
z_pos2: f32,
x_rot: f32,
y_rot: f32,
z_rot: f32,
break_force: f32,
fixed_rot: bool,
p15: bool,
collision: bool,
p17: bool,
p18: i32) -> altv_wasm_shared::natives_result::ResultOfAttachEntityToEntityPhysically {
    crate::__imports::native_attach_entity_to_entity_physically(entity1,
entity2,
bone_index1,
bone_index2,
x_pos1,
y_pos1,
z_pos1,
x_pos2,
y_pos2,
z_pos2,
x_rot,
y_rot,
z_rot,
break_force,
fixed_rot,
p15,
collision,
p17,
p18)
}
pub fn apply_force_to_entity(entity: u32,
force_flags: i32,
x: f32,
y: f32,
z: f32,
off_x: f32,
off_y: f32,
off_z: f32,
bone_index: i32,
is_direction_rel: bool,
ignore_up_vec: bool,
is_force_rel: bool,
p12: bool,
p13: bool) -> altv_wasm_shared::natives_result::ResultOfApplyForceToEntity {
    crate::__imports::native_apply_force_to_entity(entity,
force_flags,
x,
y,
z,
off_x,
off_y,
off_z,
bone_index,
is_direction_rel,
ignore_up_vec,
is_force_rel,
p12,
p13)
}
pub fn play_synchronized_entity_anim(entity: u32,
synced_scene: i32,
animation: Option<&String>,
prop_name: Option<&String>,
p4: f32,
p5: f32,
p6: i32,
p7: f32) -> altv_wasm_shared::natives_result::ResultOfPlaySynchronizedEntityAnim {
    crate::__imports::native_play_synchronized_entity_anim(entity,
synced_scene,
animation,
prop_name,
p4,
p5,
p6,
p7)
}
pub fn has_entity_been_damaged_by_entity(entity1: u32,
entity2: u32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfHasEntityBeenDamagedByEntity {
    crate::__imports::native_has_entity_been_damaged_by_entity(entity1,
entity2,
p2)
}
pub fn get_entity_collision_disabled(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityCollisionDisabled {
    crate::__imports::native_get_entity_collision_disabled(entity)
}
pub fn get_entity_bone_rotation(entity: u32,
bone_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetEntityBoneRotation {
    crate::__imports::native_get_entity_bone_rotation(entity,
bone_index)
}
pub fn set_pickup_collides_with_projectiles(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetPickupCollidesWithProjectiles {
    crate::__imports::native_set_pickup_collides_with_projectiles(p0,
p1)
}
pub fn get_entity_bone_object_postion(entity: u32,
bone_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetEntityBoneObjectPostion {
    crate::__imports::native_get_entity_bone_object_postion(entity,
bone_index)
}
pub fn is_entity_attached_to_any_object(entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityAttachedToAnyObject {
    crate::__imports::native_is_entity_attached_to_any_object(entity)
}
pub fn is_entity_in_water(entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityInWater {
    crate::__imports::native_is_entity_in_water(entity)
}
pub fn is_entity_waiting_for_world_collision(entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityWaitingForWorldCollision {
    crate::__imports::native_is_entity_waiting_for_world_collision(entity)
}
pub fn set_entity_can_be_targeted_without_los(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityCanBeTargetedWithoutLos {
    crate::__imports::native_set_entity_can_be_targeted_without_los(entity,
toggle)
}
pub fn get_entity_pitch(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityPitch {
    crate::__imports::native_get_entity_pitch(entity)
}
pub fn get_entity_speed(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntitySpeed {
    crate::__imports::native_get_entity_speed(entity)
}
pub fn is_entity_visible_to_script(entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityVisibleToScript {
    crate::__imports::native_is_entity_visible_to_script(entity)
}
pub fn set_pick_up_by_cargobob_disabled(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPickUpByCargobobDisabled {
    crate::__imports::native_set_pick_up_by_cargobob_disabled(entity,
toggle)
}
pub fn get_object_index_from_entity_index(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetObjectIndexFromEntityIndex {
    crate::__imports::native_get_object_index_from_entity_index(entity)
}
pub fn get_entity_can_be_damaged(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityCanBeDamaged {
    crate::__imports::native_get_entity_can_be_damaged(entity)
}
pub fn remove_model_hide(x: f32,
y: f32,
z: f32,
radius: f32,
model_hash: u32,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfRemoveModelHide {
    crate::__imports::native_remove_model_hide(x,
y,
z,
radius,
model_hash,
p5)
}
pub fn does_entity_have_physics(entity: u32) -> altv_wasm_shared::natives_result::ResultOfDoesEntityHavePhysics {
    crate::__imports::native_does_entity_have_physics(entity)
}
pub fn set_wait_for_collisions_before_probe(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetWaitForCollisionsBeforeProbe {
    crate::__imports::native_set_wait_for_collisions_before_probe(entity,
toggle)
}
pub fn does_entity_belong_to_this_script(entity: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfDoesEntityBelongToThisScript {
    crate::__imports::native_does_entity_belong_to_this_script(entity,
p1)
}
pub fn has_entity_been_damaged_by_any_vehicle(entity: u32) -> altv_wasm_shared::natives_result::ResultOfHasEntityBeenDamagedByAnyVehicle {
    crate::__imports::native_has_entity_been_damaged_by_any_vehicle(entity)
}
pub fn set_can_auto_vault_on_entity(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetCanAutoVaultOnEntity {
    crate::__imports::native_set_can_auto_vault_on_entity(entity,
toggle)
}
pub fn set_entity_can_be_damaged_by_relationship_group(entity: u32,
b_can_be_damaged: bool,
rel_group: i32) -> altv_wasm_shared::natives_result::ResultOfSetEntityCanBeDamagedByRelationshipGroup {
    crate::__imports::native_set_entity_can_be_damaged_by_relationship_group(entity,
b_can_be_damaged,
rel_group)
}
pub fn is_entity_occluded(entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityOccluded {
    crate::__imports::native_is_entity_occluded(entity)
}
pub fn get_collision_normal_of_last_hit_for_entity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetCollisionNormalOfLastHitForEntity {
    crate::__imports::native_get_collision_normal_of_last_hit_for_entity(entity)
}
pub fn is_entity_on_screen(entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityOnScreen {
    crate::__imports::native_is_entity_on_screen(entity)
}
pub fn set_entity_mirror_reflection_flag(entity: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityMirrorReflectionFlag {
    crate::__imports::native_set_entity_mirror_reflection_flag(entity,
p1)
}
pub fn get_entity_submerged_level(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntitySubmergedLevel {
    crate::__imports::native_get_entity_submerged_level(entity)
}
pub fn get_entity_heading(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityHeading {
    crate::__imports::native_get_entity_heading(entity)
}
pub fn has_collision_loaded_around_entity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfHasCollisionLoadedAroundEntity {
    crate::__imports::native_has_collision_loaded_around_entity(entity)
}
pub fn set_entity_is_target_priority(entity: u32,
p1: bool,
p2: f32) -> altv_wasm_shared::natives_result::ResultOfSetEntityIsTargetPriority {
    crate::__imports::native_set_entity_is_target_priority(entity,
p1,
p2)
}
pub fn set_entity_visible(entity: u32,
toggle: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityVisible {
    crate::__imports::native_set_entity_visible(entity,
toggle,
p2)
}
pub fn has_anim_event_fired(entity: u32,
action_hash: u32) -> altv_wasm_shared::natives_result::ResultOfHasAnimEventFired {
    crate::__imports::native_has_anim_event_fired(entity,
action_hash)
}
pub fn get_entity_matrix(entity: u32,
forward_vector: Option<&shared::Vector3>,
right_vector: Option<&shared::Vector3>,
up_vector: Option<&shared::Vector3>,
position: Option<&shared::Vector3>) -> altv_wasm_shared::natives_result::ResultOfGetEntityMatrix {
    crate::__imports::native_get_entity_matrix(entity,
forward_vector,
right_vector,
up_vector,
position)
}
pub fn would_entity_be_occluded(entity_model_hash: u32,
x: f32,
y: f32,
z: f32,
p4: bool) -> altv_wasm_shared::natives_result::ResultOfWouldEntityBeOccluded {
    crate::__imports::native_would_entity_be_occluded(entity_model_hash,
x,
y,
z,
p4)
}
pub fn get_entity_health(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityHealth {
    crate::__imports::native_get_entity_health(entity)
}
pub fn is_entity_attached_to_entity(from: u32,
to: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityAttachedToEntity {
    crate::__imports::native_is_entity_attached_to_entity(from,
to)
}
pub fn process_entity_attachments(entity: u32) -> altv_wasm_shared::natives_result::ResultOfProcessEntityAttachments {
    crate::__imports::native_process_entity_attachments(entity)
}
pub fn get_entity_population_type(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityPopulationType {
    crate::__imports::native_get_entity_population_type(entity)
}
pub fn set_entity_proofs(entity: u32,
bullet_proof: bool,
fire_proof: bool,
explosion_proof: bool,
collision_proof: bool,
melee_proof: bool,
steam_proof: bool,
p7: bool,
water_proof: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityProofs {
    crate::__imports::native_set_entity_proofs(entity,
bullet_proof,
fire_proof,
explosion_proof,
collision_proof,
melee_proof,
steam_proof,
p7,
water_proof)
}
pub fn get_entity_bone_index_by_name(entity: u32,
bone_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetEntityBoneIndexByName {
    crate::__imports::native_get_entity_bone_index_by_name(entity,
bone_name)
}
pub fn has_entity_clear_los_to_entity(entity1: u32,
entity2: u32,
trace_type: i32) -> altv_wasm_shared::natives_result::ResultOfHasEntityClearLosToEntity {
    crate::__imports::native_has_entity_clear_los_to_entity(entity1,
entity2,
trace_type)
}
pub fn attach_entity_bone_to_entity_bone_y_forward(entity1: u32,
entity2: u32,
bone_index1: i32,
bone_index2: i32,
p4: bool,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfAttachEntityBoneToEntityBoneYforward {
    crate::__imports::native_attach_entity_bone_to_entity_bone_y_forward(entity1,
entity2,
bone_index1,
bone_index2,
p4,
p5)
}
pub fn get_anim_duration(anim_dict: Option<&String>,
anim_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetAnimDuration {
    crate::__imports::native_get_anim_duration(anim_dict,
anim_name)
}
pub fn is_shocking_event_in_sphere(event_type: i32,
x: f32,
y: f32,
z: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfIsShockingEventInSphere {
    crate::__imports::native_is_shocking_event_in_sphere(event_type,
x,
y,
z,
radius)
}
pub fn remove_shocking_event(event: u32) -> altv_wasm_shared::natives_result::ResultOfRemoveShockingEvent {
    crate::__imports::native_remove_shocking_event(event)
}
pub fn suppress_shocking_events_next_frame() -> altv_wasm_shared::natives_result::ResultOfSuppressShockingEventsNextFrame {
    crate::__imports::native_suppress_shocking_events_next_frame()
}
pub fn remove_shocking_event_spawn_blocking_areas() -> altv_wasm_shared::natives_result::ResultOfRemoveShockingEventSpawnBlockingAreas {
    crate::__imports::native_remove_shocking_event_spawn_blocking_areas()
}
pub fn suppress_shocking_event_type_next_frame(event_type: i32) -> altv_wasm_shared::natives_result::ResultOfSuppressShockingEventTypeNextFrame {
    crate::__imports::native_suppress_shocking_event_type_next_frame(event_type)
}
pub fn clear_decision_maker_event_response(name: u32,
event_type: i32) -> altv_wasm_shared::natives_result::ResultOfClearDecisionMakerEventResponse {
    crate::__imports::native_clear_decision_maker_event_response(name,
event_type)
}
pub fn suppress_agitation_events_next_frame() -> altv_wasm_shared::natives_result::ResultOfSuppressAgitationEventsNextFrame {
    crate::__imports::native_suppress_agitation_events_next_frame()
}
pub fn add_shocking_event_for_entity(event_type: i32,
entity: u32,
duration: f32) -> altv_wasm_shared::natives_result::ResultOfAddShockingEventForEntity {
    crate::__imports::native_add_shocking_event_for_entity(event_type,
entity,
duration)
}
pub fn set_decision_maker(ped: u32,
name: u32) -> altv_wasm_shared::natives_result::ResultOfSetDecisionMaker {
    crate::__imports::native_set_decision_maker(ped,
name)
}
pub fn unblock_decision_maker_event(name: u32,
event_type: i32) -> altv_wasm_shared::natives_result::ResultOfUnblockDecisionMakerEvent {
    crate::__imports::native_unblock_decision_maker_event(name,
event_type)
}
pub fn add_shocking_event_at_position(event_type: i32,
x: f32,
y: f32,
z: f32,
duration: f32) -> altv_wasm_shared::natives_result::ResultOfAddShockingEventAtPosition {
    crate::__imports::native_add_shocking_event_at_position(event_type,
x,
y,
z,
duration)
}
pub fn block_decision_maker_event(name: u32,
event_type: i32) -> altv_wasm_shared::natives_result::ResultOfBlockDecisionMakerEvent {
    crate::__imports::native_block_decision_maker_event(name,
event_type)
}
pub fn remove_all_shocking_events(p0: bool) -> altv_wasm_shared::natives_result::ResultOfRemoveAllShockingEvents {
    crate::__imports::native_remove_all_shocking_events(p0)
}
pub fn get_shop_ped_apparel_forced_prop_count(component_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetShopPedApparelForcedPropCount {
    crate::__imports::native_get_shop_ped_apparel_forced_prop_count(component_hash)
}
pub fn get_hash_name_for_component(entity: u32,
component_id: i32,
drawable_variant: i32,
texture_variant: i32) -> altv_wasm_shared::natives_result::ResultOfGetHashNameForComponent {
    crate::__imports::native_get_hash_name_for_component(entity,
component_id,
drawable_variant,
texture_variant)
}
pub fn is_dlc_vehicle_mod(hash: u32) -> altv_wasm_shared::natives_result::ResultOfIsDlcVehicleMod {
    crate::__imports::native_is_dlc_vehicle_mod(hash)
}
pub fn get_shop_ped_outfit_locate(p0: i32) -> altv_wasm_shared::natives_result::ResultOfGetShopPedOutfitLocate {
    crate::__imports::native_get_shop_ped_outfit_locate(p0)
}
pub fn get_tattoo_shop_dlc_item_index(overlay_hash: u32,
p1: i32,
character: i32) -> altv_wasm_shared::natives_result::ResultOfGetTattooShopDlcItemIndex {
    crate::__imports::native_get_tattoo_shop_dlc_item_index(overlay_hash,
p1,
character)
}
pub fn get_shop_ped_outfit_component_variant(outfit_hash: u32,
unk_variant_index: i32,
out_component_variant: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetShopPedOutfitComponentVariant {
    crate::__imports::native_get_shop_ped_outfit_component_variant(outfit_hash,
unk_variant_index,
out_component_variant)
}
pub fn init_shop_ped_component(out_component: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfInitShopPedComponent {
    crate::__imports::native_init_shop_ped_component(out_component)
}
pub fn get_shop_ped_query_component(component_id: i32,
out_component: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetShopPedQueryComponent {
    crate::__imports::native_get_shop_ped_query_component(component_id,
out_component)
}
pub fn get_num_tattoo_shop_dlc_items(character: i32) -> altv_wasm_shared::natives_result::ResultOfGetNumTattooShopDlcItems {
    crate::__imports::native_get_num_tattoo_shop_dlc_items(character)
}
pub fn get_dlc_weapon_data_sp(dlc_weapon_index: i32,
out_data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetDlcWeaponDataSp {
    crate::__imports::native_get_dlc_weapon_data_sp(dlc_weapon_index,
out_data)
}
pub fn get_dlc_weapon_component_data_sp(dlc_weapon_index: i32,
dlc_weap_comp_index: i32,
component_data_ptr: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetDlcWeaponComponentDataSp {
    crate::__imports::native_get_dlc_weapon_component_data_sp(dlc_weapon_index,
dlc_weap_comp_index,
component_data_ptr)
}
pub fn get_dlc_vehicle_data(dlc_vehicle_index: i32,
out_data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetDlcVehicleData {
    crate::__imports::native_get_dlc_vehicle_data(dlc_vehicle_index,
out_data)
}
pub fn does_shop_ped_apparel_have_restriction_tag(component_hash: u32,
restriction_tag_hash: u32,
component_id: i32) -> altv_wasm_shared::natives_result::ResultOfDoesShopPedApparelHaveRestrictionTag {
    crate::__imports::native_does_shop_ped_apparel_have_restriction_tag(component_hash,
restriction_tag_hash,
component_id)
}
pub fn revert_content_changeset_group_for_all(hash: u32) -> altv_wasm_shared::natives_result::ResultOfRevertContentChangesetGroupForAll {
    crate::__imports::native_revert_content_changeset_group_for_all(hash)
}
pub fn get_num_dlc_weapon_components(dlc_weapon_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetNumDlcWeaponComponents {
    crate::__imports::native_get_num_dlc_weapon_components(dlc_weapon_index)
}
pub fn get_num_dlc_weapons_sp() -> altv_wasm_shared::natives_result::ResultOfGetNumDlcWeaponsSp {
    crate::__imports::native_get_num_dlc_weapons_sp()
}
pub fn setup_shop_ped_apparel_query(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfSetupShopPedApparelQuery {
    crate::__imports::native_setup_shop_ped_apparel_query(p0,
p1,
p2,
p3)
}
pub fn get_dlc_vehicle_flags(dlc_vehicle_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetDlcVehicleFlags {
    crate::__imports::native_get_dlc_vehicle_flags(dlc_vehicle_index)
}
pub fn get_shop_ped_prop(component_hash: u32,
out_prop: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetShopPedProp {
    crate::__imports::native_get_shop_ped_prop(component_hash,
out_prop)
}
pub fn get_hash_name_for_prop(entity: u32,
component_id: i32,
prop_index: i32,
prop_texture_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetHashNameForProp {
    crate::__imports::native_get_hash_name_for_prop(entity,
component_id,
prop_index,
prop_texture_index)
}
pub fn execute_content_changeset_group_for_all(hash: u32) -> altv_wasm_shared::natives_result::ResultOfExecuteContentChangesetGroupForAll {
    crate::__imports::native_execute_content_changeset_group_for_all(hash)
}
pub fn get_forced_component(component_hash: u32,
forced_component_index: i32,
name_hash: u32,
enum_value: i32,
component_type: i32) -> altv_wasm_shared::natives_result::ResultOfGetForcedComponent {
    crate::__imports::native_get_forced_component(component_hash,
forced_component_index,
name_hash,
enum_value,
component_type)
}
pub fn get_shop_ped_query_prop_index(component_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetShopPedQueryPropIndex {
    crate::__imports::native_get_shop_ped_query_prop_index(component_hash)
}
pub fn get_dlc_weapon_component_data(dlc_weapon_index: i32,
dlc_weap_comp_index: i32,
component_data_ptr: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetDlcWeaponComponentData {
    crate::__imports::native_get_dlc_weapon_component_data(dlc_weapon_index,
dlc_weap_comp_index,
component_data_ptr)
}
pub fn get_shop_ped_query_outfit(outfit_index: i32,
outfit: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetShopPedQueryOutfit {
    crate::__imports::native_get_shop_ped_query_outfit(outfit_index,
outfit)
}
pub fn get_variant_component(component_hash: u32,
unk_variant_component_index: i32,
name_hash: u32,
enum_value: i32,
component_type: i32) -> altv_wasm_shared::natives_result::ResultOfGetVariantComponent {
    crate::__imports::native_get_variant_component(component_hash,
unk_variant_component_index,
name_hash,
enum_value,
component_type)
}
pub fn get_shop_ped_component(component_hash: u32,
out_component: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetShopPedComponent {
    crate::__imports::native_get_shop_ped_component(component_hash,
out_component)
}
pub fn does_current_ped_component_have_restriction_tag(ped: u32,
component_id: i32,
restriction_tag_hash: u32) -> altv_wasm_shared::natives_result::ResultOfDoesCurrentPedComponentHaveRestrictionTag {
    crate::__imports::native_does_current_ped_component_have_restriction_tag(ped,
component_id,
restriction_tag_hash)
}
pub fn get_dlc_weapon_data(dlc_weapon_index: i32,
out_data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetDlcWeaponData {
    crate::__imports::native_get_dlc_weapon_data(dlc_weapon_index,
out_data)
}
pub fn get_shop_ped_query_component_index(component_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetShopPedQueryComponentIndex {
    crate::__imports::native_get_shop_ped_query_component_index(component_hash)
}
pub fn setup_shop_ped_apparel_query_tu(character: i32,
p1: i32,
p2: i32,
p3: bool,
p4: i32,
component_id: i32) -> altv_wasm_shared::natives_result::ResultOfSetupShopPedApparelQueryTu {
    crate::__imports::native_setup_shop_ped_apparel_query_tu(character,
p1,
p2,
p3,
p4,
component_id)
}
pub fn get_num_dlc_vehicles() -> altv_wasm_shared::natives_result::ResultOfGetNumDlcVehicles {
    crate::__imports::native_get_num_dlc_vehicles()
}
pub fn get_shop_ped_outfit_prop_variant(outfit_hash: u32,
unk_variant_index: i32,
out_prop_variant: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetShopPedOutfitPropVariant {
    crate::__imports::native_get_shop_ped_outfit_prop_variant(outfit_hash,
unk_variant_index,
out_prop_variant)
}
pub fn get_num_dlc_weapon_components_sp(dlc_weapon_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetNumDlcWeaponComponentsSp {
    crate::__imports::native_get_num_dlc_weapon_components_sp(dlc_weapon_index)
}
pub fn get_shop_ped_outfit(p0: i32,
p1: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetShopPedOutfit {
    crate::__imports::native_get_shop_ped_outfit(p0,
p1)
}
pub fn get_dlc_vehicle_mod_lock_hash(hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetDlcVehicleModLockHash {
    crate::__imports::native_get_dlc_vehicle_mod_lock_hash(hash)
}
pub fn get_shop_ped_apparel_variant_component_count(component_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetShopPedApparelVariantComponentCount {
    crate::__imports::native_get_shop_ped_apparel_variant_component_count(component_hash)
}
pub fn get_shop_ped_apparel_forced_component_count(component_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetShopPedApparelForcedComponentCount {
    crate::__imports::native_get_shop_ped_apparel_forced_component_count(component_hash)
}
pub fn get_shop_ped_apparel_variant_prop_count(prop_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetShopPedApparelVariantPropCount {
    crate::__imports::native_get_shop_ped_apparel_variant_prop_count(prop_hash)
}
pub fn is_content_item_locked(item_hash: u32) -> altv_wasm_shared::natives_result::ResultOfIsContentItemLocked {
    crate::__imports::native_is_content_item_locked(item_hash)
}
pub fn does_current_ped_prop_have_restriction_tag(ped: u32,
component_id: i32,
restriction_tag_hash: u32) -> altv_wasm_shared::natives_result::ResultOfDoesCurrentPedPropHaveRestrictionTag {
    crate::__imports::native_does_current_ped_prop_have_restriction_tag(ped,
component_id,
restriction_tag_hash)
}
pub fn get_variant_prop(component_hash: u32,
unk_variant_prop_index: i32,
name_hash: u32,
enum_value: i32,
anchor_point: i32) -> altv_wasm_shared::natives_result::ResultOfGetVariantProp {
    crate::__imports::native_get_variant_prop(component_hash,
unk_variant_prop_index,
name_hash,
enum_value,
anchor_point)
}
pub fn get_shop_ped_query_prop(component_id: i32,
out_prop: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetShopPedQueryProp {
    crate::__imports::native_get_shop_ped_query_prop(component_id,
out_prop)
}
pub fn get_forced_prop(component_hash: u32,
forced_prop_index: i32,
name_hash: u32,
enum_value: i32,
anchor_point: i32) -> altv_wasm_shared::natives_result::ResultOfGetForcedProp {
    crate::__imports::native_get_forced_prop(component_hash,
forced_prop_index,
name_hash,
enum_value,
anchor_point)
}
pub fn init_shop_ped_prop(out_prop: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfInitShopPedProp {
    crate::__imports::native_init_shop_ped_prop(out_prop)
}
pub fn get_dlc_vehicle_model(dlc_vehicle_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetDlcVehicleModel {
    crate::__imports::native_get_dlc_vehicle_model(dlc_vehicle_index)
}
pub fn get_num_dlc_weapons() -> altv_wasm_shared::natives_result::ResultOfGetNumDlcWeapons {
    crate::__imports::native_get_num_dlc_weapons()
}
pub fn setup_shop_ped_outfit_query(character: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetupShopPedOutfitQuery {
    crate::__imports::native_setup_shop_ped_outfit_query(character,
p1)
}
pub fn get_tattoo_shop_dlc_item_data(character_type: i32,
decoration_index: i32,
out_component: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetTattooShopDlcItemData {
    crate::__imports::native_get_tattoo_shop_dlc_item_data(character_type,
decoration_index,
out_component)
}
pub fn stop_fire_in_range(x: f32,
y: f32,
z: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfStopFireInRange {
    crate::__imports::native_stop_fire_in_range(x,
y,
z,
radius)
}
pub fn get_owner_of_explosion_in_angled_area(explosion_type: i32,
x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfGetOwnerOfExplosionInAngledArea {
    crate::__imports::native_get_owner_of_explosion_in_angled_area(explosion_type,
x1,
y1,
z1,
x2,
y2,
z2,
radius)
}
pub fn add_owned_explosion(ped: u32,
x: f32,
y: f32,
z: f32,
explosion_type: i32,
damage_scale: f32,
is_audible: bool,
is_invisible: bool,
camera_shake: f32) -> altv_wasm_shared::natives_result::ResultOfAddOwnedExplosion {
    crate::__imports::native_add_owned_explosion(ped,
x,
y,
z,
explosion_type,
damage_scale,
is_audible,
is_invisible,
camera_shake)
}
pub fn is_entity_on_fire(entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityOnFire {
    crate::__imports::native_is_entity_on_fire(entity)
}
pub fn is_explosion_in_area(explosion_type: i32,
x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32) -> altv_wasm_shared::natives_result::ResultOfIsExplosionInArea {
    crate::__imports::native_is_explosion_in_area(explosion_type,
x1,
y1,
z1,
x2,
y2,
z2)
}
pub fn get_closest_fire_pos(out_position: Option<&shared::Vector3>,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfGetClosestFirePos {
    crate::__imports::native_get_closest_fire_pos(out_position,
x,
y,
z)
}
pub fn add_explosion_with_user_vfx(x: f32,
y: f32,
z: f32,
explosion_type: i32,
explosion_fx: u32,
damage_scale: f32,
is_audible: bool,
is_invisible: bool,
camera_shake: f32) -> altv_wasm_shared::natives_result::ResultOfAddExplosionWithUserVfx {
    crate::__imports::native_add_explosion_with_user_vfx(x,
y,
z,
explosion_type,
explosion_fx,
damage_scale,
is_audible,
is_invisible,
camera_shake)
}
pub fn get_number_of_fires_in_range(x: f32,
y: f32,
z: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfGetNumberOfFiresInRange {
    crate::__imports::native_get_number_of_fires_in_range(x,
y,
z,
radius)
}
pub fn is_explosion_active_in_area(explosion_type: i32,
x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32) -> altv_wasm_shared::natives_result::ResultOfIsExplosionActiveInArea {
    crate::__imports::native_is_explosion_active_in_area(explosion_type,
x1,
y1,
z1,
x2,
y2,
z2)
}
pub fn start_script_fire(x: f32,
y: f32,
z: f32,
max_children: i32,
is_gas_fire: bool) -> altv_wasm_shared::natives_result::ResultOfStartScriptFire {
    crate::__imports::native_start_script_fire(x,
y,
z,
max_children,
is_gas_fire)
}
pub fn stop_entity_fire(entity: u32) -> altv_wasm_shared::natives_result::ResultOfStopEntityFire {
    crate::__imports::native_stop_entity_fire(entity)
}
pub fn remove_script_fire(fire_handle: i32) -> altv_wasm_shared::natives_result::ResultOfRemoveScriptFire {
    crate::__imports::native_remove_script_fire(fire_handle)
}
pub fn set_flammability_multiplier(p0: f32) -> altv_wasm_shared::natives_result::ResultOfSetFlammabilityMultiplier {
    crate::__imports::native_set_flammability_multiplier(p0)
}
pub fn is_explosion_in_angled_area(explosion_type: i32,
x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
width: f32) -> altv_wasm_shared::natives_result::ResultOfIsExplosionInAngledArea {
    crate::__imports::native_is_explosion_in_angled_area(explosion_type,
x1,
y1,
z1,
x2,
y2,
z2,
width)
}
pub fn is_explosion_in_sphere(explosion_type: i32,
x: f32,
y: f32,
z: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfIsExplosionInSphere {
    crate::__imports::native_is_explosion_in_sphere(explosion_type,
x,
y,
z,
radius)
}
pub fn get_owner_of_explosion_in_sphere(explosion_type: i32,
x: f32,
y: f32,
z: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfGetOwnerOfExplosionInSphere {
    crate::__imports::native_get_owner_of_explosion_in_sphere(explosion_type,
x,
y,
z,
radius)
}
pub fn add_explosion(x: f32,
y: f32,
z: f32,
explosion_type: i32,
damage_scale: f32,
is_audible: bool,
is_invisible: bool,
camera_shake: f32,
no_damage: bool) -> altv_wasm_shared::natives_result::ResultOfAddExplosion {
    crate::__imports::native_add_explosion(x,
y,
z,
explosion_type,
damage_scale,
is_audible,
is_invisible,
camera_shake,
no_damage)
}
pub fn start_entity_fire(entity: u32) -> altv_wasm_shared::natives_result::ResultOfStartEntityFire {
    crate::__imports::native_start_entity_fire(entity)
}
pub fn create_checkpoint(r#type: i32,
pos_x1: f32,
pos_y1: f32,
pos_z1: f32,
pos_x2: f32,
pos_y2: f32,
pos_z2: f32,
diameter: f32,
red: i32,
green: i32,
blue: i32,
alpha: i32,
reserved: i32) -> altv_wasm_shared::natives_result::ResultOfCreateCheckpoint {
    crate::__imports::native_create_checkpoint(r#type,
pos_x1,
pos_y1,
pos_z1,
pos_x2,
pos_y2,
pos_z2,
diameter,
red,
green,
blue,
alpha,
reserved)
}
pub fn has_streamed_texture_dict_loaded(texture_dict: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfHasStreamedTextureDictLoaded {
    crate::__imports::native_has_streamed_texture_dict_loaded(texture_dict)
}
pub fn procgrass_disable_ambscalescan() -> altv_wasm_shared::natives_result::ResultOfProcgrassDisableAmbscalescan {
    crate::__imports::native_procgrass_disable_ambscalescan()
}
pub fn disable_scuff_decals(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfDisableScuffDecals {
    crate::__imports::native_disable_scuff_decals(toggle)
}
pub fn cascade_shadows_set_dynamic_depth_value(p0: f32) -> altv_wasm_shared::natives_result::ResultOfCascadeShadowsSetDynamicDepthValue {
    crate::__imports::native_cascade_shadows_set_dynamic_depth_value(p0)
}
pub fn start_particle_fx_non_looped_on_entity_bone(effect_name: Option<&String>,
entity: u32,
offset_x: f32,
offset_y: f32,
offset_z: f32,
rot_x: f32,
rot_y: f32,
rot_z: f32,
bone_index: i32,
scale: f32,
axis_x: bool,
axis_y: bool,
axis_z: bool) -> altv_wasm_shared::natives_result::ResultOfStartParticleFxNonLoopedOnEntityBone {
    crate::__imports::native_start_particle_fx_non_looped_on_entity_bone(effect_name,
entity,
offset_x,
offset_y,
offset_z,
rot_x,
rot_y,
rot_z,
bone_index,
scale,
axis_x,
axis_y,
axis_z)
}
pub fn render_shadowed_lights_with_no_shadows(p0: bool) -> altv_wasm_shared::natives_result::ResultOfRenderShadowedLightsWithNoShadows {
    crate::__imports::native_render_shadowed_lights_with_no_shadows(p0)
}
pub fn cascade_shadows_init_session() -> altv_wasm_shared::natives_result::ResultOfCascadeShadowsInitSession {
    crate::__imports::native_cascade_shadows_init_session()
}
pub fn release_bink_movie(bink_movie: i32) -> altv_wasm_shared::natives_result::ResultOfReleaseBinkMovie {
    crate::__imports::native_release_bink_movie(bink_movie)
}
pub fn does_vehicle_have_crew_emblem(vehicle: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfDoesVehicleHaveCrewEmblem {
    crate::__imports::native_does_vehicle_have_crew_emblem(vehicle,
p1)
}
pub fn animpostfx_stop(effect_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAnimpostfxStop {
    crate::__imports::native_animpostfx_stop(effect_name)
}
pub fn golf_trail_set_facing(p0: bool) -> altv_wasm_shared::natives_result::ResultOfGolfTrailSetFacing {
    crate::__imports::native_golf_trail_set_facing(p0)
}
pub fn draw_debug_box(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
r: i32,
g: i32,
b: i32,
alpha: i32) -> altv_wasm_shared::natives_result::ResultOfDrawDebugBox {
    crate::__imports::native_draw_debug_box(x1,
y1,
z1,
x2,
y2,
z2,
r,
g,
b,
alpha)
}
pub fn end_petrol_trail_decals() -> altv_wasm_shared::natives_result::ResultOfEndPetrolTrailDecals {
    crate::__imports::native_end_petrol_trail_decals()
}
pub fn free_memory_for_mission_creator_photo() -> altv_wasm_shared::natives_result::ResultOfFreeMemoryForMissionCreatorPhoto {
    crate::__imports::native_free_memory_for_mission_creator_photo()
}
pub fn set_flash(p0: f32,
p1: f32,
fade_in: f32,
duration: f32,
fade_out: f32) -> altv_wasm_shared::natives_result::ResultOfSetFlash {
    crate::__imports::native_set_flash(p0,
p1,
fade_in,
duration,
fade_out)
}
pub fn is_tvshow_currently_playing(video_cliphash: u32) -> altv_wasm_shared::natives_result::ResultOfIsTvshowCurrentlyPlaying {
    crate::__imports::native_is_tvshow_currently_playing(video_cliphash)
}
pub fn cascade_shadows_enable_freezer(p0: bool) -> altv_wasm_shared::natives_result::ResultOfCascadeShadowsEnableFreezer {
    crate::__imports::native_cascade_shadows_enable_freezer(p0)
}
pub fn get_status_of_save_high_quality_photo() -> altv_wasm_shared::natives_result::ResultOfGetStatusOfSaveHighQualityPhoto {
    crate::__imports::native_get_status_of_save_high_quality_photo()
}
pub fn has_scaleform_movie_filename_loaded(scaleform_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfHasScaleformMovieFilenameLoaded {
    crate::__imports::native_has_scaleform_movie_filename_loaded(scaleform_name)
}
pub fn seethrough_set_max_thickness(thickness: f32) -> altv_wasm_shared::natives_result::ResultOfSeethroughSetMaxThickness {
    crate::__imports::native_seethrough_set_max_thickness(thickness)
}
pub fn set_bink_movie_time(bink_movie: i32,
progress: f32) -> altv_wasm_shared::natives_result::ResultOfSetBinkMovieTime {
    crate::__imports::native_set_bink_movie_time(bink_movie,
progress)
}
pub fn start_particle_fx_non_looped_on_entity(effect_name: Option<&String>,
entity: u32,
offset_x: f32,
offset_y: f32,
offset_z: f32,
rot_x: f32,
rot_y: f32,
rot_z: f32,
scale: f32,
axis_x: bool,
axis_y: bool,
axis_z: bool) -> altv_wasm_shared::natives_result::ResultOfStartParticleFxNonLoopedOnEntity {
    crate::__imports::native_start_particle_fx_non_looped_on_entity(effect_name,
entity,
offset_x,
offset_y,
offset_z,
rot_x,
rot_y,
rot_z,
scale,
axis_x,
axis_y,
axis_z)
}
pub fn get_status_of_take_high_quality_photo() -> altv_wasm_shared::natives_result::ResultOfGetStatusOfTakeHighQualityPhoto {
    crate::__imports::native_get_status_of_take_high_quality_photo()
}
pub fn draw_scaleform_movie_fullscreen(scaleform: i32,
red: i32,
green: i32,
blue: i32,
alpha: i32,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfDrawScaleformMovieFullscreen {
    crate::__imports::native_draw_scaleform_movie_fullscreen(scaleform,
red,
green,
blue,
alpha,
p5)
}
pub fn disable_composite_shotgun_decals(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfDisableCompositeShotgunDecals {
    crate::__imports::native_disable_composite_shotgun_decals(toggle)
}
pub fn start_particle_fx_non_looped_on_ped_bone(effect_name: Option<&String>,
ped: u32,
offset_x: f32,
offset_y: f32,
offset_z: f32,
rot_x: f32,
rot_y: f32,
rot_z: f32,
bone_index: i32,
scale: f32,
axis_x: bool,
axis_y: bool,
axis_z: bool) -> altv_wasm_shared::natives_result::ResultOfStartParticleFxNonLoopedOnPedBone {
    crate::__imports::native_start_particle_fx_non_looped_on_ped_bone(effect_name,
ped,
offset_x,
offset_y,
offset_z,
rot_x,
rot_y,
rot_z,
bone_index,
scale,
axis_x,
axis_y,
axis_z)
}
pub fn clear_timecycle_modifier() -> altv_wasm_shared::natives_result::ResultOfClearTimecycleModifier {
    crate::__imports::native_clear_timecycle_modifier()
}
pub fn draw_low_quality_photo_to_phone(p0: bool,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfDrawLowQualityPhotoToPhone {
    crate::__imports::native_draw_low_quality_photo_to_phone(p0,
p1)
}
pub fn seethrough_set_color_near(red: i32,
green: i32,
blue: i32) -> altv_wasm_shared::natives_result::ResultOfSeethroughSetColorNear {
    crate::__imports::native_seethrough_set_color_near(red,
green,
blue)
}
pub fn ui3dscene_make_pushed_preset_persistent(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfUi3dsceneMakePushedPresetPersistent {
    crate::__imports::native_ui3dscene_make_pushed_preset_persistent(toggle)
}
pub fn set_tv_audio_frontend(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetTvAudioFrontend {
    crate::__imports::native_set_tv_audio_frontend(toggle)
}
pub fn request_scaleform_movie(scaleform_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRequestScaleformMovie {
    crate::__imports::native_request_scaleform_movie(scaleform_name)
}
pub fn set_artificial_lights_state(state: bool) -> altv_wasm_shared::natives_result::ResultOfSetArtificialLightsState {
    crate::__imports::native_set_artificial_lights_state(state)
}
pub fn add_oil_decal(x: f32,
y: f32,
z: f32,
ground_lvl: f32,
width: f32,
transparency: f32) -> altv_wasm_shared::natives_result::ResultOfAddOilDecal {
    crate::__imports::native_add_oil_decal(x,
y,
z,
ground_lvl,
width,
transparency)
}
pub fn golf_trail_set_colour(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32,
p6: i32,
p7: i32,
p8: i32,
p9: i32,
p10: i32,
p11: i32) -> altv_wasm_shared::natives_result::ResultOfGolfTrailSetColour {
    crate::__imports::native_golf_trail_set_colour(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8,
p9,
p10,
p11)
}
pub fn procgrass_enable_ambscalescan() -> altv_wasm_shared::natives_result::ResultOfProcgrassEnableAmbscalescan {
    crate::__imports::native_procgrass_enable_ambscalescan()
}
pub fn clear_all_tcmodifier_overrides(p0: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfClearAllTcmodifierOverrides {
    crate::__imports::native_clear_all_tcmodifier_overrides(p0)
}
pub fn override_interior_smoke_level(level: f32) -> altv_wasm_shared::natives_result::ResultOfOverrideInteriorSmokeLevel {
    crate::__imports::native_override_interior_smoke_level(level)
}
pub fn disable_procobj_creation() -> altv_wasm_shared::natives_result::ResultOfDisableProcobjCreation {
    crate::__imports::native_disable_procobj_creation()
}
pub fn seethrough_set_highlight_noise(noise: f32) -> altv_wasm_shared::natives_result::ResultOfSeethroughSetHighlightNoise {
    crate::__imports::native_seethrough_set_highlight_noise(noise)
}
pub fn set_tracked_point_info(point: i32,
x: f32,
y: f32,
z: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfSetTrackedPointInfo {
    crate::__imports::native_set_tracked_point_info(point,
x,
y,
z,
radius)
}
pub fn get_status_of_load_mission_creator_photo(p0: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetStatusOfLoadMissionCreatorPhoto {
    crate::__imports::native_get_status_of_load_mission_creator_photo(p0)
}
pub fn register_postfx_bullet_impact(weapon_world_pos_x: f32,
weapon_world_pos_y: f32,
weapon_world_pos_z: f32,
intensity: f32) -> altv_wasm_shared::natives_result::ResultOfRegisterPostfxBulletImpact {
    crate::__imports::native_register_postfx_bullet_impact(weapon_world_pos_x,
weapon_world_pos_y,
weapon_world_pos_z,
intensity)
}
pub fn set_debug_lines_and_spheres_drawing_active(enabled: bool) -> altv_wasm_shared::natives_result::ResultOfSetDebugLinesAndSpheresDrawingActive {
    crate::__imports::native_set_debug_lines_and_spheres_drawing_active(enabled)
}
pub fn set_nightvision(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetNightvision {
    crate::__imports::native_set_nightvision(toggle)
}
pub fn seethrough_set_hilight_intensity(intensity: f32) -> altv_wasm_shared::natives_result::ResultOfSeethroughSetHilightIntensity {
    crate::__imports::native_seethrough_set_hilight_intensity(intensity)
}
pub fn add_tcmodifier_override(modifier_name1: Option<&String>,
modifier_name2: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAddTcmodifierOverride {
    crate::__imports::native_add_tcmodifier_override(modifier_name1,
modifier_name2)
}
pub fn start_particle_fx_looped_on_entity(effect_name: Option<&String>,
entity: u32,
x_offset: f32,
y_offset: f32,
z_offset: f32,
x_rot: f32,
y_rot: f32,
z_rot: f32,
scale: f32,
x_axis: bool,
y_axis: bool,
z_axis: bool) -> altv_wasm_shared::natives_result::ResultOfStartParticleFxLoopedOnEntity {
    crate::__imports::native_start_particle_fx_looped_on_entity(effect_name,
entity,
x_offset,
y_offset,
z_offset,
x_rot,
y_rot,
z_rot,
scale,
x_axis,
y_axis,
z_axis)
}
pub fn set_taken_photo_is_mugshot(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetTakenPhotoIsMugshot {
    crate::__imports::native_set_taken_photo_is_mugshot(toggle)
}
pub fn terraingrid_set_params(x: f32,
y: f32,
z: f32,
forward_x: f32,
forward_y: f32,
forward_z: f32,
size_x: f32,
size_y: f32,
size_z: f32,
grid_scale: f32,
glow_intensity: f32,
normal_height: f32,
height_diff: f32) -> altv_wasm_shared::natives_result::ResultOfTerraingridSetParams {
    crate::__imports::native_terraingrid_set_params(x,
y,
z,
forward_x,
forward_y,
forward_z,
size_x,
size_y,
size_z,
grid_scale,
glow_intensity,
normal_height,
height_diff)
}
pub fn set_transition_out_of_timecycle_modifier(strength: f32) -> altv_wasm_shared::natives_result::ResultOfSetTransitionOutOfTimecycleModifier {
    crate::__imports::native_set_transition_out_of_timecycle_modifier(strength)
}
pub fn draw_scaleform_movie3d_solid(scaleform: i32,
pos_x: f32,
pos_y: f32,
pos_z: f32,
rot_x: f32,
rot_y: f32,
rot_z: f32,
p7: f32,
p8: f32,
p9: f32,
scale_x: f32,
scale_y: f32,
scale_z: f32,
rotation_order: i32) -> altv_wasm_shared::natives_result::ResultOfDrawScaleformMovie3dSolid {
    crate::__imports::native_draw_scaleform_movie3d_solid(scaleform,
pos_x,
pos_y,
pos_z,
rot_x,
rot_y,
rot_z,
p7,
p8,
p9,
scale_x,
scale_y,
scale_z,
rotation_order)
}
pub fn set_scaleform_movie_as_no_longer_needed(scaleform_handle: i32) -> altv_wasm_shared::natives_result::ResultOfSetScaleformMovieAsNoLongerNeeded {
    crate::__imports::native_set_scaleform_movie_as_no_longer_needed(scaleform_handle)
}
pub fn set_entity_icon_color(entity: u32,
red: i32,
green: i32,
blue: i32,
alpha: i32) -> altv_wasm_shared::natives_result::ResultOfSetEntityIconColor {
    crate::__imports::native_set_entity_icon_color(entity,
red,
green,
blue,
alpha)
}
pub fn begin_take_mission_creator_photo() -> altv_wasm_shared::natives_result::ResultOfBeginTakeMissionCreatorPhoto {
    crate::__imports::native_begin_take_mission_creator_photo()
}
pub fn set_particle_fx_non_looped_emitter_size(p0: f32,
p1: f32,
scale: f32) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxNonLoopedEmitterSize {
    crate::__imports::native_set_particle_fx_non_looped_emitter_size(p0,
p1,
scale)
}
pub fn is_playlist_on_channel(tv_channel: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfIsPlaylistOnChannel {
    crate::__imports::native_is_playlist_on_channel(tv_channel,
p1)
}
pub fn get_tv_volume() -> altv_wasm_shared::natives_result::ResultOfGetTvVolume {
    crate::__imports::native_get_tv_volume()
}
pub fn set_tv_channel_playlist_at_hour(tv_channel: i32,
playlist_name: Option<&String>,
hour: i32) -> altv_wasm_shared::natives_result::ResultOfSetTvChannelPlaylistAtHour {
    crate::__imports::native_set_tv_channel_playlist_at_hour(tv_channel,
playlist_name,
hour)
}
pub fn get_usingnightvision() -> altv_wasm_shared::natives_result::ResultOfGetUsingnightvision {
    crate::__imports::native_get_usingnightvision()
}
pub fn animpostfx_play(effect_name: Option<&String>,
duration: i32,
looped: bool) -> altv_wasm_shared::natives_result::ResultOfAnimpostfxPlay {
    crate::__imports::native_animpostfx_play(effect_name,
duration,
looped)
}
pub fn dont_render_in_game_ui(p0: bool) -> altv_wasm_shared::natives_result::ResultOfDontRenderInGameUi {
    crate::__imports::native_dont_render_in_game_ui(p0)
}
pub fn set_backfaceculling(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetBackfaceculling {
    crate::__imports::native_set_backfaceculling(toggle)
}
pub fn golf_trail_set_radius(p0: f32,
p1: f32,
p2: f32) -> altv_wasm_shared::natives_result::ResultOfGolfTrailSetRadius {
    crate::__imports::native_golf_trail_set_radius(p0,
p1,
p2)
}
pub fn start_particle_fx_non_looped_at_coord(effect_name: Option<&String>,
x_pos: f32,
y_pos: f32,
z_pos: f32,
x_rot: f32,
y_rot: f32,
z_rot: f32,
scale: f32,
x_axis: bool,
y_axis: bool,
z_axis: bool) -> altv_wasm_shared::natives_result::ResultOfStartParticleFxNonLoopedAtCoord {
    crate::__imports::native_start_particle_fx_non_looped_at_coord(effect_name,
x_pos,
y_pos,
z_pos,
x_rot,
y_rot,
z_rot,
scale,
x_axis,
y_axis,
z_axis)
}
pub fn cascade_shadows_set_bound_position(p0: i32) -> altv_wasm_shared::natives_result::ResultOfCascadeShadowsSetBoundPosition {
    crate::__imports::native_cascade_shadows_set_bound_position(p0)
}
pub fn cascade_shadows_set_screen_size_check_enabled(p0: bool) -> altv_wasm_shared::natives_result::ResultOfCascadeShadowsSetScreenSizeCheckEnabled {
    crate::__imports::native_cascade_shadows_set_screen_size_check_enabled(p0)
}
pub fn set_particle_fx_non_looped_colour(r: f32,
g: f32,
b: f32) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxNonLoopedColour {
    crate::__imports::native_set_particle_fx_non_looped_colour(r,
g,
b)
}
pub fn set_checkpoint_cylinder_height(checkpoint: i32,
near_height: f32,
far_height: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfSetCheckpointCylinderHeight {
    crate::__imports::native_set_checkpoint_cylinder_height(checkpoint,
near_height,
far_height,
radius)
}
pub fn cascade_shadows_clear_shadow_sample_type() -> altv_wasm_shared::natives_result::ResultOfCascadeShadowsClearShadowSampleType {
    crate::__imports::native_cascade_shadows_clear_shadow_sample_type()
}
pub fn set_disable_petrol_decals_recycling_this_frame() -> altv_wasm_shared::natives_result::ResultOfSetDisablePetrolDecalsRecyclingThisFrame {
    crate::__imports::native_set_disable_petrol_decals_recycling_this_frame()
}
pub fn set_particle_fx_bullet_impact_scale(scale: f32) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxBulletImpactScale {
    crate::__imports::native_set_particle_fx_bullet_impact_scale(scale)
}
pub fn phonephotoeditor_set_frame_txd(texture_dict: Option<&String>,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfPhonephotoeditorSetFrameTxd {
    crate::__imports::native_phonephotoeditor_set_frame_txd(texture_dict,
p1)
}
pub fn draw_marker(r#type: i32,
pos_x: f32,
pos_y: f32,
pos_z: f32,
dir_x: f32,
dir_y: f32,
dir_z: f32,
rot_x: f32,
rot_y: f32,
rot_z: f32,
scale_x: f32,
scale_y: f32,
scale_z: f32,
red: i32,
green: i32,
blue: i32,
alpha: i32,
bob_up_and_down: bool,
face_camera: bool,
p19: i32,
rotate: bool,
texture_dict: Option<&String>,
texture_name: Option<&String>,
draw_on_ents: bool) -> altv_wasm_shared::natives_result::ResultOfDrawMarker {
    crate::__imports::native_draw_marker(r#type,
pos_x,
pos_y,
pos_z,
dir_x,
dir_y,
dir_z,
rot_x,
rot_y,
rot_z,
scale_x,
scale_y,
scale_z,
red,
green,
blue,
alpha,
bob_up_and_down,
face_camera,
p19,
rotate,
texture_dict,
texture_name,
draw_on_ents)
}
pub fn draw_textured_poly(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
x3: f32,
y3: f32,
z3: f32,
red: i32,
green: i32,
blue: i32,
alpha: i32,
texture_dict: Option<&String>,
texture_name: Option<&String>,
u1: f32,
v1: f32,
w1: f32,
u2: f32,
v2: f32,
w2: f32,
u3: f32,
v3: f32,
w3: f32) -> altv_wasm_shared::natives_result::ResultOfDrawTexturedPoly {
    crate::__imports::native_draw_textured_poly(x1,
y1,
z1,
x2,
y2,
z2,
x3,
y3,
z3,
red,
green,
blue,
alpha,
texture_dict,
texture_name,
u1,
v1,
w1,
u2,
v2,
w2,
u3,
v3,
w3)
}
pub fn set_tv_volume(volume: f32) -> altv_wasm_shared::natives_result::ResultOfSetTvVolume {
    crate::__imports::native_set_tv_volume(volume)
}
pub fn clear_particle_fx_shootout_boat() -> altv_wasm_shared::natives_result::ResultOfClearParticleFxShootoutBoat {
    crate::__imports::native_clear_particle_fx_shootout_boat()
}
pub fn override_interior_smoke_name(name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfOverrideInteriorSmokeName {
    crate::__imports::native_override_interior_smoke_name(name)
}
pub fn queue_operation_to_create_sorted_list_of_photos(p0: i32) -> altv_wasm_shared::natives_result::ResultOfQueueOperationToCreateSortedListOfPhotos {
    crate::__imports::native_queue_operation_to_create_sorted_list_of_photos(p0)
}
pub fn set_particle_fx_slipstream_lodrange_scale(scale: f32) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxSlipstreamLodrangeScale {
    crate::__imports::native_set_particle_fx_slipstream_lodrange_scale(scale)
}
pub fn draw_sprite_named_rendertarget(texture_dict: Option<&String>,
texture_name: Option<&String>,
screen_x: f32,
screen_y: f32,
width: f32,
height: f32,
heading: f32,
red: i32,
green: i32,
blue: i32,
alpha: i32,
p11: i32) -> altv_wasm_shared::natives_result::ResultOfDrawSpriteNamedRendertarget {
    crate::__imports::native_draw_sprite_named_rendertarget(texture_dict,
texture_name,
screen_x,
screen_y,
width,
height,
heading,
red,
green,
blue,
alpha,
p11)
}
pub fn disable_moon_cycle_override() -> altv_wasm_shared::natives_result::ResultOfDisableMoonCycleOverride {
    crate::__imports::native_disable_moon_cycle_override()
}
pub fn enable_moon_cycle_override(strength: f32) -> altv_wasm_shared::natives_result::ResultOfEnableMoonCycleOverride {
    crate::__imports::native_enable_moon_cycle_override(strength)
}
pub fn procgrass_is_cullsphere_enabled(handle: i32) -> altv_wasm_shared::natives_result::ResultOfProcgrassIsCullsphereEnabled {
    crate::__imports::native_procgrass_is_cullsphere_enabled(handle)
}
pub fn set_timecycle_modifier(modifier_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetTimecycleModifier {
    crate::__imports::native_set_timecycle_modifier(modifier_name)
}
pub fn draw_sprite_arx(texture_dict: Option<&String>,
texture_name: Option<&String>,
x: f32,
y: f32,
width: f32,
height: f32,
p6: f32,
red: i32,
green: i32,
blue: i32,
alpha: i32,
p11: i32,
p12: i32) -> altv_wasm_shared::natives_result::ResultOfDrawSpriteArx {
    crate::__imports::native_draw_sprite_arx(texture_dict,
texture_name,
x,
y,
width,
height,
p6,
red,
green,
blue,
alpha,
p11,
p12)
}
pub fn get_scaleform_movie_method_return_value_int(method_return: i32) -> altv_wasm_shared::natives_result::ResultOfGetScaleformMovieMethodReturnValueInt {
    crate::__imports::native_get_scaleform_movie_method_return_value_int(method_return)
}
pub fn get_is_petrol_decal_in_range(x_coord: f32,
y_coord: f32,
z_coord: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfGetIsPetrolDecalInRange {
    crate::__imports::native_get_is_petrol_decal_in_range(x_coord,
y_coord,
z_coord,
radius)
}
pub fn is_active_scaleform_movie_deleting(val: i32) -> altv_wasm_shared::natives_result::ResultOfIsActiveScaleformMovieDeleting {
    crate::__imports::native_is_active_scaleform_movie_deleting(val)
}
pub fn grassbatch_disable_flattening() -> altv_wasm_shared::natives_result::ResultOfGrassbatchDisableFlattening {
    crate::__imports::native_grassbatch_disable_flattening()
}
pub fn get_current_tv_clip_namehash() -> altv_wasm_shared::natives_result::ResultOfGetCurrentTvClipNamehash {
    crate::__imports::native_get_current_tv_clip_namehash()
}
pub fn get_is_widescreen() -> altv_wasm_shared::natives_result::ResultOfGetIsWidescreen {
    crate::__imports::native_get_is_widescreen()
}
pub fn golf_trail_set_path(p0: f32,
p1: f32,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
p6: f32,
p7: f32,
p8: bool) -> altv_wasm_shared::natives_result::ResultOfGolfTrailSetPath {
    crate::__imports::native_golf_trail_set_path(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8)
}
pub fn get_decal_wash_level(decal: i32) -> altv_wasm_shared::natives_result::ResultOfGetDecalWashLevel {
    crate::__imports::native_get_decal_wash_level(decal)
}
pub fn set_scaleform_movie_to_use_large_rt(scaleform_handle: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetScaleformMovieToUseLargeRt {
    crate::__imports::native_set_scaleform_movie_to_use_large_rt(scaleform_handle,
toggle)
}
pub fn set_bink_movie(name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetBinkMovie {
    crate::__imports::native_set_bink_movie(name)
}
pub fn free_memory_for_mission_creator_photo_preview() -> altv_wasm_shared::natives_result::ResultOfFreeMemoryForMissionCreatorPhotoPreview {
    crate::__imports::native_free_memory_for_mission_creator_photo_preview()
}
pub fn get_maximum_number_of_photos() -> altv_wasm_shared::natives_result::ResultOfGetMaximumNumberOfPhotos {
    crate::__imports::native_get_maximum_number_of_photos()
}
pub fn get_screen_coord_from_world_coord(world_x: f32,
world_y: f32,
world_z: f32,
screen_x: f32,
screen_y: f32) -> altv_wasm_shared::natives_result::ResultOfGetScreenCoordFromWorldCoord {
    crate::__imports::native_get_screen_coord_from_world_coord(world_x,
world_y,
world_z,
screen_x,
screen_y)
}
pub fn get_texture_resolution(texture_dict: Option<&String>,
texture_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetTextureResolution {
    crate::__imports::native_get_texture_resolution(texture_dict,
texture_name)
}
pub fn get_requestingnightvision() -> altv_wasm_shared::natives_result::ResultOfGetRequestingnightvision {
    crate::__imports::native_get_requestingnightvision()
}
pub fn end_text_command_scaleform_string() -> altv_wasm_shared::natives_result::ResultOfEndTextCommandScaleformString {
    crate::__imports::native_end_text_command_scaleform_string()
}
pub fn disable_occlusion_this_frame() -> altv_wasm_shared::natives_result::ResultOfDisableOcclusionThisFrame {
    crate::__imports::native_disable_occlusion_this_frame()
}
pub fn animpostfx_is_running(effect_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAnimpostfxIsRunning {
    crate::__imports::native_animpostfx_is_running(effect_name)
}
pub fn cascade_shadows_set_split_z_exp_weight(p0: f32) -> altv_wasm_shared::natives_result::ResultOfCascadeShadowsSetSplitZexpWeight {
    crate::__imports::native_cascade_shadows_set_split_z_exp_weight(p0)
}
pub fn draw_debug_text(text: Option<&String>,
x: f32,
y: f32,
z: f32,
red: i32,
green: i32,
blue: i32,
alpha: i32) -> altv_wasm_shared::natives_result::ResultOfDrawDebugText {
    crate::__imports::native_draw_debug_text(text,
x,
y,
z,
red,
green,
blue,
alpha)
}
pub fn get_light_override_max_intensity_scale() -> altv_wasm_shared::natives_result::ResultOfGetLightOverrideMaxIntensityScale {
    crate::__imports::native_get_light_override_max_intensity_scale()
}
pub fn draw_rect(x: f32,
y: f32,
width: f32,
height: f32,
r: i32,
g: i32,
b: i32,
a: i32,
p8: bool) -> altv_wasm_shared::natives_result::ResultOfDrawRect {
    crate::__imports::native_draw_rect(x,
y,
width,
height,
r,
g,
b,
a,
p8)
}
pub fn set_transition_timecycle_modifier(modifier_name: Option<&String>,
transition: f32) -> altv_wasm_shared::natives_result::ResultOfSetTransitionTimecycleModifier {
    crate::__imports::native_set_transition_timecycle_modifier(modifier_name,
transition)
}
pub fn set_checkpoint_direction(checkpoint: i32,
pos_x: f32,
pos_y: f32,
pos_z: f32) -> altv_wasm_shared::natives_result::ResultOfSetCheckpointDirection {
    crate::__imports::native_set_checkpoint_direction(checkpoint,
pos_x,
pos_y,
pos_z)
}
pub fn pop_timecycle_modifier() -> altv_wasm_shared::natives_result::ResultOfPopTimecycleModifier {
    crate::__imports::native_pop_timecycle_modifier()
}
pub fn save_high_quality_photo(unused: i32) -> altv_wasm_shared::natives_result::ResultOfSaveHighQualityPhoto {
    crate::__imports::native_save_high_quality_photo(unused)
}
pub fn get_load_high_quality_photo_status(p0: i32) -> altv_wasm_shared::natives_result::ResultOfGetLoadHighQualityPhotoStatus {
    crate::__imports::native_get_load_high_quality_photo_status(p0)
}
pub fn add_vehicle_crew_emblem(vehicle: u32,
ped: u32,
bone_index: i32,
x1: f32,
x2: f32,
x3: f32,
y1: f32,
y2: f32,
y3: f32,
z1: f32,
z2: f32,
z3: f32,
scale: f32,
p13: i32,
alpha: i32) -> altv_wasm_shared::natives_result::ResultOfAddVehicleCrewEmblem {
    crate::__imports::native_add_vehicle_crew_emblem(vehicle,
ped,
bone_index,
x1,
x2,
x3,
y1,
y2,
y3,
z1,
z2,
z3,
scale,
p13,
alpha)
}
pub fn seethrough_get_max_thickness() -> altv_wasm_shared::natives_result::ResultOfSeethroughGetMaxThickness {
    crate::__imports::native_seethrough_get_max_thickness()
}
pub fn override_nightvision_light_range(p0: f32) -> altv_wasm_shared::natives_result::ResultOfOverrideNightvisionLightRange {
    crate::__imports::native_override_nightvision_light_range(p0)
}
pub fn set_checkpoint_inside_cylinder_scale(checkpoint: i32,
scale: f32) -> altv_wasm_shared::natives_result::ResultOfSetCheckpointInsideCylinderScale {
    crate::__imports::native_set_checkpoint_inside_cylinder_scale(checkpoint,
scale)
}
pub fn get_usingseethrough() -> altv_wasm_shared::natives_result::ResultOfGetUsingseethrough {
    crate::__imports::native_get_usingseethrough()
}
pub fn get_timecycle_transition_modifier_index() -> altv_wasm_shared::natives_result::ResultOfGetTimecycleTransitionModifierIndex {
    crate::__imports::native_get_timecycle_transition_modifier_index()
}
pub fn set_decal_bullet_impact_range_scale(p0: f32) -> altv_wasm_shared::natives_result::ResultOfSetDecalBulletImpactRangeScale {
    crate::__imports::native_set_decal_bullet_impact_range_scale(p0)
}
pub fn get_current_number_of_cloud_photos() -> altv_wasm_shared::natives_result::ResultOfGetCurrentNumberOfCloudPhotos {
    crate::__imports::native_get_current_number_of_cloud_photos()
}
pub fn load_mission_creator_photo(p0: shared::MemoryBufferId,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfLoadMissionCreatorPhoto {
    crate::__imports::native_load_mission_creator_photo(p0,
p1,
p2,
p3)
}
pub fn clear_status_of_sorted_list_operation() -> altv_wasm_shared::natives_result::ResultOfClearStatusOfSortedListOperation {
    crate::__imports::native_clear_status_of_sorted_list_operation()
}
pub fn set_checkpoint_inside_cylinder_height_scale(checkpoint: i32,
scale: f32) -> altv_wasm_shared::natives_result::ResultOfSetCheckpointInsideCylinderHeightScale {
    crate::__imports::native_set_checkpoint_inside_cylinder_height_scale(checkpoint,
scale)
}
pub fn set_disable_decal_rendering_this_frame() -> altv_wasm_shared::natives_result::ResultOfSetDisableDecalRenderingThisFrame {
    crate::__imports::native_set_disable_decal_rendering_this_frame()
}
pub fn use_snow_wheel_vfx_when_unsheltered(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfUseSnowWheelVfxWhenUnsheltered {
    crate::__imports::native_use_snow_wheel_vfx_when_unsheltered(toggle)
}
pub fn add_petrol_decal(x: f32,
y: f32,
z: f32,
ground_lvl: f32,
width: f32,
transparency: f32) -> altv_wasm_shared::natives_result::ResultOfAddPetrolDecal {
    crate::__imports::native_add_petrol_decal(x,
y,
z,
ground_lvl,
width,
transparency)
}
pub fn set_extra_tcmodifier(modifier_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetExtraTcmodifier {
    crate::__imports::native_set_extra_tcmodifier(modifier_name)
}
pub fn call_scaleform_movie_method_with_string(scaleform: i32,
method_name: Option<&String>,
param1: Option<&String>,
param2: Option<&String>,
param3: Option<&String>,
param4: Option<&String>,
param5: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfCallScaleformMovieMethodWithString {
    crate::__imports::native_call_scaleform_movie_method_with_string(scaleform,
method_name,
param1,
param2,
param3,
param4,
param5)
}
pub fn draw_scaleform_movie(scaleform_handle: i32,
x: f32,
y: f32,
width: f32,
height: f32,
red: i32,
green: i32,
blue: i32,
alpha: i32,
p9: i32) -> altv_wasm_shared::natives_result::ResultOfDrawScaleformMovie {
    crate::__imports::native_draw_scaleform_movie(scaleform_handle,
x,
y,
width,
height,
red,
green,
blue,
alpha,
p9)
}
pub fn set_particle_fx_bang_scrape_lodrange_scale(p0: f32) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxBangScrapeLodrangeScale {
    crate::__imports::native_set_particle_fx_bang_scrape_lodrange_scale(p0)
}
pub fn push_timecycle_modifier() -> altv_wasm_shared::natives_result::ResultOfPushTimecycleModifier {
    crate::__imports::native_push_timecycle_modifier()
}
pub fn get_status_of_create_mission_creator_photo_preview() -> altv_wasm_shared::natives_result::ResultOfGetStatusOfCreateMissionCreatorPhotoPreview {
    crate::__imports::native_get_status_of_create_mission_creator_photo_preview()
}
pub fn wash_decals_from_vehicle(vehicle: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfWashDecalsFromVehicle {
    crate::__imports::native_wash_decals_from_vehicle(vehicle,
p1)
}
pub fn draw_shadowed_spot_light(pos_x: f32,
pos_y: f32,
pos_z: f32,
dir_x: f32,
dir_y: f32,
dir_z: f32,
color_r: i32,
color_g: i32,
color_b: i32,
distance: f32,
brightness: f32,
roundness: f32,
radius: f32,
falloff: f32,
shadow_id: i32) -> altv_wasm_shared::natives_result::ResultOfDrawShadowedSpotLight {
    crate::__imports::native_draw_shadowed_spot_light(pos_x,
pos_y,
pos_z,
dir_x,
dir_y,
dir_z,
color_r,
color_g,
color_b,
distance,
brightness,
roundness,
radius,
falloff,
shadow_id)
}
pub fn get_screenblur_fade_current_time() -> altv_wasm_shared::natives_result::ResultOfGetScreenblurFadeCurrentTime {
    crate::__imports::native_get_screenblur_fade_current_time()
}
pub fn terraingrid_set_colours(low_r: i32,
low_g: i32,
low_b: i32,
low_alpha: i32,
r: i32,
g: i32,
b: i32,
alpha: i32,
high_r: i32,
high_g: i32,
high_b: i32,
high_alpha: i32) -> altv_wasm_shared::natives_result::ResultOfTerraingridSetColours {
    crate::__imports::native_terraingrid_set_colours(low_r,
low_g,
low_b,
low_alpha,
r,
g,
b,
alpha,
high_r,
high_g,
high_b,
high_alpha)
}
pub fn remove_decals_in_range(x: f32,
y: f32,
z: f32,
range: f32) -> altv_wasm_shared::natives_result::ResultOfRemoveDecalsInRange {
    crate::__imports::native_remove_decals_in_range(x,
y,
z,
range)
}
pub fn set_skidmark_range_scale(scale: f32) -> altv_wasm_shared::natives_result::ResultOfSetSkidmarkRangeScale {
    crate::__imports::native_set_skidmark_range_scale(scale)
}
pub fn enable_procobj_creation() -> altv_wasm_shared::natives_result::ResultOfEnableProcobjCreation {
    crate::__imports::native_enable_procobj_creation()
}
pub fn does_latest_brief_string_exist(p0: i32) -> altv_wasm_shared::natives_result::ResultOfDoesLatestBriefStringExist {
    crate::__imports::native_does_latest_brief_string_exist(p0)
}
pub fn cascade_shadows_set_entity_tracker_scale(p0: f32) -> altv_wasm_shared::natives_result::ResultOfCascadeShadowsSetEntityTrackerScale {
    crate::__imports::native_cascade_shadows_set_entity_tracker_scale(p0)
}
pub fn set_particle_fx_looped_evolution(ptfx_handle: i32,
property_name: Option<&String>,
amount: f32,
no_network: bool) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxLoopedEvolution {
    crate::__imports::native_set_particle_fx_looped_evolution(ptfx_handle,
property_name,
amount,
no_network)
}
pub fn cascade_shadows_set_cascade_bounds_scale(p0: f32) -> altv_wasm_shared::natives_result::ResultOfCascadeShadowsSetCascadeBoundsScale {
    crate::__imports::native_cascade_shadows_set_cascade_bounds_scale(p0)
}
pub fn disable_downwash_ptfx(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfDisableDownwashPtfx {
    crate::__imports::native_disable_downwash_ptfx(toggle)
}
pub fn set_checkpoint_decal_rot_aligned_to_camera_rot(checkpoint: i32) -> altv_wasm_shared::natives_result::ResultOfSetCheckpointDecalRotAlignedToCameraRot {
    crate::__imports::native_set_checkpoint_decal_rot_aligned_to_camera_rot(checkpoint)
}
pub fn set_script_gfx_draw_order(draw_order: i32) -> altv_wasm_shared::natives_result::ResultOfSetScriptGfxDrawOrder {
    crate::__imports::native_set_script_gfx_draw_order(draw_order)
}
pub fn remove_grass_cull_sphere(handle: i32) -> altv_wasm_shared::natives_result::ResultOfRemoveGrassCullSphere {
    crate::__imports::native_remove_grass_cull_sphere(handle)
}
pub fn stop_bink_movie(bink_movie: i32) -> altv_wasm_shared::natives_result::ResultOfStopBinkMovie {
    crate::__imports::native_stop_bink_movie(bink_movie)
}
pub fn procgrass_disable_cullsphere(handle: i32) -> altv_wasm_shared::natives_result::ResultOfProcgrassDisableCullsphere {
    crate::__imports::native_procgrass_disable_cullsphere(handle)
}
pub fn request_scaleform_movie_with_ignore_super_widescreen(scaleform_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRequestScaleformMovieWithIgnoreSuperWidescreen {
    crate::__imports::native_request_scaleform_movie_with_ignore_super_widescreen(scaleform_name)
}
pub fn set_bink_should_skip(bink_movie: i32,
b_should_skip: bool) -> altv_wasm_shared::natives_result::ResultOfSetBinkShouldSkip {
    crate::__imports::native_set_bink_should_skip(bink_movie,
b_should_skip)
}
pub fn free_memory_for_low_quality_photo() -> altv_wasm_shared::natives_result::ResultOfFreeMemoryForLowQualityPhoto {
    crate::__imports::native_free_memory_for_low_quality_photo()
}
pub fn set_force_motionblur(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetForceMotionblur {
    crate::__imports::native_set_force_motionblur(toggle)
}
pub fn draw_line(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
red: i32,
green: i32,
blue: i32,
alpha: i32) -> altv_wasm_shared::natives_result::ResultOfDrawLine {
    crate::__imports::native_draw_line(x1,
y1,
z1,
x2,
y2,
z2,
red,
green,
blue,
alpha)
}
pub fn use_particle_fx_asset(name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfUseParticleFxAsset {
    crate::__imports::native_use_particle_fx_asset(name)
}
pub fn set_scaleform_movie_to_use_system_time(scaleform: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetScaleformMovieToUseSystemTime {
    crate::__imports::native_set_scaleform_movie_to_use_system_time(scaleform,
toggle)
}
pub fn grassbatch_enable_flattening_in_sphere(x: f32,
y: f32,
z: f32,
radius: f32,
p4: f32,
p5: f32,
p6: f32) -> altv_wasm_shared::natives_result::ResultOfGrassbatchEnableFlatteningInSphere {
    crate::__imports::native_grassbatch_enable_flattening_in_sphere(x,
y,
z,
radius,
p4,
p5,
p6)
}
pub fn get_script_gfx_align_position(x: f32,
y: f32,
calculated_x: f32,
calculated_y: f32) -> altv_wasm_shared::natives_result::ResultOfGetScriptGfxAlignPosition {
    crate::__imports::native_get_script_gfx_align_position(x,
y,
calculated_x,
calculated_y)
}
pub fn cascade_shadows_set_aircraft_mode(p0: bool) -> altv_wasm_shared::natives_result::ResultOfCascadeShadowsSetAircraftMode {
    crate::__imports::native_cascade_shadows_set_aircraft_mode(p0)
}
pub fn start_networked_particle_fx_looped_on_entity(effect_name: Option<&String>,
entity: u32,
x_offset: f32,
y_offset: f32,
z_offset: f32,
x_rot: f32,
y_rot: f32,
z_rot: f32,
scale: f32,
x_axis: bool,
y_axis: bool,
z_axis: bool,
r: f32,
g: f32,
b: f32,
a: f32) -> altv_wasm_shared::natives_result::ResultOfStartNetworkedParticleFxLoopedOnEntity {
    crate::__imports::native_start_networked_particle_fx_looped_on_entity(effect_name,
entity,
x_offset,
y_offset,
z_offset,
x_rot,
y_rot,
z_rot,
scale,
x_axis,
y_axis,
z_axis,
r,
g,
b,
a)
}
pub fn seethrough_reset() -> altv_wasm_shared::natives_result::ResultOfSeethroughReset {
    crate::__imports::native_seethrough_reset()
}
pub fn play_bink_movie(bink_movie: i32) -> altv_wasm_shared::natives_result::ResultOfPlayBinkMovie {
    crate::__imports::native_play_bink_movie(bink_movie)
}
pub fn draw_bink_movie(bink_movie: i32,
p1: f32,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
r: i32,
g: i32,
b: i32,
a: i32) -> altv_wasm_shared::natives_result::ResultOfDrawBinkMovie {
    crate::__imports::native_draw_bink_movie(bink_movie,
p1,
p2,
p3,
p4,
p5,
r,
g,
b,
a)
}
pub fn set_checkpoint_rgba(checkpoint: i32,
red: i32,
green: i32,
blue: i32,
alpha: i32) -> altv_wasm_shared::natives_result::ResultOfSetCheckpointRgba {
    crate::__imports::native_set_checkpoint_rgba(checkpoint,
red,
green,
blue,
alpha)
}
pub fn set_particle_fx_looped_alpha(ptfx_handle: i32,
alpha: f32) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxLoopedAlpha {
    crate::__imports::native_set_particle_fx_looped_alpha(ptfx_handle,
alpha)
}
pub fn draw_textured_poly_with_three_colours(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
x3: f32,
y3: f32,
z3: f32,
red1: f32,
green1: f32,
blue1: f32,
alpha1: i32,
red2: f32,
green2: f32,
blue2: f32,
alpha2: i32,
red3: f32,
green3: f32,
blue3: f32,
alpha3: i32,
texture_dict: Option<&String>,
texture_name: Option<&String>,
u1: f32,
v1: f32,
w1: f32,
u2: f32,
v2: f32,
w2: f32,
u3: f32,
v3: f32,
w3: f32) -> altv_wasm_shared::natives_result::ResultOfDrawTexturedPolyWithThreeColours {
    crate::__imports::native_draw_textured_poly_with_three_colours(x1,
y1,
z1,
x2,
y2,
z2,
x3,
y3,
z3,
red1,
green1,
blue1,
alpha1,
red2,
green2,
blue2,
alpha2,
red3,
green3,
blue3,
alpha3,
texture_dict,
texture_name,
u1,
v1,
w1,
u2,
v2,
w2,
u3,
v3,
w3)
}
pub fn draw_debug_cross(x: f32,
y: f32,
z: f32,
size: f32,
red: i32,
green: i32,
blue: i32,
alpha: i32) -> altv_wasm_shared::natives_result::ResultOfDrawDebugCross {
    crate::__imports::native_draw_debug_cross(x,
y,
z,
size,
red,
green,
blue,
alpha)
}
pub fn does_particle_fx_looped_exist(ptfx_handle: i32) -> altv_wasm_shared::natives_result::ResultOfDoesParticleFxLoopedExist {
    crate::__imports::native_does_particle_fx_looped_exist(ptfx_handle)
}
pub fn enable_movie_keyframe_wait(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfEnableMovieKeyframeWait {
    crate::__imports::native_enable_movie_keyframe_wait(toggle)
}
pub fn begin_create_low_quality_copy_of_photo(p0: i32) -> altv_wasm_shared::natives_result::ResultOfBeginCreateLowQualityCopyOfPhoto {
    crate::__imports::native_begin_create_low_quality_copy_of_photo(p0)
}
pub fn is_scaleform_movie_method_return_value_ready(method_return: i32) -> altv_wasm_shared::natives_result::ResultOfIsScaleformMovieMethodReturnValueReady {
    crate::__imports::native_is_scaleform_movie_method_return_value_ready(method_return)
}
pub fn set_particle_fx_non_looped_alpha(alpha: f32) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxNonLoopedAlpha {
    crate::__imports::native_set_particle_fx_non_looped_alpha(alpha)
}
pub fn scaleform_movie_method_add_param_literal_string(string: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfScaleformMovieMethodAddParamLiteralString {
    crate::__imports::native_scaleform_movie_method_add_param_literal_string(string)
}
pub fn draw_marker_sphere(x: f32,
y: f32,
z: f32,
radius: f32,
red: i32,
green: i32,
blue: i32,
alpha: f32) -> altv_wasm_shared::natives_result::ResultOfDrawMarkerSphere {
    crate::__imports::native_draw_marker_sphere(x,
y,
z,
radius,
red,
green,
blue,
alpha)
}
pub fn ui3dscene_clear_patched_data() -> altv_wasm_shared::natives_result::ResultOfUi3dsceneClearPatchedData {
    crate::__imports::native_ui3dscene_clear_patched_data()
}
pub fn phonephotoeditor_toggle(p0: bool) -> altv_wasm_shared::natives_result::ResultOfPhonephotoeditorToggle {
    crate::__imports::native_phonephotoeditor_toggle(p0)
}
pub fn is_screenblur_fade_running() -> altv_wasm_shared::natives_result::ResultOfIsScreenblurFadeRunning {
    crate::__imports::native_is_screenblur_fade_running()
}
pub fn set_seethrough(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetSeethrough {
    crate::__imports::native_set_seethrough(toggle)
}
pub fn set_particle_fx_looped_colour(ptfx_handle: i32,
r: f32,
g: f32,
b: f32,
p4: bool) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxLoopedColour {
    crate::__imports::native_set_particle_fx_looped_colour(ptfx_handle,
r,
g,
b,
p4)
}
pub fn begin_create_mission_creator_photo_preview() -> altv_wasm_shared::natives_result::ResultOfBeginCreateMissionCreatorPhotoPreview {
    crate::__imports::native_begin_create_mission_creator_photo_preview()
}
pub fn draw_debug_line(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
r: i32,
g: i32,
b: i32,
alpha: i32) -> altv_wasm_shared::natives_result::ResultOfDrawDebugLine {
    crate::__imports::native_draw_debug_line(x1,
y1,
z1,
x2,
y2,
z2,
r,
g,
b,
alpha)
}
pub fn begin_text_command_scaleform_string(component_type: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfBeginTextCommandScaleformString {
    crate::__imports::native_begin_text_command_scaleform_string(component_type)
}
pub fn cascade_shadows_enable_entity_tracker(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfCascadeShadowsEnableEntityTracker {
    crate::__imports::native_cascade_shadows_enable_entity_tracker(toggle)
}
pub fn force_exposure_readback(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfForceExposureReadback {
    crate::__imports::native_force_exposure_readback(toggle)
}
pub fn has_scaleform_container_movie_loaded_into_parent(scaleform_handle: i32) -> altv_wasm_shared::natives_result::ResultOfHasScaleformContainerMovieLoadedIntoParent {
    crate::__imports::native_has_scaleform_container_movie_loaded_into_parent(scaleform_handle)
}
pub fn abort_vehicle_crew_emblem_request(p0: i32) -> altv_wasm_shared::natives_result::ResultOfAbortVehicleCrewEmblemRequest {
    crate::__imports::native_abort_vehicle_crew_emblem_request(p0)
}
pub fn set_timecycle_modifier_strength(strength: f32) -> altv_wasm_shared::natives_result::ResultOfSetTimecycleModifierStrength {
    crate::__imports::native_set_timecycle_modifier_strength(strength)
}
pub fn attach_tv_audio_to_entity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfAttachTvAudioToEntity {
    crate::__imports::native_attach_tv_audio_to_entity(entity)
}
pub fn move_vehicle_decals(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfMoveVehicleDecals {
    crate::__imports::native_move_vehicle_decals(p0,
p1)
}
pub fn get_is_hidef() -> altv_wasm_shared::natives_result::ResultOfGetIsHidef {
    crate::__imports::native_get_is_hidef()
}
pub fn grab_pausemenu_ownership() -> altv_wasm_shared::natives_result::ResultOfGrabPausemenuOwnership {
    crate::__imports::native_grab_pausemenu_ownership()
}
pub fn has_scaleform_movie_loaded(scaleform_handle: i32) -> altv_wasm_shared::natives_result::ResultOfHasScaleformMovieLoaded {
    crate::__imports::native_has_scaleform_movie_loaded(scaleform_handle)
}
pub fn is_scaleform_movie_deleting(val: i32) -> altv_wasm_shared::natives_result::ResultOfIsScaleformMovieDeleting {
    crate::__imports::native_is_scaleform_movie_deleting(val)
}
pub fn get_actual_screen_resolution(x: i32,
y: i32) -> altv_wasm_shared::natives_result::ResultOfGetActualScreenResolution {
    crate::__imports::native_get_actual_screen_resolution(x,
y)
}
pub fn enable_movie_subtitles(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfEnableMovieSubtitles {
    crate::__imports::native_enable_movie_subtitles(toggle)
}
pub fn draw_scaleform_movie3d(scaleform: i32,
pos_x: f32,
pos_y: f32,
pos_z: f32,
rot_x: f32,
rot_y: f32,
rot_z: f32,
p7: f32,
p8: f32,
p9: f32,
scale_x: f32,
scale_y: f32,
scale_z: f32,
rotation_order: i32) -> altv_wasm_shared::natives_result::ResultOfDrawScaleformMovie3d {
    crate::__imports::native_draw_scaleform_movie3d(scaleform,
pos_x,
pos_y,
pos_z,
rot_x,
rot_y,
rot_z,
p7,
p8,
p9,
scale_x,
scale_y,
scale_z,
rotation_order)
}
pub fn get_screen_resolution(x: i32,
y: i32) -> altv_wasm_shared::natives_result::ResultOfGetScreenResolution {
    crate::__imports::native_get_screen_resolution(x,
y)
}
pub fn reset_particle_fx_override(name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfResetParticleFxOverride {
    crate::__imports::native_reset_particle_fx_override(name)
}
pub fn patch_decal_diffuse_map(decal_type: i32,
texture_dict: Option<&String>,
texture_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfPatchDecalDiffuseMap {
    crate::__imports::native_patch_decal_diffuse_map(decal_type,
texture_dict,
texture_name)
}
pub fn set_particle_fx_force_vehicle_interior(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxForceVehicleInterior {
    crate::__imports::native_set_particle_fx_force_vehicle_interior(toggle)
}
pub fn get_bink_movie_time(bink_movie: i32) -> altv_wasm_shared::natives_result::ResultOfGetBinkMovieTime {
    crate::__imports::native_get_bink_movie_time(bink_movie)
}
pub fn stop_particle_fx_looped(ptfx_handle: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfStopParticleFxLooped {
    crate::__imports::native_stop_particle_fx_looped(ptfx_handle,
p1)
}
pub fn set_particle_fx_blood_scale(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxBloodScale {
    crate::__imports::native_set_particle_fx_blood_scale(p0)
}
pub fn get_status_of_take_mission_creator_photo() -> altv_wasm_shared::natives_result::ResultOfGetStatusOfTakeMissionCreatorPhoto {
    crate::__imports::native_get_status_of_take_mission_creator_photo()
}
pub fn clear_extra_tcmodifier() -> altv_wasm_shared::natives_result::ResultOfClearExtraTcmodifier {
    crate::__imports::native_clear_extra_tcmodifier()
}
pub fn request_scaleform_script_hud_movie(hud_component: i32) -> altv_wasm_shared::natives_result::ResultOfRequestScaleformScriptHudMovie {
    crate::__imports::native_request_scaleform_script_hud_movie(hud_component)
}
pub fn set_particle_fx_foot_lodrange_scale(p0: f32) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxFootLodrangeScale {
    crate::__imports::native_set_particle_fx_foot_lodrange_scale(p0)
}
pub fn draw_sprite_arx_with_uv(texture_dict: Option<&String>,
texture_name: Option<&String>,
x: f32,
y: f32,
width: f32,
height: f32,
u1: f32,
v1: f32,
u2: f32,
v2: f32,
heading: f32,
red: i32,
green: i32,
blue: i32,
alpha: i32,
p15: i32) -> altv_wasm_shared::natives_result::ResultOfDrawSpriteArxWithUv {
    crate::__imports::native_draw_sprite_arx_with_uv(texture_dict,
texture_name,
x,
y,
width,
height,
u1,
v1,
u2,
v2,
heading,
red,
green,
blue,
alpha,
p15)
}
pub fn override_ped_crew_logo_texture(ped: u32,
txd: Option<&String>,
txn: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfOverridePedCrewLogoTexture {
    crate::__imports::native_override_ped_crew_logo_texture(ped,
txd,
txn)
}
pub fn set_light_override_max_intensity_scale(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetLightOverrideMaxIntensityScale {
    crate::__imports::native_set_light_override_max_intensity_scale(p0)
}
pub fn add_petrol_trail_decal_info(x: f32,
y: f32,
z: f32,
p3: f32) -> altv_wasm_shared::natives_result::ResultOfAddPetrolTrailDecalInfo {
    crate::__imports::native_add_petrol_trail_decal_info(x,
y,
z,
p3)
}
pub fn set_particle_fx_shootout_boat(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxShootoutBoat {
    crate::__imports::native_set_particle_fx_shootout_boat(p0)
}
pub fn begin_scaleform_script_hud_movie_method(hud_component: i32,
method_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfBeginScaleformScriptHudMovieMethod {
    crate::__imports::native_begin_scaleform_script_hud_movie_method(hud_component,
method_name)
}
pub fn ui3dscene_assign_ped_to_slot(preset_name: Option<&String>,
ped: u32,
slot: i32,
pos_x: f32,
pos_y: f32,
pos_z: f32) -> altv_wasm_shared::natives_result::ResultOfUi3dsceneAssignPedToSlot {
    crate::__imports::native_ui3dscene_assign_ped_to_slot(preset_name,
ped,
slot,
pos_x,
pos_y,
pos_z)
}
pub fn get_is_timecycle_transitioning_out() -> altv_wasm_shared::natives_result::ResultOfGetIsTimecycleTransitioningOut {
    crate::__imports::native_get_is_timecycle_transitioning_out()
}
pub fn request_early_light_check() -> altv_wasm_shared::natives_result::ResultOfRequestEarlyLightCheck {
    crate::__imports::native_request_early_light_check()
}
pub fn start_petrol_trail_decals(p0: f32) -> altv_wasm_shared::natives_result::ResultOfStartPetrolTrailDecals {
    crate::__imports::native_start_petrol_trail_decals(p0)
}
pub fn force_postfx_bullet_impacts_after_hud(p0: bool) -> altv_wasm_shared::natives_result::ResultOfForcePostfxBulletImpactsAfterHud {
    crate::__imports::native_force_postfx_bullet_impacts_after_hud(p0)
}
pub fn query_movie_mesh_set_state(p0: i32) -> altv_wasm_shared::natives_result::ResultOfQueryMovieMeshSetState {
    crate::__imports::native_query_movie_mesh_set_state(p0)
}
pub fn wash_decals_in_range(x: f32,
y: f32,
z: f32,
range: f32,
p4: f32) -> altv_wasm_shared::natives_result::ResultOfWashDecalsInRange {
    crate::__imports::native_wash_decals_in_range(x,
y,
z,
range,
p4)
}
pub fn add_entity_icon(entity: u32,
icon: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAddEntityIcon {
    crate::__imports::native_add_entity_icon(entity,
icon)
}
pub fn golf_trail_set_shader_params(p0: f32,
p1: f32,
p2: f32,
p3: f32,
p4: f32) -> altv_wasm_shared::natives_result::ResultOfGolfTrailSetShaderParams {
    crate::__imports::native_golf_trail_set_shader_params(p0,
p1,
p2,
p3,
p4)
}
pub fn seethrough_set_fade_enddistance(distance: f32) -> altv_wasm_shared::natives_result::ResultOfSeethroughSetFadeEnddistance {
    crate::__imports::native_seethrough_set_fade_enddistance(distance)
}
pub fn enable_alien_blood_vfx(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfEnableAlienBloodVfx {
    crate::__imports::native_enable_alien_blood_vfx(toggle)
}
pub fn trigger_screenblur_fade_in(transition_time: f32) -> altv_wasm_shared::natives_result::ResultOfTriggerScreenblurFadeIn {
    crate::__imports::native_trigger_screenblur_fade_in(transition_time)
}
pub fn terraingrid_activate(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfTerraingridActivate {
    crate::__imports::native_terraingrid_activate(toggle)
}
pub fn draw_debug_text2d(text: Option<&String>,
x: f32,
y: f32,
z: f32,
red: i32,
green: i32,
blue: i32,
alpha: i32) -> altv_wasm_shared::natives_result::ResultOfDrawDebugText2d {
    crate::__imports::native_draw_debug_text2d(text,
x,
y,
z,
red,
green,
blue,
alpha)
}
pub fn start_networked_particle_fx_non_looped_on_ped_bone(effect_name: Option<&String>,
ped: u32,
offset_x: f32,
offset_y: f32,
offset_z: f32,
rot_x: f32,
rot_y: f32,
rot_z: f32,
bone_index: i32,
scale: f32,
axis_x: bool,
axis_y: bool,
axis_z: bool) -> altv_wasm_shared::natives_result::ResultOfStartNetworkedParticleFxNonLoopedOnPedBone {
    crate::__imports::native_start_networked_particle_fx_non_looped_on_ped_bone(effect_name,
ped,
offset_x,
offset_y,
offset_z,
rot_x,
rot_y,
rot_z,
bone_index,
scale,
axis_x,
axis_y,
axis_z)
}
pub fn register_noir_lens_effect() -> altv_wasm_shared::natives_result::ResultOfRegisterNoirLensEffect {
    crate::__imports::native_register_noir_lens_effect()
}
pub fn golf_trail_get_visual_control_point(p0: i32) -> altv_wasm_shared::natives_result::ResultOfGolfTrailGetVisualControlPoint {
    crate::__imports::native_golf_trail_get_visual_control_point(p0)
}
pub fn set_weather_ptfx_use_override_settings(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetWeatherPtfxUseOverrideSettings {
    crate::__imports::native_set_weather_ptfx_use_override_settings(p0)
}
pub fn golf_trail_get_max_height() -> altv_wasm_shared::natives_result::ResultOfGolfTrailGetMaxHeight {
    crate::__imports::native_golf_trail_get_max_height()
}
pub fn golf_trail_set_enabled(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfGolfTrailSetEnabled {
    crate::__imports::native_golf_trail_set_enabled(toggle)
}
pub fn begin_take_high_quality_photo() -> altv_wasm_shared::natives_result::ResultOfBeginTakeHighQualityPhoto {
    crate::__imports::native_begin_take_high_quality_photo()
}
pub fn remove_decals_from_object_facing(obj: u32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfRemoveDecalsFromObjectFacing {
    crate::__imports::native_remove_decals_from_object_facing(obj,
x,
y,
z)
}
pub fn seethrough_set_fade_startdistance(distance: f32) -> altv_wasm_shared::natives_result::ResultOfSeethroughSetFadeStartdistance {
    crate::__imports::native_seethrough_set_fade_startdistance(distance)
}
pub fn set_draw_origin(x: f32,
y: f32,
z: f32,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfSetDrawOrigin {
    crate::__imports::native_set_draw_origin(x,
y,
z,
p3)
}
pub fn draw_debug_sphere(x: f32,
y: f32,
z: f32,
radius: f32,
red: i32,
green: i32,
blue: i32,
alpha: i32) -> altv_wasm_shared::natives_result::ResultOfDrawDebugSphere {
    crate::__imports::native_draw_debug_sphere(x,
y,
z,
radius,
red,
green,
blue,
alpha)
}
pub fn grassbatch_enable_flattening_ext_in_sphere(x: f32,
y: f32,
z: f32,
p3: i32,
p4: f32,
p5: f32,
p6: f32,
scale: f32) -> altv_wasm_shared::natives_result::ResultOfGrassbatchEnableFlatteningExtInSphere {
    crate::__imports::native_grassbatch_enable_flattening_ext_in_sphere(x,
y,
z,
p3,
p4,
p5,
p6,
scale)
}
pub fn begin_scaleform_movie_method_on_frontend(method_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfBeginScaleformMovieMethodOnFrontend {
    crate::__imports::native_begin_scaleform_movie_method_on_frontend(method_name)
}
pub fn draw_poly(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
x3: f32,
y3: f32,
z3: f32,
red: i32,
green: i32,
blue: i32,
alpha: i32) -> altv_wasm_shared::natives_result::ResultOfDrawPoly {
    crate::__imports::native_draw_poly(x1,
y1,
z1,
x2,
y2,
z2,
x3,
y3,
z3,
red,
green,
blue,
alpha)
}
pub fn set_particle_fx_cam_inside_nonplayer_vehicle(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxCamInsideNonplayerVehicle {
    crate::__imports::native_set_particle_fx_cam_inside_nonplayer_vehicle(vehicle,
p1)
}
pub fn set_on_island_x_for_taken_photo(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetOnIslandXforTakenPhoto {
    crate::__imports::native_set_on_island_x_for_taken_photo(p0)
}
pub fn end_text_command_unparsed_scaleform_string() -> altv_wasm_shared::natives_result::ResultOfEndTextCommandUnparsedScaleformString {
    crate::__imports::native_end_text_command_unparsed_scaleform_string()
}
pub fn procgrass_enable_cullsphere(handle: i32,
x: f32,
y: f32,
z: f32,
scale: f32) -> altv_wasm_shared::natives_result::ResultOfProcgrassEnableCullsphere {
    crate::__imports::native_procgrass_enable_cullsphere(handle,
x,
y,
z,
scale)
}
pub fn use_snow_foot_vfx_when_unsheltered(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfUseSnowFootVfxWhenUnsheltered {
    crate::__imports::native_use_snow_foot_vfx_when_unsheltered(toggle)
}
pub fn set_bink_movie_volume(bink_movie: i32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetBinkMovieVolume {
    crate::__imports::native_set_bink_movie_volume(bink_movie,
value)
}
pub fn cascade_shadows_set_shadow_sample_type(r#type: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfCascadeShadowsSetShadowSampleType {
    crate::__imports::native_cascade_shadows_set_shadow_sample_type(r#type)
}
pub fn golf_trail_set_fixed_control_point(r#type: i32,
x_pos: f32,
y_pos: f32,
z_pos: f32,
p4: f32,
red: i32,
green: i32,
blue: i32,
alpha: i32) -> altv_wasm_shared::natives_result::ResultOfGolfTrailSetFixedControlPoint {
    crate::__imports::native_golf_trail_set_fixed_control_point(r#type,
x_pos,
y_pos,
z_pos,
p4,
red,
green,
blue,
alpha)
}
pub fn destroy_tracked_point(point: i32) -> altv_wasm_shared::natives_result::ResultOfDestroyTrackedPoint {
    crate::__imports::native_destroy_tracked_point(point)
}
pub fn get_screen_aspect_ratio() -> altv_wasm_shared::natives_result::ResultOfGetScreenAspectRatio {
    crate::__imports::native_get_screen_aspect_ratio()
}
pub fn add_decal(decal_type: i32,
pos_x: f32,
pos_y: f32,
pos_z: f32,
p4: f32,
p5: f32,
p6: f32,
p7: f32,
p8: f32,
p9: f32,
width: f32,
height: f32,
r_coef: f32,
g_coef: f32,
b_coef: f32,
opacity: f32,
timeout: f32,
p17: bool,
p18: bool,
p19: bool) -> altv_wasm_shared::natives_result::ResultOfAddDecal {
    crate::__imports::native_add_decal(decal_type,
pos_x,
pos_y,
pos_z,
p4,
p5,
p6,
p7,
p8,
p9,
width,
height,
r_coef,
g_coef,
b_coef,
opacity,
timeout,
p17,
p18,
p19)
}
pub fn set_motionblur_max_vel_scaler(p0: f32) -> altv_wasm_shared::natives_result::ResultOfSetMotionblurMaxVelScaler {
    crate::__imports::native_set_motionblur_max_vel_scaler(p0)
}
pub fn set_particle_fx_looped_scale(ptfx_handle: i32,
scale: f32) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxLoopedScale {
    crate::__imports::native_set_particle_fx_looped_scale(ptfx_handle,
scale)
}
pub fn animpostfx_stop_all() -> altv_wasm_shared::natives_result::ResultOfAnimpostfxStopAll {
    crate::__imports::native_animpostfx_stop_all()
}
pub fn set_lock_adaptive_dof_distance(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetLockAdaptiveDofDistance {
    crate::__imports::native_set_lock_adaptive_dof_distance(p0)
}
pub fn load_movie_mesh_set(movie_mesh_set_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfLoadMovieMeshSet {
    crate::__imports::native_load_movie_mesh_set(movie_mesh_set_name)
}
pub fn unpatch_decal_diffuse_map(decal_type: i32) -> altv_wasm_shared::natives_result::ResultOfUnpatchDecalDiffuseMap {
    crate::__imports::native_unpatch_decal_diffuse_map(decal_type)
}
pub fn set_particle_fx_non_looped_scale(scale: f32) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxNonLoopedScale {
    crate::__imports::native_set_particle_fx_non_looped_scale(scale)
}
pub fn set_script_gfx_align(horizontal_align: i32,
vertical_align: i32) -> altv_wasm_shared::natives_result::ResultOfSetScriptGfxAlign {
    crate::__imports::native_set_script_gfx_align(horizontal_align,
vertical_align)
}
pub fn remove_particle_fx_from_entity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfRemoveParticleFxFromEntity {
    crate::__imports::native_remove_particle_fx_from_entity(entity)
}
pub fn begin_scaleform_movie_method_on_frontend_header(method_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfBeginScaleformMovieMethodOnFrontendHeader {
    crate::__imports::native_begin_scaleform_movie_method_on_frontend_header(method_name)
}
pub fn set_checkpoint_rgba2(checkpoint: i32,
red: i32,
green: i32,
blue: i32,
alpha: i32) -> altv_wasm_shared::natives_result::ResultOfSetCheckpointRgba2 {
    crate::__imports::native_set_checkpoint_rgba2(checkpoint,
red,
green,
blue,
alpha)
}
pub fn force_particle_fx_in_vehicle_interior(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfForceParticleFxInVehicleInterior {
    crate::__imports::native_force_particle_fx_in_vehicle_interior(p0,
p1)
}
pub fn set_particle_fx_foot_override_name(p0: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxFootOverrideName {
    crate::__imports::native_set_particle_fx_foot_override_name(p0)
}
pub fn set_hidof_override(p0: bool,
p1: bool,
nearplane_out: f32,
nearplane_in: f32,
farplane_out: f32,
farplane_in: f32) -> altv_wasm_shared::natives_result::ResultOfSetHidofOverride {
    crate::__imports::native_set_hidof_override(p0,
p1,
nearplane_out,
nearplane_in,
farplane_out,
farplane_in)
}
pub fn scaleform_movie_method_add_param_texture_name_string(string: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfScaleformMovieMethodAddParamTextureNameString {
    crate::__imports::native_scaleform_movie_method_add_param_texture_name_string(string)
}
pub fn set_tv_channel(channel: i32) -> altv_wasm_shared::natives_result::ResultOfSetTvChannel {
    crate::__imports::native_set_tv_channel(channel)
}
pub fn get_safe_zone_size() -> altv_wasm_shared::natives_result::ResultOfGetSafeZoneSize {
    crate::__imports::native_get_safe_zone_size()
}
pub fn get_extra_tcmodifier() -> altv_wasm_shared::natives_result::ResultOfGetExtraTcmodifier {
    crate::__imports::native_get_extra_tcmodifier()
}
pub fn set_particle_fx_bullet_impact_lodrange_scale(p0: f32) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxBulletImpactLodrangeScale {
    crate::__imports::native_set_particle_fx_bullet_impact_lodrange_scale(p0)
}
pub fn set_current_player_tcmodifier(modifier_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetCurrentPlayerTcmodifier {
    crate::__imports::native_set_current_player_tcmodifier(modifier_name)
}
pub fn phonephotoeditor_is_active() -> altv_wasm_shared::natives_result::ResultOfPhonephotoeditorIsActive {
    crate::__imports::native_phonephotoeditor_is_active()
}
pub fn request_scaleform_movie_skip_render_while_paused(scaleform_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRequestScaleformMovieSkipRenderWhilePaused {
    crate::__imports::native_request_scaleform_movie_skip_render_while_paused(scaleform_name)
}
pub fn set_player_tcmodifier_transition(value: f32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerTcmodifierTransition {
    crate::__imports::native_set_player_tcmodifier_transition(value)
}
pub fn set_grass_cull_sphere(p0: f32,
p1: f32,
p2: f32,
p3: f32) -> altv_wasm_shared::natives_result::ResultOfSetGrassCullSphere {
    crate::__imports::native_set_grass_cull_sphere(p0,
p1,
p2,
p3)
}
pub fn set_streamed_texture_dict_as_no_longer_needed(texture_dict: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetStreamedTextureDictAsNoLongerNeeded {
    crate::__imports::native_set_streamed_texture_dict_as_no_longer_needed(texture_dict)
}
pub fn clear_tv_channel_playlist(tv_channel: i32) -> altv_wasm_shared::natives_result::ResultOfClearTvChannelPlaylist {
    crate::__imports::native_clear_tv_channel_playlist(tv_channel)
}
pub fn set_next_player_tcmodifier(modifier_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetNextPlayerTcmodifier {
    crate::__imports::native_set_next_player_tcmodifier(modifier_name)
}
pub fn golf_trail_set_fixed_control_point_enable(p0: bool) -> altv_wasm_shared::natives_result::ResultOfGolfTrailSetFixedControlPointEnable {
    crate::__imports::native_golf_trail_set_fixed_control_point_enable(p0)
}
pub fn disable_hdtex_this_frame() -> altv_wasm_shared::natives_result::ResultOfDisableHdtexThisFrame {
    crate::__imports::native_disable_hdtex_this_frame()
}
pub fn scaleform_movie_method_add_param_int(value: i32) -> altv_wasm_shared::natives_result::ResultOfScaleformMovieMethodAddParamInt {
    crate::__imports::native_scaleform_movie_method_add_param_int(value)
}
pub fn remove_particle_fx(ptfx_handle: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfRemoveParticleFx {
    crate::__imports::native_remove_particle_fx(ptfx_handle,
p1)
}
pub fn is_tracked_point_visible(point: i32) -> altv_wasm_shared::natives_result::ResultOfIsTrackedPointVisible {
    crate::__imports::native_is_tracked_point_visible(point)
}
pub fn end_scaleform_movie_method_return_value() -> altv_wasm_shared::natives_result::ResultOfEndScaleformMovieMethodReturnValue {
    crate::__imports::native_end_scaleform_movie_method_return_value()
}
pub fn request_scaleform_movie_instance(scaleform_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRequestScaleformMovieInstance {
    crate::__imports::native_request_scaleform_movie_instance(scaleform_name)
}
pub fn scaleform_movie_method_add_param_bool(value: bool) -> altv_wasm_shared::natives_result::ResultOfScaleformMovieMethodAddParamBool {
    crate::__imports::native_scaleform_movie_method_add_param_bool(value)
}
pub fn set_depthwriting(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDepthwriting {
    crate::__imports::native_set_depthwriting(toggle)
}
pub fn set_script_gfx_draw_behind_pausemenu(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetScriptGfxDrawBehindPausemenu {
    crate::__imports::native_set_script_gfx_draw_behind_pausemenu(toggle)
}
pub fn set_ptfx_force_vehicle_interior_flag(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetPtfxForceVehicleInteriorFlag {
    crate::__imports::native_set_ptfx_force_vehicle_interior_flag(p0)
}
pub fn end_scaleform_movie_method() -> altv_wasm_shared::natives_result::ResultOfEndScaleformMovieMethod {
    crate::__imports::native_end_scaleform_movie_method()
}
pub fn is_decal_alive(decal: i32) -> altv_wasm_shared::natives_result::ResultOfIsDecalAlive {
    crate::__imports::native_is_decal_alive(decal)
}
pub fn start_particle_fx_looped_on_entity_bone(effect_name: Option<&String>,
entity: u32,
x_offset: f32,
y_offset: f32,
z_offset: f32,
x_rot: f32,
y_rot: f32,
z_rot: f32,
bone_index: i32,
scale: f32,
x_axis: bool,
y_axis: bool,
z_axis: bool) -> altv_wasm_shared::natives_result::ResultOfStartParticleFxLoopedOnEntityBone {
    crate::__imports::native_start_particle_fx_looped_on_entity_bone(effect_name,
entity,
x_offset,
y_offset,
z_offset,
x_rot,
y_rot,
z_rot,
bone_index,
scale,
x_axis,
y_axis,
z_axis)
}
pub fn start_networked_particle_fx_non_looped_on_entity(effect_name: Option<&String>,
entity: u32,
offset_x: f32,
offset_y: f32,
offset_z: f32,
rot_x: f32,
rot_y: f32,
rot_z: f32,
scale: f32,
axis_x: bool,
axis_y: bool,
axis_z: bool) -> altv_wasm_shared::natives_result::ResultOfStartNetworkedParticleFxNonLoopedOnEntity {
    crate::__imports::native_start_networked_particle_fx_non_looped_on_entity(effect_name,
entity,
offset_x,
offset_y,
offset_z,
rot_x,
rot_y,
rot_z,
scale,
axis_x,
axis_y,
axis_z)
}
pub fn fade_up_ped_light(p0: f32) -> altv_wasm_shared::natives_result::ResultOfFadeUpPedLight {
    crate::__imports::native_fade_up_ped_light(p0)
}
pub fn disable_vehicle_distantlights(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfDisableVehicleDistantlights {
    crate::__imports::native_disable_vehicle_distantlights(toggle)
}
pub fn water_reflection_set_script_object_visibility(p0: i32) -> altv_wasm_shared::natives_result::ResultOfWaterReflectionSetScriptObjectVisibility {
    crate::__imports::native_water_reflection_set_script_object_visibility(p0)
}
pub fn set_particle_fx_bullet_trace_no_angle_reject(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxBulletTraceNoAngleReject {
    crate::__imports::native_set_particle_fx_bullet_trace_no_angle_reject(p0)
}
pub fn set_noisinessoveride(value: f32) -> altv_wasm_shared::natives_result::ResultOfSetNoisinessoveride {
    crate::__imports::native_set_noisinessoveride(value)
}
pub fn get_status_of_create_low_quality_copy_of_photo(p0: i32) -> altv_wasm_shared::natives_result::ResultOfGetStatusOfCreateLowQualityCopyOfPhoto {
    crate::__imports::native_get_status_of_create_low_quality_copy_of_photo(p0)
}
pub fn remove_decals_from_object(obj: u32) -> altv_wasm_shared::natives_result::ResultOfRemoveDecalsFromObject {
    crate::__imports::native_remove_decals_from_object(obj)
}
pub fn draw_scaleform_movie_fullscreen_masked(scaleform1: i32,
scaleform2: i32,
red: i32,
green: i32,
blue: i32,
alpha: i32) -> altv_wasm_shared::natives_result::ResultOfDrawScaleformMovieFullscreenMasked {
    crate::__imports::native_draw_scaleform_movie_fullscreen_masked(scaleform1,
scaleform2,
red,
green,
blue,
alpha)
}
pub fn disable_in_water_ptfx(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfDisableInWaterPtfx {
    crate::__imports::native_disable_in_water_ptfx(toggle)
}
pub fn call_scaleform_movie_method_with_number(scaleform: i32,
method_name: Option<&String>,
param1: f32,
param2: f32,
param3: f32,
param4: f32,
param5: f32) -> altv_wasm_shared::natives_result::ResultOfCallScaleformMovieMethodWithNumber {
    crate::__imports::native_call_scaleform_movie_method_with_number(scaleform,
method_name,
param1,
param2,
param3,
param4,
param5)
}
pub fn draw_spot_light(pos_x: f32,
pos_y: f32,
pos_z: f32,
dir_x: f32,
dir_y: f32,
dir_z: f32,
color_r: i32,
color_g: i32,
color_b: i32,
distance: f32,
brightness: f32,
hardness: f32,
radius: f32,
falloff: f32) -> altv_wasm_shared::natives_result::ResultOfDrawSpotLight {
    crate::__imports::native_draw_spot_light(pos_x,
pos_y,
pos_z,
dir_x,
dir_y,
dir_z,
color_r,
color_g,
color_b,
distance,
brightness,
hardness,
radius,
falloff)
}
pub fn set_tv_player_watching_this_frame(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetTvPlayerWatchingThisFrame {
    crate::__imports::native_set_tv_player_watching_this_frame(p0)
}
pub fn pass_keyboard_input_to_scaleform(scaleform_handle: i32) -> altv_wasm_shared::natives_result::ResultOfPassKeyboardInputToScaleform {
    crate::__imports::native_pass_keyboard_input_to_scaleform(scaleform_handle)
}
pub fn animpostfx_stop_and_flush_requests(effect_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAnimpostfxStopAndFlushRequests {
    crate::__imports::native_animpostfx_stop_and_flush_requests(effect_name)
}
pub fn remove_vehicle_crew_emblem(vehicle: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfRemoveVehicleCrewEmblem {
    crate::__imports::native_remove_vehicle_crew_emblem(vehicle,
p1)
}
pub fn cascade_shadows_set_cascade_bounds(p0: i32,
p1: bool,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
p6: bool,
p7: f32) -> altv_wasm_shared::natives_result::ResultOfCascadeShadowsSetCascadeBounds {
    crate::__imports::native_cascade_shadows_set_cascade_bounds(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7)
}
pub fn cascade_shadows_set_dynamic_depth_mode(p0: bool) -> altv_wasm_shared::natives_result::ResultOfCascadeShadowsSetDynamicDepthMode {
    crate::__imports::native_cascade_shadows_set_dynamic_depth_mode(p0)
}
pub fn ui3dscene_is_available() -> altv_wasm_shared::natives_result::ResultOfUi3dsceneIsAvailable {
    crate::__imports::native_ui3dscene_is_available()
}
pub fn draw_box(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
red: i32,
green: i32,
blue: i32,
alpha: i32) -> altv_wasm_shared::natives_result::ResultOfDrawBox {
    crate::__imports::native_draw_box(x1,
y1,
z1,
x2,
y2,
z2,
red,
green,
blue,
alpha)
}
pub fn scaleform_movie_method_add_param_float(value: f32) -> altv_wasm_shared::natives_result::ResultOfScaleformMovieMethodAddParamFloat {
    crate::__imports::native_scaleform_movie_method_add_param_float(value)
}
pub fn preset_interior_ambient_cache(timecycle_modifier_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfPresetInteriorAmbientCache {
    crate::__imports::native_preset_interior_ambient_cache(timecycle_modifier_name)
}
pub fn fade_decals_in_range(x: f32,
y: f32,
z: f32,
p3: f32,
p4: f32) -> altv_wasm_shared::natives_result::ResultOfFadeDecalsInRange {
    crate::__imports::native_fade_decals_in_range(x,
y,
z,
p3,
p4)
}
pub fn seethrough_set_heatscale(index: i32,
heat_scale: f32) -> altv_wasm_shared::natives_result::ResultOfSeethroughSetHeatscale {
    crate::__imports::native_seethrough_set_heatscale(index,
heat_scale)
}
pub fn free_memory_for_high_quality_photo() -> altv_wasm_shared::natives_result::ResultOfFreeMemoryForHighQualityPhoto {
    crate::__imports::native_free_memory_for_high_quality_photo()
}
pub fn get_scaleform_movie_method_return_value_bool(method_return: i32) -> altv_wasm_shared::natives_result::ResultOfGetScaleformMovieMethodReturnValueBool {
    crate::__imports::native_get_scaleform_movie_method_return_value_bool(method_return)
}
pub fn enable_clown_blood_vfx(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfEnableClownBloodVfx {
    crate::__imports::native_enable_clown_blood_vfx(toggle)
}
pub fn draw_debug_line_with_two_colours(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
r1: i32,
g1: i32,
b1: i32,
r2: i32,
g2: i32,
b2: i32,
alpha1: i32,
alpha2: i32) -> altv_wasm_shared::natives_result::ResultOfDrawDebugLineWithTwoColours {
    crate::__imports::native_draw_debug_line_with_two_colours(x1,
y1,
z1,
x2,
y2,
z2,
r1,
g1,
b1,
r2,
g2,
b2,
alpha1,
alpha2)
}
pub fn set_disable_petrol_decals_igniting_this_frame() -> altv_wasm_shared::natives_result::ResultOfSetDisablePetrolDecalsIgnitingThisFrame {
    crate::__imports::native_set_disable_petrol_decals_igniting_this_frame()
}
pub fn set_checkpoint_force_direction(checkpoint: i32) -> altv_wasm_shared::natives_result::ResultOfSetCheckpointForceDirection {
    crate::__imports::native_set_checkpoint_force_direction(checkpoint)
}
pub fn golf_trail_set_tessellation(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfGolfTrailSetTessellation {
    crate::__imports::native_golf_trail_set_tessellation(p0,
p1)
}
pub fn force_render_in_game_ui(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfForceRenderInGameUi {
    crate::__imports::native_force_render_in_game_ui(toggle)
}
pub fn get_maximum_number_of_cloud_photos() -> altv_wasm_shared::natives_result::ResultOfGetMaximumNumberOfCloudPhotos {
    crate::__imports::native_get_maximum_number_of_cloud_photos()
}
pub fn set_particle_fx_looped_far_clip_dist(ptfx_handle: i32,
range: f32) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxLoopedFarClipDist {
    crate::__imports::native_set_particle_fx_looped_far_clip_dist(ptfx_handle,
range)
}
pub fn remove_particle_fx_in_range(x: f32,
y: f32,
z: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfRemoveParticleFxInRange {
    crate::__imports::native_remove_particle_fx_in_range(x,
y,
z,
radius)
}
pub fn start_networked_particle_fx_looped_on_entity_bone(effect_name: Option<&String>,
entity: u32,
x_offset: f32,
y_offset: f32,
z_offset: f32,
x_rot: f32,
y_rot: f32,
z_rot: f32,
bone_index: i32,
scale: f32,
x_axis: bool,
y_axis: bool,
z_axis: bool,
r: f32,
g: f32,
b: f32,
a: f32) -> altv_wasm_shared::natives_result::ResultOfStartNetworkedParticleFxLoopedOnEntityBone {
    crate::__imports::native_start_networked_particle_fx_looped_on_entity_bone(effect_name,
entity,
x_offset,
y_offset,
z_offset,
x_rot,
y_rot,
z_rot,
bone_index,
scale,
x_axis,
y_axis,
z_axis,
r,
g,
b,
a)
}
pub fn disable_screenblur_fade() -> altv_wasm_shared::natives_result::ResultOfDisableScreenblurFade {
    crate::__imports::native_disable_screenblur_fade()
}
pub fn update_lights_on_entity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfUpdateLightsOnEntity {
    crate::__imports::native_update_lights_on_entity(entity)
}
pub fn has_scaleform_script_hud_movie_loaded(hud_component: i32) -> altv_wasm_shared::natives_result::ResultOfHasScaleformScriptHudMovieLoaded {
    crate::__imports::native_has_scaleform_script_hud_movie_loaded(hud_component)
}
pub fn request_streamed_texture_dict(texture_dict: Option<&String>,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfRequestStreamedTextureDict {
    crate::__imports::native_request_streamed_texture_dict(texture_dict,
p1)
}
pub fn toggle_paused_renderphases(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfTogglePausedRenderphases {
    crate::__imports::native_toggle_paused_renderphases(toggle)
}
pub fn set_entity_icon_visibility(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityIconVisibility {
    crate::__imports::native_set_entity_icon_visibility(entity,
toggle)
}
pub fn start_particle_fx_looped_at_coord(effect_name: Option<&String>,
x: f32,
y: f32,
z: f32,
x_rot: f32,
y_rot: f32,
z_rot: f32,
scale: f32,
x_axis: bool,
y_axis: bool,
z_axis: bool,
p11: bool) -> altv_wasm_shared::natives_result::ResultOfStartParticleFxLoopedAtCoord {
    crate::__imports::native_start_particle_fx_looped_at_coord(effect_name,
x,
y,
z,
x_rot,
y_rot,
z_rot,
scale,
x_axis,
y_axis,
z_axis,
p11)
}
pub fn reset_paused_renderphases() -> altv_wasm_shared::natives_result::ResultOfResetPausedRenderphases {
    crate::__imports::native_reset_paused_renderphases()
}
pub fn get_scaleform_movie_method_return_value_string(method_return: i32) -> altv_wasm_shared::natives_result::ResultOfGetScaleformMovieMethodReturnValueString {
    crate::__imports::native_get_scaleform_movie_method_return_value_string(method_return)
}
pub fn set_distance_blur_strength_override(p0: f32) -> altv_wasm_shared::natives_result::ResultOfSetDistanceBlurStrengthOverride {
    crate::__imports::native_set_distance_blur_strength_override(p0)
}
pub fn set_artificial_vehicle_lights_state(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetArtificialVehicleLightsState {
    crate::__imports::native_set_artificial_vehicle_lights_state(toggle)
}
pub fn create_tracked_point() -> altv_wasm_shared::natives_result::ResultOfCreateTrackedPoint {
    crate::__imports::native_create_tracked_point()
}
pub fn animpostfx_get_current_time(effect_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAnimpostfxGetCurrentTime {
    crate::__imports::native_animpostfx_get_current_time(effect_name)
}
pub fn reset_script_gfx_align() -> altv_wasm_shared::natives_result::ResultOfResetScriptGfxAlign {
    crate::__imports::native_reset_script_gfx_align()
}
pub fn reset_adaptation(p0: i32) -> altv_wasm_shared::natives_result::ResultOfResetAdaptation {
    crate::__imports::native_reset_adaptation(p0)
}
pub fn get_motionblur_max_vel_scaler() -> altv_wasm_shared::natives_result::ResultOfGetMotionblurMaxVelScaler {
    crate::__imports::native_get_motionblur_max_vel_scaler()
}
pub fn toggle_player_damage_overlay(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfTogglePlayerDamageOverlay {
    crate::__imports::native_toggle_player_damage_overlay(toggle)
}
pub fn set_scaleform_movie_to_use_super_large_rt(scaleform_handle: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetScaleformMovieToUseSuperLargeRt {
    crate::__imports::native_set_scaleform_movie_to_use_super_large_rt(scaleform_handle,
toggle)
}
pub fn set_noiseoveride(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetNoiseoveride {
    crate::__imports::native_set_noiseoveride(toggle)
}
pub fn does_this_photo_slot_contain_a_valid_photo(p0: i32) -> altv_wasm_shared::natives_result::ResultOfDoesThisPhotoSlotContainAvalidPhoto {
    crate::__imports::native_does_this_photo_slot_contain_a_valid_photo(p0)
}
pub fn draw_sprite(texture_dict: Option<&String>,
texture_name: Option<&String>,
screen_x: f32,
screen_y: f32,
width: f32,
height: f32,
heading: f32,
red: i32,
green: i32,
blue: i32,
alpha: i32,
p11: bool,
p12: i32) -> altv_wasm_shared::natives_result::ResultOfDrawSprite {
    crate::__imports::native_draw_sprite(texture_dict,
texture_name,
screen_x,
screen_y,
width,
height,
heading,
red,
green,
blue,
alpha,
p11,
p12)
}
pub fn draw_marker_ex(r#type: i32,
pos_x: f32,
pos_y: f32,
pos_z: f32,
dir_x: f32,
dir_y: f32,
dir_z: f32,
rot_x: f32,
rot_y: f32,
rot_z: f32,
scale_x: f32,
scale_y: f32,
scale_z: f32,
red: i32,
green: i32,
blue: i32,
alpha: i32,
bob_up_and_down: bool,
face_camera: bool,
p19: i32,
rotate: bool,
texture_dict: Option<&String>,
texture_name: Option<&String>,
draw_on_ents: bool,
p24: bool,
p25: bool) -> altv_wasm_shared::natives_result::ResultOfDrawMarkerEx {
    crate::__imports::native_draw_marker_ex(r#type,
pos_x,
pos_y,
pos_z,
dir_x,
dir_y,
dir_z,
rot_x,
rot_y,
rot_z,
scale_x,
scale_y,
scale_z,
red,
green,
blue,
alpha,
bob_up_and_down,
face_camera,
p19,
rotate,
texture_dict,
texture_name,
draw_on_ents,
p24,
p25)
}
pub fn scaleform_movie_method_add_param_player_name_string(string: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfScaleformMovieMethodAddParamPlayerNameString {
    crate::__imports::native_scaleform_movie_method_add_param_player_name_string(string)
}
pub fn remove_decals_from_vehicle(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfRemoveDecalsFromVehicle {
    crate::__imports::native_remove_decals_from_vehicle(vehicle)
}
pub fn set_particle_fx_override(old_asset: Option<&String>,
new_asset: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxOverride {
    crate::__imports::native_set_particle_fx_override(old_asset,
new_asset)
}
pub fn release_movie_mesh_set(movie_mesh_set: i32) -> altv_wasm_shared::natives_result::ResultOfReleaseMovieMeshSet {
    crate::__imports::native_release_movie_mesh_set(movie_mesh_set)
}
pub fn get_toggle_paused_renderphases_status() -> altv_wasm_shared::natives_result::ResultOfGetTogglePausedRenderphasesStatus {
    crate::__imports::native_get_toggle_paused_renderphases_status()
}
pub fn scaleform_movie_method_add_param_latest_brief_string(value: i32) -> altv_wasm_shared::natives_result::ResultOfScaleformMovieMethodAddParamLatestBriefString {
    crate::__imports::native_scaleform_movie_method_add_param_latest_brief_string(value)
}
pub fn load_high_quality_photo(p0: i32) -> altv_wasm_shared::natives_result::ResultOfLoadHighQualityPhoto {
    crate::__imports::native_load_high_quality_photo(p0)
}
pub fn remove_decal(decal: i32) -> altv_wasm_shared::natives_result::ResultOfRemoveDecal {
    crate::__imports::native_remove_decal(decal)
}
pub fn set_particle_fx_cam_inside_vehicle(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxCamInsideVehicle {
    crate::__imports::native_set_particle_fx_cam_inside_vehicle(p0)
}
pub fn set_exposuretweak(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetExposuretweak {
    crate::__imports::native_set_exposuretweak(toggle)
}
pub fn call_scaleform_movie_method_with_number_and_string(scaleform: i32,
method_name: Option<&String>,
float_param1: f32,
float_param2: f32,
float_param3: f32,
float_param4: f32,
float_param5: f32,
string_param1: Option<&String>,
string_param2: Option<&String>,
string_param3: Option<&String>,
string_param4: Option<&String>,
string_param5: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfCallScaleformMovieMethodWithNumberAndString {
    crate::__imports::native_call_scaleform_movie_method_with_number_and_string(scaleform,
method_name,
float_param1,
float_param2,
float_param3,
float_param4,
float_param5,
string_param1,
string_param2,
string_param3,
string_param4,
string_param5)
}
pub fn adjust_next_pos_size_as_normalized169() -> altv_wasm_shared::natives_result::ResultOfAdjustNextPosSizeAsNormalized169 {
    crate::__imports::native_adjust_next_pos_size_as_normalized169()
}
pub fn trigger_screenblur_fade_out(transition_time: f32) -> altv_wasm_shared::natives_result::ResultOfTriggerScreenblurFadeOut {
    crate::__imports::native_trigger_screenblur_fade_out(transition_time)
}
pub fn override_interior_smoke_end() -> altv_wasm_shared::natives_result::ResultOfOverrideInteriorSmokeEnd {
    crate::__imports::native_override_interior_smoke_end()
}
pub fn disable_region_vfx(p0: i32) -> altv_wasm_shared::natives_result::ResultOfDisableRegionVfx {
    crate::__imports::native_disable_region_vfx(p0)
}
pub fn get_aspect_ratio(b: bool) -> altv_wasm_shared::natives_result::ResultOfGetAspectRatio {
    crate::__imports::native_get_aspect_ratio(b)
}
pub fn ui3dscene_push_preset(preset_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfUi3dscenePushPreset {
    crate::__imports::native_ui3dscene_push_preset(preset_name)
}
pub fn start_particle_fx_looped_on_ped_bone(effect_name: Option<&String>,
ped: u32,
x_offset: f32,
y_offset: f32,
z_offset: f32,
x_rot: f32,
y_rot: f32,
z_rot: f32,
bone_index: i32,
scale: f32,
x_axis: bool,
y_axis: bool,
z_axis: bool) -> altv_wasm_shared::natives_result::ResultOfStartParticleFxLoopedOnPedBone {
    crate::__imports::native_start_particle_fx_looped_on_ped_bone(effect_name,
ped,
x_offset,
y_offset,
z_offset,
x_rot,
y_rot,
z_rot,
bone_index,
scale,
x_axis,
y_axis,
z_axis)
}
pub fn draw_light_with_range(pos_x: f32,
pos_y: f32,
pos_z: f32,
color_r: i32,
color_g: i32,
color_b: i32,
range: f32,
intensity: f32) -> altv_wasm_shared::natives_result::ResultOfDrawLightWithRange {
    crate::__imports::native_draw_light_with_range(pos_x,
pos_y,
pos_z,
color_r,
color_g,
color_b,
range,
intensity)
}
pub fn set_arena_theme_and_variation_for_taken_photo(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetArenaThemeAndVariationForTakenPhoto {
    crate::__imports::native_set_arena_theme_and_variation_for_taken_photo(p0,
p1)
}
pub fn remove_scaleform_script_hud_movie(hud_component: i32) -> altv_wasm_shared::natives_result::ResultOfRemoveScaleformScriptHudMovie {
    crate::__imports::native_remove_scaleform_script_hud_movie(hud_component)
}
pub fn draw_light_with_rangeex(x: f32,
y: f32,
z: f32,
r: i32,
g: i32,
b: i32,
range: f32,
intensity: f32,
shadow: f32) -> altv_wasm_shared::natives_result::ResultOfDrawLightWithRangeex {
    crate::__imports::native_draw_light_with_rangeex(x,
y,
z,
r,
g,
b,
range,
intensity,
shadow)
}
pub fn set_checkpoint_clipplane_with_pos_norm(checkpoint: i32,
pos_x: f32,
pos_y: f32,
pos_z: f32,
unk_x: f32,
unk_y: f32,
unk_z: f32) -> altv_wasm_shared::natives_result::ResultOfSetCheckpointClipplaneWithPosNorm {
    crate::__imports::native_set_checkpoint_clipplane_with_pos_norm(checkpoint,
pos_x,
pos_y,
pos_z,
unk_x,
unk_y,
unk_z)
}
pub fn start_networked_particle_fx_non_looped_at_coord(effect_name: Option<&String>,
x_pos: f32,
y_pos: f32,
z_pos: f32,
x_rot: f32,
y_rot: f32,
z_rot: f32,
scale: f32,
x_axis: bool,
y_axis: bool,
z_axis: bool,
p11: bool) -> altv_wasm_shared::natives_result::ResultOfStartNetworkedParticleFxNonLoopedAtCoord {
    crate::__imports::native_start_networked_particle_fx_non_looped_at_coord(effect_name,
x_pos,
y_pos,
z_pos,
x_rot,
y_rot,
z_rot,
scale,
x_axis,
y_axis,
z_axis,
p11)
}
pub fn set_script_gfx_align_params(x: f32,
y: f32,
w: f32,
h: f32) -> altv_wasm_shared::natives_result::ResultOfSetScriptGfxAlignParams {
    crate::__imports::native_set_script_gfx_align_params(x,
y,
w,
h)
}
pub fn get_status_of_sorted_list_operation(p0: i32) -> altv_wasm_shared::natives_result::ResultOfGetStatusOfSortedListOperation {
    crate::__imports::native_get_status_of_sorted_list_operation(p0)
}
pub fn delete_checkpoint(checkpoint: i32) -> altv_wasm_shared::natives_result::ResultOfDeleteCheckpoint {
    crate::__imports::native_delete_checkpoint(checkpoint)
}
pub fn begin_scaleform_movie_method(scaleform: i32,
method_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfBeginScaleformMovieMethod {
    crate::__imports::native_begin_scaleform_movie_method(scaleform,
method_name)
}
pub fn set_weather_ptfx_override_curr_level(p0: f32) -> altv_wasm_shared::natives_result::ResultOfSetWeatherPtfxOverrideCurrLevel {
    crate::__imports::native_set_weather_ptfx_override_curr_level(p0)
}
pub fn set_tv_channel_playlist(tv_channel: i32,
playlist_name: Option<&String>,
restart: bool) -> altv_wasm_shared::natives_result::ResultOfSetTvChannelPlaylist {
    crate::__imports::native_set_tv_channel_playlist(tv_channel,
playlist_name,
restart)
}
pub fn set_particle_fx_looped_offsets(ptfx_handle: i32,
x: f32,
y: f32,
z: f32,
rot_x: f32,
rot_y: f32,
rot_z: f32) -> altv_wasm_shared::natives_result::ResultOfSetParticleFxLoopedOffsets {
    crate::__imports::native_set_particle_fx_looped_offsets(ptfx_handle,
x,
y,
z,
rot_x,
rot_y,
rot_z)
}
pub fn set_bink_movie_audio_frontend(bink_movie: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetBinkMovieAudioFrontend {
    crate::__imports::native_set_bink_movie_audio_frontend(bink_movie,
p1)
}
pub fn call_scaleform_movie_method(scaleform: i32,
method: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfCallScaleformMovieMethod {
    crate::__imports::native_call_scaleform_movie_method(scaleform,
method)
}
pub fn get_tv_channel() -> altv_wasm_shared::natives_result::ResultOfGetTvChannel {
    crate::__imports::native_get_tv_channel()
}
pub fn set_checkpoint_force_old_arrow_pointing(checkpoint: i32) -> altv_wasm_shared::natives_result::ResultOfSetCheckpointForceOldArrowPointing {
    crate::__imports::native_set_checkpoint_force_old_arrow_pointing(checkpoint)
}
pub fn draw_tv_channel(x_pos: f32,
y_pos: f32,
x_scale: f32,
y_scale: f32,
rotation: f32,
red: i32,
green: i32,
blue: i32,
alpha: i32) -> altv_wasm_shared::natives_result::ResultOfDrawTvChannel {
    crate::__imports::native_draw_tv_channel(x_pos,
y_pos,
x_scale,
y_scale,
rotation,
red,
green,
blue,
alpha)
}
pub fn get_timecycle_modifier_index() -> altv_wasm_shared::natives_result::ResultOfGetTimecycleModifierIndex {
    crate::__imports::native_get_timecycle_modifier_index()
}
pub fn get_vehicle_crew_emblem_request_state(vehicle: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleCrewEmblemRequestState {
    crate::__imports::native_get_vehicle_crew_emblem_request_state(vehicle,
p1)
}
pub fn seethrough_set_noise_max(amount: f32) -> altv_wasm_shared::natives_result::ResultOfSeethroughSetNoiseMax {
    crate::__imports::native_seethrough_set_noise_max(amount)
}
pub fn clear_draw_origin() -> altv_wasm_shared::natives_result::ResultOfClearDrawOrigin {
    crate::__imports::native_clear_draw_origin()
}
pub fn seethrough_set_noise_min(amount: f32) -> altv_wasm_shared::natives_result::ResultOfSeethroughSetNoiseMin {
    crate::__imports::native_seethrough_set_noise_min(amount)
}
pub fn get_blip_rotation(blip: i32) -> altv_wasm_shared::natives_result::ResultOfGetBlipRotation {
    crate::__imports::native_get_blip_rotation(blip)
}
pub fn get_current_webpage_id() -> altv_wasm_shared::natives_result::ResultOfGetCurrentWebpageId {
    crate::__imports::native_get_current_webpage_id()
}
pub fn has_additional_text_loaded(slot: i32) -> altv_wasm_shared::natives_result::ResultOfHasAdditionalTextLoaded {
    crate::__imports::native_has_additional_text_loaded(slot)
}
pub fn flash_ability_bar(milliseconds_to_flash: i32) -> altv_wasm_shared::natives_result::ResultOfFlashAbilityBar {
    crate::__imports::native_flash_ability_bar(milliseconds_to_flash)
}
pub fn set_text_proportional(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetTextProportional {
    crate::__imports::native_set_text_proportional(p0)
}
pub fn add_text_component_integer(value: i32) -> altv_wasm_shared::natives_result::ResultOfAddTextComponentInteger {
    crate::__imports::native_add_text_component_integer(value)
}
pub fn set_blip_colour(blip: i32,
color: i32) -> altv_wasm_shared::natives_result::ResultOfSetBlipColour {
    crate::__imports::native_set_blip_colour(blip,
color)
}
pub fn set_director_mode_available(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDirectorModeAvailable {
    crate::__imports::native_set_director_mode_available(toggle)
}
pub fn get_menu_ped_bool_stat(stat_hash: u32,
out_value: bool) -> altv_wasm_shared::natives_result::ResultOfGetMenuPedBoolStat {
    crate::__imports::native_get_menu_ped_bool_stat(stat_hash,
out_value)
}
pub fn set_max_armour_hud_display(maximum_value: i32) -> altv_wasm_shared::natives_result::ResultOfSetMaxArmourHudDisplay {
    crate::__imports::native_set_max_armour_hud_display(maximum_value)
}
pub fn change_fake_mp_cash(cash: i32,
bank: i32) -> altv_wasm_shared::natives_result::ResultOfChangeFakeMpCash {
    crate::__imports::native_change_fake_mp_cash(cash,
bank)
}
pub fn set_text_scale(scale: f32,
size: f32) -> altv_wasm_shared::natives_result::ResultOfSetTextScale {
    crate::__imports::native_set_text_scale(scale,
size)
}
pub fn set_minimap_fow_reveal_coordinate(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfSetMinimapFowRevealCoordinate {
    crate::__imports::native_set_minimap_fow_reveal_coordinate(x,
y,
z)
}
pub fn set_radar_zoom(zoom_level: i32) -> altv_wasm_shared::natives_result::ResultOfSetRadarZoom {
    crate::__imports::native_set_radar_zoom(zoom_level)
}
pub fn is_scripted_hud_component_hidden_this_frame(id: i32) -> altv_wasm_shared::natives_result::ResultOfIsScriptedHudComponentHiddenThisFrame {
    crate::__imports::native_is_scripted_hud_component_hidden_this_frame(id)
}
pub fn begin_text_command_is_this_help_message_being_displayed(label_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfBeginTextCommandIsThisHelpMessageBeingDisplayed {
    crate::__imports::native_begin_text_command_is_this_help_message_being_displayed(label_name)
}
pub fn hud_suppress_weapon_wheel_results_this_frame() -> altv_wasm_shared::natives_result::ResultOfHudSuppressWeaponWheelResultsThisFrame {
    crate::__imports::native_hud_suppress_weapon_wheel_results_this_frame()
}
pub fn show_hud_component_this_frame(id: i32) -> altv_wasm_shared::natives_result::ResultOfShowHudComponentThisFrame {
    crate::__imports::native_show_hud_component_this_frame(id)
}
pub fn set_ped_ai_blip_forced_on(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedAiBlipForcedOn {
    crate::__imports::native_set_ped_ai_blip_forced_on(ped,
toggle)
}
pub fn set_warning_message_option_items(index: i32,
name: Option<&String>,
cash: i32,
rp: i32,
lvl: i32,
colour: i32) -> altv_wasm_shared::natives_result::ResultOfSetWarningMessageOptionItems {
    crate::__imports::native_set_warning_message_option_items(index,
name,
cash,
rp,
lvl,
colour)
}
pub fn use_vehicle_targeting_reticule(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUseVehicleTargetingReticule {
    crate::__imports::native_use_vehicle_targeting_reticule(p0)
}
pub fn set_savegame_list_unique_id(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetSavegameListUniqueId {
    crate::__imports::native_set_savegame_list_unique_id(p0)
}
pub fn add_text_component_formatted_integer(value: i32,
comma_separated: bool) -> altv_wasm_shared::natives_result::ResultOfAddTextComponentFormattedInteger {
    crate::__imports::native_add_text_component_formatted_integer(value,
comma_separated)
}
pub fn restart_frontend_menu(menu_hash: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfRestartFrontendMenu {
    crate::__imports::native_restart_frontend_menu(menu_hash,
p1)
}
pub fn end_text_command_is_this_help_message_being_displayed(p0: i32) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandIsThisHelpMessageBeingDisplayed {
    crate::__imports::native_end_text_command_is_this_help_message_being_displayed(p0)
}
pub fn busyspinner_off() -> altv_wasm_shared::natives_result::ResultOfBusyspinnerOff {
    crate::__imports::native_busyspinner_off()
}
pub fn add_text_component_substring_time(timestamp: i32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfAddTextComponentSubstringTime {
    crate::__imports::native_add_text_component_substring_time(timestamp,
flags)
}
pub fn force_sonar_blips_this_frame() -> altv_wasm_shared::natives_result::ResultOfForceSonarBlipsThisFrame {
    crate::__imports::native_force_sonar_blips_this_frame()
}
pub fn is_named_rendertarget_linked(model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfIsNamedRendertargetLinked {
    crate::__imports::native_is_named_rendertarget_linked(model_hash)
}
pub fn set_text_input_box_enabled(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetTextInputBoxEnabled {
    crate::__imports::native_set_text_input_box_enabled(p0)
}
pub fn reset_reticule_values() -> altv_wasm_shared::natives_result::ResultOfResetReticuleValues {
    crate::__imports::native_reset_reticule_values()
}
pub fn lock_minimap_position(x: f32,
y: f32) -> altv_wasm_shared::natives_result::ResultOfLockMinimapPosition {
    crate::__imports::native_lock_minimap_position(x,
y)
}
pub fn set_blip_name_to_player_name(blip: i32,
player: u32) -> altv_wasm_shared::natives_result::ResultOfSetBlipNameToPlayerName {
    crate::__imports::native_set_blip_name_to_player_name(blip,
player)
}
pub fn set_blip_show_cone(blip: i32,
toggle: bool,
hud_color_index: i32) -> altv_wasm_shared::natives_result::ResultOfSetBlipShowCone {
    crate::__imports::native_set_blip_show_cone(blip,
toggle,
hud_color_index)
}
pub fn end_text_command_thefeed_post_crewtag_with_game_name(p0: bool,
p1: bool,
p2: i32,
p3: i32,
is_leader: bool,
unk0: bool,
clan_desc: i32,
player_name: Option<&String>,
r: i32,
g: i32,
b: i32) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandThefeedPostCrewtagWithGameName {
    crate::__imports::native_end_text_command_thefeed_post_crewtag_with_game_name(p0,
p1,
p2,
p3,
is_leader,
unk0,
clan_desc,
player_name,
r,
g,
b)
}
pub fn pause_menu_get_mouse_hover_unique_id() -> altv_wasm_shared::natives_result::ResultOfPauseMenuGetMouseHoverUniqueId {
    crate::__imports::native_pause_menu_get_mouse_hover_unique_id()
}
pub fn release_control_of_frontend() -> altv_wasm_shared::natives_result::ResultOfReleaseControlOfFrontend {
    crate::__imports::native_release_control_of_frontend()
}
pub fn set_blip_secondary_colour(blip: i32,
r: i32,
g: i32,
b: i32) -> altv_wasm_shared::natives_result::ResultOfSetBlipSecondaryColour {
    crate::__imports::native_set_blip_secondary_colour(blip,
r,
g,
b)
}
pub fn hud_showing_character_switch_selection(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfHudShowingCharacterSwitchSelection {
    crate::__imports::native_hud_showing_character_switch_selection(toggle)
}
pub fn get_next_blip_info_id(blip_sprite: i32) -> altv_wasm_shared::natives_result::ResultOfGetNextBlipInfoId {
    crate::__imports::native_get_next_blip_info_id(blip_sprite)
}
pub fn set_mp_gamer_tags_point_health(gamer_tag_id: i32,
value: i32,
maximum_value: i32) -> altv_wasm_shared::natives_result::ResultOfSetMpGamerTagsPointHealth {
    crate::__imports::native_set_mp_gamer_tags_point_health(gamer_tag_id,
value,
maximum_value)
}
pub fn is_radar_hidden() -> altv_wasm_shared::natives_result::ResultOfIsRadarHidden {
    crate::__imports::native_is_radar_hidden()
}
pub fn set_warning_message_with_header_and_substring_flags_extended(label_title: Option<&String>,
label_message: Option<&String>,
p2: i32,
p3: i32,
label_message2: Option<&String>,
p5: bool,
p6: i32,
p7: i32,
p8: Option<&String>,
p9: Option<&String>,
background: bool,
error_code: i32) -> altv_wasm_shared::natives_result::ResultOfSetWarningMessageWithHeaderAndSubstringFlagsExtended {
    crate::__imports::native_set_warning_message_with_header_and_substring_flags_extended(label_title,
label_message,
p2,
p3,
label_message2,
p5,
p6,
p7,
p8,
p9,
background,
error_code)
}
pub fn does_ped_have_ai_blip(ped: u32) -> altv_wasm_shared::natives_result::ResultOfDoesPedHaveAiBlip {
    crate::__imports::native_does_ped_have_ai_blip(ped)
}
pub fn thefeed_show() -> altv_wasm_shared::natives_result::ResultOfThefeedShow {
    crate::__imports::native_thefeed_show()
}
pub fn get_character_from_audio_conversation_filename(text: Option<&String>,
position: i32,
length: i32) -> altv_wasm_shared::natives_result::ResultOfGetCharacterFromAudioConversationFilename {
    crate::__imports::native_get_character_from_audio_conversation_filename(text,
position,
length)
}
pub fn set_second_script_variable_hud_colour(r: i32,
g: i32,
b: i32,
a: i32) -> altv_wasm_shared::natives_result::ResultOfSetSecondScriptVariableHudColour {
    crate::__imports::native_set_second_script_variable_hud_colour(r,
g,
b,
a)
}
pub fn use_fake_mp_cash(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfUseFakeMpCash {
    crate::__imports::native_use_fake_mp_cash(toggle)
}
pub fn add_text_component_substring_text_label_hash_key(gxt_entry_hash: u32) -> altv_wasm_shared::natives_result::ResultOfAddTextComponentSubstringTextLabelHashKey {
    crate::__imports::native_add_text_component_substring_text_label_hash_key(gxt_entry_hash)
}
pub fn thefeed_set_rgba_parameter_for_next_message(red: i32,
green: i32,
blue: i32,
alpha: i32) -> altv_wasm_shared::natives_result::ResultOfThefeedSetRgbaParameterForNextMessage {
    crate::__imports::native_thefeed_set_rgba_parameter_for_next_message(red,
green,
blue,
alpha)
}
pub fn thefeed_set_flash_duration_parameter_for_next_message(count: i32) -> altv_wasm_shared::natives_result::ResultOfThefeedSetFlashDurationParameterForNextMessage {
    crate::__imports::native_thefeed_set_flash_duration_parameter_for_next_message(count)
}
pub fn get_waypoint_blip_enum_id() -> altv_wasm_shared::natives_result::ResultOfGetWaypointBlipEnumId {
    crate::__imports::native_get_waypoint_blip_enum_id()
}
pub fn is_hud_preference_switched_on() -> altv_wasm_shared::natives_result::ResultOfIsHudPreferenceSwitchedOn {
    crate::__imports::native_is_hud_preference_switched_on()
}
pub fn show_for_sale_icon_on_blip(blip: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfShowForSaleIconOnBlip {
    crate::__imports::native_show_for_sale_icon_on_blip(blip,
toggle)
}
pub fn set_minimap_in_spectator_mode(toggle: bool,
ped: u32) -> altv_wasm_shared::natives_result::ResultOfSetMinimapInSpectatorMode {
    crate::__imports::native_set_minimap_in_spectator_mode(toggle,
ped)
}
pub fn get_named_rendertarget_render_id(name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetNamedRendertargetRenderId {
    crate::__imports::native_get_named_rendertarget_render_id(name)
}
pub fn close_mp_text_chat() -> altv_wasm_shared::natives_result::ResultOfCloseMpTextChat {
    crate::__imports::native_close_mp_text_chat()
}
pub fn get_first_blip_info_id(blip_sprite: i32) -> altv_wasm_shared::natives_result::ResultOfGetFirstBlipInfoId {
    crate::__imports::native_get_first_blip_info_id(blip_sprite)
}
pub fn is_pause_menu_restarting() -> altv_wasm_shared::natives_result::ResultOfIsPauseMenuRestarting {
    crate::__imports::native_is_pause_menu_restarting()
}
pub fn does_text_block_exist(gxt: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDoesTextBlockExist {
    crate::__imports::native_does_text_block_exist(gxt)
}
pub fn set_text_drop_shadow() -> altv_wasm_shared::natives_result::ResultOfSetTextDropShadow {
    crate::__imports::native_set_text_drop_shadow()
}
pub fn replace_hud_colour(hud_color_index: i32,
hud_color_index2: i32) -> altv_wasm_shared::natives_result::ResultOfReplaceHudColour {
    crate::__imports::native_replace_hud_colour(hud_color_index,
hud_color_index2)
}
pub fn end_text_command_thefeed_post_messagetext(txd_name: Option<&String>,
texture_name: Option<&String>,
flash: bool,
icon_type: i32,
sender: Option<&String>,
subject: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandThefeedPostMessagetext {
    crate::__imports::native_end_text_command_thefeed_post_messagetext(txd_name,
texture_name,
flash,
icon_type,
sender,
subject)
}
pub fn mp_text_chat_disable(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfMpTextChatDisable {
    crate::__imports::native_mp_text_chat_disable(toggle)
}
pub fn is_waypoint_active() -> altv_wasm_shared::natives_result::ResultOfIsWaypointActive {
    crate::__imports::native_is_waypoint_active()
}
pub fn set_ability_bar_visibility(visible: bool) -> altv_wasm_shared::natives_result::ResultOfSetAbilityBarVisibility {
    crate::__imports::native_set_ability_bar_visibility(visible)
}
pub fn get_blip_info_id_display(blip: i32) -> altv_wasm_shared::natives_result::ResultOfGetBlipInfoIdDisplay {
    crate::__imports::native_get_blip_info_id_display(blip)
}
pub fn end_text_command_thefeed_post_messagetext_tu(txd_name: Option<&String>,
texture_name: Option<&String>,
flash: bool,
icon_type: i32,
sender: Option<&String>,
subject: Option<&String>,
duration: f32) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandThefeedPostMessagetextTu {
    crate::__imports::native_end_text_command_thefeed_post_messagetext_tu(txd_name,
texture_name,
flash,
icon_type,
sender,
subject,
duration)
}
pub fn set_race_track_render(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetRaceTrackRender {
    crate::__imports::native_set_race_track_render(toggle)
}
pub fn custom_minimap_set_blip_object(sprite_id: i32) -> altv_wasm_shared::natives_result::ResultOfCustomMinimapSetBlipObject {
    crate::__imports::native_custom_minimap_set_blip_object(sprite_id)
}
pub fn get_blip_sprite(blip: i32) -> altv_wasm_shared::natives_result::ResultOfGetBlipSprite {
    crate::__imports::native_get_blip_sprite(blip)
}
pub fn begin_text_command_thefeed_post(text: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfBeginTextCommandThefeedPost {
    crate::__imports::native_begin_text_command_thefeed_post(text)
}
pub fn hide_minimap_interior_map_this_frame() -> altv_wasm_shared::natives_result::ResultOfHideMinimapInteriorMapThisFrame {
    crate::__imports::native_hide_minimap_interior_map_this_frame()
}
pub fn draw_frontend_background_this_frame() -> altv_wasm_shared::natives_result::ResultOfDrawFrontendBackgroundThisFrame {
    crate::__imports::native_draw_frontend_background_this_frame()
}
pub fn has_script_hidden_help_this_frame() -> altv_wasm_shared::natives_result::ResultOfHasScriptHiddenHelpThisFrame {
    crate::__imports::native_has_script_hidden_help_this_frame()
}
pub fn force_scripted_gfx_when_frontend_active(p0: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfForceScriptedGfxWhenFrontendActive {
    crate::__imports::native_force_scripted_gfx_when_frontend_active(p0)
}
pub fn clear_gps_flags() -> altv_wasm_shared::natives_result::ResultOfClearGpsFlags {
    crate::__imports::native_clear_gps_flags()
}
pub fn get_hud_component_position(id: i32) -> altv_wasm_shared::natives_result::ResultOfGetHudComponentPosition {
    crate::__imports::native_get_hud_component_position(id)
}
pub fn get_current_frontend_menu_version() -> altv_wasm_shared::natives_result::ResultOfGetCurrentFrontendMenuVersion {
    crate::__imports::native_get_current_frontend_menu_version()
}
pub fn set_bigmap_active(toggle_big_map: bool,
show_full_map: bool) -> altv_wasm_shared::natives_result::ResultOfSetBigmapActive {
    crate::__imports::native_set_bigmap_active(toggle_big_map,
show_full_map)
}
pub fn set_blip_category(blip: i32,
index: i32) -> altv_wasm_shared::natives_result::ResultOfSetBlipCategory {
    crate::__imports::native_set_blip_category(blip,
index)
}
pub fn end_text_command_display_help(p0: i32,
r#loop: bool,
beep: bool,
shape: i32) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandDisplayHelp {
    crate::__imports::native_end_text_command_display_help(p0,
r#loop,
beep,
shape)
}
pub fn show_friend_indicator_on_blip(blip: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfShowFriendIndicatorOnBlip {
    crate::__imports::native_show_friend_indicator_on_blip(blip,
toggle)
}
pub fn begin_text_command_add_directly_to_previous_briefs(p0: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfBeginTextCommandAddDirectlyToPreviousBriefs {
    crate::__imports::native_begin_text_command_add_directly_to_previous_briefs(p0)
}
pub fn is_floating_help_text_on_screen(hud_index: i32) -> altv_wasm_shared::natives_result::ResultOfIsFloatingHelpTextOnScreen {
    crate::__imports::native_is_floating_help_text_on_screen(hud_index)
}
pub fn hide_hudmarkers_this_frame() -> altv_wasm_shared::natives_result::ResultOfHideHudmarkersThisFrame {
    crate::__imports::native_hide_hudmarkers_this_frame()
}
pub fn get_character_menu_ped_masked_int_stat(stat_hash: u32,
out_value: shared::MemoryBufferId,
p2: i32,
mask: i32,
p4: bool) -> altv_wasm_shared::natives_result::ResultOfGetCharacterMenuPedMaskedIntStat {
    crate::__imports::native_get_character_menu_ped_masked_int_stat(stat_hash,
out_value,
p2,
mask,
p4)
}
pub fn set_blip_as_mission_creator_blip(blip: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetBlipAsMissionCreatorBlip {
    crate::__imports::native_set_blip_as_mission_creator_blip(blip,
toggle)
}
pub fn set_text_outline() -> altv_wasm_shared::natives_result::ResultOfSetTextOutline {
    crate::__imports::native_set_text_outline()
}
pub fn set_radius_blip_edge(blip: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetRadiusBlipEdge {
    crate::__imports::native_set_radius_blip_edge(blip,
toggle)
}
pub fn thefeed_hide_this_frame() -> altv_wasm_shared::natives_result::ResultOfThefeedHideThisFrame {
    crate::__imports::native_thefeed_hide_this_frame()
}
pub fn begin_text_command_display_text(text: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfBeginTextCommandDisplayText {
    crate::__imports::native_begin_text_command_display_text(text)
}
pub fn set_director_mode_launched_by_script() -> altv_wasm_shared::natives_result::ResultOfSetDirectorModeLaunchedByScript {
    crate::__imports::native_set_director_mode_launched_by_script()
}
pub fn is_mission_creator_blip(blip: i32) -> altv_wasm_shared::natives_result::ResultOfIsMissionCreatorBlip {
    crate::__imports::native_is_mission_creator_blip(blip)
}
pub fn custom_minimap_clear_blips() -> altv_wasm_shared::natives_result::ResultOfCustomMinimapClearBlips {
    crate::__imports::native_custom_minimap_clear_blips()
}
pub fn get_pause_menu_state() -> altv_wasm_shared::natives_result::ResultOfGetPauseMenuState {
    crate::__imports::native_get_pause_menu_state()
}
pub fn display_area_name(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfDisplayAreaName {
    crate::__imports::native_display_area_name(toggle)
}
pub fn set_force_show_gps(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetForceShowGps {
    crate::__imports::native_set_force_show_gps(toggle)
}
pub fn reload_map_menu() -> altv_wasm_shared::natives_result::ResultOfReloadMapMenu {
    crate::__imports::native_reload_map_menu()
}
pub fn lock_minimap_angle(angle: i32) -> altv_wasm_shared::natives_result::ResultOfLockMinimapAngle {
    crate::__imports::native_lock_minimap_angle(angle)
}
pub fn clear_additional_text(p0: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfClearAdditionalText {
    crate::__imports::native_clear_additional_text(p0,
p1)
}
pub fn pause_menu_is_context_menu_active() -> altv_wasm_shared::natives_result::ResultOfPauseMenuIsContextMenuActive {
    crate::__imports::native_pause_menu_is_context_menu_active()
}
pub fn set_custom_mp_hud_color(hud_color_id: i32) -> altv_wasm_shared::natives_result::ResultOfSetCustomMpHudColor {
    crate::__imports::native_set_custom_mp_hud_color(hud_color_id)
}
pub fn set_blip_fade(blip: i32,
opacity: i32,
duration: i32) -> altv_wasm_shared::natives_result::ResultOfSetBlipFade {
    crate::__imports::native_set_blip_fade(blip,
opacity,
duration)
}
pub fn set_blip_as_minimal_on_edge(blip: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetBlipAsMinimalOnEdge {
    crate::__imports::native_set_blip_as_minimal_on_edge(blip,
toggle)
}
pub fn end_text_command_thefeed_post_stats(stat_title: Option<&String>,
icon_enum: i32,
step_val: bool,
bar_value: i32,
is_important: bool,
picture_texture_dict: Option<&String>,
picture_texture_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandThefeedPostStats {
    crate::__imports::native_end_text_command_thefeed_post_stats(stat_title,
icon_enum,
step_val,
bar_value,
is_important,
picture_texture_dict,
picture_texture_name)
}
pub fn get_blip_fade_direction(blip: i32) -> altv_wasm_shared::natives_result::ResultOfGetBlipFadeDirection {
    crate::__imports::native_get_blip_fade_direction(blip)
}
pub fn set_blip_use_height_indicator_on_edge(blip: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetBlipUseHeightIndicatorOnEdge {
    crate::__imports::native_set_blip_use_height_indicator_on_edge(blip,
p1)
}
pub fn clear_small_prints() -> altv_wasm_shared::natives_result::ResultOfClearSmallPrints {
    crate::__imports::native_clear_small_prints()
}
pub fn pause_toggle_fullscreen_map(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPauseToggleFullscreenMap {
    crate::__imports::native_pause_toggle_fullscreen_map(p0)
}
pub fn has_menu_layout_changed_event_occurred() -> altv_wasm_shared::natives_result::ResultOfHasMenuLayoutChangedEventOccurred {
    crate::__imports::native_has_menu_layout_changed_event_occurred()
}
pub fn set_blip_flashes_alternate(blip: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetBlipFlashesAlternate {
    crate::__imports::native_set_blip_flashes_alternate(blip,
toggle)
}
pub fn end_text_command_thefeed_post_ticker(blink: bool,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandThefeedPostTicker {
    crate::__imports::native_end_text_command_thefeed_post_ticker(blink,
p1)
}
pub fn is_store_pending_network_shutdown_to_open() -> altv_wasm_shared::natives_result::ResultOfIsStorePendingNetworkShutdownToOpen {
    crate::__imports::native_is_store_pending_network_shutdown_to_open()
}
pub fn add_point_to_gps_custom_route(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfAddPointToGpsCustomRoute {
    crate::__imports::native_add_point_to_gps_custom_route(x,
y,
z)
}
pub fn set_mp_gamer_tag_health_bar_colour(gamer_tag_id: i32,
hud_color_index: i32) -> altv_wasm_shared::natives_result::ResultOfSetMpGamerTagHealthBarColour {
    crate::__imports::native_set_mp_gamer_tag_health_bar_colour(gamer_tag_id,
hud_color_index)
}
pub fn remove_mp_gamer_tag(gamer_tag_id: i32) -> altv_wasm_shared::natives_result::ResultOfRemoveMpGamerTag {
    crate::__imports::native_remove_mp_gamer_tag(gamer_tag_id)
}
pub fn thefeed_update_item_texture(txd_string1: Option<&String>,
txn_string1: Option<&String>,
txd_string2: Option<&String>,
txn_string2: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfThefeedUpdateItemTexture {
    crate::__imports::native_thefeed_update_item_texture(txd_string1,
txn_string1,
txd_string2,
txn_string2)
}
pub fn set_gps_flashes(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetGpsFlashes {
    crate::__imports::native_set_gps_flashes(toggle)
}
pub fn is_help_message_fading_out() -> altv_wasm_shared::natives_result::ResultOfIsHelpMessageFadingOut {
    crate::__imports::native_is_help_message_fading_out()
}
pub fn thefeed_hide() -> altv_wasm_shared::natives_result::ResultOfThefeedHide {
    crate::__imports::native_thefeed_hide()
}
pub fn end_text_command_thefeed_post_unlock(gxt_label1: Option<&String>,
p1: i32,
gxt_label2: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandThefeedPostUnlock {
    crate::__imports::native_end_text_command_thefeed_post_unlock(gxt_label1,
p1,
gxt_label2)
}
pub fn pause_menu_get_mouse_hover_index() -> altv_wasm_shared::natives_result::ResultOfPauseMenuGetMouseHoverIndex {
    crate::__imports::native_pause_menu_get_mouse_hover_index()
}
pub fn remove_fake_cone_data(blip: i32) -> altv_wasm_shared::natives_result::ResultOfRemoveFakeConeData {
    crate::__imports::native_remove_fake_cone_data(blip)
}
pub fn set_minimap_golf_course_off() -> altv_wasm_shared::natives_result::ResultOfSetMinimapGolfCourseOff {
    crate::__imports::native_set_minimap_golf_course_off()
}
pub fn get_menu_trigger_event_details(last_item_menu_id: i32,
selected_item_unique_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetMenuTriggerEventDetails {
    crate::__imports::native_get_menu_trigger_event_details(last_item_menu_id,
selected_item_unique_id)
}
pub fn end_text_command_thefeed_post_ticker_with_tokens(blink: bool,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandThefeedPostTickerWithTokens {
    crate::__imports::native_end_text_command_thefeed_post_ticker_with_tokens(blink,
p1)
}
pub fn set_warning_message_with_header_extended(entry_header: Option<&String>,
entry_line1: Option<&String>,
flags: i32,
entry_line2: Option<&String>,
p4: bool,
p5: i32,
p6: shared::MemoryBufferId,
p7: shared::MemoryBufferId,
show_bg: bool,
p9: i32,
p10: i32) -> altv_wasm_shared::natives_result::ResultOfSetWarningMessageWithHeaderExtended {
    crate::__imports::native_set_warning_message_with_header_extended(entry_header,
entry_line1,
flags,
entry_line2,
p4,
p5,
p6,
p7,
show_bg,
p9,
p10)
}
pub fn set_colour_of_next_text_component(hud_color: i32) -> altv_wasm_shared::natives_result::ResultOfSetColourOfNextTextComponent {
    crate::__imports::native_set_colour_of_next_text_component(hud_color)
}
pub fn is_frontend_ready_for_control() -> altv_wasm_shared::natives_result::ResultOfIsFrontendReadyForControl {
    crate::__imports::native_is_frontend_ready_for_control()
}
pub fn set_pause_menu_ped_lighting(state: bool) -> altv_wasm_shared::natives_result::ResultOfSetPauseMenuPedLighting {
    crate::__imports::native_set_pause_menu_ped_lighting(state)
}
pub fn start_gps_multi_route(hud_color: i32,
route_from_player: bool,
display_on_foot: bool) -> altv_wasm_shared::natives_result::ResultOfStartGpsMultiRoute {
    crate::__imports::native_start_gps_multi_route(hud_color,
route_from_player,
display_on_foot)
}
pub fn is_mouse_rolled_over_instructional_buttons() -> altv_wasm_shared::natives_result::ResultOfIsMouseRolledOverInstructionalButtons {
    crate::__imports::native_is_mouse_rolled_over_instructional_buttons()
}
pub fn set_gps_multi_route_render(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetGpsMultiRouteRender {
    crate::__imports::native_set_gps_multi_route_render(toggle)
}
pub fn unlock_minimap_position() -> altv_wasm_shared::natives_result::ResultOfUnlockMinimapPosition {
    crate::__imports::native_unlock_minimap_position()
}
pub fn set_ped_ai_blip_has_cone(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedAiBlipHasCone {
    crate::__imports::native_set_ped_ai_blip_has_cone(ped,
toggle)
}
pub fn get_north_blid_index() -> altv_wasm_shared::natives_result::ResultOfGetNorthBlidIndex {
    crate::__imports::native_get_north_blid_index()
}
pub fn set_health_hud_display_values(health: i32,
capacity: i32,
was_added: bool) -> altv_wasm_shared::natives_result::ResultOfSetHealthHudDisplayValues {
    crate::__imports::native_set_health_hud_display_values(health,
capacity,
was_added)
}
pub fn display_hud_when_paused_this_frame() -> altv_wasm_shared::natives_result::ResultOfDisplayHudWhenPausedThisFrame {
    crate::__imports::native_display_hud_when_paused_this_frame()
}
pub fn set_pm_warningscreen_active(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetPmWarningscreenActive {
    crate::__imports::native_set_pm_warningscreen_active(p0)
}
pub fn is_hovering_over_mission_creator_blip() -> altv_wasm_shared::natives_result::ResultOfIsHoveringOverMissionCreatorBlip {
    crate::__imports::native_is_hovering_over_mission_creator_blip()
}
pub fn get_length_of_literal_string_in_bytes(string: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetLengthOfLiteralStringInBytes {
    crate::__imports::native_get_length_of_literal_string_in_bytes(string)
}
pub fn set_text_edge(p0: i32,
r: i32,
g: i32,
b: i32,
a: i32) -> altv_wasm_shared::natives_result::ResultOfSetTextEdge {
    crate::__imports::native_set_text_edge(p0,
r,
g,
b,
a)
}
pub fn pause_menu_deactivate_context(context_hash: u32) -> altv_wasm_shared::natives_result::ResultOfPauseMenuDeactivateContext {
    crate::__imports::native_pause_menu_deactivate_context(context_hash)
}
pub fn end_text_command_thefeed_post_ticker_forced(blink: bool,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandThefeedPostTickerForced {
    crate::__imports::native_end_text_command_thefeed_post_ticker_forced(blink,
p1)
}
pub fn reset_hud_component_values(id: i32) -> altv_wasm_shared::natives_result::ResultOfResetHudComponentValues {
    crate::__imports::native_reset_hud_component_values(id)
}
pub fn set_blip_alpha(blip: i32,
alpha: i32) -> altv_wasm_shared::natives_result::ResultOfSetBlipAlpha {
    crate::__imports::native_set_blip_alpha(blip,
alpha)
}
pub fn set_text_dropshadow(distance: i32,
r: i32,
g: i32,
b: i32,
a: i32) -> altv_wasm_shared::natives_result::ResultOfSetTextDropshadow {
    crate::__imports::native_set_text_dropshadow(distance,
r,
g,
b,
a)
}
pub fn add_blip_for_radius(pos_x: f32,
pos_y: f32,
pos_z: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfAddBlipForRadius {
    crate::__imports::native_add_blip_for_radius(pos_x,
pos_y,
pos_z,
radius)
}
pub fn hud_force_special_vehicle_weapon_wheel() -> altv_wasm_shared::natives_result::ResultOfHudForceSpecialVehicleWeaponWheel {
    crate::__imports::native_hud_force_special_vehicle_weapon_wheel()
}
pub fn pause_menu_redraw_instructional_buttons(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPauseMenuRedrawInstructionalButtons {
    crate::__imports::native_pause_menu_redraw_instructional_buttons(p0)
}
pub fn thefeed_set_vibrate_parameter_for_next_message(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfThefeedSetVibrateParameterForNextMessage {
    crate::__imports::native_thefeed_set_vibrate_parameter_for_next_message(toggle)
}
pub fn get_standard_blip_enum_id() -> altv_wasm_shared::natives_result::ResultOfGetStandardBlipEnumId {
    crate::__imports::native_get_standard_blip_enum_id()
}
pub fn hide_loading_on_fade_this_frame() -> altv_wasm_shared::natives_result::ResultOfHideLoadingOnFadeThisFrame {
    crate::__imports::native_hide_loading_on_fade_this_frame()
}
pub fn set_blip_short_height_threshold(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetBlipShortHeightThreshold {
    crate::__imports::native_set_blip_short_height_threshold(p0,
p1)
}
pub fn get_blip_info_id_entity_index(blip: i32) -> altv_wasm_shared::natives_result::ResultOfGetBlipInfoIdEntityIndex {
    crate::__imports::native_get_blip_info_id_entity_index(blip)
}
pub fn is_help_message_being_displayed() -> altv_wasm_shared::natives_result::ResultOfIsHelpMessageBeingDisplayed {
    crate::__imports::native_is_help_message_being_displayed()
}
pub fn set_text_justification(justify_type: i32) -> altv_wasm_shared::natives_result::ResultOfSetTextJustification {
    crate::__imports::native_set_text_justification(justify_type)
}
pub fn is_navigating_menu_content() -> altv_wasm_shared::natives_result::ResultOfIsNavigatingMenuContent {
    crate::__imports::native_is_navigating_menu_content()
}
pub fn is_mp_gamer_tag_active(gamer_tag_id: i32) -> altv_wasm_shared::natives_result::ResultOfIsMpGamerTagActive {
    crate::__imports::native_is_mp_gamer_tag_active(gamer_tag_id)
}
pub fn show_scripted_hud_component_this_frame(id: i32) -> altv_wasm_shared::natives_result::ResultOfShowScriptedHudComponentThisFrame {
    crate::__imports::native_show_scripted_hud_component_this_frame(id)
}
pub fn set_blip_route(blip: i32,
enabled: bool) -> altv_wasm_shared::natives_result::ResultOfSetBlipRoute {
    crate::__imports::native_set_blip_route(blip,
enabled)
}
pub fn clear_floating_help(hud_index: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfClearFloatingHelp {
    crate::__imports::native_clear_floating_help(hud_index,
p1)
}
pub fn set_inside_very_small_interior(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetInsideVerySmallInterior {
    crate::__imports::native_set_inside_very_small_interior(toggle)
}
pub fn begin_text_command_get_number_of_lines_for_string(entry: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfBeginTextCommandGetNumberOfLinesForString {
    crate::__imports::native_begin_text_command_get_number_of_lines_for_string(entry)
}
pub fn open_reportugc_menu() -> altv_wasm_shared::natives_result::ResultOfOpenReportugcMenu {
    crate::__imports::native_open_reportugc_menu()
}
pub fn get_default_script_rendertarget_render_id() -> altv_wasm_shared::natives_result::ResultOfGetDefaultScriptRendertargetRenderId {
    crate::__imports::native_get_default_script_rendertarget_render_id()
}
pub fn end_text_command_thefeed_post_messagetext_with_crew_tag_and_additional_icon(txd_name: Option<&String>,
texture_name: Option<&String>,
flash: bool,
icon_type1: i32,
sender: Option<&String>,
subject: Option<&String>,
duration: f32,
clan_tag: Option<&String>,
icon_type2: i32,
p9: i32) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon {
    crate::__imports::native_end_text_command_thefeed_post_messagetext_with_crew_tag_and_additional_icon(txd_name,
texture_name,
flash,
icon_type1,
sender,
subject,
duration,
clan_tag,
icon_type2,
p9)
}
pub fn hide_number_on_blip(blip: i32) -> altv_wasm_shared::natives_result::ResultOfHideNumberOnBlip {
    crate::__imports::native_hide_number_on_blip(blip)
}
pub fn custom_minimap_set_active(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfCustomMinimapSetActive {
    crate::__imports::native_custom_minimap_set_active(toggle)
}
pub fn set_blip_hidden_on_legend(blip: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetBlipHiddenOnLegend {
    crate::__imports::native_set_blip_hidden_on_legend(blip,
toggle)
}
pub fn begin_text_command_get_screen_width_of_display_text(text: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfBeginTextCommandGetScreenWidthOfDisplayText {
    crate::__imports::native_begin_text_command_get_screen_width_of_display_text(text)
}
pub fn custom_minimap_create_blip(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfCustomMinimapCreateBlip {
    crate::__imports::native_custom_minimap_create_blip(x,
y,
z)
}
pub fn thefeed_set_scripted_menu_height(pos: f32) -> altv_wasm_shared::natives_result::ResultOfThefeedSetScriptedMenuHeight {
    crate::__imports::native_thefeed_set_scripted_menu_height(pos)
}
pub fn dont_zoom_minimap_when_sniping_this_frame() -> altv_wasm_shared::natives_result::ResultOfDontZoomMinimapWhenSnipingThisFrame {
    crate::__imports::native_dont_zoom_minimap_when_sniping_this_frame()
}
pub fn get_ai_ped_vehicle_blip_index(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetAiPedVehicleBlipIndex {
    crate::__imports::native_get_ai_ped_vehicle_blip_index(ped)
}
pub fn thefeed_auto_post_gametips_on() -> altv_wasm_shared::natives_result::ResultOfThefeedAutoPostGametipsOn {
    crate::__imports::native_thefeed_auto_post_gametips_on()
}
pub fn set_allow_comma_on_text_input(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetAllowCommaOnTextInput {
    crate::__imports::native_set_allow_comma_on_text_input(p0)
}
pub fn force_next_message_to_previous_briefs_list(p0: i32) -> altv_wasm_shared::natives_result::ResultOfForceNextMessageToPreviousBriefsList {
    crate::__imports::native_force_next_message_to_previous_briefs_list(p0)
}
pub fn register_named_rendertarget(name: Option<&String>,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfRegisterNamedRendertarget {
    crate::__imports::native_register_named_rendertarget(name,
p1)
}
pub fn thefeed_force_render_off() -> altv_wasm_shared::natives_result::ResultOfThefeedForceRenderOff {
    crate::__imports::native_thefeed_force_render_off()
}
pub fn get_blip_coords(blip: i32) -> altv_wasm_shared::natives_result::ResultOfGetBlipCoords {
    crate::__imports::native_get_blip_coords(blip)
}
pub fn set_minimap_block_waypoint(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetMinimapBlockWaypoint {
    crate::__imports::native_set_minimap_block_waypoint(toggle)
}
pub fn get_screen_code_wants_script_to_control() -> altv_wasm_shared::natives_result::ResultOfGetScreenCodeWantsScriptToControl {
    crate::__imports::native_get_screen_code_wants_script_to_control()
}
pub fn is_mp_gamer_tag_free(gamer_tag_id: i32) -> altv_wasm_shared::natives_result::ResultOfIsMpGamerTagFree {
    crate::__imports::native_is_mp_gamer_tag_free(gamer_tag_id)
}
pub fn set_radar_as_interior_this_frame(interior: u32,
x: f32,
y: f32,
z: i32,
zoom: i32) -> altv_wasm_shared::natives_result::ResultOfSetRadarAsInteriorThisFrame {
    crate::__imports::native_set_radar_as_interior_this_frame(interior,
x,
y,
z,
zoom)
}
pub fn add_blip_for_coord(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfAddBlipForCoord {
    crate::__imports::native_add_blip_for_coord(x,
y,
z)
}
pub fn set_gps_flags(p0: i32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetGpsFlags {
    crate::__imports::native_set_gps_flags(p0,
p1)
}
pub fn get_pause_menu_position() -> altv_wasm_shared::natives_result::ResultOfGetPauseMenuPosition {
    crate::__imports::native_get_pause_menu_position()
}
pub fn get_new_selected_mission_creator_blip() -> altv_wasm_shared::natives_result::ResultOfGetNewSelectedMissionCreatorBlip {
    crate::__imports::native_get_new_selected_mission_creator_blip()
}
pub fn end_text_command_thefeed_post_messagetext_with_crew_tag(txd_name: Option<&String>,
texture_name: Option<&String>,
flash: bool,
icon_type: i32,
sender: Option<&String>,
subject: Option<&String>,
duration: f32,
clan_tag: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandThefeedPostMessagetextWithCrewTag {
    crate::__imports::native_end_text_command_thefeed_post_messagetext_with_crew_tag(txd_name,
texture_name,
flash,
icon_type,
sender,
subject,
duration,
clan_tag)
}
pub fn add_blip_for_entity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfAddBlipForEntity {
    crate::__imports::native_add_blip_for_entity(entity)
}
pub fn set_use_island_map(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetUseIslandMap {
    crate::__imports::native_set_use_island_map(toggle)
}
pub fn clear_ped_in_pause_menu() -> altv_wasm_shared::natives_result::ResultOfClearPedInPauseMenu {
    crate::__imports::native_clear_ped_in_pause_menu()
}
pub fn set_text_render_id(render_id: i32) -> altv_wasm_shared::natives_result::ResultOfSetTextRenderId {
    crate::__imports::native_set_text_render_id(render_id)
}
pub fn set_mission_name(p0: bool,
name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetMissionName {
    crate::__imports::native_set_mission_name(p0,
name)
}
pub fn add_text_component_substring_keyboard_display(string: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAddTextComponentSubstringKeyboardDisplay {
    crate::__imports::native_add_text_component_substring_keyboard_display(string)
}
pub fn hide_minimap_exterior_map_this_frame() -> altv_wasm_shared::natives_result::ResultOfHideMinimapExteriorMapThisFrame {
    crate::__imports::native_hide_minimap_exterior_map_this_frame()
}
pub fn show_heading_indicator_on_blip(blip: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfShowHeadingIndicatorOnBlip {
    crate::__imports::native_show_heading_indicator_on_blip(blip,
toggle)
}
pub fn get_menu_ped_float_stat(stat_hash: u32,
out_value: f32) -> altv_wasm_shared::natives_result::ResultOfGetMenuPedFloatStat {
    crate::__imports::native_get_menu_ped_float_stat(stat_hash,
out_value)
}
pub fn request_additional_text_for_dlc(gxt: Option<&String>,
slot: i32) -> altv_wasm_shared::natives_result::ResultOfRequestAdditionalTextForDlc {
    crate::__imports::native_request_additional_text_for_dlc(gxt,
slot)
}
pub fn add_next_message_to_previous_briefs(p0: bool) -> altv_wasm_shared::natives_result::ResultOfAddNextMessageToPreviousBriefs {
    crate::__imports::native_add_next_message_to_previous_briefs(p0)
}
pub fn allow_sonar_blips(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfAllowSonarBlips {
    crate::__imports::native_allow_sonar_blips(toggle)
}
pub fn show_account_picker() -> altv_wasm_shared::natives_result::ResultOfShowAccountPicker {
    crate::__imports::native_show_account_picker()
}
pub fn set_mp_gamer_tag_colour(gamer_tag_id: i32,
component: i32,
hud_color_index: i32) -> altv_wasm_shared::natives_result::ResultOfSetMpGamerTagColour {
    crate::__imports::native_set_mp_gamer_tag_colour(gamer_tag_id,
component,
hud_color_index)
}
pub fn clear_all_help_messages() -> altv_wasm_shared::natives_result::ResultOfClearAllHelpMessages {
    crate::__imports::native_clear_all_help_messages()
}
pub fn set_minimap_fow_do_not_update(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetMinimapFowDoNotUpdate {
    crate::__imports::native_set_minimap_fow_do_not_update(p0)
}
pub fn set_text_wrap(start: f32,
end: f32) -> altv_wasm_shared::natives_result::ResultOfSetTextWrap {
    crate::__imports::native_set_text_wrap(start,
end)
}
pub fn get_mouse_event(scaleform_handle: i32,
p1: shared::MemoryBufferId,
p2: shared::MemoryBufferId,
p3: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetMouseEvent {
    crate::__imports::native_get_mouse_event(scaleform_handle,
p1,
p2,
p3)
}
pub fn set_mp_gamer_tag_visibility(gamer_tag_id: i32,
component: i32,
toggle: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfSetMpGamerTagVisibility {
    crate::__imports::native_set_mp_gamer_tag_visibility(gamer_tag_id,
component,
toggle,
p3)
}
pub fn set_text_font(font_type: i32) -> altv_wasm_shared::natives_result::ResultOfSetTextFont {
    crate::__imports::native_set_text_font(font_type)
}
pub fn code_wants_script_to_take_control() -> altv_wasm_shared::natives_result::ResultOfCodeWantsScriptToTakeControl {
    crate::__imports::native_code_wants_script_to_take_control()
}
pub fn clear_gps_multi_route() -> altv_wasm_shared::natives_result::ResultOfClearGpsMultiRoute {
    crate::__imports::native_clear_gps_multi_route()
}
pub fn hide_hud_component_this_frame(id: i32) -> altv_wasm_shared::natives_result::ResultOfHideHudComponentThisFrame {
    crate::__imports::native_hide_hud_component_this_frame(id)
}
pub fn override_mp_text_chat_team_string(gxt_entry_hash: u32) -> altv_wasm_shared::natives_result::ResultOfOverrideMpTextChatTeamString {
    crate::__imports::native_override_mp_text_chat_team_string(gxt_entry_hash)
}
pub fn toggle_stealth_radar(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfToggleStealthRadar {
    crate::__imports::native_toggle_stealth_radar(toggle)
}
pub fn flash_minimap_display_with_color(hud_color_index: i32) -> altv_wasm_shared::natives_result::ResultOfFlashMinimapDisplayWithColor {
    crate::__imports::native_flash_minimap_display_with_color(hud_color_index)
}
pub fn set_text_right_justify(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetTextRightJustify {
    crate::__imports::native_set_text_right_justify(toggle)
}
pub fn set_minimap_sonar_sweep(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetMinimapSonarSweep {
    crate::__imports::native_set_minimap_sonar_sweep(toggle)
}
pub fn add_text_component_substring_player_name(text: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAddTextComponentSubstringPlayerName {
    crate::__imports::native_add_text_component_substring_player_name(text)
}
pub fn set_use_set_destination_in_pause_map(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetUseSetDestinationInPauseMap {
    crate::__imports::native_set_use_set_destination_in_pause_map(toggle)
}
pub fn dont_tilt_minimap_this_frame() -> altv_wasm_shared::natives_result::ResultOfDontTiltMinimapThisFrame {
    crate::__imports::native_dont_tilt_minimap_this_frame()
}
pub fn disable_frontend_this_frame() -> altv_wasm_shared::natives_result::ResultOfDisableFrontendThisFrame {
    crate::__imports::native_disable_frontend_this_frame()
}
pub fn create_mp_gamer_tag_with_crew_color(player: u32,
username: Option<&String>,
pointed_clan_tag: bool,
is_rockstar_clan: bool,
clan_tag: Option<&String>,
clan_flag: i32,
r: i32,
g: i32,
b: i32) -> altv_wasm_shared::natives_result::ResultOfCreateMpGamerTagWithCrewColor {
    crate::__imports::native_create_mp_gamer_tag_with_crew_color(player,
username,
pointed_clan_tag,
is_rockstar_clan,
clan_tag,
clan_flag,
r,
g,
b)
}
pub fn is_mp_gamer_tag_movie_active() -> altv_wasm_shared::natives_result::ResultOfIsMpGamerTagMovieActive {
    crate::__imports::native_is_mp_gamer_tag_movie_active()
}
pub fn get_minimap_fow_coordinate_is_revealed(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfGetMinimapFowCoordinateIsRevealed {
    crate::__imports::native_get_minimap_fow_coordinate_is_revealed(x,
y,
z)
}
pub fn remove_warning_message_option_items() -> altv_wasm_shared::natives_result::ResultOfRemoveWarningMessageOptionItems {
    crate::__imports::native_remove_warning_message_option_items()
}
pub fn thefeed_only_show_tooltips(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfThefeedOnlyShowTooltips {
    crate::__imports::native_thefeed_only_show_tooltips(toggle)
}
pub fn set_blip_as_friendly(blip: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetBlipAsFriendly {
    crate::__imports::native_set_blip_as_friendly(blip,
toggle)
}
pub fn is_online_policies_menu_active() -> altv_wasm_shared::natives_result::ResultOfIsOnlinePoliciesMenuActive {
    crate::__imports::native_is_online_policies_menu_active()
}
pub fn set_warning_message_with_header_and_substring_flags(entry_header: Option<&String>,
entry_line1: Option<&String>,
instructional_key: i32,
entry_line2: Option<&String>,
p4: bool,
p5: i32,
additional_int_info: i32,
additional_text_info_line1: Option<&String>,
additional_text_info_line2: Option<&String>,
show_background: bool,
error_code: i32) -> altv_wasm_shared::natives_result::ResultOfSetWarningMessageWithHeaderAndSubstringFlags {
    crate::__imports::native_set_warning_message_with_header_and_substring_flags(entry_header,
entry_line1,
instructional_key,
entry_line2,
p4,
p5,
additional_int_info,
additional_text_info_line1,
additional_text_info_line2,
show_background,
error_code)
}
pub fn hide_hud_and_radar_this_frame() -> altv_wasm_shared::natives_result::ResultOfHideHudAndRadarThisFrame {
    crate::__imports::native_hide_hud_and_radar_this_frame()
}
pub fn request_additional_text(gxt: Option<&String>,
slot: i32) -> altv_wasm_shared::natives_result::ResultOfRequestAdditionalText {
    crate::__imports::native_request_additional_text(gxt,
slot)
}
pub fn set_minimap_golf_course(hole: i32) -> altv_wasm_shared::natives_result::ResultOfSetMinimapGolfCourse {
    crate::__imports::native_set_minimap_golf_course(hole)
}
pub fn get_blip_hud_colour(blip: i32) -> altv_wasm_shared::natives_result::ResultOfGetBlipHudColour {
    crate::__imports::native_get_blip_hud_colour(blip)
}
pub fn hud_set_weapon_wheel_top_slot(weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfHudSetWeaponWheelTopSlot {
    crate::__imports::native_hud_set_weapon_wheel_top_slot(weapon_hash)
}
pub fn trigger_sonar_blip(pos_x: f32,
pos_y: f32,
pos_z: f32,
radius: f32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfTriggerSonarBlip {
    crate::__imports::native_trigger_sonar_blip(pos_x,
pos_y,
pos_z,
radius,
p4)
}
pub fn display_sniper_scope_this_frame() -> altv_wasm_shared::natives_result::ResultOfDisplaySniperScopeThisFrame {
    crate::__imports::native_display_sniper_scope_this_frame()
}
pub fn pulse_blip(blip: i32) -> altv_wasm_shared::natives_result::ResultOfPulseBlip {
    crate::__imports::native_pulse_blip(blip)
}
pub fn show_tick_on_blip(blip: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfShowTickOnBlip {
    crate::__imports::native_show_tick_on_blip(blip,
toggle)
}
pub fn set_frontend_active(active: bool) -> altv_wasm_shared::natives_result::ResultOfSetFrontendActive {
    crate::__imports::native_set_frontend_active(active)
}
pub fn show_height_on_blip(blip: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfShowHeightOnBlip {
    crate::__imports::native_show_height_on_blip(blip,
toggle)
}
pub fn set_minimap_component(component_id: i32,
toggle: bool,
override_color: i32) -> altv_wasm_shared::natives_result::ResultOfSetMinimapComponent {
    crate::__imports::native_set_minimap_component(component_id,
toggle,
override_color)
}
pub fn open_social_club_menu() -> altv_wasm_shared::natives_result::ResultOfOpenSocialClubMenu {
    crate::__imports::native_open_social_club_menu()
}
pub fn add_text_component_substring_phone_number(p0: Option<&String>,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfAddTextComponentSubstringPhoneNumber {
    crate::__imports::native_add_text_component_substring_phone_number(p0,
p1)
}
pub fn display_hud_when_not_in_state_of_play_this_frame() -> altv_wasm_shared::natives_result::ResultOfDisplayHudWhenNotInStateOfPlayThisFrame {
    crate::__imports::native_display_hud_when_not_in_state_of_play_this_frame()
}
pub fn set_floating_help_text_screen_position(hud_index: i32,
x: f32,
y: f32) -> altv_wasm_shared::natives_result::ResultOfSetFloatingHelpTextScreenPosition {
    crate::__imports::native_set_floating_help_text_screen_position(hud_index,
x,
y)
}
pub fn clear_dynamic_pause_menu_error_message() -> altv_wasm_shared::natives_result::ResultOfClearDynamicPauseMenuErrorMessage {
    crate::__imports::native_clear_dynamic_pause_menu_error_message()
}
pub fn set_fake_pausemap_player_position_this_frame(x: f32,
y: f32) -> altv_wasm_shared::natives_result::ResultOfSetFakePausemapPlayerPositionThisFrame {
    crate::__imports::native_set_fake_pausemap_player_position_this_frame(x,
y)
}
pub fn pause_menuception_go_deeper(page: i32) -> altv_wasm_shared::natives_result::ResultOfPauseMenuceptionGoDeeper {
    crate::__imports::native_pause_menuception_go_deeper(page)
}
pub fn set_floating_help_text_world_position(hud_index: i32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfSetFloatingHelpTextWorldPosition {
    crate::__imports::native_set_floating_help_text_world_position(hud_index,
x,
y,
z)
}
pub fn set_floating_help_text_style(hud_index: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfSetFloatingHelpTextStyle {
    crate::__imports::native_set_floating_help_text_style(hud_index,
p1,
p2,
p3,
p4,
p5)
}
pub fn is_named_rendertarget_registered(name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfIsNamedRendertargetRegistered {
    crate::__imports::native_is_named_rendertarget_registered(name)
}
pub fn is_message_being_displayed() -> altv_wasm_shared::natives_result::ResultOfIsMessageBeingDisplayed {
    crate::__imports::native_is_message_being_displayed()
}
pub fn clear_gps_race_track() -> altv_wasm_shared::natives_result::ResultOfClearGpsRaceTrack {
    crate::__imports::native_clear_gps_race_track()
}
pub fn end_text_command_thefeed_post_unlock_tu_with_color(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandThefeedPostUnlockTuWithColor {
    crate::__imports::native_end_text_command_thefeed_post_unlock_tu_with_color(p0,
p1,
p2,
p3,
p4,
p5)
}
pub fn set_warning_message(title_msg: Option<&String>,
flags: i32,
prompt_msg: Option<&String>,
p3: bool,
p4: i32,
p5: Option<&String>,
p6: Option<&String>,
show_background: bool,
error_code: i32) -> altv_wasm_shared::natives_result::ResultOfSetWarningMessage {
    crate::__imports::native_set_warning_message(title_msg,
flags,
prompt_msg,
p3,
p4,
p5,
p6,
show_background,
error_code)
}
pub fn set_player_icon_colour(color: i32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerIconColour {
    crate::__imports::native_set_player_icon_colour(color)
}
pub fn get_filename_for_audio_conversation(label_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetFilenameForAudioConversation {
    crate::__imports::native_get_filename_for_audio_conversation(label_name)
}
pub fn set_mp_gamer_tag_big_text(gamer_tag_id: i32,
string: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetMpGamerTagBigText {
    crate::__imports::native_set_mp_gamer_tag_big_text(gamer_tag_id,
string)
}
pub fn mp_text_chat_is_team_job(p0: i32) -> altv_wasm_shared::natives_result::ResultOfMpTextChatIsTeamJob {
    crate::__imports::native_mp_text_chat_is_team_job(p0)
}
pub fn get_hud_colour(hud_color_index: i32,
r: i32,
g: i32,
b: i32,
a: i32) -> altv_wasm_shared::natives_result::ResultOfGetHudColour {
    crate::__imports::native_get_hud_colour(hud_color_index,
r,
g,
b,
a)
}
pub fn get_ai_ped_ped_blip_index(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetAiPedPedBlipIndex {
    crate::__imports::native_get_ai_ped_ped_blip_index(ped)
}
pub fn get_menu_layout_changed_event_details(last_item_menu_id: i32,
selected_item_menu_id: i32,
selected_item_unique_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetMenuLayoutChangedEventDetails {
    crate::__imports::native_get_menu_layout_changed_event_details(last_item_menu_id,
selected_item_menu_id,
selected_item_unique_id)
}
pub fn set_inside_very_large_interior(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetInsideVeryLargeInterior {
    crate::__imports::native_set_inside_very_large_interior(toggle)
}
pub fn is_ime_in_progress() -> altv_wasm_shared::natives_result::ResultOfIsImeInProgress {
    crate::__imports::native_is_ime_in_progress()
}
pub fn get_length_of_string_with_this_text_label(gxt: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetLengthOfStringWithThisTextLabel {
    crate::__imports::native_get_length_of_string_with_this_text_label(gxt)
}
pub fn open_online_policies_menu() -> altv_wasm_shared::natives_result::ResultOfOpenOnlinePoliciesMenu {
    crate::__imports::native_open_online_policies_menu()
}
pub fn set_player_is_in_director_mode(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerIsInDirectorMode {
    crate::__imports::native_set_player_is_in_director_mode(toggle)
}
pub fn add_text_component_substring_blip_name(blip: i32) -> altv_wasm_shared::natives_result::ResultOfAddTextComponentSubstringBlipName {
    crate::__imports::native_add_text_component_substring_blip_name(blip)
}
pub fn thefeed_clear_frozen_post() -> altv_wasm_shared::natives_result::ResultOfThefeedClearFrozenPost {
    crate::__imports::native_thefeed_clear_frozen_post()
}
pub fn set_description_for_ugc_mission_eight_strings(p0: bool,
p1: Option<&String>,
p2: Option<&String>,
p3: Option<&String>,
p4: Option<&String>,
p5: Option<&String>,
p6: Option<&String>,
p7: Option<&String>,
p8: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetDescriptionForUgcMissionEightStrings {
    crate::__imports::native_set_description_for_ugc_mission_eight_strings(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8)
}
pub fn unlock_minimap_angle() -> altv_wasm_shared::natives_result::ResultOfUnlockMinimapAngle {
    crate::__imports::native_unlock_minimap_angle()
}
pub fn get_warning_screen_message_hash() -> altv_wasm_shared::natives_result::ResultOfGetWarningScreenMessageHash {
    crate::__imports::native_get_warning_screen_message_hash()
}
pub fn refresh_waypoint() -> altv_wasm_shared::natives_result::ResultOfRefreshWaypoint {
    crate::__imports::native_refresh_waypoint()
}
pub fn thefeed_get_last_shown_phone_activatable_feed_id() -> altv_wasm_shared::natives_result::ResultOfThefeedGetLastShownPhoneActivatableFeedId {
    crate::__imports::native_thefeed_get_last_shown_phone_activatable_feed_id()
}
pub fn display_player_name_tags_on_blips(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfDisplayPlayerNameTagsOnBlips {
    crate::__imports::native_display_player_name_tags_on_blips(toggle)
}
pub fn set_blip_route_colour(blip: i32,
colour: i32) -> altv_wasm_shared::natives_result::ResultOfSetBlipRouteColour {
    crate::__imports::native_set_blip_route_colour(blip,
colour)
}
pub fn clear_fake_cone_array() -> altv_wasm_shared::natives_result::ResultOfClearFakeConeArray {
    crate::__imports::native_clear_fake_cone_array()
}
pub fn pause_menu_is_context_active(context_hash: u32) -> altv_wasm_shared::natives_result::ResultOfPauseMenuIsContextActive {
    crate::__imports::native_pause_menu_is_context_active(context_hash)
}
pub fn begin_text_command_display_help(input_type: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfBeginTextCommandDisplayHelp {
    crate::__imports::native_begin_text_command_display_help(input_type)
}
pub fn begin_text_command_is_message_displayed(text: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfBeginTextCommandIsMessageDisplayed {
    crate::__imports::native_begin_text_command_is_message_displayed(text)
}
pub fn end_text_command_get_screen_width_of_display_text(p0: bool) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandGetScreenWidthOfDisplayText {
    crate::__imports::native_end_text_command_get_screen_width_of_display_text(p0)
}
pub fn remove_blip(blip: i32) -> altv_wasm_shared::natives_result::ResultOfRemoveBlip {
    crate::__imports::native_remove_blip(blip)
}
pub fn force_close_text_input_box() -> altv_wasm_shared::natives_result::ResultOfForceCloseTextInputBox {
    crate::__imports::native_force_close_text_input_box()
}
pub fn set_allow_ability_bar(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetAllowAbilityBar {
    crate::__imports::native_set_allow_ability_bar(toggle)
}
pub fn dont_zoom_minimap_when_running_this_frame() -> altv_wasm_shared::natives_result::ResultOfDontZoomMinimapWhenRunningThisFrame {
    crate::__imports::native_dont_zoom_minimap_when_running_this_frame()
}
pub fn end_text_command_is_message_displayed() -> altv_wasm_shared::natives_result::ResultOfEndTextCommandIsMessageDisplayed {
    crate::__imports::native_end_text_command_is_message_displayed()
}
pub fn is_streaming_additional_text(p0: i32) -> altv_wasm_shared::natives_result::ResultOfIsStreamingAdditionalText {
    crate::__imports::native_is_streaming_additional_text(p0)
}
pub fn set_mouse_cursor_style(sprite_id: i32) -> altv_wasm_shared::natives_result::ResultOfSetMouseCursorStyle {
    crate::__imports::native_set_mouse_cursor_style(sprite_id)
}
pub fn clear_help(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfClearHelp {
    crate::__imports::native_clear_help(toggle)
}
pub fn end_text_command_thefeed_post_crew_rankup_with_literal_flag(p0: Option<&String>,
p1: Option<&String>,
p2: Option<&String>,
p3: bool,
p4: bool) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandThefeedPostCrewRankupWithLiteralFlag {
    crate::__imports::native_end_text_command_thefeed_post_crew_rankup_with_literal_flag(p0,
p1,
p2,
p3,
p4)
}
pub fn get_character_menu_ped_float_stat(stat_hash: f32,
out_value: f32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfGetCharacterMenuPedFloatStat {
    crate::__imports::native_get_character_menu_ped_float_stat(stat_hash,
out_value,
p2)
}
pub fn begin_text_command_override_button_text(gxt_entry: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfBeginTextCommandOverrideButtonText {
    crate::__imports::native_begin_text_command_override_button_text(gxt_entry)
}
pub fn set_gps_custom_route_render(toggle: bool,
radar_thickness: i32,
map_thickness: i32) -> altv_wasm_shared::natives_result::ResultOfSetGpsCustomRouteRender {
    crate::__imports::native_set_gps_custom_route_render(toggle,
radar_thickness,
map_thickness)
}
pub fn set_blip_display(blip: i32,
display_id: i32) -> altv_wasm_shared::natives_result::ResultOfSetBlipDisplay {
    crate::__imports::native_set_blip_display(blip,
display_id)
}
pub fn end_text_command_get_number_of_lines_for_string(x: f32,
y: f32) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandGetNumberOfLinesForString {
    crate::__imports::native_end_text_command_get_number_of_lines_for_string(x,
y)
}
pub fn is_pausemap_in_interior_mode() -> altv_wasm_shared::natives_result::ResultOfIsPausemapInInteriorMode {
    crate::__imports::native_is_pausemap_in_interior_mode()
}
pub fn get_menu_ped_masked_int_stat(stat_hash: u32,
out_value: i32,
mask: i32,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfGetMenuPedMaskedIntStat {
    crate::__imports::native_get_menu_ped_masked_int_stat(stat_hash,
out_value,
mask,
p3)
}
pub fn set_minimap_in_prologue(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetMinimapInPrologue {
    crate::__imports::native_set_minimap_in_prologue(toggle)
}
pub fn is_reportugc_menu_open() -> altv_wasm_shared::natives_result::ResultOfIsReportugcMenuOpen {
    crate::__imports::native_is_reportugc_menu_open()
}
pub fn disable_pausemenu_spinner(p0: bool) -> altv_wasm_shared::natives_result::ResultOfDisablePausemenuSpinner {
    crate::__imports::native_disable_pausemenu_spinner(p0)
}
pub fn thefeed_set_background_color_for_next_post(hud_color_index: i32) -> altv_wasm_shared::natives_result::ResultOfThefeedSetBackgroundColorForNextPost {
    crate::__imports::native_thefeed_set_background_color_for_next_post(hud_color_index)
}
pub fn add_text_component_substring_website(website: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAddTextComponentSubstringWebsite {
    crate::__imports::native_add_text_component_substring_website(website)
}
pub fn remove_multiplayer_wallet_cash() -> altv_wasm_shared::natives_result::ResultOfRemoveMultiplayerWalletCash {
    crate::__imports::native_remove_multiplayer_wallet_cash()
}
pub fn display_help_text_this_frame(message: Option<&String>,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfDisplayHelpTextThisFrame {
    crate::__imports::native_display_help_text_this_frame(message,
p1)
}
pub fn remove_multiplayer_hud_cash() -> altv_wasm_shared::natives_result::ResultOfRemoveMultiplayerHudCash {
    crate::__imports::native_remove_multiplayer_hud_cash()
}
pub fn display_cash(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfDisplayCash {
    crate::__imports::native_display_cash(toggle)
}
pub fn get_blip_alpha(blip: i32) -> altv_wasm_shared::natives_result::ResultOfGetBlipAlpha {
    crate::__imports::native_get_blip_alpha(blip)
}
pub fn set_max_health_hud_display(maximum_value: i32) -> altv_wasm_shared::natives_result::ResultOfSetMaxHealthHudDisplay {
    crate::__imports::native_set_max_health_hud_display(maximum_value)
}
pub fn set_ped_ai_blip_notice_range(ped: u32,
range: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedAiBlipNoticeRange {
    crate::__imports::native_set_ped_ai_blip_notice_range(ped,
range)
}
pub fn end_text_command_thefeed_post_crewtag(p0: bool,
p1: bool,
p2: i32,
p3: i32,
is_leader: bool,
unk0: bool,
clan_desc: i32,
r: i32,
g: i32,
b: i32) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandThefeedPostCrewtag {
    crate::__imports::native_end_text_command_thefeed_post_crewtag(p0,
p1,
p2,
p3,
is_leader,
unk0,
clan_desc,
r,
g,
b)
}
pub fn get_current_website_id() -> altv_wasm_shared::natives_result::ResultOfGetCurrentWebsiteId {
    crate::__imports::native_get_current_website_id()
}
pub fn set_mouse_cursor_visible(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetMouseCursorVisible {
    crate::__imports::native_set_mouse_cursor_visible(toggle)
}
pub fn get_first_n_characters_of_literal_string(string: Option<&String>,
length: i32) -> altv_wasm_shared::natives_result::ResultOfGetFirstNcharactersOfLiteralString {
    crate::__imports::native_get_first_n_characters_of_literal_string(string,
length)
}
pub fn set_ability_bar_value(p0: f32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetAbilityBarValue {
    crate::__imports::native_set_ability_bar_value(p0,
p1)
}
pub fn get_number_of_active_blips() -> altv_wasm_shared::natives_result::ResultOfGetNumberOfActiveBlips {
    crate::__imports::native_get_number_of_active_blips()
}
pub fn get_blip_info_id_pickup_index(blip: i32) -> altv_wasm_shared::natives_result::ResultOfGetBlipInfoIdPickupIndex {
    crate::__imports::native_get_blip_info_id_pickup_index(blip)
}
pub fn set_mp_gamer_tag_num_packages(gamer_tag_id: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetMpGamerTagNumPackages {
    crate::__imports::native_set_mp_gamer_tag_num_packages(gamer_tag_id,
p1)
}
pub fn clear_brief() -> altv_wasm_shared::natives_result::ResultOfClearBrief {
    crate::__imports::native_clear_brief()
}
pub fn end_text_command_print(duration: i32,
draw_immediately: bool) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandPrint {
    crate::__imports::native_end_text_command_print(duration,
draw_immediately)
}
pub fn set_social_club_tour(name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetSocialClubTour {
    crate::__imports::native_set_social_club_tour(name)
}
pub fn is_radar_preference_switched_on() -> altv_wasm_shared::natives_result::ResultOfIsRadarPreferenceSwitchedOn {
    crate::__imports::native_is_radar_preference_switched_on()
}
pub fn set_cop_blip_sprite(p0: i32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetCopBlipSprite {
    crate::__imports::native_set_cop_blip_sprite(p0,
p1)
}
pub fn display_radar(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfDisplayRadar {
    crate::__imports::native_display_radar(toggle)
}
pub fn thefeed_force_render_on() -> altv_wasm_shared::natives_result::ResultOfThefeedForceRenderOn {
    crate::__imports::native_thefeed_force_render_on()
}
pub fn hud_get_weapon_wheel_top_slot(weapon_type_index: i32) -> altv_wasm_shared::natives_result::ResultOfHudGetWeaponWheelTopSlot {
    crate::__imports::native_hud_get_weapon_wheel_top_slot(weapon_type_index)
}
pub fn set_fake_gps_player_position_this_frame(x: f32,
y: f32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfSetFakeGpsPlayerPositionThisFrame {
    crate::__imports::native_set_fake_gps_player_position_this_frame(x,
y,
p2)
}
pub fn flash_wanted_display(p0: bool) -> altv_wasm_shared::natives_result::ResultOfFlashWantedDisplay {
    crate::__imports::native_flash_wanted_display(p0)
}
pub fn get_pm_player_crew_color(r: i32,
g: i32,
b: i32) -> altv_wasm_shared::natives_result::ResultOfGetPmPlayerCrewColor {
    crate::__imports::native_get_pm_player_crew_color(r,
g,
b)
}
pub fn has_director_mode_been_launched_by_code() -> altv_wasm_shared::natives_result::ResultOfHasDirectorModeBeenLaunchedByCode {
    crate::__imports::native_has_director_mode_been_launched_by_code()
}
pub fn show_number_on_blip(blip: i32,
number: i32) -> altv_wasm_shared::natives_result::ResultOfShowNumberOnBlip {
    crate::__imports::native_show_number_on_blip(blip,
number)
}
pub fn hud_get_weapon_wheel_currently_highlighted() -> altv_wasm_shared::natives_result::ResultOfHudGetWeaponWheelCurrentlyHighlighted {
    crate::__imports::native_hud_get_weapon_wheel_currently_highlighted()
}
pub fn hide_street_and_car_names_this_frame() -> altv_wasm_shared::natives_result::ResultOfHideStreetAndCarNamesThisFrame {
    crate::__imports::native_hide_street_and_car_names_this_frame()
}
pub fn set_text_leading(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetTextLeading {
    crate::__imports::native_set_text_leading(p0)
}
pub fn is_blip_flashing(blip: i32) -> altv_wasm_shared::natives_result::ResultOfIsBlipFlashing {
    crate::__imports::native_is_blip_flashing(blip)
}
pub fn display_ammo_this_frame(display: bool) -> altv_wasm_shared::natives_result::ResultOfDisplayAmmoThisFrame {
    crate::__imports::native_display_ammo_this_frame(display)
}
pub fn display_hud(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfDisplayHud {
    crate::__imports::native_display_hud(toggle)
}
pub fn set_mp_gamer_tags_should_use_vehicle_health(gamer_tag_id: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetMpGamerTagsShouldUseVehicleHealth {
    crate::__imports::native_set_mp_gamer_tags_should_use_vehicle_health(gamer_tag_id,
toggle)
}
pub fn does_blip_exist(blip: i32) -> altv_wasm_shared::natives_result::ResultOfDoesBlipExist {
    crate::__imports::native_does_blip_exist(blip)
}
pub fn set_waypoint_off() -> altv_wasm_shared::natives_result::ResultOfSetWaypointOff {
    crate::__imports::native_set_waypoint_off()
}
pub fn is_hud_hidden() -> altv_wasm_shared::natives_result::ResultOfIsHudHidden {
    crate::__imports::native_is_hud_hidden()
}
pub fn end_text_command_override_button_text(p0: i32) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandOverrideButtonText {
    crate::__imports::native_end_text_command_override_button_text(p0)
}
pub fn set_blip_rotation_with_float(blip: i32,
heading: f32) -> altv_wasm_shared::natives_result::ResultOfSetBlipRotationWithFloat {
    crate::__imports::native_set_blip_rotation_with_float(blip,
heading)
}
pub fn thefeed_flush_queue() -> altv_wasm_shared::natives_result::ResultOfThefeedFlushQueue {
    crate::__imports::native_thefeed_flush_queue()
}
pub fn add_point_to_gps_multi_route(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfAddPointToGpsMultiRoute {
    crate::__imports::native_add_point_to_gps_multi_route(x,
y,
z)
}
pub fn thefeed_is_paused() -> altv_wasm_shared::natives_result::ResultOfThefeedIsPaused {
    crate::__imports::native_thefeed_is_paused()
}
pub fn end_text_command_thefeed_post_award(texture_dict: Option<&String>,
texture_name: Option<&String>,
rp_bonus: i32,
color_overlay: i32,
title_label: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandThefeedPostAward {
    crate::__imports::native_end_text_command_thefeed_post_award(texture_dict,
texture_name,
rp_bonus,
color_overlay,
title_label)
}
pub fn set_blip_flash_interval(blip: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetBlipFlashInterval {
    crate::__imports::native_set_blip_flash_interval(blip,
p1)
}
pub fn set_hud_component_position(id: i32,
x: f32,
y: f32) -> altv_wasm_shared::natives_result::ResultOfSetHudComponentPosition {
    crate::__imports::native_set_hud_component_position(id,
x,
y)
}
pub fn set_mouse_cursor_this_frame() -> altv_wasm_shared::natives_result::ResultOfSetMouseCursorThisFrame {
    crate::__imports::native_set_mouse_cursor_this_frame()
}
pub fn begin_text_command_busyspinner_on(string: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfBeginTextCommandBusyspinnerOn {
    crate::__imports::native_begin_text_command_busyspinner_on(string)
}
pub fn does_text_label_exist(gxt: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDoesTextLabelExist {
    crate::__imports::native_does_text_label_exist(gxt)
}
pub fn give_ped_to_pause_menu(ped: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfGivePedToPauseMenu {
    crate::__imports::native_give_ped_to_pause_menu(ped,
p1)
}
pub fn is_subtitle_preference_switched_on() -> altv_wasm_shared::natives_result::ResultOfIsSubtitlePreferenceSwitchedOn {
    crate::__imports::native_is_subtitle_preference_switched_on()
}
pub fn has_this_additional_text_loaded(gxt: Option<&String>,
slot: i32) -> altv_wasm_shared::natives_result::ResultOfHasThisAdditionalTextLoaded {
    crate::__imports::native_has_this_additional_text_loaded(gxt,
slot)
}
pub fn thefeed_auto_post_gametips_off() -> altv_wasm_shared::natives_result::ResultOfThefeedAutoPostGametipsOff {
    crate::__imports::native_thefeed_auto_post_gametips_off()
}
pub fn set_blip_coords(blip: i32,
pos_x: f32,
pos_y: f32,
pos_z: f32) -> altv_wasm_shared::natives_result::ResultOfSetBlipCoords {
    crate::__imports::native_set_blip_coords(blip,
pos_x,
pos_y,
pos_z)
}
pub fn set_blip_priority(blip: i32,
priority: i32) -> altv_wasm_shared::natives_result::ResultOfSetBlipPriority {
    crate::__imports::native_set_blip_priority(blip,
priority)
}
pub fn is_warning_message_ready_for_control() -> altv_wasm_shared::natives_result::ResultOfIsWarningMessageReadyForControl {
    crate::__imports::native_is_warning_message_ready_for_control()
}
pub fn is_minimap_rendering() -> altv_wasm_shared::natives_result::ResultOfIsMinimapRendering {
    crate::__imports::native_is_minimap_rendering()
}
pub fn is_pause_menu_active() -> altv_wasm_shared::natives_result::ResultOfIsPauseMenuActive {
    crate::__imports::native_is_pause_menu_active()
}
pub fn set_floating_help_text_to_entity(hud_index: i32,
entity: u32,
offset_x: f32,
offset_y: f32) -> altv_wasm_shared::natives_result::ResultOfSetFloatingHelpTextToEntity {
    crate::__imports::native_set_floating_help_text_to_entity(hud_index,
entity,
offset_x,
offset_y)
}
pub fn is_mp_text_chat_typing() -> altv_wasm_shared::natives_result::ResultOfIsMpTextChatTyping {
    crate::__imports::native_is_mp_text_chat_typing()
}
pub fn set_ped_has_ai_blip_with_colour(ped: u32,
has_cone: bool,
color: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedHasAiBlipWithColour {
    crate::__imports::native_set_ped_has_ai_blip_with_colour(ped,
has_cone,
color)
}
pub fn set_blip_flashes(blip: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetBlipFlashes {
    crate::__imports::native_set_blip_flashes(blip,
toggle)
}
pub fn set_blip_bright(blip: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetBlipBright {
    crate::__imports::native_set_blip_bright(blip,
toggle)
}
pub fn get_character_from_audio_conversation_filename_with_byte_limit(text: Option<&String>,
position: i32,
length: i32,
max_length: i32) -> altv_wasm_shared::natives_result::ResultOfGetCharacterFromAudioConversationFilenameWithByteLimit {
    crate::__imports::native_get_character_from_audio_conversation_filename_with_byte_limit(text,
position,
length,
max_length)
}
pub fn busyspinner_is_displaying() -> altv_wasm_shared::natives_result::ResultOfBusyspinnerIsDisplaying {
    crate::__imports::native_busyspinner_is_displaying()
}
pub fn set_blip_marker_long_distance(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetBlipMarkerLongDistance {
    crate::__imports::native_set_blip_marker_long_distance(p0,
p1)
}
pub fn clear_reminder_message() -> altv_wasm_shared::natives_result::ResultOfClearReminderMessage {
    crate::__imports::native_clear_reminder_message()
}
pub fn end_text_command_thefeed_post_versus_tu(txd_name1: Option<&String>,
texture_name1: Option<&String>,
count1: i32,
txd_name2: Option<&String>,
texture_name2: Option<&String>,
count2: i32,
hud_color1: i32,
hud_color2: i32) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandThefeedPostVersusTu {
    crate::__imports::native_end_text_command_thefeed_post_versus_tu(txd_name1,
texture_name1,
count1,
txd_name2,
texture_name2,
count2,
hud_color1,
hud_color2)
}
pub fn thefeed_report_logo_off() -> altv_wasm_shared::natives_result::ResultOfThefeedReportLogoOff {
    crate::__imports::native_thefeed_report_logo_off()
}
pub fn set_cop_blip_sprite_as_standard() -> altv_wasm_shared::natives_result::ResultOfSetCopBlipSpriteAsStandard {
    crate::__imports::native_set_cop_blip_sprite_as_standard()
}
pub fn show_outline_indicator_on_blip(blip: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfShowOutlineIndicatorOnBlip {
    crate::__imports::native_show_outline_indicator_on_blip(blip,
toggle)
}
pub fn begin_text_command_print(gxt_entry: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfBeginTextCommandPrint {
    crate::__imports::native_begin_text_command_print(gxt_entry)
}
pub fn reset_global_actionscript_flag(flag_index: i32) -> altv_wasm_shared::natives_result::ResultOfResetGlobalActionscriptFlag {
    crate::__imports::native_reset_global_actionscript_flag(flag_index)
}
pub fn set_help_message_style(style: i32,
hud_color: i32,
alpha: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfSetHelpMessageStyle {
    crate::__imports::native_set_help_message_style(style,
hud_color,
alpha,
p3,
p4)
}
pub fn suppress_frontend_rendering_this_frame() -> altv_wasm_shared::natives_result::ResultOfSuppressFrontendRenderingThisFrame {
    crate::__imports::native_suppress_frontend_rendering_this_frame()
}
pub fn force_off_wanted_star_flash(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfForceOffWantedStarFlash {
    crate::__imports::native_force_off_wanted_star_flash(toggle)
}
pub fn thefeed_set_snap_feed_item_positions(p0: bool) -> altv_wasm_shared::natives_result::ResultOfThefeedSetSnapFeedItemPositions {
    crate::__imports::native_thefeed_set_snap_feed_item_positions(p0)
}
pub fn end_text_command_set_blip_name(blip: i32) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandSetBlipName {
    crate::__imports::native_end_text_command_set_blip_name(blip)
}
pub fn is_hud_component_active(id: i32) -> altv_wasm_shared::natives_result::ResultOfIsHudComponentActive {
    crate::__imports::native_is_hud_component_active(id)
}
pub fn get_blip_from_entity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetBlipFromEntity {
    crate::__imports::native_get_blip_from_entity(entity)
}
pub fn set_radar_zoom_precise(zoom: f32) -> altv_wasm_shared::natives_result::ResultOfSetRadarZoomPrecise {
    crate::__imports::native_set_radar_zoom_precise(zoom)
}
pub fn end_text_command_busyspinner_on(busy_spinner_type: i32) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandBusyspinnerOn {
    crate::__imports::native_end_text_command_busyspinner_on(busy_spinner_type)
}
pub fn add_blip_for_pickup(pickup: i32) -> altv_wasm_shared::natives_result::ResultOfAddBlipForPickup {
    crate::__imports::native_add_blip_for_pickup(pickup)
}
pub fn thefeed_remove_item(notification_id: i32) -> altv_wasm_shared::natives_result::ResultOfThefeedRemoveItem {
    crate::__imports::native_thefeed_remove_item(notification_id)
}
pub fn set_text_colour(red: i32,
green: i32,
blue: i32,
alpha: i32) -> altv_wasm_shared::natives_result::ResultOfSetTextColour {
    crate::__imports::native_set_text_colour(red,
green,
blue,
alpha)
}
pub fn set_blip_as_short_range(blip: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetBlipAsShortRange {
    crate::__imports::native_set_blip_as_short_range(blip,
toggle)
}
pub fn get_blip_info_id_type(blip: i32) -> altv_wasm_shared::natives_result::ResultOfGetBlipInfoIdType {
    crate::__imports::native_get_blip_info_id_type(blip)
}
pub fn draw_hud_over_fade_this_frame() -> altv_wasm_shared::natives_result::ResultOfDrawHudOverFadeThisFrame {
    crate::__imports::native_draw_hud_over_fade_this_frame()
}
pub fn create_fake_mp_gamer_tag(ped: u32,
username: Option<&String>,
pointed_clan_tag: bool,
is_rockstar_clan: bool,
clan_tag: Option<&String>,
clan_flag: i32) -> altv_wasm_shared::natives_result::ResultOfCreateFakeMpGamerTag {
    crate::__imports::native_create_fake_mp_gamer_tag(ped,
username,
pointed_clan_tag,
is_rockstar_clan,
clan_tag,
clan_flag)
}
pub fn set_text_centre(align: bool) -> altv_wasm_shared::natives_result::ResultOfSetTextCentre {
    crate::__imports::native_set_text_centre(align)
}
pub fn set_multiplayer_wallet_cash() -> altv_wasm_shared::natives_result::ResultOfSetMultiplayerWalletCash {
    crate::__imports::native_set_multiplayer_wallet_cash()
}
pub fn get_fake_spectator_mode() -> altv_wasm_shared::natives_result::ResultOfGetFakeSpectatorMode {
    crate::__imports::native_get_fake_spectator_mode()
}
pub fn set_widescreen_format(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetWidescreenFormat {
    crate::__imports::native_set_widescreen_format(p0)
}
pub fn is_social_club_active() -> altv_wasm_shared::natives_result::ResultOfIsSocialClubActive {
    crate::__imports::native_is_social_club_active()
}
pub fn set_blip_extended_height_threshold(blip: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetBlipExtendedHeightThreshold {
    crate::__imports::native_set_blip_extended_height_threshold(blip,
toggle)
}
pub fn remove_cop_blip_from_ped(ped: u32) -> altv_wasm_shared::natives_result::ResultOfRemoveCopBlipFromPed {
    crate::__imports::native_remove_cop_blip_from_ped(ped)
}
pub fn add_text_component_substring_text_label(label_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAddTextComponentSubstringTextLabel {
    crate::__imports::native_add_text_component_substring_text_label(label_name)
}
pub fn preload_busyspinner() -> altv_wasm_shared::natives_result::ResultOfPreloadBusyspinner {
    crate::__imports::native_preload_busyspinner()
}
pub fn end_text_command_thefeed_post_messagetext_subtitle_label(txd_name: Option<&String>,
texture_name: Option<&String>,
flash: bool,
icon_type: i32,
sender: Option<&String>,
subject: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandThefeedPostMessagetextSubtitleLabel {
    crate::__imports::native_end_text_command_thefeed_post_messagetext_subtitle_label(txd_name,
texture_name,
flash,
icon_type,
sender,
subject)
}
pub fn show_contact_instructional_button(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfShowContactInstructionalButton {
    crate::__imports::native_show_contact_instructional_button(toggle)
}
pub fn pause_menu_set_busy_spinner(p0: bool,
position: i32,
spinner_index: i32) -> altv_wasm_shared::natives_result::ResultOfPauseMenuSetBusySpinner {
    crate::__imports::native_pause_menu_set_busy_spinner(p0,
position,
spinner_index)
}
pub fn remove_multiplayer_bank_cash() -> altv_wasm_shared::natives_result::ResultOfRemoveMultiplayerBankCash {
    crate::__imports::native_remove_multiplayer_bank_cash()
}
pub fn pause_menu_get_mouse_click_event(p0: shared::MemoryBufferId,
p1: shared::MemoryBufferId,
p2: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfPauseMenuGetMouseClickEvent {
    crate::__imports::native_pause_menu_get_mouse_click_event(p0,
p1,
p2)
}
pub fn end_text_command_thefeed_post_unlock_tu(gxt_label1: Option<&String>,
p1: i32,
gxt_label2: Option<&String>,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandThefeedPostUnlockTu {
    crate::__imports::native_end_text_command_thefeed_post_unlock_tu(gxt_label1,
p1,
gxt_label2,
p3)
}
pub fn get_character_menu_ped_int_stat(p0: i32,
p1: shared::MemoryBufferId,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfGetCharacterMenuPedIntStat {
    crate::__imports::native_get_character_menu_ped_int_stat(p0,
p1,
p2)
}
pub fn show_gold_tick_on_blip(blip: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfShowGoldTickOnBlip {
    crate::__imports::native_show_gold_tick_on_blip(blip,
toggle)
}
pub fn set_radar_zoom_to_distance(zoom: f32) -> altv_wasm_shared::natives_result::ResultOfSetRadarZoomToDistance {
    crate::__imports::native_set_radar_zoom_to_distance(zoom)
}
pub fn clear_prints() -> altv_wasm_shared::natives_result::ResultOfClearPrints {
    crate::__imports::native_clear_prints()
}
pub fn allow_pause_when_not_in_state_of_play_this_frame() -> altv_wasm_shared::natives_result::ResultOfAllowPauseWhenNotInStateOfPlayThisFrame {
    crate::__imports::native_allow_pause_when_not_in_state_of_play_this_frame()
}
pub fn end_text_command_display_text(x: f32,
y: f32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandDisplayText {
    crate::__imports::native_end_text_command_display_text(x,
y,
p2)
}
pub fn set_blip_scale2d(blip: i32,
x_scale: f32,
y_scale: f32) -> altv_wasm_shared::natives_result::ResultOfSetBlipScale2d {
    crate::__imports::native_set_blip_scale2d(blip,
x_scale,
y_scale)
}
pub fn set_fake_spectator_mode(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetFakeSpectatorMode {
    crate::__imports::native_set_fake_spectator_mode(toggle)
}
pub fn pause_menuception_the_kick() -> altv_wasm_shared::natives_result::ResultOfPauseMenuceptionTheKick {
    crate::__imports::native_pause_menuception_the_kick()
}
pub fn add_blip_for_area(x: f32,
y: f32,
z: f32,
width: f32,
height: f32) -> altv_wasm_shared::natives_result::ResultOfAddBlipForArea {
    crate::__imports::native_add_blip_for_area(x,
y,
z,
width,
height)
}
pub fn get_character_from_audio_conversation_filename_bytes(text: Option<&String>,
start_position: i32,
end_position: i32) -> altv_wasm_shared::natives_result::ResultOfGetCharacterFromAudioConversationFilenameBytes {
    crate::__imports::native_get_character_from_audio_conversation_filename_bytes(text,
start_position,
end_position)
}
pub fn flag_player_context_in_tournament(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfFlagPlayerContextInTournament {
    crate::__imports::native_flag_player_context_in_tournament(toggle)
}
pub fn set_mp_gamer_tag_wanted_level(gamer_tag_id: i32,
wantedlvl: i32) -> altv_wasm_shared::natives_result::ResultOfSetMpGamerTagWantedLevel {
    crate::__imports::native_set_mp_gamer_tag_wanted_level(gamer_tag_id,
wantedlvl)
}
pub fn clear_this_print(p0: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfClearThisPrint {
    crate::__imports::native_clear_this_print(p0)
}
pub fn end_text_command_add_directly_to_previous_briefs(p0: bool) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandAddDirectlyToPreviousBriefs {
    crate::__imports::native_end_text_command_add_directly_to_previous_briefs(p0)
}
pub fn get_street_name_from_hash_key(hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetStreetNameFromHashKey {
    crate::__imports::native_get_street_name_from_hash_key(hash)
}
pub fn clear_all_blip_routes() -> altv_wasm_shared::natives_result::ResultOfClearAllBlipRoutes {
    crate::__imports::native_clear_all_blip_routes()
}
pub fn set_block_wanted_flash(disabled: bool) -> altv_wasm_shared::natives_result::ResultOfSetBlockWantedFlash {
    crate::__imports::native_set_block_wanted_flash(disabled)
}
pub fn set_fake_minimap_max_altimeter_height(altitude: f32,
p1: bool,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfSetFakeMinimapMaxAltimeterHeight {
    crate::__imports::native_set_fake_minimap_max_altimeter_height(altitude,
p1,
p2)
}
pub fn end_text_command_thefeed_post_replay(r#type: i32,
image: i32,
text: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandThefeedPostReplay {
    crate::__imports::native_end_text_command_thefeed_post_replay(r#type,
image,
text)
}
pub fn update_radar_zoom_to_blip() -> altv_wasm_shared::natives_result::ResultOfUpdateRadarZoomToBlip {
    crate::__imports::native_update_radar_zoom_to_blip()
}
pub fn set_mp_gamer_tags_should_use_points_health(gamer_tag_id: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetMpGamerTagsShouldUsePointsHealth {
    crate::__imports::native_set_mp_gamer_tags_should_use_points_health(gamer_tag_id,
toggle)
}
pub fn close_social_club_menu() -> altv_wasm_shared::natives_result::ResultOfCloseSocialClubMenu {
    crate::__imports::native_close_social_club_menu()
}
pub fn set_ped_has_ai_blip(ped: u32,
has_cone: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedHasAiBlip {
    crate::__imports::native_set_ped_has_ai_blip(ped,
has_cone)
}
pub fn set_blip_scale(blip: i32,
scale: f32) -> altv_wasm_shared::natives_result::ResultOfSetBlipScale {
    crate::__imports::native_set_blip_scale(blip,
scale)
}
pub fn set_blip_flash_timer(blip: i32,
duration: i32) -> altv_wasm_shared::natives_result::ResultOfSetBlipFlashTimer {
    crate::__imports::native_set_blip_flash_timer(blip,
duration)
}
pub fn busyspinner_is_on() -> altv_wasm_shared::natives_result::ResultOfBusyspinnerIsOn {
    crate::__imports::native_busyspinner_is_on()
}
pub fn thefeed_report_logo_on() -> altv_wasm_shared::natives_result::ResultOfThefeedReportLogoOn {
    crate::__imports::native_thefeed_report_logo_on()
}
pub fn hide_help_text_this_frame() -> altv_wasm_shared::natives_result::ResultOfHideHelpTextThisFrame {
    crate::__imports::native_hide_help_text_this_frame()
}
pub fn get_closest_blip_info_id(blip_sprite: i32) -> altv_wasm_shared::natives_result::ResultOfGetClosestBlipInfoId {
    crate::__imports::native_get_closest_blip_info_id(blip_sprite)
}
pub fn set_mp_gamer_tag_alpha(gamer_tag_id: i32,
component: i32,
alpha: i32) -> altv_wasm_shared::natives_result::ResultOfSetMpGamerTagAlpha {
    crate::__imports::native_set_mp_gamer_tag_alpha(gamer_tag_id,
component,
alpha)
}
pub fn set_script_variable_hud_colour(r: i32,
g: i32,
b: i32,
a: i32) -> altv_wasm_shared::natives_result::ResultOfSetScriptVariableHudColour {
    crate::__imports::native_set_script_variable_hud_colour(r,
g,
b,
a)
}
pub fn delete_waypoints_from_this_player() -> altv_wasm_shared::natives_result::ResultOfDeleteWaypointsFromThisPlayer {
    crate::__imports::native_delete_waypoints_from_this_player()
}
pub fn is_blip_short_range(blip: i32) -> altv_wasm_shared::natives_result::ResultOfIsBlipShortRange {
    crate::__imports::native_is_blip_short_range(blip)
}
pub fn is_help_message_on_screen() -> altv_wasm_shared::natives_result::ResultOfIsHelpMessageOnScreen {
    crate::__imports::native_is_help_message_on_screen()
}
pub fn set_warning_message_option_highlight(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetWarningMessageOptionHighlight {
    crate::__imports::native_set_warning_message_option_highlight(p0)
}
pub fn start_gps_custom_route(hud_color: i32,
display_on_foot: bool,
follow_player: bool) -> altv_wasm_shared::natives_result::ResultOfStartGpsCustomRoute {
    crate::__imports::native_start_gps_custom_route(hud_color,
display_on_foot,
follow_player)
}
pub fn get_rendered_character_height(size: f32,
font: i32) -> altv_wasm_shared::natives_result::ResultOfGetRenderedCharacterHeight {
    crate::__imports::native_get_rendered_character_height(size,
font)
}
pub fn set_warning_message_with_header(entry_header: Option<&String>,
entry_line1: Option<&String>,
instructional_key: i32,
entry_line2: Option<&String>,
p4: bool,
p5: i32,
show_background: shared::MemoryBufferId,
p7: shared::MemoryBufferId,
p8: bool,
p9: i32) -> altv_wasm_shared::natives_result::ResultOfSetWarningMessageWithHeader {
    crate::__imports::native_set_warning_message_with_header(entry_header,
entry_line1,
instructional_key,
entry_line2,
p4,
p5,
show_background,
p7,
p8,
p9)
}
pub fn get_main_player_blip_id() -> altv_wasm_shared::natives_result::ResultOfGetMainPlayerBlipId {
    crate::__imports::native_get_main_player_blip_id()
}
pub fn show_crew_indicator_on_blip(blip: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfShowCrewIndicatorOnBlip {
    crate::__imports::native_show_crew_indicator_on_blip(blip,
toggle)
}
pub fn is_scripted_hud_component_active(id: i32) -> altv_wasm_shared::natives_result::ResultOfIsScriptedHudComponentActive {
    crate::__imports::native_is_scripted_hud_component_active(id)
}
pub fn set_multiplayer_bank_cash() -> altv_wasm_shared::natives_result::ResultOfSetMultiplayerBankCash {
    crate::__imports::native_set_multiplayer_bank_cash()
}
pub fn does_blip_have_gps_route(blip: i32) -> altv_wasm_shared::natives_result::ResultOfDoesBlipHaveGpsRoute {
    crate::__imports::native_does_blip_have_gps_route(blip)
}
pub fn pause_menu_activate_context(context_hash: u32) -> altv_wasm_shared::natives_result::ResultOfPauseMenuActivateContext {
    crate::__imports::native_pause_menu_activate_context(context_hash)
}
pub fn end_text_command_thefeed_post_replay_input(r#type: i32,
button: Option<&String>,
text: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandThefeedPostReplayInput {
    crate::__imports::native_end_text_command_thefeed_post_replay_input(r#type,
button,
text)
}
pub fn pause_menu_get_hair_colour_index() -> altv_wasm_shared::natives_result::ResultOfPauseMenuGetHairColourIndex {
    crate::__imports::native_pause_menu_get_hair_colour_index()
}
pub fn set_mp_gamer_tag_name(gamer_tag_id: i32,
string: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetMpGamerTagName {
    crate::__imports::native_set_mp_gamer_tag_name(gamer_tag_id,
string)
}
pub fn set_pause_menu_active(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPauseMenuActive {
    crate::__imports::native_set_pause_menu_active(toggle)
}
pub fn get_blip_colour(blip: i32) -> altv_wasm_shared::natives_result::ResultOfGetBlipColour {
    crate::__imports::native_get_blip_colour(blip)
}
pub fn set_blip_sprite(blip: i32,
sprite_id: i32) -> altv_wasm_shared::natives_result::ResultOfSetBlipSprite {
    crate::__imports::native_set_blip_sprite(blip,
sprite_id)
}
pub fn get_minimap_fow_discovery_ratio() -> altv_wasm_shared::natives_result::ResultOfGetMinimapFowDiscoveryRatio {
    crate::__imports::native_get_minimap_fow_discovery_ratio()
}
pub fn begin_text_command_clear_print(text: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfBeginTextCommandClearPrint {
    crate::__imports::native_begin_text_command_clear_print(text)
}
pub fn is_warning_message_active() -> altv_wasm_shared::natives_result::ResultOfIsWarningMessageActive {
    crate::__imports::native_is_warning_message_active()
}
pub fn thefeed_resume() -> altv_wasm_shared::natives_result::ResultOfThefeedResume {
    crate::__imports::native_thefeed_resume()
}
pub fn set_blip_high_detail(blip: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetBlipHighDetail {
    crate::__imports::native_set_blip_high_detail(blip,
toggle)
}
pub fn hide_scripted_hud_component_this_frame(id: i32) -> altv_wasm_shared::natives_result::ResultOfHideScriptedHudComponentThisFrame {
    crate::__imports::native_hide_scripted_hud_component_this_frame(id)
}
pub fn get_global_actionscript_flag(flag_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetGlobalActionscriptFlag {
    crate::__imports::native_get_global_actionscript_flag(flag_index)
}
pub fn is_blip_on_minimap(blip: i32) -> altv_wasm_shared::natives_result::ResultOfIsBlipOnMinimap {
    crate::__imports::native_is_blip_on_minimap(blip)
}
pub fn set_mission_name_for_ugc_mission(p0: bool,
name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetMissionNameForUgcMission {
    crate::__imports::native_set_mission_name_for_ugc_mission(p0,
name)
}
pub fn add_valid_vehicle_hit_hash(p0: i32) -> altv_wasm_shared::natives_result::ResultOfAddValidVehicleHitHash {
    crate::__imports::native_add_valid_vehicle_hit_hash(p0)
}
pub fn set_ped_ai_blip_gang_id(ped: u32,
gang_id: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedAiBlipGangId {
    crate::__imports::native_set_ped_ai_blip_gang_id(ped,
gang_id)
}
pub fn allow_display_of_multiplayer_cash_text(allow: bool) -> altv_wasm_shared::natives_result::ResultOfAllowDisplayOfMultiplayerCashText {
    crate::__imports::native_allow_display_of_multiplayer_cash_text(allow)
}
pub fn clear_gps_custom_route() -> altv_wasm_shared::natives_result::ResultOfClearGpsCustomRoute {
    crate::__imports::native_clear_gps_custom_route()
}
pub fn add_text_component_float(value: f32,
decimal_places: i32) -> altv_wasm_shared::natives_result::ResultOfAddTextComponentFloat {
    crate::__imports::native_add_text_component_float(value,
decimal_places)
}
pub fn set_radar_as_exterior_this_frame() -> altv_wasm_shared::natives_result::ResultOfSetRadarAsExteriorThisFrame {
    crate::__imports::native_set_radar_as_exterior_this_frame()
}
pub fn release_named_rendertarget(name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfReleaseNamedRendertarget {
    crate::__imports::native_release_named_rendertarget(name)
}
pub fn set_blip_name_from_text_file(blip: i32,
gxt_entry: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetBlipNameFromTextFile {
    crate::__imports::native_set_blip_name_from_text_file(blip,
gxt_entry)
}
pub fn hud_force_weapon_wheel(show: bool) -> altv_wasm_shared::natives_result::ResultOfHudForceWeaponWheel {
    crate::__imports::native_hud_force_weapon_wheel(show)
}
pub fn is_updating_mp_gamer_tag_name_and_crew_details(gamer_tag_id: i32) -> altv_wasm_shared::natives_result::ResultOfIsUpdatingMpGamerTagNameAndCrewDetails {
    crate::__imports::native_is_updating_mp_gamer_tag_name_and_crew_details(gamer_tag_id)
}
pub fn clear_valid_vehicle_hit_hashes() -> altv_wasm_shared::natives_result::ResultOfClearValidVehicleHitHashes {
    crate::__imports::native_clear_valid_vehicle_hit_hashes()
}
pub fn take_control_of_frontend() -> altv_wasm_shared::natives_result::ResultOfTakeControlOfFrontend {
    crate::__imports::native_take_control_of_frontend()
}
pub fn set_pause_menu_ped_sleep_state(state: bool) -> altv_wasm_shared::natives_result::ResultOfSetPauseMenuPedSleepState {
    crate::__imports::native_set_pause_menu_ped_sleep_state(state)
}
pub fn force_close_reportugc_menu() -> altv_wasm_shared::natives_result::ResultOfForceCloseReportugcMenu {
    crate::__imports::native_force_close_reportugc_menu()
}
pub fn set_all_mp_gamer_tags_visibility(gamer_tag_id: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetAllMpGamerTagsVisibility {
    crate::__imports::native_set_all_mp_gamer_tags_visibility(gamer_tag_id,
toggle)
}
pub fn activate_frontend_menu(menuhash: u32,
toggle_pause: bool,
component: i32) -> altv_wasm_shared::natives_result::ResultOfActivateFrontendMenu {
    crate::__imports::native_activate_frontend_menu(menuhash,
toggle_pause,
component)
}
pub fn get_menu_ped_int_stat(p0: i32,
p1: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetMenuPedIntStat {
    crate::__imports::native_get_menu_ped_int_stat(p0,
p1)
}
pub fn end_text_command_thefeed_post_mpticker(blink: bool,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfEndTextCommandThefeedPostMpticker {
    crate::__imports::native_end_text_command_thefeed_post_mpticker(blink,
p1)
}
pub fn get_length_of_literal_string(string: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetLengthOfLiteralString {
    crate::__imports::native_get_length_of_literal_string(string)
}
pub fn pause_menu_set_warn_on_tab_change(p0: bool) -> altv_wasm_shared::natives_result::ResultOfPauseMenuSetWarnOnTabChange {
    crate::__imports::native_pause_menu_set_warn_on_tab_change(p0)
}
pub fn are_online_policies_up_to_date() -> altv_wasm_shared::natives_result::ResultOfAreOnlinePoliciesUpToDate {
    crate::__imports::native_are_online_policies_up_to_date()
}
pub fn show_start_mission_instructional_button(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfShowStartMissionInstructionalButton {
    crate::__imports::native_show_start_mission_instructional_button(toggle)
}
pub fn has_menu_trigger_event_occurred() -> altv_wasm_shared::natives_result::ResultOfHasMenuTriggerEventOccurred {
    crate::__imports::native_has_menu_trigger_event_occurred()
}
pub fn flash_minimap_display() -> altv_wasm_shared::natives_result::ResultOfFlashMinimapDisplay {
    crate::__imports::native_flash_minimap_display()
}
pub fn replace_hud_colour_with_rgba(hud_color_index: i32,
r: i32,
g: i32,
b: i32,
a: i32) -> altv_wasm_shared::natives_result::ResultOfReplaceHudColourWithRgba {
    crate::__imports::native_replace_hud_colour_with_rgba(hud_color_index,
r,
g,
b,
a)
}
pub fn override_mp_text_chat_color(p0: i32,
hud_color: i32) -> altv_wasm_shared::natives_result::ResultOfOverrideMpTextChatColor {
    crate::__imports::native_override_mp_text_chat_color(p0,
hud_color)
}
pub fn link_named_rendertarget(model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfLinkNamedRendertarget {
    crate::__imports::native_link_named_rendertarget(model_hash)
}
pub fn setup_fake_cone_data(blip: i32,
p1: f32,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
p6: f32,
p7: i32,
p8: i32) -> altv_wasm_shared::natives_result::ResultOfSetupFakeConeData {
    crate::__imports::native_setup_fake_cone_data(blip,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8)
}
pub fn set_blip_rotation(blip: i32,
rotation: i32) -> altv_wasm_shared::natives_result::ResultOfSetBlipRotation {
    crate::__imports::native_set_blip_rotation(blip,
rotation)
}
pub fn set_minimap_hide_fow(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetMinimapHideFow {
    crate::__imports::native_set_minimap_hide_fow(toggle)
}
pub fn begin_text_command_set_blip_name(text_label: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfBeginTextCommandSetBlipName {
    crate::__imports::native_begin_text_command_set_blip_name(text_label)
}
pub fn set_radar_zoom_to_blip(blip: i32,
zoom: f32) -> altv_wasm_shared::natives_result::ResultOfSetRadarZoomToBlip {
    crate::__imports::native_set_radar_zoom_to_blip(blip,
zoom)
}
pub fn get_hud_screen_position_from_world_position(world_x: f32,
world_y: f32,
world_z: f32,
screen_x: f32,
screen_y: f32) -> altv_wasm_shared::natives_result::ResultOfGetHudScreenPositionFromWorldPosition {
    crate::__imports::native_get_hud_screen_position_from_world_position(world_x,
world_y,
world_z,
screen_x,
screen_y)
}
pub fn get_blip_info_id_coord(blip: i32) -> altv_wasm_shared::natives_result::ResultOfGetBlipInfoIdCoord {
    crate::__imports::native_get_blip_info_id_coord(blip)
}
pub fn end_text_command_clear_print() -> altv_wasm_shared::natives_result::ResultOfEndTextCommandClearPrint {
    crate::__imports::native_end_text_command_clear_print()
}
pub fn set_ped_ai_blip_sprite(ped: u32,
sprite_id: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedAiBlipSprite {
    crate::__imports::native_set_ped_ai_blip_sprite(ped,
sprite_id)
}
pub fn set_multiplayer_hud_cash(p0: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetMultiplayerHudCash {
    crate::__imports::native_set_multiplayer_hud_cash(p0,
p1)
}
pub fn thefeed_pause() -> altv_wasm_shared::natives_result::ResultOfThefeedPause {
    crate::__imports::native_thefeed_pause()
}
pub fn thefeed_reset_all_parameters() -> altv_wasm_shared::natives_result::ResultOfThefeedResetAllParameters {
    crate::__imports::native_thefeed_reset_all_parameters()
}
pub fn thefeed_freeze_next_post() -> altv_wasm_shared::natives_result::ResultOfThefeedFreezeNextPost {
    crate::__imports::native_thefeed_freeze_next_post()
}
pub fn set_new_waypoint(x: f32,
y: f32) -> altv_wasm_shared::natives_result::ResultOfSetNewWaypoint {
    crate::__imports::native_set_new_waypoint(x,
y)
}
pub fn clear_gps_player_waypoint() -> altv_wasm_shared::natives_result::ResultOfClearGpsPlayerWaypoint {
    crate::__imports::native_clear_gps_player_waypoint()
}
pub fn get_interior_at_coords_with_type(x: f32,
y: f32,
z: f32,
interior_type: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetInteriorAtCoordsWithType {
    crate::__imports::native_get_interior_at_coords_with_type(x,
y,
z,
interior_type)
}
pub fn get_interior_from_entity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetInteriorFromEntity {
    crate::__imports::native_get_interior_from_entity(entity)
}
pub fn clear_room_for_game_viewport() -> altv_wasm_shared::natives_result::ResultOfClearRoomForGameViewport {
    crate::__imports::native_clear_room_for_game_viewport()
}
pub fn get_interior_location_and_namehash(interior: i32,
position: Option<&shared::Vector3>,
name_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetInteriorLocationAndNamehash {
    crate::__imports::native_get_interior_location_and_namehash(interior,
position,
name_hash)
}
pub fn unpin_interior(interior: i32) -> altv_wasm_shared::natives_result::ResultOfUnpinInterior {
    crate::__imports::native_unpin_interior(interior)
}
pub fn is_valid_interior(interior: i32) -> altv_wasm_shared::natives_result::ResultOfIsValidInterior {
    crate::__imports::native_is_valid_interior(interior)
}
pub fn pin_interior_in_memory(interior: i32) -> altv_wasm_shared::natives_result::ResultOfPinInteriorInMemory {
    crate::__imports::native_pin_interior_in_memory(interior)
}
pub fn is_interior_entity_set_active(interior: i32,
entity_set_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfIsInteriorEntitySetActive {
    crate::__imports::native_is_interior_entity_set_active(interior,
entity_set_name)
}
pub fn force_activating_tracking_on_entity(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfForceActivatingTrackingOnEntity {
    crate::__imports::native_force_activating_tracking_on_entity(p0,
p1)
}
pub fn get_key_for_entity_in_room(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetKeyForEntityInRoom {
    crate::__imports::native_get_key_for_entity_in_room(entity)
}
pub fn add_pickup_to_interior_room_by_name(pickup: i32,
room_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAddPickupToInteriorRoomByName {
    crate::__imports::native_add_pickup_to_interior_room_by_name(pickup,
room_name)
}
pub fn set_room_for_game_viewport_by_key(room_hash_key: u32) -> altv_wasm_shared::natives_result::ResultOfSetRoomForGameViewportByKey {
    crate::__imports::native_set_room_for_game_viewport_by_key(room_hash_key)
}
pub fn refresh_interior(interior: i32) -> altv_wasm_shared::natives_result::ResultOfRefreshInterior {
    crate::__imports::native_refresh_interior(interior)
}
pub fn deactivate_interior_entity_set(interior: i32,
entity_set_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDeactivateInteriorEntitySet {
    crate::__imports::native_deactivate_interior_entity_set(interior,
entity_set_name)
}
pub fn get_room_key_from_entity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetRoomKeyFromEntity {
    crate::__imports::native_get_room_key_from_entity(entity)
}
pub fn activate_interior_groups_using_camera() -> altv_wasm_shared::natives_result::ResultOfActivateInteriorGroupsUsingCamera {
    crate::__imports::native_activate_interior_groups_using_camera()
}
pub fn set_interior_in_use(interior: i32) -> altv_wasm_shared::natives_result::ResultOfSetInteriorInUse {
    crate::__imports::native_set_interior_in_use(interior)
}
pub fn enable_shadow_cull_model_this_frame(map_object_hash: u32) -> altv_wasm_shared::natives_result::ResultOfEnableShadowCullModelThisFrame {
    crate::__imports::native_enable_shadow_cull_model_this_frame(map_object_hash)
}
pub fn force_room_for_entity(entity: u32,
interior: i32,
room_hash_key: u32) -> altv_wasm_shared::natives_result::ResultOfForceRoomForEntity {
    crate::__imports::native_force_room_for_entity(entity,
interior,
room_hash_key)
}
pub fn activate_interior_entity_set(interior: i32,
entity_set_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfActivateInteriorEntitySet {
    crate::__imports::native_activate_interior_entity_set(interior,
entity_set_name)
}
pub fn disable_interior(interior: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfDisableInterior {
    crate::__imports::native_disable_interior(interior,
toggle)
}
pub fn is_interior_ready(interior: i32) -> altv_wasm_shared::natives_result::ResultOfIsInteriorReady {
    crate::__imports::native_is_interior_ready(interior)
}
pub fn set_is_exterior_only(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetIsExteriorOnly {
    crate::__imports::native_set_is_exterior_only(entity,
toggle)
}
pub fn enable_stadium_probes_this_frame(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfEnableStadiumProbesThisFrame {
    crate::__imports::native_enable_stadium_probes_this_frame(toggle)
}
pub fn retain_entity_in_interior(entity: u32,
interior: i32) -> altv_wasm_shared::natives_result::ResultOfRetainEntityInInterior {
    crate::__imports::native_retain_entity_in_interior(entity,
interior)
}
pub fn clear_interior_state_of_entity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfClearInteriorStateOfEntity {
    crate::__imports::native_clear_interior_state_of_entity(entity)
}
pub fn force_room_for_game_viewport(interior_i_d: i32,
room_hash_key: u32) -> altv_wasm_shared::natives_result::ResultOfForceRoomForGameViewport {
    crate::__imports::native_force_room_for_game_viewport(interior_i_d,
room_hash_key)
}
pub fn is_interior_capped(interior: i32) -> altv_wasm_shared::natives_result::ResultOfIsInteriorCapped {
    crate::__imports::native_is_interior_capped(interior)
}
pub fn get_offset_from_interior_in_world_coords(interior: i32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfGetOffsetFromInteriorInWorldCoords {
    crate::__imports::native_get_offset_from_interior_in_world_coords(interior,
x,
y,
z)
}
pub fn disable_metro_system(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfDisableMetroSystem {
    crate::__imports::native_disable_metro_system(toggle)
}
pub fn get_room_key_for_game_viewport() -> altv_wasm_shared::natives_result::ResultOfGetRoomKeyForGameViewport {
    crate::__imports::native_get_room_key_for_game_viewport()
}
pub fn enable_exterior_cull_model_this_frame(map_object_hash: u32) -> altv_wasm_shared::natives_result::ResultOfEnableExteriorCullModelThisFrame {
    crate::__imports::native_enable_exterior_cull_model_this_frame(map_object_hash)
}
pub fn set_room_for_game_viewport_by_name(room_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetRoomForGameViewportByName {
    crate::__imports::native_set_room_for_game_viewport_by_name(room_name)
}
pub fn get_interior_at_coords(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfGetInteriorAtCoords {
    crate::__imports::native_get_interior_at_coords(x,
y,
z)
}
pub fn clear_room_for_entity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfClearRoomForEntity {
    crate::__imports::native_clear_room_for_entity(entity)
}
pub fn is_interior_disabled(interior: i32) -> altv_wasm_shared::natives_result::ResultOfIsInteriorDisabled {
    crate::__imports::native_is_interior_disabled(interior)
}
pub fn is_interior_scene() -> altv_wasm_shared::natives_result::ResultOfIsInteriorScene {
    crate::__imports::native_is_interior_scene()
}
pub fn set_interior_entity_set_tint_index(interior: i32,
entity_set_name: Option<&String>,
color: i32) -> altv_wasm_shared::natives_result::ResultOfSetInteriorEntitySetTintIndex {
    crate::__imports::native_set_interior_entity_set_tint_index(interior,
entity_set_name,
color)
}
pub fn cap_interior(interior: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfCapInterior {
    crate::__imports::native_cap_interior(interior,
toggle)
}
pub fn get_interior_group_id(interior: i32) -> altv_wasm_shared::natives_result::ResultOfGetInteriorGroupId {
    crate::__imports::native_get_interior_group_id(interior)
}
pub fn get_interior_from_primary_view() -> altv_wasm_shared::natives_result::ResultOfGetInteriorFromPrimaryView {
    crate::__imports::native_get_interior_from_primary_view()
}
pub fn get_interior_from_collision(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfGetInteriorFromCollision {
    crate::__imports::native_get_interior_from_collision(x,
y,
z)
}
pub fn is_collision_marked_outside(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfIsCollisionMarkedOutside {
    crate::__imports::native_is_collision_marked_outside(x,
y,
z)
}
pub fn get_interior_at_coords_with_typehash(x: f32,
y: f32,
z: f32,
type_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetInteriorAtCoordsWithTypehash {
    crate::__imports::native_get_interior_at_coords_with_typehash(x,
y,
z,
type_hash)
}
pub fn get_interior_heading(interior: i32) -> altv_wasm_shared::natives_result::ResultOfGetInteriorHeading {
    crate::__imports::native_get_interior_heading(interior)
}
pub fn remove_from_itemset(item: u32,
itemset: u32) -> altv_wasm_shared::natives_result::ResultOfRemoveFromItemset {
    crate::__imports::native_remove_from_itemset(item,
itemset)
}
pub fn is_in_itemset(item: u32,
itemset: u32) -> altv_wasm_shared::natives_result::ResultOfIsInItemset {
    crate::__imports::native_is_in_itemset(item,
itemset)
}
pub fn create_itemset(p0: bool) -> altv_wasm_shared::natives_result::ResultOfCreateItemset {
    crate::__imports::native_create_itemset(p0)
}
pub fn clean_itemset(itemset: u32) -> altv_wasm_shared::natives_result::ResultOfCleanItemset {
    crate::__imports::native_clean_itemset(itemset)
}
pub fn get_indexed_item_in_itemset(index: i32,
itemset: u32) -> altv_wasm_shared::natives_result::ResultOfGetIndexedItemInItemset {
    crate::__imports::native_get_indexed_item_in_itemset(index,
itemset)
}
pub fn is_itemset_valid(itemset: u32) -> altv_wasm_shared::natives_result::ResultOfIsItemsetValid {
    crate::__imports::native_is_itemset_valid(itemset)
}
pub fn get_itemset_size(itemset: u32) -> altv_wasm_shared::natives_result::ResultOfGetItemsetSize {
    crate::__imports::native_get_itemset_size(itemset)
}
pub fn destroy_itemset(itemset: u32) -> altv_wasm_shared::natives_result::ResultOfDestroyItemset {
    crate::__imports::native_destroy_itemset(itemset)
}
pub fn add_to_itemset(item: u32,
itemset: u32) -> altv_wasm_shared::natives_result::ResultOfAddToItemset {
    crate::__imports::native_add_to_itemset(item,
itemset)
}
pub fn lobby_auto_multiplayer_event() -> altv_wasm_shared::natives_result::ResultOfLobbyAutoMultiplayerEvent {
    crate::__imports::native_lobby_auto_multiplayer_event()
}
pub fn lobby_set_auto_multiplayer(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfLobbySetAutoMultiplayer {
    crate::__imports::native_lobby_set_auto_multiplayer(toggle)
}
pub fn lobby_auto_multiplayer_random_job() -> altv_wasm_shared::natives_result::ResultOfLobbyAutoMultiplayerRandomJob {
    crate::__imports::native_lobby_auto_multiplayer_random_job()
}
pub fn lobby_set_auto_mp_random_job(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfLobbySetAutoMpRandomJob {
    crate::__imports::native_lobby_set_auto_mp_random_job(toggle)
}
pub fn lobby_auto_multiplayer_freemode() -> altv_wasm_shared::natives_result::ResultOfLobbyAutoMultiplayerFreemode {
    crate::__imports::native_lobby_auto_multiplayer_freemode()
}
pub fn lobby_auto_multiplayer_menu() -> altv_wasm_shared::natives_result::ResultOfLobbyAutoMultiplayerMenu {
    crate::__imports::native_lobby_auto_multiplayer_menu()
}
pub fn shutdown_session_clears_auto_multiplayer(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfShutdownSessionClearsAutoMultiplayer {
    crate::__imports::native_shutdown_session_clears_auto_multiplayer(toggle)
}
pub fn lobby_set_auto_multiplayer_event(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfLobbySetAutoMultiplayerEvent {
    crate::__imports::native_lobby_set_auto_multiplayer_event(toggle)
}
pub fn get_current_language() -> altv_wasm_shared::natives_result::ResultOfGetCurrentLanguage {
    crate::__imports::native_get_current_language()
}
pub fn localization_get_system_language() -> altv_wasm_shared::natives_result::ResultOfLocalizationGetSystemLanguage {
    crate::__imports::native_localization_get_system_language()
}
pub fn localization_get_system_date_type() -> altv_wasm_shared::natives_result::ResultOfLocalizationGetSystemDateType {
    crate::__imports::native_localization_get_system_date_type()
}
pub fn display_onscreen_keyboard(p0: i32,
window_title: Option<&String>,
p2: Option<&String>,
default_text: Option<&String>,
default_concat1: Option<&String>,
default_concat2: Option<&String>,
default_concat3: Option<&String>,
max_input_length: i32) -> altv_wasm_shared::natives_result::ResultOfDisplayOnscreenKeyboard {
    crate::__imports::native_display_onscreen_keyboard(p0,
window_title,
p2,
default_text,
default_concat1,
default_concat2,
default_concat3,
max_input_length)
}
pub fn clear_area_of_vehicles(x: f32,
y: f32,
z: f32,
radius: f32,
p4: bool,
p5: bool,
p6: bool,
p7: bool,
p8: bool,
p9: bool,
p10: i32) -> altv_wasm_shared::natives_result::ResultOfClearAreaOfVehicles {
    crate::__imports::native_clear_area_of_vehicles(x,
y,
z,
radius,
p4,
p5,
p6,
p7,
p8,
p9,
p10)
}
pub fn set_cloud_settings_override(p0: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetCloudSettingsOverride {
    crate::__imports::native_set_cloud_settings_override(p0)
}
pub fn get_model_dimensions(model_hash: u32,
minimum: Option<&shared::Vector3>,
maximum: Option<&shared::Vector3>) -> altv_wasm_shared::natives_result::ResultOfGetModelDimensions {
    crate::__imports::native_get_model_dimensions(model_hash,
minimum,
maximum)
}
pub fn stop_save_array() -> altv_wasm_shared::natives_result::ResultOfStopSaveArray {
    crate::__imports::native_stop_save_array()
}
pub fn clear_area_of_cops(x: f32,
y: f32,
z: f32,
radius: f32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfClearAreaOfCops {
    crate::__imports::native_clear_area_of_cops(x,
y,
z,
radius,
flags)
}
pub fn create_incident_with_entity(dispatch_service: i32,
ped: u32,
num_units: i32,
radius: f32,
out_incident_i_d: i32,
p5: i32,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfCreateIncidentWithEntity {
    crate::__imports::native_create_incident_with_entity(dispatch_service,
ped,
num_units,
radius,
out_incident_i_d,
p5,
p6)
}
pub fn clear_code_requested_autosave() -> altv_wasm_shared::natives_result::ResultOfClearCodeRequestedAutosave {
    crate::__imports::native_clear_code_requested_autosave()
}
pub fn has_cheat_with_hash_been_activated(hash: u32,
amount: i32) -> altv_wasm_shared::natives_result::ResultOfHasCheatWithHashBeenActivated {
    crate::__imports::native_has_cheat_with_hash_been_activated(hash,
amount)
}
pub fn have_credits_reached_end() -> altv_wasm_shared::natives_result::ResultOfHaveCreditsReachedEnd {
    crate::__imports::native_have_credits_reached_end()
}
pub fn clear_area_of_projectiles(x: f32,
y: f32,
z: f32,
radius: f32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfClearAreaOfProjectiles {
    crate::__imports::native_clear_area_of_projectiles(x,
y,
z,
radius,
flags)
}
pub fn is_steam_version() -> altv_wasm_shared::natives_result::ResultOfIsSteamVersion {
    crate::__imports::native_is_steam_version()
}
pub fn script_race_init(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfScriptRaceInit {
    crate::__imports::native_script_race_init(p0,
p1,
p2,
p3)
}
pub fn are_strings_equal(string1: Option<&String>,
string2: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAreStringsEqual {
    crate::__imports::native_are_strings_equal(string1,
string2)
}
pub fn update_onscreen_keyboard() -> altv_wasm_shared::natives_result::ResultOfUpdateOnscreenKeyboard {
    crate::__imports::native_update_onscreen_keyboard()
}
pub fn clear_weather_type_now_persist_network(milliseconds: i32) -> altv_wasm_shared::natives_result::ResultOfClearWeatherTypeNowPersistNetwork {
    crate::__imports::native_clear_weather_type_now_persist_network(milliseconds)
}
pub fn register_enum_to_save(p0: shared::MemoryBufferId,
name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRegisterEnumToSave {
    crate::__imports::native_register_enum_to_save(p0,
name)
}
pub fn override_save_house(p0: bool,
p1: f32,
p2: f32,
p3: f32,
p4: f32,
p5: bool,
p6: f32,
p7: f32) -> altv_wasm_shared::natives_result::ResultOfOverrideSaveHouse {
    crate::__imports::native_override_save_house(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7)
}
pub fn set_override_weatherex(weather_type: Option<&String>,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetOverrideWeatherex {
    crate::__imports::native_set_override_weatherex(weather_type,
p1)
}
pub fn set_fire_ammo_this_frame(player: u32) -> altv_wasm_shared::natives_result::ResultOfSetFireAmmoThisFrame {
    crate::__imports::native_set_fire_ammo_this_frame(player)
}
pub fn preload_cloud_hat(name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfPreloadCloudHat {
    crate::__imports::native_preload_cloud_hat(name)
}
pub fn clear_angled_area_of_vehicles(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
width: f32,
p7: bool,
p8: bool,
p9: bool,
p10: bool,
p11: bool,
p12: i32,
p13: i32) -> altv_wasm_shared::natives_result::ResultOfClearAngledAreaOfVehicles {
    crate::__imports::native_clear_angled_area_of_vehicles(x1,
y1,
z1,
x2,
y2,
z2,
width,
p7,
p8,
p9,
p10,
p11,
p12,
p13)
}
pub fn is_pop_multiplier_area_networked(id: i32) -> altv_wasm_shared::natives_result::ResultOfIsPopMultiplierAreaNetworked {
    crate::__imports::native_is_pop_multiplier_area_networked(id)
}
pub fn does_pop_multiplier_area_exist(id: i32) -> altv_wasm_shared::natives_result::ResultOfDoesPopMultiplierAreaExist {
    crate::__imports::native_does_pop_multiplier_area_exist(id)
}
pub fn is_xbox_platform() -> altv_wasm_shared::natives_result::ResultOfIsXboxPlatform {
    crate::__imports::native_is_xbox_platform()
}
pub fn set_fake_wanted_level(fake_wanted_level: i32) -> altv_wasm_shared::natives_result::ResultOfSetFakeWantedLevel {
    crate::__imports::native_set_fake_wanted_level(fake_wanted_level)
}
pub fn has_async_install_finished() -> altv_wasm_shared::natives_result::ResultOfHasAsyncInstallFinished {
    crate::__imports::native_has_async_install_finished()
}
pub fn get_frame_time() -> altv_wasm_shared::natives_result::ResultOfGetFrameTime {
    crate::__imports::native_get_frame_time()
}
pub fn does_pop_multiplier_sphere_exist(id: i32) -> altv_wasm_shared::natives_result::ResultOfDoesPopMultiplierSphereExist {
    crate::__imports::native_does_pop_multiplier_sphere_exist(id)
}
pub fn get_tennis_swing_anim_complete(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetTennisSwingAnimComplete {
    crate::__imports::native_get_tennis_swing_anim_complete(ped)
}
pub fn get_angle_between2d_vectors(x1: f32,
y1: f32,
x2: f32,
y2: f32) -> altv_wasm_shared::natives_result::ResultOfGetAngleBetween2dVectors {
    crate::__imports::native_get_angle_between2d_vectors(x1,
y1,
x2,
y2)
}
pub fn get_tennis_swing_anim_can_be_interrupted(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetTennisSwingAnimCanBeInterrupted {
    crate::__imports::native_get_tennis_swing_anim_can_be_interrupted(ped)
}
pub fn set_minigame_in_progress(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetMinigameInProgress {
    crate::__imports::native_set_minigame_in_progress(toggle)
}
pub fn is_bullet_in_angled_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
width: f32,
owned_by_player: bool) -> altv_wasm_shared::natives_result::ResultOfIsBulletInAngledArea {
    crate::__imports::native_is_bullet_in_angled_area(x1,
y1,
z1,
x2,
y2,
z2,
width,
owned_by_player)
}
pub fn add_stunt_jump(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
x3: f32,
y3: f32,
z3: f32,
x4: f32,
y4: f32,
z4: f32,
cam_x: f32,
cam_y: f32,
cam_z: f32,
p15: i32,
p16: i32,
p17: i32) -> altv_wasm_shared::natives_result::ResultOfAddStuntJump {
    crate::__imports::native_add_stunt_jump(x1,
y1,
z1,
x2,
y2,
z2,
x3,
y3,
z3,
x4,
y4,
z4,
cam_x,
cam_y,
cam_z,
p15,
p16,
p17)
}
pub fn clear_replay_stats() -> altv_wasm_shared::natives_result::ResultOfClearReplayStats {
    crate::__imports::native_clear_replay_stats()
}
pub fn get_benchmark_pass() -> altv_wasm_shared::natives_result::ResultOfGetBenchmarkPass {
    crate::__imports::native_get_benchmark_pass()
}
pub fn script_race_player_hit_checkpoint(player: u32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfScriptRacePlayerHitCheckpoint {
    crate::__imports::native_script_race_player_hit_checkpoint(player,
p1,
p2,
p3)
}
pub fn acos(p0: f32) -> altv_wasm_shared::natives_result::ResultOfAcos {
    crate::__imports::native_acos(p0)
}
pub fn set_time_scale(time_scale: f32) -> altv_wasm_shared::natives_result::ResultOfSetTimeScale {
    crate::__imports::native_set_time_scale(time_scale)
}
pub fn set_fade_out_after_arrest(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetFadeOutAfterArrest {
    crate::__imports::native_set_fade_out_after_arrest(toggle)
}
pub fn compare_strings(str1: Option<&String>,
str2: Option<&String>,
match_case: bool,
max_length: i32) -> altv_wasm_shared::natives_result::ResultOfCompareStrings {
    crate::__imports::native_compare_strings(str1,
str2,
match_case,
max_length)
}
pub fn supress_random_event_this_frame(event_type: i32,
suppress: bool) -> altv_wasm_shared::natives_result::ResultOfSupressRandomEventThisFrame {
    crate::__imports::native_supress_random_event_this_frame(event_type,
suppress)
}
pub fn get_wind_direction() -> altv_wasm_shared::natives_result::ResultOfGetWindDirection {
    crate::__imports::native_get_wind_direction()
}
pub fn add_hospital_restart(x: f32,
y: f32,
z: f32,
p3: f32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfAddHospitalRestart {
    crate::__imports::native_add_hospital_restart(x,
y,
z,
p3,
p4)
}
pub fn script_race_shutdown() -> altv_wasm_shared::natives_result::ResultOfScriptRaceShutdown {
    crate::__imports::native_script_race_shutdown()
}
pub fn get_clouds_alpha() -> altv_wasm_shared::natives_result::ResultOfGetCloudsAlpha {
    crate::__imports::native_get_clouds_alpha()
}
pub fn has_code_requested_autosave() -> altv_wasm_shared::natives_result::ResultOfHasCodeRequestedAutosave {
    crate::__imports::native_has_code_requested_autosave()
}
pub fn copy_script_struct(dst: shared::MemoryBufferId,
src: shared::MemoryBufferId,
size: i32) -> altv_wasm_shared::natives_result::ResultOfCopyScriptStruct {
    crate::__imports::native_copy_script_struct(dst,
src,
size)
}
pub fn get_closest_point_on_line(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
x3: f32,
y3: f32,
z3: f32,
clamp: bool) -> altv_wasm_shared::natives_result::ResultOfGetClosestPointOnLine {
    crate::__imports::native_get_closest_point_on_line(x1,
y1,
z1,
x2,
y2,
z2,
x3,
y3,
z3,
clamp)
}
pub fn ignore_next_restart(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfIgnoreNextRestart {
    crate::__imports::native_ignore_next_restart(toggle)
}
pub fn is_stunt_jump_message_showing() -> altv_wasm_shared::natives_result::ResultOfIsStuntJumpMessageShowing {
    crate::__imports::native_is_stunt_jump_message_showing()
}
pub fn disable_screen_dimming_this_frame() -> altv_wasm_shared::natives_result::ResultOfDisableScreenDimmingThisFrame {
    crate::__imports::native_disable_screen_dimming_this_frame()
}
pub fn disable_police_restart(police_index: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfDisablePoliceRestart {
    crate::__imports::native_disable_police_restart(police_index,
toggle)
}
pub fn get_content_to_load() -> altv_wasm_shared::natives_result::ResultOfGetContentToLoad {
    crate::__imports::native_get_content_to_load()
}
pub fn set_riot_mode_enabled(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetRiotModeEnabled {
    crate::__imports::native_set_riot_mode_enabled(toggle)
}
pub fn remove_dispatch_spawn_blocking_area(p0: i32) -> altv_wasm_shared::natives_result::ResultOfRemoveDispatchSpawnBlockingArea {
    crate::__imports::native_remove_dispatch_spawn_blocking_area(p0)
}
pub fn enable_tennis_mode(ped: u32,
toggle: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfEnableTennisMode {
    crate::__imports::native_enable_tennis_mode(ped,
toggle,
p2)
}
pub fn set_weather_type_now(weather_type: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetWeatherTypeNow {
    crate::__imports::native_set_weather_type_now(weather_type)
}
pub fn is_minigame_in_progress() -> altv_wasm_shared::natives_result::ResultOfIsMinigameInProgress {
    crate::__imports::native_is_minigame_in_progress()
}
pub fn get_status_of_mission_repeat_save() -> altv_wasm_shared::natives_result::ResultOfGetStatusOfMissionRepeatSave {
    crate::__imports::native_get_status_of_mission_repeat_save()
}
pub fn get_replay_stat_mission_type() -> altv_wasm_shared::natives_result::ResultOfGetReplayStatMissionType {
    crate::__imports::native_get_replay_stat_mission_type()
}
pub fn pause_death_arrest_restart(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfPauseDeathArrestRestart {
    crate::__imports::native_pause_death_arrest_restart(toggle)
}
pub fn add_dispatch_spawn_sphere_blocking_area(x1: f32,
y1: f32,
x2: f32,
y2: f32) -> altv_wasm_shared::natives_result::ResultOfAddDispatchSpawnSphereBlockingArea {
    crate::__imports::native_add_dispatch_spawn_sphere_blocking_area(x1,
y1,
x2,
y2)
}
pub fn is_projectile_type_in_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
r#type: i32,
owned_by_player: bool) -> altv_wasm_shared::natives_result::ResultOfIsProjectileTypeInArea {
    crate::__imports::native_is_projectile_type_in_area(x1,
y1,
z1,
x2,
y2,
z2,
r#type,
owned_by_player)
}
pub fn is_next_weather_type(weather_type: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfIsNextWeatherType {
    crate::__imports::native_is_next_weather_type(weather_type)
}
pub fn get_heading_from_vector2d(dx: f32,
dy: f32) -> altv_wasm_shared::natives_result::ResultOfGetHeadingFromVector2d {
    crate::__imports::native_get_heading_from_vector2d(dx,
dy)
}
pub fn activity_feed_add_substring_to_caption(p0: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfActivityFeedAddSubstringToCaption {
    crate::__imports::native_activity_feed_add_substring_to_caption(p0)
}
pub fn get_random_float_in_range(start_range: f32,
end_range: f32) -> altv_wasm_shared::natives_result::ResultOfGetRandomFloatInRange {
    crate::__imports::native_get_random_float_in_range(start_range,
end_range)
}
pub fn water_override_set_oceannoiseminamplitude(min_amplitude: f32) -> altv_wasm_shared::natives_result::ResultOfWaterOverrideSetOceannoiseminamplitude {
    crate::__imports::native_water_override_set_oceannoiseminamplitude(min_amplitude)
}
pub fn add_pop_multiplier_sphere(x: f32,
y: f32,
z: f32,
radius: f32,
ped_multiplier: f32,
vehicle_multiplier: f32,
p6: bool,
p7: bool) -> altv_wasm_shared::natives_result::ResultOfAddPopMultiplierSphere {
    crate::__imports::native_add_pop_multiplier_sphere(x,
y,
z,
radius,
ped_multiplier,
vehicle_multiplier,
p6,
p7)
}
pub fn clear_override_weather() -> altv_wasm_shared::natives_result::ResultOfClearOverrideWeather {
    crate::__imports::native_clear_override_weather()
}
pub fn is_projectile_type_within_distance(x: f32,
y: f32,
z: f32,
projectile_hash: u32,
radius: f32,
owned_by_player: bool) -> altv_wasm_shared::natives_result::ResultOfIsProjectileTypeWithinDistance {
    crate::__imports::native_is_projectile_type_within_distance(x,
y,
z,
projectile_hash,
radius,
owned_by_player)
}
pub fn register_int_to_save(p0: shared::MemoryBufferId,
name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRegisterIntToSave {
    crate::__imports::native_register_int_to_save(p0,
name)
}
pub fn save_end_user_benchmark() -> altv_wasm_shared::natives_result::ResultOfSaveEndUserBenchmark {
    crate::__imports::native_save_end_user_benchmark()
}
pub fn is_area_occupied_slow(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32,
p6: i32,
p7: i32,
p8: i32,
p9: i32,
p10: i32,
p11: i32,
p12: i32) -> altv_wasm_shared::natives_result::ResultOfIsAreaOccupiedSlow {
    crate::__imports::native_is_area_occupied_slow(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8,
p9,
p10,
p11,
p12)
}
pub fn get_status_of_manual_save() -> altv_wasm_shared::natives_result::ResultOfGetStatusOfManualSave {
    crate::__imports::native_get_status_of_manual_save()
}
pub fn landing_screen_started_end_user_benchmark() -> altv_wasm_shared::natives_result::ResultOfLandingScreenStartedEndUserBenchmark {
    crate::__imports::native_landing_screen_started_end_user_benchmark()
}
pub fn get_coords_of_projectile_type_in_angled_area(vec_angled_area_point1_x: f32,
vec_angled_area_point1_y: f32,
vec_angled_area_point1_z: f32,
vec_angled_area_point2_x: f32,
vec_angled_area_point2_y: f32,
vec_angled_area_point2_z: f32,
distance_of_opposite_face: f32,
weapon_type: u32,
position_out: Option<&shared::Vector3>,
b_is_player: bool) -> altv_wasm_shared::natives_result::ResultOfGetCoordsOfProjectileTypeInAngledArea {
    crate::__imports::native_get_coords_of_projectile_type_in_angled_area(vec_angled_area_point1_x,
vec_angled_area_point1_y,
vec_angled_area_point1_z,
vec_angled_area_point2_x,
vec_angled_area_point2_y,
vec_angled_area_point2_z,
distance_of_opposite_face,
weapon_type,
position_out,
b_is_player)
}
pub fn next_onscreen_keyboard_result_will_display_using_these_fonts(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNextOnscreenKeyboardResultWillDisplayUsingTheseFonts {
    crate::__imports::native_next_onscreen_keyboard_result_will_display_using_these_fonts(p0)
}
pub fn is_bullet_in_area(x: f32,
y: f32,
z: f32,
radius: f32,
owned_by_player: bool) -> altv_wasm_shared::natives_result::ResultOfIsBulletInArea {
    crate::__imports::native_is_bullet_in_area(x,
y,
z,
radius,
owned_by_player)
}
pub fn get_real_world_time() -> altv_wasm_shared::natives_result::ResultOfGetRealWorldTime {
    crate::__imports::native_get_real_world_time()
}
pub fn create_incident(dispatch_service: i32,
x: f32,
y: f32,
z: f32,
num_units: i32,
radius: f32,
out_incident_i_d: i32,
p7: i32,
p8: i32) -> altv_wasm_shared::natives_result::ResultOfCreateIncident {
    crate::__imports::native_create_incident(dispatch_service,
x,
y,
z,
num_units,
radius,
out_incident_i_d,
p7,
p8)
}
pub fn water_override_set_oceanwaveamplitude(amplitude: f32) -> altv_wasm_shared::natives_result::ResultOfWaterOverrideSetOceanwaveamplitude {
    crate::__imports::native_water_override_set_oceanwaveamplitude(amplitude)
}
pub fn reset_end_user_benchmark() -> altv_wasm_shared::natives_result::ResultOfResetEndUserBenchmark {
    crate::__imports::native_reset_end_user_benchmark()
}
pub fn set_beast_jump_this_frame(player: u32) -> altv_wasm_shared::natives_result::ResultOfSetBeastJumpThisFrame {
    crate::__imports::native_set_beast_jump_this_frame(player)
}
pub fn set_random_seed(seed: i32) -> altv_wasm_shared::natives_result::ResultOfSetRandomSeed {
    crate::__imports::native_set_random_seed(seed)
}
pub fn queue_mission_repeat_save() -> altv_wasm_shared::natives_result::ResultOfQueueMissionRepeatSave {
    crate::__imports::native_queue_mission_repeat_save()
}
pub fn is_prev_weather_type(weather_type: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfIsPrevWeatherType {
    crate::__imports::native_is_prev_weather_type(weather_type)
}
pub fn set_dispatch_time_between_spawn_attempts(p0: i32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetDispatchTimeBetweenSpawnAttempts {
    crate::__imports::native_set_dispatch_time_between_spawn_attempts(p0,
p1)
}
pub fn add_police_restart(p0: f32,
p1: f32,
p2: f32,
p3: f32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfAddPoliceRestart {
    crate::__imports::native_add_police_restart(p0,
p1,
p2,
p3,
p4)
}
pub fn get_benchmark_iterations() -> altv_wasm_shared::natives_result::ResultOfGetBenchmarkIterations {
    crate::__imports::native_get_benchmark_iterations()
}
pub fn set_dispatch_time_between_spawn_attempts_multiplier(p0: i32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetDispatchTimeBetweenSpawnAttemptsMultiplier {
    crate::__imports::native_set_dispatch_time_between_spawn_attempts_multiplier(p0,
p1)
}
pub fn is_pc_version() -> altv_wasm_shared::natives_result::ResultOfIsPcVersion {
    crate::__imports::native_is_pc_version()
}
pub fn register_text_label23_to_save(p0: shared::MemoryBufferId,
name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRegisterTextLabel23ToSave {
    crate::__imports::native_register_text_label23_to_save(p0,
name)
}
pub fn set_fade_out_after_death(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetFadeOutAfterDeath {
    crate::__imports::native_set_fade_out_after_death(toggle)
}
pub fn set_content_id_index(content_id: u32,
index: i32) -> altv_wasm_shared::natives_result::ResultOfSetContentIdIndex {
    crate::__imports::native_set_content_id_index(content_id,
index)
}
pub fn get_fake_wanted_level() -> altv_wasm_shared::natives_result::ResultOfGetFakeWantedLevel {
    crate::__imports::native_get_fake_wanted_level()
}
pub fn is_durango_version() -> altv_wasm_shared::natives_result::ResultOfIsDurangoVersion {
    crate::__imports::native_is_durango_version()
}
pub fn activity_feed_create(p0: Option<&String>,
p1: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfActivityFeedCreate {
    crate::__imports::native_activity_feed_create(p0,
p1)
}
pub fn set_player_is_in_animal_form(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerIsInAnimalForm {
    crate::__imports::native_set_player_is_in_animal_form(toggle)
}
pub fn set_save_house(savehouse_handle: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetSaveHouse {
    crate::__imports::native_set_save_house(savehouse_handle,
p1,
p2)
}
pub fn do_auto_save() -> altv_wasm_shared::natives_result::ResultOfDoAutoSave {
    crate::__imports::native_do_auto_save()
}
pub fn is_projectile_in_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
owned_by_player: bool) -> altv_wasm_shared::natives_result::ResultOfIsProjectileInArea {
    crate::__imports::native_is_projectile_in_area(x1,
y1,
z1,
x2,
y2,
z2,
owned_by_player)
}
pub fn get_bits_in_range(unk_var: i32,
range_start: i32,
range_end: i32) -> altv_wasm_shared::natives_result::ResultOfGetBitsInRange {
    crate::__imports::native_get_bits_in_range(unk_var,
range_start,
range_end)
}
pub fn set_tennis_move_network_signal_float(ped: u32,
p1: Option<&String>,
p2: f32) -> altv_wasm_shared::natives_result::ResultOfSetTennisMoveNetworkSignalFloat {
    crate::__imports::native_set_tennis_move_network_signal_float(ped,
p1,
p2)
}
pub fn delete_incident(incident_id: i32) -> altv_wasm_shared::natives_result::ResultOfDeleteIncident {
    crate::__imports::native_delete_incident(incident_id)
}
pub fn has_pc_cheat_with_hash_been_activated(hash: u32) -> altv_wasm_shared::natives_result::ResultOfHasPcCheatWithHashBeenActivated {
    crate::__imports::native_has_pc_cheat_with_hash_been_activated(hash)
}
pub fn get_prev_weather_type_hash_name() -> altv_wasm_shared::natives_result::ResultOfGetPrevWeatherTypeHashName {
    crate::__imports::native_get_prev_weather_type_hash_name()
}
pub fn set_game_paused(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetGamePaused {
    crate::__imports::native_set_game_paused(toggle)
}
pub fn set_curr_weather_state(weather_type1: u32,
weather_type2: u32,
percent_weather2: f32) -> altv_wasm_shared::natives_result::ResultOfSetCurrWeatherState {
    crate::__imports::native_set_curr_weather_state(weather_type1,
weather_type2,
percent_weather2)
}
pub fn set_super_jump_this_frame(player: u32) -> altv_wasm_shared::natives_result::ResultOfSetSuperJumpThisFrame {
    crate::__imports::native_set_super_jump_this_frame(player)
}
pub fn reset_dispatch_spawn_location() -> altv_wasm_shared::natives_result::ResultOfResetDispatchSpawnLocation {
    crate::__imports::native_reset_dispatch_spawn_location()
}
pub fn cancel_onscreen_keyboard() -> altv_wasm_shared::natives_result::ResultOfCancelOnscreenKeyboard {
    crate::__imports::native_cancel_onscreen_keyboard()
}
pub fn string_to_int(string: Option<&String>,
out_integer: i32) -> altv_wasm_shared::natives_result::ResultOfStringToInt {
    crate::__imports::native_string_to_int(string,
out_integer)
}
pub fn are_profile_settings_valid() -> altv_wasm_shared::natives_result::ResultOfAreProfileSettingsValid {
    crate::__imports::native_are_profile_settings_valid()
}
pub fn get_replay_stat_mission_id() -> altv_wasm_shared::natives_result::ResultOfGetReplayStatMissionId {
    crate::__imports::native_get_replay_stat_mission_id()
}
pub fn is_tennis_mode(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsTennisMode {
    crate::__imports::native_is_tennis_mode(ped)
}
pub fn start_save_array_with_size(p0: shared::MemoryBufferId,
size: i32,
array_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfStartSaveArrayWithSize {
    crate::__imports::native_start_save_array_with_size(p0,
size,
array_name)
}
pub fn is_sniper_inverted() -> altv_wasm_shared::natives_result::ResultOfIsSniperInverted {
    crate::__imports::native_is_sniper_inverted()
}
pub fn water_override_set_rippleminbumpiness(min_bumpiness: f32) -> altv_wasm_shared::natives_result::ResultOfWaterOverrideSetRippleminbumpiness {
    crate::__imports::native_water_override_set_rippleminbumpiness(min_bumpiness)
}
pub fn tan(p0: f32) -> altv_wasm_shared::natives_result::ResultOfTan {
    crate::__imports::native_tan(p0)
}
pub fn set_rain(intensity: f32) -> altv_wasm_shared::natives_result::ResultOfSetRain {
    crate::__imports::native_set_rain(intensity)
}
pub fn set_script_high_prio(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetScriptHighPrio {
    crate::__imports::native_set_script_high_prio(toggle)
}
pub fn add_pop_multiplier_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
p6: f32,
p7: f32,
p8: bool,
p9: bool) -> altv_wasm_shared::natives_result::ResultOfAddPopMultiplierArea {
    crate::__imports::native_add_pop_multiplier_area(x1,
y1,
z1,
x2,
y2,
z2,
p6,
p7,
p8,
p9)
}
pub fn plm_is_in_constrained_mode() -> altv_wasm_shared::natives_result::ResultOfPlmIsInConstrainedMode {
    crate::__imports::native_plm_is_in_constrained_mode()
}
pub fn get_total_successful_stunt_jumps() -> altv_wasm_shared::natives_result::ResultOfGetTotalSuccessfulStuntJumps {
    crate::__imports::native_get_total_successful_stunt_jumps()
}
pub fn find_spawn_point_in_direction(pos_x: f32,
pos_y: f32,
pos_z: f32,
fwd_vec_x: f32,
fwd_vec_y: f32,
fwd_vec_z: f32,
distance: f32,
spawn_point: Option<&shared::Vector3>) -> altv_wasm_shared::natives_result::ResultOfFindSpawnPointInDirection {
    crate::__imports::native_find_spawn_point_in_direction(pos_x,
pos_y,
pos_z,
fwd_vec_x,
fwd_vec_y,
fwd_vec_z,
distance,
spawn_point)
}
pub fn is_auto_save_in_progress() -> altv_wasm_shared::natives_result::ResultOfIsAutoSaveInProgress {
    crate::__imports::native_is_auto_save_in_progress()
}
pub fn use_active_camera_for_timeslicing_centre() -> altv_wasm_shared::natives_result::ResultOfUseActiveCameraForTimeslicingCentre {
    crate::__imports::native_use_active_camera_for_timeslicing_centre()
}
pub fn add_replay_stat_value(value: i32) -> altv_wasm_shared::natives_result::ResultOfAddReplayStatValue {
    crate::__imports::native_add_replay_stat_value(value)
}
pub fn get_is_auto_save_off() -> altv_wasm_shared::natives_result::ResultOfGetIsAutoSaveOff {
    crate::__imports::native_get_is_auto_save_off()
}
pub fn set_this_is_a_trigger_script(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetThisIsAtriggerScript {
    crate::__imports::native_set_this_is_a_trigger_script(toggle)
}
pub fn register_text_label15_to_save(p0: shared::MemoryBufferId,
name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRegisterTextLabel15ToSave {
    crate::__imports::native_register_text_label15_to_save(p0,
name)
}
pub fn has_game_installed_this_session() -> altv_wasm_shared::natives_result::ResultOfHasGameInstalledThisSession {
    crate::__imports::native_has_game_installed_this_session()
}
pub fn set_dispatch_ideal_spawn_distance(distance: f32) -> altv_wasm_shared::natives_result::ResultOfSetDispatchIdealSpawnDistance {
    crate::__imports::native_set_dispatch_ideal_spawn_distance(distance)
}
pub fn activity_feed_action_start_with_command_line_add(p0: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfActivityFeedActionStartWithCommandLineAdd {
    crate::__imports::native_activity_feed_action_start_with_command_line_add(p0)
}
pub fn set_weather_type_persist(weather_type: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetWeatherTypePersist {
    crate::__imports::native_set_weather_type_persist(weather_type)
}
pub fn set_restart_coord_override(x: f32,
y: f32,
z: f32,
heading: f32) -> altv_wasm_shared::natives_result::ResultOfSetRestartCoordOverride {
    crate::__imports::native_set_restart_coord_override(x,
y,
z,
heading)
}
pub fn get_next_weather_type_hash_name() -> altv_wasm_shared::natives_result::ResultOfGetNextWeatherTypeHashName {
    crate::__imports::native_get_next_weather_type_hash_name()
}
pub fn queue_mission_repeat_load() -> altv_wasm_shared::natives_result::ResultOfQueueMissionRepeatLoad {
    crate::__imports::native_queue_mission_repeat_load()
}
pub fn absf(value: f32) -> altv_wasm_shared::natives_result::ResultOfAbsf {
    crate::__imports::native_absf(value)
}
pub fn set_gravity_level(level: i32) -> altv_wasm_shared::natives_result::ResultOfSetGravityLevel {
    crate::__imports::native_set_gravity_level(level)
}
pub fn populate_now() -> altv_wasm_shared::natives_result::ResultOfPopulateNow {
    crate::__imports::native_populate_now()
}
pub fn stop_save_data() -> altv_wasm_shared::natives_result::ResultOfStopSaveData {
    crate::__imports::native_stop_save_data()
}
pub fn reset_dispatch_ideal_spawn_distance() -> altv_wasm_shared::natives_result::ResultOfResetDispatchIdealSpawnDistance {
    crate::__imports::native_reset_dispatch_ideal_spawn_distance()
}
pub fn is_stunt_jump_in_progress() -> altv_wasm_shared::natives_result::ResultOfIsStuntJumpInProgress {
    crate::__imports::native_is_stunt_jump_in_progress()
}
pub fn is_this_a_minigame_script() -> altv_wasm_shared::natives_result::ResultOfIsThisAminigameScript {
    crate::__imports::native_is_this_a_minigame_script()
}
pub fn water_override_set_ripplebumpiness(bumpiness: f32) -> altv_wasm_shared::natives_result::ResultOfWaterOverrideSetRipplebumpiness {
    crate::__imports::native_water_override_set_ripplebumpiness(bumpiness)
}
pub fn register_float_to_save(p0: shared::MemoryBufferId,
name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRegisterFloatToSave {
    crate::__imports::native_register_float_to_save(p0,
name)
}
pub fn is_frontend_fading() -> altv_wasm_shared::natives_result::ResultOfIsFrontendFading {
    crate::__imports::native_is_frontend_fading()
}
pub fn clear_scenario_spawn_history() -> altv_wasm_shared::natives_result::ResultOfClearScenarioSpawnHistory {
    crate::__imports::native_clear_scenario_spawn_history()
}
pub fn set_snow(level: f32) -> altv_wasm_shared::natives_result::ResultOfSetSnow {
    crate::__imports::native_set_snow(level)
}
pub fn get_ratio_of_closest_point_on_line(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
x3: f32,
y3: f32,
z3: f32,
clamp: bool) -> altv_wasm_shared::natives_result::ResultOfGetRatioOfClosestPointOnLine {
    crate::__imports::native_get_ratio_of_closest_point_on_line(x1,
y1,
z1,
x2,
y2,
z2,
x3,
y3,
z3,
clamp)
}
pub fn is_prospero_version() -> altv_wasm_shared::natives_result::ResultOfIsProsperoVersion {
    crate::__imports::native_is_prospero_version()
}
pub fn get_replay_stat_at_index(index: i32) -> altv_wasm_shared::natives_result::ResultOfGetReplayStatAtIndex {
    crate::__imports::native_get_replay_stat_at_index(index)
}
pub fn register_text_label31_to_save(p0: shared::MemoryBufferId,
name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRegisterTextLabel31ToSave {
    crate::__imports::native_register_text_label31_to_save(p0,
name)
}
pub fn get_projectile_of_projectile_type_within_distance(ped: u32,
weapon_hash: u32,
distance: f32,
out_coords: Option<&shared::Vector3>,
out_projectile: u32,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfGetProjectileOfProjectileTypeWithinDistance {
    crate::__imports::native_get_projectile_of_projectile_type_within_distance(ped,
weapon_hash,
distance,
out_coords,
out_projectile,
p5)
}
pub fn get_onscreen_keyboard_result() -> altv_wasm_shared::natives_result::ResultOfGetOnscreenKeyboardResult {
    crate::__imports::native_get_onscreen_keyboard_result()
}
pub fn shoot_single_bullet_between_coords(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
damage: i32,
p7: bool,
weapon_hash: u32,
owner_ped: u32,
is_audible: bool,
is_invisible: bool,
speed: f32) -> altv_wasm_shared::natives_result::ResultOfShootSingleBulletBetweenCoords {
    crate::__imports::native_shoot_single_bullet_between_coords(x1,
y1,
z1,
x2,
y2,
z2,
damage,
p7,
weapon_hash,
owner_ped,
is_audible,
is_invisible,
speed)
}
pub fn atan2(p0: f32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfAtan2 {
    crate::__imports::native_atan2(p0,
p1)
}
pub fn activity_feed_post() -> altv_wasm_shared::natives_result::ResultOfActivityFeedPost {
    crate::__imports::native_activity_feed_post()
}
pub fn is_memory_card_in_use() -> altv_wasm_shared::natives_result::ResultOfIsMemoryCardInUse {
    crate::__imports::native_is_memory_card_in_use()
}
pub fn set_random_weather_type() -> altv_wasm_shared::natives_result::ResultOfSetRandomWeatherType {
    crate::__imports::native_set_random_weather_type()
}
pub fn get_allocated_stack_size() -> altv_wasm_shared::natives_result::ResultOfGetAllocatedStackSize {
    crate::__imports::native_get_allocated_stack_size()
}
pub fn get_ground_z_and_normal_for3d_coord(x: f32,
y: f32,
z: f32,
ground_z: f32,
normal: Option<&shared::Vector3>) -> altv_wasm_shared::natives_result::ResultOfGetGroundZandNormalFor3dCoord {
    crate::__imports::native_get_ground_z_and_normal_for3d_coord(x,
y,
z,
ground_z,
normal)
}
pub fn inform_code_of_content_id_of_current_ugc_mission(p0: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfInformCodeOfContentIdOfCurrentUgcMission {
    crate::__imports::native_inform_code_of_content_id_of_current_ugc_mission(p0)
}
pub fn get_coords_of_projectile_type_in_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
projectile_hash: u32,
projectile_pos: Option<&shared::Vector3>,
owned_by_player: bool) -> altv_wasm_shared::natives_result::ResultOfGetCoordsOfProjectileTypeInArea {
    crate::__imports::native_get_coords_of_projectile_type_in_area(x1,
y1,
z1,
x2,
y2,
z2,
projectile_hash,
projectile_pos,
owned_by_player)
}
pub fn set_bits_in_range(unk_var: i32,
range_start: i32,
range_end: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfSetBitsInRange {
    crate::__imports::native_set_bits_in_range(unk_var,
range_start,
range_end,
p3)
}
pub fn script_race_get_player_split_time(player: u32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfScriptRaceGetPlayerSplitTime {
    crate::__imports::native_script_race_get_player_split_time(player,
p1,
p2)
}
pub fn play_tennis_dive_anim(ped: u32,
p1: i32,
p2: f32,
p3: f32,
p4: f32,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfPlayTennisDiveAnim {
    crate::__imports::native_play_tennis_dive_anim(ped,
p1,
p2,
p3,
p4,
p5)
}
pub fn activity_feed_large_image_url(p0: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfActivityFeedLargeImageUrl {
    crate::__imports::native_activity_feed_large_image_url(p0)
}
pub fn add_dispatch_spawn_angled_blocking_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
width: f32) -> altv_wasm_shared::natives_result::ResultOfAddDispatchSpawnAngledBlockingArea {
    crate::__imports::native_add_dispatch_spawn_angled_blocking_area(x1,
y1,
z1,
x2,
y2,
z2,
width)
}
pub fn network_set_script_is_safe_for_network_game() -> altv_wasm_shared::natives_result::ResultOfNetworkSetScriptIsSafeForNetworkGame {
    crate::__imports::native_network_set_script_is_safe_for_network_game()
}
pub fn start_end_user_benchmark() -> altv_wasm_shared::natives_result::ResultOfStartEndUserBenchmark {
    crate::__imports::native_start_end_user_benchmark()
}
pub fn set_bit(address: i32,
offset: i32) -> altv_wasm_shared::natives_result::ResultOfSetBit {
    crate::__imports::native_set_bit(address,
offset)
}
pub fn clear_area_leave_vehicle_health(x: f32,
y: f32,
z: f32,
radius: f32,
p4: bool,
p5: bool,
p6: bool,
p7: bool) -> altv_wasm_shared::natives_result::ResultOfClearAreaLeaveVehicleHealth {
    crate::__imports::native_clear_area_leave_vehicle_health(x,
y,
z,
radius,
p4,
p5,
p6,
p7)
}
pub fn unload_all_cloud_hats() -> altv_wasm_shared::natives_result::ResultOfUnloadAllCloudHats {
    crate::__imports::native_unload_all_cloud_hats()
}
pub fn get_rain_level() -> altv_wasm_shared::natives_result::ResultOfGetRainLevel {
    crate::__imports::native_get_rain_level()
}
pub fn get_is_player_in_animal_form() -> altv_wasm_shared::natives_result::ResultOfGetIsPlayerInAnimalForm {
    crate::__imports::native_get_is_player_in_animal_form()
}
pub fn set_random_event_flag(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetRandomEventFlag {
    crate::__imports::native_set_random_event_flag(toggle)
}
pub fn activity_feed_add_int_to_caption(p0: i32) -> altv_wasm_shared::natives_result::ResultOfActivityFeedAddIntToCaption {
    crate::__imports::native_activity_feed_add_int_to_caption(p0)
}
pub fn has_bullet_impacted_in_area(x: f32,
y: f32,
z: f32,
p3: f32,
p4: bool,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfHasBulletImpactedInArea {
    crate::__imports::native_has_bullet_impacted_in_area(x,
y,
z,
p3,
p4,
p5)
}
pub fn get_num_successful_stunt_jumps() -> altv_wasm_shared::natives_result::ResultOfGetNumSuccessfulStuntJumps {
    crate::__imports::native_get_num_successful_stunt_jumps()
}
pub fn block_dispatch_service_resource_creation(dispatch_service: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfBlockDispatchServiceResourceCreation {
    crate::__imports::native_block_dispatch_service_resource_creation(dispatch_service,
toggle)
}
pub fn set_instance_priority_mode(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetInstancePriorityMode {
    crate::__imports::native_set_instance_priority_mode(p0)
}
pub fn get_game_timer() -> altv_wasm_shared::natives_result::ResultOfGetGameTimer {
    crate::__imports::native_get_game_timer()
}
pub fn set_player_is_repeating_a_mission(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerIsRepeatingAmission {
    crate::__imports::native_set_player_is_repeating_a_mission(toggle)
}
pub fn terminate_all_scripts_with_this_name(script_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfTerminateAllScriptsWithThisName {
    crate::__imports::native_terminate_all_scripts_with_this_name(script_name)
}
pub fn get_ground_z_excluding_objects_for3d_coord(x: f32,
y: f32,
z: f32,
ground_z: f32,
p4: bool,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfGetGroundZexcludingObjectsFor3dCoord {
    crate::__imports::native_get_ground_z_excluding_objects_for3d_coord(x,
y,
z,
ground_z,
p4,
p5)
}
pub fn is_aussie_version() -> altv_wasm_shared::natives_result::ResultOfIsAussieVersion {
    crate::__imports::native_is_aussie_version()
}
pub fn water_override_set_ripplemaxbumpiness(max_bumpiness: f32) -> altv_wasm_shared::natives_result::ResultOfWaterOverrideSetRipplemaxbumpiness {
    crate::__imports::native_water_override_set_ripplemaxbumpiness(max_bumpiness)
}
pub fn is_commandline_end_user_benchmark() -> altv_wasm_shared::natives_result::ResultOfIsCommandlineEndUserBenchmark {
    crate::__imports::native_is_commandline_end_user_benchmark()
}
pub fn get_size_of_save_data(p0: bool) -> altv_wasm_shared::natives_result::ResultOfGetSizeOfSaveData {
    crate::__imports::native_get_size_of_save_data(p0)
}
pub fn get_point_area_overlap(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32,
p6: i32,
p7: i32,
p8: i32,
p9: i32,
p10: i32,
p11: i32,
p12: i32,
p13: i32) -> altv_wasm_shared::natives_result::ResultOfGetPointAreaOverlap {
    crate::__imports::native_get_point_area_overlap(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8,
p9,
p10,
p11,
p12,
p13)
}
pub fn set_forced_jump_this_frame(player: u32) -> altv_wasm_shared::natives_result::ResultOfSetForcedJumpThisFrame {
    crate::__imports::native_set_forced_jump_this_frame(player)
}
pub fn end_replay_stats() -> altv_wasm_shared::natives_result::ResultOfEndReplayStats {
    crate::__imports::native_end_replay_stats()
}
pub fn clear_restart_coord_override() -> altv_wasm_shared::natives_result::ResultOfClearRestartCoordOverride {
    crate::__imports::native_clear_restart_coord_override()
}
pub fn get_mission_flag() -> altv_wasm_shared::natives_result::ResultOfGetMissionFlag {
    crate::__imports::native_get_mission_flag()
}
pub fn set_override_weather(weather_type: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetOverrideWeather {
    crate::__imports::native_set_override_weather(weather_type)
}
pub fn get_save_house_details_after_successful_load(p0: Option<&shared::Vector3>,
p1: f32,
fade_in_after_load: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfGetSaveHouseDetailsAfterSuccessfulLoad {
    crate::__imports::native_get_save_house_details_after_successful_load(p0,
p1,
fade_in_after_load,
p3)
}
pub fn disable_stunt_jump_set(p0: i32) -> altv_wasm_shared::natives_result::ResultOfDisableStuntJumpSet {
    crate::__imports::native_disable_stunt_jump_set(p0)
}
pub fn clear_area(x: f32,
y: f32,
z: f32,
radius: f32,
p4: bool,
ignore_cop_cars: bool,
ignore_objects: bool,
p7: bool) -> altv_wasm_shared::natives_result::ResultOfClearArea {
    crate::__imports::native_clear_area(x,
y,
z,
radius,
p4,
ignore_cop_cars,
ignore_objects,
p7)
}
pub fn is_area_occupied(p0: f32,
p1: f32,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
p6: bool,
p7: bool,
p8: bool,
p9: bool,
p10: bool,
p11: i32,
p12: bool) -> altv_wasm_shared::natives_result::ResultOfIsAreaOccupied {
    crate::__imports::native_is_area_occupied(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8,
p9,
p10,
p11,
p12)
}
pub fn set_explosive_ammo_this_frame(player: u32) -> altv_wasm_shared::natives_result::ResultOfSetExplosiveAmmoThisFrame {
    crate::__imports::native_set_explosive_ammo_this_frame(player)
}
pub fn action_manager_enable_action(hash: u32,
enable: bool) -> altv_wasm_shared::natives_result::ResultOfActionManagerEnableAction {
    crate::__imports::native_action_manager_enable_action(hash,
enable)
}
pub fn is_orbis_version() -> altv_wasm_shared::natives_result::ResultOfIsOrbisVersion {
    crate::__imports::native_is_orbis_version()
}
pub fn register_int64_to_save(p0: shared::MemoryBufferId,
name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRegisterInt64ToSave {
    crate::__imports::native_register_int64_to_save(p0,
name)
}
pub fn unload_cloud_hat(name: Option<&String>,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfUnloadCloudHat {
    crate::__imports::native_unload_cloud_hat(name,
p1)
}
pub fn water_override_set_shorewavemaxamplitude(max_amplitude: f32) -> altv_wasm_shared::natives_result::ResultOfWaterOverrideSetShorewavemaxamplitude {
    crate::__imports::native_water_override_set_shorewavemaxamplitude(max_amplitude)
}
pub fn water_override_fade_in(p0: f32) -> altv_wasm_shared::natives_result::ResultOfWaterOverrideFadeIn {
    crate::__imports::native_water_override_fade_in(p0)
}
pub fn get_wind_speed() -> altv_wasm_shared::natives_result::ResultOfGetWindSpeed {
    crate::__imports::native_get_wind_speed()
}
pub fn start_save_data(p0: shared::MemoryBufferId,
p1: i32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfStartSaveData {
    crate::__imports::native_start_save_data(p0,
p1,
p2)
}
pub fn atan(p0: f32) -> altv_wasm_shared::natives_result::ResultOfAtan {
    crate::__imports::native_atan(p0)
}
pub fn set_this_script_can_be_paused(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetThisScriptCanBePaused {
    crate::__imports::native_set_this_script_can_be_paused(toggle)
}
pub fn plm_get_constrained_duration_ms() -> altv_wasm_shared::natives_result::ResultOfPlmGetConstrainedDurationMs {
    crate::__imports::native_plm_get_constrained_duration_ms()
}
pub fn set_wind(speed: f32) -> altv_wasm_shared::natives_result::ResultOfSetWind {
    crate::__imports::native_set_wind(speed)
}
pub fn reset_dispatch_spawn_blocking_areas() -> altv_wasm_shared::natives_result::ResultOfResetDispatchSpawnBlockingAreas {
    crate::__imports::native_reset_dispatch_spawn_blocking_areas()
}
pub fn is_position_occupied(x: f32,
y: f32,
z: f32,
range: f32,
p4: bool,
check_vehicles: bool,
check_peds: bool,
p7: bool,
p8: bool,
ignore_entity: u32,
p10: bool) -> altv_wasm_shared::natives_result::ResultOfIsPositionOccupied {
    crate::__imports::native_is_position_occupied(x,
y,
z,
range,
p4,
check_vehicles,
check_peds,
p7,
p8,
ignore_entity,
p10)
}
pub fn set_incident_requested_units(incident_id: i32,
dispatch_service: i32,
num_units: i32) -> altv_wasm_shared::natives_result::ResultOfSetIncidentRequestedUnits {
    crate::__imports::native_set_incident_requested_units(incident_id,
dispatch_service,
num_units)
}
pub fn remove_pop_multiplier_area(id: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfRemovePopMultiplierArea {
    crate::__imports::native_remove_pop_multiplier_area(id,
p1)
}
pub fn get_base_element_location_from_metadata_block(p0: shared::MemoryBufferId,
p1: shared::MemoryBufferId,
p2: i32,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfGetBaseElementLocationFromMetadataBlock {
    crate::__imports::native_get_base_element_location_from_metadata_block(p0,
p1,
p2,
p3)
}
pub fn clear_tactical_nav_mesh_points() -> altv_wasm_shared::natives_result::ResultOfClearTacticalNavMeshPoints {
    crate::__imports::native_clear_tactical_nav_mesh_points()
}
pub fn water_override_set_oceanwavemaxamplitude(max_amplitude: f32) -> altv_wasm_shared::natives_result::ResultOfWaterOverrideSetOceanwavemaxamplitude {
    crate::__imports::native_water_override_set_oceanwavemaxamplitude(max_amplitude)
}
pub fn set_credits_fade_out_with_screen(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetCreditsFadeOutWithScreen {
    crate::__imports::native_set_credits_fade_out_with_screen(toggle)
}
pub fn add_tactical_nav_mesh_point(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfAddTacticalNavMeshPoint {
    crate::__imports::native_add_tactical_nav_mesh_point(x,
y,
z)
}
pub fn is_japanese_version() -> altv_wasm_shared::natives_result::ResultOfIsJapaneseVersion {
    crate::__imports::native_is_japanese_version()
}
pub fn water_override_set_shorewaveamplitude(amplitude: f32) -> altv_wasm_shared::natives_result::ResultOfWaterOverrideSetShorewaveamplitude {
    crate::__imports::native_water_override_set_shorewaveamplitude(amplitude)
}
pub fn set_credits_active(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetCreditsActive {
    crate::__imports::native_set_credits_active(toggle)
}
pub fn set_this_script_can_remove_blips_created_by_any_script(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetThisScriptCanRemoveBlipsCreatedByAnyScript {
    crate::__imports::native_set_this_script_can_remove_blips_created_by_any_script(toggle)
}
pub fn water_override_set_rippledisturb(disturb: f32) -> altv_wasm_shared::natives_result::ResultOfWaterOverrideSetRippledisturb {
    crate::__imports::native_water_override_set_rippledisturb(disturb)
}
pub fn activity_feed_online_played_with_post(p0: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfActivityFeedOnlinePlayedWithPost {
    crate::__imports::native_activity_feed_online_played_with_post(p0)
}
pub fn add_stunt_jump_angled(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
radius1: f32,
x3: f32,
y3: f32,
z3: f32,
x4: f32,
y4: f32,
z4: f32,
radius2: f32,
cam_x: f32,
cam_y: f32,
cam_z: f32,
p17: i32,
p18: i32,
p19: i32) -> altv_wasm_shared::natives_result::ResultOfAddStuntJumpAngled {
    crate::__imports::native_add_stunt_jump_angled(x1,
y1,
z1,
x2,
y2,
z2,
radius1,
x3,
y3,
z3,
x4,
y4,
z4,
radius2,
cam_x,
cam_y,
cam_z,
p17,
p18,
p19)
}
pub fn clear_area_of_peds(x: f32,
y: f32,
z: f32,
radius: f32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfClearAreaOfPeds {
    crate::__imports::native_clear_area_of_peds(x,
y,
z,
radius,
flags)
}
pub fn start_save_struct_with_size(p0: shared::MemoryBufferId,
size: i32,
struct_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfStartSaveStructWithSize {
    crate::__imports::native_start_save_struct_with_size(p0,
size,
struct_name)
}
pub fn shoot_single_bullet_between_coords_ignore_entity_new(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
damage: i32,
p7: bool,
weapon_hash: u32,
owner_ped: u32,
is_audible: bool,
is_invisible: bool,
speed: f32,
entity: u32,
p14: bool,
p15: bool,
target_entity: u32,
p17: bool,
p18: i32,
p19: i32,
p20: i32) -> altv_wasm_shared::natives_result::ResultOfShootSingleBulletBetweenCoordsIgnoreEntityNew {
    crate::__imports::native_shoot_single_bullet_between_coords_ignore_entity_new(x1,
y1,
z1,
x2,
y2,
z2,
damage,
p7,
weapon_hash,
owner_ped,
is_audible,
is_invisible,
speed,
entity,
p14,
p15,
target_entity,
p17,
p18,
p19,
p20)
}
pub fn register_save_house(x: f32,
y: f32,
z: f32,
p3: f32,
p4: Option<&String>,
p5: i32,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfRegisterSaveHouse {
    crate::__imports::native_register_save_house(x,
y,
z,
p3,
p4,
p5,
p6)
}
pub fn force_game_state_playing() -> altv_wasm_shared::natives_result::ResultOfForceGameStatePlaying {
    crate::__imports::native_force_game_state_playing()
}
pub fn water_override_fade_out(p0: f32) -> altv_wasm_shared::natives_result::ResultOfWaterOverrideFadeOut {
    crate::__imports::native_water_override_fade_out(p0)
}
pub fn water_override_set_shorewaveminamplitude(min_amplitude: f32) -> altv_wasm_shared::natives_result::ResultOfWaterOverrideSetShorewaveminamplitude {
    crate::__imports::native_water_override_set_shorewaveminamplitude(min_amplitude)
}
pub fn set_mission_flag(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetMissionFlag {
    crate::__imports::native_set_mission_flag(toggle)
}
pub fn get_profile_setting(profile_setting: i32) -> altv_wasm_shared::natives_result::ResultOfGetProfileSetting {
    crate::__imports::native_get_profile_setting(profile_setting)
}
pub fn is_scarlett_version() -> altv_wasm_shared::natives_result::ResultOfIsScarlettVersion {
    crate::__imports::native_is_scarlett_version()
}
pub fn water_override_set_strength(strength: f32) -> altv_wasm_shared::natives_result::ResultOfWaterOverrideSetStrength {
    crate::__imports::native_water_override_set_strength(strength)
}
pub fn get_snow_level() -> altv_wasm_shared::natives_result::ResultOfGetSnowLevel {
    crate::__imports::native_get_snow_level()
}
pub fn set_instance_priority_hint(flag: i32) -> altv_wasm_shared::natives_result::ResultOfSetInstancePriorityHint {
    crate::__imports::native_set_instance_priority_hint(flag)
}
pub fn cleanup_async_install() -> altv_wasm_shared::natives_result::ResultOfCleanupAsyncInstall {
    crate::__imports::native_cleanup_async_install()
}
pub fn stop_end_user_benchmark() -> altv_wasm_shared::natives_result::ResultOfStopEndUserBenchmark {
    crate::__imports::native_stop_end_user_benchmark()
}
pub fn asin(p0: f32) -> altv_wasm_shared::natives_result::ResultOfAsin {
    crate::__imports::native_asin(p0)
}
pub fn disable_hospital_restart(hospital_index: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfDisableHospitalRestart {
    crate::__imports::native_disable_hospital_restart(hospital_index,
toggle)
}
pub fn is_incident_valid(incident_id: i32) -> altv_wasm_shared::natives_result::ResultOfIsIncidentValid {
    crate::__imports::native_is_incident_valid(incident_id)
}
pub fn register_bool_to_save(p0: shared::MemoryBufferId,
name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRegisterBoolToSave {
    crate::__imports::native_register_bool_to_save(p0,
name)
}
pub fn get_ground_z_for3d_coord(x: f32,
y: f32,
z: f32,
ground_z: f32,
ignore_water: bool,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfGetGroundZfor3dCoord {
    crate::__imports::native_get_ground_z_for3d_coord(x,
y,
z,
ground_z,
ignore_water,
p5)
}
pub fn set_save_menu_active(ignore_vehicle: bool) -> altv_wasm_shared::natives_result::ResultOfSetSaveMenuActive {
    crate::__imports::native_set_save_menu_active(ignore_vehicle)
}
pub fn is_string_null_or_empty(string: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfIsStringNullOrEmpty {
    crate::__imports::native_is_string_null_or_empty(string)
}
pub fn display_onscreen_keyboard_with_longer_initial_string(p0: i32,
window_title: Option<&String>,
p2: shared::MemoryBufferId,
default_text: Option<&String>,
default_concat1: Option<&String>,
default_concat2: Option<&String>,
default_concat3: Option<&String>,
default_concat4: Option<&String>,
default_concat5: Option<&String>,
default_concat6: Option<&String>,
default_concat7: Option<&String>,
max_input_length: i32) -> altv_wasm_shared::natives_result::ResultOfDisplayOnscreenKeyboardWithLongerInitialString {
    crate::__imports::native_display_onscreen_keyboard_with_longer_initial_string(p0,
window_title,
p2,
default_text,
default_concat1,
default_concat2,
default_concat3,
default_concat4,
default_concat5,
default_concat6,
default_concat7,
max_input_length)
}
pub fn get_index_of_current_level() -> altv_wasm_shared::natives_result::ResultOfGetIndexOfCurrentLevel {
    crate::__imports::native_get_index_of_current_level()
}
pub fn is_ps3_version() -> altv_wasm_shared::natives_result::ResultOfIsPs3Version {
    crate::__imports::native_is_ps3_version()
}
pub fn clear_weather_type_persist() -> altv_wasm_shared::natives_result::ResultOfClearWeatherTypePersist {
    crate::__imports::native_clear_weather_type_persist()
}
pub fn get_city_density() -> altv_wasm_shared::natives_result::ResultOfGetCityDensity {
    crate::__imports::native_get_city_density()
}
pub fn set_dispatch_spawn_location(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfSetDispatchSpawnLocation {
    crate::__imports::native_set_dispatch_spawn_location(x,
y,
z)
}
pub fn are_credits_running() -> altv_wasm_shared::natives_result::ResultOfAreCreditsRunning {
    crate::__imports::native_are_credits_running()
}
pub fn get_hash_key(string: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetHashKey {
    crate::__imports::native_get_hash_key(string)
}
pub fn set_ideal_spawn_distance_for_incident(incident_id: i32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetIdealSpawnDistanceForIncident {
    crate::__imports::native_set_ideal_spawn_distance_for_incident(incident_id,
p1)
}
pub fn get_random_event_flag() -> altv_wasm_shared::natives_result::ResultOfGetRandomEventFlag {
    crate::__imports::native_get_random_event_flag()
}
pub fn should_use_metric_measurements() -> altv_wasm_shared::natives_result::ResultOfShouldUseMetricMeasurements {
    crate::__imports::native_should_use_metric_measurements()
}
pub fn get_random_int_in_range(start_range: i32,
end_range: i32) -> altv_wasm_shared::natives_result::ResultOfGetRandomIntInRange {
    crate::__imports::native_get_random_int_in_range(start_range,
end_range)
}
pub fn have_replay_stats_been_stored() -> altv_wasm_shared::natives_result::ResultOfHaveReplayStatsBeenStored {
    crate::__imports::native_have_replay_stats_been_stored()
}
pub fn set_stunt_jumps_can_trigger(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetStuntJumpsCanTrigger {
    crate::__imports::native_set_stunt_jumps_can_trigger(toggle)
}
pub fn reset_wanted_response_num_peds_to_spawn() -> altv_wasm_shared::natives_result::ResultOfResetWantedResponseNumPedsToSpawn {
    crate::__imports::native_reset_wanted_response_num_peds_to_spawn()
}
pub fn set_fade_in_after_death_arrest(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetFadeInAfterDeathArrest {
    crate::__imports::native_set_fade_in_after_death_arrest(toggle)
}
pub fn enable_dispatch_service(dispatch_service: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfEnableDispatchService {
    crate::__imports::native_enable_dispatch_service(dispatch_service,
toggle)
}
pub fn delete_stunt_jump(p0: i32) -> altv_wasm_shared::natives_result::ResultOfDeleteStuntJump {
    crate::__imports::native_delete_stunt_jump(p0)
}
pub fn has_bullet_impacted_in_box(p0: f32,
p1: f32,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
p6: bool,
p7: bool) -> altv_wasm_shared::natives_result::ResultOfHasBulletImpactedInBox {
    crate::__imports::native_has_bullet_impacted_in_box(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7)
}
pub fn get_replay_stat_count() -> altv_wasm_shared::natives_result::ResultOfGetReplayStatCount {
    crate::__imports::native_get_replay_stat_count()
}
pub fn clear_area_of_objects(x: f32,
y: f32,
z: f32,
radius: f32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfClearAreaOfObjects {
    crate::__imports::native_clear_area_of_objects(x,
y,
z,
radius,
flags)
}
pub fn is_bullet_in_box(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
owned_by_player: bool) -> altv_wasm_shared::natives_result::ResultOfIsBulletInBox {
    crate::__imports::native_is_bullet_in_box(x1,
y1,
z1,
x2,
y2,
z2,
owned_by_player)
}
pub fn allow_mission_creator_warp(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfAllowMissionCreatorWarp {
    crate::__imports::native_allow_mission_creator_warp(toggle)
}
pub fn get_coords_of_projectile_type_within_distance(ped: u32,
weapon_hash: u32,
distance: f32,
out_coords: Option<&shared::Vector3>,
p4: bool) -> altv_wasm_shared::natives_result::ResultOfGetCoordsOfProjectileTypeWithinDistance {
    crate::__imports::native_get_coords_of_projectile_type_within_distance(ped,
weapon_hash,
distance,
out_coords,
p4)
}
pub fn begin_replay_stats(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfBeginReplayStats {
    crate::__imports::native_begin_replay_stats(p0,
p1)
}
pub fn play_tennis_swing_anim(ped: u32,
anim_dict: Option<&String>,
anim_name: Option<&String>,
p3: f32,
p4: f32,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfPlayTennisSwingAnim {
    crate::__imports::native_play_tennis_swing_anim(ped,
anim_dict,
anim_name,
p3,
p4,
p5)
}
pub fn enable_stunt_jump_set(p0: i32) -> altv_wasm_shared::natives_result::ResultOfEnableStuntJumpSet {
    crate::__imports::native_enable_stunt_jump_set(p0)
}
pub fn shoot_single_bullet_between_coords_ignore_entity(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
damage: i32,
p7: bool,
weapon_hash: u32,
owner_ped: u32,
is_audible: bool,
is_invisible: bool,
speed: f32,
entity: u32,
p14: i32) -> altv_wasm_shared::natives_result::ResultOfShootSingleBulletBetweenCoordsIgnoreEntity {
    crate::__imports::native_shoot_single_bullet_between_coords_ignore_entity(x1,
y1,
z1,
x2,
y2,
z2,
damage,
p7,
weapon_hash,
owner_ped,
is_audible,
is_invisible,
speed,
entity,
p14)
}
pub fn prevent_arrest_state_this_frame() -> altv_wasm_shared::natives_result::ResultOfPreventArrestStateThisFrame {
    crate::__imports::native_prevent_arrest_state_this_frame()
}
pub fn set_wanted_response_num_peds_to_spawn(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetWantedResponseNumPedsToSpawn {
    crate::__imports::native_set_wanted_response_num_peds_to_spawn(p0,
p1)
}
pub fn is_point_obscured_by_a_mission_entity(p0: f32,
p1: f32,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfIsPointObscuredByAmissionEntity {
    crate::__imports::native_is_point_obscured_by_a_mission_entity(p0,
p1,
p2,
p3,
p4,
p5,
p6)
}
pub fn restart_game() -> altv_wasm_shared::natives_result::ResultOfRestartGame {
    crate::__imports::native_restart_game()
}
pub fn get_system_time_step() -> altv_wasm_shared::natives_result::ResultOfGetSystemTimeStep {
    crate::__imports::native_get_system_time_step()
}
pub fn remove_pop_multiplier_sphere(id: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfRemovePopMultiplierSphere {
    crate::__imports::native_remove_pop_multiplier_sphere(id,
p1)
}
pub fn cancel_stunt_jump() -> altv_wasm_shared::natives_result::ResultOfCancelStuntJump {
    crate::__imports::native_cancel_stunt_jump()
}
pub fn clear_bit(address: i32,
offset: i32) -> altv_wasm_shared::natives_result::ResultOfClearBit {
    crate::__imports::native_clear_bit(address,
offset)
}
pub fn has_resumed_from_suspend() -> altv_wasm_shared::natives_result::ResultOfHasResumedFromSuspend {
    crate::__imports::native_has_resumed_from_suspend()
}
pub fn get_tennis_swing_anim_swung(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetTennisSwingAnimSwung {
    crate::__imports::native_get_tennis_swing_anim_swung(ped)
}
pub fn ui_started_end_user_benchmark() -> altv_wasm_shared::natives_result::ResultOfUiStartedEndUserBenchmark {
    crate::__imports::native_ui_started_end_user_benchmark()
}
pub fn activity_feed_action_start_with_command_line(p0: Option<&String>,
p1: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfActivityFeedActionStartWithCommandLine {
    crate::__imports::native_activity_feed_action_start_with_command_line(p0,
p1)
}
pub fn set_wind_direction(direction: f32) -> altv_wasm_shared::natives_result::ResultOfSetWindDirection {
    crate::__imports::native_set_wind_direction(direction)
}
pub fn stop_save_struct() -> altv_wasm_shared::natives_result::ResultOfStopSaveStruct {
    crate::__imports::native_stop_save_struct()
}
pub fn queue_mission_repeat_save_for_benchmark_test() -> altv_wasm_shared::natives_result::ResultOfQueueMissionRepeatSaveForBenchmarkTest {
    crate::__imports::native_queue_mission_repeat_save_for_benchmark_test()
}
pub fn reset_dispatch_time_between_spawn_attempts(p0: i32) -> altv_wasm_shared::natives_result::ResultOfResetDispatchTimeBetweenSpawnAttempts {
    crate::__imports::native_reset_dispatch_time_between_spawn_attempts(p0)
}
pub fn get_number_resources_allocated_to_wanted_level(dispatch_service: i32) -> altv_wasm_shared::natives_result::ResultOfGetNumberResourcesAllocatedToWantedLevel {
    crate::__imports::native_get_number_resources_allocated_to_wanted_level(dispatch_service)
}
pub fn quit_game() -> altv_wasm_shared::natives_result::ResultOfQuitGame {
    crate::__imports::native_quit_game()
}
pub fn activity_feed_add_literal_substring_to_caption(p0: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfActivityFeedAddLiteralSubstringToCaption {
    crate::__imports::native_activity_feed_add_literal_substring_to_caption(p0)
}
pub fn get_content_id_index(content_id: u32) -> altv_wasm_shared::natives_result::ResultOfGetContentIdIndex {
    crate::__imports::native_get_content_id_index(content_id)
}
pub fn set_weather_type_now_persist(weather_type: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetWeatherTypeNowPersist {
    crate::__imports::native_set_weather_type_now_persist(weather_type)
}
pub fn register_text_label_to_save(p0: shared::MemoryBufferId,
name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRegisterTextLabelToSave {
    crate::__imports::native_register_text_label_to_save(p0,
name)
}
pub fn set_wind_speed(speed: f32) -> altv_wasm_shared::natives_result::ResultOfSetWindSpeed {
    crate::__imports::native_set_wind_speed(speed)
}
pub fn is_projectile_type_in_angled_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
width: f32,
p7: i32,
owned_by_player: bool) -> altv_wasm_shared::natives_result::ResultOfIsProjectileTypeInAngledArea {
    crate::__imports::native_is_projectile_type_in_angled_area(x1,
y1,
z1,
x2,
y2,
z2,
width,
p7,
owned_by_player)
}
pub fn absi(value: i32) -> altv_wasm_shared::natives_result::ResultOfAbsi {
    crate::__imports::native_absi(value)
}
pub fn using_mission_creator(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfUsingMissionCreator {
    crate::__imports::native_using_mission_creator(toggle)
}
pub fn get_distance_between_coords(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
use_z: bool) -> altv_wasm_shared::natives_result::ResultOfGetDistanceBetweenCoords {
    crate::__imports::native_get_distance_between_coords(x1,
y1,
z1,
x2,
y2,
z2,
use_z)
}
pub fn is_string_null(string: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfIsStringNull {
    crate::__imports::native_is_string_null(string)
}
pub fn get_random_mwc_int_in_range(start_range: i32,
end_range: i32) -> altv_wasm_shared::natives_result::ResultOfGetRandomMwcIntInRange {
    crate::__imports::native_get_random_mwc_int_in_range(start_range,
end_range)
}
pub fn slerp_near_quaternion(t: f32,
x: f32,
y: f32,
z: f32,
w: f32,
x1: f32,
y1: f32,
z1: f32,
w1: f32,
out_x: f32,
out_y: f32,
out_z: f32,
out_w: f32) -> altv_wasm_shared::natives_result::ResultOfSlerpNearQuaternion {
    crate::__imports::native_slerp_near_quaternion(t,
x,
y,
z,
w,
x1,
y1,
z1,
w1,
out_x,
out_y,
out_z,
out_w)
}
pub fn set_clouds_alpha(opacity: f32) -> altv_wasm_shared::natives_result::ResultOfSetCloudsAlpha {
    crate::__imports::native_set_clouds_alpha(opacity)
}
pub fn get_curr_weather_state(weather_type1: u32,
weather_type2: u32,
percent_weather2: f32) -> altv_wasm_shared::natives_result::ResultOfGetCurrWeatherState {
    crate::__imports::native_get_curr_weather_state(weather_type1,
weather_type2,
percent_weather2)
}
pub fn set_fade_in_after_load(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetFadeInAfterLoad {
    crate::__imports::native_set_fade_in_after_load(toggle)
}
pub fn get_line_plane_intersection(p0: f32,
p1: f32,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
p6: f32,
p7: f32,
p8: f32,
p9: f32,
p10: f32,
p11: f32,
p12: f32) -> altv_wasm_shared::natives_result::ResultOfGetLinePlaneIntersection {
    crate::__imports::native_get_line_plane_intersection(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8,
p9,
p10,
p11,
p12)
}
pub fn force_lightning_flash() -> altv_wasm_shared::natives_result::ResultOfForceLightningFlash {
    crate::__imports::native_force_lightning_flash()
}
pub fn is_xbox360_version() -> altv_wasm_shared::natives_result::ResultOfIsXbox360Version {
    crate::__imports::native_is_xbox360_version()
}
pub fn water_override_set_oceanwaveminamplitude(min_amplitude: f32) -> altv_wasm_shared::natives_result::ResultOfWaterOverrideSetOceanwaveminamplitude {
    crate::__imports::native_water_override_set_oceanwaveminamplitude(min_amplitude)
}
pub fn is_sce_platform() -> altv_wasm_shared::natives_result::ResultOfIsScePlatform {
    crate::__imports::native_is_sce_platform()
}
pub fn override_freeze_flags(p0: bool) -> altv_wasm_shared::natives_result::ResultOfOverrideFreezeFlags {
    crate::__imports::native_override_freeze_flags(p0)
}
pub fn register_text_label63_to_save(p0: shared::MemoryBufferId,
name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRegisterTextLabel63ToSave {
    crate::__imports::native_register_text_label63_to_save(p0,
name)
}
pub fn set_ticker_johnmarston_is_done() -> altv_wasm_shared::natives_result::ResultOfSetTickerJohnmarstonIsDone {
    crate::__imports::native_set_ticker_johnmarston_is_done()
}
pub fn set_weather_type_overtime_persist(weather_type: Option<&String>,
time: f32) -> altv_wasm_shared::natives_result::ResultOfSetWeatherTypeOvertimePersist {
    crate::__imports::native_set_weather_type_overtime_persist(weather_type,
time)
}
pub fn toggle_show_optional_stunt_jump_camera(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfToggleShowOptionalStuntJumpCamera {
    crate::__imports::native_toggle_show_optional_stunt_jump_camera(toggle)
}
pub fn load_cloud_hat(name: Option<&String>,
transition_time: f32) -> altv_wasm_shared::natives_result::ResultOfLoadCloudHat {
    crate::__imports::native_load_cloud_hat(name,
transition_time)
}
pub fn get_frame_count() -> altv_wasm_shared::natives_result::ResultOfGetFrameCount {
    crate::__imports::native_get_frame_count()
}
pub fn get_number_of_free_stacks_of_this_size(stack_size: i32) -> altv_wasm_shared::natives_result::ResultOfGetNumberOfFreeStacksOfThisSize {
    crate::__imports::native_get_number_of_free_stacks_of_this_size(stack_size)
}
pub fn is_sniper_bullet_in_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32) -> altv_wasm_shared::natives_result::ResultOfIsSniperBulletInArea {
    crate::__imports::native_is_sniper_bullet_in_area(x1,
y1,
z1,
x2,
y2,
z2)
}
pub fn set_explosive_melee_this_frame(player: u32) -> altv_wasm_shared::natives_result::ResultOfSetExplosiveMeleeThisFrame {
    crate::__imports::native_set_explosive_melee_this_frame(player)
}
pub fn cell_cam_activate_selfie_mode(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfCellCamActivateSelfieMode {
    crate::__imports::native_cell_cam_activate_selfie_mode(toggle)
}
pub fn cell_cam_set_selfie_mode_roll_offset(roll: f32) -> altv_wasm_shared::natives_result::ResultOfCellCamSetSelfieModeRollOffset {
    crate::__imports::native_cell_cam_set_selfie_mode_roll_offset(roll)
}
pub fn cell_cam_set_selfie_mode_side_offset_scaling(p0: f32) -> altv_wasm_shared::natives_result::ResultOfCellCamSetSelfieModeSideOffsetScaling {
    crate::__imports::native_cell_cam_set_selfie_mode_side_offset_scaling(p0)
}
pub fn get_mobile_phone_rotation(rotation: Option<&shared::Vector3>,
p1: u32) -> altv_wasm_shared::natives_result::ResultOfGetMobilePhoneRotation {
    crate::__imports::native_get_mobile_phone_rotation(rotation,
p1)
}
pub fn cell_cam_set_selfie_mode_vert_pan_offset(vert_pan: f32) -> altv_wasm_shared::natives_result::ResultOfCellCamSetSelfieModeVertPanOffset {
    crate::__imports::native_cell_cam_set_selfie_mode_vert_pan_offset(vert_pan)
}
pub fn set_mobile_phone_dof_state(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetMobilePhoneDofState {
    crate::__imports::native_set_mobile_phone_dof_state(toggle)
}
pub fn destroy_mobile_phone() -> altv_wasm_shared::natives_result::ResultOfDestroyMobilePhone {
    crate::__imports::native_destroy_mobile_phone()
}
pub fn cell_cam_is_char_visible_no_face_check(entity: u32) -> altv_wasm_shared::natives_result::ResultOfCellCamIsCharVisibleNoFaceCheck {
    crate::__imports::native_cell_cam_is_char_visible_no_face_check(entity)
}
pub fn cell_horizontal_mode_toggle(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfCellHorizontalModeToggle {
    crate::__imports::native_cell_horizontal_mode_toggle(toggle)
}
pub fn cell_cam_set_selfie_mode_head_pitch_offset(pitch: f32) -> altv_wasm_shared::natives_result::ResultOfCellCamSetSelfieModeHeadPitchOffset {
    crate::__imports::native_cell_cam_set_selfie_mode_head_pitch_offset(pitch)
}
pub fn cell_cam_set_selfie_mode_horz_pan_offset(horizontal_pan: f32) -> altv_wasm_shared::natives_result::ResultOfCellCamSetSelfieModeHorzPanOffset {
    crate::__imports::native_cell_cam_set_selfie_mode_horz_pan_offset(horizontal_pan)
}
pub fn get_mobile_phone_position(position: Option<&shared::Vector3>) -> altv_wasm_shared::natives_result::ResultOfGetMobilePhonePosition {
    crate::__imports::native_get_mobile_phone_position(position)
}
pub fn set_mobile_phone_position(pos_x: f32,
pos_y: f32,
pos_z: f32) -> altv_wasm_shared::natives_result::ResultOfSetMobilePhonePosition {
    crate::__imports::native_set_mobile_phone_position(pos_x,
pos_y,
pos_z)
}
pub fn cell_set_input(direction: i32) -> altv_wasm_shared::natives_result::ResultOfCellSetInput {
    crate::__imports::native_cell_set_input(direction)
}
pub fn cell_cam_activate_shallow_dof_mode(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfCellCamActivateShallowDofMode {
    crate::__imports::native_cell_cam_activate_shallow_dof_mode(toggle)
}
pub fn create_mobile_phone(phone_type: i32) -> altv_wasm_shared::natives_result::ResultOfCreateMobilePhone {
    crate::__imports::native_create_mobile_phone(phone_type)
}
pub fn cell_cam_set_selfie_mode_distance_scaling(distance_scaling: f32) -> altv_wasm_shared::natives_result::ResultOfCellCamSetSelfieModeDistanceScaling {
    crate::__imports::native_cell_cam_set_selfie_mode_distance_scaling(distance_scaling)
}
pub fn get_mobile_phone_render_id(render_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetMobilePhoneRenderId {
    crate::__imports::native_get_mobile_phone_render_id(render_id)
}
pub fn set_mobile_phone_rotation(rot_x: f32,
rot_y: f32,
rot_z: f32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfSetMobilePhoneRotation {
    crate::__imports::native_set_mobile_phone_rotation(rot_x,
rot_y,
rot_z,
p3)
}
pub fn can_phone_be_seen_on_screen() -> altv_wasm_shared::natives_result::ResultOfCanPhoneBeSeenOnScreen {
    crate::__imports::native_can_phone_be_seen_on_screen()
}
pub fn set_mobile_phone_scale(scale: f32) -> altv_wasm_shared::natives_result::ResultOfSetMobilePhoneScale {
    crate::__imports::native_set_mobile_phone_scale(scale)
}
pub fn cell_cam_set_selfie_mode_head_yaw_offset(yaw: f32) -> altv_wasm_shared::natives_result::ResultOfCellCamSetSelfieModeHeadYawOffset {
    crate::__imports::native_cell_cam_set_selfie_mode_head_yaw_offset(yaw)
}
pub fn cell_cam_set_selfie_mode_head_roll_offset(roll: f32) -> altv_wasm_shared::natives_result::ResultOfCellCamSetSelfieModeHeadRollOffset {
    crate::__imports::native_cell_cam_set_selfie_mode_head_roll_offset(roll)
}
pub fn script_is_moving_mobile_phone_offscreen(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfScriptIsMovingMobilePhoneOffscreen {
    crate::__imports::native_script_is_moving_mobile_phone_offscreen(toggle)
}
pub fn cell_cam_activate(p0: bool,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfCellCamActivate {
    crate::__imports::native_cell_cam_activate(p0,
p1)
}
pub fn network_spent_pay_business_supplies(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentPayBusinessSupplies {
    crate::__imports::native_network_spent_pay_business_supplies(p0,
p1,
p2,
p3)
}
pub fn network_earn_wage_payment_bonus(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnWagePaymentBonus {
    crate::__imports::native_network_earn_wage_payment_bonus(amount)
}
pub fn network_earn_from_rockstar(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromRockstar {
    crate::__imports::native_network_earn_from_rockstar(amount)
}
pub fn network_spend_vehicle_requested(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendVehicleRequested {
    crate::__imports::native_network_spend_vehicle_requested(p0,
p1,
p2,
p3,
p4)
}
pub fn network_spend_upgrade_arena(amount: i32,
p1: bool,
p2: bool,
p3: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendUpgradeArena {
    crate::__imports::native_network_spend_upgrade_arena(amount,
p1,
p2,
p3)
}
pub fn network_delete_character(character_slot: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkDeleteCharacter {
    crate::__imports::native_network_delete_character(character_slot,
p1,
p2)
}
pub fn network_spent_order_warehouse_vehicle(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentOrderWarehouseVehicle {
    crate::__imports::native_network_spent_order_warehouse_vehicle(p0,
p1,
p2,
p3)
}
pub fn network_earn_casino_time_trial_win(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnCasinoTimeTrialWin {
    crate::__imports::native_network_earn_casino_time_trial_win(amount)
}
pub fn network_spend_goon(p0: i32,
p1: i32,
amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendGoon {
    crate::__imports::native_network_spend_goon(p0,
p1,
amount)
}
pub fn network_earn_boss(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnBoss {
    crate::__imports::native_network_earn_boss(p0,
p1,
p2)
}
pub fn network_get_can_transfer_cash(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetCanTransferCash {
    crate::__imports::native_network_get_can_transfer_cash(amount)
}
pub fn network_earn_casino_mission_participation(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnCasinoMissionParticipation {
    crate::__imports::native_network_earn_casino_mission_participation(amount)
}
pub fn network_earn_from_business_hub_sell(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromBusinessHubSell {
    crate::__imports::native_network_earn_from_business_hub_sell(p0,
p1,
p2)
}
pub fn network_spent_uprade_bunker(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentUpradeBunker {
    crate::__imports::native_network_spent_uprade_bunker(p0,
p1,
p2,
p3)
}
pub fn network_earn_agency(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnAgency {
    crate::__imports::native_network_earn_agency(p0,
p1,
p2,
p3)
}
pub fn network_spent_buy_tiltrotor(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentBuyTiltrotor {
    crate::__imports::native_network_spent_buy_tiltrotor(p0,
p1,
p2,
p3)
}
pub fn network_spent_pa_service_snack(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentPaServiceSnack {
    crate::__imports::native_network_spent_pa_service_snack(p0,
p1,
p2,
p3)
}
pub fn network_earn_challenge(amount: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnChallenge {
    crate::__imports::native_network_earn_challenge(amount,
p1,
p2)
}
pub fn network_earn_sell_base(amount: i32,
base_name_hash: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnSellBase {
    crate::__imports::native_network_earn_sell_base(amount,
base_name_hash)
}
pub fn network_earn_arena_career_progression(amount: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnArenaCareerProgression {
    crate::__imports::native_network_earn_arena_career_progression(amount,
p1)
}
pub fn network_spent_pa_heli_pickup(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentPaHeliPickup {
    crate::__imports::native_network_spent_pa_heli_pickup(p0,
p1,
p2,
p3)
}
pub fn network_spend_upgrade_acid_lab_equipment(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendUpgradeAcidLabEquipment {
    crate::__imports::native_network_spend_upgrade_acid_lab_equipment(p0,
p1,
p2,
p3)
}
pub fn network_spent_pa_service_heli(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentPaServiceHeli {
    crate::__imports::native_network_spent_pa_service_heli(p0,
p1,
p2,
p3)
}
pub fn network_earn_first_time_bonus(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFirstTimeBonus {
    crate::__imports::native_network_earn_first_time_bonus(p0,
p1,
p2)
}
pub fn network_spend_apartment_utilities(amount: i32,
p1: bool,
p2: bool,
data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendApartmentUtilities {
    crate::__imports::native_network_spend_apartment_utilities(amount,
p1,
p2,
data)
}
pub fn network_earn_doomsday_finale_bonus(amount: i32,
vehicle_hash: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnDoomsdayFinaleBonus {
    crate::__imports::native_network_earn_doomsday_finale_bonus(amount,
vehicle_hash)
}
pub fn network_spent_buy_bunker(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentBuyBunker {
    crate::__imports::native_network_spent_buy_bunker(p0,
p1,
p2,
p3)
}
pub fn network_earn_from_bounty(amount: i32,
gamer_handle: shared::MemoryBufferId,
p2: shared::MemoryBufferId,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromBounty {
    crate::__imports::native_network_earn_from_bounty(amount,
gamer_handle,
p2,
p3)
}
pub fn network_earn_source_participation_acid_lab(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnSourceParticipationAcidLab {
    crate::__imports::native_network_earn_source_participation_acid_lab(p0,
p1)
}
pub fn network_get_pvc_transfer_balance() -> altv_wasm_shared::natives_result::ResultOfNetworkGetPvcTransferBalance {
    crate::__imports::native_network_get_pvc_transfer_balance()
}
pub fn network_spend_car_club_membership(amount1: i32,
p1: i32,
p2: i32,
amount2: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendCarClubMembership {
    crate::__imports::native_network_spend_car_club_membership(amount1,
p1,
p2,
amount2,
p4)
}
pub fn network_earn_award_contract(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnAwardContract {
    crate::__imports::native_network_earn_award_contract(p0,
p1)
}
pub fn network_spent_arena_join_spectator(amount: i32,
p1: i32,
p2: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentArenaJoinSpectator {
    crate::__imports::native_network_spent_arena_join_spectator(amount,
p1,
p2,
p3)
}
pub fn network_casino_can_bet(hash: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkCasinoCanBet {
    crate::__imports::native_network_casino_can_bet(hash)
}
pub fn network_earn_gangops_wages_bonus(amount: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnGangopsWagesBonus {
    crate::__imports::native_network_earn_gangops_wages_bonus(amount,
p1)
}
pub fn network_spent_upgrade_tiltrotor(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentUpgradeTiltrotor {
    crate::__imports::native_network_spent_upgrade_tiltrotor(p0,
p1,
p2,
p3)
}
pub fn network_spent_taxi(amount: i32,
p1: bool,
p2: bool,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentTaxi {
    crate::__imports::native_network_spent_taxi(amount,
p1,
p2,
p3,
p4)
}
pub fn network_deduct_cash(amount: i32,
p1: Option<&String>,
p2: Option<&String>,
p3: bool,
p4: bool,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkDeductCash {
    crate::__imports::native_network_deduct_cash(amount,
p1,
p2,
p3,
p4,
p5)
}
pub fn network_spend_agency(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendAgency {
    crate::__imports::native_network_spend_agency(p0,
p1,
p2,
p3,
p4)
}
pub fn network_service_earn_gangops_rival_delivery(earned_money: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkServiceEarnGangopsRivalDelivery {
    crate::__imports::native_network_service_earn_gangops_rival_delivery(earned_money)
}
pub fn network_spend_bounty_hunter_mission(amount: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendBountyHunterMission {
    crate::__imports::native_network_spend_bounty_hunter_mission(amount,
p1,
p2)
}
pub fn network_earn_gangops_finale(amount: i32,
p1: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnGangopsFinale {
    crate::__imports::native_network_earn_gangops_finale(amount,
p1)
}
pub fn network_can_share_job_cash() -> altv_wasm_shared::natives_result::ResultOfNetworkCanShareJobCash {
    crate::__imports::native_network_can_share_job_cash()
}
pub fn network_spent_betting(amount: i32,
p1: i32,
match_id: Option<&String>,
p3: bool,
p4: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentBetting {
    crate::__imports::native_network_spent_betting(amount,
p1,
match_id,
p3,
p4)
}
pub fn network_spent_upgrade_nightclub_and_warehouse(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentUpgradeNightclubAndWarehouse {
    crate::__imports::native_network_spent_upgrade_nightclub_and_warehouse(p0,
p1,
p2,
p3)
}
pub fn network_earn_from_fmbb_boss_work(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromFmbbBossWork {
    crate::__imports::native_network_earn_from_fmbb_boss_work(p0)
}
pub fn process_cash_gift(p0: i32,
p1: i32,
p2: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfProcessCashGift {
    crate::__imports::native_process_cash_gift(p0,
p1,
p2)
}
pub fn network_spent_upgrade_hacker_truck(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentUpgradeHackerTruck {
    crate::__imports::native_network_spent_upgrade_hacker_truck(p0,
p1,
p2,
p3)
}
pub fn network_earn_fixer_rival_delivery(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFixerRivalDelivery {
    crate::__imports::native_network_earn_fixer_rival_delivery(p0,
p1)
}
pub fn network_earn_gangops_elite(amount: i32,
p1: Option<&String>,
act_index: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnGangopsElite {
    crate::__imports::native_network_earn_gangops_elite(amount,
p1,
act_index)
}
pub fn network_spent_cash_drop(amount: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentCashDrop {
    crate::__imports::native_network_spent_cash_drop(amount,
p1,
p2)
}
pub fn network_spent_job_skip(amount: i32,
match_id: Option<&String>,
p2: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentJobSkip {
    crate::__imports::native_network_spent_job_skip(amount,
match_id,
p2,
p3)
}
pub fn network_spend_upgrade_acid_lab_scoop(p0: i32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendUpgradeAcidLabScoop {
    crate::__imports::native_network_spend_upgrade_acid_lab_scoop(p0,
p1,
p2,
p3)
}
pub fn network_spent_bounty(p0: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentBounty {
    crate::__imports::native_network_spent_bounty(p0,
p1,
p2)
}
pub fn network_spend_gangops_repair_cost(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendGangopsRepairCost {
    crate::__imports::native_network_spend_gangops_repair_cost(p0,
p1,
p2)
}
pub fn network_spent_purchase_hacker_truck(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentPurchaseHackerTruck {
    crate::__imports::native_network_spent_purchase_hacker_truck(p0,
p1,
p2,
p3)
}
pub fn network_spent_upgrade_office_garage(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentUpgradeOfficeGarage {
    crate::__imports::native_network_spent_upgrade_office_garage(p0,
p1,
p2,
p3)
}
pub fn network_earn_from_challenge_win(p0: i32,
p1: shared::MemoryBufferId,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromChallengeWin {
    crate::__imports::native_network_earn_from_challenge_win(p0,
p1,
p2)
}
pub fn network_earn_biker_shop(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnBikerShop {
    crate::__imports::native_network_earn_biker_shop(p0,
p1)
}
pub fn network_spend_gunrunning(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendGunrunning {
    crate::__imports::native_network_spend_gunrunning(p0,
p1,
p2,
p3)
}
pub fn network_earn_gangops_wages(amount: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnGangopsWages {
    crate::__imports::native_network_earn_gangops_wages(amount,
p1)
}
pub fn network_spent_trade_impexp_warehouse_property(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentTradeImpexpWarehouseProperty {
    crate::__imports::native_network_spent_trade_impexp_warehouse_property(p0,
p1,
p2,
p3)
}
pub fn network_buy_contraband_mission(p0: i32,
p1: i32,
p2: u32,
p3: bool,
p4: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkBuyContrabandMission {
    crate::__imports::native_network_buy_contraband_mission(p0,
p1,
p2,
p3,
p4)
}
pub fn network_earn_from_hangar_trade(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromHangarTrade {
    crate::__imports::native_network_earn_from_hangar_trade(p0,
p1)
}
pub fn network_spent_purchase_impexp_warehouse_property(amount: i32,
data: shared::MemoryBufferId,
p2: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentPurchaseImpexpWarehouseProperty {
    crate::__imports::native_network_spent_purchase_impexp_warehouse_property(amount,
data,
p2,
p3)
}
pub fn network_spend_buy_casino(amount: i32,
p1: bool,
p2: bool,
data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendBuyCasino {
    crate::__imports::native_network_spend_buy_casino(amount,
p1,
p2,
data)
}
pub fn network_earn_wage_payment(amount: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnWagePayment {
    crate::__imports::native_network_earn_wage_payment(amount,
p1)
}
pub fn network_spent_upgrade_truck(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentUpgradeTruck {
    crate::__imports::native_network_spent_upgrade_truck(p0,
p1,
p2,
p3)
}
pub fn network_earn_autoshop_business(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnAutoshopBusiness {
    crate::__imports::native_network_earn_autoshop_business(p0,
p1,
p2)
}
pub fn network_earn_agency_contract(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnAgencyContract {
    crate::__imports::native_network_earn_agency_contract(p0,
p1)
}
pub fn network_casino_can_bet_pvc() -> altv_wasm_shared::natives_result::ResultOfNetworkCasinoCanBetPvc {
    crate::__imports::native_network_casino_can_bet_pvc()
}
pub fn network_can_bet(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkCanBet {
    crate::__imports::native_network_can_bet(amount)
}
pub fn network_casino_buy_chips(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkCasinoBuyChips {
    crate::__imports::native_network_casino_buy_chips(p0,
p1)
}
pub fn network_initialize_cash(wallet: i32,
bank: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkInitializeCash {
    crate::__imports::native_network_initialize_cash(wallet,
bank)
}
pub fn network_spent_upgrade_base(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentUpgradeBase {
    crate::__imports::native_network_spent_upgrade_base(p0,
p1,
p2,
p3)
}
pub fn network_earn_from_warehouse(amount: i32,
id: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromWarehouse {
    crate::__imports::native_network_earn_from_warehouse(amount,
id)
}
pub fn network_earn_casino_heist_awards(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnCasinoHeistAwards {
    crate::__imports::native_network_earn_casino_heist_awards(p0,
p1,
p2,
p3,
p4)
}
pub fn network_earn_from_personal_vehicle(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32,
p6: i32,
p7: i32,
p8: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromPersonalVehicle {
    crate::__imports::native_network_earn_from_personal_vehicle(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8)
}
pub fn network_spend_buy_arena(amount: i32,
p1: bool,
p2: bool,
p3: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendBuyArena {
    crate::__imports::native_network_spend_buy_arena(amount,
p1,
p2,
p3)
}
pub fn network_earn_juggalo_story_mission_participation(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnJuggaloStoryMissionParticipation {
    crate::__imports::native_network_earn_juggalo_story_mission_participation(p0,
p1)
}
pub fn network_spent_upgrade_impexp_warehouse_property(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentUpgradeImpexpWarehouseProperty {
    crate::__imports::native_network_spent_upgrade_impexp_warehouse_property(p0,
p1,
p2,
p3)
}
pub fn network_earn_from_business_battle(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromBusinessBattle {
    crate::__imports::native_network_earn_from_business_battle(p0)
}
pub fn network_earn_from_not_badsport(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromNotBadsport {
    crate::__imports::native_network_earn_from_not_badsport(amount)
}
pub fn network_spend_arcade(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendArcade {
    crate::__imports::native_network_spend_arcade(p0,
p1,
p2,
p3,
p4)
}
pub fn network_spend_rename_acid_product(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendRenameAcidProduct {
    crate::__imports::native_network_spend_rename_acid_product(p0,
p1,
p2,
p3)
}
pub fn network_earn_sightseeing_reward(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnSightseeingReward {
    crate::__imports::native_network_earn_sightseeing_reward(p0,
p1,
p2,
p3)
}
pub fn network_earn_from_holdups(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromHoldups {
    crate::__imports::native_network_earn_from_holdups(amount)
}
pub fn network_spend_upgrade_casino(amount: i32,
p1: bool,
p2: bool,
data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendUpgradeCasino {
    crate::__imports::native_network_spend_upgrade_casino(amount,
p1,
p2,
data)
}
pub fn network_spend_casino_heist_skip_mission(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendCasinoHeistSkipMission {
    crate::__imports::native_network_spend_casino_heist_skip_mission(p0,
p1,
p2,
p3)
}
pub fn network_spend_upgrade_acid_lab_mines(p0: i32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendUpgradeAcidLabMines {
    crate::__imports::native_network_spend_upgrade_acid_lab_mines(p0,
p1,
p2,
p3)
}
pub fn network_earn_upgrade_arcade(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnUpgradeArcade {
    crate::__imports::native_network_earn_upgrade_arcade(p0,
p1,
p2)
}
pub fn network_spent_buy_base(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentBuyBase {
    crate::__imports::native_network_spent_buy_base(p0,
p1,
p2,
p3)
}
pub fn network_get_pvc_balance() -> altv_wasm_shared::natives_result::ResultOfNetworkGetPvcBalance {
    crate::__imports::native_network_get_pvc_balance()
}
pub fn network_earn_daily_objective_event(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnDailyObjectiveEvent {
    crate::__imports::native_network_earn_daily_objective_event(amount)
}
pub fn network_earn_from_ai_target_kill(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromAiTargetKill {
    crate::__imports::native_network_earn_from_ai_target_kill(p0,
p1)
}
pub fn network_spent_boat_pickup(p0: i32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentBoatPickup {
    crate::__imports::native_network_spent_boat_pickup(p0,
p1,
p2,
p3)
}
pub fn network_earn_daily_vehicle(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnDailyVehicle {
    crate::__imports::native_network_earn_daily_vehicle(p0,
p1)
}
pub fn network_spend_beach_party(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendBeachParty {
    crate::__imports::native_network_spend_beach_party(p0)
}
pub fn network_earn_collectables_action_figures(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnCollectablesActionFigures {
    crate::__imports::native_network_earn_collectables_action_figures(amount)
}
pub fn network_spend_upgrade_arcade(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendUpgradeArcade {
    crate::__imports::native_network_spend_upgrade_arcade(p0,
p1,
p2,
p3)
}
pub fn network_earn_purchase_club_house(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnPurchaseClubHouse {
    crate::__imports::native_network_earn_purchase_club_house(p0,
p1)
}
pub fn network_earn_casino_mission_reward(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnCasinoMissionReward {
    crate::__imports::native_network_earn_casino_mission_reward(amount)
}
pub fn network_receive_player_jobshare_cash(value: i32,
gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkReceivePlayerJobshareCash {
    crate::__imports::native_network_receive_player_jobshare_cash(value,
gamer_handle)
}
pub fn network_yohan_source_goods(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkYohanSourceGoods {
    crate::__imports::native_network_yohan_source_goods(p0,
p1,
p2,
p3)
}
pub fn network_earn_award_short_trip(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnAwardShortTrip {
    crate::__imports::native_network_earn_award_short_trip(p0,
p1)
}
pub fn network_earn_target_refund(amount: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnTargetRefund {
    crate::__imports::native_network_earn_target_refund(amount,
p1)
}
pub fn network_spent_employ_assassins(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentEmployAssassins {
    crate::__imports::native_network_spent_employ_assassins(p0,
p1,
p2,
p3)
}
pub fn network_spent_jukebox(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentJukebox {
    crate::__imports::native_network_spent_jukebox(p0,
p1,
p2,
p3)
}
pub fn network_earn_collectable_completed_collection(amount: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnCollectableCompletedCollection {
    crate::__imports::native_network_earn_collectable_completed_collection(amount,
p1)
}
pub fn network_get_vc_balance() -> altv_wasm_shared::natives_result::ResultOfNetworkGetVcBalance {
    crate::__imports::native_network_get_vc_balance()
}
pub fn network_can_receive_player_cash(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkCanReceivePlayerCash {
    crate::__imports::native_network_can_receive_player_cash(p0,
p1,
p2,
p3)
}
pub fn network_get_evc_balance() -> altv_wasm_shared::natives_result::ResultOfNetworkGetEvcBalance {
    crate::__imports::native_network_get_evc_balance()
}
pub fn network_spent_ballistic_equipment(amount: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentBallisticEquipment {
    crate::__imports::native_network_spent_ballistic_equipment(amount,
p1,
p2)
}
pub fn network_earn_arena_war_assassinate_target(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnArenaWarAssassinateTarget {
    crate::__imports::native_network_earn_arena_war_assassinate_target(amount)
}
pub fn network_spend_gangops_trip_skip(amount: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendGangopsTripSkip {
    crate::__imports::native_network_spend_gangops_trip_skip(amount,
p1,
p2)
}
pub fn network_spent_change_appearance(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentChangeAppearance {
    crate::__imports::native_network_spent_change_appearance(p0,
p1,
p2)
}
pub fn network_pay_employee_wage(p0: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkPayEmployeeWage {
    crate::__imports::native_network_pay_employee_wage(p0,
p1,
p2)
}
pub fn network_earn_from_bend_job(amount: i32,
heist_hash: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromBendJob {
    crate::__imports::native_network_earn_from_bend_job(amount,
heist_hash)
}
pub fn network_spent_upgrade_hangar(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentUpgradeHangar {
    crate::__imports::native_network_spent_upgrade_hangar(p0,
p1,
p2,
p3)
}
pub fn network_spend_arena_premium(amount: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendArenaPremium {
    crate::__imports::native_network_spend_arena_premium(amount,
p1,
p2)
}
pub fn network_spend_suv_fst_trvl(p0: i32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendSuvFstTrvl {
    crate::__imports::native_network_spend_suv_fst_trvl(p0,
p1,
p2,
p3)
}
pub fn network_earn_fixer_prep(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFixerPrep {
    crate::__imports::native_network_earn_fixer_prep(p0,
p1)
}
pub fn network_earn_arena_war(amount: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnArenaWar {
    crate::__imports::native_network_earn_arena_war(amount,
p1,
p2,
p3)
}
pub fn network_buy_property(cost: i32,
property_name: u32,
p2: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkBuyProperty {
    crate::__imports::native_network_buy_property(cost,
property_name,
p2,
p3)
}
pub fn network_spend_nightclub_and_warehouse(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendNightclubAndWarehouse {
    crate::__imports::native_network_spend_nightclub_and_warehouse(p0,
p1,
p2,
p3)
}
pub fn network_earn_agency_safe(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnAgencySafe {
    crate::__imports::native_network_earn_agency_safe(p0)
}
pub fn network_spent_upgrade_business_property(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentUpgradeBusinessProperty {
    crate::__imports::native_network_spent_upgrade_business_property(p0,
p1,
p2,
p3)
}
pub fn network_earn_spin_the_wheel_cash(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnSpinTheWheelCash {
    crate::__imports::native_network_earn_spin_the_wheel_cash(amount)
}
pub fn network_earn_from_job_bonus(p0: i32,
p1: shared::MemoryBufferId,
p2: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromJobBonus {
    crate::__imports::native_network_earn_from_job_bonus(p0,
p1,
p2)
}
pub fn network_spent_purchase_office_property(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentPurchaseOfficeProperty {
    crate::__imports::native_network_spent_purchase_office_property(p0,
p1,
p2,
p3)
}
pub fn network_spent_from_rockstar(p0: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentFromRockstar {
    crate::__imports::native_network_spent_from_rockstar(p0,
p1,
p2)
}
pub fn network_spent_cinema(p0: i32,
p1: i32,
p2: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentCinema {
    crate::__imports::native_network_spent_cinema(p0,
p1,
p2,
p3)
}
pub fn network_earn_from_smuggler_work(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromSmugglerWork {
    crate::__imports::native_network_earn_from_smuggler_work(p0,
p1,
p2,
p3,
p4)
}
pub fn network_spend_submarine(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendSubmarine {
    crate::__imports::native_network_spend_submarine(p0,
p1,
p2,
p3,
p4,
p5)
}
pub fn network_spend_upgrade_agency(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendUpgradeAgency {
    crate::__imports::native_network_spend_upgrade_agency(p0,
p1,
p2,
p3)
}
pub fn network_spent_buy_passive_mode(p0: i32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentBuyPassiveMode {
    crate::__imports::native_network_spent_buy_passive_mode(p0,
p1,
p2,
p3)
}
pub fn network_spent_buy_reveal_players(p0: i32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentBuyRevealPlayers {
    crate::__imports::native_network_spent_buy_reveal_players(p0,
p1,
p2,
p3)
}
pub fn network_earn_from_daily_objectives(amount: i32,
r#type: Option<&String>,
character_slot: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromDailyObjectives {
    crate::__imports::native_network_earn_from_daily_objectives(amount,
r#type,
character_slot)
}
pub fn was_vc_withdrawal_successful(p0: i32) -> altv_wasm_shared::natives_result::ResultOfWasVcWithdrawalSuccessful {
    crate::__imports::native_was_vc_withdrawal_successful(p0)
}
pub fn network_spent_purchase_business_property(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentPurchaseBusinessProperty {
    crate::__imports::native_network_spent_purchase_business_property(p0,
p1,
p2,
p3)
}
pub fn network_get_string_bank_wallet_balance() -> altv_wasm_shared::natives_result::ResultOfNetworkGetStringBankWalletBalance {
    crate::__imports::native_network_get_string_bank_wallet_balance()
}
pub fn network_spend_arena_spectator_box(amount: i32,
r#type: i32,
p2: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendArenaSpectatorBox {
    crate::__imports::native_network_spend_arena_spectator_box(amount,
r#type,
p2,
p3)
}
pub fn network_earn_from_cashing_out(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromCashingOut {
    crate::__imports::native_network_earn_from_cashing_out(amount)
}
pub fn network_earn_biker(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnBiker {
    crate::__imports::native_network_earn_biker(p0)
}
pub fn network_earn_casino_heist(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnCasinoHeist {
    crate::__imports::native_network_earn_casino_heist(p0,
p1,
p2,
p3,
p4,
p5,
p6)
}
pub fn network_can_spend_money2(p0: i32,
p1: bool,
p2: bool,
p3: bool,
p4: shared::MemoryBufferId,
p5: i32,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkCanSpendMoney2 {
    crate::__imports::native_network_can_spend_money2(p0,
p1,
p2,
p3,
p4,
p5,
p6)
}
pub fn network_earn_award_phone(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnAwardPhone {
    crate::__imports::native_network_earn_award_phone(p0,
p1)
}
pub fn network_buy_smokes(p0: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkBuySmokes {
    crate::__imports::native_network_buy_smokes(p0,
p1,
p2)
}
pub fn network_buy_airstrike(cost: i32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkBuyAirstrike {
    crate::__imports::native_network_buy_airstrike(cost,
p1,
p2,
p3)
}
pub fn network_get_vc_bank_balance() -> altv_wasm_shared::natives_result::ResultOfNetworkGetVcBankBalance {
    crate::__imports::native_network_get_vc_bank_balance()
}
pub fn network_spend_gangops_cannon(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendGangopsCannon {
    crate::__imports::native_network_spend_gangops_cannon(p0,
p1,
p2,
p3)
}
pub fn network_earn_sell_acid(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnSellAcid {
    crate::__imports::native_network_earn_sell_acid(p0,
p1)
}
pub fn network_earn_rdr_bonus(amount: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnRdrBonus {
    crate::__imports::native_network_earn_rdr_bonus(amount,
p1)
}
pub fn network_buy_bounty(amount: i32,
victim: u32,
p2: bool,
p3: bool,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkBuyBounty {
    crate::__imports::native_network_buy_bounty(amount,
victim,
p2,
p3,
p4)
}
pub fn network_spent_heli_pickup(p0: i32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentHeliPickup {
    crate::__imports::native_network_spent_heli_pickup(p0,
p1,
p2,
p3)
}
pub fn network_economy_has_fixed_crazy_numbers() -> altv_wasm_shared::natives_result::ResultOfNetworkEconomyHasFixedCrazyNumbers {
    crate::__imports::native_network_economy_has_fixed_crazy_numbers()
}
pub fn network_spent_player_healthcare(p0: i32,
p1: i32,
p2: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentPlayerHealthcare {
    crate::__imports::native_network_spent_player_healthcare(p0,
p1,
p2,
p3)
}
pub fn network_spend_set_discount(p0: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendSetDiscount {
    crate::__imports::native_network_spend_set_discount(p0)
}
pub fn network_spent_telescope(p0: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentTelescope {
    crate::__imports::native_network_spent_telescope(p0,
p1,
p2)
}
pub fn network_spent_arrest_bail(p0: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentArrestBail {
    crate::__imports::native_network_spent_arrest_bail(p0,
p1,
p2)
}
pub fn network_money_can_bet(amount: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkMoneyCanBet {
    crate::__imports::native_network_money_can_bet(amount,
p1,
p2)
}
pub fn network_buy_heli_strike(cost: i32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkBuyHeliStrike {
    crate::__imports::native_network_buy_heli_strike(cost,
p1,
p2,
p3)
}
pub fn network_spent_request_job(p0: i32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentRequestJob {
    crate::__imports::native_network_spent_request_job(p0,
p1,
p2,
p3)
}
pub fn network_manual_delete_character(character_slot: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkManualDeleteCharacter {
    crate::__imports::native_network_manual_delete_character(character_slot)
}
pub fn network_earn_from_betting(amount: i32,
p1: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromBetting {
    crate::__imports::native_network_earn_from_betting(amount,
p1)
}
pub fn network_earn_casino_collectable_completed_collection(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnCasinoCollectableCompletedCollection {
    crate::__imports::native_network_earn_casino_collectable_completed_collection(amount)
}
pub fn network_spend_rename_acid_lab(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendRenameAcidLab {
    crate::__imports::native_network_spend_rename_acid_lab(p0,
p1,
p2,
p3)
}
pub fn network_earn_from_property(amount: i32,
property_name: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromProperty {
    crate::__imports::native_network_earn_from_property(amount,
property_name)
}
pub fn network_earn_from_destroying_contraband(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromDestroyingContraband {
    crate::__imports::native_network_earn_from_destroying_contraband(p0)
}
pub fn network_earn_collectable_item(amount: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnCollectableItem {
    crate::__imports::native_network_earn_collectable_item(amount,
p1)
}
pub fn network_earn_from_business_product(amount: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromBusinessProduct {
    crate::__imports::native_network_earn_from_business_product(amount,
p1,
p2,
p3)
}
pub fn network_spend_buy_arcade(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendBuyArcade {
    crate::__imports::native_network_spend_buy_arcade(p0,
p1,
p2,
p3)
}
pub fn network_spent_nightclub_entry_fee(player: u32,
amount: i32,
p1: i32,
p2: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentNightclubEntryFee {
    crate::__imports::native_network_spent_nightclub_entry_fee(player,
amount,
p1,
p2,
p3)
}
pub fn network_spend_casino_generic(amount: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendCasinoGeneric {
    crate::__imports::native_network_spend_casino_generic(amount,
p1,
p2,
p3,
p4)
}
pub fn network_earn_award_fixer_mission(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnAwardFixerMission {
    crate::__imports::native_network_earn_award_fixer_mission(p0,
p1)
}
pub fn network_spend_upgrade_sub(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendUpgradeSub {
    crate::__imports::native_network_spend_upgrade_sub(p0,
p1,
p2,
p3)
}
pub fn network_casino_can_buy_chips_pvc() -> altv_wasm_shared::natives_result::ResultOfNetworkCasinoCanBuyChipsPvc {
    crate::__imports::native_network_casino_can_buy_chips_pvc()
}
pub fn network_buy_fairground_ride(amount: i32,
p1: i32,
p2: bool,
p3: bool,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkBuyFairgroundRide {
    crate::__imports::native_network_buy_fairground_ride(amount,
p1,
p2,
p3,
p4)
}
pub fn network_earn_sell_prize_vehicle(amount: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnSellPrizeVehicle {
    crate::__imports::native_network_earn_sell_prize_vehicle(amount,
p1,
p2)
}
pub fn network_spent_upgrade_office_property(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentUpgradeOfficeProperty {
    crate::__imports::native_network_spent_upgrade_office_property(p0,
p1,
p2,
p3)
}
pub fn network_spend_buy_sub(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendBuySub {
    crate::__imports::native_network_spend_buy_sub(p0,
p1,
p2,
p3)
}
pub fn network_spend_bike_shop(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendBikeShop {
    crate::__imports::native_network_spend_bike_shop(p0,
p1,
p2,
p3)
}
pub fn network_earn_from_sell_bunker(amount: i32,
bunker_hash: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromSellBunker {
    crate::__imports::native_network_earn_from_sell_bunker(amount,
bunker_hash)
}
pub fn network_spend_car_club_bar(p0: i32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendCarClubBar {
    crate::__imports::native_network_spend_car_club_bar(p0,
p1,
p2,
p3)
}
pub fn network_spend_business_property_fees(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendBusinessPropertyFees {
    crate::__imports::native_network_spend_business_property_fees(p0,
p1,
p2,
p3)
}
pub fn network_pay_match_entry_fee(amount: i32,
match_id: Option<&String>,
p2: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkPayMatchEntryFee {
    crate::__imports::native_network_pay_match_entry_fee(amount,
match_id,
p2,
p3)
}
pub fn network_spend_interaction_menu_ability(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendInteractionMenuAbility {
    crate::__imports::native_network_spend_interaction_menu_ability(p0,
p1,
p2,
p3)
}
pub fn network_spent_cargo_sourcing(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentCargoSourcing {
    crate::__imports::native_network_spent_cargo_sourcing(p0,
p1,
p2,
p3,
p4,
p5)
}
pub fn network_earn_casino_award(amount: i32,
hash: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnCasinoAward {
    crate::__imports::native_network_earn_casino_award(amount,
hash)
}
pub fn can_pay_amount_to_boss(p0: i32,
p1: i32,
amount: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfCanPayAmountToBoss {
    crate::__imports::native_can_pay_amount_to_boss(p0,
p1,
amount,
p3)
}
pub fn network_earn_taxi_job(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnTaxiJob {
    crate::__imports::native_network_earn_taxi_job(p0,
p1)
}
pub fn network_spent_robbed_by_mugger(amount: i32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentRobbedByMugger {
    crate::__imports::native_network_spent_robbed_by_mugger(amount,
p1,
p2,
p3)
}
pub fn network_spent_purchase_club_house(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentPurchaseClubHouse {
    crate::__imports::native_network_spent_purchase_club_house(p0,
p1,
p2,
p3)
}
pub fn network_spend_spin_the_wheel_payment(amount: i32,
p1: i32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendSpinTheWheelPayment {
    crate::__imports::native_network_spend_spin_the_wheel_payment(amount,
p1,
p2)
}
pub fn network_spend_earned_from_bank_and_wallets(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendEarnedFromBankAndWallets {
    crate::__imports::native_network_spend_earned_from_bank_and_wallets(amount)
}
pub fn network_spend_autoshop_modify(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendAutoshopModify {
    crate::__imports::native_network_spend_autoshop_modify(p0,
p1,
p2,
p3,
p4)
}
pub fn network_earn_daily_stash_house_participation(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnDailyStashHouseParticipation {
    crate::__imports::native_network_earn_daily_stash_house_participation(p0,
p1)
}
pub fn network_spent_request_heist(p0: i32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentRequestHeist {
    crate::__imports::native_network_spent_request_heist(p0,
p1,
p2,
p3)
}
pub fn network_earn_heist_award(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnHeistAward {
    crate::__imports::native_network_earn_heist_award(p0,
p1,
p2)
}
pub fn network_spent_pay_vehicle_insurance_premium(amount: i32,
vehicle_model: u32,
gamer_handle: shared::MemoryBufferId,
not_bankrupt: bool,
has_the_money: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentPayVehicleInsurancePremium {
    crate::__imports::native_network_spent_pay_vehicle_insurance_premium(amount,
vehicle_model,
gamer_handle,
not_bankrupt,
has_the_money)
}
pub fn network_earn_from_gangattack_pickup(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromGangattackPickup {
    crate::__imports::native_network_earn_from_gangattack_pickup(amount)
}
pub fn network_spend_gangops_start_strand(r#type: i32,
amount: i32,
p2: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendGangopsStartStrand {
    crate::__imports::native_network_spend_gangops_start_strand(r#type,
amount,
p2,
p3)
}
pub fn network_spend_buy_mfgarage(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendBuyMfgarage {
    crate::__imports::native_network_spend_buy_mfgarage(p0,
p1,
p2,
p3)
}
pub fn network_get_can_spend_from_bank(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetCanSpendFromBank {
    crate::__imports::native_network_get_can_spend_from_bank(amount)
}
pub fn network_buy_backup_gang(p0: i32,
p1: i32,
p2: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkBuyBackupGang {
    crate::__imports::native_network_buy_backup_gang(p0,
p1,
p2,
p3)
}
pub fn network_get_vc_wallet_balance(character_slot: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetVcWalletBalance {
    crate::__imports::native_network_get_vc_wallet_balance(character_slot)
}
pub fn network_earn_beach_party_lost_found(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnBeachPartyLostFound {
    crate::__imports::native_network_earn_beach_party_lost_found(p0,
p1,
p2)
}
pub fn network_spent_trade_business_property(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentTradeBusinessProperty {
    crate::__imports::native_network_spent_trade_business_property(p0,
p1,
p2,
p3)
}
pub fn network_spent_buy_offtheradar(p0: i32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentBuyOfftheradar {
    crate::__imports::native_network_spent_buy_offtheradar(p0,
p1,
p2,
p3)
}
pub fn network_spent_bull_shark(p0: i32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentBullShark {
    crate::__imports::native_network_spent_bull_shark(p0,
p1,
p2,
p3)
}
pub fn network_get_string_bank_balance() -> altv_wasm_shared::natives_result::ResultOfNetworkGetStringBankBalance {
    crate::__imports::native_network_get_string_bank_balance()
}
pub fn network_spent_vehicle_export_mods(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32,
p6: i32,
p7: i32,
p8: i32,
p9: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentVehicleExportMods {
    crate::__imports::native_network_spent_vehicle_export_mods(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8,
p9)
}
pub fn network_earn_from_club_management_participation(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromClubManagementParticipation {
    crate::__imports::native_network_earn_from_club_management_participation(p0,
p1)
}
pub fn network_spend_upgrade_acid_lab_armor(p0: i32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendUpgradeAcidLabArmor {
    crate::__imports::native_network_spend_upgrade_acid_lab_armor(p0,
p1,
p2,
p3)
}
pub fn network_earn_street_dealer(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnStreetDealer {
    crate::__imports::native_network_earn_street_dealer(p0,
p1)
}
pub fn network_earn_arena_war_event_cargo(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnArenaWarEventCargo {
    crate::__imports::native_network_earn_arena_war_event_cargo(amount)
}
pub fn network_earn_award_taxi(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnAwardTaxi {
    crate::__imports::native_network_earn_award_taxi(p0,
p1)
}
pub fn network_earn_gangops_setup(amount: i32,
p1: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnGangopsSetup {
    crate::__imports::native_network_earn_gangops_setup(amount,
p1)
}
pub fn network_clear_character_wallet(character_slot: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkClearCharacterWallet {
    crate::__imports::native_network_clear_character_wallet(character_slot)
}
pub fn network_earn_collectables(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnCollectables {
    crate::__imports::native_network_earn_collectables(p0,
p1,
p2)
}
pub fn network_spent_upgrade_warehouse_property(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentUpgradeWarehouseProperty {
    crate::__imports::native_network_spent_upgrade_warehouse_property(p0,
p1,
p2,
p3)
}
pub fn network_earn_gangops_award(amount: i32,
p1: Option<&String>,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnGangopsAward {
    crate::__imports::native_network_earn_gangops_award(amount,
p1,
p2)
}
pub fn network_can_spend_money(p0: i32,
p1: bool,
p2: bool,
p3: bool,
p4: i32,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkCanSpendMoney {
    crate::__imports::native_network_can_spend_money(p0,
p1,
p2,
p3,
p4,
p5)
}
pub fn network_spent_buy_truck(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentBuyTruck {
    crate::__imports::native_network_spent_buy_truck(p0,
p1,
p2,
p3)
}
pub fn network_earn_casino_story_mission_reward(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnCasinoStoryMissionReward {
    crate::__imports::native_network_earn_casino_story_mission_reward(amount)
}
pub fn network_spent_call_player(p0: i32,
p1: shared::MemoryBufferId,
p2: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentCallPlayer {
    crate::__imports::native_network_spent_call_player(p0,
p1,
p2,
p3)
}
pub fn network_spent_ammo_drop(p0: i32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentAmmoDrop {
    crate::__imports::native_network_spent_ammo_drop(p0,
p1,
p2,
p3)
}
pub fn network_spent_hangar_utility_charges(amount: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentHangarUtilityCharges {
    crate::__imports::native_network_spent_hangar_utility_charges(amount,
p1,
p2)
}
pub fn network_earn_from_crate_drop(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromCrateDrop {
    crate::__imports::native_network_earn_from_crate_drop(amount)
}
pub fn network_spent_hangar_staff_charges(amount: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentHangarStaffCharges {
    crate::__imports::native_network_spent_hangar_staff_charges(amount,
p1,
p2)
}
pub fn network_spent_prostitutes(p0: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentProstitutes {
    crate::__imports::native_network_spent_prostitutes(p0,
p1,
p2)
}
pub fn network_earn_from_job(amount: i32,
p1: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromJob {
    crate::__imports::native_network_earn_from_job(amount,
p1)
}
pub fn network_spend_buy_supplies(p0: i32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendBuySupplies {
    crate::__imports::native_network_spend_buy_supplies(p0,
p1,
p2,
p3)
}
pub fn network_spent_pa_service_dancer(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentPaServiceDancer {
    crate::__imports::native_network_spent_pa_service_dancer(p0,
p1,
p2,
p3)
}
pub fn network_spent_purchase_office_garage(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentPurchaseOfficeGarage {
    crate::__imports::native_network_spent_purchase_office_garage(p0,
p1,
p2,
p3)
}
pub fn network_earn_nightclub_dancing(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnNightclubDancing {
    crate::__imports::native_network_earn_nightclub_dancing(p0)
}
pub fn network_earn_from_vehicle(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32,
p6: i32,
p7: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromVehicle {
    crate::__imports::native_network_earn_from_vehicle(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7)
}
pub fn network_spend_arcade_mgmt(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendArcadeMgmt {
    crate::__imports::native_network_spend_arcade_mgmt(p0,
p1,
p2,
p3,
p4)
}
pub fn network_earn_tuner_award(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnTunerAward {
    crate::__imports::native_network_earn_tuner_award(p0,
p1,
p2)
}
pub fn network_spend_set_common_fields(p0: i32,
p1: i32,
p2: i32,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendSetCommonFields {
    crate::__imports::native_network_spend_set_common_fields(p0,
p1,
p2,
p3)
}
pub fn network_earn_fixer_finale(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFixerFinale {
    crate::__imports::native_network_earn_fixer_finale(p0,
p1)
}
pub fn network_earn_carclub_membership(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnCarclubMembership {
    crate::__imports::native_network_earn_carclub_membership(p0)
}
pub fn network_earn_tuner_robbery(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnTunerRobbery {
    crate::__imports::native_network_earn_tuner_robbery(p0,
p1,
p2,
p3,
p4)
}
pub fn network_spent_purchase_warehouse_property(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentPurchaseWarehouseProperty {
    crate::__imports::native_network_spent_purchase_warehouse_property(p0,
p1,
p2,
p3)
}
pub fn network_earn_award_random_event(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnAwardRandomEvent {
    crate::__imports::native_network_earn_award_random_event(p0,
p1)
}
pub fn network_spend_hidden(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendHidden {
    crate::__imports::native_network_spend_hidden(p0,
p1,
p2,
p3)
}
pub fn network_earn_upgrade_autoshop(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnUpgradeAutoshop {
    crate::__imports::native_network_earn_upgrade_autoshop(p0,
p1)
}
pub fn network_spent_import_export_repair(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentImportExportRepair {
    crate::__imports::native_network_spent_import_export_repair(p0,
p1,
p2)
}
pub fn network_earn_award_daily_stash(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnAwardDailyStash {
    crate::__imports::native_network_earn_award_daily_stash(p0,
p1)
}
pub fn network_earn_fooligan_job_participation(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFooliganJobParticipation {
    crate::__imports::native_network_earn_fooligan_job_participation(p0,
p1)
}
pub fn network_earn_from_fmbb_phonecall_mission(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromFmbbPhonecallMission {
    crate::__imports::native_network_earn_from_fmbb_phonecall_mission(p0)
}
pub fn network_earn_autoshop_income(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnAutoshopIncome {
    crate::__imports::native_network_earn_autoshop_income(p0,
p1)
}
pub fn network_earn_nightclub_and_warehouse(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnNightclubAndWarehouse {
    crate::__imports::native_network_earn_nightclub_and_warehouse(p0,
p1,
p2,
p3,
p4,
p5,
p6)
}
pub fn network_earn_from_premium_job(amount: i32,
p1: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromPremiumJob {
    crate::__imports::native_network_earn_from_premium_job(amount,
p1)
}
pub fn network_spend_casino_club(amount1: i32,
p1: i32,
p2: bool,
p3: i32,
p4: i32,
p5: i32,
p6: i32,
amount2: i32,
p8: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendCasinoClub {
    crate::__imports::native_network_spend_casino_club(amount1,
p1,
p2,
p3,
p4,
p5,
p6,
amount2,
p8)
}
pub fn network_spent_bank_interest(p0: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentBankInterest {
    crate::__imports::native_network_spent_bank_interest(p0,
p1,
p2)
}
pub fn network_earn_sell_participation_acid_lab(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnSellParticipationAcidLab {
    crate::__imports::native_network_earn_sell_participation_acid_lab(p0,
p1)
}
pub fn network_earn_daily_stash_house_completed(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnDailyStashHouseCompleted {
    crate::__imports::native_network_earn_daily_stash_house_completed(p0,
p1)
}
pub fn network_earn_dar_challenge(amount: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnDarChallenge {
    crate::__imports::native_network_earn_dar_challenge(amount,
p1)
}
pub fn network_spent_purchase_hangar(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentPurchaseHangar {
    crate::__imports::native_network_spent_purchase_hangar(p0,
p1,
p2,
p3)
}
pub fn network_defer_cash_transactions_until_shop_save() -> altv_wasm_shared::natives_result::ResultOfNetworkDeferCashTransactionsUntilShopSave {
    crate::__imports::native_network_defer_cash_transactions_until_shop_save()
}
pub fn network_spent_move_submarine(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentMoveSubmarine {
    crate::__imports::native_network_spent_move_submarine(p0,
p1,
p2)
}
pub fn network_earn_goon(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnGoon {
    crate::__imports::native_network_earn_goon(p0,
p1,
p2)
}
pub fn network_earn_fooligan_job(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFooliganJob {
    crate::__imports::native_network_earn_fooligan_job(p0,
p1)
}
pub fn network_spend_upgrade_mfgarage(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendUpgradeMfgarage {
    crate::__imports::native_network_spend_upgrade_mfgarage(p0,
p1,
p2,
p3)
}
pub fn network_earn_award_dead_drop(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnAwardDeadDrop {
    crate::__imports::native_network_earn_award_dead_drop(p0,
p1)
}
pub fn network_earn_upgrade_agency(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnUpgradeAgency {
    crate::__imports::native_network_earn_upgrade_agency(p0,
p1)
}
pub fn network_earn_award_acid_lab(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnAwardAcidLab {
    crate::__imports::native_network_earn_award_acid_lab(p0,
p1)
}
pub fn network_spend_car_club_takeover(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendCarClubTakeover {
    crate::__imports::native_network_spend_car_club_takeover(p0,
p1,
p2,
p3)
}
pub fn network_earn_island_heist(amount1: i32,
p1: i32,
p2: i32,
p3: i32,
amount2: i32,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnIslandHeist {
    crate::__imports::native_network_earn_island_heist(amount1,
p1,
p2,
p3,
amount2,
p5)
}
pub fn network_earn_arcade(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnArcade {
    crate::__imports::native_network_earn_arcade(p0,
p1,
p2,
p3,
p4)
}
pub fn network_spend_casino_heist(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32,
p6: i32,
p7: i32,
p8: i32,
p9: i32,
p10: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendCasinoHeist {
    crate::__imports::native_network_spend_casino_heist(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8,
p9,
p10)
}
pub fn network_spent_no_cops(p0: i32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentNoCops {
    crate::__imports::native_network_spent_no_cops(p0,
p1,
p2,
p3)
}
pub fn network_spent_mc_ability(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentMcAbility {
    crate::__imports::native_network_spent_mc_ability(p0,
p1,
p2,
p3,
p4)
}
pub fn network_spend_comp_suv(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendCompSuv {
    crate::__imports::native_network_spend_comp_suv(p0,
p1,
p2,
p3)
}
pub fn network_spent_wager(p0: i32,
p1: i32,
amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentWager {
    crate::__imports::native_network_spent_wager(p0,
p1,
amount)
}
pub fn network_buy_healthcare(cost: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkBuyHealthcare {
    crate::__imports::native_network_buy_healthcare(cost,
p1,
p2)
}
pub fn network_spent_holdups(p0: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentHoldups {
    crate::__imports::native_network_spent_holdups(p0,
p1,
p2)
}
pub fn network_spend_source_bike(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendSourceBike {
    crate::__imports::native_network_spend_source_bike(p0,
p1,
p2,
p3)
}
pub fn network_spend_gangops_skip_mission(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendGangopsSkipMission {
    crate::__imports::native_network_spend_gangops_skip_mission(p0,
p1,
p2,
p3)
}
pub fn network_spend_boss(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendBoss {
    crate::__imports::native_network_spend_boss(p0,
p1,
p2)
}
pub fn network_get_can_spend_from_bank_and_wallet(amount: i32,
character_slot: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetCanSpendFromBankAndWallet {
    crate::__imports::native_network_get_can_spend_from_bank_and_wallet(amount,
character_slot)
}
pub fn network_spend_nightclub_bar_drink(amount: i32,
p1: i32,
p2: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendNightclubBarDrink {
    crate::__imports::native_network_spend_nightclub_bar_drink(amount,
p1,
p2,
p3)
}
pub fn network_spend_upgrade_autoshop(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendUpgradeAutoshop {
    crate::__imports::native_network_spend_upgrade_autoshop(p0,
p1,
p2,
p3)
}
pub fn network_earn_award_juggalo_mission(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnAwardJuggaloMission {
    crate::__imports::native_network_earn_award_juggalo_mission(p0,
p1)
}
pub fn network_earn_yatch_mission(amount: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnYatchMission {
    crate::__imports::native_network_earn_yatch_mission(amount,
p1)
}
pub fn network_earn_from_jobx2(amount: i32,
p1: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromJobx2 {
    crate::__imports::native_network_earn_from_jobx2(amount,
p1)
}
pub fn network_earn_smuggler_agency(amount: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnSmugglerAgency {
    crate::__imports::native_network_earn_smuggler_agency(amount,
p1,
p2,
p3)
}
pub fn network_earn_rc_time_trial(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnRcTimeTrial {
    crate::__imports::native_network_earn_rc_time_trial(amount)
}
pub fn network_earn_juggalo_story_mission(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnJuggaloStoryMission {
    crate::__imports::native_network_earn_juggalo_story_mission(p0,
p1)
}
pub fn network_earn_arena_skill_level_progression(amount: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnArenaSkillLevelProgression {
    crate::__imports::native_network_earn_arena_skill_level_progression(amount,
p1)
}
pub fn network_earn_nightclub(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnNightclub {
    crate::__imports::native_network_earn_nightclub(p0)
}
pub fn has_vc_withdrawal_completed(p0: i32) -> altv_wasm_shared::natives_result::ResultOfHasVcWithdrawalCompleted {
    crate::__imports::native_has_vc_withdrawal_completed(p0)
}
pub fn network_spent_buy_wantedlevel(p0: i32,
p1: shared::MemoryBufferId,
p2: bool,
p3: bool,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentBuyWantedlevel {
    crate::__imports::native_network_spent_buy_wantedlevel(p0,
p1,
p2,
p3,
p4)
}
pub fn network_spent_pa_service_impound(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentPaServiceImpound {
    crate::__imports::native_network_spent_pa_service_impound(p0,
p1,
p2)
}
pub fn deposit_vc(amount: i32) -> altv_wasm_shared::natives_result::ResultOfDepositVc {
    crate::__imports::native_deposit_vc(amount)
}
pub fn network_spent_rdr_hatchet_bonus(amount: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentRdrHatchetBonus {
    crate::__imports::native_network_spent_rdr_hatchet_bonus(amount,
p1,
p2)
}
pub fn network_earn_agency_phone(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnAgencyPhone {
    crate::__imports::native_network_earn_agency_phone(p0,
p1,
p2)
}
pub fn network_earn_from_island_heist_dj_mission(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromIslandHeistDjMission {
    crate::__imports::native_network_earn_from_island_heist_dj_mission(p0,
p1)
}
pub fn network_earn_dispatch_call(amount: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnDispatchCall {
    crate::__imports::native_network_earn_dispatch_call(amount,
p1)
}
pub fn network_earn_setup_participation_acid_lab(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnSetupParticipationAcidLab {
    crate::__imports::native_network_earn_setup_participation_acid_lab(p0,
p1)
}
pub fn network_spent_hire_mugger(p0: i32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentHireMugger {
    crate::__imports::native_network_spent_hire_mugger(p0,
p1,
p2,
p3)
}
pub fn network_spend_make_it_rain(amount: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendMakeItRain {
    crate::__imports::native_network_spend_make_it_rain(amount,
p1,
p2)
}
pub fn network_spent_hire_mercenary(p0: i32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentHireMercenary {
    crate::__imports::native_network_spent_hire_mercenary(p0,
p1,
p2,
p3)
}
pub fn network_spent_move_yacht(amount: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentMoveYacht {
    crate::__imports::native_network_spent_move_yacht(amount,
p1,
p2)
}
pub fn network_spend_island_heist(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendIslandHeist {
    crate::__imports::native_network_spend_island_heist(p0,
p1,
p2,
p3)
}
pub fn network_earn_hacker_truck(p0: i32,
amount: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnHackerTruck {
    crate::__imports::native_network_earn_hacker_truck(p0,
amount,
p2,
p3)
}
pub fn network_spent_order_bodyguard_vehicle(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentOrderBodyguardVehicle {
    crate::__imports::native_network_spent_order_bodyguard_vehicle(p0,
p1,
p2,
p3)
}
pub fn network_get_remaining_transfer_balance() -> altv_wasm_shared::natives_result::ResultOfNetworkGetRemainingTransferBalance {
    crate::__imports::native_network_get_remaining_transfer_balance()
}
pub fn network_spend_buy_agency(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendBuyAgency {
    crate::__imports::native_network_spend_buy_agency(p0,
p1,
p2,
p3)
}
pub fn network_spend_play_arcade(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendPlayArcade {
    crate::__imports::native_network_spend_play_arcade(p0,
p1,
p2,
p3,
p4)
}
pub fn network_spend_supply(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendSupply {
    crate::__imports::native_network_spend_supply(p0,
p1,
p2,
p3)
}
pub fn network_spent_carwash(p0: i32,
p1: i32,
p2: i32,
p3: bool,
p4: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentCarwash {
    crate::__imports::native_network_spent_carwash(p0,
p1,
p2,
p3,
p4)
}
pub fn network_earn_from_contraband(amount: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromContraband {
    crate::__imports::native_network_earn_from_contraband(amount,
p1)
}
pub fn network_earn_from_pickup(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromPickup {
    crate::__imports::native_network_earn_from_pickup(amount)
}
pub fn network_earn_gangops_prep_participation(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnGangopsPrepParticipation {
    crate::__imports::native_network_earn_gangops_prep_participation(amount)
}
pub fn network_casino_sell_chips(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkCasinoSellChips {
    crate::__imports::native_network_casino_sell_chips(p0,
p1)
}
pub fn network_get_can_spend_from_wallet(amount: i32,
character_slot: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetCanSpendFromWallet {
    crate::__imports::native_network_get_can_spend_from_wallet(amount,
character_slot)
}
pub fn network_spent_pa_service_vehicle(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentPaServiceVehicle {
    crate::__imports::native_network_spent_pa_service_vehicle(p0,
p1,
p2,
p3)
}
pub fn network_spent_purchase_nightclub_and_warehouse(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentPurchaseNightclubAndWarehouse {
    crate::__imports::native_network_spent_purchase_nightclub_and_warehouse(p0,
p1,
p2,
p3)
}
pub fn network_earn_from_vehicle_export(amount: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromVehicleExport {
    crate::__imports::native_network_earn_from_vehicle_export(amount,
p1,
p2)
}
pub fn network_spent_in_stripclub(p0: i32,
p1: bool,
p2: i32,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentInStripclub {
    crate::__imports::native_network_spent_in_stripclub(p0,
p1,
p2,
p3)
}
pub fn network_spend_buy_autoshop(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendBuyAutoshop {
    crate::__imports::native_network_spend_buy_autoshop(p0,
p1,
p2,
p3)
}
pub fn network_buy_item(amount: i32,
item: u32,
p2: i32,
p3: i32,
p4: bool,
item_name: Option<&String>,
p6: i32,
p7: i32,
p8: i32,
p9: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkBuyItem {
    crate::__imports::native_network_buy_item(amount,
item,
p2,
p3,
p4,
item_name,
p6,
p7,
p8,
p9)
}
pub fn network_spend_buy_acid_lab(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendBuyAcidLab {
    crate::__imports::native_network_spend_buy_acid_lab(p0,
p1,
p2,
p3)
}
pub fn network_earn_fixer_agency_short_trip(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFixerAgencyShortTrip {
    crate::__imports::native_network_earn_fixer_agency_short_trip(p0,
p1)
}
pub fn network_earn_from_rob_armored_cars(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromRobArmoredCars {
    crate::__imports::native_network_earn_from_rob_armored_cars(amount)
}
pub fn network_casino_can_bet_amount(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkCasinoCanBetAmount {
    crate::__imports::native_network_casino_can_bet_amount(p0)
}
pub fn network_earn_bounty_hunter_reward(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnBountyHunterReward {
    crate::__imports::native_network_earn_bounty_hunter_reward(p0)
}
pub fn network_spent_rehire_dj(amount: i32,
p1: i32,
p2: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentRehireDj {
    crate::__imports::native_network_spent_rehire_dj(amount,
p1,
p2,
p3)
}
pub fn withdraw_vc(amount: i32) -> altv_wasm_shared::natives_result::ResultOfWithdrawVc {
    crate::__imports::native_withdraw_vc(amount)
}
pub fn network_earn_from_import_export(amount: i32,
model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromImportExport {
    crate::__imports::native_network_earn_from_import_export(amount,
model_hash)
}
pub fn network_get_string_wallet_balance(character_slot: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetStringWalletBalance {
    crate::__imports::native_network_get_string_wallet_balance(character_slot)
}
pub fn network_refund_cash(index: i32,
context: Option<&String>,
reason: Option<&String>,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkRefundCash {
    crate::__imports::native_network_refund_cash(index,
context,
reason,
p3)
}
pub fn network_earn_from_criminal_mastermind(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromCriminalMastermind {
    crate::__imports::native_network_earn_from_criminal_mastermind(p0,
p1,
p2)
}
pub fn network_spent_upgrade_club_house(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentUpgradeClubHouse {
    crate::__imports::native_network_spent_upgrade_club_house(p0,
p1,
p2,
p3)
}
pub fn network_earn_assassinate_target_killed(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnAssassinateTargetKilled {
    crate::__imports::native_network_earn_assassinate_target_killed(amount)
}
pub fn network_give_player_jobshare_cash(amount: i32,
gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkGivePlayerJobshareCash {
    crate::__imports::native_network_give_player_jobshare_cash(amount,
gamer_handle)
}
pub fn network_get_player_is_high_earner() -> altv_wasm_shared::natives_result::ResultOfNetworkGetPlayerIsHighEarner {
    crate::__imports::native_network_get_player_is_high_earner()
}
pub fn network_earn_from_ambient_job(p0: i32,
p1: Option<&String>,
p2: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFromAmbientJob {
    crate::__imports::native_network_earn_from_ambient_job(p0,
p1,
p2)
}
pub fn network_spend_casino_membership(amount: i32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpendCasinoMembership {
    crate::__imports::native_network_spend_casino_membership(amount,
p1,
p2,
p3)
}
pub fn network_spent_rename_organization(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentRenameOrganization {
    crate::__imports::native_network_spent_rename_organization(p0,
p1,
p2)
}
pub fn network_earn_bb_event_bonus(amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnBbEventBonus {
    crate::__imports::native_network_earn_bb_event_bonus(amount)
}
pub fn network_earn_daily_vehicle_bonus(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnDailyVehicleBonus {
    crate::__imports::native_network_earn_daily_vehicle_bonus(p0)
}
pub fn network_spent_boss_goon(amount: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSpentBossGoon {
    crate::__imports::native_network_spent_boss_goon(amount,
p1,
p2)
}
pub fn network_earn_fmbb_wage_bonus(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEarnFmbbWageBonus {
    crate::__imports::native_network_earn_fmbb_wage_bonus(p0)
}
pub fn net_gameserver_retrieve_init_session_status(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetGameserverRetrieveInitSessionStatus {
    crate::__imports::native_net_gameserver_retrieve_init_session_status(p0)
}
pub fn net_gameserver_delete_character_get_status() -> altv_wasm_shared::natives_result::ResultOfNetGameserverDeleteCharacterGetStatus {
    crate::__imports::native_net_gameserver_delete_character_get_status()
}
pub fn net_gameserver_delete_set_telemetry_nonce_seed() -> altv_wasm_shared::natives_result::ResultOfNetGameserverDeleteSetTelemetryNonceSeed {
    crate::__imports::native_net_gameserver_delete_set_telemetry_nonce_seed()
}
pub fn net_gameserver_retrieve_start_session_status(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetGameserverRetrieveStartSessionStatus {
    crate::__imports::native_net_gameserver_retrieve_start_session_status(p0)
}
pub fn net_gameserver_transfer_bank_to_wallet_get_status() -> altv_wasm_shared::natives_result::ResultOfNetGameserverTransferBankToWalletGetStatus {
    crate::__imports::native_net_gameserver_transfer_bank_to_wallet_get_status()
}
pub fn net_gameserver_catalog_item_key_is_valid(hash: u32) -> altv_wasm_shared::natives_result::ResultOfNetGameserverCatalogItemKeyIsValid {
    crate::__imports::native_net_gameserver_catalog_item_key_is_valid(hash)
}
pub fn net_gameserver_basket_start(transaction_id: i32,
category_hash: u32,
action_hash: u32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfNetGameserverBasketStart {
    crate::__imports::native_net_gameserver_basket_start(transaction_id,
category_hash,
action_hash,
flags)
}
pub fn net_gameserver_basket_is_full() -> altv_wasm_shared::natives_result::ResultOfNetGameserverBasketIsFull {
    crate::__imports::native_net_gameserver_basket_is_full()
}
pub fn net_gameserver_is_catalog_current() -> altv_wasm_shared::natives_result::ResultOfNetGameserverIsCatalogCurrent {
    crate::__imports::native_net_gameserver_is_catalog_current()
}
pub fn net_gameserver_session_apply_received_data(char_slot: i32) -> altv_wasm_shared::natives_result::ResultOfNetGameserverSessionApplyReceivedData {
    crate::__imports::native_net_gameserver_session_apply_received_data(char_slot)
}
pub fn net_gameserver_transfer_wallet_to_bank_get_status() -> altv_wasm_shared::natives_result::ResultOfNetGameserverTransferWalletToBankGetStatus {
    crate::__imports::native_net_gameserver_transfer_wallet_to_bank_get_status()
}
pub fn net_gameserver_refresh_server_catalog() -> altv_wasm_shared::natives_result::ResultOfNetGameserverRefreshServerCatalog {
    crate::__imports::native_net_gameserver_refresh_server_catalog()
}
pub fn net_gameserver_start_session_restart(inventory: bool,
playerbalance: bool) -> altv_wasm_shared::natives_result::ResultOfNetGameserverStartSessionRestart {
    crate::__imports::native_net_gameserver_start_session_restart(inventory,
playerbalance)
}
pub fn net_gameserver_checkout_start(transaction_id: i32) -> altv_wasm_shared::natives_result::ResultOfNetGameserverCheckoutStart {
    crate::__imports::native_net_gameserver_checkout_start(transaction_id)
}
pub fn net_gameserver_catalog_is_valid() -> altv_wasm_shared::natives_result::ResultOfNetGameserverCatalogIsValid {
    crate::__imports::native_net_gameserver_catalog_is_valid()
}
pub fn net_gameserver_begin_service(transaction_id: i32,
category_hash: u32,
item_hash: u32,
action_type_hash: u32,
value: i32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfNetGameserverBeginService {
    crate::__imports::native_net_gameserver_begin_service(transaction_id,
category_hash,
item_hash,
action_type_hash,
value,
flags)
}
pub fn net_gameserver_transfer_cash_set_telemetry_nonce_seed() -> altv_wasm_shared::natives_result::ResultOfNetGameserverTransferCashSetTelemetryNonceSeed {
    crate::__imports::native_net_gameserver_transfer_cash_set_telemetry_nonce_seed()
}
pub fn net_gameserver_delete_character(slot: i32,
transfer: bool,
reason: u32) -> altv_wasm_shared::natives_result::ResultOfNetGameserverDeleteCharacter {
    crate::__imports::native_net_gameserver_delete_character(slot,
transfer,
reason)
}
pub fn net_gameserver_transaction_in_progress() -> altv_wasm_shared::natives_result::ResultOfNetGameserverTransactionInProgress {
    crate::__imports::native_net_gameserver_transaction_in_progress()
}
pub fn net_gameserver_start_session_pending() -> altv_wasm_shared::natives_result::ResultOfNetGameserverStartSessionPending {
    crate::__imports::native_net_gameserver_start_session_pending()
}
pub fn net_gameserver_clear_session(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetGameserverClearSession {
    crate::__imports::native_net_gameserver_clear_session(p0)
}
pub fn net_gameserver_use_server_transactions() -> altv_wasm_shared::natives_result::ResultOfNetGameserverUseServerTransactions {
    crate::__imports::native_net_gameserver_use_server_transactions()
}
pub fn net_gameserver_is_session_refresh_pending() -> altv_wasm_shared::natives_result::ResultOfNetGameserverIsSessionRefreshPending {
    crate::__imports::native_net_gameserver_is_session_refresh_pending()
}
pub fn net_gameserver_get_catalog_cloud_crc() -> altv_wasm_shared::natives_result::ResultOfNetGameserverGetCatalogCloudCrc {
    crate::__imports::native_net_gameserver_get_catalog_cloud_crc()
}
pub fn net_gameserver_get_session_state_and_status(p0: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfNetGameserverGetSessionStateAndStatus {
    crate::__imports::native_net_gameserver_get_session_state_and_status(p0,
p1)
}
pub fn net_gameserver_set_telemetry_nonce_seed(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetGameserverSetTelemetryNonceSeed {
    crate::__imports::native_net_gameserver_set_telemetry_nonce_seed(p0)
}
pub fn net_gameserver_start_session(char_slot: i32) -> altv_wasm_shared::natives_result::ResultOfNetGameserverStartSession {
    crate::__imports::native_net_gameserver_start_session(char_slot)
}
pub fn net_gameserver_basket_is_active() -> altv_wasm_shared::natives_result::ResultOfNetGameserverBasketIsActive {
    crate::__imports::native_net_gameserver_basket_is_active()
}
pub fn net_gameserver_is_session_valid(char_slot: i32) -> altv_wasm_shared::natives_result::ResultOfNetGameserverIsSessionValid {
    crate::__imports::native_net_gameserver_is_session_valid(char_slot)
}
pub fn net_gameserver_catalog_item_is_valid(name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetGameserverCatalogItemIsValid {
    crate::__imports::native_net_gameserver_catalog_item_is_valid(name)
}
pub fn net_gameserver_retrieve_session_error_code(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetGameserverRetrieveSessionErrorCode {
    crate::__imports::native_net_gameserver_retrieve_session_error_code(p0)
}
pub fn net_gameserver_get_price(item_hash: u32,
category_hash: u32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetGameserverGetPrice {
    crate::__imports::native_net_gameserver_get_price(item_hash,
category_hash,
p2)
}
pub fn net_gameserver_transfer_wallet_to_bank(char_slot: i32,
amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetGameserverTransferWalletToBank {
    crate::__imports::native_net_gameserver_transfer_wallet_to_bank(char_slot,
amount)
}
pub fn net_gameserver_retrieve_catalog_refresh_status(state: i32) -> altv_wasm_shared::natives_result::ResultOfNetGameserverRetrieveCatalogRefreshStatus {
    crate::__imports::native_net_gameserver_retrieve_catalog_refresh_status(state)
}
pub fn net_gameserver_transfer_bank_to_wallet(char_slot: i32,
amount: i32) -> altv_wasm_shared::natives_result::ResultOfNetGameserverTransferBankToWallet {
    crate::__imports::native_net_gameserver_transfer_bank_to_wallet(char_slot,
amount)
}
pub fn net_gameserver_basket_apply_server_data(p0: i32,
p1: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetGameserverBasketApplyServerData {
    crate::__imports::native_net_gameserver_basket_apply_server_data(p0,
p1)
}
pub fn net_gameserver_end_service(transaction_id: i32) -> altv_wasm_shared::natives_result::ResultOfNetGameserverEndService {
    crate::__imports::native_net_gameserver_end_service(transaction_id)
}
pub fn net_gameserver_init_session() -> altv_wasm_shared::natives_result::ResultOfNetGameserverInitSession {
    crate::__imports::native_net_gameserver_init_session()
}
pub fn net_gameserver_basket_add_item(item_data: shared::MemoryBufferId,
quantity: i32) -> altv_wasm_shared::natives_result::ResultOfNetGameserverBasketAddItem {
    crate::__imports::native_net_gameserver_basket_add_item(item_data,
quantity)
}
pub fn net_gameserver_basket_end() -> altv_wasm_shared::natives_result::ResultOfNetGameserverBasketEnd {
    crate::__imports::native_net_gameserver_basket_end()
}
pub fn get_time_offset(time_a: i32,
time_b: i32) -> altv_wasm_shared::natives_result::ResultOfGetTimeOffset {
    crate::__imports::native_get_time_offset(time_a,
time_b)
}
pub fn network_get_platform_party_member_count() -> altv_wasm_shared::natives_result::ResultOfNetworkGetPlatformPartyMemberCount {
    crate::__imports::native_network_get_platform_party_member_count()
}
pub fn network_has_control_of_entity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkHasControlOfEntity {
    crate::__imports::native_network_has_control_of_entity(entity)
}
pub fn network_can_send_local_invite(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkCanSendLocalInvite {
    crate::__imports::native_network_can_send_local_invite(gamer_handle)
}
pub fn network_cancel_transition_matchmaking() -> altv_wasm_shared::natives_result::ResultOfNetworkCancelTransitionMatchmaking {
    crate::__imports::native_network_cancel_transition_matchmaking()
}
pub fn network_should_show_promotion_alert_screen() -> altv_wasm_shared::natives_result::ResultOfNetworkShouldShowPromotionAlertScreen {
    crate::__imports::native_network_should_show_promotion_alert_screen()
}
pub fn network_get_gamer_status_result(p0: shared::MemoryBufferId,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetGamerStatusResult {
    crate::__imports::native_network_get_gamer_status_result(p0,
p1)
}
pub fn ugc_has_get_finished() -> altv_wasm_shared::natives_result::ResultOfUgcHasGetFinished {
    crate::__imports::native_ugc_has_get_finished()
}
pub fn network_get_local_scene_from_network_id(net_id: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetLocalSceneFromNetworkId {
    crate::__imports::native_network_get_local_scene_from_network_id(net_id)
}
pub fn network_is_player_talking(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsPlayerTalking {
    crate::__imports::native_network_is_player_talking(player)
}
pub fn network_set_object_can_blend_when_fixed(object: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetObjectCanBlendWhenFixed {
    crate::__imports::native_network_set_object_can_blend_when_fixed(object,
toggle)
}
pub fn network_clear_invalid_object_models() -> altv_wasm_shared::natives_result::ResultOfNetworkClearInvalidObjectModels {
    crate::__imports::native_network_clear_invalid_object_models()
}
pub fn network_session_reserve_slots_transition(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionReserveSlotsTransition {
    crate::__imports::native_network_session_reserve_slots_transition(p0,
p1,
p2)
}
pub fn network_get_primary_clan_data_cancel() -> altv_wasm_shared::natives_result::ResultOfNetworkGetPrimaryClanDataCancel {
    crate::__imports::native_network_get_primary_clan_data_cancel()
}
pub fn network_is_tunable_cloud_request_pending() -> altv_wasm_shared::natives_result::ResultOfNetworkIsTunableCloudRequestPending {
    crate::__imports::native_network_is_tunable_cloud_request_pending()
}
pub fn network_is_in_spectator_mode() -> altv_wasm_shared::natives_result::ResultOfNetworkIsInSpectatorMode {
    crate::__imports::native_network_is_in_spectator_mode()
}
pub fn network_transition_finish(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkTransitionFinish {
    crate::__imports::native_network_transition_finish(p0,
p1,
p2)
}
pub fn network_get_random_float_ranged(range_start: f32,
range_end: f32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetRandomFloatRanged {
    crate::__imports::native_network_get_random_float_ranged(range_start,
range_end)
}
pub fn network_is_activity_session() -> altv_wasm_shared::natives_result::ResultOfNetworkIsActivitySession {
    crate::__imports::native_network_is_activity_session()
}
pub fn network_is_signed_in() -> altv_wasm_shared::natives_result::ResultOfNetworkIsSignedIn {
    crate::__imports::native_network_is_signed_in()
}
pub fn network_clear_followers() -> altv_wasm_shared::natives_result::ResultOfNetworkClearFollowers {
    crate::__imports::native_network_clear_followers()
}
pub fn network_register_entity_as_networked(entity: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkRegisterEntityAsNetworked {
    crate::__imports::native_network_register_entity_as_networked(entity)
}
pub fn network_can_play_multiplayer_with_gamer(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkCanPlayMultiplayerWithGamer {
    crate::__imports::native_network_can_play_multiplayer_with_gamer(gamer_handle)
}
pub fn network_check_text_communication_privileges(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkCheckTextCommunicationPrivileges {
    crate::__imports::native_network_check_text_communication_privileges(p0,
p1,
p2)
}
pub fn facebook_post_completed_heist(heist_name: Option<&String>,
cash_earned: i32,
xp_earned: i32) -> altv_wasm_shared::natives_result::ResultOfFacebookPostCompletedHeist {
    crate::__imports::native_facebook_post_completed_heist(heist_name,
cash_earned,
xp_earned)
}
pub fn network_get_entity_is_local(entity: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetEntityIsLocal {
    crate::__imports::native_network_get_entity_is_local(entity)
}
pub fn can_register_mission_pickups(amount: i32) -> altv_wasm_shared::natives_result::ResultOfCanRegisterMissionPickups {
    crate::__imports::native_can_register_mission_pickups(amount)
}
pub fn facebook_post_completed_milestone(milestone_id: i32) -> altv_wasm_shared::natives_result::ResultOfFacebookPostCompletedMilestone {
    crate::__imports::native_facebook_post_completed_milestone(milestone_id)
}
pub fn get_max_num_network_vehicles() -> altv_wasm_shared::natives_result::ResultOfGetMaxNumNetworkVehicles {
    crate::__imports::native_get_max_num_network_vehicles()
}
pub fn cloud_get_availability_check_result() -> altv_wasm_shared::natives_result::ResultOfCloudGetAvailabilityCheckResult {
    crate::__imports::native_cloud_get_availability_check_result()
}
pub fn title_texture_download_request(file_path: Option<&String>,
name: Option<&String>,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfTitleTextureDownloadRequest {
    crate::__imports::native_title_texture_download_request(file_path,
name,
p2)
}
pub fn network_is_transition_host() -> altv_wasm_shared::natives_result::ResultOfNetworkIsTransitionHost {
    crate::__imports::native_network_is_transition_host()
}
pub fn network_is_pending_friend(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsPendingFriend {
    crate::__imports::native_network_is_pending_friend(p0)
}
pub fn get_max_num_network_peds() -> altv_wasm_shared::natives_result::ResultOfGetMaxNumNetworkPeds {
    crate::__imports::native_get_max_num_network_peds()
}
pub fn network_set_transition_visibility_lock(p0: bool,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetTransitionVisibilityLock {
    crate::__imports::native_network_set_transition_visibility_lock(p0,
p1)
}
pub fn get_num_created_mission_vehicles(p0: bool) -> altv_wasm_shared::natives_result::ResultOfGetNumCreatedMissionVehicles {
    crate::__imports::native_get_num_created_mission_vehicles(p0)
}
pub fn network_check_privileges(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkCheckPrivileges {
    crate::__imports::native_network_check_privileges(p0,
p1,
p2)
}
pub fn network_set_invite_failed_message_for_invite_menu(p0: shared::MemoryBufferId,
p1: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkSetInviteFailedMessageForInviteMenu {
    crate::__imports::native_network_set_invite_failed_message_for_invite_menu(p0,
p1)
}
pub fn network_is_transition_closed_crew() -> altv_wasm_shared::natives_result::ResultOfNetworkIsTransitionClosedCrew {
    crate::__imports::native_network_is_transition_closed_crew()
}
pub fn network_get_average_ping(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetAveragePing {
    crate::__imports::native_network_get_average_ping(player)
}
pub fn network_set_activity_player_max(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSetActivityPlayerMax {
    crate::__imports::native_network_set_activity_player_max(p0)
}
pub fn network_set_attribute_damage_to_player(ped: u32,
player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkSetAttributeDamageToPlayer {
    crate::__imports::native_network_set_attribute_damage_to_player(ped,
player)
}
pub fn ped_to_net(ped: u32) -> altv_wasm_shared::natives_result::ResultOfPedToNet {
    crate::__imports::native_ped_to_net(ped)
}
pub fn network_is_gamer_in_my_session(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkIsGamerInMySession {
    crate::__imports::native_network_is_gamer_in_my_session(gamer_handle)
}
pub fn network_allow_cloning_while_in_tutorial(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkAllowCloningWhileInTutorial {
    crate::__imports::native_network_allow_cloning_while_in_tutorial(p0,
p1)
}
pub fn network_override_receive_restrictions_all(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkOverrideReceiveRestrictionsAll {
    crate::__imports::native_network_override_receive_restrictions_all(toggle)
}
pub fn network_is_signed_online() -> altv_wasm_shared::natives_result::ResultOfNetworkIsSignedOnline {
    crate::__imports::native_network_is_signed_online()
}
pub fn network_get_tunable_cloud_crc() -> altv_wasm_shared::natives_result::ResultOfNetworkGetTunableCloudCrc {
    crate::__imports::native_network_get_tunable_cloud_crc()
}
pub fn network_is_game_in_progress() -> altv_wasm_shared::natives_result::ResultOfNetworkIsGameInProgress {
    crate::__imports::native_network_is_game_in_progress()
}
pub fn network_clan_release_emblem(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkClanReleaseEmblem {
    crate::__imports::native_network_clan_release_emblem(p0)
}
pub fn network_session_set_script_validate_join() -> altv_wasm_shared::natives_result::ResultOfNetworkSessionSetScriptValidateJoin {
    crate::__imports::native_network_session_set_script_validate_join()
}
pub fn network_send_important_transition_invite_via_presence(gamer_handle: shared::MemoryBufferId,
p1: Option<&String>,
data_count: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSendImportantTransitionInviteViaPresence {
    crate::__imports::native_network_send_important_transition_invite_via_presence(gamer_handle,
p1,
data_count,
p3)
}
pub fn network_get_platform_party_members(data: shared::MemoryBufferId,
data_size: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetPlatformPartyMembers {
    crate::__imports::native_network_get_platform_party_members(data,
data_size)
}
pub fn network_is_activity_spectator() -> altv_wasm_shared::natives_result::ResultOfNetworkIsActivitySpectator {
    crate::__imports::native_network_is_activity_spectator()
}
pub fn network_get_last_player_pos_received_over_network(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetLastPlayerPosReceivedOverNetwork {
    crate::__imports::native_network_get_last_player_pos_received_over_network(player)
}
pub fn set_player_invisible_locally(player: u32,
b_include_players_vehicle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerInvisibleLocally {
    crate::__imports::native_set_player_invisible_locally(player,
b_include_players_vehicle)
}
pub fn get_num_created_mission_objects(p0: bool) -> altv_wasm_shared::natives_result::ResultOfGetNumCreatedMissionObjects {
    crate::__imports::native_get_num_created_mission_objects(p0)
}
pub fn network_clan_request_emblem(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkClanRequestEmblem {
    crate::__imports::native_network_clan_request_emblem(p0)
}
pub fn network_has_age_restrictions() -> altv_wasm_shared::natives_result::ResultOfNetworkHasAgeRestrictions {
    crate::__imports::native_network_has_age_restrictions()
}
pub fn network_can_gamer_play_multiplayer_with_me(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkCanGamerPlayMultiplayerWithMe {
    crate::__imports::native_network_can_gamer_play_multiplayer_with_me(gamer_handle)
}
pub fn network_transition_set_in_progress(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkTransitionSetInProgress {
    crate::__imports::native_network_transition_set_in_progress(p0)
}
pub fn set_non_participants_of_this_script_as_ghosts(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetNonParticipantsOfThisScriptAsGhosts {
    crate::__imports::native_set_non_participants_of_this_script_as_ghosts(p0)
}
pub fn network_clear_offline_invite_pending() -> altv_wasm_shared::natives_result::ResultOfNetworkClearOfflineInvitePending {
    crate::__imports::native_network_clear_offline_invite_pending()
}
pub fn network_allow_remote_synced_scene_local_player_requests(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkAllowRemoteSyncedSceneLocalPlayerRequests {
    crate::__imports::native_network_allow_remote_synced_scene_local_player_requests(p0)
}
pub fn network_is_queuing_for_session_join() -> altv_wasm_shared::natives_result::ResultOfNetworkIsQueuingForSessionJoin {
    crate::__imports::native_network_is_queuing_for_session_join()
}
pub fn ugc_copy_content(p0: shared::MemoryBufferId,
p1: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfUgcCopyContent {
    crate::__imports::native_ugc_copy_content(p0,
p1)
}
pub fn network_am_i_blocked_by_gamer(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkAmIblockedByGamer {
    crate::__imports::native_network_am_i_blocked_by_gamer(gamer_handle)
}
pub fn get_user_starter_access() -> altv_wasm_shared::natives_result::ResultOfGetUserStarterAccess {
    crate::__imports::native_get_user_starter_access()
}
pub fn ugc_query_by_content_id(content_id: Option<&String>,
latest_version: bool,
content_type_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfUgcQueryByContentId {
    crate::__imports::native_ugc_query_by_content_id(content_id,
latest_version,
content_type_name)
}
pub fn texture_download_request(gamer_handle: shared::MemoryBufferId,
file_path: Option<&String>,
name: Option<&String>,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfTextureDownloadRequest {
    crate::__imports::native_texture_download_request(gamer_handle,
file_path,
name,
p3)
}
pub fn ugc_did_description_request_succeed(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcDidDescriptionRequestSucceed {
    crate::__imports::native_ugc_did_description_request_succeed(p0)
}
pub fn network_conceal_entity(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkConcealEntity {
    crate::__imports::native_network_conceal_entity(entity,
toggle)
}
pub fn network_is_connected_via_relay(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsConnectedViaRelay {
    crate::__imports::native_network_is_connected_via_relay(player)
}
pub fn ugc_request_content_data_from_index(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfUgcRequestContentDataFromIndex {
    crate::__imports::native_ugc_request_content_data_from_index(p0,
p1)
}
pub fn network_player_get_cheater_reason() -> altv_wasm_shared::natives_result::ResultOfNetworkPlayerGetCheaterReason {
    crate::__imports::native_network_player_get_cheater_reason()
}
pub fn reset_ghost_alpha() -> altv_wasm_shared::natives_result::ResultOfResetGhostAlpha {
    crate::__imports::native_reset_ghost_alpha()
}
pub fn ugc_clear_create_result() -> altv_wasm_shared::natives_result::ResultOfUgcClearCreateResult {
    crate::__imports::native_ugc_clear_create_result()
}
pub fn network_set_property_id(id: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSetPropertyId {
    crate::__imports::native_network_set_property_id(id)
}
pub fn network_keep_entity_collision_disabled_after_anim_scene(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkKeepEntityCollisionDisabledAfterAnimScene {
    crate::__imports::native_network_keep_entity_collision_disabled_after_anim_scene(p0,
p1)
}
pub fn network_start_solo_tutorial_session() -> altv_wasm_shared::natives_result::ResultOfNetworkStartSoloTutorialSession {
    crate::__imports::native_network_start_solo_tutorial_session()
}
pub fn network_get_content_modifier_list_id(content_hash: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetContentModifierListId {
    crate::__imports::native_network_get_content_modifier_list_id(content_hash)
}
pub fn network_clear_group_activity() -> altv_wasm_shared::natives_result::ResultOfNetworkClearGroupActivity {
    crate::__imports::native_network_clear_group_activity()
}
pub fn network_does_entity_exist_with_network_id(net_id: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkDoesEntityExistWithNetworkId {
    crate::__imports::native_network_does_entity_exist_with_network_id(net_id)
}
pub fn network_get_num_participants() -> altv_wasm_shared::natives_result::ResultOfNetworkGetNumParticipants {
    crate::__imports::native_network_get_num_participants()
}
pub fn network_access_tunable_float_modification_detection_registration_hash(context_hash: u32,
name_hash: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfNetworkAccessTunableFloatModificationDetectionRegistrationHash {
    crate::__imports::native_network_access_tunable_float_modification_detection_registration_hash(context_hash,
name_hash,
value)
}
pub fn network_player_is_badsport() -> altv_wasm_shared::natives_result::ResultOfNetworkPlayerIsBadsport {
    crate::__imports::native_network_player_is_badsport()
}
pub fn network_is_friend(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkIsFriend {
    crate::__imports::native_network_is_friend(gamer_handle)
}
pub fn ugc_get_content_rating(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentRating {
    crate::__imports::native_ugc_get_content_rating(p0,
p1)
}
pub fn network_is_player_a_participant_on_script(player: u32,
script: Option<&String>,
instance_id: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsPlayerAparticipantOnScript {
    crate::__imports::native_network_is_player_a_participant_on_script(player,
script,
instance_id)
}
pub fn network_get_participant_index(index: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetParticipantIndex {
    crate::__imports::native_network_get_participant_index(index)
}
pub fn network_set_player_is_passive(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetPlayerIsPassive {
    crate::__imports::native_network_set_player_is_passive(toggle)
}
pub fn network_set_this_script_is_network_script(max_num_mission_participants: i32,
p1: bool,
instance_id: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSetThisScriptIsNetworkScript {
    crate::__imports::native_network_set_this_script_is_network_script(max_num_mission_participants,
p1,
instance_id)
}
pub fn is_commerce_data_fetch_in_progress() -> altv_wasm_shared::natives_result::ResultOfIsCommerceDataFetchInProgress {
    crate::__imports::native_is_commerce_data_fetch_in_progress()
}
pub fn ugc_get_content_has_lo_res_photo(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentHasLoResPhoto {
    crate::__imports::native_ugc_get_content_has_lo_res_photo(p0)
}
pub fn network_get_host_of_script(script_name: Option<&String>,
instance_id: i32,
position_hash: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetHostOfScript {
    crate::__imports::native_network_get_host_of_script(script_name,
instance_id,
position_hash)
}
pub fn network_set_rich_presence(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSetRichPresence {
    crate::__imports::native_network_set_rich_presence(p0,
p1,
p2,
p3)
}
pub fn ugc_publish(content_id: Option<&String>,
base_content_id: Option<&String>,
content_type_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfUgcPublish {
    crate::__imports::native_ugc_publish(content_id,
base_content_id,
content_type_name)
}
pub fn get_num_reserved_mission_peds(p0: bool,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfGetNumReservedMissionPeds {
    crate::__imports::native_get_num_reserved_mission_peds(p0,
p1)
}
pub fn network_clan_get_local_memberships_count() -> altv_wasm_shared::natives_result::ResultOfNetworkClanGetLocalMembershipsCount {
    crate::__imports::native_network_clan_get_local_memberships_count()
}
pub fn network_fade_in_entity(entity: u32,
state: bool,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkFadeInEntity {
    crate::__imports::native_network_fade_in_entity(entity,
state,
p2)
}
pub fn network_set_privilege_check_result_not_needed() -> altv_wasm_shared::natives_result::ResultOfNetworkSetPrivilegeCheckResultNotNeeded {
    crate::__imports::native_network_set_privilege_check_result_not_needed()
}
pub fn network_transition_set_content_creator(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkTransitionSetContentCreator {
    crate::__imports::native_network_transition_set_content_creator(p0)
}
pub fn network_get_friend_count() -> altv_wasm_shared::natives_result::ResultOfNetworkGetFriendCount {
    crate::__imports::native_network_get_friend_count()
}
pub fn network_get_player_loudness(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetPlayerLoudness {
    crate::__imports::native_network_get_player_loudness(player)
}
pub fn is_entity_a_ghost(entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityAghost {
    crate::__imports::native_is_entity_a_ghost(entity)
}
pub fn network_prevent_script_host_migration() -> altv_wasm_shared::natives_result::ResultOfNetworkPreventScriptHostMigration {
    crate::__imports::native_network_prevent_script_host_migration()
}
pub fn network_add_followers(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkAddFollowers {
    crate::__imports::native_network_add_followers(p0,
p1)
}
pub fn network_disable_realtime_multiplayer() -> altv_wasm_shared::natives_result::ResultOfNetworkDisableRealtimeMultiplayer {
    crate::__imports::native_network_disable_realtime_multiplayer()
}
pub fn network_has_cached_player_head_blend_data(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkHasCachedPlayerHeadBlendData {
    crate::__imports::native_network_has_cached_player_head_blend_data(player)
}
pub fn network_session_was_invited() -> altv_wasm_shared::natives_result::ResultOfNetworkSessionWasInvited {
    crate::__imports::native_network_session_was_invited()
}
pub fn set_entity_locally_visible(entity: u32) -> altv_wasm_shared::natives_result::ResultOfSetEntityLocallyVisible {
    crate::__imports::native_set_entity_locally_visible(entity)
}
pub fn network_get_presence_invite_content_id(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetPresenceInviteContentId {
    crate::__imports::native_network_get_presence_invite_content_id(p0)
}
pub fn ugc_did_create_succeed() -> altv_wasm_shared::natives_result::ResultOfUgcDidCreateSucceed {
    crate::__imports::native_ugc_did_create_succeed()
}
pub fn network_get_player_index(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetPlayerIndex {
    crate::__imports::native_network_get_player_index(player)
}
pub fn network_get_signalling_info(p0: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkGetSignallingInfo {
    crate::__imports::native_network_get_signalling_info(p0)
}
pub fn network_get_position_hash_of_this_script() -> altv_wasm_shared::natives_result::ResultOfNetworkGetPositionHashOfThisScript {
    crate::__imports::native_network_get_position_hash_of_this_script()
}
pub fn network_add_client_entity_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32) -> altv_wasm_shared::natives_result::ResultOfNetworkAddClientEntityArea {
    crate::__imports::native_network_add_client_entity_area(x1,
y1,
z1,
x2,
y2,
z2)
}
pub fn network_have_online_privileges() -> altv_wasm_shared::natives_result::ResultOfNetworkHaveOnlinePrivileges {
    crate::__imports::native_network_have_online_privileges()
}
pub fn network_remove_all_queued_join_requests() -> altv_wasm_shared::natives_result::ResultOfNetworkRemoveAllQueuedJoinRequests {
    crate::__imports::native_network_remove_all_queued_join_requests()
}
pub fn network_are_transition_details_valid(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkAreTransitionDetailsValid {
    crate::__imports::native_network_are_transition_details_valid(p0)
}
pub fn network_mark_as_preferred_activity(p0: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkMarkAsPreferredActivity {
    crate::__imports::native_network_mark_as_preferred_activity(p0)
}
pub fn network_set_script_controlling_teams(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSetScriptControllingTeams {
    crate::__imports::native_network_set_script_controlling_teams(p0)
}
pub fn delay_mp_store_open() -> altv_wasm_shared::natives_result::ResultOfDelayMpStoreOpen {
    crate::__imports::native_delay_mp_store_open()
}
pub fn network_allow_remote_attachment_modification(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkAllowRemoteAttachmentModification {
    crate::__imports::native_network_allow_remote_attachment_modification(entity,
toggle)
}
pub fn network_get_presence_invite_session_id(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetPresenceInviteSessionId {
    crate::__imports::native_network_get_presence_invite_session_id(p0)
}
pub fn network_has_automute_override() -> altv_wasm_shared::natives_result::ResultOfNetworkHasAutomuteOverride {
    crate::__imports::native_network_has_automute_override()
}
pub fn network_session_mark_visible(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionMarkVisible {
    crate::__imports::native_network_session_mark_visible(toggle)
}
pub fn ugc_set_bookmarked(content_id: Option<&String>,
bookmarked: bool,
content_type_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfUgcSetBookmarked {
    crate::__imports::native_ugc_set_bookmarked(content_id,
bookmarked,
content_type_name)
}
pub fn network_is_activity_spectator_from_handle(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkIsActivitySpectatorFromHandle {
    crate::__imports::native_network_is_activity_spectator_from_handle(gamer_handle)
}
pub fn network_on_return_to_single_player() -> altv_wasm_shared::natives_result::ResultOfNetworkOnReturnToSinglePlayer {
    crate::__imports::native_network_on_return_to_single_player()
}
pub fn network_get_this_script_is_network_script() -> altv_wasm_shared::natives_result::ResultOfNetworkGetThisScriptIsNetworkScript {
    crate::__imports::native_network_get_this_script_is_network_script()
}
pub fn network_is_transition_matchmaking() -> altv_wasm_shared::natives_result::ResultOfNetworkIsTransitionMatchmaking {
    crate::__imports::native_network_is_transition_matchmaking()
}
pub fn set_network_id_can_migrate(net_id: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetNetworkIdCanMigrate {
    crate::__imports::native_set_network_id_can_migrate(net_id,
toggle)
}
pub fn ugc_has_modify_finished() -> altv_wasm_shared::natives_result::ResultOfUgcHasModifyFinished {
    crate::__imports::native_ugc_has_modify_finished()
}
pub fn network_explode_heli(vehicle: u32,
is_audible: bool,
is_invisible: bool,
net_id: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkExplodeHeli {
    crate::__imports::native_network_explode_heli(vehicle,
is_audible,
is_invisible,
net_id)
}
pub fn get_commerce_item_num_cats(index: i32) -> altv_wasm_shared::natives_result::ResultOfGetCommerceItemNumCats {
    crate::__imports::native_get_commerce_item_num_cats(index)
}
pub fn network_use_high_precision_blending(net_i_d: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkUseHighPrecisionBlending {
    crate::__imports::native_network_use_high_precision_blending(net_i_d,
toggle)
}
pub fn network_add_client_entity_angled_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfNetworkAddClientEntityAngledArea {
    crate::__imports::native_network_add_client_entity_angled_area(x1,
y1,
z1,
x2,
y2,
z2,
radius)
}
pub fn network_open_transition_matchmaking() -> altv_wasm_shared::natives_result::ResultOfNetworkOpenTransitionMatchmaking {
    crate::__imports::native_network_open_transition_matchmaking()
}
pub fn network_clan_crewinfo_get_crewranktitle(p0: i32,
p1: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkClanCrewinfoGetCrewranktitle {
    crate::__imports::native_network_clan_crewinfo_get_crewranktitle(p0,
p1)
}
pub fn network_can_queue_for_previous_session_join() -> altv_wasm_shared::natives_result::ResultOfNetworkCanQueueForPreviousSessionJoin {
    crate::__imports::native_network_can_queue_for_previous_session_join()
}
pub fn network_set_current_public_content_id(mission_id: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkSetCurrentPublicContentId {
    crate::__imports::native_network_set_current_public_content_id(mission_id)
}
pub fn reserve_local_network_mission_peds(amount: i32) -> altv_wasm_shared::natives_result::ResultOfReserveLocalNetworkMissionPeds {
    crate::__imports::native_reserve_local_network_mission_peds(amount)
}
pub fn network_get_gamer_status_from_queue() -> altv_wasm_shared::natives_result::ResultOfNetworkGetGamerStatusFromQueue {
    crate::__imports::native_network_get_gamer_status_from_queue()
}
pub fn network_set_in_progress_finish_time(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSetInProgressFinishTime {
    crate::__imports::native_network_set_in_progress_finish_time(p0)
}
pub fn network_session_do_friend_matchmaking(p0: i32,
p1: i32,
max_players: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionDoFriendMatchmaking {
    crate::__imports::native_network_session_do_friend_matchmaking(p0,
p1,
max_players)
}
pub fn ugc_is_description_request_in_progress(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcIsDescriptionRequestInProgress {
    crate::__imports::native_ugc_is_description_request_in_progress(p0)
}
pub fn network_set_local_player_invincible_time(time: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSetLocalPlayerInvincibleTime {
    crate::__imports::native_network_set_local_player_invincible_time(time)
}
pub fn network_get_killer_of_player(player: u32,
weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetKillerOfPlayer {
    crate::__imports::native_network_get_killer_of_player(player,
weapon_hash)
}
pub fn network_launch_transition() -> altv_wasm_shared::natives_result::ResultOfNetworkLaunchTransition {
    crate::__imports::native_network_launch_transition()
}
pub fn network_has_bone_been_hit_by_killer(bone_index: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkHasBoneBeenHitByKiller {
    crate::__imports::native_network_has_bone_been_hit_by_killer(bone_index)
}
pub fn network_is_any_player_near(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsAnyPlayerNear {
    crate::__imports::native_network_is_any_player_near(p0,
p1,
p2,
p3,
p4,
p5,
p6)
}
pub fn network_is_friend_in_same_title(friend_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkIsFriendInSameTitle {
    crate::__imports::native_network_is_friend_in_same_title(friend_name)
}
pub fn is_commerce_store_open() -> altv_wasm_shared::natives_result::ResultOfIsCommerceStoreOpen {
    crate::__imports::native_is_commerce_store_open()
}
pub fn network_session_cancel_invite() -> altv_wasm_shared::natives_result::ResultOfNetworkSessionCancelInvite {
    crate::__imports::native_network_session_cancel_invite()
}
pub fn network_is_in_platform_party() -> altv_wasm_shared::natives_result::ResultOfNetworkIsInPlatformParty {
    crate::__imports::native_network_is_in_platform_party()
}
pub fn network_explode_vehicle(vehicle: u32,
is_audible: bool,
is_invisible: bool,
net_id: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkExplodeVehicle {
    crate::__imports::native_network_explode_vehicle(vehicle,
is_audible,
is_invisible,
net_id)
}
pub fn network_override_chat_restrictions(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkOverrideChatRestrictions {
    crate::__imports::native_network_override_chat_restrictions(player,
toggle)
}
pub fn ugc_get_content_is_published(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentIsPublished {
    crate::__imports::native_ugc_get_content_is_published(p0)
}
pub fn ugc_texture_download_request(p0: Option<&String>,
p1: i32,
p2: i32,
p3: i32,
p4: Option<&String>,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfUgcTextureDownloadRequest {
    crate::__imports::native_ugc_texture_download_request(p0,
p1,
p2,
p3,
p4,
p5)
}
pub fn network_set_transition_activity_id(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSetTransitionActivityId {
    crate::__imports::native_network_set_transition_activity_id(p0)
}
pub fn ugc_get_my_content(p0: i32,
p1: i32,
p2: Option<&String>,
p3: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfUgcGetMyContent {
    crate::__imports::native_ugc_get_my_content(p0,
p1,
p2,
p3)
}
pub fn network_send_transition_gamer_instruction(gamer_handle: shared::MemoryBufferId,
p1: Option<&String>,
p2: i32,
p3: i32,
p4: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSendTransitionGamerInstruction {
    crate::__imports::native_network_send_transition_gamer_instruction(gamer_handle,
p1,
p2,
p3,
p4)
}
pub fn ugc_get_content_language(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentLanguage {
    crate::__imports::native_ugc_get_content_language(p0)
}
pub fn set_network_id_visible_in_cutscene_hack(net_id: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetNetworkIdVisibleInCutsceneHack {
    crate::__imports::native_set_network_id_visible_in_cutscene_hack(net_id,
p1,
p2)
}
pub fn network_session_do_freeroam_quickmatch(p0: i32,
p1: i32,
p2: i32,
max_players: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionDoFreeroamQuickmatch {
    crate::__imports::native_network_session_do_freeroam_quickmatch(p0,
p1,
p2,
max_players)
}
pub fn network_register_player_broadcast_variables(unk_vars: i32,
num_vars: i32,
debug_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkRegisterPlayerBroadcastVariables {
    crate::__imports::native_network_register_player_broadcast_variables(unk_vars,
num_vars,
debug_name)
}
pub fn network_get_last_vel_received_over_network(entity: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetLastVelReceivedOverNetwork {
    crate::__imports::native_network_get_last_vel_received_over_network(entity)
}
pub fn network_session_leave_single_player() -> altv_wasm_shared::natives_result::ResultOfNetworkSessionLeaveSinglePlayer {
    crate::__imports::native_network_session_leave_single_player()
}
pub fn texture_download_get_name(p0: i32) -> altv_wasm_shared::natives_result::ResultOfTextureDownloadGetName {
    crate::__imports::native_texture_download_get_name(p0)
}
pub fn network_block_invites(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkBlockInvites {
    crate::__imports::native_network_block_invites(toggle)
}
pub fn network_get_average_packet_loss(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetAveragePacketLoss {
    crate::__imports::native_network_get_average_packet_loss(player)
}
pub fn network_is_tutorial_session_change_pending() -> altv_wasm_shared::natives_result::ResultOfNetworkIsTutorialSessionChangePending {
    crate::__imports::native_network_is_tutorial_session_change_pending()
}
pub fn network_start_communication_permissions_check(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkStartCommunicationPermissionsCheck {
    crate::__imports::native_network_start_communication_permissions_check(p0)
}
pub fn network_get_num_script_participants(script_name: Option<&String>,
instance_id: i32,
position_hash: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetNumScriptParticipants {
    crate::__imports::native_network_get_num_script_participants(script_name,
instance_id,
position_hash)
}
pub fn net_to_veh(net_handle: i32) -> altv_wasm_shared::natives_result::ResultOfNetToVeh {
    crate::__imports::native_net_to_veh(net_handle)
}
pub fn network_set_player_mental_state(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSetPlayerMentalState {
    crate::__imports::native_network_set_player_mental_state(p0)
}
pub fn ugc_get_content_file_version(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentFileVersion {
    crate::__imports::native_ugc_get_content_file_version(p0,
p1)
}
pub fn network_get_respawn_result(random_int: i32,
coordinates: Option<&shared::Vector3>,
heading: f32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetRespawnResult {
    crate::__imports::native_network_get_respawn_result(random_int,
coordinates,
heading)
}
pub fn network_get_unreliable_resend_count(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetUnreliableResendCount {
    crate::__imports::native_network_get_unreliable_resend_count(player)
}
pub fn network_add_entity_angled_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
width: f32) -> altv_wasm_shared::natives_result::ResultOfNetworkAddEntityAngledArea {
    crate::__imports::native_network_add_entity_angled_area(x1,
y1,
z1,
x2,
y2,
z2,
width)
}
pub fn network_is_transition_open_to_matchmaking() -> altv_wasm_shared::natives_result::ResultOfNetworkIsTransitionOpenToMatchmaking {
    crate::__imports::native_network_is_transition_open_to_matchmaking()
}
pub fn network_get_entity_from_object_id(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetEntityFromObjectId {
    crate::__imports::native_network_get_entity_from_object_id(p0)
}
pub fn network_get_invite_reply_status(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetInviteReplyStatus {
    crate::__imports::native_network_get_invite_reply_status(p0)
}
pub fn network_handle_from_player(player: u32,
gamer_handle: shared::MemoryBufferId,
gamer_handle_size: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkHandleFromPlayer {
    crate::__imports::native_network_handle_from_player(player,
gamer_handle,
gamer_handle_size)
}
pub fn network_trigger_damage_event_for_zero_weapon_hash(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkTriggerDamageEventForZeroWeaponHash {
    crate::__imports::native_network_trigger_damage_event_for_zero_weapon_hash(entity,
toggle)
}
pub fn network_does_network_id_exist(net_id: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkDoesNetworkIdExist {
    crate::__imports::native_network_does_network_id_exist(net_id)
}
pub fn network_get_presence_invite_handle(p0: i32,
p1: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkGetPresenceInviteHandle {
    crate::__imports::native_network_get_presence_invite_handle(p0,
p1)
}
pub fn network_mark_as_waiting_async(p0: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkMarkAsWaitingAsync {
    crate::__imports::native_network_mark_as_waiting_async(p0)
}
pub fn ugc_get_content_hash() -> altv_wasm_shared::natives_result::ResultOfUgcGetContentHash {
    crate::__imports::native_ugc_get_content_hash()
}
pub fn network_send_text_message(message: Option<&String>,
gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkSendTextMessage {
    crate::__imports::native_network_send_text_message(message,
gamer_handle)
}
pub fn cloud_did_request_succeed(request_id: i32) -> altv_wasm_shared::natives_result::ResultOfCloudDidRequestSucceed {
    crate::__imports::native_cloud_did_request_succeed(request_id)
}
pub fn network_access_tunable_int_modification_detection_registration_hash(context_hash: u32,
name_hash: u32,
value: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkAccessTunableIntModificationDetectionRegistrationHash {
    crate::__imports::native_network_access_tunable_int_modification_detection_registration_hash(context_hash,
name_hash,
value)
}
pub fn network_do_transition_to_freemode(p0: shared::MemoryBufferId,
p1: i32,
p2: bool,
players: i32,
p4: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkDoTransitionToFreemode {
    crate::__imports::native_network_do_transition_to_freemode(p0,
p1,
p2,
players,
p4)
}
pub fn network_get_player_tutorial_session_instance(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetPlayerTutorialSessionInstance {
    crate::__imports::native_network_get_player_tutorial_session_instance(player)
}
pub fn network_set_mission_finished() -> altv_wasm_shared::natives_result::ResultOfNetworkSetMissionFinished {
    crate::__imports::native_network_set_mission_finished()
}
pub fn network_set_override_tutorial_session_chat(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetOverrideTutorialSessionChat {
    crate::__imports::native_network_set_override_tutorial_session_chat(toggle)
}
pub fn network_query_respawn_results(p0: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkQueryRespawnResults {
    crate::__imports::native_network_query_respawn_results(p0)
}
pub fn network_is_player_a_participant(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsPlayerAparticipant {
    crate::__imports::native_network_is_player_a_participant(player)
}
pub fn network_set_current_chat_option(new_chat_option: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSetCurrentChatOption {
    crate::__imports::native_network_set_current_chat_option(new_chat_option)
}
pub fn network_get_presence_invite_from_admin(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetPresenceInviteFromAdmin {
    crate::__imports::native_network_get_presence_invite_from_admin(p0)
}
pub fn network_set_rich_presence_string(p0: i32,
text_label: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkSetRichPresenceString {
    crate::__imports::native_network_set_rich_presence_string(p0,
text_label)
}
pub fn network_register_host_broadcast_variables(unk_vars: i32,
num_vars: i32,
debug_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkRegisterHostBroadcastVariables {
    crate::__imports::native_network_register_host_broadcast_variables(unk_vars,
num_vars,
debug_name)
}
pub fn network_do_transition_to_game(p0: bool,
max_players: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkDoTransitionToGame {
    crate::__imports::native_network_do_transition_to_game(p0,
max_players)
}
pub fn network_session_set_matchmaking_property_id(p0: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionSetMatchmakingPropertyId {
    crate::__imports::native_network_session_set_matchmaking_property_id(p0)
}
pub fn network_has_transition_invite_been_acked(p0: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkHasTransitionInviteBeenAcked {
    crate::__imports::native_network_has_transition_invite_been_acked(p0)
}
pub fn set_network_id_pass_control_in_tutorial(net_id: i32,
state: bool) -> altv_wasm_shared::natives_result::ResultOfSetNetworkIdPassControlInTutorial {
    crate::__imports::native_set_network_id_pass_control_in_tutorial(net_id,
state)
}
pub fn network_player_has_headset(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkPlayerHasHeadset {
    crate::__imports::native_network_player_has_headset(player)
}
pub fn network_set_no_longer_needed(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetNoLongerNeeded {
    crate::__imports::native_network_set_no_longer_needed(entity,
toggle)
}
pub fn network_disable_proximity_migration(net_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkDisableProximityMigration {
    crate::__imports::native_network_disable_proximity_migration(net_i_d)
}
pub fn ugc_get_cached_description(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetCachedDescription {
    crate::__imports::native_ugc_get_cached_description(p0,
p1)
}
pub fn network_access_tunable_int_hash(tunable_context: u32,
tunable_name: u32,
value: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkAccessTunableIntHash {
    crate::__imports::native_network_access_tunable_int_hash(tunable_context,
tunable_name,
value)
}
pub fn network_get_friend_display_name(friend_index: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetFriendDisplayName {
    crate::__imports::native_network_get_friend_display_name(friend_index)
}
pub fn fade_out_local_player(p0: bool) -> altv_wasm_shared::natives_result::ResultOfFadeOutLocalPlayer {
    crate::__imports::native_fade_out_local_player(p0)
}
pub fn network_set_in_spectator_mode_extended(toggle: bool,
player_ped: u32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetInSpectatorModeExtended {
    crate::__imports::native_network_set_in_spectator_mode_extended(toggle,
player_ped,
p2)
}
pub fn network_can_receive_local_invite(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkCanReceiveLocalInvite {
    crate::__imports::native_network_can_receive_local_invite(gamer_handle)
}
pub fn network_have_ros_leaderboard_write_priv() -> altv_wasm_shared::natives_result::ResultOfNetworkHaveRosLeaderboardWritePriv {
    crate::__imports::native_network_have_ros_leaderboard_write_priv()
}
pub fn network_is_entity_fading(entity: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsEntityFading {
    crate::__imports::native_network_is_entity_fading(entity)
}
pub fn network_was_game_suspended() -> altv_wasm_shared::natives_result::ResultOfNetworkWasGameSuspended {
    crate::__imports::native_network_was_game_suspended()
}
pub fn network_set_in_spectator_mode(toggle: bool,
player_ped: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkSetInSpectatorMode {
    crate::__imports::native_network_set_in_spectator_mode(toggle,
player_ped)
}
pub fn network_is_friend_online(name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkIsFriendOnline {
    crate::__imports::native_network_is_friend_online(name)
}
pub fn reserve_local_network_mission_vehicles(amount: i32) -> altv_wasm_shared::natives_result::ResultOfReserveLocalNetworkMissionVehicles {
    crate::__imports::native_reserve_local_network_mission_vehicles(amount)
}
pub fn network_get_gamertag_from_handle(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkGetGamertagFromHandle {
    crate::__imports::native_network_get_gamertag_from_handle(gamer_handle)
}
pub fn network_get_entity_killer_of_player(player: u32,
weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetEntityKillerOfPlayer {
    crate::__imports::native_network_get_entity_killer_of_player(player,
weapon_hash)
}
pub fn network_override_clock_rate(ms: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkOverrideClockRate {
    crate::__imports::native_network_override_clock_rate(ms)
}
pub fn network_request_cloud_tunables() -> altv_wasm_shared::natives_result::ResultOfNetworkRequestCloudTunables {
    crate::__imports::native_network_request_cloud_tunables()
}
pub fn network_set_same_team_as_local_player(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSetSameTeamAsLocalPlayer {
    crate::__imports::native_network_set_same_team_as_local_player(p0,
p1)
}
pub fn facebook_can_post_to_facebook() -> altv_wasm_shared::natives_result::ResultOfFacebookCanPostToFacebook {
    crate::__imports::native_facebook_can_post_to_facebook()
}
pub fn network_clear_follow_invite() -> altv_wasm_shared::natives_result::ResultOfNetworkClearFollowInvite {
    crate::__imports::native_network_clear_follow_invite()
}
pub fn network_close_transition_matchmaking() -> altv_wasm_shared::natives_result::ResultOfNetworkCloseTransitionMatchmaking {
    crate::__imports::native_network_close_transition_matchmaking()
}
pub fn reset_store_network_game_tracking() -> altv_wasm_shared::natives_result::ResultOfResetStoreNetworkGameTracking {
    crate::__imports::native_reset_store_network_game_tracking()
}
pub fn network_check_data_manager_succeeded_for_handle(p0: i32,
gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkCheckDataManagerSucceededForHandle {
    crate::__imports::native_network_check_data_manager_succeeded_for_handle(p0,
gamer_handle)
}
pub fn network_quit_mp_to_desktop() -> altv_wasm_shared::natives_result::ResultOfNetworkQuitMpToDesktop {
    crate::__imports::native_network_quit_mp_to_desktop()
}
pub fn ugc_is_modifying() -> altv_wasm_shared::natives_result::ResultOfUgcIsModifying {
    crate::__imports::native_ugc_is_modifying()
}
pub fn network_add_map_entity_to_synchronised_scene(net_scene: i32,
model_hash: u32,
x: f32,
y: f32,
z: f32,
p5: f32,
p6: Option<&String>,
p7: f32,
p8: f32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkAddMapEntityToSynchronisedScene {
    crate::__imports::native_network_add_map_entity_to_synchronised_scene(net_scene,
model_hash,
x,
y,
z,
p5,
p6,
p7,
p8,
flags)
}
pub fn network_do_transition_to_new_game(p0: bool,
max_players: i32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkDoTransitionToNewGame {
    crate::__imports::native_network_do_transition_to_new_game(p0,
max_players,
p2)
}
pub fn has_network_time_started() -> altv_wasm_shared::natives_result::ResultOfHasNetworkTimeStarted {
    crate::__imports::native_has_network_time_started()
}
pub fn trigger_player_crc_hacker_check(player: u32,
p1: i32,
script_hash: u32) -> altv_wasm_shared::natives_result::ResultOfTriggerPlayerCrcHackerCheck {
    crate::__imports::native_trigger_player_crc_hacker_check(player,
p1,
script_hash)
}
pub fn remote_cheater_player_detected(player: u32,
a: i32,
b: i32) -> altv_wasm_shared::natives_result::ResultOfRemoteCheaterPlayerDetected {
    crate::__imports::native_remote_cheater_player_detected(player,
a,
b)
}
pub fn network_attach_synchronised_scene_to_entity(net_scene: i32,
entity: u32,
bone: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkAttachSynchronisedSceneToEntity {
    crate::__imports::native_network_attach_synchronised_scene_to_entity(net_scene,
entity,
bone)
}
pub fn network_session_set_unique_crew_limit_transition(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionSetUniqueCrewLimitTransition {
    crate::__imports::native_network_session_set_unique_crew_limit_transition(p0)
}
pub fn texture_download_release(p0: i32) -> altv_wasm_shared::natives_result::ResultOfTextureDownloadRelease {
    crate::__imports::native_texture_download_release(p0)
}
pub fn network_clan_get_membership_valid(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkClanGetMembershipValid {
    crate::__imports::native_network_clan_get_membership_valid(p0,
p1)
}
pub fn network_clan_get_membership_desc(member_desc: shared::MemoryBufferId,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkClanGetMembershipDesc {
    crate::__imports::native_network_clan_get_membership_desc(member_desc,
p1)
}
pub fn network_player_get_userid(player: u32,
user_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkPlayerGetUserid {
    crate::__imports::native_network_player_get_userid(player,
user_i_d)
}
pub fn network_add_entity_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32) -> altv_wasm_shared::natives_result::ResultOfNetworkAddEntityArea {
    crate::__imports::native_network_add_entity_area(x1,
y1,
z1,
x2,
y2,
z2)
}
pub fn network_get_presence_invite_inviter(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetPresenceInviteInviter {
    crate::__imports::native_network_get_presence_invite_inviter(p0)
}
pub fn network_session_set_matchmaking_group(matchmaking_group: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionSetMatchmakingGroup {
    crate::__imports::native_network_session_set_matchmaking_group(matchmaking_group)
}
pub fn network_entity_area_is_occupied(area_handle: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEntityAreaIsOccupied {
    crate::__imports::native_network_entity_area_is_occupied(area_handle)
}
pub fn network_invite_gamers_to_transition(p0: shared::MemoryBufferId,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkInviteGamersToTransition {
    crate::__imports::native_network_invite_gamers_to_transition(p0,
p1)
}
pub fn network_set_presence_session_invites_blocked(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetPresenceSessionInvitesBlocked {
    crate::__imports::native_network_set_presence_session_invites_blocked(toggle)
}
pub fn network_check_data_manager_for_handle(p0: i32,
gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkCheckDataManagerForHandle {
    crate::__imports::native_network_check_data_manager_for_handle(p0,
gamer_handle)
}
pub fn set_entity_ghosted_for_ghost_players(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityGhostedForGhostPlayers {
    crate::__imports::native_set_entity_ghosted_for_ghost_players(entity,
toggle)
}
pub fn network_start_respawn_search_in_angled_area_for_player(player: u32,
x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
width: f32,
p8: f32,
p9: f32,
p10: f32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkStartRespawnSearchInAngledAreaForPlayer {
    crate::__imports::native_network_start_respawn_search_in_angled_area_for_player(player,
x1,
y1,
z1,
x2,
y2,
z2,
width,
p8,
p9,
p10,
flags)
}
pub fn network_ignore_remote_waypoints() -> altv_wasm_shared::natives_result::ResultOfNetworkIgnoreRemoteWaypoints {
    crate::__imports::native_network_ignore_remote_waypoints()
}
pub fn cloud_has_request_completed(request_id: i32) -> altv_wasm_shared::natives_result::ResultOfCloudHasRequestCompleted {
    crate::__imports::native_cloud_has_request_completed(request_id)
}
pub fn network_get_game_mode() -> altv_wasm_shared::natives_result::ResultOfNetworkGetGameMode {
    crate::__imports::native_network_get_game_mode()
}
pub fn network_get_assisted_damage_of_entity(player: u32,
entity: u32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetAssistedDamageOfEntity {
    crate::__imports::native_network_get_assisted_damage_of_entity(player,
entity,
p2)
}
pub fn ugc_did_query_creators_succeed() -> altv_wasm_shared::natives_result::ResultOfUgcDidQueryCreatorsSucceed {
    crate::__imports::native_ugc_did_query_creators_succeed()
}
pub fn network_has_control_of_network_id(net_id: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkHasControlOfNetworkId {
    crate::__imports::native_network_has_control_of_network_id(net_id)
}
pub fn network_has_invited_gamer(p0: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkHasInvitedGamer {
    crate::__imports::native_network_has_invited_gamer(p0)
}
pub fn network_entity_area_have_all_replied(area_handle: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEntityAreaHaveAllReplied {
    crate::__imports::native_network_entity_area_have_all_replied(area_handle)
}
pub fn ugc_get_content_rating_negative_count(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentRatingNegativeCount {
    crate::__imports::native_ugc_get_content_rating_negative_count(p0,
p1)
}
pub fn reserve_network_mission_objects(amount: i32) -> altv_wasm_shared::natives_result::ResultOfReserveNetworkMissionObjects {
    crate::__imports::native_reserve_network_mission_objects(amount)
}
pub fn network_can_session_end() -> altv_wasm_shared::natives_result::ResultOfNetworkCanSessionEnd {
    crate::__imports::native_network_can_session_end()
}
pub fn cloud_check_availability() -> altv_wasm_shared::natives_result::ResultOfCloudCheckAvailability {
    crate::__imports::native_cloud_check_availability()
}
pub fn network_is_transition_busy() -> altv_wasm_shared::natives_result::ResultOfNetworkIsTransitionBusy {
    crate::__imports::native_network_is_transition_busy()
}
pub fn network_apply_transition_parameter(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkApplyTransitionParameter {
    crate::__imports::native_network_apply_transition_parameter(p0,
p1)
}
pub fn network_set_local_player_sync_look_at(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetLocalPlayerSyncLookAt {
    crate::__imports::native_network_set_local_player_sync_look_at(toggle)
}
pub fn network_get_highest_reliable_resend_count(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetHighestReliableResendCount {
    crate::__imports::native_network_get_highest_reliable_resend_count(player)
}
pub fn ugc_get_top_rated_content(p0: i32,
p1: i32,
p2: shared::MemoryBufferId,
p3: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfUgcGetTopRatedContent {
    crate::__imports::native_ugc_get_top_rated_content(p0,
p1,
p2,
p3)
}
pub fn network_session_get_private_slots() -> altv_wasm_shared::natives_result::ResultOfNetworkSessionGetPrivateSlots {
    crate::__imports::native_network_session_get_private_slots()
}
pub fn network_need_to_start_new_game_but_blocked() -> altv_wasm_shared::natives_result::ResultOfNetworkNeedToStartNewGameButBlocked {
    crate::__imports::native_network_need_to_start_new_game_but_blocked()
}
pub fn network_is_transition_started() -> altv_wasm_shared::natives_result::ResultOfNetworkIsTransitionStarted {
    crate::__imports::native_network_is_transition_started()
}
pub fn network_player_is_rockstar_dev(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkPlayerIsRockstarDev {
    crate::__imports::native_network_player_is_rockstar_dev(player)
}
pub fn network_session_set_unique_crew_only_crews_transition(p0: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionSetUniqueCrewOnlyCrewsTransition {
    crate::__imports::native_network_session_set_unique_crew_only_crews_transition(p0)
}
pub fn network_permissions_has_gamer_record(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkPermissionsHasGamerRecord {
    crate::__imports::native_network_permissions_has_gamer_record(gamer_handle)
}
pub fn ugc_get_content_id(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentId {
    crate::__imports::native_ugc_get_content_id(p0)
}
pub fn network_is_thread_a_network_script(thread_id: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsThreadAnetworkScript {
    crate::__imports::native_network_is_thread_a_network_script(thread_id)
}
pub fn network_report_code_tamper() -> altv_wasm_shared::natives_result::ResultOfNetworkReportCodeTamper {
    crate::__imports::native_network_report_code_tamper()
}
pub fn network_player_index_is_cheater(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkPlayerIndexIsCheater {
    crate::__imports::native_network_player_index_is_cheater(player)
}
pub fn network_session_get_matchmaking_group_free(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionGetMatchmakingGroupFree {
    crate::__imports::native_network_session_get_matchmaking_group_free(p0)
}
pub fn network_is_friend_in_multiplayer(friend_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkIsFriendInMultiplayer {
    crate::__imports::native_network_is_friend_in_multiplayer(friend_name)
}
pub fn network_mark_transition_gamer_as_fully_joined(p0: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkMarkTransitionGamerAsFullyJoined {
    crate::__imports::native_network_mark_transition_gamer_as_fully_joined(p0)
}
pub fn texture_download_has_failed(p0: i32) -> altv_wasm_shared::natives_result::ResultOfTextureDownloadHasFailed {
    crate::__imports::native_texture_download_has_failed(p0)
}
pub fn network_clan_service_is_valid() -> altv_wasm_shared::natives_result::ResultOfNetworkClanServiceIsValid {
    crate::__imports::native_network_clan_service_is_valid()
}
pub fn participant_id_to_int() -> altv_wasm_shared::natives_result::ResultOfParticipantIdToInt {
    crate::__imports::native_participant_id_to_int()
}
pub fn network_is_player_blocked_by_me(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsPlayerBlockedByMe {
    crate::__imports::native_network_is_player_blocked_by_me(player)
}
pub fn network_override_send_restrictions_all(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkOverrideSendRestrictionsAll {
    crate::__imports::native_network_override_send_restrictions_all(toggle)
}
pub fn network_get_script_status() -> altv_wasm_shared::natives_result::ResultOfNetworkGetScriptStatus {
    crate::__imports::native_network_get_script_status()
}
pub fn network_are_handles_the_same(gamer_handle1: shared::MemoryBufferId,
gamer_handle2: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkAreHandlesTheSame {
    crate::__imports::native_network_are_handles_the_same(gamer_handle1,
gamer_handle2)
}
pub fn network_can_bail() -> altv_wasm_shared::natives_result::ResultOfNetworkCanBail {
    crate::__imports::native_network_can_bail()
}
pub fn network_clan_get_emblem_txd_name(net_handle: shared::MemoryBufferId,
txd_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkClanGetEmblemTxdName {
    crate::__imports::native_network_clan_get_emblem_txd_name(net_handle,
txd_name)
}
pub fn ugc_get_content_creator_gamer_handle(p0: i32,
p1: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentCreatorGamerHandle {
    crate::__imports::native_ugc_get_content_creator_gamer_handle(p0,
p1)
}
pub fn network_hash_from_gamer_handle(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkHashFromGamerHandle {
    crate::__imports::native_network_hash_from_gamer_handle(gamer_handle)
}
pub fn open_commerce_store(p0: Option<&String>,
p1: Option<&String>,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfOpenCommerceStore {
    crate::__imports::native_open_commerce_store(p0,
p1,
p2)
}
pub fn network_get_displaynames_from_handles(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetDisplaynamesFromHandles {
    crate::__imports::native_network_get_displaynames_from_handles(p0,
p1,
p2)
}
pub fn is_user_old_enough_to_access_store() -> altv_wasm_shared::natives_result::ResultOfIsUserOldEnoughToAccessStore {
    crate::__imports::native_is_user_old_enough_to_access_store()
}
pub fn network_has_ros_privilege_played_last_gen() -> altv_wasm_shared::natives_result::ResultOfNetworkHasRosPrivilegePlayedLastGen {
    crate::__imports::native_network_has_ros_privilege_played_last_gen()
}
pub fn shutdown_and_launch_single_player_game() -> altv_wasm_shared::natives_result::ResultOfShutdownAndLaunchSinglePlayerGame {
    crate::__imports::native_shutdown_and_launch_single_player_game()
}
pub fn network_check_user_content_privileges(p0: i32,
p1: i32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkCheckUserContentPrivileges {
    crate::__imports::native_network_check_user_content_privileges(p0,
p1,
p2)
}
pub fn ugc_get_creator_num() -> altv_wasm_shared::natives_result::ResultOfUgcGetCreatorNum {
    crate::__imports::native_ugc_get_creator_num()
}
pub fn network_get_random_int() -> altv_wasm_shared::natives_result::ResultOfNetworkGetRandomInt {
    crate::__imports::native_network_get_random_int()
}
pub fn network_session_set_num_bosses(num: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionSetNumBosses {
    crate::__imports::native_network_session_set_num_bosses(num)
}
pub fn network_join_previously_failed_session() -> altv_wasm_shared::natives_result::ResultOfNetworkJoinPreviouslyFailedSession {
    crate::__imports::native_network_join_previously_failed_session()
}
pub fn ugc_get_modify_result() -> altv_wasm_shared::natives_result::ResultOfUgcGetModifyResult {
    crate::__imports::native_ugc_get_modify_result()
}
pub fn ugc_release_cached_description(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcReleaseCachedDescription {
    crate::__imports::native_ugc_release_cached_description(p0)
}
pub fn network_is_transition_private() -> altv_wasm_shared::natives_result::ResultOfNetworkIsTransitionPrivate {
    crate::__imports::native_network_is_transition_private()
}
pub fn network_start_respawn_search_for_player(player: u32,
x: f32,
y: f32,
z: f32,
radius: f32,
p5: f32,
p6: f32,
p7: f32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkStartRespawnSearchForPlayer {
    crate::__imports::native_network_start_respawn_search_for_player(player,
x,
y,
z,
radius,
p5,
p6,
p7,
flags)
}
pub fn network_did_get_gamer_status_succeed() -> altv_wasm_shared::natives_result::ResultOfNetworkDidGetGamerStatusSucceed {
    crate::__imports::native_network_did_get_gamer_status_succeed()
}
pub fn network_get_primary_clan_data_success() -> altv_wasm_shared::natives_result::ResultOfNetworkGetPrimaryClanDataSuccess {
    crate::__imports::native_network_get_primary_clan_data_success()
}
pub fn network_session_voice_set_timeout(timeout: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionVoiceSetTimeout {
    crate::__imports::native_network_session_voice_set_timeout(timeout)
}
pub fn network_clan_download_membership_pending(p0: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkClanDownloadMembershipPending {
    crate::__imports::native_network_clan_download_membership_pending(p0)
}
pub fn network_has_control_of_pickup(pickup: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkHasControlOfPickup {
    crate::__imports::native_network_has_control_of_pickup(pickup)
}
pub fn network_show_psn_ugc_restriction() -> altv_wasm_shared::natives_result::ResultOfNetworkShowPsnUgcRestriction {
    crate::__imports::native_network_show_psn_ugc_restriction()
}
pub fn network_set_antagonistic_to_player(toggle: bool,
player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkSetAntagonisticToPlayer {
    crate::__imports::native_network_set_antagonistic_to_player(toggle,
player)
}
pub fn ugc_load_offline_query(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcLoadOfflineQuery {
    crate::__imports::native_ugc_load_offline_query(p0)
}
pub fn network_has_received_host_broadcast_data() -> altv_wasm_shared::natives_result::ResultOfNetworkHasReceivedHostBroadcastData {
    crate::__imports::native_network_has_received_host_broadcast_data()
}
pub fn network_is_transition_solo() -> altv_wasm_shared::natives_result::ResultOfNetworkIsTransitionSolo {
    crate::__imports::native_network_is_transition_solo()
}
pub fn ugc_request_cached_description(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcRequestCachedDescription {
    crate::__imports::native_ugc_request_cached_description(p0)
}
pub fn ugc_has_create_finished() -> altv_wasm_shared::natives_result::ResultOfUgcHasCreateFinished {
    crate::__imports::native_ugc_has_create_finished()
}
pub fn network_enable_voice_bandwidth_restriction(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkEnableVoiceBandwidthRestriction {
    crate::__imports::native_network_enable_voice_bandwidth_restriction(player)
}
pub fn network_have_platform_subscription() -> altv_wasm_shared::natives_result::ResultOfNetworkHavePlatformSubscription {
    crate::__imports::native_network_have_platform_subscription()
}
pub fn network_get_timeout_time() -> altv_wasm_shared::natives_result::ResultOfNetworkGetTimeoutTime {
    crate::__imports::native_network_get_timeout_time()
}
pub fn network_have_ros_multiplayer_priv() -> altv_wasm_shared::natives_result::ResultOfNetworkHaveRosMultiplayerPriv {
    crate::__imports::native_network_have_ros_multiplayer_priv()
}
pub fn network_text_chat_is_typing() -> altv_wasm_shared::natives_result::ResultOfNetworkTextChatIsTyping {
    crate::__imports::native_network_text_chat_is_typing()
}
pub fn set_local_player_as_ghost(toggle: bool,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetLocalPlayerAsGhost {
    crate::__imports::native_set_local_player_as_ghost(toggle,
p1)
}
pub fn network_session_set_gamemode(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionSetGamemode {
    crate::__imports::native_network_session_set_gamemode(p0)
}
pub fn network_have_ros_social_club_priv() -> altv_wasm_shared::natives_result::ResultOfNetworkHaveRosSocialClubPriv {
    crate::__imports::native_network_have_ros_social_club_priv()
}
pub fn network_check_ros_link_wentdown_not_net() -> altv_wasm_shared::natives_result::ResultOfNetworkCheckRosLinkWentdownNotNet {
    crate::__imports::native_network_check_ros_link_wentdown_not_net()
}
pub fn network_get_num_transition_non_async_gamers() -> altv_wasm_shared::natives_result::ResultOfNetworkGetNumTransitionNonAsyncGamers {
    crate::__imports::native_network_get_num_transition_non_async_gamers()
}
pub fn ugc_clear_offline_query() -> altv_wasm_shared::natives_result::ResultOfUgcClearOfflineQuery {
    crate::__imports::native_ugc_clear_offline_query()
}
pub fn set_network_vehicle_as_ghost(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetNetworkVehicleAsGhost {
    crate::__imports::native_set_network_vehicle_as_ghost(vehicle,
toggle)
}
pub fn network_request_invite_confirmed_event() -> altv_wasm_shared::natives_result::ResultOfNetworkRequestInviteConfirmedEvent {
    crate::__imports::native_network_request_invite_confirmed_event()
}
pub fn facebook_has_post_completed() -> altv_wasm_shared::natives_result::ResultOfFacebookHasPostCompleted {
    crate::__imports::native_facebook_has_post_completed()
}
pub fn network_is_player_fading(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsPlayerFading {
    crate::__imports::native_network_is_player_fading(player)
}
pub fn network_get_instance_id_of_this_script() -> altv_wasm_shared::natives_result::ResultOfNetworkGetInstanceIdOfThisScript {
    crate::__imports::native_network_get_instance_id_of_this_script()
}
pub fn ugc_has_query_creators_finished() -> altv_wasm_shared::natives_result::ResultOfUgcHasQueryCreatorsFinished {
    crate::__imports::native_ugc_has_query_creators_finished()
}
pub fn network_is_player_in_mp_cutscene(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsPlayerInMpCutscene {
    crate::__imports::native_network_is_player_in_mp_cutscene(player)
}
pub fn network_get_last_entity_pos_received_over_network(entity: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetLastEntityPosReceivedOverNetwork {
    crate::__imports::native_network_get_last_entity_pos_received_over_network(entity)
}
pub fn network_is_privilege_check_in_progress() -> altv_wasm_shared::natives_result::ResultOfNetworkIsPrivilegeCheckInProgress {
    crate::__imports::native_network_is_privilege_check_in_progress()
}
pub fn network_finish_broadcasting_data() -> altv_wasm_shared::natives_result::ResultOfNetworkFinishBroadcastingData {
    crate::__imports::native_network_finish_broadcasting_data()
}
pub fn network_get_transition_host(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkGetTransitionHost {
    crate::__imports::native_network_get_transition_host(gamer_handle)
}
pub fn network_is_transition_closed_friends() -> altv_wasm_shared::natives_result::ResultOfNetworkIsTransitionClosedFriends {
    crate::__imports::native_network_is_transition_closed_friends()
}
pub fn network_player_is_cheater() -> altv_wasm_shared::natives_result::ResultOfNetworkPlayerIsCheater {
    crate::__imports::native_network_player_is_cheater()
}
pub fn set_ghost_alpha(alpha: i32) -> altv_wasm_shared::natives_result::ResultOfSetGhostAlpha {
    crate::__imports::native_set_ghost_alpha(alpha)
}
pub fn network_skip_radio_warning() -> altv_wasm_shared::natives_result::ResultOfNetworkSkipRadioWarning {
    crate::__imports::native_network_skip_radio_warning()
}
pub fn get_commerce_item_id(index: i32) -> altv_wasm_shared::natives_result::ResultOfGetCommerceItemId {
    crate::__imports::native_get_commerce_item_id(index)
}
pub fn network_have_scs_private_msg_priv() -> altv_wasm_shared::natives_result::ResultOfNetworkHaveScsPrivateMsgPriv {
    crate::__imports::native_network_have_scs_private_msg_priv()
}
pub fn are_cutscene_entities_networked() -> altv_wasm_shared::natives_result::ResultOfAreCutsceneEntitiesNetworked {
    crate::__imports::native_are_cutscene_entities_networked()
}
pub fn network_set_invite_on_call_for_invite_menu(p0: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkSetInviteOnCallForInviteMenu {
    crate::__imports::native_network_set_invite_on_call_for_invite_menu(p0)
}
pub fn ugc_get_get_by_category(p0: i32,
p1: i32,
p2: i32,
p3: Option<&String>,
p4: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfUgcGetGetByCategory {
    crate::__imports::native_ugc_get_get_by_category(p0,
p1,
p2,
p3,
p4)
}
pub fn network_session_voice_leave() -> altv_wasm_shared::natives_result::ResultOfNetworkSessionVoiceLeave {
    crate::__imports::native_network_session_voice_leave()
}
pub fn network_has_social_club_account() -> altv_wasm_shared::natives_result::ResultOfNetworkHasSocialClubAccount {
    crate::__imports::native_network_has_social_club_account()
}
pub fn get_is_live_area_launch_with_content() -> altv_wasm_shared::natives_result::ResultOfGetIsLiveAreaLaunchWithContent {
    crate::__imports::native_get_is_live_area_launch_with_content()
}
pub fn network_is_in_transition() -> altv_wasm_shared::natives_result::ResultOfNetworkIsInTransition {
    crate::__imports::native_network_is_in_transition()
}
pub fn ugc_release_all_cached_descriptions() -> altv_wasm_shared::natives_result::ResultOfUgcReleaseAllCachedDescriptions {
    crate::__imports::native_ugc_release_all_cached_descriptions()
}
pub fn network_set_can_receive_rs_invites(p0: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetCanReceiveRsInvites {
    crate::__imports::native_network_set_can_receive_rs_invites(p0)
}
pub fn ugc_query_by_category(p0: i32,
p1: i32,
p2: i32,
p3: Option<&String>,
p4: i32,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfUgcQueryByCategory {
    crate::__imports::native_ugc_query_by_category(p0,
p1,
p2,
p3,
p4,
p5)
}
pub fn can_register_mission_entities(ped_amt: i32,
vehicle_amt: i32,
object_amt: i32,
pickup_amt: i32) -> altv_wasm_shared::natives_result::ResultOfCanRegisterMissionEntities {
    crate::__imports::native_can_register_mission_entities(ped_amt,
vehicle_amt,
object_amt,
pickup_amt)
}
pub fn network_access_tunable_bool_modification_detection_registration_hash(context_hash: u32,
name_hash: u32,
value: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkAccessTunableBoolModificationDetectionRegistrationHash {
    crate::__imports::native_network_access_tunable_bool_modification_detection_registration_hash(context_hash,
name_hash,
value)
}
pub fn network_set_ignore_spectator_chat_limits_same_team(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetIgnoreSpectatorChatLimitsSameTeam {
    crate::__imports::native_network_set_ignore_spectator_chat_limits_same_team(toggle)
}
pub fn network_allow_invite_process_in_player_switch(p0: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkAllowInviteProcessInPlayerSwitch {
    crate::__imports::native_network_allow_invite_process_in_player_switch(p0)
}
pub fn network_is_transition_host_from_handle(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkIsTransitionHostFromHandle {
    crate::__imports::native_network_is_transition_host_from_handle(gamer_handle)
}
pub fn network_show_chat_restriction_msc(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkShowChatRestrictionMsc {
    crate::__imports::native_network_show_chat_restriction_msc(player)
}
pub fn network_get_player_index_from_ped(ped: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetPlayerIndexFromPed {
    crate::__imports::native_network_get_player_index_from_ped(ped)
}
pub fn network_get_respawn_result_flags(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetRespawnResultFlags {
    crate::__imports::native_network_get_respawn_result_flags(p0)
}
pub fn network_is_in_mp_cutscene() -> altv_wasm_shared::natives_result::ResultOfNetworkIsInMpCutscene {
    crate::__imports::native_network_is_in_mp_cutscene()
}
pub fn network_clear_queued_join_request() -> altv_wasm_shared::natives_result::ResultOfNetworkClearQueuedJoinRequest {
    crate::__imports::native_network_clear_queued_join_request()
}
pub fn network_get_global_multiplayer_clock(hours: i32,
minutes: i32,
seconds: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetGlobalMultiplayerClock {
    crate::__imports::native_network_get_global_multiplayer_clock(hours,
minutes,
seconds)
}
pub fn network_clear_found_gamers() -> altv_wasm_shared::natives_result::ResultOfNetworkClearFoundGamers {
    crate::__imports::native_network_clear_found_gamers()
}
pub fn ugc_query_most_recently_created_content(offset: i32,
count: i32,
content_type_name: Option<&String>,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfUgcQueryMostRecentlyCreatedContent {
    crate::__imports::native_ugc_query_most_recently_created_content(offset,
count,
content_type_name,
p3)
}
pub fn is_damage_tracker_active_on_network_id(net_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfIsDamageTrackerActiveOnNetworkId {
    crate::__imports::native_is_damage_tracker_active_on_network_id(net_i_d)
}
pub fn network_is_adding_friend() -> altv_wasm_shared::natives_result::ResultOfNetworkIsAddingFriend {
    crate::__imports::native_network_is_adding_friend()
}
pub fn network_session_host(p0: i32,
max_players: i32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionHost {
    crate::__imports::native_network_session_host(p0,
max_players,
p2)
}
pub fn get_commerce_item_cat(index: i32,
index2: i32) -> altv_wasm_shared::natives_result::ResultOfGetCommerceItemCat {
    crate::__imports::native_get_commerce_item_cat(index,
index2)
}
pub fn network_override_team_restrictions(team: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkOverrideTeamRestrictions {
    crate::__imports::native_network_override_team_restrictions(team,
toggle)
}
pub fn network_is_handle_valid(gamer_handle: shared::MemoryBufferId,
gamer_handle_size: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsHandleValid {
    crate::__imports::native_network_is_handle_valid(gamer_handle,
gamer_handle_size)
}
pub fn network_is_title_update_required() -> altv_wasm_shared::natives_result::ResultOfNetworkIsTitleUpdateRequired {
    crate::__imports::native_network_is_title_update_required()
}
pub fn network_get_net_statistics_info(p0: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkGetNetStatisticsInfo {
    crate::__imports::native_network_get_net_statistics_info(p0)
}
pub fn network_is_participant_active(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsParticipantActive {
    crate::__imports::native_network_is_participant_active(p0)
}
pub fn network_session_set_crew_limit_max_members_transition(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionSetCrewLimitMaxMembersTransition {
    crate::__imports::native_network_session_set_crew_limit_max_members_transition(p0)
}
pub fn ugc_get_content_user_name(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentUserName {
    crate::__imports::native_ugc_get_content_user_name(p0)
}
pub fn network_set_override_spectator_mode(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetOverrideSpectatorMode {
    crate::__imports::native_network_set_override_spectator_mode(toggle)
}
pub fn ugc_get_content_has_player_record(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentHasPlayerRecord {
    crate::__imports::native_ugc_get_content_has_player_record(p0)
}
pub fn network_is_entity_concealed(entity: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsEntityConcealed {
    crate::__imports::native_network_is_entity_concealed(entity)
}
pub fn remove_all_sticky_bombs_from_entity(entity: u32,
ped: u32) -> altv_wasm_shared::natives_result::ResultOfRemoveAllStickyBombsFromEntity {
    crate::__imports::native_remove_all_sticky_bombs_from_entity(entity,
ped)
}
pub fn fillout_pm_player_list_with_names(p0: shared::MemoryBufferId,
p1: shared::MemoryBufferId,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfFilloutPmPlayerListWithNames {
    crate::__imports::native_fillout_pm_player_list_with_names(p0,
p1,
p2,
p3)
}
pub fn network_is_gamer_talking(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkIsGamerTalking {
    crate::__imports::native_network_is_gamer_talking(gamer_handle)
}
pub fn network_has_made_invite_decision(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkHasMadeInviteDecision {
    crate::__imports::native_network_has_made_invite_decision(gamer_handle)
}
pub fn network_do_transition_quickmatch(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkDoTransitionQuickmatch {
    crate::__imports::native_network_do_transition_quickmatch(p0,
p1,
p2,
p3,
p4,
p5)
}
pub fn network_set_currently_selected_gamer_handle_from_invite_menu(p0: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkSetCurrentlySelectedGamerHandleFromInviteMenu {
    crate::__imports::native_network_set_currently_selected_gamer_handle_from_invite_menu(p0)
}
pub fn get_commerce_item_texturename(index: i32) -> altv_wasm_shared::natives_result::ResultOfGetCommerceItemTexturename {
    crate::__imports::native_get_commerce_item_texturename(index)
}
pub fn network_is_network_id_remotely_controlled(net_id: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsNetworkIdRemotelyControlled {
    crate::__imports::native_network_is_network_id_remotely_controlled(net_id)
}
pub fn network_reset_body_tracker() -> altv_wasm_shared::natives_result::ResultOfNetworkResetBodyTracker {
    crate::__imports::native_network_reset_body_tracker()
}
pub fn network_remove_all_transition_invite() -> altv_wasm_shared::natives_result::ResultOfNetworkRemoveAllTransitionInvite {
    crate::__imports::native_network_remove_all_transition_invite()
}
pub fn can_register_mission_vehicles(amount: i32) -> altv_wasm_shared::natives_result::ResultOfCanRegisterMissionVehicles {
    crate::__imports::native_can_register_mission_vehicles(amount)
}
pub fn network_has_invited_gamer_to_transition(p0: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkHasInvitedGamerToTransition {
    crate::__imports::native_network_has_invited_gamer_to_transition(p0)
}
pub fn network_get_presence_invite_playlist_current(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetPresenceInvitePlaylistCurrent {
    crate::__imports::native_network_get_presence_invite_playlist_current(p0)
}
pub fn network_clan_crewinfo_get_string_value(anim_dict: Option<&String>,
anim_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkClanCrewinfoGetStringValue {
    crate::__imports::native_network_clan_crewinfo_get_string_value(anim_dict,
anim_name)
}
pub fn release_all_commerce_item_images() -> altv_wasm_shared::natives_result::ResultOfReleaseAllCommerceItemImages {
    crate::__imports::native_release_all_commerce_item_images()
}
pub fn network_have_user_content_privileges(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkHaveUserContentPrivileges {
    crate::__imports::native_network_have_user_content_privileges(p0)
}
pub fn network_unregister_networked_entity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkUnregisterNetworkedEntity {
    crate::__imports::native_network_unregister_networked_entity(entity)
}
pub fn network_get_transition_members(data: shared::MemoryBufferId,
data_count: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetTransitionMembers {
    crate::__imports::native_network_get_transition_members(data,
data_count)
}
pub fn network_get_activity_player_num(p0: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkGetActivityPlayerNum {
    crate::__imports::native_network_get_activity_player_num(p0)
}
pub fn network_request_to_be_host_of_this_script() -> altv_wasm_shared::natives_result::ResultOfNetworkRequestToBeHostOfThisScript {
    crate::__imports::native_network_request_to_be_host_of_this_script()
}
pub fn network_add_ped_to_synchronised_scene(ped: u32,
net_scene: i32,
anim_dict: Option<&String>,
animn_name: Option<&String>,
speed: f32,
speed_multiplier: f32,
duration: i32,
flag: i32,
playback_rate: f32,
p9: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkAddPedToSynchronisedScene {
    crate::__imports::native_network_add_ped_to_synchronised_scene(ped,
net_scene,
anim_dict,
animn_name,
speed,
speed_multiplier,
duration,
flag,
playback_rate,
p9)
}
pub fn network_get_presence_invite_index_by_id(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetPresenceInviteIndexById {
    crate::__imports::native_network_get_presence_invite_index_by_id(p0)
}
pub fn network_is_offline_invite_pending() -> altv_wasm_shared::natives_result::ResultOfNetworkIsOfflineInvitePending {
    crate::__imports::native_network_is_offline_invite_pending()
}
pub fn network_session_is_closed_crew() -> altv_wasm_shared::natives_result::ResultOfNetworkSessionIsClosedCrew {
    crate::__imports::native_network_session_is_closed_crew()
}
pub fn network_get_currently_selected_gamer_handle_from_invite_menu(p0: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkGetCurrentlySelectedGamerHandleFromInviteMenu {
    crate::__imports::native_network_get_currently_selected_gamer_handle_from_invite_menu(p0)
}
pub fn network_get_np_unavailable_reason() -> altv_wasm_shared::natives_result::ResultOfNetworkGetNpUnavailableReason {
    crate::__imports::native_network_get_np_unavailable_reason()
}
pub fn network_set_activity_spectator(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetActivitySpectator {
    crate::__imports::native_network_set_activity_spectator(toggle)
}
pub fn network_remove_transition_invite(p0: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkRemoveTransitionInvite {
    crate::__imports::native_network_remove_transition_invite(p0)
}
pub fn network_clan_is_rockstar_clan(clan_desc: shared::MemoryBufferId,
buffer_size: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkClanIsRockstarClan {
    crate::__imports::native_network_clan_is_rockstar_clan(clan_desc,
buffer_size)
}
pub fn get_user_premium_access() -> altv_wasm_shared::natives_result::ResultOfGetUserPremiumAccess {
    crate::__imports::native_get_user_premium_access()
}
pub fn ugc_get_content_rating_count(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentRatingCount {
    crate::__imports::native_ugc_get_content_rating_count(p0,
p1)
}
pub fn set_local_player_visible_locally(b_include_players_vehicle: bool) -> altv_wasm_shared::natives_result::ResultOfSetLocalPlayerVisibleLocally {
    crate::__imports::native_set_local_player_visible_locally(b_include_players_vehicle)
}
pub fn ugc_get_content_total() -> altv_wasm_shared::natives_result::ResultOfUgcGetContentTotal {
    crate::__imports::native_ugc_get_content_total()
}
pub fn reserve_network_mission_vehicles(amount: i32) -> altv_wasm_shared::natives_result::ResultOfReserveNetworkMissionVehicles {
    crate::__imports::native_reserve_network_mission_vehicles(amount)
}
pub fn set_network_id_visible_in_cutscene_remain_hack(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetNetworkIdVisibleInCutsceneRemainHack {
    crate::__imports::native_set_network_id_visible_in_cutscene_remain_hack(p0,
p1)
}
pub fn network_has_social_networking_sharing_priv() -> altv_wasm_shared::natives_result::ResultOfNetworkHasSocialNetworkingSharingPriv {
    crate::__imports::native_network_has_social_networking_sharing_priv()
}
pub fn network_has_follow_invite() -> altv_wasm_shared::natives_result::ResultOfNetworkHasFollowInvite {
    crate::__imports::native_network_has_follow_invite()
}
pub fn network_player_get_name(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkPlayerGetName {
    crate::__imports::native_network_player_get_name(player)
}
pub fn use_player_colour_instead_of_team_colour(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfUsePlayerColourInsteadOfTeamColour {
    crate::__imports::native_use_player_colour_instead_of_team_colour(toggle)
}
pub fn network_is_showing_system_ui_or_recently_requested_upsell() -> altv_wasm_shared::natives_result::ResultOfNetworkIsShowingSystemUiOrRecentlyRequestedUpsell {
    crate::__imports::native_network_is_showing_system_ui_or_recently_requested_upsell()
}
pub fn network_is_conneted_to_np_presence() -> altv_wasm_shared::natives_result::ResultOfNetworkIsConnetedToNpPresence {
    crate::__imports::native_network_is_conneted_to_np_presence()
}
pub fn network_check_online_privileges(p0: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkCheckOnlinePrivileges {
    crate::__imports::native_network_check_online_privileges(p0,
p1)
}
pub fn network_remove_invalid_object_model(model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkRemoveInvalidObjectModel {
    crate::__imports::native_network_remove_invalid_object_model(model_hash)
}
pub fn ugc_did_modify_succeed() -> altv_wasm_shared::natives_result::ResultOfUgcDidModifySucceed {
    crate::__imports::native_ugc_did_modify_succeed()
}
pub fn network_set_current_data_manager_handle(p0: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkSetCurrentDataManagerHandle {
    crate::__imports::native_network_set_current_data_manager_handle(p0)
}
pub fn reserve_local_network_mission_objects(amount: i32) -> altv_wasm_shared::natives_result::ResultOfReserveLocalNetworkMissionObjects {
    crate::__imports::native_reserve_local_network_mission_objects(amount)
}
pub fn network_get_destroyer_of_network_id(net_id: i32,
weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetDestroyerOfNetworkId {
    crate::__imports::native_network_get_destroyer_of_network_id(net_id,
weapon_hash)
}
pub fn get_network_time() -> altv_wasm_shared::natives_result::ResultOfGetNetworkTime {
    crate::__imports::native_get_network_time()
}
pub fn network_set_script_ready_for_events(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetScriptReadyForEvents {
    crate::__imports::native_network_set_script_ready_for_events(toggle)
}
pub fn network_create_synchronised_scene(x: f32,
y: f32,
z: f32,
x_rot: f32,
y_rot: f32,
z_rot: f32,
rotation_order: i32,
use_occlusion_portal: bool,
looped: bool,
p9: f32,
anim_time: f32,
p11: f32) -> altv_wasm_shared::natives_result::ResultOfNetworkCreateSynchronisedScene {
    crate::__imports::native_network_create_synchronised_scene(x,
y,
z,
x_rot,
y_rot,
z_rot,
rotation_order,
use_occlusion_portal,
looped,
p9,
anim_time,
p11)
}
pub fn ugc_get_content_description_hash(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentDescriptionHash {
    crate::__imports::native_ugc_get_content_description_hash(p0)
}
pub fn network_set_look_at_talkers(p0: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetLookAtTalkers {
    crate::__imports::native_network_set_look_at_talkers(p0)
}
pub fn network_get_bone_id_of_fatal_hit() -> altv_wasm_shared::natives_result::ResultOfNetworkGetBoneIdOfFatalHit {
    crate::__imports::native_network_get_bone_id_of_fatal_hit()
}
pub fn network_is_inactive_profile(p0: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkIsInactiveProfile {
    crate::__imports::native_network_is_inactive_profile(p0)
}
pub fn network_can_enter_multiplayer() -> altv_wasm_shared::natives_result::ResultOfNetworkCanEnterMultiplayer {
    crate::__imports::native_network_can_enter_multiplayer()
}
pub fn is_entity_in_ghost_collision(entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityInGhostCollision {
    crate::__imports::native_is_entity_in_ghost_collision(entity)
}
pub fn network_add_invalid_object_model(model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkAddInvalidObjectModel {
    crate::__imports::native_network_add_invalid_object_model(model_hash)
}
pub fn network_session_voice_respond_to_request(p0: bool,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionVoiceRespondToRequest {
    crate::__imports::native_network_session_voice_respond_to_request(p0,
p1)
}
pub fn ugc_get_content_has_hi_res_photo(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentHasHiResPhoto {
    crate::__imports::native_ugc_get_content_has_hi_res_photo(p0)
}
pub fn ugc_request_content_data_from_params(content_type_name: Option<&String>,
content_id: Option<&String>,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfUgcRequestContentDataFromParams {
    crate::__imports::native_ugc_request_content_data_from_params(content_type_name,
content_id,
p2,
p3,
p4)
}
pub fn can_register_mission_objects(amount: i32) -> altv_wasm_shared::natives_result::ResultOfCanRegisterMissionObjects {
    crate::__imports::native_can_register_mission_objects(amount)
}
pub fn network_have_ros_banned_priv() -> altv_wasm_shared::natives_result::ResultOfNetworkHaveRosBannedPriv {
    crate::__imports::native_network_have_ros_banned_priv()
}
pub fn network_is_cloud_background_script_request_pending() -> altv_wasm_shared::natives_result::ResultOfNetworkIsCloudBackgroundScriptRequestPending {
    crate::__imports::native_network_is_cloud_background_script_request_pending()
}
pub fn ugc_get_get_by_content_id(content_id: Option<&String>,
content_type_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfUgcGetGetByContentId {
    crate::__imports::native_ugc_get_get_by_content_id(content_id,
content_type_name)
}
pub fn network_entity_get_object_id(entity: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkEntityGetObjectId {
    crate::__imports::native_network_entity_get_object_id(entity)
}
pub fn network_get_player_owns_waypoint(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetPlayerOwnsWaypoint {
    crate::__imports::native_network_get_player_owns_waypoint(player)
}
pub fn network_get_host_player_index() -> altv_wasm_shared::natives_result::ResultOfNetworkGetHostPlayerIndex {
    crate::__imports::native_network_get_host_player_index()
}
pub fn network_should_show_strict_nat_warning() -> altv_wasm_shared::natives_result::ResultOfNetworkShouldShowStrictNatWarning {
    crate::__imports::native_network_should_show_strict_nat_warning()
}
pub fn network_get_assisted_kill_of_entity(player: u32,
entity: u32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetAssistedKillOfEntity {
    crate::__imports::native_network_get_assisted_kill_of_entity(player,
entity,
p2)
}
pub fn set_network_enable_high_speed_edge_fall_detection(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetNetworkEnableHighSpeedEdgeFallDetection {
    crate::__imports::native_set_network_enable_high_speed_edge_fall_detection(vehicle,
toggle)
}
pub fn network_is_host_of_this_script() -> altv_wasm_shared::natives_result::ResultOfNetworkIsHostOfThisScript {
    crate::__imports::native_network_is_host_of_this_script()
}
pub fn network_check_communication_privileges(p0: i32,
p1: i32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkCheckCommunicationPrivileges {
    crate::__imports::native_network_check_communication_privileges(p0,
p1,
p2)
}
pub fn network_show_account_upgrade_ui() -> altv_wasm_shared::natives_result::ResultOfNetworkShowAccountUpgradeUi {
    crate::__imports::native_network_show_account_upgrade_ui()
}
pub fn network_get_talker_proximity() -> altv_wasm_shared::natives_result::ResultOfNetworkGetTalkerProximity {
    crate::__imports::native_network_get_talker_proximity()
}
pub fn network_has_valid_ros_credentials() -> altv_wasm_shared::natives_result::ResultOfNetworkHasValidRosCredentials {
    crate::__imports::native_network_has_valid_ros_credentials()
}
pub fn network_session_is_in_voice_session() -> altv_wasm_shared::natives_result::ResultOfNetworkSessionIsInVoiceSession {
    crate::__imports::native_network_session_is_in_voice_session()
}
pub fn network_show_profile_ui(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkShowProfileUi {
    crate::__imports::native_network_show_profile_ui(gamer_handle)
}
pub fn network_queue_gamer_for_status(p0: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkQueueGamerForStatus {
    crate::__imports::native_network_queue_gamer_for_status(p0)
}
pub fn network_does_tunable_exist(tunable_context: Option<&String>,
tunable_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkDoesTunableExist {
    crate::__imports::native_network_does_tunable_exist(tunable_context,
tunable_name)
}
pub fn network_clear_get_gamer_status() -> altv_wasm_shared::natives_result::ResultOfNetworkClearGetGamerStatus {
    crate::__imports::native_network_clear_get_gamer_status()
}
pub fn network_request_control_of_door(door_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkRequestControlOfDoor {
    crate::__imports::native_network_request_control_of_door(door_i_d)
}
pub fn ugc_get_content_rating_positive_count(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentRatingPositiveCount {
    crate::__imports::native_ugc_get_content_rating_positive_count(p0,
p1)
}
pub fn network_is_friend_handle_online(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkIsFriendHandleOnline {
    crate::__imports::native_network_is_friend_handle_online(gamer_handle)
}
pub fn network_am_i_blocked_by_player(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkAmIblockedByPlayer {
    crate::__imports::native_network_am_i_blocked_by_player(player)
}
pub fn network_get_presence_invite_is_tournament(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetPresenceInviteIsTournament {
    crate::__imports::native_network_get_presence_invite_is_tournament(p0)
}
pub fn is_store_available_to_user() -> altv_wasm_shared::natives_result::ResultOfIsStoreAvailableToUser {
    crate::__imports::native_is_store_available_to_user()
}
pub fn get_is_launch_from_live_area() -> altv_wasm_shared::natives_result::ResultOfGetIsLaunchFromLiveArea {
    crate::__imports::native_get_is_launch_from_live_area()
}
pub fn get_network_time_accurate() -> altv_wasm_shared::natives_result::ResultOfGetNetworkTimeAccurate {
    crate::__imports::native_get_network_time_accurate()
}
pub fn network_trigger_damage_event_for_zero_damage(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkTriggerDamageEventForZeroDamage {
    crate::__imports::native_network_trigger_damage_event_for_zero_damage(entity,
toggle)
}
pub fn network_is_local_player_invincible() -> altv_wasm_shared::natives_result::ResultOfNetworkIsLocalPlayerInvincible {
    crate::__imports::native_network_is_local_player_invincible()
}
pub fn get_content_to_load_type() -> altv_wasm_shared::natives_result::ResultOfGetContentToLoadType {
    crate::__imports::native_get_content_to_load_type()
}
pub fn network_transition_start(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkTransitionStart {
    crate::__imports::native_network_transition_start(p0,
p1,
p2,
p3)
}
pub fn network_session_set_matchmaking_group_max(player_type: i32,
player_count: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionSetMatchmakingGroupMax {
    crate::__imports::native_network_session_set_matchmaking_group_max(player_type,
player_count)
}
pub fn get_status_of_texture_download(p0: i32) -> altv_wasm_shared::natives_result::ResultOfGetStatusOfTextureDownload {
    crate::__imports::native_get_status_of_texture_download(p0)
}
pub fn network_access_tunable_int(tunable_context: Option<&String>,
tunable_name: Option<&String>,
value: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkAccessTunableInt {
    crate::__imports::native_network_access_tunable_int(tunable_context,
tunable_name,
value)
}
pub fn network_set_vehicle_driven_in_test_drive(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetVehicleDrivenInTestDrive {
    crate::__imports::native_network_set_vehicle_driven_in_test_drive(toggle)
}
pub fn network_is_player_muted_by_me(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsPlayerMutedByMe {
    crate::__imports::native_network_is_player_muted_by_me(player)
}
pub fn ugc_get_content_created_by_local_player(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentCreatedByLocalPlayer {
    crate::__imports::native_ugc_get_content_created_by_local_player(p0)
}
pub fn network_is_refreshing_ros_credentials() -> altv_wasm_shared::natives_result::ResultOfNetworkIsRefreshingRosCredentials {
    crate::__imports::native_network_is_refreshing_ros_credentials()
}
pub fn network_is_host() -> altv_wasm_shared::natives_result::ResultOfNetworkIsHost {
    crate::__imports::native_network_is_host()
}
pub fn network_is_chatting_in_platform_party(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkIsChattingInPlatformParty {
    crate::__imports::native_network_is_chatting_in_platform_party(gamer_handle)
}
pub fn network_add_friend(gamer_handle: shared::MemoryBufferId,
message: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkAddFriend {
    crate::__imports::native_network_add_friend(gamer_handle,
message)
}
pub fn network_set_spectator_to_non_spectator_text_chat(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetSpectatorToNonSpectatorTextChat {
    crate::__imports::native_network_set_spectator_to_non_spectator_text_chat(toggle)
}
pub fn network_can_communicate_with_gamer(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkCanCommunicateWithGamer {
    crate::__imports::native_network_can_communicate_with_gamer(gamer_handle)
}
pub fn network_is_using_online_promotion() -> altv_wasm_shared::natives_result::ResultOfNetworkIsUsingOnlinePromotion {
    crate::__imports::native_network_is_using_online_promotion()
}
pub fn participant_id() -> altv_wasm_shared::natives_result::ResultOfParticipantId {
    crate::__imports::native_participant_id()
}
pub fn network_is_player_concealed(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsPlayerConcealed {
    crate::__imports::native_network_is_player_concealed(player)
}
pub fn network_has_ros_privilege_special_edition_content() -> altv_wasm_shared::natives_result::ResultOfNetworkHasRosPrivilegeSpecialEditionContent {
    crate::__imports::native_network_has_ros_privilege_special_edition_content()
}
pub fn network_request_cloud_background_scripts() -> altv_wasm_shared::natives_result::ResultOfNetworkRequestCloudBackgroundScripts {
    crate::__imports::native_network_request_cloud_background_scripts()
}
pub fn network_remove_entity_area(area_handle: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkRemoveEntityArea {
    crate::__imports::native_network_remove_entity_area(area_handle)
}
pub fn network_is_player_connected(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsPlayerConnected {
    crate::__imports::native_network_is_player_connected(player)
}
pub fn ugc_did_get_succeed() -> altv_wasm_shared::natives_result::ResultOfUgcDidGetSucceed {
    crate::__imports::native_ugc_did_get_succeed()
}
pub fn network_set_minimum_rank_for_mission(p0: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetMinimumRankForMission {
    crate::__imports::native_network_set_minimum_rank_for_mission(p0)
}
pub fn network_skip_radio_reset_next_close() -> altv_wasm_shared::natives_result::ResultOfNetworkSkipRadioResetNextClose {
    crate::__imports::native_network_skip_radio_reset_next_close()
}
pub fn network_is_getting_gamer_status() -> altv_wasm_shared::natives_result::ResultOfNetworkIsGettingGamerStatus {
    crate::__imports::native_network_is_getting_gamer_status()
}
pub fn network_session_do_crew_matchmaking(crew_id: i32,
p1: i32,
p2: i32,
max_players: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionDoCrewMatchmaking {
    crate::__imports::native_network_session_do_crew_matchmaking(crew_id,
p1,
p2,
max_players)
}
pub fn network_bail(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkBail {
    crate::__imports::native_network_bail(p0,
p1,
p2)
}
pub fn network_entity_use_high_precision_rotation(net_id: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkEntityUseHighPrecisionRotation {
    crate::__imports::native_network_entity_use_high_precision_rotation(net_id,
toggle)
}
pub fn network_get_age_group() -> altv_wasm_shared::natives_result::ResultOfNetworkGetAgeGroup {
    crate::__imports::native_network_get_age_group()
}
pub fn set_remote_player_visible_in_cutscene(player: u32,
locally_visible: bool) -> altv_wasm_shared::natives_result::ResultOfSetRemotePlayerVisibleInCutscene {
    crate::__imports::native_set_remote_player_visible_in_cutscene(player,
locally_visible)
}
pub fn set_store_enabled(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetStoreEnabled {
    crate::__imports::native_set_store_enabled(toggle)
}
pub fn clear_service_event_arguments() -> altv_wasm_shared::natives_result::ResultOfClearServiceEventArguments {
    crate::__imports::native_clear_service_event_arguments()
}
pub fn network_access_tunable_float_hash(tunable_context: u32,
tunable_name: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfNetworkAccessTunableFloatHash {
    crate::__imports::native_network_access_tunable_float_hash(tunable_context,
tunable_name,
value)
}
pub fn network_transition_block_join_requests(p0: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkTransitionBlockJoinRequests {
    crate::__imports::native_network_transition_block_join_requests(p0)
}
pub fn network_is_multiplayer_disabled() -> altv_wasm_shared::natives_result::ResultOfNetworkIsMultiplayerDisabled {
    crate::__imports::native_network_is_multiplayer_disabled()
}
pub fn network_leave_ped_behind_before_warp(player: u32,
x: f32,
y: f32,
z: f32,
p4: bool,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkLeavePedBehindBeforeWarp {
    crate::__imports::native_network_leave_ped_behind_before_warp(player,
x,
y,
z,
p4,
p5)
}
pub fn ugc_get_most_recently_played_content(p0: i32,
p1: i32,
p2: shared::MemoryBufferId,
p3: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfUgcGetMostRecentlyPlayedContent {
    crate::__imports::native_ugc_get_most_recently_played_content(p0,
p1,
p2,
p3)
}
pub fn network_override_send_restrictions(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkOverrideSendRestrictions {
    crate::__imports::native_network_override_send_restrictions(player,
toggle)
}
pub fn ugc_get_content_has_player_bookmarked(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentHasPlayerBookmarked {
    crate::__imports::native_ugc_get_content_has_player_bookmarked(p0)
}
pub fn network_apply_cached_player_head_blend_data(ped: u32,
player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkApplyCachedPlayerHeadBlendData {
    crate::__imports::native_network_apply_cached_player_head_blend_data(ped,
player)
}
pub fn obj_to_net(object: u32) -> altv_wasm_shared::natives_result::ResultOfObjToNet {
    crate::__imports::native_obj_to_net(object)
}
pub fn network_start_synchronised_scene(net_scene: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkStartSynchronisedScene {
    crate::__imports::native_network_start_synchronised_scene(net_scene)
}
pub fn network_is_cloud_available() -> altv_wasm_shared::natives_result::ResultOfNetworkIsCloudAvailable {
    crate::__imports::native_network_is_cloud_available()
}
pub fn get_cloud_time_as_int() -> altv_wasm_shared::natives_result::ResultOfGetCloudTimeAsInt {
    crate::__imports::native_get_cloud_time_as_int()
}
pub fn network_get_primary_clan_data_clear() -> altv_wasm_shared::natives_result::ResultOfNetworkGetPrimaryClanDataClear {
    crate::__imports::native_network_get_primary_clan_data_clear()
}
pub fn network_has_player_started_transition(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkHasPlayerStartedTransition {
    crate::__imports::native_network_has_player_started_transition(player)
}
pub fn ugc_query_my_content(p0: i32,
p1: i32,
p2: shared::MemoryBufferId,
p3: i32,
p4: i32,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfUgcQueryMyContent {
    crate::__imports::native_ugc_query_my_content(p0,
p1,
p2,
p3,
p4,
p5)
}
pub fn network_session_voice_host() -> altv_wasm_shared::natives_result::ResultOfNetworkSessionVoiceHost {
    crate::__imports::native_network_session_voice_host()
}
pub fn network_do_transition_quickmatch_with_group(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: shared::MemoryBufferId,
p5: i32,
p6: i32,
p7: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkDoTransitionQuickmatchWithGroup {
    crate::__imports::native_network_do_transition_quickmatch_with_group(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7)
}
pub fn network_set_in_mp_cutscene(p0: bool,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetInMpCutscene {
    crate::__imports::native_network_set_in_mp_cutscene(p0,
p1)
}
pub fn network_join_transition(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkJoinTransition {
    crate::__imports::native_network_join_transition(player)
}
pub fn network_set_activity_spectator_max(max_spectators: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSetActivitySpectatorMax {
    crate::__imports::native_network_set_activity_spectator_max(max_spectators)
}
pub fn network_is_script_active(script_name: Option<&String>,
instance_id: i32,
p2: bool,
position_hash: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsScriptActive {
    crate::__imports::native_network_is_script_active(script_name,
instance_id,
p2,
position_hash)
}
pub fn network_am_i_muted_by_player(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkAmImutedByPlayer {
    crate::__imports::native_network_am_i_muted_by_player(player)
}
pub fn set_network_id_can_be_reassigned(net_id: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetNetworkIdCanBeReassigned {
    crate::__imports::native_set_network_id_can_be_reassigned(net_id,
toggle)
}
pub fn network_is_transition_to_game() -> altv_wasm_shared::natives_result::ResultOfNetworkIsTransitionToGame {
    crate::__imports::native_network_is_transition_to_game()
}
pub fn network_set_proximity_affects_team(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetProximityAffectsTeam {
    crate::__imports::native_network_set_proximity_affects_team(toggle)
}
pub fn network_invite_gamers(p0: shared::MemoryBufferId,
p1: i32,
p2: shared::MemoryBufferId,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkInviteGamers {
    crate::__imports::native_network_invite_gamers(p0,
p1,
p2,
p3)
}
pub fn network_get_found_gamer(p0: shared::MemoryBufferId,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetFoundGamer {
    crate::__imports::native_network_get_found_gamer(p0,
p1)
}
pub fn network_disable_invincible_flashing(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkDisableInvincibleFlashing {
    crate::__imports::native_network_disable_invincible_flashing(player,
toggle)
}
pub fn network_is_session_started() -> altv_wasm_shared::natives_result::ResultOfNetworkIsSessionStarted {
    crate::__imports::native_network_is_session_started()
}
pub fn network_are_players_in_same_tutorial_session(player: u32,
index: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkArePlayersInSameTutorialSession {
    crate::__imports::native_network_are_players_in_same_tutorial_session(player,
index)
}
pub fn get_time_as_string(time: i32) -> altv_wasm_shared::natives_result::ResultOfGetTimeAsString {
    crate::__imports::native_get_time_as_string(time)
}
pub fn network_do_transition_to_new_freemode(p0: shared::MemoryBufferId,
p1: i32,
players: i32,
p3: bool,
p4: bool,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkDoTransitionToNewFreemode {
    crate::__imports::native_network_do_transition_to_new_freemode(p0,
p1,
players,
p3,
p4,
p5)
}
pub fn shutdown_and_load_most_recent_save() -> altv_wasm_shared::natives_result::ResultOfShutdownAndLoadMostRecentSave {
    crate::__imports::native_shutdown_and_load_most_recent_save()
}
pub fn network_gamertag_from_handle_start(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkGamertagFromHandleStart {
    crate::__imports::native_network_gamertag_from_handle_start(gamer_handle)
}
pub fn ugc_get_crew_content(p0: i32,
p1: i32,
p2: i32,
p3: Option<&String>,
p4: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfUgcGetCrewContent {
    crate::__imports::native_ugc_get_crew_content(p0,
p1,
p2,
p3,
p4)
}
pub fn network_clan_join(clan_desc: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkClanJoin {
    crate::__imports::native_network_clan_join(clan_desc)
}
pub fn ugc_is_creating() -> altv_wasm_shared::natives_result::ResultOfUgcIsCreating {
    crate::__imports::native_ugc_is_creating()
}
pub fn network_session_end(p0: bool,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionEnd {
    crate::__imports::native_network_session_end(p0,
p1)
}
pub fn network_join_group_activity() -> altv_wasm_shared::natives_result::ResultOfNetworkJoinGroupActivity {
    crate::__imports::native_network_join_group_activity()
}
pub fn network_suppress_invite(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSuppressInvite {
    crate::__imports::native_network_suppress_invite(toggle)
}
pub fn network_do_transition_quickmatch_async(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkDoTransitionQuickmatchAsync {
    crate::__imports::native_network_do_transition_quickmatch_async(p0,
p1,
p2,
p3,
p4,
p5)
}
pub fn network_have_ros_create_ticket_priv() -> altv_wasm_shared::natives_result::ResultOfNetworkHaveRosCreateTicketPriv {
    crate::__imports::native_network_have_ros_create_ticket_priv()
}
pub fn network_is_logged_in_to_psn() -> altv_wasm_shared::natives_result::ResultOfNetworkIsLoggedInToPsn {
    crate::__imports::native_network_is_logged_in_to_psn()
}
pub fn network_handle_from_member_id(member_id: Option<&String>,
gamer_handle: shared::MemoryBufferId,
gamer_handle_size: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkHandleFromMemberId {
    crate::__imports::native_network_handle_from_member_id(member_id,
gamer_handle,
gamer_handle_size)
}
pub fn network_get_network_id_from_entity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetNetworkIdFromEntity {
    crate::__imports::native_network_get_network_id_from_entity(entity)
}
pub fn trigger_tuning_crc_hacker_check(player: u32,
p1: Option<&String>,
p2: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfTriggerTuningCrcHackerCheck {
    crate::__imports::native_trigger_tuning_crc_hacker_check(player,
p1,
p2)
}
pub fn network_clan_is_emblem_ready(p0: i32,
p1: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkClanIsEmblemReady {
    crate::__imports::native_network_clan_is_emblem_ready(p0,
p1)
}
pub fn network_can_text_chat_with_gamer(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkCanTextChatWithGamer {
    crate::__imports::native_network_can_text_chat_with_gamer(gamer_handle)
}
pub fn is_network_id_owned_by_participant(net_id: i32) -> altv_wasm_shared::natives_result::ResultOfIsNetworkIdOwnedByParticipant {
    crate::__imports::native_is_network_id_owned_by_participant(net_id)
}
pub fn network_get_num_found_gamers() -> altv_wasm_shared::natives_result::ResultOfNetworkGetNumFoundGamers {
    crate::__imports::native_network_get_num_found_gamers()
}
pub fn ugc_clear_modify_result() -> altv_wasm_shared::natives_result::ResultOfUgcClearModifyResult {
    crate::__imports::native_ugc_clear_modify_result()
}
pub fn network_session_force_cancel_invite() -> altv_wasm_shared::natives_result::ResultOfNetworkSessionForceCancelInvite {
    crate::__imports::native_network_session_force_cancel_invite()
}
pub fn set_network_vehicle_max_position_delta_multiplier(vehicle: u32,
multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetNetworkVehicleMaxPositionDeltaMultiplier {
    crate::__imports::native_set_network_vehicle_max_position_delta_multiplier(vehicle,
multiplier)
}
pub fn get_time_difference(time_a: i32,
time_b: i32) -> altv_wasm_shared::natives_result::ResultOfGetTimeDifference {
    crate::__imports::native_get_time_difference(time_a,
time_b)
}
pub fn network_set_do_not_launch_from_join_as_migrated_host(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetDoNotLaunchFromJoinAsMigratedHost {
    crate::__imports::native_network_set_do_not_launch_from_join_as_migrated_host(toggle)
}
pub fn request_commerce_item_image(index: i32) -> altv_wasm_shared::natives_result::ResultOfRequestCommerceItemImage {
    crate::__imports::native_request_commerce_item_image(index)
}
pub fn network_get_num_connected_players() -> altv_wasm_shared::natives_result::ResultOfNetworkGetNumConnectedPlayers {
    crate::__imports::native_network_get_num_connected_players()
}
pub fn network_add_ped_to_synchronised_scene_with_ik(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32,
p6: i32,
p7: i32,
p8: i32,
p9: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkAddPedToSynchronisedSceneWithIk {
    crate::__imports::native_network_add_ped_to_synchronised_scene_with_ik(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8,
p9)
}
pub fn network_host_transition(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: bool,
p6: bool,
p7: i32,
p8: i32,
p9: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkHostTransition {
    crate::__imports::native_network_host_transition(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8,
p9)
}
pub fn network_request_control_of_network_id(net_id: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkRequestControlOfNetworkId {
    crate::__imports::native_network_request_control_of_network_id(net_id)
}
pub fn set_network_id_visible_in_cutscene(net_id: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetNetworkIdVisibleInCutscene {
    crate::__imports::native_set_network_id_visible_in_cutscene(net_id,
p1,
p2)
}
pub fn network_has_ros_privilege(index: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkHasRosPrivilege {
    crate::__imports::native_network_has_ros_privilege(index)
}
pub fn network_get_max_num_participants() -> altv_wasm_shared::natives_result::ResultOfNetworkGetMaxNumParticipants {
    crate::__imports::native_network_get_max_num_participants()
}
pub fn network_set_custom_arena_ball_params(net_id: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSetCustomArenaBallParams {
    crate::__imports::native_network_set_custom_arena_ball_params(net_id)
}
pub fn get_max_num_network_pickups() -> altv_wasm_shared::natives_result::ResultOfGetMaxNumNetworkPickups {
    crate::__imports::native_get_max_num_network_pickups()
}
pub fn network_session_block_join_requests(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionBlockJoinRequests {
    crate::__imports::native_network_session_block_join_requests(toggle)
}
pub fn facebook_did_post_succeed() -> altv_wasm_shared::natives_result::ResultOfFacebookDidPostSucceed {
    crate::__imports::native_facebook_did_post_succeed()
}
pub fn ugc_get_most_recently_created_content(p0: i32,
p1: i32,
p2: shared::MemoryBufferId,
p3: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfUgcGetMostRecentlyCreatedContent {
    crate::__imports::native_ugc_get_most_recently_created_content(p0,
p1,
p2,
p3)
}
pub fn ugc_get_content_category(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentCategory {
    crate::__imports::native_ugc_get_content_category(p0)
}
pub fn set_remote_player_as_ghost(player: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetRemotePlayerAsGhost {
    crate::__imports::native_set_remote_player_as_ghost(player,
p1)
}
pub fn network_override_coords_and_heading(entity: u32,
x: f32,
y: f32,
z: f32,
heading: f32) -> altv_wasm_shared::natives_result::ResultOfNetworkOverrideCoordsAndHeading {
    crate::__imports::native_network_override_coords_and_heading(entity,
x,
y,
z,
heading)
}
pub fn set_network_id_always_exists_for_player(net_id: i32,
player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetNetworkIdAlwaysExistsForPlayer {
    crate::__imports::native_set_network_id_always_exists_for_player(net_id,
player,
toggle)
}
pub fn network_is_platform_subscription_check_pending() -> altv_wasm_shared::natives_result::ResultOfNetworkIsPlatformSubscriptionCheckPending {
    crate::__imports::native_network_is_platform_subscription_check_pending()
}
pub fn ugc_get_content_is_verified(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentIsVerified {
    crate::__imports::native_ugc_get_content_is_verified(p0)
}
pub fn network_clan_download_membership(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkClanDownloadMembership {
    crate::__imports::native_network_clan_download_membership(gamer_handle)
}
pub fn network_get_predicted_velocity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetPredictedVelocity {
    crate::__imports::native_network_get_predicted_velocity(entity)
}
pub fn network_access_tunable_bool(tunable_context: Option<&String>,
tunable_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkAccessTunableBool {
    crate::__imports::native_network_access_tunable_bool(tunable_context,
tunable_name)
}
pub fn network_set_current_spawn_location_option(mp_setting_spawn: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkSetCurrentSpawnLocationOption {
    crate::__imports::native_network_set_current_spawn_location_option(mp_setting_spawn)
}
pub fn get_num_reserved_mission_objects(p0: bool,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfGetNumReservedMissionObjects {
    crate::__imports::native_get_num_reserved_mission_objects(p0,
p1)
}
pub fn set_network_cutscene_entities(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetNetworkCutsceneEntities {
    crate::__imports::native_set_network_cutscene_entities(toggle)
}
pub fn network_clan_get_membership_count(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkClanGetMembershipCount {
    crate::__imports::native_network_clan_get_membership_count(p0)
}
pub fn network_session_voice_connect_to_player(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionVoiceConnectToPlayer {
    crate::__imports::native_network_session_voice_connect_to_player(gamer_handle)
}
pub fn network_has_pending_invite() -> altv_wasm_shared::natives_result::ResultOfNetworkHasPendingInvite {
    crate::__imports::native_network_has_pending_invite()
}
pub fn convert_posix_time(posix_time: i32,
time_structure: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfConvertPosixTime {
    crate::__imports::native_convert_posix_time(posix_time,
time_structure)
}
pub fn network_is_player_on_blocklist(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkIsPlayerOnBlocklist {
    crate::__imports::native_network_is_player_on_blocklist(gamer_handle)
}
pub fn network_is_in_tutorial_session() -> altv_wasm_shared::natives_result::ResultOfNetworkIsInTutorialSession {
    crate::__imports::native_network_is_in_tutorial_session()
}
pub fn network_get_mute_count_for_player(p0: u32,
p1: f32,
p2: f32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetMuteCountForPlayer {
    crate::__imports::native_network_get_mute_count_for_player(p0,
p1,
p2)
}
pub fn ugc_get_content_is_using_sc_nickname(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentIsUsingScNickname {
    crate::__imports::native_ugc_get_content_is_using_sc_nickname(p0)
}
pub fn network_dump_net_if_config() -> altv_wasm_shared::natives_result::ResultOfNetworkDumpNetIfConfig {
    crate::__imports::native_network_dump_net_if_config()
}
pub fn network_have_communication_privileges(p0: i32,
player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkHaveCommunicationPrivileges {
    crate::__imports::native_network_have_communication_privileges(p0,
player)
}
pub fn network_can_access_multiplayer(loading_state: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkCanAccessMultiplayer {
    crate::__imports::native_network_can_access_multiplayer(loading_state)
}
pub fn network_override_transition_chat(p0: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkOverrideTransitionChat {
    crate::__imports::native_network_override_transition_chat(p0)
}
pub fn network_get_max_friends() -> altv_wasm_shared::natives_result::ResultOfNetworkGetMaxFriends {
    crate::__imports::native_network_get_max_friends()
}
pub fn network_gamertag_from_handle_pending() -> altv_wasm_shared::natives_result::ResultOfNetworkGamertagFromHandlePending {
    crate::__imports::native_network_gamertag_from_handle_pending()
}
pub fn network_has_entity_been_registered_with_this_thread(entity: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkHasEntityBeenRegisteredWithThisThread {
    crate::__imports::native_network_has_entity_been_registered_with_this_thread(entity)
}
pub fn network_clan_player_is_active(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkClanPlayerIsActive {
    crate::__imports::native_network_clan_player_is_active(gamer_handle)
}
pub fn network_retain_activity_group() -> altv_wasm_shared::natives_result::ResultOfNetworkRetainActivityGroup {
    crate::__imports::native_network_retain_activity_group()
}
pub fn is_damage_tracker_active_on_player(player: u32) -> altv_wasm_shared::natives_result::ResultOfIsDamageTrackerActiveOnPlayer {
    crate::__imports::native_is_damage_tracker_active_on_player(player)
}
pub fn network_set_script_automuted(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSetScriptAutomuted {
    crate::__imports::native_network_set_script_automuted(p0)
}
pub fn network_waiting_pop_clear_tutorial_session() -> altv_wasm_shared::natives_result::ResultOfNetworkWaitingPopClearTutorialSession {
    crate::__imports::native_network_waiting_pop_clear_tutorial_session()
}
pub fn network_clan_any_download_membership_pending() -> altv_wasm_shared::natives_result::ResultOfNetworkClanAnyDownloadMembershipPending {
    crate::__imports::native_network_clan_any_download_membership_pending()
}
pub fn get_commerce_item_name(index: i32) -> altv_wasm_shared::natives_result::ResultOfGetCommerceItemName {
    crate::__imports::native_get_commerce_item_name(index)
}
pub fn network_session_change_slots(slots: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionChangeSlots {
    crate::__imports::native_network_session_change_slots(slots,
p1)
}
pub fn veh_to_net(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfVehToNet {
    crate::__imports::native_veh_to_net(vehicle)
}
pub fn network_get_primary_clan_data_pending() -> altv_wasm_shared::natives_result::ResultOfNetworkGetPrimaryClanDataPending {
    crate::__imports::native_network_get_primary_clan_data_pending()
}
pub fn network_can_view_gamer_user_content(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkCanViewGamerUserContent {
    crate::__imports::native_network_can_view_gamer_user_content(gamer_handle)
}
pub fn network_session_is_voice_session_active() -> altv_wasm_shared::natives_result::ResultOfNetworkSessionIsVoiceSessionActive {
    crate::__imports::native_network_session_is_voice_session_active()
}
pub fn trigger_commerce_data_fetch(p0: i32) -> altv_wasm_shared::natives_result::ResultOfTriggerCommerceDataFetch {
    crate::__imports::native_trigger_commerce_data_fetch(p0)
}
pub fn reserve_network_mission_peds(amount: i32) -> altv_wasm_shared::natives_result::ResultOfReserveNetworkMissionPeds {
    crate::__imports::native_reserve_network_mission_peds(amount)
}
pub fn network_request_control_of_entity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkRequestControlOfEntity {
    crate::__imports::native_network_request_control_of_entity(entity)
}
pub fn ugc_get_creators_by_user_id(p0: shared::MemoryBufferId,
p1: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfUgcGetCreatorsByUserId {
    crate::__imports::native_ugc_get_creators_by_user_id(p0,
p1)
}
pub fn network_force_local_player_scar_sync() -> altv_wasm_shared::natives_result::ResultOfNetworkForceLocalPlayerScarSync {
    crate::__imports::native_network_force_local_player_scar_sync()
}
pub fn ugc_get_get_by_content_ids(data: shared::MemoryBufferId,
data_count: i32,
content_type_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfUgcGetGetByContentIds {
    crate::__imports::native_ugc_get_get_by_content_ids(data,
data_count,
content_type_name)
}
pub fn network_is_player_active(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsPlayerActive {
    crate::__imports::native_network_is_player_active(player)
}
pub fn network_session_leave(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionLeave {
    crate::__imports::native_network_session_leave(p0)
}
pub fn network_session_host_friends_only(p0: i32,
max_players: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionHostFriendsOnly {
    crate::__imports::native_network_session_host_friends_only(p0,
max_players)
}
pub fn network_session_is_visible() -> altv_wasm_shared::natives_result::ResultOfNetworkSessionIsVisible {
    crate::__imports::native_network_session_is_visible()
}
pub fn network_set_object_scope_distance(object: u32,
range: f32) -> altv_wasm_shared::natives_result::ResultOfNetworkSetObjectScopeDistance {
    crate::__imports::native_network_set_object_scope_distance(object,
range)
}
pub fn ugc_clear_query_results() -> altv_wasm_shared::natives_result::ResultOfUgcClearQueryResults {
    crate::__imports::native_ugc_clear_query_results()
}
pub fn network_are_social_club_policies_current() -> altv_wasm_shared::natives_result::ResultOfNetworkAreSocialClubPoliciesCurrent {
    crate::__imports::native_network_are_social_club_policies_current()
}
pub fn network_set_voice_active(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetVoiceActive {
    crate::__imports::native_network_set_voice_active(toggle)
}
pub fn network_is_friend_index_online(friend_index: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsFriendIndexOnline {
    crate::__imports::native_network_is_friend_index_online(friend_index)
}
pub fn ugc_get_content_path(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentPath {
    crate::__imports::native_ugc_get_content_path(p0,
p1)
}
pub fn network_clan_remote_memberships_are_in_cache(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkClanRemoteMembershipsAreInCache {
    crate::__imports::native_network_clan_remote_memberships_are_in_cache(p0)
}
pub fn network_conceal_player(player: u32,
toggle: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkConcealPlayer {
    crate::__imports::native_network_conceal_player(player,
toggle,
p2)
}
pub fn network_hash_from_player_handle(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkHashFromPlayerHandle {
    crate::__imports::native_network_hash_from_player_handle(player)
}
pub fn can_register_mission_peds(amount: i32) -> altv_wasm_shared::natives_result::ResultOfCanRegisterMissionPeds {
    crate::__imports::native_can_register_mission_peds(amount)
}
pub fn network_cache_local_player_head_blend_data() -> altv_wasm_shared::natives_result::ResultOfNetworkCacheLocalPlayerHeadBlendData {
    crate::__imports::native_network_cache_local_player_head_blend_data()
}
pub fn network_is_np_available() -> altv_wasm_shared::natives_result::ResultOfNetworkIsNpAvailable {
    crate::__imports::native_network_is_np_available()
}
pub fn network_session_is_displaying_invite_confirmation() -> altv_wasm_shared::natives_result::ResultOfNetworkSessionIsDisplayingInviteConfirmation {
    crate::__imports::native_network_session_is_displaying_invite_confirmation()
}
pub fn net_to_ped(net_handle: i32) -> altv_wasm_shared::natives_result::ResultOfNetToPed {
    crate::__imports::native_net_to_ped(net_handle)
}
pub fn network_session_do_activity_quickmatch(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionDoActivityQuickmatch {
    crate::__imports::native_network_session_do_activity_quickmatch(p0,
p1,
p2,
p3,
p4)
}
pub fn activate_damage_tracker_on_player(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfActivateDamageTrackerOnPlayer {
    crate::__imports::native_activate_damage_tracker_on_player(player,
toggle)
}
pub fn ugc_get_content_name(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentName {
    crate::__imports::native_ugc_get_content_name(p0)
}
pub fn network_leave_ped_behind_before_cutscene(player: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkLeavePedBehindBeforeCutscene {
    crate::__imports::native_network_leave_ped_behind_before_cutscene(player,
p1)
}
pub fn net_to_ent(net_handle: i32) -> altv_wasm_shared::natives_result::ResultOfNetToEnt {
    crate::__imports::native_net_to_ent(net_handle)
}
pub fn ugc_get_root_content_id(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetRootContentId {
    crate::__imports::native_ugc_get_root_content_id(p0)
}
pub fn network_is_door_networked(door_hash: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsDoorNetworked {
    crate::__imports::native_network_is_door_networked(door_hash)
}
pub fn network_get_primary_clan_data_new(p0: shared::MemoryBufferId,
p1: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkGetPrimaryClanDataNew {
    crate::__imports::native_network_get_primary_clan_data_new(p0,
p1)
}
pub fn network_is_push_to_talk_active() -> altv_wasm_shared::natives_result::ResultOfNetworkIsPushToTalkActive {
    crate::__imports::native_network_is_push_to_talk_active()
}
pub fn network_send_transition_invite_via_presence(gamer_handle: shared::MemoryBufferId,
p1: Option<&String>,
data_count: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSendTransitionInviteViaPresence {
    crate::__imports::native_network_send_transition_invite_via_presence(gamer_handle,
p1,
data_count,
p3)
}
pub fn network_ugc_nav(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkUgcNav {
    crate::__imports::native_network_ugc_nav(p0,
p1)
}
pub fn network_session_validate_join(p0: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionValidateJoin {
    crate::__imports::native_network_session_validate_join(p0)
}
pub fn network_has_ros_privilege_end_date(privilege: i32,
ban_type: i32,
time_data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkHasRosPrivilegeEndDate {
    crate::__imports::native_network_has_ros_privilege_end_date(privilege,
ban_type,
time_data)
}
pub fn network_stop_synchronised_scene(net_scene: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkStopSynchronisedScene {
    crate::__imports::native_network_stop_synchronised_scene(net_scene)
}
pub fn network_clear_property_id() -> altv_wasm_shared::natives_result::ResultOfNetworkClearPropertyId {
    crate::__imports::native_network_clear_property_id()
}
pub fn network_clan_has_crewinfo_metadata_been_received() -> altv_wasm_shared::natives_result::ResultOfNetworkClanHasCrewinfoMetadataBeenReceived {
    crate::__imports::native_network_clan_has_crewinfo_metadata_been_received()
}
pub fn network_transition_add_stage(hash: u32,
p1: i32,
p2: i32,
state: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkTransitionAddStage {
    crate::__imports::native_network_transition_add_stage(hash,
p1,
p2,
state,
p4)
}
pub fn network_send_invite_via_presence(gamer_handle: shared::MemoryBufferId,
p1: Option<&String>,
data_count: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSendInviteViaPresence {
    crate::__imports::native_network_send_invite_via_presence(gamer_handle,
p1,
data_count,
p3)
}
pub fn network_has_confirmed_invite() -> altv_wasm_shared::natives_result::ResultOfNetworkHasConfirmedInvite {
    crate::__imports::native_network_has_confirmed_invite()
}
pub fn network_get_destroyer_of_entity(entity: u32,
weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetDestroyerOfEntity {
    crate::__imports::native_network_get_destroyer_of_entity(entity,
weapon_hash)
}
pub fn network_disable_leave_remote_ped_behind(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkDisableLeaveRemotePedBehind {
    crate::__imports::native_network_disable_leave_remote_ped_behind(toggle)
}
pub fn ugc_get_create_content_id() -> altv_wasm_shared::natives_result::ResultOfUgcGetCreateContentId {
    crate::__imports::native_ugc_get_create_content_id()
}
pub fn network_is_transition_leave_postponed() -> altv_wasm_shared::natives_result::ResultOfNetworkIsTransitionLeavePostponed {
    crate::__imports::native_network_is_transition_leave_postponed()
}
pub fn cloud_delete_member_file(p0: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfCloudDeleteMemberFile {
    crate::__imports::native_cloud_delete_member_file(p0)
}
pub fn network_session_join_invite() -> altv_wasm_shared::natives_result::ResultOfNetworkSessionJoinInvite {
    crate::__imports::native_network_session_join_invite()
}
pub fn network_set_task_cutscene_inscope_multipler(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSetTaskCutsceneInscopeMultipler {
    crate::__imports::native_network_set_task_cutscene_inscope_multipler(p0)
}
pub fn ugc_query_by_content_ids(data: shared::MemoryBufferId,
count: i32,
latest_version: bool,
content_type_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfUgcQueryByContentIds {
    crate::__imports::native_ugc_query_by_content_ids(data,
count,
latest_version,
content_type_name)
}
pub fn network_try_access_tunable_bool_hash(tunable_context: u32,
tunable_name: u32,
default_value: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkTryAccessTunableBoolHash {
    crate::__imports::native_network_try_access_tunable_bool_hash(tunable_context,
tunable_name,
default_value)
}
pub fn network_session_host_single_player(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionHostSinglePlayer {
    crate::__imports::native_network_session_host_single_player(p0)
}
pub fn network_get_entity_is_networked(entity: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetEntityIsNetworked {
    crate::__imports::native_network_get_entity_is_networked(entity)
}
pub fn cloud_is_checking_availability() -> altv_wasm_shared::natives_result::ResultOfCloudIsCheckingAvailability {
    crate::__imports::native_cloud_is_checking_availability()
}
pub fn network_get_host_of_this_script() -> altv_wasm_shared::natives_result::ResultOfNetworkGetHostOfThisScript {
    crate::__imports::native_network_get_host_of_this_script()
}
pub fn get_max_num_network_objects() -> altv_wasm_shared::natives_result::ResultOfGetMaxNumNetworkObjects {
    crate::__imports::native_get_max_num_network_objects()
}
pub fn network_member_id_from_gamer_handle(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkMemberIdFromGamerHandle {
    crate::__imports::native_network_member_id_from_gamer_handle(gamer_handle)
}
pub fn ugc_was_query_force_cancelled() -> altv_wasm_shared::natives_result::ResultOfUgcWasQueryForceCancelled {
    crate::__imports::native_ugc_was_query_force_cancelled()
}
pub fn network_action_follow_invite() -> altv_wasm_shared::natives_result::ResultOfNetworkActionFollowInvite {
    crate::__imports::native_network_action_follow_invite()
}
pub fn network_clan_get_membership(p0: i32,
clan_membership: shared::MemoryBufferId,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkClanGetMembership {
    crate::__imports::native_network_clan_get_membership(p0,
clan_membership,
p2)
}
pub fn network_can_set_waypoint() -> altv_wasm_shared::natives_result::ResultOfNetworkCanSetWaypoint {
    crate::__imports::native_network_can_set_waypoint()
}
pub fn network_force_local_use_of_synced_scene_camera(net_scene: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkForceLocalUseOfSyncedSceneCamera {
    crate::__imports::native_network_force_local_use_of_synced_scene_camera(net_scene)
}
pub fn network_set_gamer_invited_to_transition(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkSetGamerInvitedToTransition {
    crate::__imports::native_network_set_gamer_invited_to_transition(gamer_handle)
}
pub fn network_disable_voice_bandwidth_restriction(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkDisableVoiceBandwidthRestriction {
    crate::__imports::native_network_disable_voice_bandwidth_restriction(player)
}
pub fn network_skip_radio_reset_next_open() -> altv_wasm_shared::natives_result::ResultOfNetworkSkipRadioResetNextOpen {
    crate::__imports::native_network_skip_radio_reset_next_open()
}
pub fn get_commerce_product_price(index: i32) -> altv_wasm_shared::natives_result::ResultOfGetCommerceProductPrice {
    crate::__imports::native_get_commerce_product_price(index)
}
pub fn network_is_in_session() -> altv_wasm_shared::natives_result::ResultOfNetworkIsInSession {
    crate::__imports::native_network_is_in_session()
}
pub fn network_session_add_active_matchmaking_group(group_id: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionAddActiveMatchmakingGroup {
    crate::__imports::native_network_session_add_active_matchmaking_group(group_id)
}
pub fn get_num_created_mission_peds(p0: bool) -> altv_wasm_shared::natives_result::ResultOfGetNumCreatedMissionPeds {
    crate::__imports::native_get_num_created_mission_peds(p0)
}
pub fn is_time_less_than(time_a: i32,
time_b: i32) -> altv_wasm_shared::natives_result::ResultOfIsTimeLessThan {
    crate::__imports::native_is_time_less_than(time_a,
time_b)
}
pub fn network_has_control_of_door(door_hash: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkHasControlOfDoor {
    crate::__imports::native_network_has_control_of_door(door_hash)
}
pub fn fillout_pm_player_list(gamer_handle: shared::MemoryBufferId,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfFilloutPmPlayerList {
    crate::__imports::native_fillout_pm_player_list(gamer_handle,
p1,
p2)
}
pub fn network_set_talker_proximity(value: f32) -> altv_wasm_shared::natives_result::ResultOfNetworkSetTalkerProximity {
    crate::__imports::native_network_set_talker_proximity(value)
}
pub fn network_has_view_gamer_user_content_result(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkHasViewGamerUserContentResult {
    crate::__imports::native_network_has_view_gamer_user_content_result(gamer_handle)
}
pub fn ugc_get_content_user_id(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentUserId {
    crate::__imports::native_ugc_get_content_user_id(p0)
}
pub fn network_use_logarithmic_blending_this_frame(entity: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkUseLogarithmicBlendingThisFrame {
    crate::__imports::native_network_use_logarithmic_blending_this_frame(entity)
}
pub fn network_get_entity_from_network_id(net_id: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetEntityFromNetworkId {
    crate::__imports::native_network_get_entity_from_network_id(net_id)
}
pub fn network_get_player_from_gamer_handle(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkGetPlayerFromGamerHandle {
    crate::__imports::native_network_get_player_from_gamer_handle(gamer_handle)
}
pub fn network_is_gamer_muted_by_me(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkIsGamerMutedByMe {
    crate::__imports::native_network_is_gamer_muted_by_me(gamer_handle)
}
pub fn network_get_primary_clan_data_start(p0: shared::MemoryBufferId,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetPrimaryClanDataStart {
    crate::__imports::native_network_get_primary_clan_data_start(p0,
p1)
}
pub fn network_session_is_private() -> altv_wasm_shared::natives_result::ResultOfNetworkSessionIsPrivate {
    crate::__imports::native_network_session_is_private()
}
pub fn network_get_num_presence_invites() -> altv_wasm_shared::natives_result::ResultOfNetworkGetNumPresenceInvites {
    crate::__imports::native_network_get_num_presence_invites()
}
pub fn get_num_reserved_mission_vehicles(p0: bool,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfGetNumReservedMissionVehicles {
    crate::__imports::native_get_num_reserved_mission_vehicles(p0,
p1)
}
pub fn network_get_total_num_players() -> altv_wasm_shared::natives_result::ResultOfNetworkGetTotalNumPlayers {
    crate::__imports::native_network_get_total_num_players()
}
pub fn network_add_synchronised_scene_camera(net_scene: i32,
anim_dict: Option<&String>,
anim_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkAddSynchronisedSceneCamera {
    crate::__imports::native_network_add_synchronised_scene_camera(net_scene,
anim_dict,
anim_name)
}
pub fn ugc_get_content_updated_date(p0: i32,
p1: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfUgcGetContentUpdatedDate {
    crate::__imports::native_ugc_get_content_updated_date(p0,
p1)
}
pub fn network_remain_in_game_chat(p0: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkRemainInGameChat {
    crate::__imports::native_network_remain_in_game_chat(p0)
}
pub fn network_block_join_queue_invites(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkBlockJoinQueueInvites {
    crate::__imports::native_network_block_join_queue_invites(toggle)
}
pub fn ugc_set_deleted(p0: shared::MemoryBufferId,
p1: bool,
p2: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfUgcSetDeleted {
    crate::__imports::native_ugc_set_deleted(p0,
p1,
p2)
}
pub fn network_is_transition_visibility_locked() -> altv_wasm_shared::natives_result::ResultOfNetworkIsTransitionVisibilityLocked {
    crate::__imports::native_network_is_transition_visibility_locked()
}
pub fn network_end_tutorial_session() -> altv_wasm_shared::natives_result::ResultOfNetworkEndTutorialSession {
    crate::__imports::native_network_end_tutorial_session()
}
pub fn set_local_player_visible_in_cutscene(p0: bool,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetLocalPlayerVisibleInCutscene {
    crate::__imports::native_set_local_player_visible_in_cutscene(p0,
p1)
}
pub fn network_try_to_set_this_script_is_network_script(p0: i32,
p1: bool,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkTryToSetThisScriptIsNetworkScript {
    crate::__imports::native_network_try_to_set_this_script_is_network_script(p0,
p1,
p2)
}
pub fn network_leave_transition() -> altv_wasm_shared::natives_result::ResultOfNetworkLeaveTransition {
    crate::__imports::native_network_leave_transition()
}
pub fn network_session_is_awaiting_invite_response() -> altv_wasm_shared::natives_result::ResultOfNetworkSessionIsAwaitingInviteResponse {
    crate::__imports::native_network_session_is_awaiting_invite_response()
}
pub fn network_get_number_body_tracker_hits() -> altv_wasm_shared::natives_result::ResultOfNetworkGetNumberBodyTrackerHits {
    crate::__imports::native_network_get_number_body_tracker_hits()
}
pub fn network_get_presence_invite_playlist_length(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetPresenceInvitePlaylistLength {
    crate::__imports::native_network_get_presence_invite_playlist_length(p0)
}
pub fn network_get_average_latency(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetAverageLatency {
    crate::__imports::native_network_get_average_latency(player)
}
pub fn activate_damage_tracker_on_network_id(net_i_d: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfActivateDamageTrackerOnNetworkId {
    crate::__imports::native_activate_damage_tracker_on_network_id(net_i_d,
toggle)
}
pub fn network_handle_from_friend(friend_index: i32,
gamer_handle: shared::MemoryBufferId,
gamer_handle_size: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkHandleFromFriend {
    crate::__imports::native_network_handle_from_friend(friend_index,
gamer_handle,
gamer_handle_size)
}
pub fn ugc_is_getting() -> altv_wasm_shared::natives_result::ResultOfUgcIsGetting {
    crate::__imports::native_ugc_is_getting()
}
pub fn ugc_get_bookmarked_content(p0: i32,
p1: i32,
p2: Option<&String>,
p3: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfUgcGetBookmarkedContent {
    crate::__imports::native_ugc_get_bookmarked_content(p0,
p1,
p2,
p3)
}
pub fn network_set_team_only_chat(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetTeamOnlyChat {
    crate::__imports::native_network_set_team_only_chat(toggle)
}
pub fn network_displaynames_from_handles_start(p0: shared::MemoryBufferId,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkDisplaynamesFromHandlesStart {
    crate::__imports::native_network_displaynames_from_handles_start(p0,
p1)
}
pub fn network_session_get_kick_vote(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionGetKickVote {
    crate::__imports::native_network_session_get_kick_vote(player)
}
pub fn network_register_high_frequency_player_broadcast_variables(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkRegisterHighFrequencyPlayerBroadcastVariables {
    crate::__imports::native_network_register_high_frequency_player_broadcast_variables(p0,
p1,
p2)
}
pub fn set_invert_ghosting(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetInvertGhosting {
    crate::__imports::native_set_invert_ghosting(p0)
}
pub fn network_is_clock_time_overridden() -> altv_wasm_shared::natives_result::ResultOfNetworkIsClockTimeOverridden {
    crate::__imports::native_network_is_clock_time_overridden()
}
pub fn is_sphere_visible_to_another_machine(p0: f32,
p1: f32,
p2: f32,
p3: f32) -> altv_wasm_shared::natives_result::ResultOfIsSphereVisibleToAnotherMachine {
    crate::__imports::native_is_sphere_visible_to_another_machine(p0,
p1,
p2,
p3)
}
pub fn network_set_entity_can_blend(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetEntityCanBlend {
    crate::__imports::native_network_set_entity_can_blend(entity,
toggle)
}
pub fn network_is_session_active() -> altv_wasm_shared::natives_result::ResultOfNetworkIsSessionActive {
    crate::__imports::native_network_is_session_active()
}
pub fn net_to_obj(net_handle: i32) -> altv_wasm_shared::natives_result::ResultOfNetToObj {
    crate::__imports::native_net_to_obj(net_handle)
}
pub fn network_clear_clock_time_override() -> altv_wasm_shared::natives_result::ResultOfNetworkClearClockTimeOverride {
    crate::__imports::native_network_clear_clock_time_override()
}
pub fn network_is_script_active_by_hash(script_hash: u32,
p1: i32,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkIsScriptActiveByHash {
    crate::__imports::native_network_is_script_active_by_hash(script_hash,
p1,
p2,
p3)
}
pub fn network_get_player_account_id(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetPlayerAccountId {
    crate::__imports::native_network_get_player_account_id(player)
}
pub fn network_apply_voice_proximity_override(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfNetworkApplyVoiceProximityOverride {
    crate::__imports::native_network_apply_voice_proximity_override(x,
y,
z)
}
pub fn is_sphere_visible_to_player(p0: i32,
p1: f32,
p2: f32,
p3: f32,
p4: f32) -> altv_wasm_shared::natives_result::ResultOfIsSphereVisibleToPlayer {
    crate::__imports::native_is_sphere_visible_to_player(p0,
p1,
p2,
p3,
p4)
}
pub fn facebook_post_create_character() -> altv_wasm_shared::natives_result::ResultOfFacebookPostCreateCharacter {
    crate::__imports::native_facebook_post_create_character()
}
pub fn network_handle_from_user_id(user_id: Option<&String>,
gamer_handle: shared::MemoryBufferId,
gamer_handle_size: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkHandleFromUserId {
    crate::__imports::native_network_handle_from_user_id(user_id,
gamer_handle,
gamer_handle_size)
}
pub fn is_network_vehicle_running_respot_timer(network_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfIsNetworkVehicleRunningRespotTimer {
    crate::__imports::native_is_network_vehicle_running_respot_timer(network_i_d)
}
pub fn network_is_finding_gamers() -> altv_wasm_shared::natives_result::ResultOfNetworkIsFindingGamers {
    crate::__imports::native_network_is_finding_gamers()
}
pub fn network_override_receive_restrictions(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkOverrideReceiveRestrictions {
    crate::__imports::native_network_override_receive_restrictions(player,
toggle)
}
pub fn is_time_more_than(time_a: i32,
time_b: i32) -> altv_wasm_shared::natives_result::ResultOfIsTimeMoreThan {
    crate::__imports::native_is_time_more_than(time_a,
time_b)
}
pub fn network_fade_out_entity(entity: u32,
normal: bool,
slow: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkFadeOutEntity {
    crate::__imports::native_network_fade_out_entity(entity,
normal,
slow)
}
pub fn network_resolve_privilege_user_content() -> altv_wasm_shared::natives_result::ResultOfNetworkResolvePrivilegeUserContent {
    crate::__imports::native_network_resolve_privilege_user_content()
}
pub fn network_start_user_content_permissions_check(net_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkStartUserContentPermissionsCheck {
    crate::__imports::native_network_start_user_content_permissions_check(net_handle)
}
pub fn network_am_i_muted_by_gamer(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkAmImutedByGamer {
    crate::__imports::native_network_am_i_muted_by_gamer(gamer_handle)
}
pub fn network_get_presence_invite_id(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetPresenceInviteId {
    crate::__imports::native_network_get_presence_invite_id(p0)
}
pub fn network_session_get_host_aim_preference() -> altv_wasm_shared::natives_result::ResultOfNetworkSessionGetHostAimPreference {
    crate::__imports::native_network_session_get_host_aim_preference()
}
pub fn set_entity_visible_in_cutscene(p0: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityVisibleInCutscene {
    crate::__imports::native_set_entity_visible_in_cutscene(p0,
p1,
p2)
}
pub fn network_clear_voice_channel() -> altv_wasm_shared::natives_result::ResultOfNetworkClearVoiceChannel {
    crate::__imports::native_network_clear_voice_channel()
}
pub fn set_network_id_exists_on_all_machines(net_id: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetNetworkIdExistsOnAllMachines {
    crate::__imports::native_set_network_id_exists_on_all_machines(net_id,
toggle)
}
pub fn ugc_get_content_num() -> altv_wasm_shared::natives_result::ResultOfUgcGetContentNum {
    crate::__imports::native_ugc_get_content_num()
}
pub fn network_get_friend_name(friend_index: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetFriendName {
    crate::__imports::native_network_get_friend_name(friend_index)
}
pub fn set_entity_locally_invisible(entity: u32) -> altv_wasm_shared::natives_result::ResultOfSetEntityLocallyInvisible {
    crate::__imports::native_set_entity_locally_invisible(entity)
}
pub fn can_register_mission_doors(p0: i32) -> altv_wasm_shared::natives_result::ResultOfCanRegisterMissionDoors {
    crate::__imports::native_can_register_mission_doors(p0)
}
pub fn refresh_player_list_stats(p0: i32) -> altv_wasm_shared::natives_result::ResultOfRefreshPlayerListStats {
    crate::__imports::native_refresh_player_list_stats(p0)
}
pub fn network_get_random_int_ranged(range_start: i32,
range_end: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetRandomIntRanged {
    crate::__imports::native_network_get_random_int_ranged(range_start,
range_end)
}
pub fn get_reserved_mission_entities_in_area(x: f32,
y: f32,
z: f32,
p3: i32,
out1: shared::MemoryBufferId,
out2: shared::MemoryBufferId,
out3: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetReservedMissionEntitiesInArea {
    crate::__imports::native_get_reserved_mission_entities_in_area(x,
y,
z,
p3,
out1,
out2,
out3)
}
pub fn network_does_tunable_exist_hash(tunable_context: u32,
tunable_name: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkDoesTunableExistHash {
    crate::__imports::native_network_does_tunable_exist_hash(tunable_context,
tunable_name)
}
pub fn network_find_gamers_in_crew(crew_id: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkFindGamersInCrew {
    crate::__imports::native_network_find_gamers_in_crew(crew_id)
}
pub fn network_access_tunable_float(tunable_context: Option<&String>,
tunable_name: Option<&String>,
value: f32) -> altv_wasm_shared::natives_result::ResultOfNetworkAccessTunableFloat {
    crate::__imports::native_network_access_tunable_float(tunable_context,
tunable_name,
value)
}
pub fn network_session_get_inviter(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionGetInviter {
    crate::__imports::native_network_session_get_inviter(gamer_handle)
}
pub fn set_local_player_invisible_locally(b_include_players_vehicle: bool) -> altv_wasm_shared::natives_result::ResultOfSetLocalPlayerInvisibleLocally {
    crate::__imports::native_set_local_player_invisible_locally(b_include_players_vehicle)
}
pub fn network_entity_area_does_exist(area_handle: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkEntityAreaDoesExist {
    crate::__imports::native_network_entity_area_does_exist(area_handle)
}
pub fn network_apply_ped_scar_data(ped: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkApplyPedScarData {
    crate::__imports::native_network_apply_ped_scar_data(ped,
p1)
}
pub fn network_enable_extra_vehicle_orientation_blend_checks(net_id: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkEnableExtraVehicleOrientationBlendChecks {
    crate::__imports::native_network_enable_extra_vehicle_orientation_blend_checks(net_id,
toggle)
}
pub fn network_override_clock_time(hours: i32,
minutes: i32,
seconds: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkOverrideClockTime {
    crate::__imports::native_network_override_clock_time(hours,
minutes,
seconds)
}
pub fn is_player_in_cutscene(player: u32) -> altv_wasm_shared::natives_result::ResultOfIsPlayerInCutscene {
    crate::__imports::native_is_player_in_cutscene(player)
}
pub fn network_get_local_handle(gamer_handle: shared::MemoryBufferId,
gamer_handle_size: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetLocalHandle {
    crate::__imports::native_network_get_local_handle(gamer_handle,
gamer_handle_size)
}
pub fn network_has_headset() -> altv_wasm_shared::natives_result::ResultOfNetworkHasHeadset {
    crate::__imports::native_network_has_headset()
}
pub fn network_is_gamer_blocked_by_me(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkIsGamerBlockedByMe {
    crate::__imports::native_network_is_gamer_blocked_by_me(gamer_handle)
}
pub fn ugc_cancel_query() -> altv_wasm_shared::natives_result::ResultOfUgcCancelQuery {
    crate::__imports::native_ugc_cancel_query()
}
pub fn is_commerce_data_valid() -> altv_wasm_shared::natives_result::ResultOfIsCommerceDataValid {
    crate::__imports::native_is_commerce_data_valid()
}
pub fn network_access_tunable_bool_hash(tunable_context: u32,
tunable_name: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkAccessTunableBoolHash {
    crate::__imports::native_network_access_tunable_bool_hash(tunable_context,
tunable_name)
}
pub fn network_resurrect_local_player(x: f32,
y: f32,
z: f32,
heading: f32,
p4: bool,
changetime: bool,
p6: bool,
p7: i32,
p8: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkResurrectLocalPlayer {
    crate::__imports::native_network_resurrect_local_player(x,
y,
z,
heading,
p4,
changetime,
p6,
p7,
p8)
}
pub fn network_register_high_frequency_host_broadcast_variables(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkRegisterHighFrequencyHostBroadcastVariables {
    crate::__imports::native_network_register_high_frequency_host_broadcast_variables(p0,
p1,
p2)
}
pub fn network_bail_transition(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkBailTransition {
    crate::__imports::native_network_bail_transition(p0,
p1,
p2)
}
pub fn network_is_np_pending() -> altv_wasm_shared::natives_result::ResultOfNetworkIsNpPending {
    crate::__imports::native_network_is_np_pending()
}
pub fn network_apply_transition_parameter_string(p0: i32,
string: Option<&String>,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkApplyTransitionParameterString {
    crate::__imports::native_network_apply_transition_parameter_string(p0,
string,
p2)
}
pub fn network_remove_and_cancel_all_invites() -> altv_wasm_shared::natives_result::ResultOfNetworkRemoveAndCancelAllInvites {
    crate::__imports::native_network_remove_and_cancel_all_invites()
}
pub fn ugc_has_description_request_finished(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcHasDescriptionRequestFinished {
    crate::__imports::native_ugc_has_description_request_finished(p0)
}
pub fn set_network_vehicle_respot_timer(net_id: i32,
time: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfSetNetworkVehicleRespotTimer {
    crate::__imports::native_set_network_vehicle_respot_timer(net_id,
time,
p2,
p3)
}
pub fn bad_sport_player_left_detected(gamer_handle: shared::MemoryBufferId,
event: i32,
amount_received: i32) -> altv_wasm_shared::natives_result::ResultOfBadSportPlayerLeftDetected {
    crate::__imports::native_bad_sport_player_left_detected(gamer_handle,
event,
amount_received)
}
pub fn network_session_host_closed(p0: i32,
max_players: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionHostClosed {
    crate::__imports::native_network_session_host_closed(p0,
max_players)
}
pub fn ugc_get_query_result() -> altv_wasm_shared::natives_result::ResultOfUgcGetQueryResult {
    crate::__imports::native_ugc_get_query_result()
}
pub fn network_clan_player_get_desc(clan_desc: shared::MemoryBufferId,
buffer_size: i32,
gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkClanPlayerGetDesc {
    crate::__imports::native_network_clan_player_get_desc(clan_desc,
buffer_size,
gamer_handle)
}
pub fn network_change_transition_slots(p0: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkChangeTransitionSlots {
    crate::__imports::native_network_change_transition_slots(p0,
p1)
}
pub fn network_session_is_voice_session_busy() -> altv_wasm_shared::natives_result::ResultOfNetworkSessionIsVoiceSessionBusy {
    crate::__imports::native_network_session_is_voice_session_busy()
}
pub fn network_set_transition_creator_handle(p0: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkSetTransitionCreatorHandle {
    crate::__imports::native_network_set_transition_creator_handle(p0)
}
pub fn network_set_voice_channel(channel: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSetVoiceChannel {
    crate::__imports::native_network_set_voice_channel(channel)
}
pub fn network_is_cable_connected() -> altv_wasm_shared::natives_result::ResultOfNetworkIsCableConnected {
    crate::__imports::native_network_is_cable_connected()
}
pub fn network_remove_presence_invite(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkRemovePresenceInvite {
    crate::__imports::native_network_remove_presence_invite(p0)
}
pub fn network_clear_voice_proximity_override() -> altv_wasm_shared::natives_result::ResultOfNetworkClearVoiceProximityOverride {
    crate::__imports::native_network_clear_voice_proximity_override()
}
pub fn network_remove_and_cancel_all_transition_invites() -> altv_wasm_shared::natives_result::ResultOfNetworkRemoveAndCancelAllTransitionInvites {
    crate::__imports::native_network_remove_and_cancel_all_transition_invites()
}
pub fn network_patch_post_cutscene_hs4f_tun_ent(ped: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkPatchPostCutsceneHs4fTunEnt {
    crate::__imports::native_network_patch_post_cutscene_hs4f_tun_ent(ped)
}
pub fn get_cloud_time_as_string() -> altv_wasm_shared::natives_result::ResultOfGetCloudTimeAsString {
    crate::__imports::native_get_cloud_time_as_string()
}
pub fn network_seed_random_number_generator(seed: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSeedRandomNumberGenerator {
    crate::__imports::native_network_seed_random_number_generator(seed)
}
pub fn network_set_entity_only_exists_for_participants(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetEntityOnlyExistsForParticipants {
    crate::__imports::native_network_set_entity_only_exists_for_participants(entity,
toggle)
}
pub fn network_session_set_matchmaking_mental_state(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionSetMatchmakingMentalState {
    crate::__imports::native_network_session_set_matchmaking_mental_state(p0)
}
pub fn network_add_entity_to_synchronised_scene(entity: u32,
net_scene: i32,
anim_dict: Option<&String>,
anim_name: Option<&String>,
speed: f32,
speed_mulitiplier: f32,
flag: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkAddEntityToSynchronisedScene {
    crate::__imports::native_network_add_entity_to_synchronised_scene(entity,
net_scene,
anim_dict,
anim_name,
speed,
speed_mulitiplier,
flag)
}
pub fn trigger_file_crc_hacker_check(player: u32,
p1: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfTriggerFileCrcHackerCheck {
    crate::__imports::native_trigger_file_crc_hacker_check(player,
p1)
}
pub fn get_num_commerce_items() -> altv_wasm_shared::natives_result::ResultOfGetNumCommerceItems {
    crate::__imports::native_get_num_commerce_items()
}
pub fn network_gamer_has_headset(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfNetworkGamerHasHeadset {
    crate::__imports::native_network_gamer_has_headset(gamer_handle)
}
pub fn network_session_is_solo() -> altv_wasm_shared::natives_result::ResultOfNetworkSessionIsSolo {
    crate::__imports::native_network_session_is_solo()
}
pub fn network_is_session_busy() -> altv_wasm_shared::natives_result::ResultOfNetworkIsSessionBusy {
    crate::__imports::native_network_is_session_busy()
}
pub fn network_clan_get_ui_formatted_tag(clan_desc: shared::MemoryBufferId,
buffer_size: i32,
formatted_tag: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfNetworkClanGetUiFormattedTag {
    crate::__imports::native_network_clan_get_ui_formatted_tag(clan_desc,
buffer_size,
formatted_tag)
}
pub fn network_set_no_spectator_chat(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetNoSpectatorChat {
    crate::__imports::native_network_set_no_spectator_chat(toggle)
}
pub fn network_session_set_unique_crew_limit(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionSetUniqueCrewLimit {
    crate::__imports::native_network_session_set_unique_crew_limit(p0)
}
pub fn ugc_is_language_supported(p0: i32) -> altv_wasm_shared::natives_result::ResultOfUgcIsLanguageSupported {
    crate::__imports::native_ugc_is_language_supported(p0)
}
pub fn is_time_equal_to(time_a: i32,
time_b: i32) -> altv_wasm_shared::natives_result::ResultOfIsTimeEqualTo {
    crate::__imports::native_is_time_equal_to(time_a,
time_b)
}
pub fn network_transition_set_activity_island(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkTransitionSetActivityIsland {
    crate::__imports::native_network_transition_set_activity_island(p0)
}
pub fn network_find_matched_gamers(attribute: i32,
fallback_limit: f32,
lower_limit: f32,
upper_limit: f32) -> altv_wasm_shared::natives_result::ResultOfNetworkFindMatchedGamers {
    crate::__imports::native_network_find_matched_gamers(attribute,
fallback_limit,
lower_limit,
upper_limit)
}
pub fn network_set_friendly_fire_option(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetFriendlyFireOption {
    crate::__imports::native_network_set_friendly_fire_option(toggle)
}
pub fn network_store_invite_through_restart() -> altv_wasm_shared::natives_result::ResultOfNetworkStoreInviteThroughRestart {
    crate::__imports::native_network_store_invite_through_restart()
}
pub fn ugc_set_query_data_from_offline(p0: bool) -> altv_wasm_shared::natives_result::ResultOfUgcSetQueryDataFromOffline {
    crate::__imports::native_ugc_set_query_data_from_offline(p0)
}
pub fn network_did_find_gamers_succeed() -> altv_wasm_shared::natives_result::ResultOfNetworkDidFindGamersSucceed {
    crate::__imports::native_network_did_find_gamers_succeed()
}
pub fn ugc_get_friend_content(p0: i32,
p1: i32,
p2: Option<&String>,
p3: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfUgcGetFriendContent {
    crate::__imports::native_ugc_get_friend_content(p0,
p1,
p2,
p3)
}
pub fn network_send_queued_join_request() -> altv_wasm_shared::natives_result::ResultOfNetworkSendQueuedJoinRequest {
    crate::__imports::native_network_send_queued_join_request()
}
pub fn network_session_kick_player(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkSessionKickPlayer {
    crate::__imports::native_network_session_kick_player(player)
}
pub fn network_accept_presence_invite(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkAcceptPresenceInvite {
    crate::__imports::native_network_accept_presence_invite(p0)
}
pub fn set_player_visible_locally(player: u32,
b_include_players_vehicle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerVisibleLocally {
    crate::__imports::native_set_player_visible_locally(player,
b_include_players_vehicle)
}
pub fn network_hide_projectile_in_cutscene() -> altv_wasm_shared::natives_result::ResultOfNetworkHideProjectileInCutscene {
    crate::__imports::native_network_hide_projectile_in_cutscene()
}
pub fn set_last_viewed_shop_item(p0: u32,
p1: i32,
p2: u32) -> altv_wasm_shared::natives_result::ResultOfSetLastViewedShopItem {
    crate::__imports::native_set_last_viewed_shop_item(p0,
p1,
p2)
}
pub fn network_access_tunable_modification_detection_clear() -> altv_wasm_shared::natives_result::ResultOfNetworkAccessTunableModificationDetectionClear {
    crate::__imports::native_network_access_tunable_modification_detection_clear()
}
pub fn network_find_largest_bunch_of_players(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkFindLargestBunchOfPlayers {
    crate::__imports::native_network_find_largest_bunch_of_players(p0,
p1)
}
pub fn network_clear_transition_creator_handle() -> altv_wasm_shared::natives_result::ResultOfNetworkClearTransitionCreatorHandle {
    crate::__imports::native_network_clear_transition_creator_handle()
}
pub fn network_allow_gang_to_join_tutorial_session(team_id: i32,
instance_id: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkAllowGangToJoinTutorialSession {
    crate::__imports::native_network_allow_gang_to_join_tutorial_session(team_id,
instance_id)
}
pub fn network_cancel_respawn_search() -> altv_wasm_shared::natives_result::ResultOfNetworkCancelRespawnSearch {
    crate::__imports::native_network_cancel_respawn_search()
}
pub fn ugc_get_create_result() -> altv_wasm_shared::natives_result::ResultOfUgcGetCreateResult {
    crate::__imports::native_ugc_get_create_result()
}
pub fn network_session_is_closed_friends() -> altv_wasm_shared::natives_result::ResultOfNetworkSessionIsClosedFriends {
    crate::__imports::native_network_session_is_closed_friends()
}
pub fn network_set_in_free_cam_mode(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkSetInFreeCamMode {
    crate::__imports::native_network_set_in_free_cam_mode(toggle)
}
pub fn get_online_version() -> altv_wasm_shared::natives_result::ResultOfGetOnlineVersion {
    crate::__imports::native_get_online_version()
}
pub fn network_gamertag_from_handle_succeeded() -> altv_wasm_shared::natives_result::ResultOfNetworkGamertagFromHandleSucceeded {
    crate::__imports::native_network_gamertag_from_handle_succeeded()
}
pub fn ugc_set_using_offline_content(p0: bool) -> altv_wasm_shared::natives_result::ResultOfUgcSetUsingOfflineContent {
    crate::__imports::native_ugc_set_using_offline_content(p0)
}
pub fn network_is_in_platform_party_chat() -> altv_wasm_shared::natives_result::ResultOfNetworkIsInPlatformPartyChat {
    crate::__imports::native_network_is_in_platform_party_chat()
}
pub fn network_block_proxy_migration_between_tutorial_sessions(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkBlockProxyMigrationBetweenTutorialSessions {
    crate::__imports::native_network_block_proxy_migration_between_tutorial_sessions(p0)
}
pub fn network_get_num_unacked_reliables(player: u32) -> altv_wasm_shared::natives_result::ResultOfNetworkGetNumUnackedReliables {
    crate::__imports::native_network_get_num_unacked_reliables(player)
}
pub fn network_join_previously_failed_transition() -> altv_wasm_shared::natives_result::ResultOfNetworkJoinPreviouslyFailedTransition {
    crate::__imports::native_network_join_previously_failed_transition()
}
pub fn play_object_auto_start_anim(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlayObjectAutoStartAnim {
    crate::__imports::native_play_object_auto_start_anim(p0)
}
pub fn is_player_entirely_inside_garage(garage_hash: u32,
player: u32,
p2: f32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfIsPlayerEntirelyInsideGarage {
    crate::__imports::native_is_player_entirely_inside_garage(garage_hash,
player,
p2,
p3)
}
pub fn is_object_a_portable_pickup(object: u32) -> altv_wasm_shared::natives_result::ResultOfIsObjectAportablePickup {
    crate::__imports::native_is_object_a_portable_pickup(object)
}
pub fn door_system_set_automatic_rate(door_hash: u32,
rate: f32,
request_door: bool,
force_update: bool) -> altv_wasm_shared::natives_result::ResultOfDoorSystemSetAutomaticRate {
    crate::__imports::native_door_system_set_automatic_rate(door_hash,
rate,
request_door,
force_update)
}
pub fn create_money_pickups(x: f32,
y: f32,
z: f32,
value: i32,
amount: i32,
model: u32) -> altv_wasm_shared::natives_result::ResultOfCreateMoneyPickups {
    crate::__imports::native_create_money_pickups(x,
y,
z,
value,
amount,
model)
}
pub fn set_pickup_glow_offset(pickup: i32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetPickupGlowOffset {
    crate::__imports::native_set_pickup_glow_offset(pickup,
p1)
}
pub fn get_weapon_type_from_pickup_type(pickup_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetWeaponTypeFromPickupType {
    crate::__imports::native_get_weapon_type_from_pickup_type(pickup_hash)
}
pub fn set_max_num_portable_pickups_carried_by_player(model_hash: u32,
number: i32) -> altv_wasm_shared::natives_result::ResultOfSetMaxNumPortablePickupsCarriedByPlayer {
    crate::__imports::native_set_max_num_portable_pickups_carried_by_player(model_hash,
number)
}
pub fn is_pickup_weapon_object_valid(object: u32) -> altv_wasm_shared::natives_result::ResultOfIsPickupWeaponObjectValid {
    crate::__imports::native_is_pickup_weapon_object_valid(object)
}
pub fn create_non_networked_portable_pickup(pickup_hash: u32,
x: f32,
y: f32,
z: f32,
place_on_ground: bool,
model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfCreateNonNetworkedPortablePickup {
    crate::__imports::native_create_non_networked_portable_pickup(pickup_hash,
x,
y,
z,
place_on_ground,
model_hash)
}
pub fn door_system_get_door_state(door_hash: u32) -> altv_wasm_shared::natives_result::ResultOfDoorSystemGetDoorState {
    crate::__imports::native_door_system_get_door_state(door_hash)
}
pub fn get_offset_from_coord_and_heading_in_world_coords(x_pos: f32,
y_pos: f32,
z_pos: f32,
heading: f32,
x_offset: f32,
y_offset: f32,
z_offset: f32) -> altv_wasm_shared::natives_result::ResultOfGetOffsetFromCoordAndHeadingInWorldCoords {
    crate::__imports::native_get_offset_from_coord_and_heading_in_world_coords(x_pos,
y_pos,
z_pos,
heading,
x_offset,
y_offset,
z_offset)
}
pub fn get_coords_and_rotation_of_closest_object_of_type(x: f32,
y: f32,
z: f32,
radius: f32,
model_hash: u32,
out_position: Option<&shared::Vector3>,
out_rotation: Option<&shared::Vector3>,
rotation_order: i32) -> altv_wasm_shared::natives_result::ResultOfGetCoordsAndRotationOfClosestObjectOfType {
    crate::__imports::native_get_coords_and_rotation_of_closest_object_of_type(x,
y,
z,
radius,
model_hash,
out_position,
out_rotation,
rotation_order)
}
pub fn is_player_partially_inside_garage(garage_hash: u32,
player: u32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfIsPlayerPartiallyInsideGarage {
    crate::__imports::native_is_player_partially_inside_garage(garage_hash,
player,
p2)
}
pub fn clear_objects_inside_garage(garage_hash: u32,
vehicles: bool,
peds: bool,
objects: bool,
is_network: bool) -> altv_wasm_shared::natives_result::ResultOfClearObjectsInsideGarage {
    crate::__imports::native_clear_objects_inside_garage(garage_hash,
vehicles,
peds,
objects,
is_network)
}
pub fn set_weapon_impacts_apply_greater_force(object: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetWeaponImpactsApplyGreaterForce {
    crate::__imports::native_set_weapon_impacts_apply_greater_force(object,
p1)
}
pub fn set_pickup_uncollectable(pickup: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPickupUncollectable {
    crate::__imports::native_set_pickup_uncollectable(pickup,
toggle)
}
pub fn set_is_object_articulated(object: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetIsObjectArticulated {
    crate::__imports::native_set_is_object_articulated(object,
toggle)
}
pub fn block_players_for_ambient_pickup(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfBlockPlayersForAmbientPickup {
    crate::__imports::native_block_players_for_ambient_pickup(p0,
p1)
}
pub fn get_pickup_coords(pickup: i32) -> altv_wasm_shared::natives_result::ResultOfGetPickupCoords {
    crate::__imports::native_get_pickup_coords(pickup)
}
pub fn get_has_object_been_completely_destroyed(p0: i32) -> altv_wasm_shared::natives_result::ResultOfGetHasObjectBeenCompletelyDestroyed {
    crate::__imports::native_get_has_object_been_completely_destroyed(p0)
}
pub fn get_rayfire_map_object_anim_phase(object: u32) -> altv_wasm_shared::natives_result::ResultOfGetRayfireMapObjectAnimPhase {
    crate::__imports::native_get_rayfire_map_object_anim_phase(object)
}
pub fn set_pickup_object_glow_when_uncollectable(pickup: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPickupObjectGlowWhenUncollectable {
    crate::__imports::native_set_pickup_object_glow_when_uncollectable(pickup,
toggle)
}
pub fn remove_all_pickups_of_type(pickup_hash: u32) -> altv_wasm_shared::natives_result::ResultOfRemoveAllPickupsOfType {
    crate::__imports::native_remove_all_pickups_of_type(pickup_hash)
}
pub fn is_point_in_angled_area(x_pos: f32,
y_pos: f32,
z_pos: f32,
x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
width: f32,
debug: bool,
include_z: bool) -> altv_wasm_shared::natives_result::ResultOfIsPointInAngledArea {
    crate::__imports::native_is_point_in_angled_area(x_pos,
y_pos,
z_pos,
x1,
y1,
z1,
x2,
y2,
z2,
width,
debug,
include_z)
}
pub fn create_portable_pickup(pickup_hash: u32,
x: f32,
y: f32,
z: f32,
place_on_ground: bool,
model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfCreatePortablePickup {
    crate::__imports::native_create_portable_pickup(pickup_hash,
x,
y,
z,
place_on_ground,
model_hash)
}
pub fn slide_object(object: u32,
to_x: f32,
to_y: f32,
to_z: f32,
speed_x: f32,
speed_y: f32,
speed_z: f32,
collision: bool) -> altv_wasm_shared::natives_result::ResultOfSlideObject {
    crate::__imports::native_slide_object(object,
to_x,
to_y,
to_z,
speed_x,
speed_y,
speed_z,
collision)
}
pub fn set_prop_tint_index(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetPropTintIndex {
    crate::__imports::native_set_prop_tint_index(p0,
p1)
}
pub fn set_pickup_generation_range_multiplier(multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetPickupGenerationRangeMultiplier {
    crate::__imports::native_set_pickup_generation_range_multiplier(multiplier)
}
pub fn set_only_allow_ammo_collection_when_low(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetOnlyAllowAmmoCollectionWhenLow {
    crate::__imports::native_set_only_allow_ammo_collection_when_low(p0)
}
pub fn remove_pickup(pickup: i32) -> altv_wasm_shared::natives_result::ResultOfRemovePickup {
    crate::__imports::native_remove_pickup(pickup)
}
pub fn render_fake_pickup_glow(x: f32,
y: f32,
z: f32,
color_index: i32) -> altv_wasm_shared::natives_result::ResultOfRenderFakePickupGlow {
    crate::__imports::native_render_fake_pickup_glow(x,
y,
z,
color_index)
}
pub fn is_object_entirely_inside_garage(garage_hash: u32,
entity: u32,
p2: f32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfIsObjectEntirelyInsideGarage {
    crate::__imports::native_is_object_entirely_inside_garage(garage_hash,
entity,
p2,
p3)
}
pub fn force_pickup_rotate_face_up() -> altv_wasm_shared::natives_result::ResultOfForcePickupRotateFaceUp {
    crate::__imports::native_force_pickup_rotate_face_up()
}
pub fn is_any_object_near_point(x: f32,
y: f32,
z: f32,
range: f32,
p4: bool) -> altv_wasm_shared::natives_result::ResultOfIsAnyObjectNearPoint {
    crate::__imports::native_is_any_object_near_point(x,
y,
z,
range,
p4)
}
pub fn set_pickup_object_arrow_marker(pickup: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPickupObjectArrowMarker {
    crate::__imports::native_set_pickup_object_arrow_marker(pickup,
toggle)
}
pub fn set_object_is_visible_in_mirrors(object: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetObjectIsVisibleInMirrors {
    crate::__imports::native_set_object_is_visible_in_mirrors(object,
toggle)
}
pub fn get_is_articulated_joint_at_max_angle(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfGetIsArticulatedJointAtMaxAngle {
    crate::__imports::native_get_is_articulated_joint_at_max_angle(p0,
p1)
}
pub fn set_pickup_hidden_when_uncollectable(pickup: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPickupHiddenWhenUncollectable {
    crate::__imports::native_set_pickup_hidden_when_uncollectable(pickup,
toggle)
}
pub fn set_activate_object_physics_as_soon_as_it_is_unfrozen(object: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetActivateObjectPhysicsAsSoonAsItIsUnfrozen {
    crate::__imports::native_set_activate_object_physics_as_soon_as_it_is_unfrozen(object,
toggle)
}
pub fn get_is_articulated_joint_at_min_angle(object: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfGetIsArticulatedJointAtMinAngle {
    crate::__imports::native_get_is_articulated_joint_at_min_angle(object,
p1)
}
pub fn has_closest_object_of_type_been_completely_destroyed(x: f32,
y: f32,
z: f32,
radius: f32,
model_hash: u32,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfHasClosestObjectOfTypeBeenCompletelyDestroyed {
    crate::__imports::native_has_closest_object_of_type_been_completely_destroyed(x,
y,
z,
radius,
model_hash,
p5)
}
pub fn remove_door_from_system(door_hash: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfRemoveDoorFromSystem {
    crate::__imports::native_remove_door_from_system(door_hash,
p1)
}
pub fn set_portable_pickup_persist(pickup: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPortablePickupPersist {
    crate::__imports::native_set_portable_pickup_persist(pickup,
toggle)
}
pub fn remove_object_high_detail_model(object: u32) -> altv_wasm_shared::natives_result::ResultOfRemoveObjectHighDetailModel {
    crate::__imports::native_remove_object_high_detail_model(object)
}
pub fn door_system_get_door_pending_state(door_hash: u32) -> altv_wasm_shared::natives_result::ResultOfDoorSystemGetDoorPendingState {
    crate::__imports::native_door_system_get_door_pending_state(door_hash)
}
pub fn force_activate_physics_on_unfixed_pickup(pickup: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfForceActivatePhysicsOnUnfixedPickup {
    crate::__imports::native_force_activate_physics_on_unfixed_pickup(pickup,
toggle)
}
pub fn set_object_allow_low_lod_buoyancy(object: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetObjectAllowLowLodBuoyancy {
    crate::__imports::native_set_object_allow_low_lod_buoyancy(object,
toggle)
}
pub fn get_pickup_object(pickup: i32) -> altv_wasm_shared::natives_result::ResultOfGetPickupObject {
    crate::__imports::native_get_pickup_object(pickup)
}
pub fn create_object(model_hash: u32,
x: f32,
y: f32,
z: f32,
is_network: bool,
b_script_host_obj: bool,
dynamic: bool) -> altv_wasm_shared::natives_result::ResultOfCreateObject {
    crate::__imports::native_create_object(model_hash,
x,
y,
z,
is_network,
b_script_host_obj,
dynamic)
}
pub fn does_rayfire_map_object_exist(object: u32) -> altv_wasm_shared::natives_result::ResultOfDoesRayfireMapObjectExist {
    crate::__imports::native_does_rayfire_map_object_exist(object)
}
pub fn delete_object(object: u32) -> altv_wasm_shared::natives_result::ResultOfDeleteObject {
    crate::__imports::native_delete_object(object)
}
pub fn set_team_pickup_object(object: u32,
p1: i32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetTeamPickupObject {
    crate::__imports::native_set_team_pickup_object(object,
p1,
p2)
}
pub fn door_system_find_existing_door(x: f32,
y: f32,
z: f32,
model_hash: u32,
out_door_hash: u32) -> altv_wasm_shared::natives_result::ResultOfDoorSystemFindExistingDoor {
    crate::__imports::native_door_system_find_existing_door(x,
y,
z,
model_hash,
out_door_hash)
}
pub fn place_object_on_ground_properly(object: u32) -> altv_wasm_shared::natives_result::ResultOfPlaceObjectOnGroundProperly {
    crate::__imports::native_place_object_on_ground_properly(object)
}
pub fn set_state_of_rayfire_map_object(object: u32,
state: i32) -> altv_wasm_shared::natives_result::ResultOfSetStateOfRayfireMapObject {
    crate::__imports::native_set_state_of_rayfire_map_object(object,
state)
}
pub fn force_portable_pickup_last_accessible_position_setting(object: u32) -> altv_wasm_shared::natives_result::ResultOfForcePortablePickupLastAccessiblePositionSetting {
    crate::__imports::native_force_portable_pickup_last_accessible_position_setting(object)
}
pub fn convert_old_pickup_type_to_new(pickup_hash: u32) -> altv_wasm_shared::natives_result::ResultOfConvertOldPickupTypeToNew {
    crate::__imports::native_convert_old_pickup_type_to_new(pickup_hash)
}
pub fn set_prop_light_color(object: u32,
p1: bool,
r: i32,
g: i32,
b: i32) -> altv_wasm_shared::natives_result::ResultOfSetPropLightColor {
    crate::__imports::native_set_prop_light_color(object,
p1,
r,
g,
b)
}
pub fn set_player_permitted_to_collect_pickups_of_type(player: u32,
pickup_hash: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerPermittedToCollectPickupsOfType {
    crate::__imports::native_set_player_permitted_to_collect_pickups_of_type(player,
pickup_hash,
toggle)
}
pub fn set_object_glow_in_same_team(pickup: i32) -> altv_wasm_shared::natives_result::ResultOfSetObjectGlowInSameTeam {
    crate::__imports::native_set_object_glow_in_same_team(pickup)
}
pub fn set_projectiles_should_explode_on_contact(entity: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetProjectilesShouldExplodeOnContact {
    crate::__imports::native_set_projectiles_should_explode_on_contact(entity,
p1)
}
pub fn allow_portable_pickup_to_migrate_to_non_participants(pickup: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfAllowPortablePickupToMigrateToNonParticipants {
    crate::__imports::native_allow_portable_pickup_to_migrate_to_non_participants(pickup,
toggle)
}
pub fn door_system_get_open_ratio(door_hash: u32) -> altv_wasm_shared::natives_result::ResultOfDoorSystemGetOpenRatio {
    crate::__imports::native_door_system_get_open_ratio(door_hash)
}
pub fn disable_tidying_up_in_garage(id: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfDisableTidyingUpInGarage {
    crate::__imports::native_disable_tidying_up_in_garage(id,
toggle)
}
pub fn close_safehouse_garages() -> altv_wasm_shared::natives_result::ResultOfCloseSafehouseGarages {
    crate::__imports::native_close_safehouse_garages()
}
pub fn create_ambient_pickup(pickup_hash: u32,
pos_x: f32,
pos_y: f32,
pos_z: f32,
flags: i32,
value: i32,
model_hash: u32,
p7: bool,
p8: bool) -> altv_wasm_shared::natives_result::ResultOfCreateAmbientPickup {
    crate::__imports::native_create_ambient_pickup(pickup_hash,
pos_x,
pos_y,
pos_z,
flags,
value,
model_hash,
p7,
p8)
}
pub fn is_any_entity_entirely_inside_garage(garage_hash: u32,
p1: bool,
p2: bool,
p3: bool,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfIsAnyEntityEntirelyInsideGarage {
    crate::__imports::native_is_any_entity_entirely_inside_garage(garage_hash,
p1,
p2,
p3,
p4)
}
pub fn door_system_set_door_state(door_hash: u32,
state: i32,
request_door: bool,
force_update: bool) -> altv_wasm_shared::natives_result::ResultOfDoorSystemSetDoorState {
    crate::__imports::native_door_system_set_door_state(door_hash,
state,
request_door,
force_update)
}
pub fn get_safe_pickup_coords(x: f32,
y: f32,
z: f32,
p3: f32,
p4: f32) -> altv_wasm_shared::natives_result::ResultOfGetSafePickupCoords {
    crate::__imports::native_get_safe_pickup_coords(x,
y,
z,
p3,
p4)
}
pub fn add_door_to_system(door_hash: u32,
model_hash: u32,
x: f32,
y: f32,
z: f32,
p5: bool,
script_door: bool,
is_local: bool) -> altv_wasm_shared::natives_result::ResultOfAddDoorToSystem {
    crate::__imports::native_add_door_to_system(door_hash,
model_hash,
x,
y,
z,
p5,
script_door,
is_local)
}
pub fn close_all_barriers_for_race() -> altv_wasm_shared::natives_result::ResultOfCloseAllBarriersForRace {
    crate::__imports::native_close_all_barriers_for_race()
}
pub fn set_object_is_a_pressure_plate(object: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetObjectIsApressurePlate {
    crate::__imports::native_set_object_is_a_pressure_plate(object,
toggle)
}
pub fn force_pickup_regenerate(p0: i32) -> altv_wasm_shared::natives_result::ResultOfForcePickupRegenerate {
    crate::__imports::native_force_pickup_regenerate(p0)
}
pub fn has_closest_object_of_type_been_broken(p0: f32,
p1: f32,
p2: f32,
p3: f32,
model_hash: u32,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfHasClosestObjectOfTypeBeenBroken {
    crate::__imports::native_has_closest_object_of_type_been_broken(p0,
p1,
p2,
p3,
model_hash,
p5)
}
pub fn clear_pickup_reward_type_suppression(reward_type: i32) -> altv_wasm_shared::natives_result::ResultOfClearPickupRewardTypeSuppression {
    crate::__imports::native_clear_pickup_reward_type_suppression(reward_type)
}
pub fn set_object_force_vehicles_to_avoid(object: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetObjectForceVehiclesToAvoid {
    crate::__imports::native_set_object_force_vehicles_to_avoid(object,
toggle)
}
pub fn set_pickup_regeneration_time(pickup: i32,
duration: i32) -> altv_wasm_shared::natives_result::ResultOfSetPickupRegenerationTime {
    crate::__imports::native_set_pickup_regeneration_time(pickup,
duration)
}
pub fn set_pickup_object_collectable_in_vehicle(pickup: i32) -> altv_wasm_shared::natives_result::ResultOfSetPickupObjectCollectableInVehicle {
    crate::__imports::native_set_pickup_object_collectable_in_vehicle(pickup)
}
pub fn set_local_player_can_collect_portable_pickups(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetLocalPlayerCanCollectPortablePickups {
    crate::__imports::native_set_local_player_can_collect_portable_pickups(toggle)
}
pub fn has_pickup_been_collected(pickup: i32) -> altv_wasm_shared::natives_result::ResultOfHasPickupBeenCollected {
    crate::__imports::native_has_pickup_been_collected(pickup)
}
pub fn set_custom_pickup_weapon_hash(pickup_hash: u32,
pickup: i32) -> altv_wasm_shared::natives_result::ResultOfSetCustomPickupWeaponHash {
    crate::__imports::native_set_custom_pickup_weapon_hash(pickup_hash,
pickup)
}
pub fn allow_pickup_arrow_marker_when_uncollectable(pickup: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfAllowPickupArrowMarkerWhenUncollectable {
    crate::__imports::native_allow_pickup_arrow_marker_when_uncollectable(pickup,
toggle)
}
pub fn set_pickup_transparent_when_uncollectable(pickup: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPickupTransparentWhenUncollectable {
    crate::__imports::native_set_pickup_transparent_when_uncollectable(pickup,
toggle)
}
pub fn are_entities_entirely_inside_garage(garage_hash: u32,
p1: bool,
p2: bool,
p3: bool,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfAreEntitiesEntirelyInsideGarage {
    crate::__imports::native_are_entities_entirely_inside_garage(garage_hash,
p1,
p2,
p3,
p4)
}
pub fn hide_portable_pickup_when_detached(pickup_object: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfHidePortablePickupWhenDetached {
    crate::__imports::native_hide_portable_pickup_when_detached(pickup_object,
toggle)
}
pub fn set_pickup_object_transparent_when_uncollectable(pickup: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPickupObjectTransparentWhenUncollectable {
    crate::__imports::native_set_pickup_object_transparent_when_uncollectable(pickup,
toggle)
}
pub fn set_local_player_permitted_to_collect_pickups_with_model(model_hash: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetLocalPlayerPermittedToCollectPickupsWithModel {
    crate::__imports::native_set_local_player_permitted_to_collect_pickups_with_model(model_hash,
toggle)
}
pub fn create_pickup_rotate(pickup_hash: u32,
pos_x: f32,
pos_y: f32,
pos_z: f32,
rot_x: f32,
rot_y: f32,
rot_z: f32,
flag: i32,
amount: i32,
p9: i32,
p10: bool,
model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfCreatePickupRotate {
    crate::__imports::native_create_pickup_rotate(pickup_hash,
pos_x,
pos_y,
pos_z,
rot_x,
rot_y,
rot_z,
flag,
amount,
p9,
p10,
model_hash)
}
pub fn get_state_of_rayfire_map_object(object: u32) -> altv_wasm_shared::natives_result::ResultOfGetStateOfRayfireMapObject {
    crate::__imports::native_get_state_of_rayfire_map_object(object)
}
pub fn set_object_targettable(object: u32,
targettable: bool) -> altv_wasm_shared::natives_result::ResultOfSetObjectTargettable {
    crate::__imports::native_set_object_targettable(object,
targettable)
}
pub fn has_object_been_broken(object: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfHasObjectBeenBroken {
    crate::__imports::native_has_object_been_broken(object,
p1)
}
pub fn is_object_visible(object: u32) -> altv_wasm_shared::natives_result::ResultOfIsObjectVisible {
    crate::__imports::native_is_object_visible(object)
}
pub fn is_object_near_point(object_hash: u32,
x: f32,
y: f32,
z: f32,
range: f32) -> altv_wasm_shared::natives_result::ResultOfIsObjectNearPoint {
    crate::__imports::native_is_object_near_point(object_hash,
x,
y,
z,
range)
}
pub fn set_disable_collisions_between_cars_and_car_parachute(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetDisableCollisionsBetweenCarsAndCarParachute {
    crate::__imports::native_set_disable_collisions_between_cars_and_car_parachute(p0)
}
pub fn set_pickup_object_alpha_when_transparent(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetPickupObjectAlphaWhenTransparent {
    crate::__imports::native_set_pickup_object_alpha_when_transparent(p0)
}
pub fn attach_portable_pickup_to_ped(pickup_object: u32,
ped: u32) -> altv_wasm_shared::natives_result::ResultOfAttachPortablePickupToPed {
    crate::__imports::native_attach_portable_pickup_to_ped(pickup_object,
ped)
}
pub fn suppress_pickup_sound_for_pickup(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSuppressPickupSoundForPickup {
    crate::__imports::native_suppress_pickup_sound_for_pickup(p0,
p1)
}
pub fn is_garage_empty(garage_hash: u32,
p1: bool,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfIsGarageEmpty {
    crate::__imports::native_is_garage_empty(garage_hash,
p1,
p2)
}
pub fn set_drive_articulated_joint(object: u32,
toggle: bool,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfSetDriveArticulatedJoint {
    crate::__imports::native_set_drive_articulated_joint(object,
toggle,
p2)
}
pub fn prevent_collection_of_portable_pickup(object: u32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfPreventCollectionOfPortablePickup {
    crate::__imports::native_prevent_collection_of_portable_pickup(object,
p1,
p2)
}
pub fn set_object_speed_boost_amount(object: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetObjectSpeedBoostAmount {
    crate::__imports::native_set_object_speed_boost_amount(object,
p1)
}
pub fn set_object_tint_index(object: u32,
texture_variation: i32) -> altv_wasm_shared::natives_result::ResultOfSetObjectTintIndex {
    crate::__imports::native_set_object_tint_index(object,
texture_variation)
}
pub fn create_object_no_offset(model_hash: u32,
x: f32,
y: f32,
z: f32,
is_network: bool,
b_script_host_obj: bool,
dynamic: bool) -> altv_wasm_shared::natives_result::ResultOfCreateObjectNoOffset {
    crate::__imports::native_create_object_no_offset(model_hash,
x,
y,
z,
is_network,
b_script_host_obj,
dynamic)
}
pub fn set_locked_unstreamed_in_door_of_type(model_hash: u32,
x: f32,
y: f32,
z: f32,
locked: bool,
x_rot_mult: f32,
y_rot_mult: f32,
z_rot_mult: f32) -> altv_wasm_shared::natives_result::ResultOfSetLockedUnstreamedInDoorOfType {
    crate::__imports::native_set_locked_unstreamed_in_door_of_type(model_hash,
x,
y,
z,
locked,
x_rot_mult,
y_rot_mult,
z_rot_mult)
}
pub fn door_system_set_automatic_distance(door_hash: u32,
distance: f32,
request_door: bool,
force_update: bool) -> altv_wasm_shared::natives_result::ResultOfDoorSystemSetAutomaticDistance {
    crate::__imports::native_door_system_set_automatic_distance(door_hash,
distance,
request_door,
force_update)
}
pub fn create_non_networked_ambient_pickup(pickup_hash: u32,
pos_x: f32,
pos_y: f32,
pos_z: f32,
flags: i32,
value: i32,
model_hash: u32,
p7: bool,
p8: bool) -> altv_wasm_shared::natives_result::ResultOfCreateNonNetworkedAmbientPickup {
    crate::__imports::native_create_non_networked_ambient_pickup(pickup_hash,
pos_x,
pos_y,
pos_z,
flags,
value,
model_hash,
p7,
p8)
}
pub fn set_pickup_object_glow_offset(pickup: i32,
p1: f32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetPickupObjectGlowOffset {
    crate::__imports::native_set_pickup_object_glow_offset(pickup,
p1,
p2)
}
pub fn clear_all_pickup_reward_type_suppression() -> altv_wasm_shared::natives_result::ResultOfClearAllPickupRewardTypeSuppression {
    crate::__imports::native_clear_all_pickup_reward_type_suppression()
}
pub fn door_system_set_door_open_for_races(door_hash: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfDoorSystemSetDoorOpenForRaces {
    crate::__imports::native_door_system_set_door_open_for_races(door_hash,
p1)
}
pub fn allow_pickup_by_none_participant(pickup: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfAllowPickupByNoneParticipant {
    crate::__imports::native_allow_pickup_by_none_participant(pickup,
toggle)
}
pub fn allow_damage_events_for_non_networked_objects(value: bool) -> altv_wasm_shared::natives_result::ResultOfAllowDamageEventsForNonNetworkedObjects {
    crate::__imports::native_allow_damage_events_for_non_networked_objects(value)
}
pub fn only_clean_up_object_when_out_of_range(object: u32) -> altv_wasm_shared::natives_result::ResultOfOnlyCleanUpObjectWhenOutOfRange {
    crate::__imports::native_only_clean_up_object_when_out_of_range(object)
}
pub fn is_prop_light_overriden(object: u32) -> altv_wasm_shared::natives_result::ResultOfIsPropLightOverriden {
    crate::__imports::native_is_prop_light_overriden(object)
}
pub fn does_pickup_exist(pickup: i32) -> altv_wasm_shared::natives_result::ResultOfDoesPickupExist {
    crate::__imports::native_does_pickup_exist(pickup)
}
pub fn rotate_object(object: u32,
p1: f32,
p2: f32,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfRotateObject {
    crate::__imports::native_rotate_object(object,
p1,
p2,
p3)
}
pub fn set_drive_articulated_joint_with_inflictor(object: u32,
toggle: bool,
p2: i32,
ped: u32) -> altv_wasm_shared::natives_result::ResultOfSetDriveArticulatedJointWithInflictor {
    crate::__imports::native_set_drive_articulated_joint_with_inflictor(object,
toggle,
p2,
ped)
}
pub fn track_object_visibility(object: u32) -> altv_wasm_shared::natives_result::ResultOfTrackObjectVisibility {
    crate::__imports::native_track_object_visibility(object)
}
pub fn set_entity_flag_render_small_shadow(object: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityFlagRenderSmallShadow {
    crate::__imports::native_set_entity_flag_render_small_shadow(object,
toggle)
}
pub fn get_pickup_generation_range_multiplier() -> altv_wasm_shared::natives_result::ResultOfGetPickupGenerationRangeMultiplier {
    crate::__imports::native_get_pickup_generation_range_multiplier()
}
pub fn get_rayfire_map_object(x: f32,
y: f32,
z: f32,
radius: f32,
name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetRayfireMapObject {
    crate::__imports::native_get_rayfire_map_object(x,
y,
z,
radius,
name)
}
pub fn set_is_object_ball(object: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetIsObjectBall {
    crate::__imports::native_set_is_object_ball(object,
toggle)
}
pub fn door_system_set_open_ratio(door_hash: u32,
ajar: f32,
request_door: bool,
force_update: bool) -> altv_wasm_shared::natives_result::ResultOfDoorSystemSetOpenRatio {
    crate::__imports::native_door_system_set_open_ratio(door_hash,
ajar,
request_door,
force_update)
}
pub fn get_object_fragment_damage_health(p0: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfGetObjectFragmentDamageHealth {
    crate::__imports::native_get_object_fragment_damage_health(p0,
p1)
}
pub fn clear_extended_pickup_probe_areas() -> altv_wasm_shared::natives_result::ResultOfClearExtendedPickupProbeAreas {
    crate::__imports::native_clear_extended_pickup_probe_areas()
}
pub fn set_cutscenes_weapon_flashlight_on_this_frame(object: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetCutscenesWeaponFlashlightOnThisFrame {
    crate::__imports::native_set_cutscenes_weapon_flashlight_on_this_frame(object,
toggle)
}
pub fn does_object_of_type_exist_at_coords(x: f32,
y: f32,
z: f32,
radius: f32,
hash: u32,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfDoesObjectOfTypeExistAtCoords {
    crate::__imports::native_does_object_of_type_exist_at_coords(x,
y,
z,
radius,
hash,
p5)
}
pub fn set_pickup_track_damage_events(pickup: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPickupTrackDamageEvents {
    crate::__imports::native_set_pickup_track_damage_events(pickup,
toggle)
}
pub fn is_door_registered_with_system(door_hash: u32) -> altv_wasm_shared::natives_result::ResultOfIsDoorRegisteredWithSystem {
    crate::__imports::native_is_door_registered_with_system(door_hash)
}
pub fn door_system_set_spring_removed(door_hash: u32,
removed: bool,
request_door: bool,
force_update: bool) -> altv_wasm_shared::natives_result::ResultOfDoorSystemSetSpringRemoved {
    crate::__imports::native_door_system_set_spring_removed(door_hash,
removed,
request_door,
force_update)
}
pub fn is_door_closed(door_hash: u32) -> altv_wasm_shared::natives_result::ResultOfIsDoorClosed {
    crate::__imports::native_is_door_closed(door_hash)
}
pub fn set_object_is_special_golfball(object: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetObjectIsSpecialGolfball {
    crate::__imports::native_set_object_is_special_golfball(object,
toggle)
}
pub fn open_all_barriers_for_race(p0: bool) -> altv_wasm_shared::natives_result::ResultOfOpenAllBarriersForRace {
    crate::__imports::native_open_all_barriers_for_race(p0)
}
pub fn detach_portable_pickup_from_ped(pickup_object: u32) -> altv_wasm_shared::natives_result::ResultOfDetachPortablePickupFromPed {
    crate::__imports::native_detach_portable_pickup_from_ped(pickup_object)
}
pub fn set_entity_flag_suppress_shadow(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEntityFlagSuppressShadow {
    crate::__imports::native_set_entity_flag_suppress_shadow(entity,
toggle)
}
pub fn add_extended_pickup_probe_area(x: f32,
y: f32,
z: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfAddExtendedPickupProbeArea {
    crate::__imports::native_add_extended_pickup_probe_area(x,
y,
z,
radius)
}
pub fn get_pickup_type_from_weapon_hash(weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetPickupTypeFromWeaponHash {
    crate::__imports::native_get_pickup_type_from_weapon_hash(weapon_hash)
}
pub fn place_object_on_ground_or_object_properly(object: u32) -> altv_wasm_shared::natives_result::ResultOfPlaceObjectOnGroundOrObjectProperly {
    crate::__imports::native_place_object_on_ground_or_object_properly(object)
}
pub fn door_system_set_hold_open(door_hash: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfDoorSystemSetHoldOpen {
    crate::__imports::native_door_system_set_hold_open(door_hash,
toggle)
}
pub fn does_pickup_object_exist(pickup_object: u32) -> altv_wasm_shared::natives_result::ResultOfDoesPickupObjectExist {
    crate::__imports::native_does_pickup_object_exist(pickup_object)
}
pub fn clear_garage(garage_hash: u32,
is_network: bool) -> altv_wasm_shared::natives_result::ResultOfClearGarage {
    crate::__imports::native_clear_garage(garage_hash,
is_network)
}
pub fn get_default_ammo_for_weapon_pickup(pickup_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetDefaultAmmoForWeaponPickup {
    crate::__imports::native_get_default_ammo_for_weapon_pickup(pickup_hash)
}
pub fn set_object_speed_boost_duration(object: u32,
duration: f32) -> altv_wasm_shared::natives_result::ResultOfSetObjectSpeedBoostDuration {
    crate::__imports::native_set_object_speed_boost_duration(object,
duration)
}
pub fn door_system_get_is_physics_loaded(p0: i32) -> altv_wasm_shared::natives_result::ResultOfDoorSystemGetIsPhysicsLoaded {
    crate::__imports::native_door_system_get_is_physics_loaded(p0)
}
pub fn damage_object_fragment_child(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfDamageObjectFragmentChild {
    crate::__imports::native_damage_object_fragment_child(p0,
p1,
p2)
}
pub fn get_closest_object_of_type(x: f32,
y: f32,
z: f32,
radius: f32,
model_hash: u32,
is_mission: bool,
p6: bool,
p7: bool) -> altv_wasm_shared::natives_result::ResultOfGetClosestObjectOfType {
    crate::__imports::native_get_closest_object_of_type(x,
y,
z,
radius,
model_hash,
is_mission,
p6,
p7)
}
pub fn break_object_fragment_child(p0: u32,
p1: i32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfBreakObjectFragmentChild {
    crate::__imports::native_break_object_fragment_child(p0,
p1,
p2)
}
pub fn get_object_tint_index(object: u32) -> altv_wasm_shared::natives_result::ResultOfGetObjectTintIndex {
    crate::__imports::native_get_object_tint_index(object)
}
pub fn door_system_get_automatic_distance(door_hash: u32) -> altv_wasm_shared::natives_result::ResultOfDoorSystemGetAutomaticDistance {
    crate::__imports::native_door_system_get_automatic_distance(door_hash)
}
pub fn set_object_takes_damage_from_colliding_with_buildings(p0: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetObjectTakesDamageFromCollidingWithBuildings {
    crate::__imports::native_set_object_takes_damage_from_colliding_with_buildings(p0,
p1)
}
pub fn get_state_of_closest_door_of_type(r#type: u32,
x: f32,
y: f32,
z: f32,
locked: bool,
heading: f32) -> altv_wasm_shared::natives_result::ResultOfGetStateOfClosestDoorOfType {
    crate::__imports::native_get_state_of_closest_door_of_type(r#type,
x,
y,
z,
locked,
heading)
}
pub fn is_object_partially_inside_garage(garage_hash: u32,
entity: u32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfIsObjectPartiallyInsideGarage {
    crate::__imports::native_is_object_partially_inside_garage(garage_hash,
entity,
p2)
}
pub fn set_tint_index_closest_building_of_type(x: f32,
y: f32,
z: f32,
radius: f32,
model_hash: u32,
texture_variation: i32) -> altv_wasm_shared::natives_result::ResultOfSetTintIndexClosestBuildingOfType {
    crate::__imports::native_set_tint_index_closest_building_of_type(x,
y,
z,
radius,
model_hash,
texture_variation)
}
pub fn enable_saving_in_garage(garage_hash: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfEnableSavingInGarage {
    crate::__imports::native_enable_saving_in_garage(garage_hash,
toggle)
}
pub fn set_force_object_this_frame(x: f32,
y: f32,
z: f32,
p3: f32) -> altv_wasm_shared::natives_result::ResultOfSetForceObjectThisFrame {
    crate::__imports::native_set_force_object_this_frame(x,
y,
z,
p3)
}
pub fn set_object_physics_params(object: u32,
weight: f32,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
gravity: f32,
p7: f32,
p8: f32,
p9: f32,
p10: f32,
buoyancy: f32) -> altv_wasm_shared::natives_result::ResultOfSetObjectPhysicsParams {
    crate::__imports::native_set_object_physics_params(object,
weight,
p2,
p3,
p4,
p5,
gravity,
p7,
p8,
p9,
p10,
buoyancy)
}
pub fn set_state_of_closest_door_of_type(r#type: u32,
x: f32,
y: f32,
z: f32,
locked: bool,
heading: f32,
p6: bool) -> altv_wasm_shared::natives_result::ResultOfSetStateOfClosestDoorOfType {
    crate::__imports::native_set_state_of_closest_door_of_type(r#type,
x,
y,
z,
locked,
heading,
p6)
}
pub fn suppress_pickup_reward_type(reward_type: i32,
suppress: bool) -> altv_wasm_shared::natives_result::ResultOfSuppressPickupRewardType {
    crate::__imports::native_suppress_pickup_reward_type(reward_type,
suppress)
}
pub fn fix_object_fragment(object: u32) -> altv_wasm_shared::natives_result::ResultOfFixObjectFragment {
    crate::__imports::native_fix_object_fragment(object)
}
pub fn does_pickup_of_type_exist_in_area(pickup_hash: u32,
x: f32,
y: f32,
z: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfDoesPickupOfTypeExistInArea {
    crate::__imports::native_does_pickup_of_type_exist_in_area(pickup_hash,
x,
y,
z,
radius)
}
pub fn create_pickup(pickup_hash: u32,
pos_x: f32,
pos_y: f32,
pos_z: f32,
p4: i32,
value: i32,
p6: bool,
model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfCreatePickup {
    crate::__imports::native_create_pickup(pickup_hash,
pos_x,
pos_y,
pos_z,
p4,
value,
p6,
model_hash)
}
pub fn is_object_a_pickup(object: u32) -> altv_wasm_shared::natives_result::ResultOfIsObjectApickup {
    crate::__imports::native_is_object_a_pickup(object)
}
pub fn allow_all_players_to_collect_pickups_of_type(pickup_hash: u32) -> altv_wasm_shared::natives_result::ResultOfAllowAllPlayersToCollectPickupsOfType {
    crate::__imports::native_allow_all_players_to_collect_pickups_of_type(pickup_hash)
}
pub fn get_control_instructional_buttons_string(control: i32,
action: i32,
allow_x_o_swap: bool) -> altv_wasm_shared::natives_result::ResultOfGetControlInstructionalButtonsString {
    crate::__imports::native_get_control_instructional_buttons_string(control,
action,
allow_x_o_swap)
}
pub fn get_is_using_alternate_driveby() -> altv_wasm_shared::natives_result::ResultOfGetIsUsingAlternateDriveby {
    crate::__imports::native_get_is_using_alternate_driveby()
}
pub fn get_disabled_control_normal(control: i32,
action: i32) -> altv_wasm_shared::natives_result::ResultOfGetDisabledControlNormal {
    crate::__imports::native_get_disabled_control_normal(control,
action)
}
pub fn is_using_cursor(control: i32) -> altv_wasm_shared::natives_result::ResultOfIsUsingCursor {
    crate::__imports::native_is_using_cursor(control)
}
pub fn set_control_trigger_shake(control: i32,
left_duration: i32,
left_frequency: i32,
right_duration: i32,
right_frequency: i32) -> altv_wasm_shared::natives_result::ResultOfSetControlTriggerShake {
    crate::__imports::native_set_control_trigger_shake(control,
left_duration,
left_frequency,
right_duration,
right_frequency)
}
pub fn is_control_enabled(control: i32,
action: i32) -> altv_wasm_shared::natives_result::ResultOfIsControlEnabled {
    crate::__imports::native_is_control_enabled(control,
action)
}
pub fn is_using_remote_play(control: i32) -> altv_wasm_shared::natives_result::ResultOfIsUsingRemotePlay {
    crate::__imports::native_is_using_remote_play(control)
}
pub fn get_is_using_alternate_handbrake() -> altv_wasm_shared::natives_result::ResultOfGetIsUsingAlternateHandbrake {
    crate::__imports::native_get_is_using_alternate_handbrake()
}
pub fn is_disabled_control_just_released(control: i32,
action: i32) -> altv_wasm_shared::natives_result::ResultOfIsDisabledControlJustReleased {
    crate::__imports::native_is_disabled_control_just_released(control,
action)
}
pub fn enable_control_action(control: i32,
action: i32,
enable_related_actions: bool) -> altv_wasm_shared::natives_result::ResultOfEnableControlAction {
    crate::__imports::native_enable_control_action(control,
action,
enable_related_actions)
}
pub fn stop_control_shake(control: i32) -> altv_wasm_shared::natives_result::ResultOfStopControlShake {
    crate::__imports::native_stop_control_shake(control)
}
pub fn init_pc_scripted_controls(scheme_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfInitPcScriptedControls {
    crate::__imports::native_init_pc_scripted_controls(scheme_name)
}
pub fn switch_pc_scripted_controls(scheme_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSwitchPcScriptedControls {
    crate::__imports::native_switch_pc_scripted_controls(scheme_name)
}
pub fn set_control_shake(control: i32,
duration: i32,
frequency: i32) -> altv_wasm_shared::natives_result::ResultOfSetControlShake {
    crate::__imports::native_set_control_shake(control,
duration,
frequency)
}
pub fn get_disabled_control_unbound_normal(control: i32,
action: i32) -> altv_wasm_shared::natives_result::ResultOfGetDisabledControlUnboundNormal {
    crate::__imports::native_get_disabled_control_unbound_normal(control,
action)
}
pub fn is_control_just_released(control: i32,
action: i32) -> altv_wasm_shared::natives_result::ResultOfIsControlJustReleased {
    crate::__imports::native_is_control_just_released(control,
action)
}
pub fn is_control_just_pressed(control: i32,
action: i32) -> altv_wasm_shared::natives_result::ResultOfIsControlJustPressed {
    crate::__imports::native_is_control_just_pressed(control,
action)
}
pub fn get_local_player_gamepad_aim_state() -> altv_wasm_shared::natives_result::ResultOfGetLocalPlayerGamepadAimState {
    crate::__imports::native_get_local_player_gamepad_aim_state()
}
pub fn set_use_adjusted_mouse_coords(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetUseAdjustedMouseCoords {
    crate::__imports::native_set_use_adjusted_mouse_coords(toggle)
}
pub fn get_control_unbound_normal(control: i32,
action: i32) -> altv_wasm_shared::natives_result::ResultOfGetControlUnboundNormal {
    crate::__imports::native_get_control_unbound_normal(control,
action)
}
pub fn disable_all_control_actions(control: i32) -> altv_wasm_shared::natives_result::ResultOfDisableAllControlActions {
    crate::__imports::native_disable_all_control_actions(control)
}
pub fn shutdown_pc_scripted_controls() -> altv_wasm_shared::natives_result::ResultOfShutdownPcScriptedControls {
    crate::__imports::native_shutdown_pc_scripted_controls()
}
pub fn is_control_released(control: i32,
action: i32) -> altv_wasm_shared::natives_result::ResultOfIsControlReleased {
    crate::__imports::native_is_control_released(control,
action)
}
pub fn have_controls_changed(control: i32) -> altv_wasm_shared::natives_result::ResultOfHaveControlsChanged {
    crate::__imports::native_have_controls_changed(control)
}
pub fn is_look_inverted() -> altv_wasm_shared::natives_result::ResultOfIsLookInverted {
    crate::__imports::native_is_look_inverted()
}
pub fn set_playerpad_shakes_when_controller_disabled(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerpadShakesWhenControllerDisabled {
    crate::__imports::native_set_playerpad_shakes_when_controller_disabled(toggle)
}
pub fn allow_alternative_script_controls_layout(control: i32) -> altv_wasm_shared::natives_result::ResultOfAllowAlternativeScriptControlsLayout {
    crate::__imports::native_allow_alternative_script_controls_layout(control)
}
pub fn get_control_group_instructional_buttons_string(control: i32,
control_group: i32,
allow_x_o_swap: bool) -> altv_wasm_shared::natives_result::ResultOfGetControlGroupInstructionalButtonsString {
    crate::__imports::native_get_control_group_instructional_buttons_string(control,
control_group,
allow_x_o_swap)
}
pub fn set_control_light_effect_color(control: i32,
red: i32,
green: i32,
blue: i32) -> altv_wasm_shared::natives_result::ResultOfSetControlLightEffectColor {
    crate::__imports::native_set_control_light_effect_color(control,
red,
green,
blue)
}
pub fn is_disabled_control_just_pressed(control: i32,
action: i32) -> altv_wasm_shared::natives_result::ResultOfIsDisabledControlJustPressed {
    crate::__imports::native_is_disabled_control_just_pressed(control,
action)
}
pub fn clear_control_shake_suppressed_id(control: i32) -> altv_wasm_shared::natives_result::ResultOfClearControlShakeSuppressedId {
    crate::__imports::native_clear_control_shake_suppressed_id(control)
}
pub fn is_using_keyboard_and_mouse(control: i32) -> altv_wasm_shared::natives_result::ResultOfIsUsingKeyboardAndMouse {
    crate::__imports::native_is_using_keyboard_and_mouse(control)
}
pub fn enable_all_control_actions(control: i32) -> altv_wasm_shared::natives_result::ResultOfEnableAllControlActions {
    crate::__imports::native_enable_all_control_actions(control)
}
pub fn get_local_player_aim_state() -> altv_wasm_shared::natives_result::ResultOfGetLocalPlayerAimState {
    crate::__imports::native_get_local_player_aim_state()
}
pub fn clear_control_light_effect(control: i32) -> altv_wasm_shared::natives_result::ResultOfClearControlLightEffect {
    crate::__imports::native_clear_control_light_effect(control)
}
pub fn get_control_how_long_ago(control: i32) -> altv_wasm_shared::natives_result::ResultOfGetControlHowLongAgo {
    crate::__imports::native_get_control_how_long_ago(control)
}
pub fn get_control_value(control: i32,
action: i32) -> altv_wasm_shared::natives_result::ResultOfGetControlValue {
    crate::__imports::native_get_control_value(control,
action)
}
pub fn is_mouse_look_inverted() -> altv_wasm_shared::natives_result::ResultOfIsMouseLookInverted {
    crate::__imports::native_is_mouse_look_inverted()
}
pub fn is_disabled_control_pressed(control: i32,
action: i32) -> altv_wasm_shared::natives_result::ResultOfIsDisabledControlPressed {
    crate::__imports::native_is_disabled_control_pressed(control,
action)
}
pub fn set_control_value_next_frame(control: i32,
action: i32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetControlValueNextFrame {
    crate::__imports::native_set_control_value_next_frame(control,
action,
value)
}
pub fn get_control_normal(control: i32,
action: i32) -> altv_wasm_shared::natives_result::ResultOfGetControlNormal {
    crate::__imports::native_get_control_normal(control,
action)
}
pub fn set_input_exclusive(control: i32,
action: i32) -> altv_wasm_shared::natives_result::ResultOfSetInputExclusive {
    crate::__imports::native_set_input_exclusive(control,
action)
}
pub fn set_control_shake_suppressed_id(control: i32,
unique_id: i32) -> altv_wasm_shared::natives_result::ResultOfSetControlShakeSuppressedId {
    crate::__imports::native_set_control_shake_suppressed_id(control,
unique_id)
}
pub fn is_control_pressed(control: i32,
action: i32) -> altv_wasm_shared::natives_result::ResultOfIsControlPressed {
    crate::__imports::native_is_control_pressed(control,
action)
}
pub fn is_disabled_control_released(control: i32,
action: i32) -> altv_wasm_shared::natives_result::ResultOfIsDisabledControlReleased {
    crate::__imports::native_is_disabled_control_released(control,
action)
}
pub fn set_cursor_position(x: f32,
y: f32) -> altv_wasm_shared::natives_result::ResultOfSetCursorPosition {
    crate::__imports::native_set_cursor_position(x,
y)
}
pub fn get_allow_movement_while_zoomed() -> altv_wasm_shared::natives_result::ResultOfGetAllowMovementWhileZoomed {
    crate::__imports::native_get_allow_movement_while_zoomed()
}
pub fn disable_control_action(control: i32,
action: i32,
disable_related_actions: bool) -> altv_wasm_shared::natives_result::ResultOfDisableControlAction {
    crate::__imports::native_disable_control_action(control,
action,
disable_related_actions)
}
pub fn set_roads_back_to_original_in_angled_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
width: f32,
p7: i32) -> altv_wasm_shared::natives_result::ResultOfSetRoadsBackToOriginalInAngledArea {
    crate::__imports::native_set_roads_back_to_original_in_angled_area(x1,
y1,
z1,
x2,
y2,
z2,
width,
p7)
}
pub fn get_num_navmeshes_existing_in_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32) -> altv_wasm_shared::natives_result::ResultOfGetNumNavmeshesExistingInArea {
    crate::__imports::native_get_num_navmeshes_existing_in_area(x1,
y1,
z1,
x2,
y2,
z2)
}
pub fn get_vehicle_node_properties(x: f32,
y: f32,
z: f32,
density: i32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleNodeProperties {
    crate::__imports::native_get_vehicle_node_properties(x,
y,
z,
density,
flags)
}
pub fn request_path_nodes_in_area_this_frame(x1: f32,
y1: f32,
x2: f32,
y2: f32) -> altv_wasm_shared::natives_result::ResultOfRequestPathNodesInAreaThisFrame {
    crate::__imports::native_request_path_nodes_in_area_this_frame(x1,
y1,
x2,
y2)
}
pub fn set_ambient_ped_range_multiplier_this_frame(multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetAmbientPedRangeMultiplierThisFrame {
    crate::__imports::native_set_ambient_ped_range_multiplier_this_frame(multiplier)
}
pub fn does_navmesh_blocking_object_exist(p0: i32) -> altv_wasm_shared::natives_result::ResultOfDoesNavmeshBlockingObjectExist {
    crate::__imports::native_does_navmesh_blocking_object_exist(p0)
}
pub fn update_navmesh_blocking_object(p0: i32,
p1: f32,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
p6: f32,
p7: f32,
p8: i32) -> altv_wasm_shared::natives_result::ResultOfUpdateNavmeshBlockingObject {
    crate::__imports::native_update_navmesh_blocking_object(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8)
}
pub fn is_point_on_road(x: f32,
y: f32,
z: f32,
vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsPointOnRoad {
    crate::__imports::native_is_point_on_road(x,
y,
z,
vehicle)
}
pub fn get_closest_road(x: f32,
y: f32,
z: f32,
p3: f32,
p4: i32,
p5: Option<&shared::Vector3>,
p6: Option<&shared::Vector3>,
p7: shared::MemoryBufferId,
p8: shared::MemoryBufferId,
p9: f32,
p10: bool) -> altv_wasm_shared::natives_result::ResultOfGetClosestRoad {
    crate::__imports::native_get_closest_road(x,
y,
z,
p3,
p4,
p5,
p6,
p7,
p8,
p9,
p10)
}
pub fn get_position_by_side_of_road(x: f32,
y: f32,
z: f32,
p3: i32,
out_position: Option<&shared::Vector3>) -> altv_wasm_shared::natives_result::ResultOfGetPositionBySideOfRoad {
    crate::__imports::native_get_position_by_side_of_road(x,
y,
z,
p3,
out_position)
}
pub fn set_roads_in_angled_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
width: f32,
unknown1: bool,
unknown2: bool,
unknown3: bool) -> altv_wasm_shared::natives_result::ResultOfSetRoadsInAngledArea {
    crate::__imports::native_set_roads_in_angled_area(x1,
y1,
z1,
x2,
y2,
z2,
width,
unknown1,
unknown2,
unknown3)
}
pub fn is_vehicle_node_id_valid(vehicle_node_id: i32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleNodeIdValid {
    crate::__imports::native_is_vehicle_node_id_valid(vehicle_node_id)
}
pub fn set_roads_back_to_original(p0: f32,
p1: f32,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfSetRoadsBackToOriginal {
    crate::__imports::native_set_roads_back_to_original(p0,
p1,
p2,
p3,
p4,
p5,
p6)
}
pub fn set_ignore_no_gps_flag_until_first_normal_node(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetIgnoreNoGpsFlagUntilFirstNormalNode {
    crate::__imports::native_set_ignore_no_gps_flag_until_first_normal_node(toggle)
}
pub fn set_allow_stream_prologue_nodes(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetAllowStreamPrologueNodes {
    crate::__imports::native_set_allow_stream_prologue_nodes(toggle)
}
pub fn get_nth_closest_vehicle_node_id(x: f32,
y: f32,
z: f32,
nth: i32,
node_flags: i32,
p5: f32,
p6: f32) -> altv_wasm_shared::natives_result::ResultOfGetNthClosestVehicleNodeId {
    crate::__imports::native_get_nth_closest_vehicle_node_id(x,
y,
z,
nth,
node_flags,
p5,
p6)
}
pub fn get_closest_vehicle_node(x: f32,
y: f32,
z: f32,
out_position: Option<&shared::Vector3>,
node_flags: i32,
p5: f32,
p6: f32) -> altv_wasm_shared::natives_result::ResultOfGetClosestVehicleNode {
    crate::__imports::native_get_closest_vehicle_node(x,
y,
z,
out_position,
node_flags,
p5,
p6)
}
pub fn clear_gps_disabled_zone_at_index(index: i32) -> altv_wasm_shared::natives_result::ResultOfClearGpsDisabledZoneAtIndex {
    crate::__imports::native_clear_gps_disabled_zone_at_index(index)
}
pub fn get_approx_height_for_point(x: f32,
y: f32) -> altv_wasm_shared::natives_result::ResultOfGetApproxHeightForPoint {
    crate::__imports::native_get_approx_height_for_point(x,
y)
}
pub fn get_closest_major_vehicle_node(x: f32,
y: f32,
z: f32,
out_position: Option<&shared::Vector3>,
unknown1: f32,
unknown2: f32) -> altv_wasm_shared::natives_result::ResultOfGetClosestMajorVehicleNode {
    crate::__imports::native_get_closest_major_vehicle_node(x,
y,
z,
out_position,
unknown1,
unknown2)
}
pub fn get_street_name_at_coord(x: f32,
y: f32,
z: f32,
street_name: u32,
crossing_road: u32) -> altv_wasm_shared::natives_result::ResultOfGetStreetNameAtCoord {
    crate::__imports::native_get_street_name_at_coord(x,
y,
z,
street_name,
crossing_road)
}
pub fn get_approx_floor_for_point(x: f32,
y: f32) -> altv_wasm_shared::natives_result::ResultOfGetApproxFloorForPoint {
    crate::__imports::native_get_approx_floor_for_point(x,
y)
}
pub fn set_ped_paths_in_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
p6: bool,
p7: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedPathsInArea {
    crate::__imports::native_set_ped_paths_in_area(x1,
y1,
z1,
x2,
y2,
z2,
p6,
p7)
}
pub fn get_approx_floor_for_area(x1: f32,
y1: f32,
x2: f32,
y2: f32) -> altv_wasm_shared::natives_result::ResultOfGetApproxFloorForArea {
    crate::__imports::native_get_approx_floor_for_area(x1,
y1,
x2,
y2)
}
pub fn add_navmesh_required_region(x: f32,
y: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfAddNavmeshRequiredRegion {
    crate::__imports::native_add_navmesh_required_region(x,
y,
radius)
}
pub fn get_nth_closest_vehicle_node_favour_direction(x: f32,
y: f32,
z: f32,
desired_x: f32,
desired_y: f32,
desired_z: f32,
nth_closest: i32,
out_position: Option<&shared::Vector3>,
out_heading: f32,
node_flags: i32,
p10: f32,
p11: f32) -> altv_wasm_shared::natives_result::ResultOfGetNthClosestVehicleNodeFavourDirection {
    crate::__imports::native_get_nth_closest_vehicle_node_favour_direction(x,
y,
z,
desired_x,
desired_y,
desired_z,
nth_closest,
out_position,
out_heading,
node_flags,
p10,
p11)
}
pub fn remove_navmesh_blocking_object(p0: i32) -> altv_wasm_shared::natives_result::ResultOfRemoveNavmeshBlockingObject {
    crate::__imports::native_remove_navmesh_blocking_object(p0)
}
pub fn disable_navmesh_in_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfDisableNavmeshInArea {
    crate::__imports::native_disable_navmesh_in_area(x1,
y1,
z1,
x2,
y2,
z2,
toggle)
}
pub fn get_vehicle_node_is_switched_off(node_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleNodeIsSwitchedOff {
    crate::__imports::native_get_vehicle_node_is_switched_off(node_i_d)
}
pub fn get_nth_closest_vehicle_node_id_with_heading(x: f32,
y: f32,
z: f32,
nth_closest: i32,
out_position: Option<&shared::Vector3>,
out_heading: f32,
node_flags: i32,
p7: f32,
p8: f32) -> altv_wasm_shared::natives_result::ResultOfGetNthClosestVehicleNodeIdWithHeading {
    crate::__imports::native_get_nth_closest_vehicle_node_id_with_heading(x,
y,
z,
nth_closest,
out_position,
out_heading,
node_flags,
p7,
p8)
}
pub fn get_vehicle_node_position(node_id: i32,
out_position: Option<&shared::Vector3>) -> altv_wasm_shared::natives_result::ResultOfGetVehicleNodePosition {
    crate::__imports::native_get_vehicle_node_position(node_id,
out_position)
}
pub fn is_navmesh_required_region_in_use() -> altv_wasm_shared::natives_result::ResultOfIsNavmeshRequiredRegionInUse {
    crate::__imports::native_is_navmesh_required_region_in_use()
}
pub fn set_ignore_no_gps_flag(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetIgnoreNoGpsFlag {
    crate::__imports::native_set_ignore_no_gps_flag(toggle)
}
pub fn get_nth_closest_vehicle_node_with_heading(x: f32,
y: f32,
z: f32,
nth_closest: i32,
out_position: Option<&shared::Vector3>,
out_heading: f32,
out_num_lanes: i32,
node_flags: i32,
unknown3: f32,
unknown4: f32) -> altv_wasm_shared::natives_result::ResultOfGetNthClosestVehicleNodeWithHeading {
    crate::__imports::native_get_nth_closest_vehicle_node_with_heading(x,
y,
z,
nth_closest,
out_position,
out_heading,
out_num_lanes,
node_flags,
unknown3,
unknown4)
}
pub fn are_all_navmesh_regions_loaded() -> altv_wasm_shared::natives_result::ResultOfAreAllNavmeshRegionsLoaded {
    crate::__imports::native_are_all_navmesh_regions_loaded()
}
pub fn get_gps_blip_route_found() -> altv_wasm_shared::natives_result::ResultOfGetGpsBlipRouteFound {
    crate::__imports::native_get_gps_blip_route_found()
}
pub fn get_approx_height_for_area(x1: f32,
y1: f32,
x2: f32,
y2: f32) -> altv_wasm_shared::natives_result::ResultOfGetApproxHeightForArea {
    crate::__imports::native_get_approx_height_for_area(x1,
y1,
x2,
y2)
}
pub fn remove_navmesh_required_regions() -> altv_wasm_shared::natives_result::ResultOfRemoveNavmeshRequiredRegions {
    crate::__imports::native_remove_navmesh_required_regions()
}
pub fn get_random_vehicle_node(x: f32,
y: f32,
z: f32,
radius: f32,
p4: bool,
p5: bool,
p6: bool,
out_position: Option<&shared::Vector3>,
node_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetRandomVehicleNode {
    crate::__imports::native_get_random_vehicle_node(x,
y,
z,
radius,
p4,
p5,
p6,
out_position,
node_id)
}
pub fn get_road_boundary_using_heading(x: f32,
y: f32,
z: f32,
heading: f32,
out_position: Option<&shared::Vector3>) -> altv_wasm_shared::natives_result::ResultOfGetRoadBoundaryUsingHeading {
    crate::__imports::native_get_road_boundary_using_heading(x,
y,
z,
heading,
out_position)
}
pub fn get_vehicle_node_is_gps_allowed(node_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleNodeIsGpsAllowed {
    crate::__imports::native_get_vehicle_node_is_gps_allowed(node_i_d)
}
pub fn adjust_ambient_ped_spawn_densities_this_frame(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfAdjustAmbientPedSpawnDensitiesThisFrame {
    crate::__imports::native_adjust_ambient_ped_spawn_densities_this_frame(p0,
p1,
p2,
p3,
p4,
p5,
p6)
}
pub fn calculate_travel_distance_between_points(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32) -> altv_wasm_shared::natives_result::ResultOfCalculateTravelDistanceBetweenPoints {
    crate::__imports::native_calculate_travel_distance_between_points(x1,
y1,
z1,
x2,
y2,
z2)
}
pub fn get_safe_coord_for_ped(x: f32,
y: f32,
z: f32,
on_ground: bool,
out_position: Option<&shared::Vector3>,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfGetSafeCoordForPed {
    crate::__imports::native_get_safe_coord_for_ped(x,
y,
z,
on_ground,
out_position,
flags)
}
pub fn get_gps_blip_route_length() -> altv_wasm_shared::natives_result::ResultOfGetGpsBlipRouteLength {
    crate::__imports::native_get_gps_blip_route_length()
}
pub fn set_roads_in_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
node_enabled: bool,
unknown2: bool) -> altv_wasm_shared::natives_result::ResultOfSetRoadsInArea {
    crate::__imports::native_set_roads_in_area(x1,
y1,
z1,
x2,
y2,
z2,
node_enabled,
unknown2)
}
pub fn load_all_path_nodes(set: bool) -> altv_wasm_shared::natives_result::ResultOfLoadAllPathNodes {
    crate::__imports::native_load_all_path_nodes(set)
}
pub fn set_gps_disabled_zone_at_index(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
index: i32) -> altv_wasm_shared::natives_result::ResultOfSetGpsDisabledZoneAtIndex {
    crate::__imports::native_set_gps_disabled_zone_at_index(x1,
y1,
z1,
x2,
y2,
z2,
index)
}
pub fn get_next_gps_disabled_zone_index() -> altv_wasm_shared::natives_result::ResultOfGetNextGpsDisabledZoneIndex {
    crate::__imports::native_get_next_gps_disabled_zone_index()
}
pub fn set_gps_disabled_zone(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z3: f32) -> altv_wasm_shared::natives_result::ResultOfSetGpsDisabledZone {
    crate::__imports::native_set_gps_disabled_zone(x1,
y1,
z1,
x2,
y2,
z3)
}
pub fn set_ped_paths_back_to_original(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedPathsBackToOriginal {
    crate::__imports::native_set_ped_paths_back_to_original(x1,
y1,
z1,
x2,
y2,
z2,
p6)
}
pub fn get_nth_closest_vehicle_node(x: f32,
y: f32,
z: f32,
nth_closest: i32,
out_position: Option<&shared::Vector3>,
node_flags: i32,
unknown1: f32,
unknown2: f32) -> altv_wasm_shared::natives_result::ResultOfGetNthClosestVehicleNode {
    crate::__imports::native_get_nth_closest_vehicle_node(x,
y,
z,
nth_closest,
out_position,
node_flags,
unknown1,
unknown2)
}
pub fn get_pos_along_gps_type_route(result: Option<&shared::Vector3>,
p1: bool,
p2: f32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfGetPosAlongGpsTypeRoute {
    crate::__imports::native_get_pos_along_gps_type_route(result,
p1,
p2,
p3)
}
pub fn set_allow_stream_heist_island_nodes(r#type: i32) -> altv_wasm_shared::natives_result::ResultOfSetAllowStreamHeistIslandNodes {
    crate::__imports::native_set_allow_stream_heist_island_nodes(r#type)
}
pub fn are_nodes_loaded_for_area(x1: f32,
y1: f32,
x2: f32,
y2: f32) -> altv_wasm_shared::natives_result::ResultOfAreNodesLoadedForArea {
    crate::__imports::native_are_nodes_loaded_for_area(x1,
y1,
x2,
y2)
}
pub fn is_navmesh_loaded_in_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32) -> altv_wasm_shared::natives_result::ResultOfIsNavmeshLoadedInArea {
    crate::__imports::native_is_navmesh_loaded_in_area(x1,
y1,
z1,
x2,
y2,
z2)
}
pub fn generate_directions_to_coord(x: f32,
y: f32,
z: f32,
p3: bool,
direction: i32,
p5: f32,
dist_to_nx_junction: f32) -> altv_wasm_shared::natives_result::ResultOfGenerateDirectionsToCoord {
    crate::__imports::native_generate_directions_to_coord(x,
y,
z,
p3,
direction,
p5,
dist_to_nx_junction)
}
pub fn add_navmesh_blocking_object(p0: f32,
p1: f32,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
p6: f32,
p7: bool,
p8: i32) -> altv_wasm_shared::natives_result::ResultOfAddNavmeshBlockingObject {
    crate::__imports::native_add_navmesh_blocking_object(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8)
}
pub fn get_closest_vehicle_node_with_heading(x: f32,
y: f32,
z: f32,
out_position: Option<&shared::Vector3>,
out_heading: f32,
node_type: i32,
p6: f32,
p7: f32) -> altv_wasm_shared::natives_result::ResultOfGetClosestVehicleNodeWithHeading {
    crate::__imports::native_get_closest_vehicle_node_with_heading(x,
y,
z,
out_position,
out_heading,
node_type,
p6,
p7)
}
pub fn reset_facial_idle_anim(ped: u32) -> altv_wasm_shared::natives_result::ResultOfResetFacialIdleAnim {
    crate::__imports::native_reset_facial_idle_anim(ped)
}
pub fn is_ped_using_action_mode(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedUsingActionMode {
    crate::__imports::native_is_ped_using_action_mode(ped)
}
pub fn get_ped_makeup_tint_color(makeup_color_index: i32,
out_r: i32,
out_g: i32,
out_b: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedMakeupTintColor {
    crate::__imports::native_get_ped_makeup_tint_color(makeup_color_index,
out_r,
out_g,
out_b)
}
pub fn set_ped_min_move_blend_ratio(ped: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedMinMoveBlendRatio {
    crate::__imports::native_set_ped_min_move_blend_ratio(ped,
value)
}
pub fn set_ped_ragdoll_force_fall(ped: u32) -> altv_wasm_shared::natives_result::ResultOfSetPedRagdollForceFall {
    crate::__imports::native_set_ped_ragdoll_force_fall(ped)
}
pub fn is_ped_on_foot(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedOnFoot {
    crate::__imports::native_is_ped_on_foot(ped)
}
pub fn set_ped_as_enemy(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedAsEnemy {
    crate::__imports::native_set_ped_as_enemy(ped,
toggle)
}
pub fn set_ped_ducking(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedDucking {
    crate::__imports::native_set_ped_ducking(ped,
toggle)
}
pub fn get_can_ped_be_grabbed_by_script(ped: u32,
p1: bool,
p2: bool,
p3: bool,
p4: bool,
p5: bool,
p6: bool,
p7: bool,
p8: i32) -> altv_wasm_shared::natives_result::ResultOfGetCanPedBeGrabbedByScript {
    crate::__imports::native_get_can_ped_be_grabbed_by_script(ped,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8)
}
pub fn get_ped_texture_variation(ped: u32,
component_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedTextureVariation {
    crate::__imports::native_get_ped_texture_variation(ped,
component_id)
}
pub fn is_ped_lipstick_tint_for_barber(color_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfIsPedLipstickTintForBarber {
    crate::__imports::native_is_ped_lipstick_tint_for_barber(color_i_d)
}
pub fn is_target_ped_in_perception_area(ped: u32,
target_ped: u32,
p2: f32,
p3: f32,
p4: f32,
p5: f32) -> altv_wasm_shared::natives_result::ResultOfIsTargetPedInPerceptionArea {
    crate::__imports::native_is_target_ped_in_perception_area(ped,
target_ped,
p2,
p3,
p4,
p5)
}
pub fn set_allow_lockon_to_ped_if_friendly(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetAllowLockonToPedIfFriendly {
    crate::__imports::native_set_allow_lockon_to_ped_if_friendly(ped,
toggle)
}
pub fn set_ped_target_loss_response(ped: u32,
response_type: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedTargetLossResponse {
    crate::__imports::native_set_ped_target_loss_response(ped,
response_type)
}
pub fn is_any_ped_near_point(x: f32,
y: f32,
z: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfIsAnyPedNearPoint {
    crate::__imports::native_is_any_ped_near_point(x,
y,
z,
radius)
}
pub fn set_ped_move_rate_override(ped: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedMoveRateOverride {
    crate::__imports::native_set_ped_move_rate_override(ped,
value)
}
pub fn clear_ped_prop(ped: u32,
prop_id: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfClearPedProp {
    crate::__imports::native_clear_ped_prop(ped,
prop_id,
p2)
}
pub fn is_ped_blush_facepaint_tint_for_barber(color_id: i32) -> altv_wasm_shared::natives_result::ResultOfIsPedBlushFacepaintTintForBarber {
    crate::__imports::native_is_ped_blush_facepaint_tint_for_barber(color_id)
}
pub fn set_ped_motion_blur(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedMotionBlur {
    crate::__imports::native_set_ped_motion_blur(ped,
toggle)
}
pub fn set_ped_move_rate_in_water_override(ped: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedMoveRateInWaterOverride {
    crate::__imports::native_set_ped_move_rate_in_water_override(ped,
p1)
}
pub fn is_ped_in_any_police_vehicle(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedInAnyPoliceVehicle {
    crate::__imports::native_is_ped_in_any_police_vehicle(ped)
}
pub fn set_ped_group_member_passenger_index(ped: u32,
index: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedGroupMemberPassengerIndex {
    crate::__imports::native_set_ped_group_member_passenger_index(ped,
index)
}
pub fn clear_ped_decorations(ped: u32) -> altv_wasm_shared::natives_result::ResultOfClearPedDecorations {
    crate::__imports::native_clear_ped_decorations(ped)
}
pub fn set_ped_can_play_ambient_base_anims(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanPlayAmbientBaseAnims {
    crate::__imports::native_set_ped_can_play_ambient_base_anims(ped,
toggle)
}
pub fn set_ped_treated_as_friendly(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedTreatedAsFriendly {
    crate::__imports::native_set_ped_treated_as_friendly(p0,
p1,
p2)
}
pub fn set_create_random_cops(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetCreateRandomCops {
    crate::__imports::native_set_create_random_cops(toggle)
}
pub fn set_ped_enveff_cpv_add(ped: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedEnveffCpvAdd {
    crate::__imports::native_set_ped_enveff_cpv_add(ped,
p1)
}
pub fn set_ped_to_inform_respected_friends(ped: u32,
radius: f32,
max_friends: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedToInformRespectedFriends {
    crate::__imports::native_set_ped_to_inform_respected_friends(ped,
radius,
max_friends)
}
pub fn is_ped_vaulting(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedVaulting {
    crate::__imports::native_is_ped_vaulting(ped)
}
pub fn was_ped_skeleton_updated(ped: u32) -> altv_wasm_shared::natives_result::ResultOfWasPedSkeletonUpdated {
    crate::__imports::native_was_ped_skeleton_updated(ped)
}
pub fn request_ragdoll_bounds_update(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfRequestRagdollBoundsUpdate {
    crate::__imports::native_request_ragdoll_bounds_update(p0,
p1)
}
pub fn is_ped_a_player(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedAplayer {
    crate::__imports::native_is_ped_a_player(ped)
}
pub fn clear_ped_parachute_pack_variation(ped: u32) -> altv_wasm_shared::natives_result::ResultOfClearPedParachutePackVariation {
    crate::__imports::native_clear_ped_parachute_pack_variation(ped)
}
pub fn can_ped_ragdoll(ped: u32) -> altv_wasm_shared::natives_result::ResultOfCanPedRagdoll {
    crate::__imports::native_can_ped_ragdoll(ped)
}
pub fn set_force_footstep_update(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetForceFootstepUpdate {
    crate::__imports::native_set_force_footstep_update(ped,
toggle)
}
pub fn set_ped_blend_from_parents(ped: u32,
p1: i32,
p2: i32,
p3: f32,
p4: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedBlendFromParents {
    crate::__imports::native_set_ped_blend_from_parents(ped,
p1,
p2,
p3,
p4)
}
pub fn remove_action_mode_asset(asset: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRemoveActionModeAsset {
    crate::__imports::native_remove_action_mode_asset(asset)
}
pub fn is_ped_taking_off_helmet(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedTakingOffHelmet {
    crate::__imports::native_is_ped_taking_off_helmet(ped)
}
pub fn get_ped_emissive_scale(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedEmissiveScale {
    crate::__imports::native_get_ped_emissive_scale(ped)
}
pub fn clone_ped_to_target_alt(ped: u32,
target_ped: u32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfClonePedToTargetAlt {
    crate::__imports::native_clone_ped_to_target_alt(ped,
target_ped,
p2)
}
pub fn set_scenario_peds_to_be_returned_by_next_command(value: bool) -> altv_wasm_shared::natives_result::ResultOfSetScenarioPedsToBeReturnedByNextCommand {
    crate::__imports::native_set_scenario_peds_to_be_returned_by_next_command(value)
}
pub fn set_ped_steers_around_objects(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedSteersAroundObjects {
    crate::__imports::native_set_ped_steers_around_objects(ped,
toggle)
}
pub fn force_ped_to_open_parachute(ped: u32) -> altv_wasm_shared::natives_result::ResultOfForcePedToOpenParachute {
    crate::__imports::native_force_ped_to_open_parachute(ped)
}
pub fn is_cop_ped_in_area3d(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32) -> altv_wasm_shared::natives_result::ResultOfIsCopPedInArea3d {
    crate::__imports::native_is_cop_ped_in_area3d(x1,
y1,
z1,
x2,
y2,
z2)
}
pub fn get_ped_cause_of_death(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedCauseOfDeath {
    crate::__imports::native_get_ped_cause_of_death(ped)
}
pub fn get_ped_bone_coords(ped: u32,
bone_id: i32,
offset_x: f32,
offset_y: f32,
offset_z: f32) -> altv_wasm_shared::natives_result::ResultOfGetPedBoneCoords {
    crate::__imports::native_get_ped_bone_coords(ped,
bone_id,
offset_x,
offset_y,
offset_z)
}
pub fn get_melee_target_for_ped(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetMeleeTargetForPed {
    crate::__imports::native_get_melee_target_for_ped(ped)
}
pub fn set_ped_config_flag(ped: u32,
flag_id: i32,
value: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedConfigFlag {
    crate::__imports::native_set_ped_config_flag(ped,
flag_id,
value)
}
pub fn set_ladder_climb_input_state(ped: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetLadderClimbInputState {
    crate::__imports::native_set_ladder_climb_input_state(ped,
p1)
}
pub fn set_ai_weapon_damage_modifier(value: f32) -> altv_wasm_shared::natives_result::ResultOfSetAiWeaponDamageModifier {
    crate::__imports::native_set_ai_weapon_damage_modifier(value)
}
pub fn add_scenario_blocking_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
p6: bool,
p7: bool,
p8: bool,
p9: bool) -> altv_wasm_shared::natives_result::ResultOfAddScenarioBlockingArea {
    crate::__imports::native_add_scenario_blocking_area(x1,
y1,
z1,
x2,
y2,
z2,
p6,
p7,
p8,
p9)
}
pub fn is_ped_using_scenario(ped: u32,
scenario: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfIsPedUsingScenario {
    crate::__imports::native_is_ped_using_scenario(ped,
scenario)
}
pub fn is_ped_hanging_on_to_vehicle(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedHangingOnToVehicle {
    crate::__imports::native_is_ped_hanging_on_to_vehicle(ped)
}
pub fn set_ped_can_smash_glass(ped: u32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanSmashGlass {
    crate::__imports::native_set_ped_can_smash_glass(ped,
p1,
p2)
}
pub fn set_group_formation_spacing(group_id: i32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfSetGroupFormationSpacing {
    crate::__imports::native_set_group_formation_spacing(group_id,
x,
y,
z)
}
pub fn get_fm_male_shop_ped_apparel_item_index(p0: i32) -> altv_wasm_shared::natives_result::ResultOfGetFmMaleShopPedApparelItemIndex {
    crate::__imports::native_get_fm_male_shop_ped_apparel_item_index(p0)
}
pub fn get_ped_time_of_death(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedTimeOfDeath {
    crate::__imports::native_get_ped_time_of_death(ped)
}
pub fn set_ped_steers_around_dead_bodies(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedSteersAroundDeadBodies {
    crate::__imports::native_set_ped_steers_around_dead_bodies(ped,
toggle)
}
pub fn reset_ped_strafe_clipset(ped: u32) -> altv_wasm_shared::natives_result::ResultOfResetPedStrafeClipset {
    crate::__imports::native_reset_ped_strafe_clipset(ped)
}
pub fn get_ped_ragdoll_bone_index(ped: u32,
bone: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedRagdollBoneIndex {
    crate::__imports::native_get_ped_ragdoll_bone_index(ped,
bone)
}
pub fn force_ped_ai_and_animation_update(ped: u32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfForcePedAiAndAnimationUpdate {
    crate::__imports::native_force_ped_ai_and_animation_update(ped,
p1,
p2)
}
pub fn reset_ped_in_vehicle_context(ped: u32) -> altv_wasm_shared::natives_result::ResultOfResetPedInVehicleContext {
    crate::__imports::native_reset_ped_in_vehicle_context(ped)
}
pub fn get_ped_nearby_peds(ped: u32,
size_and_peds: shared::MemoryBufferId,
ignore: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedNearbyPeds {
    crate::__imports::native_get_ped_nearby_peds(ped,
size_and_peds,
ignore)
}
pub fn is_ped_reloading(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedReloading {
    crate::__imports::native_is_ped_reloading(ped)
}
pub fn trigger_ped_scenario_panicexittoflee(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfTriggerPedScenarioPanicexittoflee {
    crate::__imports::native_trigger_ped_scenario_panicexittoflee(p0,
p1,
p2,
p3)
}
pub fn is_synchronized_scene_running(scene_id: i32) -> altv_wasm_shared::natives_result::ResultOfIsSynchronizedSceneRunning {
    crate::__imports::native_is_synchronized_scene_running(scene_id)
}
pub fn set_ped_weapon_movement_clipset(ped: u32,
clip_set: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetPedWeaponMovementClipset {
    crate::__imports::native_set_ped_weapon_movement_clipset(ped,
clip_set)
}
pub fn set_ped_component_variation(ped: u32,
component_id: i32,
drawable_id: i32,
texture_id: i32,
palette_id: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedComponentVariation {
    crate::__imports::native_set_ped_component_variation(ped,
component_id,
drawable_id,
texture_id,
palette_id)
}
pub fn set_ragdoll_blocking_flags(ped: u32,
blocking_flag: i32) -> altv_wasm_shared::natives_result::ResultOfSetRagdollBlockingFlags {
    crate::__imports::native_set_ragdoll_blocking_flags(ped,
blocking_flag)
}
pub fn is_ped_opening_door(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedOpeningDoor {
    crate::__imports::native_is_ped_opening_door(ped)
}
pub fn set_ped_helmet_prop_index(ped: u32,
prop_index: i32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedHelmetPropIndex {
    crate::__imports::native_set_ped_helmet_prop_index(ped,
prop_index,
p2)
}
pub fn attach_synchronized_scene_to_entity(scene_i_d: i32,
entity: u32,
bone_index: i32) -> altv_wasm_shared::natives_result::ResultOfAttachSynchronizedSceneToEntity {
    crate::__imports::native_attach_synchronized_scene_to_entity(scene_i_d,
entity,
bone_index)
}
pub fn set_corpse_ragdoll_friction(ped: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetCorpseRagdollFriction {
    crate::__imports::native_set_corpse_ragdoll_friction(ped,
p1)
}
pub fn get_ped_head_blend_data(ped: u32,
head_blend_data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetPedHeadBlendData {
    crate::__imports::native_get_ped_head_blend_data(ped,
head_blend_data)
}
pub fn get_number_of_ped_drawable_variations(ped: u32,
component_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetNumberOfPedDrawableVariations {
    crate::__imports::native_get_number_of_ped_drawable_variations(ped,
component_id)
}
pub fn set_ped_sweat(ped: u32,
sweat: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedSweat {
    crate::__imports::native_set_ped_sweat(ped,
sweat)
}
pub fn spawnpoints_get_search_result(random_int: i32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfSpawnpointsGetSearchResult {
    crate::__imports::native_spawnpoints_get_search_result(random_int,
x,
y,
z)
}
pub fn set_scenario_peds_spawn_in_sphere_area(x: f32,
y: f32,
z: f32,
range: f32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfSetScenarioPedsSpawnInSphereArea {
    crate::__imports::native_set_scenario_peds_spawn_in_sphere_area(x,
y,
z,
range,
p4)
}
pub fn set_ped_steer_bias(ped: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedSteerBias {
    crate::__imports::native_set_ped_steer_bias(ped,
value)
}
pub fn request_action_mode_asset(asset: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRequestActionModeAsset {
    crate::__imports::native_request_action_mode_asset(asset)
}
pub fn is_ped_in_any_heli(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedInAnyHeli {
    crate::__imports::native_is_ped_in_any_heli(ped)
}
pub fn set_ped_strafe_clipset(ped: u32,
clip_set: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetPedStrafeClipset {
    crate::__imports::native_set_ped_strafe_clipset(ped,
clip_set)
}
pub fn request_stealth_mode_asset(asset: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRequestStealthModeAsset {
    crate::__imports::native_request_stealth_mode_asset(asset)
}
pub fn set_ped_dies_in_vehicle(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedDiesInVehicle {
    crate::__imports::native_set_ped_dies_in_vehicle(ped,
toggle)
}
pub fn set_ped_as_group_leader(ped: u32,
group_id: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedAsGroupLeader {
    crate::__imports::native_set_ped_as_group_leader(ped,
group_id)
}
pub fn is_ped_running_mobile_phone_task(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedRunningMobilePhoneTask {
    crate::__imports::native_is_ped_running_mobile_phone_task(ped)
}
pub fn set_ped_preload_prop_data(ped: u32,
component_id: i32,
drawable_id: i32,
texture_id: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedPreloadPropData {
    crate::__imports::native_set_ped_preload_prop_data(ped,
component_id,
drawable_id,
texture_id)
}
pub fn set_ped_ao_blob_rendering(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedAoBlobRendering {
    crate::__imports::native_set_ped_ao_blob_rendering(ped,
toggle)
}
pub fn mark_ped_decorations_as_cloned_from_local_player(ped: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfMarkPedDecorationsAsClonedFromLocalPlayer {
    crate::__imports::native_mark_ped_decorations_as_cloned_from_local_player(ped,
p1)
}
pub fn request_ped_vehicle_visibility_tracking(ped: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfRequestPedVehicleVisibilityTracking {
    crate::__imports::native_request_ped_vehicle_visibility_tracking(ped,
p1)
}
pub fn explode_ped_head(ped: u32,
weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfExplodePedHead {
    crate::__imports::native_explode_ped_head(ped,
weapon_hash)
}
pub fn set_ped_visual_field_min_angle(ped: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedVisualFieldMinAngle {
    crate::__imports::native_set_ped_visual_field_min_angle(ped,
value)
}
pub fn spawnpoints_start_search(p0: f32,
p1: f32,
p2: f32,
p3: f32,
p4: f32,
interior_flags: i32,
scale: f32,
duration: i32) -> altv_wasm_shared::natives_result::ResultOfSpawnpointsStartSearch {
    crate::__imports::native_spawnpoints_start_search(p0,
p1,
p2,
p3,
p4,
interior_flags,
scale,
duration)
}
pub fn can_ped_shuffle_to_or_from_extra_seat(ped: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfCanPedShuffleToOrFromExtraSeat {
    crate::__imports::native_can_ped_shuffle_to_or_from_extra_seat(ped,
p1)
}
pub fn clear_ped_non_creation_area() -> altv_wasm_shared::natives_result::ResultOfClearPedNonCreationArea {
    crate::__imports::native_clear_ped_non_creation_area()
}
pub fn is_ped_in_any_boat(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedInAnyBoat {
    crate::__imports::native_is_ped_in_any_boat(ped)
}
pub fn set_ped_can_teleport_to_group_leader(ped_handle: u32,
group_handle: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanTeleportToGroupLeader {
    crate::__imports::native_set_ped_can_teleport_to_group_leader(ped_handle,
group_handle,
toggle)
}
pub fn set_cop_perception_overrides(seeing_range: f32,
seeing_range_peripheral: f32,
hearing_range: f32,
visual_field_min_azimuth_angle: f32,
visual_field_max_azimuth_angle: f32,
field_of_gaze_max_angle: f32,
p6: f32) -> altv_wasm_shared::natives_result::ResultOfSetCopPerceptionOverrides {
    crate::__imports::native_set_cop_perception_overrides(seeing_range,
seeing_range_peripheral,
hearing_range,
visual_field_min_azimuth_angle,
visual_field_max_azimuth_angle,
field_of_gaze_max_angle,
p6)
}
pub fn register_target(ped: u32,
target: u32) -> altv_wasm_shared::natives_result::ResultOfRegisterTarget {
    crate::__imports::native_register_target(ped,
target)
}
pub fn set_treat_as_ambient_ped_for_driver_lockon(ped: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetTreatAsAmbientPedForDriverLockon {
    crate::__imports::native_set_treat_as_ambient_ped_for_driver_lockon(ped,
p1)
}
pub fn remove_scenario_blocking_area(p0: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfRemoveScenarioBlockingArea {
    crate::__imports::native_remove_scenario_blocking_area(p0,
p1)
}
pub fn get_ped_target_from_combat_ped(ped: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedTargetFromCombatPed {
    crate::__imports::native_get_ped_target_from_combat_ped(ped,
p1)
}
pub fn apply_ped_blood_by_zone(ped: u32,
p1: i32,
p2: f32,
p3: f32,
p4: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfApplyPedBloodByZone {
    crate::__imports::native_apply_ped_blood_by_zone(ped,
p1,
p2,
p3,
p4)
}
pub fn is_ped_dead_or_dying(ped: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfIsPedDeadOrDying {
    crate::__imports::native_is_ped_dead_or_dying(ped,
p1)
}
pub fn set_ped_to_load_cover(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedToLoadCover {
    crate::__imports::native_set_ped_to_load_cover(ped,
toggle)
}
pub fn set_ped_parachute_tint_index(ped: u32,
tint_index: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedParachuteTintIndex {
    crate::__imports::native_set_ped_parachute_tint_index(ped,
tint_index)
}
pub fn count_peds_in_combat_with_target_within_radius(ped: u32,
x: f32,
y: f32,
z: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfCountPedsInCombatWithTargetWithinRadius {
    crate::__imports::native_count_peds_in_combat_with_target_within_radius(ped,
x,
y,
z,
radius)
}
pub fn set_ped_is_ignored_by_auto_open_doors(ped: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedIsIgnoredByAutoOpenDoors {
    crate::__imports::native_set_ped_is_ignored_by_auto_open_doors(ped,
p1)
}
pub fn set_ped_hearing_range(ped: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedHearingRange {
    crate::__imports::native_set_ped_hearing_range(ped,
value)
}
pub fn is_ped_shooting(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedShooting {
    crate::__imports::native_is_ped_shooting(ped)
}
pub fn set_ped_capsule(ped: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedCapsule {
    crate::__imports::native_set_ped_capsule(ped,
value)
}
pub fn get_time_ped_damaged_by_weapon(ped: u32,
weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetTimePedDamagedByWeapon {
    crate::__imports::native_get_time_ped_damaged_by_weapon(ped,
weapon_hash)
}
pub fn set_ped_scuba_gear_variation(ped: u32) -> altv_wasm_shared::natives_result::ResultOfSetPedScubaGearVariation {
    crate::__imports::native_set_ped_scuba_gear_variation(ped)
}
pub fn is_ped_switching_weapon(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedSwitchingWeapon {
    crate::__imports::native_is_ped_switching_weapon(ped)
}
pub fn get_ped_accuracy(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedAccuracy {
    crate::__imports::native_get_ped_accuracy(ped)
}
pub fn set_synchronized_scene_hold_last_frame(scene_i_d: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetSynchronizedSceneHoldLastFrame {
    crate::__imports::native_set_synchronized_scene_hold_last_frame(scene_i_d,
toggle)
}
pub fn apply_ped_damage_decal(ped: u32,
damage_zone: i32,
x_offset: f32,
y_offset: f32,
heading: f32,
scale: f32,
alpha: f32,
unk_variation: i32,
fade_in: bool,
decal_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfApplyPedDamageDecal {
    crate::__imports::native_apply_ped_damage_decal(ped,
damage_zone,
x_offset,
y_offset,
heading,
scale,
alpha,
unk_variation,
fade_in,
decal_name)
}
pub fn is_ped_aiming_from_cover(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedAimingFromCover {
    crate::__imports::native_is_ped_aiming_from_cover(ped)
}
pub fn set_ped_preload_variation_data(ped: u32,
slot: i32,
drawable_id: i32,
texture_id: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedPreloadVariationData {
    crate::__imports::native_set_ped_preload_variation_data(ped,
slot,
drawable_id,
texture_id)
}
pub fn reset_ped_visible_damage(ped: u32) -> altv_wasm_shared::natives_result::ResultOfResetPedVisibleDamage {
    crate::__imports::native_reset_ped_visible_damage(ped)
}
pub fn set_ped_visual_field_center_angle(ped: u32,
angle: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedVisualFieldCenterAngle {
    crate::__imports::native_set_ped_visual_field_center_angle(ped,
angle)
}
pub fn set_ped_allow_vehicles_override(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedAllowVehiclesOverride {
    crate::__imports::native_set_ped_allow_vehicles_override(ped,
toggle)
}
pub fn get_ped_defensive_area_position(ped: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfGetPedDefensiveAreaPosition {
    crate::__imports::native_get_ped_defensive_area_position(ped,
p1)
}
pub fn set_ped_combat_range(ped: u32,
combat_range: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedCombatRange {
    crate::__imports::native_set_ped_combat_range(ped,
combat_range)
}
pub fn spawnpoints_is_search_active() -> altv_wasm_shared::natives_result::ResultOfSpawnpointsIsSearchActive {
    crate::__imports::native_spawnpoints_is_search_active()
}
pub fn set_ped_never_leaves_group(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedNeverLeavesGroup {
    crate::__imports::native_set_ped_never_leaves_group(ped,
toggle)
}
pub fn is_ped_lipstick_tint_for_creator(color_id: i32) -> altv_wasm_shared::natives_result::ResultOfIsPedLipstickTintForCreator {
    crate::__imports::native_is_ped_lipstick_tint_for_creator(color_id)
}
pub fn can_create_random_ped(p0: bool) -> altv_wasm_shared::natives_result::ResultOfCanCreateRandomPed {
    crate::__imports::native_can_create_random_ped(p0)
}
pub fn set_ped_will_only_attack_wanted_player(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedWillOnlyAttackWantedPlayer {
    crate::__imports::native_set_ped_will_only_attack_wanted_player(p0,
p1)
}
pub fn get_ped_bone_index(ped: u32,
bone_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedBoneIndex {
    crate::__imports::native_get_ped_bone_index(ped,
bone_id)
}
pub fn get_ped_money(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedMoney {
    crate::__imports::native_get_ped_money(ped)
}
pub fn set_ped_helmet_visor_prop_indices(ped: u32,
p1: bool,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedHelmetVisorPropIndices {
    crate::__imports::native_set_ped_helmet_visor_prop_indices(ped,
p1,
p2,
p3)
}
pub fn set_group_separation_range(group_handle: i32,
separation_range: f32) -> altv_wasm_shared::natives_result::ResultOfSetGroupSeparationRange {
    crate::__imports::native_set_group_separation_range(group_handle,
separation_range)
}
pub fn is_ped_landing(p0: i32) -> altv_wasm_shared::natives_result::ResultOfIsPedLanding {
    crate::__imports::native_is_ped_landing(p0)
}
pub fn set_ped_defensive_area_direction(ped: u32,
p1: f32,
p2: f32,
p3: f32,
p4: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedDefensiveAreaDirection {
    crate::__imports::native_set_ped_defensive_area_direction(ped,
p1,
p2,
p3,
p4)
}
pub fn is_ped_evasive_diving(ped: u32,
evading_entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedEvasiveDiving {
    crate::__imports::native_is_ped_evasive_diving(ped,
evading_entity)
}
pub fn create_nm_message(start_immediately: bool,
message_id: i32) -> altv_wasm_shared::natives_result::ResultOfCreateNmMessage {
    crate::__imports::native_create_nm_message(start_immediately,
message_id)
}
pub fn set_ped_should_ignore_scenario_exit_collision_checks(ped: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedShouldIgnoreScenarioExitCollisionChecks {
    crate::__imports::native_set_ped_should_ignore_scenario_exit_collision_checks(ped,
p1)
}
pub fn get_ped_relationship_group_default_hash(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedRelationshipGroupDefaultHash {
    crate::__imports::native_get_ped_relationship_group_default_hash(ped)
}
pub fn set_ped_can_be_targeted_without_los(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanBeTargetedWithoutLos {
    crate::__imports::native_set_ped_can_be_targeted_without_los(ped,
toggle)
}
pub fn set_ped_max_move_blend_ratio(ped: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedMaxMoveBlendRatio {
    crate::__imports::native_set_ped_max_move_blend_ratio(ped,
value)
}
pub fn is_ped_jumping_out_of_vehicle(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedJumpingOutOfVehicle {
    crate::__imports::native_is_ped_jumping_out_of_vehicle(ped)
}
pub fn set_ped_max_time_in_water(ped: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedMaxTimeInWater {
    crate::__imports::native_set_ped_max_time_in_water(ped,
value)
}
pub fn set_create_random_cops_on_scenarios(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetCreateRandomCopsOnScenarios {
    crate::__imports::native_set_create_random_cops_on_scenarios(toggle)
}
pub fn register_pedheadshot(ped: u32) -> altv_wasm_shared::natives_result::ResultOfRegisterPedheadshot {
    crate::__imports::native_register_pedheadshot(ped)
}
pub fn set_ped_wetness_height(ped: u32,
height: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedWetnessHeight {
    crate::__imports::native_set_ped_wetness_height(ped,
height)
}
pub fn is_ped_trying_to_enter_a_locked_vehicle(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedTryingToEnterAlockedVehicle {
    crate::__imports::native_is_ped_trying_to_enter_a_locked_vehicle(ped)
}
pub fn get_ped_helmet_stored_hat_prop_index(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedHelmetStoredHatPropIndex {
    crate::__imports::native_get_ped_helmet_stored_hat_prop_index(ped)
}
pub fn is_ped_doing_a_beast_jump(p0: i32) -> altv_wasm_shared::natives_result::ResultOfIsPedDoingAbeastJump {
    crate::__imports::native_is_ped_doing_a_beast_jump(p0)
}
pub fn knock_ped_off_vehicle(ped: u32) -> altv_wasm_shared::natives_result::ResultOfKnockPedOffVehicle {
    crate::__imports::native_knock_ped_off_vehicle(ped)
}
pub fn set_ped_default_component_variation(ped: u32) -> altv_wasm_shared::natives_result::ResultOfSetPedDefaultComponentVariation {
    crate::__imports::native_set_ped_default_component_variation(ped)
}
pub fn is_ped_on_mount(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedOnMount {
    crate::__imports::native_is_ped_on_mount(ped)
}
pub fn finalize_head_blend(ped: u32) -> altv_wasm_shared::natives_result::ResultOfFinalizeHeadBlend {
    crate::__imports::native_finalize_head_blend(ped)
}
pub fn ped_has_sexiness_flag_set(ped: u32,
sexiness_flag: i32) -> altv_wasm_shared::natives_result::ResultOfPedHasSexinessFlagSet {
    crate::__imports::native_ped_has_sexiness_flag_set(ped,
sexiness_flag)
}
pub fn apply_ped_damage_pack(ped: u32,
damage_pack: Option<&String>,
damage: f32,
mult: f32) -> altv_wasm_shared::natives_result::ResultOfApplyPedDamagePack {
    crate::__imports::native_apply_ped_damage_pack(ped,
damage_pack,
damage,
mult)
}
pub fn reset_ai_melee_weapon_damage_modifier() -> altv_wasm_shared::natives_result::ResultOfResetAiMeleeWeaponDamageModifier {
    crate::__imports::native_reset_ai_melee_weapon_damage_modifier()
}
pub fn set_ped_steers_around_peds(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedSteersAroundPeds {
    crate::__imports::native_set_ped_steers_around_peds(ped,
toggle)
}
pub fn get_ped_max_health(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedMaxHealth {
    crate::__imports::native_get_ped_max_health(ped)
}
pub fn instantly_fill_ped_population() -> altv_wasm_shared::natives_result::ResultOfInstantlyFillPedPopulation {
    crate::__imports::native_instantly_fill_ped_population()
}
pub fn is_ped_ragdoll(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedRagdoll {
    crate::__imports::native_is_ped_ragdoll(ped)
}
pub fn get_ped_hair_tint_color(hair_color_index: i32,
out_r: i32,
out_g: i32,
out_b: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedHairTintColor {
    crate::__imports::native_get_ped_hair_tint_color(hair_color_index,
out_r,
out_g,
out_b)
}
pub fn is_ped_in_combat(ped: u32,
target: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedInCombat {
    crate::__imports::native_is_ped_in_combat(ped,
target)
}
pub fn set_ped_head_overlay(ped: u32,
overlay_i_d: i32,
index: i32,
opacity: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedHeadOverlay {
    crate::__imports::native_set_ped_head_overlay(ped,
overlay_i_d,
index,
opacity)
}
pub fn set_ped_head_overlay_tint(ped: u32,
overlay_i_d: i32,
color_type: i32,
color_i_d: i32,
second_color_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedHeadOverlayTint {
    crate::__imports::native_set_ped_head_overlay_tint(ped,
overlay_i_d,
color_type,
color_i_d,
second_color_i_d)
}
pub fn set_ped_allow_minor_reactions_as_mission_ped(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedAllowMinorReactionsAsMissionPed {
    crate::__imports::native_set_ped_allow_minor_reactions_as_mission_ped(ped,
toggle)
}
pub fn is_ped_jacking(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedJacking {
    crate::__imports::native_is_ped_jacking(ped)
}
pub fn clear_ped_drive_by_clipset_override(ped: u32) -> altv_wasm_shared::natives_result::ResultOfClearPedDriveByClipsetOverride {
    crate::__imports::native_clear_ped_drive_by_clipset_override(ped)
}
pub fn get_anim_initial_offset_rotation(anim_dict: Option<&String>,
anim_name: Option<&String>,
x: f32,
y: f32,
z: f32,
x_rot: f32,
y_rot: f32,
z_rot: f32,
p8: f32,
p9: i32) -> altv_wasm_shared::natives_result::ResultOfGetAnimInitialOffsetRotation {
    crate::__imports::native_get_anim_initial_offset_rotation(anim_dict,
anim_name,
x,
y,
z,
x_rot,
y_rot,
z_rot,
p8,
p9)
}
pub fn is_ped_tracked(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedTracked {
    crate::__imports::native_is_ped_tracked(ped)
}
pub fn set_ped_hair_tint(ped: u32,
color_i_d: i32,
highlight_color_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedHairTint {
    crate::__imports::native_set_ped_hair_tint(ped,
color_i_d,
highlight_color_i_d)
}
pub fn set_ped_combat_movement(ped: u32,
combat_movement: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedCombatMovement {
    crate::__imports::native_set_ped_combat_movement(ped,
combat_movement)
}
pub fn is_ped_in_melee_combat(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedInMeleeCombat {
    crate::__imports::native_is_ped_in_melee_combat(ped)
}
pub fn set_ped_emissive_scale(ped: u32,
intensity: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedEmissiveScale {
    crate::__imports::native_set_ped_emissive_scale(ped,
intensity)
}
pub fn set_ped_defensive_area_attached_to_ped(ped: u32,
attach_ped: u32,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
p6: f32,
p7: f32,
p8: f32,
p9: bool,
p10: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedDefensiveAreaAttachedToPed {
    crate::__imports::native_set_ped_defensive_area_attached_to_ped(ped,
attach_ped,
p2,
p3,
p4,
p5,
p6,
p7,
p8,
p9,
p10)
}
pub fn set_ped_bounds_orientation(ped: u32,
p1: f32,
p2: f32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedBoundsOrientation {
    crate::__imports::native_set_ped_bounds_orientation(ped,
p1,
p2,
x,
y,
z)
}
pub fn is_ped_being_stunned(ped: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfIsPedBeingStunned {
    crate::__imports::native_is_ped_being_stunned(ped,
p1)
}
pub fn set_scripted_conversion_coord_this_frame(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfSetScriptedConversionCoordThisFrame {
    crate::__imports::native_set_scripted_conversion_coord_this_frame(x,
y,
z)
}
pub fn set_head_blend_eye_color(ped: u32,
index: i32) -> altv_wasm_shared::natives_result::ResultOfSetHeadBlendEyeColor {
    crate::__imports::native_set_head_blend_eye_color(ped,
index)
}
pub fn get_tracked_ped_pixelcount(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetTrackedPedPixelcount {
    crate::__imports::native_get_tracked_ped_pixelcount(ped)
}
pub fn get_ped_as_group_member(group_i_d: i32,
member_number: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedAsGroupMember {
    crate::__imports::native_get_ped_as_group_member(group_i_d,
member_number)
}
pub fn can_knock_ped_off_vehicle(ped: u32) -> altv_wasm_shared::natives_result::ResultOfCanKnockPedOffVehicle {
    crate::__imports::native_can_knock_ped_off_vehicle(ped)
}
pub fn clear_ped_damage_decal_by_zone(ped: u32,
p1: i32,
p2: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfClearPedDamageDecalByZone {
    crate::__imports::native_clear_ped_damage_decal_by_zone(ped,
p1,
p2)
}
pub fn set_ped_highly_perceptive(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedHighlyPerceptive {
    crate::__imports::native_set_ped_highly_perceptive(ped,
toggle)
}
pub fn get_combat_float(ped: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfGetCombatFloat {
    crate::__imports::native_get_combat_float(ped,
p1)
}
pub fn set_ped_in_vehicle_context(ped: u32,
context: u32) -> altv_wasm_shared::natives_result::ResultOfSetPedInVehicleContext {
    crate::__imports::native_set_ped_in_vehicle_context(ped,
context)
}
pub fn is_ped_stopped(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedStopped {
    crate::__imports::native_is_ped_stopped(ped)
}
pub fn is_ped_climbing(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedClimbing {
    crate::__imports::native_is_ped_climbing(ped)
}
pub fn count_peds_in_combat_with_target(ped: u32) -> altv_wasm_shared::natives_result::ResultOfCountPedsInCombatWithTarget {
    crate::__imports::native_count_peds_in_combat_with_target(ped)
}
pub fn get_jack_target(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetJackTarget {
    crate::__imports::native_get_jack_target(ped)
}
pub fn give_ped_helmet(ped: u32,
cannot_remove: bool,
helmet_flag: i32,
texture_index: i32) -> altv_wasm_shared::natives_result::ResultOfGivePedHelmet {
    crate::__imports::native_give_ped_helmet(ped,
cannot_remove,
helmet_flag,
texture_index)
}
pub fn is_ped_diving(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedDiving {
    crate::__imports::native_is_ped_diving(ped)
}
pub fn set_ped_helmet(ped: u32,
can_wear_helmet: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedHelmet {
    crate::__imports::native_set_ped_helmet(ped,
can_wear_helmet)
}
pub fn set_relationship_group_affects_wanted_level(group: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetRelationshipGroupAffectsWantedLevel {
    crate::__imports::native_set_relationship_group_affects_wanted_level(group,
p1)
}
pub fn add_ped_decoration_from_hashes_in_corona(ped: u32,
collection: u32,
overlay: u32) -> altv_wasm_shared::natives_result::ResultOfAddPedDecorationFromHashesInCorona {
    crate::__imports::native_add_ped_decoration_from_hashes_in_corona(ped,
collection,
overlay)
}
pub fn set_facial_clipset(ped: u32,
anim_dict: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetFacialClipset {
    crate::__imports::native_set_facial_clipset(ped,
anim_dict)
}
pub fn set_ped_dies_in_water(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedDiesInWater {
    crate::__imports::native_set_ped_dies_in_water(ped,
toggle)
}
pub fn clear_ped_blood_damage_by_zone(ped: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfClearPedBloodDamageByZone {
    crate::__imports::native_clear_ped_blood_damage_by_zone(ped,
p1)
}
pub fn set_ped_increased_avoidance_radius(ped: u32) -> altv_wasm_shared::natives_result::ResultOfSetPedIncreasedAvoidanceRadius {
    crate::__imports::native_set_ped_increased_avoidance_radius(ped)
}
pub fn set_ped_blocks_pathing_when_dead(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedBlocksPathingWhenDead {
    crate::__imports::native_set_ped_blocks_pathing_when_dead(ped,
toggle)
}
pub fn is_ped_using_any_scenario(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedUsingAnyScenario {
    crate::__imports::native_is_ped_using_any_scenario(ped)
}
pub fn is_ped_in_group(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedInGroup {
    crate::__imports::native_is_ped_in_group(ped)
}
pub fn set_scripted_anim_seat_offset(ped: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetScriptedAnimSeatOffset {
    crate::__imports::native_set_scripted_anim_seat_offset(ped,
p1)
}
pub fn is_ped_hurt(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedHurt {
    crate::__imports::native_is_ped_hurt(ped)
}
pub fn suppress_ambient_ped_aggressive_cleanup_this_frame() -> altv_wasm_shared::natives_result::ResultOfSuppressAmbientPedAggressiveCleanupThisFrame {
    crate::__imports::native_suppress_ambient_ped_aggressive_cleanup_this_frame()
}
pub fn release_ped_preload_variation_data(ped: u32) -> altv_wasm_shared::natives_result::ResultOfReleasePedPreloadVariationData {
    crate::__imports::native_release_ped_preload_variation_data(ped)
}
pub fn set_ped_should_ignore_scenario_nav_checks(p0: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedShouldIgnoreScenarioNavChecks {
    crate::__imports::native_set_ped_should_ignore_scenario_nav_checks(p0,
p1)
}
pub fn add_armour_to_ped(ped: u32,
amount: i32) -> altv_wasm_shared::natives_result::ResultOfAddArmourToPed {
    crate::__imports::native_add_armour_to_ped(ped,
amount)
}
pub fn set_ped_dies_when_injured(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedDiesWhenInjured {
    crate::__imports::native_set_ped_dies_when_injured(ped,
toggle)
}
pub fn get_ped_as_group_leader(group_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedAsGroupLeader {
    crate::__imports::native_get_ped_as_group_leader(group_i_d)
}
pub fn is_ped_headtracking_ped(ped1: u32,
ped2: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedHeadtrackingPed {
    crate::__imports::native_is_ped_headtracking_ped(ped1,
ped2)
}
pub fn release_pedheadshot_img_upload(id: i32) -> altv_wasm_shared::natives_result::ResultOfReleasePedheadshotImgUpload {
    crate::__imports::native_release_pedheadshot_img_upload(id)
}
pub fn clear_relationship_between_groups(relationship: i32,
group1: u32,
group2: u32) -> altv_wasm_shared::natives_result::ResultOfClearRelationshipBetweenGroups {
    crate::__imports::native_clear_relationship_between_groups(relationship,
group1,
group2)
}
pub fn can_create_random_cops() -> altv_wasm_shared::natives_result::ResultOfCanCreateRandomCops {
    crate::__imports::native_can_create_random_cops()
}
pub fn get_ped_head_blend_num_heads(r#type: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedHeadBlendNumHeads {
    crate::__imports::native_get_ped_head_blend_num_heads(r#type)
}
pub fn add_ped_decoration_from_hashes(ped: u32,
collection: u32,
overlay: u32) -> altv_wasm_shared::natives_result::ResultOfAddPedDecorationFromHashes {
    crate::__imports::native_add_ped_decoration_from_hashes(ped,
collection,
overlay)
}
pub fn get_number_of_ped_prop_drawable_variations(ped: u32,
prop_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetNumberOfPedPropDrawableVariations {
    crate::__imports::native_get_number_of_ped_prop_drawable_variations(ped,
prop_id)
}
pub fn is_ped_in_any_plane(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedInAnyPlane {
    crate::__imports::native_is_ped_in_any_plane(ped)
}
pub fn disable_ped_heatscale_override(ped: u32) -> altv_wasm_shared::natives_result::ResultOfDisablePedHeatscaleOverride {
    crate::__imports::native_disable_ped_heatscale_override(ped)
}
pub fn is_ped_blush_tint_for_barber(color_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfIsPedBlushTintForBarber {
    crate::__imports::native_is_ped_blush_tint_for_barber(color_i_d)
}
pub fn get_vehicle_ped_is_using(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehiclePedIsUsing {
    crate::__imports::native_get_vehicle_ped_is_using(ped)
}
pub fn is_ped_in_cover(ped: u32,
except_use_weapon: bool) -> altv_wasm_shared::natives_result::ResultOfIsPedInCover {
    crate::__imports::native_is_ped_in_cover(ped,
except_use_weapon)
}
pub fn set_ped_shoot_rate(ped: u32,
shoot_rate: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedShootRate {
    crate::__imports::native_set_ped_shoot_rate(ped,
shoot_rate)
}
pub fn was_ped_knocked_out(ped: u32) -> altv_wasm_shared::natives_result::ResultOfWasPedKnockedOut {
    crate::__imports::native_was_ped_knocked_out(ped)
}
pub fn is_synchronized_scene_looped(scene_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfIsSynchronizedSceneLooped {
    crate::__imports::native_is_synchronized_scene_looped(scene_i_d)
}
pub fn is_ped_responding_to_event(ped: u32,
event: i32) -> altv_wasm_shared::natives_result::ResultOfIsPedRespondingToEvent {
    crate::__imports::native_is_ped_responding_to_event(ped,
event)
}
pub fn hide_ped_blood_damage_by_zone(ped: u32,
p1: i32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfHidePedBloodDamageByZone {
    crate::__imports::native_hide_ped_blood_damage_by_zone(ped,
p1,
p2)
}
pub fn create_synchronized_scene_at_map_object(x: f32,
y: f32,
z: f32,
radius: f32,
object: u32) -> altv_wasm_shared::natives_result::ResultOfCreateSynchronizedSceneAtMapObject {
    crate::__imports::native_create_synchronized_scene_at_map_object(x,
y,
z,
radius,
object)
}
pub fn set_ped_can_play_ambient_anims(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanPlayAmbientAnims {
    crate::__imports::native_set_ped_can_play_ambient_anims(ped,
toggle)
}
pub fn clear_cover_point_for_ped(ped: u32) -> altv_wasm_shared::natives_result::ResultOfClearCoverPointForPed {
    crate::__imports::native_clear_cover_point_for_ped(ped)
}
pub fn set_ped_can_be_targeted_when_injured(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanBeTargetedWhenInjured {
    crate::__imports::native_set_ped_can_be_targeted_when_injured(ped,
toggle)
}
pub fn reset_group_formation_default_spacing(group_handle: i32) -> altv_wasm_shared::natives_result::ResultOfResetGroupFormationDefaultSpacing {
    crate::__imports::native_reset_group_formation_default_spacing(group_handle)
}
pub fn set_ped_can_be_targetted(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanBeTargetted {
    crate::__imports::native_set_ped_can_be_targetted(ped,
toggle)
}
pub fn has_ped_head_blend_finished(ped: u32) -> altv_wasm_shared::natives_result::ResultOfHasPedHeadBlendFinished {
    crate::__imports::native_has_ped_head_blend_finished(ped)
}
pub fn get_ped_dies_in_water(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedDiesInWater {
    crate::__imports::native_get_ped_dies_in_water(ped)
}
pub fn clear_ped_env_dirt(ped: u32) -> altv_wasm_shared::natives_result::ResultOfClearPedEnvDirt {
    crate::__imports::native_clear_ped_env_dirt(ped)
}
pub fn set_ai_melee_weapon_damage_modifier(modifier: f32) -> altv_wasm_shared::natives_result::ResultOfSetAiMeleeWeaponDamageModifier {
    crate::__imports::native_set_ai_melee_weapon_damage_modifier(modifier)
}
pub fn set_ped_can_torso_vehicle_ik(ped: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanTorsoVehicleIk {
    crate::__imports::native_set_ped_can_torso_vehicle_ik(ped,
p1)
}
pub fn has_ped_preload_variation_data_finished(ped: u32) -> altv_wasm_shared::natives_result::ResultOfHasPedPreloadVariationDataFinished {
    crate::__imports::native_has_ped_preload_variation_data_finished(ped)
}
pub fn clone_ped_alt(ped: u32,
is_network: bool,
b_script_host_ped: bool,
copy_head_blend_flag: bool,
p4: bool) -> altv_wasm_shared::natives_result::ResultOfClonePedAlt {
    crate::__imports::native_clone_ped_alt(ped,
is_network,
b_script_host_ped,
copy_head_blend_flag,
p4)
}
pub fn set_ped_can_be_targetted_by_player(ped: u32,
player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanBeTargettedByPlayer {
    crate::__imports::native_set_ped_can_be_targetted_by_player(ped,
player,
toggle)
}
pub fn is_ped_on_vehicle(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedOnVehicle {
    crate::__imports::native_is_ped_on_vehicle(ped)
}
pub fn get_ped_drawable_variation(ped: u32,
component_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedDrawableVariation {
    crate::__imports::native_get_ped_drawable_variation(ped,
component_id)
}
pub fn is_any_hostile_ped_near_point(ped: u32,
x: f32,
y: f32,
z: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfIsAnyHostilePedNearPoint {
    crate::__imports::native_is_any_hostile_ped_near_point(ped,
x,
y,
z,
radius)
}
pub fn clear_ped_stored_hat_prop(ped: u32) -> altv_wasm_shared::natives_result::ResultOfClearPedStoredHatProp {
    crate::__imports::native_clear_ped_stored_hat_prop(ped)
}
pub fn get_ped_head_blend_first_index(r#type: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedHeadBlendFirstIndex {
    crate::__imports::native_get_ped_head_blend_first_index(r#type)
}
pub fn apply_damage_to_ped(ped: u32,
damage_amount: i32,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfApplyDamageToPed {
    crate::__imports::native_apply_damage_to_ped(ped,
damage_amount,
p2,
p3)
}
pub fn is_ped_in_high_cover(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedInHighCover {
    crate::__imports::native_is_ped_in_high_cover(ped)
}
pub fn get_player_ped_is_following(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerPedIsFollowing {
    crate::__imports::native_get_player_ped_is_following(ped)
}
pub fn set_synchronized_scene_origin(scene_i_d: i32,
x: f32,
y: f32,
z: f32,
roll: f32,
pitch: f32,
yaw: f32,
p7: bool) -> altv_wasm_shared::natives_result::ResultOfSetSynchronizedSceneOrigin {
    crate::__imports::native_set_synchronized_scene_origin(scene_i_d,
x,
y,
z,
roll,
pitch,
yaw,
p7)
}
pub fn set_ambient_peds_drop_money(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetAmbientPedsDropMoney {
    crate::__imports::native_set_ambient_peds_drop_money(p0)
}
pub fn set_ped_can_evasive_dive(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanEvasiveDive {
    crate::__imports::native_set_ped_can_evasive_dive(ped,
toggle)
}
pub fn set_ped_max_time_underwater(ped: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedMaxTimeUnderwater {
    crate::__imports::native_set_ped_max_time_underwater(ped,
value)
}
pub fn set_ped_can_arm_ik(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanArmIk {
    crate::__imports::native_set_ped_can_arm_ik(ped,
toggle)
}
pub fn set_ped_alternate_walk_anim(ped: u32,
anim_dict: Option<&String>,
anim_name: Option<&String>,
p3: f32,
p4: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedAlternateWalkAnim {
    crate::__imports::native_set_ped_alternate_walk_anim(ped,
anim_dict,
anim_name,
p3,
p4)
}
pub fn can_ped_see_hated_ped(ped1: u32,
ped2: u32) -> altv_wasm_shared::natives_result::ResultOfCanPedSeeHatedPed {
    crate::__imports::native_can_ped_see_hated_ped(ped1,
ped2)
}
pub fn detach_synchronized_scene(scene_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfDetachSynchronizedScene {
    crate::__imports::native_detach_synchronized_scene(scene_i_d)
}
pub fn is_ped_male(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedMale {
    crate::__imports::native_is_ped_male(ped)
}
pub fn is_ped_in_any_taxi(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedInAnyTaxi {
    crate::__imports::native_is_ped_in_any_taxi(ped)
}
pub fn is_scripted_scenario_ped_using_conditional_anim(ped: u32,
anim_dict: Option<&String>,
anim: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfIsScriptedScenarioPedUsingConditionalAnim {
    crate::__imports::native_is_scripted_scenario_ped_using_conditional_anim(ped,
anim_dict,
anim)
}
pub fn get_seat_ped_is_trying_to_enter(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetSeatPedIsTryingToEnter {
    crate::__imports::native_get_seat_ped_is_trying_to_enter(ped)
}
pub fn is_ped_in_any_train(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedInAnyTrain {
    crate::__imports::native_is_ped_in_any_train(ped)
}
pub fn knock_off_ped_prop(ped: u32,
p1: bool,
p2: bool,
p3: bool,
p4: bool) -> altv_wasm_shared::natives_result::ResultOfKnockOffPedProp {
    crate::__imports::native_knock_off_ped_prop(ped,
p1,
p2,
p3,
p4)
}
pub fn set_ped_visual_field_max_angle(ped: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedVisualFieldMaxAngle {
    crate::__imports::native_set_ped_visual_field_max_angle(ped,
value)
}
pub fn is_pedheadshot_ready(id: i32) -> altv_wasm_shared::natives_result::ResultOfIsPedheadshotReady {
    crate::__imports::native_is_pedheadshot_ready(id)
}
pub fn set_ped_flee_attributes(ped: u32,
attribute_flags: i32,
enable: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedFleeAttributes {
    crate::__imports::native_set_ped_flee_attributes(ped,
attribute_flags,
enable)
}
pub fn set_disable_high_fall_death(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDisableHighFallDeath {
    crate::__imports::native_set_disable_high_fall_death(ped,
toggle)
}
pub fn set_ped_micro_morph(ped: u32,
index: i32,
scale: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedMicroMorph {
    crate::__imports::native_set_ped_micro_morph(ped,
index,
scale)
}
pub fn resurrect_ped(ped: u32) -> altv_wasm_shared::natives_result::ResultOfResurrectPed {
    crate::__imports::native_resurrect_ped(ped)
}
pub fn get_ped_decorations_state(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedDecorationsState {
    crate::__imports::native_get_ped_decorations_state(ped)
}
pub fn update_ped_head_blend_data(ped: u32,
shape_mix: f32,
skin_mix: f32,
third_mix: f32) -> altv_wasm_shared::natives_result::ResultOfUpdatePedHeadBlendData {
    crate::__imports::native_update_ped_head_blend_data(ped,
shape_mix,
skin_mix,
third_mix)
}
pub fn clear_facial_idle_anim_override(ped: u32) -> altv_wasm_shared::natives_result::ResultOfClearFacialIdleAnimOverride {
    crate::__imports::native_clear_facial_idle_anim_override(ped)
}
pub fn disable_ped_injured_on_ground_behaviour(ped: u32) -> altv_wasm_shared::natives_result::ResultOfDisablePedInjuredOnGroundBehaviour {
    crate::__imports::native_disable_ped_injured_on_ground_behaviour(ped)
}
pub fn set_synchronized_scene_phase(scene_i_d: i32,
phase: f32) -> altv_wasm_shared::natives_result::ResultOfSetSynchronizedScenePhase {
    crate::__imports::native_set_synchronized_scene_phase(scene_i_d,
phase)
}
pub fn have_all_streaming_requests_completed(ped: u32) -> altv_wasm_shared::natives_result::ResultOfHaveAllStreamingRequestsCompleted {
    crate::__imports::native_have_all_streaming_requests_completed(ped)
}
pub fn set_ped_can_leg_ik(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanLegIk {
    crate::__imports::native_set_ped_can_leg_ik(ped,
toggle)
}
pub fn remove_ped_defensive_area(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfRemovePedDefensiveArea {
    crate::__imports::native_remove_ped_defensive_area(ped,
toggle)
}
pub fn request_ped_use_small_bbox_visibility_tracking(ped: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfRequestPedUseSmallBboxVisibilityTracking {
    crate::__imports::native_request_ped_use_small_bbox_visibility_tracking(ped,
p1)
}
pub fn get_head_blend_eye_color(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetHeadBlendEyeColor {
    crate::__imports::native_get_head_blend_eye_color(ped)
}
pub fn set_movement_mode_override(ped: u32,
name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetMovementModeOverride {
    crate::__imports::native_set_movement_mode_override(ped,
name)
}
pub fn has_ped_preload_prop_data_finished(ped: u32) -> altv_wasm_shared::natives_result::ResultOfHasPedPreloadPropDataFinished {
    crate::__imports::native_has_ped_preload_prop_data_finished(ped)
}
pub fn set_ped_cloth_pin_frames(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedClothPinFrames {
    crate::__imports::native_set_ped_cloth_pin_frames(p0,
p1)
}
pub fn set_ped_visual_field_max_elevation_angle(ped: u32,
angle: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedVisualFieldMaxElevationAngle {
    crate::__imports::native_set_ped_visual_field_max_elevation_angle(ped,
angle)
}
pub fn is_ped_in_model(ped: u32,
model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedInModel {
    crate::__imports::native_is_ped_in_model(ped,
model_hash)
}
pub fn get_ped_parachute_state(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedParachuteState {
    crate::__imports::native_get_ped_parachute_state(ped)
}
pub fn set_ped_visual_field_min_elevation_angle(ped: u32,
angle: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedVisualFieldMinElevationAngle {
    crate::__imports::native_set_ped_visual_field_min_elevation_angle(ped,
angle)
}
pub fn set_scenario_ped_density_multiplier_this_frame(p0: f32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetScenarioPedDensityMultiplierThisFrame {
    crate::__imports::native_set_scenario_ped_density_multiplier_this_frame(p0,
p1)
}
pub fn set_ped_can_be_knocked_off_vehicle(ped: u32,
state: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedCanBeKnockedOffVehicle {
    crate::__imports::native_set_ped_can_be_knocked_off_vehicle(ped,
state)
}
pub fn set_ped_accuracy(ped: u32,
accuracy: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedAccuracy {
    crate::__imports::native_set_ped_accuracy(ped,
accuracy)
}
pub fn get_ped_stealth_movement(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedStealthMovement {
    crate::__imports::native_get_ped_stealth_movement(ped)
}
pub fn does_group_exist(group_id: i32) -> altv_wasm_shared::natives_result::ResultOfDoesGroupExist {
    crate::__imports::native_does_group_exist(group_id)
}
pub fn request_ped_visibility_tracking(ped: u32) -> altv_wasm_shared::natives_result::ResultOfRequestPedVisibilityTracking {
    crate::__imports::native_request_ped_visibility_tracking(ped)
}
pub fn get_ped_relationship_group_hash(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedRelationshipGroupHash {
    crate::__imports::native_get_ped_relationship_group_hash(ped)
}
pub fn is_ped_in_parachute_free_fall(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedInParachuteFreeFall {
    crate::__imports::native_is_ped_in_parachute_free_fall(ped)
}
pub fn create_ped_inside_vehicle(vehicle: u32,
ped_type: i32,
model_hash: u32,
seat: i32,
is_network: bool,
b_script_host_ped: bool) -> altv_wasm_shared::natives_result::ResultOfCreatePedInsideVehicle {
    crate::__imports::native_create_ped_inside_vehicle(vehicle,
ped_type,
model_hash,
seat,
is_network,
b_script_host_ped)
}
pub fn is_ped_shooting_in_area(ped: u32,
x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
p7: bool,
p8: bool) -> altv_wasm_shared::natives_result::ResultOfIsPedShootingInArea {
    crate::__imports::native_is_ped_shooting_in_area(ped,
x1,
y1,
z1,
x2,
y2,
z2,
p7,
p8)
}
pub fn get_ped_config_flag(ped: u32,
flag_id: i32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfGetPedConfigFlag {
    crate::__imports::native_get_ped_config_flag(ped,
flag_id,
p2)
}
pub fn was_ped_killed_by_takedown(ped: u32) -> altv_wasm_shared::natives_result::ResultOfWasPedKilledByTakedown {
    crate::__imports::native_was_ped_killed_by_takedown(ped)
}
pub fn is_synchronized_scene_hold_last_frame(scene_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfIsSynchronizedSceneHoldLastFrame {
    crate::__imports::native_is_synchronized_scene_hold_last_frame(scene_i_d)
}
pub fn set_ped_generates_dead_body_events(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedGeneratesDeadBodyEvents {
    crate::__imports::native_set_ped_generates_dead_body_events(ped,
toggle)
}
pub fn clear_ped_fall_upper_body_clipset_override(ped: u32) -> altv_wasm_shared::natives_result::ResultOfClearPedFallUpperBodyClipsetOverride {
    crate::__imports::native_clear_ped_fall_upper_body_clipset_override(ped)
}
pub fn is_ped_headtracking_entity(ped: u32,
entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedHeadtrackingEntity {
    crate::__imports::native_is_ped_headtracking_entity(ped,
entity)
}
pub fn get_vehicle_ped_is_trying_to_enter(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehiclePedIsTryingToEnter {
    crate::__imports::native_get_vehicle_ped_is_trying_to_enter(ped)
}
pub fn apply_ped_blood_damage_by_zone(ped: u32,
p1: i32,
p2: f32,
p3: f32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfApplyPedBloodDamageByZone {
    crate::__imports::native_apply_ped_blood_damage_by_zone(ped,
p1,
p2,
p3,
p4)
}
pub fn is_ped_shader_ready(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedShaderReady {
    crate::__imports::native_is_ped_shader_ready(ped)
}
pub fn set_ped_can_play_in_car_idles(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanPlayInCarIdles {
    crate::__imports::native_set_ped_can_play_in_car_idles(ped,
toggle)
}
pub fn is_ped_sitting_in_any_vehicle(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedSittingInAnyVehicle {
    crate::__imports::native_is_ped_sitting_in_any_vehicle(ped)
}
pub fn set_ped_cloth_package_index(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedClothPackageIndex {
    crate::__imports::native_set_ped_cloth_package_index(p0,
p1)
}
pub fn set_ped_phone_palette_idx(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedPhonePaletteIdx {
    crate::__imports::native_set_ped_phone_palette_idx(p0,
p1)
}
pub fn apply_ped_blood(ped: u32,
bone_index: i32,
x_rot: f32,
y_rot: f32,
z_rot: f32,
wound_type: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfApplyPedBlood {
    crate::__imports::native_apply_ped_blood(ped,
bone_index,
x_rot,
y_rot,
z_rot,
wound_type)
}
pub fn set_ped_preferred_cover_set(ped: u32,
item_set: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedPreferredCoverSet {
    crate::__imports::native_set_ped_preferred_cover_set(ped,
item_set)
}
pub fn is_ped_in_cover_facing_left(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedInCoverFacingLeft {
    crate::__imports::native_is_ped_in_cover_facing_left(ped)
}
pub fn is_ped_injured(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedInjured {
    crate::__imports::native_is_ped_injured(ped)
}
pub fn has_ped_received_event(ped: u32,
event_id: i32) -> altv_wasm_shared::natives_result::ResultOfHasPedReceivedEvent {
    crate::__imports::native_has_ped_received_event(ped,
event_id)
}
pub fn is_ped_being_stealth_killed(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedBeingStealthKilled {
    crate::__imports::native_is_ped_being_stealth_killed(ped)
}
pub fn set_ped_coords_no_gang(ped: u32,
pos_x: f32,
pos_y: f32,
pos_z: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedCoordsNoGang {
    crate::__imports::native_set_ped_coords_no_gang(ped,
pos_x,
pos_y,
pos_z)
}
pub fn get_random_ped_at_coord(x: f32,
y: f32,
z: f32,
x_radius: f32,
y_radius: f32,
z_radius: f32,
ped_type: i32) -> altv_wasm_shared::natives_result::ResultOfGetRandomPedAtCoord {
    crate::__imports::native_get_random_ped_at_coord(x,
y,
z,
x_radius,
y_radius,
z_radius,
ped_type)
}
pub fn has_pedheadshot_img_upload_failed() -> altv_wasm_shared::natives_result::ResultOfHasPedheadshotImgUploadFailed {
    crate::__imports::native_has_pedheadshot_img_upload_failed()
}
pub fn set_ambient_law_ped_accuracy_modifier(multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetAmbientLawPedAccuracyModifier {
    crate::__imports::native_set_ambient_law_ped_accuracy_modifier(multiplier)
}
pub fn get_mp_light_enabled(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetMpLightEnabled {
    crate::__imports::native_get_mp_light_enabled(ped)
}
pub fn clear_ped_alternate_walk_anim(ped: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfClearPedAlternateWalkAnim {
    crate::__imports::native_clear_ped_alternate_walk_anim(ped,
p1)
}
pub fn set_ped_stealth_movement(ped: u32,
p1: bool,
action: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetPedStealthMovement {
    crate::__imports::native_set_ped_stealth_movement(ped,
p1,
action)
}
pub fn get_ped_prop_index(ped: u32,
component_id: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedPropIndex {
    crate::__imports::native_get_ped_prop_index(ped,
component_id,
p2)
}
pub fn does_scenario_blocking_area_exists(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32) -> altv_wasm_shared::natives_result::ResultOfDoesScenarioBlockingAreaExists {
    crate::__imports::native_does_scenario_blocking_area_exists(x1,
y1,
z1,
x2,
y2,
z2)
}
pub fn set_create_random_cops_not_on_scenarios(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetCreateRandomCopsNotOnScenarios {
    crate::__imports::native_set_create_random_cops_not_on_scenarios(toggle)
}
pub fn get_ped_parachute_landing_type(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedParachuteLandingType {
    crate::__imports::native_get_ped_parachute_landing_type(ped)
}
pub fn create_synchronized_scene(x: f32,
y: f32,
z: f32,
roll: f32,
pitch: f32,
yaw: f32,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfCreateSynchronizedScene {
    crate::__imports::native_create_synchronized_scene(x,
y,
z,
roll,
pitch,
yaw,
p6)
}
pub fn create_parachute_bag_object(ped: u32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfCreateParachuteBagObject {
    crate::__imports::native_create_parachute_bag_object(ped,
p1,
p2)
}
pub fn revive_injured_ped(ped: u32) -> altv_wasm_shared::natives_result::ResultOfReviveInjuredPed {
    crate::__imports::native_revive_injured_ped(ped)
}
pub fn get_group_size(group_i_d: i32,
p1: shared::MemoryBufferId,
size_in_members: i32) -> altv_wasm_shared::natives_result::ResultOfGetGroupSize {
    crate::__imports::native_get_group_size(group_i_d,
p1,
size_in_members)
}
pub fn remove_group(group_id: i32) -> altv_wasm_shared::natives_result::ResultOfRemoveGroup {
    crate::__imports::native_remove_group(group_id)
}
pub fn clear_ped_last_damage_bone(ped: u32) -> altv_wasm_shared::natives_result::ResultOfClearPedLastDamageBone {
    crate::__imports::native_clear_ped_last_damage_bone(ped)
}
pub fn get_number_of_ped_texture_variations(ped: u32,
component_id: i32,
drawable_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetNumberOfPedTextureVariations {
    crate::__imports::native_get_number_of_ped_texture_variations(ped,
component_id,
drawable_id)
}
pub fn clear_ped_blood_damage(ped: u32) -> altv_wasm_shared::natives_result::ResultOfClearPedBloodDamage {
    crate::__imports::native_clear_ped_blood_damage(ped)
}
pub fn create_group(unused: i32) -> altv_wasm_shared::natives_result::ResultOfCreateGroup {
    crate::__imports::native_create_group(unused)
}
pub fn set_ped_alternate_movement_anim(ped: u32,
stance: i32,
anim_dictionary: Option<&String>,
animation_name: Option<&String>,
p4: f32,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedAlternateMovementAnim {
    crate::__imports::native_set_ped_alternate_movement_anim(ped,
stance,
anim_dictionary,
animation_name,
p4,
p5)
}
pub fn is_ped_in_flying_vehicle(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedInFlyingVehicle {
    crate::__imports::native_is_ped_in_flying_vehicle(ped)
}
pub fn is_tracked_ped_visible(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsTrackedPedVisible {
    crate::__imports::native_is_tracked_ped_visible(ped)
}
pub fn remove_stealth_mode_asset(asset: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRemoveStealthModeAsset {
    crate::__imports::native_remove_stealth_mode_asset(asset)
}
pub fn register_hated_targets_around_ped(ped: u32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfRegisterHatedTargetsAroundPed {
    crate::__imports::native_register_hated_targets_around_ped(ped,
radius)
}
pub fn set_ped_prop_index(ped: u32,
component_id: i32,
drawable_id: i32,
texture_id: i32,
attach: bool,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedPropIndex {
    crate::__imports::native_set_ped_prop_index(ped,
component_id,
drawable_id,
texture_id,
attach,
p5)
}
pub fn get_ped_source_of_death(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedSourceOfDeath {
    crate::__imports::native_get_ped_source_of_death(ped)
}
pub fn set_ped_head_blend_data(ped: u32,
shape_first_i_d: i32,
shape_second_i_d: i32,
shape_third_i_d: i32,
skin_first_i_d: i32,
skin_second_i_d: i32,
skin_third_i_d: i32,
shape_mix: f32,
skin_mix: f32,
third_mix: f32,
is_parent: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedHeadBlendData {
    crate::__imports::native_set_ped_head_blend_data(ped,
shape_first_i_d,
shape_second_i_d,
shape_third_i_d,
skin_first_i_d,
skin_second_i_d,
skin_third_i_d,
shape_mix,
skin_mix,
third_mix,
is_parent)
}
pub fn is_ped_on_any_bike(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedOnAnyBike {
    crate::__imports::native_is_ped_on_any_bike(ped)
}
pub fn get_ped_armour(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedArmour {
    crate::__imports::native_get_ped_armour(ped)
}
pub fn set_ped_plays_head_on_horn_anim_when_dies_in_vehicle(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedPlaysHeadOnHornAnimWhenDiesInVehicle {
    crate::__imports::native_set_ped_plays_head_on_horn_anim_when_dies_in_vehicle(ped,
toggle)
}
pub fn set_ped_vehicle_forced_seat_usage(ped: u32,
vehicle: u32,
seat_index: i32,
flags: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedVehicleForcedSeatUsage {
    crate::__imports::native_set_ped_vehicle_forced_seat_usage(ped,
vehicle,
seat_index,
flags,
p4)
}
pub fn register_pedheadshot_transparent(ped: u32) -> altv_wasm_shared::natives_result::ResultOfRegisterPedheadshotTransparent {
    crate::__imports::native_register_pedheadshot_transparent(ped)
}
pub fn set_ped_density_multiplier_this_frame(multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedDensityMultiplierThisFrame {
    crate::__imports::native_set_ped_density_multiplier_this_frame(multiplier)
}
pub fn delete_ped(ped: u32) -> altv_wasm_shared::natives_result::ResultOfDeletePed {
    crate::__imports::native_delete_ped(ped)
}
pub fn set_ped_shoots_at_coord(ped: u32,
x: f32,
y: f32,
z: f32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedShootsAtCoord {
    crate::__imports::native_set_ped_shoots_at_coord(ped,
x,
y,
z,
toggle)
}
pub fn unregister_pedheadshot(id: i32) -> altv_wasm_shared::natives_result::ResultOfUnregisterPedheadshot {
    crate::__imports::native_unregister_pedheadshot(id)
}
pub fn set_ped_keep_task(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedKeepTask {
    crate::__imports::native_set_ped_keep_task(ped,
toggle)
}
pub fn set_ped_enable_weapon_blocking(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedEnableWeaponBlocking {
    crate::__imports::native_set_ped_enable_weapon_blocking(ped,
toggle)
}
pub fn reset_ped_weapon_movement_clipset(ped: u32) -> altv_wasm_shared::natives_result::ResultOfResetPedWeaponMovementClipset {
    crate::__imports::native_reset_ped_weapon_movement_clipset(ped)
}
pub fn set_ped_name_debug(ped: u32,
name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetPedNameDebug {
    crate::__imports::native_set_ped_name_debug(ped,
name)
}
pub fn set_blocking_of_non_temporary_events_for_ambient_peds_this_frame(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetBlockingOfNonTemporaryEventsForAmbientPedsThisFrame {
    crate::__imports::native_set_blocking_of_non_temporary_events_for_ambient_peds_this_frame(p0)
}
pub fn is_ped_in_any_vehicle(ped: u32,
at_get_in: bool) -> altv_wasm_shared::natives_result::ResultOfIsPedInAnyVehicle {
    crate::__imports::native_is_ped_in_any_vehicle(ped,
at_get_in)
}
pub fn is_ped_being_jacked(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedBeingJacked {
    crate::__imports::native_is_ped_being_jacked(ped)
}
pub fn toggle_scenario_ped_cower_in_place(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfToggleScenarioPedCowerInPlace {
    crate::__imports::native_toggle_scenario_ped_cower_in_place(ped,
toggle)
}
pub fn get_vehicle_ped_is_in(ped: u32,
include_entering: bool) -> altv_wasm_shared::natives_result::ResultOfGetVehiclePedIsIn {
    crate::__imports::native_get_vehicle_ped_is_in(ped,
include_entering)
}
pub fn set_ped_firing_pattern(ped: u32,
pattern_hash: u32) -> altv_wasm_shared::natives_result::ResultOfSetPedFiringPattern {
    crate::__imports::native_set_ped_firing_pattern(ped,
pattern_hash)
}
pub fn set_ped_coords_keep_vehicle(ped: u32,
pos_x: f32,
pos_y: f32,
pos_z: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedCoordsKeepVehicle {
    crate::__imports::native_set_ped_coords_keep_vehicle(ped,
pos_x,
pos_y,
pos_z)
}
pub fn get_peds_jacker(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedsJacker {
    crate::__imports::native_get_peds_jacker(ped)
}
pub fn create_random_ped_as_driver(vehicle: u32,
return_handle: bool) -> altv_wasm_shared::natives_result::ResultOfCreateRandomPedAsDriver {
    crate::__imports::native_create_random_ped_as_driver(vehicle,
return_handle)
}
pub fn is_ped_group_member(ped: u32,
group_id: i32) -> altv_wasm_shared::natives_result::ResultOfIsPedGroupMember {
    crate::__imports::native_is_ped_group_member(ped,
group_id)
}
pub fn get_ped_enveff_scale(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedEnveffScale {
    crate::__imports::native_get_ped_enveff_scale(ped)
}
pub fn can_ped_shuffle_to_or_from_turret_seat(ped: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfCanPedShuffleToOrFromTurretSeat {
    crate::__imports::native_can_ped_shuffle_to_or_from_turret_seat(ped,
p1)
}
pub fn clear_ped_wetness(ped: u32) -> altv_wasm_shared::natives_result::ResultOfClearPedWetness {
    crate::__imports::native_clear_ped_wetness(ped)
}
pub fn set_ped_visual_field_peripheral_range(ped: u32,
range: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedVisualFieldPeripheralRange {
    crate::__imports::native_set_ped_visual_field_peripheral_range(ped,
range)
}
pub fn set_ped_sphere_defensive_area(ped: u32,
x: f32,
y: f32,
z: f32,
radius: f32,
p5: bool,
p6: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedSphereDefensiveArea {
    crate::__imports::native_set_ped_sphere_defensive_area(ped,
x,
y,
z,
radius,
p5,
p6)
}
pub fn get_ped_helmet_stored_hat_tex_index(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedHelmetStoredHatTexIndex {
    crate::__imports::native_get_ped_helmet_stored_hat_tex_index(ped)
}
pub fn set_ped_motion_in_cover_clipset_override(ped: u32,
p1: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetPedMotionInCoverClipsetOverride {
    crate::__imports::native_set_ped_motion_in_cover_clipset_override(ped,
p1)
}
pub fn is_ped_swimming(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedSwimming {
    crate::__imports::native_is_ped_swimming(ped)
}
pub fn get_mp_outfit_data_from_metadata(p0: shared::MemoryBufferId,
p1: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetMpOutfitDataFromMetadata {
    crate::__imports::native_get_mp_outfit_data_from_metadata(p0,
p1)
}
pub fn get_relationship_between_groups(group1: u32,
group2: u32) -> altv_wasm_shared::natives_result::ResultOfGetRelationshipBetweenGroups {
    crate::__imports::native_get_relationship_between_groups(group1,
group2)
}
pub fn set_ped_move_anims_blend_out(ped: u32) -> altv_wasm_shared::natives_result::ResultOfSetPedMoveAnimsBlendOut {
    crate::__imports::native_set_ped_move_anims_blend_out(ped)
}
pub fn set_ped_as_group_member(ped: u32,
group_id: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedAsGroupMember {
    crate::__imports::native_set_ped_as_group_member(ped,
group_id)
}
pub fn is_ped_going_into_cover(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedGoingIntoCover {
    crate::__imports::native_is_ped_going_into_cover(ped)
}
pub fn set_ped_combat_attributes(ped: u32,
attribute_id: i32,
enabled: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCombatAttributes {
    crate::__imports::native_set_ped_combat_attributes(ped,
attribute_id,
enabled)
}
pub fn set_blocking_of_non_temporary_events(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetBlockingOfNonTemporaryEvents {
    crate::__imports::native_set_blocking_of_non_temporary_events(ped,
toggle)
}
pub fn reset_ped_ragdoll_timer(ped: u32) -> altv_wasm_shared::natives_result::ResultOfResetPedRagdollTimer {
    crate::__imports::native_reset_ped_ragdoll_timer(ped)
}
pub fn get_ped_decoration_zone_from_hashes(collection: u32,
overlay: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedDecorationZoneFromHashes {
    crate::__imports::native_get_ped_decoration_zone_from_hashes(collection,
overlay)
}
pub fn set_ped_gravity(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedGravity {
    crate::__imports::native_set_ped_gravity(ped,
toggle)
}
pub fn is_pedheadshot_valid(id: i32) -> altv_wasm_shared::natives_result::ResultOfIsPedheadshotValid {
    crate::__imports::native_is_pedheadshot_valid(id)
}
pub fn is_any_ped_shooting_in_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
p6: bool,
p7: bool) -> altv_wasm_shared::natives_result::ResultOfIsAnyPedShootingInArea {
    crate::__imports::native_is_any_ped_shooting_in_area(x1,
y1,
z1,
x2,
y2,
z2,
p6,
p7)
}
pub fn disable_head_blend_palette_color(ped: u32) -> altv_wasm_shared::natives_result::ResultOfDisableHeadBlendPaletteColor {
    crate::__imports::native_disable_head_blend_palette_color(ped)
}
pub fn set_ped_should_play_normal_scenario_exit(ped: u32) -> altv_wasm_shared::natives_result::ResultOfSetPedShouldPlayNormalScenarioExit {
    crate::__imports::native_set_ped_should_play_normal_scenario_exit(ped)
}
pub fn is_ped_in_vehicle(ped: u32,
vehicle: u32,
at_get_in: bool) -> altv_wasm_shared::natives_result::ResultOfIsPedInVehicle {
    crate::__imports::native_is_ped_in_vehicle(ped,
vehicle,
at_get_in)
}
pub fn is_mobile_phone_to_ped_ear(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsMobilePhoneToPedEar {
    crate::__imports::native_is_mobile_phone_to_ped_ear(ped)
}
pub fn set_ped_no_time_delay_before_shot(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedNoTimeDelayBeforeShot {
    crate::__imports::native_set_ped_no_time_delay_before_shot(p0)
}
pub fn set_ped_cower_hash(ped: u32,
p1: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetPedCowerHash {
    crate::__imports::native_set_ped_cower_hash(ped,
p1)
}
pub fn spawnpoints_is_search_complete() -> altv_wasm_shared::natives_result::ResultOfSpawnpointsIsSearchComplete {
    crate::__imports::native_spawnpoints_is_search_complete()
}
pub fn get_ped_head_overlay(ped: u32,
overlay_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedHeadOverlay {
    crate::__imports::native_get_ped_head_overlay(ped,
overlay_i_d)
}
pub fn spawnpoints_get_num_search_results() -> altv_wasm_shared::natives_result::ResultOfSpawnpointsGetNumSearchResults {
    crate::__imports::native_spawnpoints_get_num_search_results()
}
pub fn set_ped_cloth_prone(p0: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedClothProne {
    crate::__imports::native_set_ped_cloth_prone(p0,
p1)
}
pub fn get_number_of_ped_prop_texture_variations(ped: u32,
prop_id: i32,
drawable_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetNumberOfPedPropTextureVariations {
    crate::__imports::native_get_number_of_ped_prop_texture_variations(ped,
prop_id,
drawable_id)
}
pub fn set_driver_aggressiveness(driver: u32,
aggressiveness: f32) -> altv_wasm_shared::natives_result::ResultOfSetDriverAggressiveness {
    crate::__imports::native_set_driver_aggressiveness(driver,
aggressiveness)
}
pub fn remove_ped_helmet(ped: u32,
instantly: bool) -> altv_wasm_shared::natives_result::ResultOfRemovePedHelmet {
    crate::__imports::native_remove_ped_helmet(ped,
instantly)
}
pub fn is_ped_sitting_in_vehicle(ped: u32,
vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedSittingInVehicle {
    crate::__imports::native_is_ped_sitting_in_vehicle(ped,
vehicle)
}
pub fn set_ped_is_avoided_by_others(p0: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedIsAvoidedByOthers {
    crate::__imports::native_set_ped_is_avoided_by_others(p0,
p1)
}
pub fn set_ped_money(ped: u32,
amount: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedMoney {
    crate::__imports::native_set_ped_money(ped,
amount)
}
pub fn set_ped_desired_heading(ped: u32,
heading: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedDesiredHeading {
    crate::__imports::native_set_ped_desired_heading(ped,
heading)
}
pub fn reset_ped_movement_clipset(ped: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfResetPedMovementClipset {
    crate::__imports::native_reset_ped_movement_clipset(ped,
p1)
}
pub fn get_default_secondary_tint_for_barber(color_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfGetDefaultSecondaryTintForBarber {
    crate::__imports::native_get_default_secondary_tint_for_barber(color_i_d)
}
pub fn set_ped_pinned_down(ped: u32,
pinned: bool,
i: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedPinnedDown {
    crate::__imports::native_set_ped_pinned_down(ped,
pinned,
i)
}
pub fn set_ped_wetness(ped: u32,
wet_level: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedWetness {
    crate::__imports::native_set_ped_wetness(ped,
wet_level)
}
pub fn remove_ped_elegantly(ped: u32) -> altv_wasm_shared::natives_result::ResultOfRemovePedElegantly {
    crate::__imports::native_remove_ped_elegantly(ped)
}
pub fn tell_group_peds_in_area_to_attack(ped: u32,
p1: i32,
p2: f32,
hash: u32,
p4: i32,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfTellGroupPedsInAreaToAttack {
    crate::__imports::native_tell_group_peds_in_area_to_attack(ped,
p1,
p2,
hash,
p4,
p5)
}
pub fn set_ped_relationship_group_default_hash(ped: u32,
hash: u32) -> altv_wasm_shared::natives_result::ResultOfSetPedRelationshipGroupDefaultHash {
    crate::__imports::native_set_ped_relationship_group_default_hash(ped,
hash)
}
pub fn set_ped_to_ragdoll(ped: u32,
time1: i32,
time2: i32,
ragdoll_type: i32,
p4: bool,
p5: bool,
p6: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedToRagdoll {
    crate::__imports::native_set_ped_to_ragdoll(ped,
time1,
time2,
ragdoll_type,
p4,
p5,
p6)
}
pub fn set_ped_movement_clipset(ped: u32,
clip_set: Option<&String>,
transition_speed: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedMovementClipset {
    crate::__imports::native_set_ped_movement_clipset(ped,
clip_set,
transition_speed)
}
pub fn get_ped_reset_flag(ped: u32,
flag_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedResetFlag {
    crate::__imports::native_get_ped_reset_flag(ped,
flag_id)
}
pub fn set_ped_upper_body_damage_only(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedUpperBodyDamageOnly {
    crate::__imports::native_set_ped_upper_body_damage_only(ped,
toggle)
}
pub fn drop_ambient_prop(ped: u32) -> altv_wasm_shared::natives_result::ResultOfDropAmbientProp {
    crate::__imports::native_drop_ambient_prop(ped)
}
pub fn set_ped_can_ragdoll(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanRagdoll {
    crate::__imports::native_set_ped_can_ragdoll(ped,
toggle)
}
pub fn give_ped_nm_message(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGivePedNmMessage {
    crate::__imports::native_give_ped_nm_message(ped)
}
pub fn set_driver_ability(driver: u32,
ability: f32) -> altv_wasm_shared::natives_result::ResultOfSetDriverAbility {
    crate::__imports::native_set_driver_ability(driver,
ability)
}
pub fn set_ped_can_be_knocked_off_bike(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedCanBeKnockedOffBike {
    crate::__imports::native_set_ped_can_be_knocked_off_bike(p0,
p1)
}
pub fn spawnpoints_start_search_in_angled_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
width: f32,
interior_flags: i32,
scale: f32,
duration: i32) -> altv_wasm_shared::natives_result::ResultOfSpawnpointsStartSearchInAngledArea {
    crate::__imports::native_spawnpoints_start_search_in_angled_area(x1,
y1,
z1,
x2,
y2,
z2,
width,
interior_flags,
scale,
duration)
}
pub fn is_ped_doing_driveby(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedDoingDriveby {
    crate::__imports::native_is_ped_doing_driveby(ped)
}
pub fn set_ped_health_pending_last_damage_event_override_flag(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedHealthPendingLastDamageEventOverrideFlag {
    crate::__imports::native_set_ped_health_pending_last_damage_event_override_flag(toggle)
}
pub fn set_can_attack_friendly(ped: u32,
toggle: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetCanAttackFriendly {
    crate::__imports::native_set_can_attack_friendly(ped,
toggle,
p2)
}
pub fn stop_any_ped_model_being_suppressed() -> altv_wasm_shared::natives_result::ResultOfStopAnyPedModelBeingSuppressed {
    crate::__imports::native_stop_any_ped_model_being_suppressed()
}
pub fn create_random_ped(pos_x: f32,
pos_y: f32,
pos_z: f32) -> altv_wasm_shared::natives_result::ResultOfCreateRandomPed {
    crate::__imports::native_create_random_ped(pos_x,
pos_y,
pos_z)
}
pub fn clear_ped_scuba_gear_variation(ped: u32) -> altv_wasm_shared::natives_result::ResultOfClearPedScubaGearVariation {
    crate::__imports::native_clear_ped_scuba_gear_variation(ped)
}
pub fn set_ped_wetness_enabled_this_frame(ped: u32) -> altv_wasm_shared::natives_result::ResultOfSetPedWetnessEnabledThisFrame {
    crate::__imports::native_set_ped_wetness_enabled_this_frame(ped)
}
pub fn remove_relationship_group(group_hash: u32) -> altv_wasm_shared::natives_result::ResultOfRemoveRelationshipGroup {
    crate::__imports::native_remove_relationship_group(group_hash)
}
pub fn set_synchronized_scene_rate(scene_i_d: i32,
rate: f32) -> altv_wasm_shared::natives_result::ResultOfSetSynchronizedSceneRate {
    crate::__imports::native_set_synchronized_scene_rate(scene_i_d,
rate)
}
pub fn spawnpoints_get_search_result_flags(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSpawnpointsGetSearchResultFlags {
    crate::__imports::native_spawnpoints_get_search_result_flags(p0,
p1)
}
pub fn is_ped_sheltered(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedSheltered {
    crate::__imports::native_is_ped_sheltered(ped)
}
pub fn can_create_random_driver() -> altv_wasm_shared::natives_result::ResultOfCanCreateRandomDriver {
    crate::__imports::native_can_create_random_driver()
}
pub fn is_ped_helmet_visor_up(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedHelmetVisorUp {
    crate::__imports::native_is_ped_helmet_visor_up(ped)
}
pub fn is_ped_human(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedHuman {
    crate::__imports::native_is_ped_human(ped)
}
pub fn is_ped_defensive_area_active(ped: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfIsPedDefensiveAreaActive {
    crate::__imports::native_is_ped_defensive_area_active(ped,
p1)
}
pub fn get_pos_from_fired_event(ped: u32,
event_type: i32,
out_data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetPosFromFiredEvent {
    crate::__imports::native_get_pos_from_fired_event(ped,
event_type,
out_data)
}
pub fn register_pedheadshot_hires(ped: u32) -> altv_wasm_shared::natives_result::ResultOfRegisterPedheadshotHires {
    crate::__imports::native_register_pedheadshot_hires(ped)
}
pub fn set_ped_can_play_gesture_anims(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanPlayGestureAnims {
    crate::__imports::native_set_ped_can_play_gesture_anims(ped,
toggle)
}
pub fn set_ped_as_cop(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedAsCop {
    crate::__imports::native_set_ped_as_cop(ped,
toggle)
}
pub fn is_ped_getting_into_a_vehicle(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedGettingIntoAvehicle {
    crate::__imports::native_is_ped_getting_into_a_vehicle(ped)
}
pub fn reset_ped_last_vehicle(ped: u32) -> altv_wasm_shared::natives_result::ResultOfResetPedLastVehicle {
    crate::__imports::native_reset_ped_last_vehicle(ped)
}
pub fn is_ped_fleeing(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedFleeing {
    crate::__imports::native_is_ped_fleeing(ped)
}
pub fn set_ped_get_out_upside_down_vehicle(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedGetOutUpsideDownVehicle {
    crate::__imports::native_set_ped_get_out_upside_down_vehicle(ped,
toggle)
}
pub fn get_anim_initial_offset_position(anim_dict: Option<&String>,
anim_name: Option<&String>,
x: f32,
y: f32,
z: f32,
x_rot: f32,
y_rot: f32,
z_rot: f32,
p8: f32,
p9: i32) -> altv_wasm_shared::natives_result::ResultOfGetAnimInitialOffsetPosition {
    crate::__imports::native_get_anim_initial_offset_position(anim_dict,
anim_name,
x,
y,
z,
x_rot,
y_rot,
z_rot,
p8,
p9)
}
pub fn set_ped_can_be_targetted_by_team(ped: u32,
team: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanBeTargettedByTeam {
    crate::__imports::native_set_ped_can_be_targetted_by_team(ped,
team,
toggle)
}
pub fn set_relationship_between_groups(relationship: i32,
group1: u32,
group2: u32) -> altv_wasm_shared::natives_result::ResultOfSetRelationshipBetweenGroups {
    crate::__imports::native_set_relationship_between_groups(relationship,
group1,
group2)
}
pub fn set_ped_enveff_scale(ped: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedEnveffScale {
    crate::__imports::native_set_ped_enveff_scale(ped,
value)
}
pub fn is_ped_swimming_under_water(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedSwimmingUnderWater {
    crate::__imports::native_is_ped_swimming_under_water(ped)
}
pub fn set_ped_helmet_flag(ped: u32,
helmet_flag: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedHelmetFlag {
    crate::__imports::native_set_ped_helmet_flag(ped,
helmet_flag)
}
pub fn set_ped_can_head_ik(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanHeadIk {
    crate::__imports::native_set_ped_can_head_ik(ped,
toggle)
}
pub fn stop_ped_weapon_firing_when_dropped(ped: u32) -> altv_wasm_shared::natives_result::ResultOfStopPedWeaponFiringWhenDropped {
    crate::__imports::native_stop_ped_weapon_firing_when_dropped(ped)
}
pub fn set_ped_can_be_dragged_out(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanBeDraggedOut {
    crate::__imports::native_set_ped_can_be_dragged_out(ped,
toggle)
}
pub fn set_ped_reset_flag(ped: u32,
flag_id: i32,
do_reset: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedResetFlag {
    crate::__imports::native_set_ped_reset_flag(ped,
flag_id,
do_reset)
}
pub fn set_ped_heatscale_override(ped: u32,
heat_scale: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedHeatscaleOverride {
    crate::__imports::native_set_ped_heatscale_override(ped,
heat_scale)
}
pub fn trigger_idle_animation_on_ped(ped: u32) -> altv_wasm_shared::natives_result::ResultOfTriggerIdleAnimationOnPed {
    crate::__imports::native_trigger_idle_animation_on_ped(ped)
}
pub fn is_ped_gesturing(p0: i32) -> altv_wasm_shared::natives_result::ResultOfIsPedGesturing {
    crate::__imports::native_is_ped_gesturing(p0)
}
pub fn set_ik_target(ped: u32,
ik_index: i32,
entity_look_at: u32,
bone_look_at: i32,
offset_x: f32,
offset_y: f32,
offset_z: f32,
p7: i32,
blend_in_duration: i32,
blend_out_duration: i32) -> altv_wasm_shared::natives_result::ResultOfSetIkTarget {
    crate::__imports::native_set_ik_target(ped,
ik_index,
entity_look_at,
bone_look_at,
offset_x,
offset_y,
offset_z,
p7,
blend_in_duration,
blend_out_duration)
}
pub fn get_closest_ped(x: f32,
y: f32,
z: f32,
radius: f32,
p4: bool,
p5: bool,
out_ped: u32,
p7: bool,
p8: bool,
ped_type: i32) -> altv_wasm_shared::natives_result::ResultOfGetClosestPed {
    crate::__imports::native_get_closest_ped(x,
y,
z,
radius,
p4,
p5,
out_ped,
p7,
p8,
ped_type)
}
pub fn set_ped_leg_ik_mode(ped: u32,
mode: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedLegIkMode {
    crate::__imports::native_set_ped_leg_ik_mode(ped,
mode)
}
pub fn set_ped_random_props(ped: u32) -> altv_wasm_shared::natives_result::ResultOfSetPedRandomProps {
    crate::__imports::native_set_ped_random_props(ped)
}
pub fn set_ped_can_peek_in_cover(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanPeekInCover {
    crate::__imports::native_set_ped_can_peek_in_cover(ped,
toggle)
}
pub fn set_enable_bound_ankles(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEnableBoundAnkles {
    crate::__imports::native_set_enable_bound_ankles(ped,
toggle)
}
pub fn get_tint_index_for_last_gen_hair_texture(model_hash: u32,
drawable_id: i32,
texture_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetTintIndexForLastGenHairTexture {
    crate::__imports::native_get_tint_index_for_last_gen_hair_texture(model_hash,
drawable_id,
texture_id)
}
pub fn is_ped_planting_bomb(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedPlantingBomb {
    crate::__imports::native_is_ped_planting_bomb(ped)
}
pub fn set_ped_combat_ability(ped: u32,
ability_level: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedCombatAbility {
    crate::__imports::native_set_ped_combat_ability(ped,
ability_level)
}
pub fn clear_ped_motion_in_cover_clipset_override(ped: u32) -> altv_wasm_shared::natives_result::ResultOfClearPedMotionInCoverClipsetOverride {
    crate::__imports::native_clear_ped_motion_in_cover_clipset_override(ped)
}
pub fn set_ped_can_be_shot_in_vehicle(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanBeShotInVehicle {
    crate::__imports::native_set_ped_can_be_shot_in_vehicle(ped,
toggle)
}
pub fn set_ped_angled_defensive_area(ped: u32,
p1: f32,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
p6: f32,
p7: f32,
p8: bool,
p9: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedAngledDefensiveArea {
    crate::__imports::native_set_ped_angled_defensive_area(ped,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8,
p9)
}
pub fn set_ped_relationship_group_hash(ped: u32,
hash: u32) -> altv_wasm_shared::natives_result::ResultOfSetPedRelationshipGroupHash {
    crate::__imports::native_set_ped_relationship_group_hash(ped,
hash)
}
pub fn set_ped_random_component_variation(ped: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedRandomComponentVariation {
    crate::__imports::native_set_ped_random_component_variation(ped,
p1)
}
pub fn is_ped_model(ped: u32,
model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedModel {
    crate::__imports::native_is_ped_model(ped,
model_hash)
}
pub fn set_ped_can_cower_in_cover(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanCowerInCover {
    crate::__imports::native_set_ped_can_cower_in_cover(ped,
toggle)
}
pub fn set_force_step_type(ped: u32,
p1: bool,
r#type: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfSetForceStepType {
    crate::__imports::native_set_force_step_type(ped,
p1,
r#type,
p3)
}
pub fn does_relationship_group_exist(group_hash: u32) -> altv_wasm_shared::natives_result::ResultOfDoesRelationshipGroupExist {
    crate::__imports::native_does_relationship_group_exist(group_hash)
}
pub fn set_head_blend_palette_color(ped: u32,
r: i32,
g: i32,
b: i32,
id: i32) -> altv_wasm_shared::natives_result::ResultOfSetHeadBlendPaletteColor {
    crate::__imports::native_set_head_blend_palette_color(ped,
r,
g,
b,
id)
}
pub fn request_ped_restricted_vehicle_visibility_tracking(ped: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfRequestPedRestrictedVehicleVisibilityTracking {
    crate::__imports::native_request_ped_restricted_vehicle_visibility_tracking(ped,
p1)
}
pub fn set_ped_primary_lookat(ped: u32,
look_at: u32) -> altv_wasm_shared::natives_result::ResultOfSetPedPrimaryLookat {
    crate::__imports::native_set_ped_primary_lookat(ped,
look_at)
}
pub fn get_dead_ped_pickup_coords(ped: u32,
p1: f32,
p2: f32) -> altv_wasm_shared::natives_result::ResultOfGetDeadPedPickupCoords {
    crate::__imports::native_get_dead_ped_pickup_coords(ped,
p1,
p2)
}
pub fn clear_all_ped_props(ped: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfClearAllPedProps {
    crate::__imports::native_clear_all_ped_props(ped,
p1)
}
pub fn take_ownership_of_synchronized_scene(scene: i32) -> altv_wasm_shared::natives_result::ResultOfTakeOwnershipOfSynchronizedScene {
    crate::__imports::native_take_ownership_of_synchronized_scene(scene)
}
pub fn set_group_formation(group_id: i32,
formation_type: i32) -> altv_wasm_shared::natives_result::ResultOfSetGroupFormation {
    crate::__imports::native_set_group_formation(group_id,
formation_type)
}
pub fn set_ped_armour(ped: u32,
amount: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedArmour {
    crate::__imports::native_set_ped_armour(ped,
amount)
}
pub fn set_ped_should_probe_for_scenario_exits_in_one_frame(p0: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedShouldProbeForScenarioExitsInOneFrame {
    crate::__imports::native_set_ped_should_probe_for_scenario_exits_in_one_frame(p0,
p1)
}
pub fn is_ped_jumping(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedJumping {
    crate::__imports::native_is_ped_jumping(ped)
}
pub fn get_ped_head_overlay_num(overlay_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedHeadOverlayNum {
    crate::__imports::native_get_ped_head_overlay_num(overlay_i_d)
}
pub fn get_ped_nearby_vehicles(ped: u32,
size_and_vehs: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetPedNearbyVehicles {
    crate::__imports::native_get_ped_nearby_vehicles(ped,
size_and_vehs)
}
pub fn is_ped_ducking(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedDucking {
    crate::__imports::native_is_ped_ducking(ped)
}
pub fn is_ped_running_melee_task(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedRunningMeleeTask {
    crate::__imports::native_is_ped_running_melee_task(ped)
}
pub fn get_num_ped_makeup_tints() -> altv_wasm_shared::natives_result::ResultOfGetNumPedMakeupTints {
    crate::__imports::native_get_num_ped_makeup_tints()
}
pub fn set_enable_ped_enveff_scale(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEnablePedEnveffScale {
    crate::__imports::native_set_enable_ped_enveff_scale(ped,
toggle)
}
pub fn force_zero_mass_in_collisions(ped: u32) -> altv_wasm_shared::natives_result::ResultOfForceZeroMassInCollisions {
    crate::__imports::native_force_zero_mass_in_collisions(ped)
}
pub fn remove_scenario_blocking_areas() -> altv_wasm_shared::natives_result::ResultOfRemoveScenarioBlockingAreas {
    crate::__imports::native_remove_scenario_blocking_areas()
}
pub fn create_ped(ped_type: i32,
model_hash: u32,
x: f32,
y: f32,
z: f32,
heading: f32,
is_network: bool,
b_script_host_ped: bool) -> altv_wasm_shared::natives_result::ResultOfCreatePed {
    crate::__imports::native_create_ped(ped_type,
model_hash,
x,
y,
z,
heading,
is_network,
b_script_host_ped)
}
pub fn set_ped_enveff_color_modulator(ped: u32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedEnveffColorModulator {
    crate::__imports::native_set_ped_enveff_color_modulator(ped,
p1,
p2,
p3)
}
pub fn is_ped_prone(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedProne {
    crate::__imports::native_is_ped_prone(ped)
}
pub fn is_ped_facing_ped(ped: u32,
other_ped: u32,
angle: f32) -> altv_wasm_shared::natives_result::ResultOfIsPedFacingPed {
    crate::__imports::native_is_ped_facing_ped(ped,
other_ped,
angle)
}
pub fn set_ped_dies_in_sinking_vehicle(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedDiesInSinkingVehicle {
    crate::__imports::native_set_ped_dies_in_sinking_vehicle(ped,
toggle)
}
pub fn get_ped_last_damage_bone(ped: u32,
out_bone: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedLastDamageBone {
    crate::__imports::native_get_ped_last_damage_bone(ped,
out_bone)
}
pub fn set_ped_using_action_mode(ped: u32,
p1: bool,
p2: i32,
action: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetPedUsingActionMode {
    crate::__imports::native_set_ped_using_action_mode(ped,
p1,
p2,
action)
}
pub fn set_ped_to_ragdoll_with_fall(ped: u32,
time: i32,
p2: i32,
ragdoll_type: i32,
x: f32,
y: f32,
z: f32,
velocity: f32,
p8: f32,
p9: f32,
p10: f32,
p11: f32,
p12: f32,
p13: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedToRagdollWithFall {
    crate::__imports::native_set_ped_to_ragdoll_with_fall(ped,
time,
p2,
ragdoll_type,
x,
y,
z,
velocity,
p8,
p9,
p10,
p11,
p12,
p13)
}
pub fn get_synchronized_scene_rate(scene_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfGetSynchronizedSceneRate {
    crate::__imports::native_get_synchronized_scene_rate(scene_i_d)
}
pub fn is_ped_fatally_injured(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedFatallyInjured {
    crate::__imports::native_is_ped_fatally_injured(ped)
}
pub fn clear_ragdoll_blocking_flags(ped: u32,
blocking_flag: i32) -> altv_wasm_shared::natives_result::ResultOfClearRagdollBlockingFlags {
    crate::__imports::native_clear_ragdoll_blocking_flags(ped,
blocking_flag)
}
pub fn set_pop_control_sphere_this_frame(x: f32,
y: f32,
z: f32,
min: f32,
max: f32) -> altv_wasm_shared::natives_result::ResultOfSetPopControlSphereThisFrame {
    crate::__imports::native_set_pop_control_sphere_this_frame(x,
y,
z,
min,
max)
}
pub fn clear_ped_alternate_movement_anim(ped: u32,
stance: i32,
p2: f32) -> altv_wasm_shared::natives_result::ResultOfClearPedAlternateMovementAnim {
    crate::__imports::native_clear_ped_alternate_movement_anim(ped,
stance,
p2)
}
pub fn set_synchronized_scene_looped(scene_i_d: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetSynchronizedSceneLooped {
    crate::__imports::native_set_synchronized_scene_looped(scene_i_d,
toggle)
}
pub fn set_ped_allowed_to_duck(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedAllowedToDuck {
    crate::__imports::native_set_ped_allowed_to_duck(ped,
toggle)
}
pub fn get_pedheadshot_txd_string(id: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedheadshotTxdString {
    crate::__imports::native_get_pedheadshot_txd_string(id)
}
pub fn set_ped_alertness(ped: u32,
value: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedAlertness {
    crate::__imports::native_set_ped_alertness(ped,
value)
}
pub fn set_ped_lod_multiplier(ped: u32,
multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedLodMultiplier {
    crate::__imports::native_set_ped_lod_multiplier(ped,
multiplier)
}
pub fn is_ped_performing_melee_action(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedPerformingMeleeAction {
    crate::__imports::native_is_ped_performing_melee_action(ped)
}
pub fn set_ped_gesture_group(ped: u32,
anim_group_gesture: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetPedGestureGroup {
    crate::__imports::native_set_ped_gesture_group(ped,
anim_group_gesture)
}
pub fn get_ped_combat_movement(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedCombatMovement {
    crate::__imports::native_get_ped_combat_movement(ped)
}
pub fn set_driver_racing_modifier(driver: u32,
modifier: f32) -> altv_wasm_shared::natives_result::ResultOfSetDriverRacingModifier {
    crate::__imports::native_set_driver_racing_modifier(driver,
modifier)
}
pub fn set_enable_handcuffs(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEnableHandcuffs {
    crate::__imports::native_set_enable_handcuffs(ped,
toggle)
}
pub fn set_ped_can_ragdoll_from_player_impact(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanRagdollFromPlayerImpact {
    crate::__imports::native_set_ped_can_ragdoll_from_player_impact(ped,
toggle)
}
pub fn set_disable_ped_map_collision(ped: u32) -> altv_wasm_shared::natives_result::ResultOfSetDisablePedMapCollision {
    crate::__imports::native_set_disable_ped_map_collision(ped)
}
pub fn is_conversation_ped_dead(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsConversationPedDead {
    crate::__imports::native_is_conversation_ped_dead(ped)
}
pub fn get_ped_extracted_displacement(ped: u32,
world_space: bool) -> altv_wasm_shared::natives_result::ResultOfGetPedExtractedDisplacement {
    crate::__imports::native_get_ped_extracted_displacement(ped,
world_space)
}
pub fn is_ped_hair_tint_for_barber(color_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfIsPedHairTintForBarber {
    crate::__imports::native_is_ped_hair_tint_for_barber(color_i_d)
}
pub fn get_ped_prop_texture_index(ped: u32,
component_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedPropTextureIndex {
    crate::__imports::native_get_ped_prop_texture_index(ped,
component_id)
}
pub fn set_ped_model_is_suppressed(model_hash: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedModelIsSuppressed {
    crate::__imports::native_set_ped_model_is_suppressed(model_hash,
toggle)
}
pub fn play_facial_anim(ped: u32,
anim_name: Option<&String>,
anim_dict: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfPlayFacialAnim {
    crate::__imports::native_play_facial_anim(ped,
anim_name,
anim_dict)
}
pub fn clear_ped_decorations_leave_scars(ped: u32) -> altv_wasm_shared::natives_result::ResultOfClearPedDecorationsLeaveScars {
    crate::__imports::native_clear_ped_decorations_leave_scars(ped)
}
pub fn is_ped_running_ragdoll_task(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedRunningRagdollTask {
    crate::__imports::native_is_ped_running_ragdoll_task(ped)
}
pub fn get_ped_palette_variation(ped: u32,
component_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedPaletteVariation {
    crate::__imports::native_get_ped_palette_variation(ped,
component_id)
}
pub fn block_ped_from_generating_dead_body_events_when_dead(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfBlockPedFromGeneratingDeadBodyEventsWhenDead {
    crate::__imports::native_block_ped_from_generating_dead_body_events_when_dead(ped,
toggle)
}
pub fn set_ped_defensive_sphere_attached_to_vehicle(ped: u32,
target: u32,
x_offset: f32,
y_offset: f32,
z_offset: f32,
radius: f32,
p6: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedDefensiveSphereAttachedToVehicle {
    crate::__imports::native_set_ped_defensive_sphere_attached_to_vehicle(ped,
target,
x_offset,
y_offset,
z_offset,
radius,
p6)
}
pub fn get_synchronized_scene_phase(scene_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfGetSynchronizedScenePhase {
    crate::__imports::native_get_synchronized_scene_phase(scene_i_d)
}
pub fn has_action_mode_asset_loaded(asset: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfHasActionModeAssetLoaded {
    crate::__imports::native_has_action_mode_asset_loaded(asset)
}
pub fn get_num_ped_hair_tints() -> altv_wasm_shared::natives_result::ResultOfGetNumPedHairTints {
    crate::__imports::native_get_num_ped_hair_tints()
}
pub fn clear_all_ped_vehicle_forced_seat_usage(ped: u32) -> altv_wasm_shared::natives_result::ResultOfClearAllPedVehicleForcedSeatUsage {
    crate::__imports::native_clear_all_ped_vehicle_forced_seat_usage(ped)
}
pub fn get_mount(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetMount {
    crate::__imports::native_get_mount(ped)
}
pub fn is_ped_component_variation_valid(ped: u32,
component_id: i32,
drawable_id: i32,
texture_id: i32) -> altv_wasm_shared::natives_result::ResultOfIsPedComponentVariationValid {
    crate::__imports::native_is_ped_component_variation_valid(ped,
component_id,
drawable_id,
texture_id)
}
pub fn set_ped_can_lose_props_on_damage(ped: u32,
toggle: bool,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedCanLosePropsOnDamage {
    crate::__imports::native_set_ped_can_lose_props_on_damage(ped,
toggle,
p2)
}
pub fn set_ped_reserve_parachute_tint_index(ped: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedReserveParachuteTintIndex {
    crate::__imports::native_set_ped_reserve_parachute_tint_index(ped,
p1)
}
pub fn has_pedheadshot_img_upload_succeeded() -> altv_wasm_shared::natives_result::ResultOfHasPedheadshotImgUploadSucceeded {
    crate::__imports::native_has_pedheadshot_img_upload_succeeded()
}
pub fn set_ped_enable_crew_emblem(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedEnableCrewEmblem {
    crate::__imports::native_set_ped_enable_crew_emblem(ped,
toggle)
}
pub fn clone_ped_to_target(ped: u32,
target_ped: u32) -> altv_wasm_shared::natives_result::ResultOfClonePedToTarget {
    crate::__imports::native_clone_ped_to_target(ped,
target_ped)
}
pub fn has_stealth_mode_asset_loaded(asset: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfHasStealthModeAssetLoaded {
    crate::__imports::native_has_stealth_mode_asset_loaded(asset)
}
pub fn reset_ai_weapon_damage_modifier() -> altv_wasm_shared::natives_result::ResultOfResetAiWeaponDamageModifier {
    crate::__imports::native_reset_ai_weapon_damage_modifier()
}
pub fn get_default_secondary_tint_for_creator(color_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetDefaultSecondaryTintForCreator {
    crate::__imports::native_get_default_secondary_tint_for_creator(color_id)
}
pub fn can_create_random_bike_rider() -> altv_wasm_shared::natives_result::ResultOfCanCreateRandomBikeRider {
    crate::__imports::native_can_create_random_bike_rider()
}
pub fn can_ped_in_combat_see_target(ped: u32,
target: u32) -> altv_wasm_shared::natives_result::ResultOfCanPedInCombatSeeTarget {
    crate::__imports::native_can_ped_in_combat_see_target(ped,
target)
}
pub fn get_ped_parachute_tint_index(ped: u32,
out_tint_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedParachuteTintIndex {
    crate::__imports::native_get_ped_parachute_tint_index(ped,
out_tint_index)
}
pub fn set_ped_steers_around_vehicles(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedSteersAroundVehicles {
    crate::__imports::native_set_ped_steers_around_vehicles(ped,
toggle)
}
pub fn get_relationship_between_peds(ped1: u32,
ped2: u32) -> altv_wasm_shared::natives_result::ResultOfGetRelationshipBetweenPeds {
    crate::__imports::native_get_relationship_between_peds(ped1,
ped2)
}
pub fn is_pedheadshot_img_upload_available() -> altv_wasm_shared::natives_result::ResultOfIsPedheadshotImgUploadAvailable {
    crate::__imports::native_is_pedheadshot_img_upload_available()
}
pub fn is_ped_performing_a_counter_attack(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedPerformingAcounterAttack {
    crate::__imports::native_is_ped_performing_a_counter_attack(ped)
}
pub fn set_ped_suffers_critical_hits(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedSuffersCriticalHits {
    crate::__imports::native_set_ped_suffers_critical_hits(ped,
toggle)
}
pub fn set_ped_can_use_auto_conversation_lookat(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanUseAutoConversationLookat {
    crate::__imports::native_set_ped_can_use_auto_conversation_lookat(ped,
toggle)
}
pub fn set_ped_injured_on_ground_behaviour(ped: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedInjuredOnGroundBehaviour {
    crate::__imports::native_set_ped_injured_on_ground_behaviour(ped,
p1)
}
pub fn is_ped_on_specific_vehicle(ped: u32,
vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedOnSpecificVehicle {
    crate::__imports::native_is_ped_on_specific_vehicle(ped,
vehicle)
}
pub fn set_ped_should_play_directed_normal_scenario_exit(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedShouldPlayDirectedNormalScenarioExit {
    crate::__imports::native_set_ped_should_play_directed_normal_scenario_exit(p0,
p1,
p2,
p3)
}
pub fn set_ped_drive_by_clipset_override(ped: u32,
clipset: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetPedDriveByClipsetOverride {
    crate::__imports::native_set_ped_drive_by_clipset_override(ped,
clipset)
}
pub fn force_instant_leg_ik_setup(ped: u32) -> altv_wasm_shared::natives_result::ResultOfForceInstantLegIkSetup {
    crate::__imports::native_force_instant_leg_ik_setup(ped)
}
pub fn is_ped_hair_tint_for_creator(color_id: i32) -> altv_wasm_shared::natives_result::ResultOfIsPedHairTintForCreator {
    crate::__imports::native_is_ped_hair_tint_for_creator(color_id)
}
pub fn remove_ped_from_group(ped: u32) -> altv_wasm_shared::natives_result::ResultOfRemovePedFromGroup {
    crate::__imports::native_remove_ped_from_group(ped)
}
pub fn set_ped_can_switch_weapon(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanSwitchWeapon {
    crate::__imports::native_set_ped_can_switch_weapon(ped,
toggle)
}
pub fn set_ped_stay_in_vehicle_when_jacked(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedStayInVehicleWhenJacked {
    crate::__imports::native_set_ped_stay_in_vehicle_when_jacked(ped,
toggle)
}
pub fn set_ped_non_creation_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedNonCreationArea {
    crate::__imports::native_set_ped_non_creation_area(x1,
y1,
z1,
x2,
y2,
z2)
}
pub fn enable_mp_light(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfEnableMpLight {
    crate::__imports::native_enable_mp_light(ped,
toggle)
}
pub fn set_ped_dies_instantly_in_water(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedDiesInstantlyInWater {
    crate::__imports::native_set_ped_dies_instantly_in_water(ped,
toggle)
}
pub fn set_ped_should_play_flee_scenario_exit(ped: u32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedShouldPlayFleeScenarioExit {
    crate::__imports::native_set_ped_should_play_flee_scenario_exit(ped,
p1,
p2,
p3)
}
pub fn apply_ped_blood_specific(ped: u32,
p1: i32,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
p6: i32,
p7: f32,
p8: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfApplyPedBloodSpecific {
    crate::__imports::native_apply_ped_blood_specific(ped,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8)
}
pub fn clone_ped(ped: u32,
is_network: bool,
b_script_host_ped: bool,
copy_head_blend_flag: bool) -> altv_wasm_shared::natives_result::ResultOfClonePed {
    crate::__imports::native_clone_ped(ped,
is_network,
b_script_host_ped,
copy_head_blend_flag)
}
pub fn get_ped_visual_field_center_angle(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedVisualFieldCenterAngle {
    crate::__imports::native_get_ped_visual_field_center_angle(ped)
}
pub fn get_fm_female_shop_ped_apparel_item_index(p0: i32) -> altv_wasm_shared::natives_result::ResultOfGetFmFemaleShopPedApparelItemIndex {
    crate::__imports::native_get_fm_female_shop_ped_apparel_item_index(p0)
}
pub fn set_ped_ragdoll_on_collision(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedRagdollOnCollision {
    crate::__imports::native_set_ped_ragdoll_on_collision(ped,
toggle)
}
pub fn request_pedheadshot_img_upload(id: i32) -> altv_wasm_shared::natives_result::ResultOfRequestPedheadshotImgUpload {
    crate::__imports::native_request_pedheadshot_img_upload(id)
}
pub fn set_ped_id_range(ped: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedIdRange {
    crate::__imports::native_set_ped_id_range(ped,
value)
}
pub fn set_ped_helmet_texture_index(ped: u32,
texture_index: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedHelmetTextureIndex {
    crate::__imports::native_set_ped_helmet_texture_index(ped,
texture_index)
}
pub fn get_ped_group_index(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedGroupIndex {
    crate::__imports::native_get_ped_group_index(ped)
}
pub fn set_ped_should_play_immediate_scenario_exit(ped: u32) -> altv_wasm_shared::natives_result::ResultOfSetPedShouldPlayImmediateScenarioExit {
    crate::__imports::native_set_ped_should_play_immediate_scenario_exit(ped)
}
pub fn is_current_head_prop_a_helmet(p0: i32) -> altv_wasm_shared::natives_result::ResultOfIsCurrentHeadPropAhelmet {
    crate::__imports::native_is_current_head_prop_a_helmet(p0)
}
pub fn force_ped_motion_state(ped: u32,
motion_state_hash: u32,
p2: bool,
p3: i32,
p4: bool) -> altv_wasm_shared::natives_result::ResultOfForcePedMotionState {
    crate::__imports::native_force_ped_motion_state(ped,
motion_state_hash,
p2,
p3,
p4)
}
pub fn set_ped_seeing_range(ped: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedSeeingRange {
    crate::__imports::native_set_ped_seeing_range(ped,
value)
}
pub fn set_ped_can_torso_ik(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanTorsoIk {
    crate::__imports::native_set_ped_can_torso_ik(ped,
toggle)
}
pub fn set_ped_allow_hurt_combat_for_all_mission_peds(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedAllowHurtCombatForAllMissionPeds {
    crate::__imports::native_set_ped_allow_hurt_combat_for_all_mission_peds(toggle)
}
pub fn is_ped_wearing_helmet(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedWearingHelmet {
    crate::__imports::native_is_ped_wearing_helmet(ped)
}
pub fn add_relationship_group(name: Option<&String>,
group_hash: u32) -> altv_wasm_shared::natives_result::ResultOfAddRelationshipGroup {
    crate::__imports::native_add_relationship_group(name,
group_hash)
}
pub fn is_ped_blush_tint_for_creator(color_id: i32) -> altv_wasm_shared::natives_result::ResultOfIsPedBlushTintForCreator {
    crate::__imports::native_is_ped_blush_tint_for_creator(color_id)
}
pub fn spawnpoints_is_search_failed() -> altv_wasm_shared::natives_result::ResultOfSpawnpointsIsSearchFailed {
    crate::__imports::native_spawnpoints_is_search_failed()
}
pub fn set_ped_can_torso_react_ik(ped: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanTorsoReactIk {
    crate::__imports::native_set_ped_can_torso_react_ik(ped,
p1)
}
pub fn set_ped_max_health(ped: u32,
value: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedMaxHealth {
    crate::__imports::native_set_ped_max_health(ped,
value)
}
pub fn get_ped_current_move_blend_ratio(ped: u32,
speed_x: f32,
speed_y: f32) -> altv_wasm_shared::natives_result::ResultOfGetPedCurrentMoveBlendRatio {
    crate::__imports::native_get_ped_current_move_blend_ratio(ped,
speed_x,
speed_y)
}
pub fn get_ped_alertness(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedAlertness {
    crate::__imports::native_get_ped_alertness(ped)
}
pub fn set_ped_into_vehicle(ped: u32,
vehicle: u32,
seat_index: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedIntoVehicle {
    crate::__imports::native_set_ped_into_vehicle(ped,
vehicle,
seat_index)
}
pub fn release_ped_preload_prop_data(ped: u32) -> altv_wasm_shared::natives_result::ResultOfReleasePedPreloadPropData {
    crate::__imports::native_release_ped_preload_prop_data(ped)
}
pub fn set_ped_can_play_viseme_anims(ped: u32,
toggle: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanPlayVisemeAnims {
    crate::__imports::native_set_ped_can_play_viseme_anims(ped,
toggle,
p2)
}
pub fn get_vehicle_ped_is_entering(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehiclePedIsEntering {
    crate::__imports::native_get_vehicle_ped_is_entering(ped)
}
pub fn was_ped_killed_by_stealth(ped: u32) -> altv_wasm_shared::natives_result::ResultOfWasPedKilledByStealth {
    crate::__imports::native_was_ped_killed_by_stealth(ped)
}
pub fn set_enable_scuba(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEnableScuba {
    crate::__imports::native_set_enable_scuba(ped,
toggle)
}
pub fn special_function_do_not_use(ped: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSpecialFunctionDoNotUse {
    crate::__imports::native_special_function_do_not_use(ped,
p1)
}
pub fn set_ped_defensive_sphere_attached_to_ped(ped: u32,
target: u32,
x_offset: f32,
y_offset: f32,
z_offset: f32,
radius: f32,
p6: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedDefensiveSphereAttachedToPed {
    crate::__imports::native_set_ped_defensive_sphere_attached_to_ped(ped,
target,
x_offset,
y_offset,
z_offset,
radius,
p6)
}
pub fn get_ped_combat_range(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedCombatRange {
    crate::__imports::native_get_ped_combat_range(ped)
}
pub fn set_ped_min_ground_time_for_stungun(ped: u32,
ms: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedMinGroundTimeForStungun {
    crate::__imports::native_set_ped_min_ground_time_for_stungun(ped,
ms)
}
pub fn set_allow_stunt_jump_camera(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetAllowStuntJumpCamera {
    crate::__imports::native_set_allow_stunt_jump_camera(ped,
toggle)
}
pub fn is_ped_falling(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedFalling {
    crate::__imports::native_is_ped_falling(ped)
}
pub fn is_ped_in_any_sub(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedInAnySub {
    crate::__imports::native_is_ped_in_any_sub(ped)
}
pub fn is_ped_heading_towards_position(ped: u32,
x: f32,
y: f32,
z: f32,
p4: f32) -> altv_wasm_shared::natives_result::ResultOfIsPedHeadingTowardsPosition {
    crate::__imports::native_is_ped_heading_towards_position(ped,
x,
y,
z,
p4)
}
pub fn set_use_camera_heading_for_desired_direction_lock_on_test(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetUseCameraHeadingForDesiredDirectionLockOnTest {
    crate::__imports::native_set_use_camera_heading_for_desired_direction_lock_on_test(ped,
toggle)
}
pub fn is_ped_performing_stealth_kill(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedPerformingStealthKill {
    crate::__imports::native_is_ped_performing_stealth_kill(ped)
}
pub fn remove_ped_preferred_cover_set(ped: u32) -> altv_wasm_shared::natives_result::ResultOfRemovePedPreferredCoverSet {
    crate::__imports::native_remove_ped_preferred_cover_set(ped)
}
pub fn set_ped_panic_exit_scenario(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedPanicExitScenario {
    crate::__imports::native_set_ped_panic_exit_scenario(p0,
p1,
p2,
p3)
}
pub fn is_using_ped_scuba_gear_variation(p0: i32) -> altv_wasm_shared::natives_result::ResultOfIsUsingPedScubaGearVariation {
    crate::__imports::native_is_using_ped_scuba_gear_variation(p0)
}
pub fn spawnpoints_cancel_search() -> altv_wasm_shared::natives_result::ResultOfSpawnpointsCancelSearch {
    crate::__imports::native_spawnpoints_cancel_search()
}
pub fn get_ped_type(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedType {
    crate::__imports::native_get_ped_type(ped)
}
pub fn force_all_heading_values_to_align(ped: u32) -> altv_wasm_shared::natives_result::ResultOfForceAllHeadingValuesToAlign {
    crate::__imports::native_force_all_heading_values_to_align(ped)
}
pub fn set_combat_float(ped: u32,
combat_type: i32,
p2: f32) -> altv_wasm_shared::natives_result::ResultOfSetCombatFloat {
    crate::__imports::native_set_combat_float(ped,
combat_type,
p2)
}
pub fn set_health_snacks_carried_by_all_new_peds(p0: f32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetHealthSnacksCarriedByAllNewPeds {
    crate::__imports::native_set_health_snacks_carried_by_all_new_peds(p0,
p1)
}
pub fn set_facial_idle_anim_override(ped: u32,
anim_name: Option<&String>,
anim_dict: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetFacialIdleAnimOverride {
    crate::__imports::native_set_facial_idle_anim_override(ped,
anim_name,
anim_dict)
}
pub fn set_disable_frag_damage(object: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDisableFragDamage {
    crate::__imports::native_set_disable_frag_damage(object,
toggle)
}
pub fn get_is_entity_a_frag(object: u32) -> altv_wasm_shared::natives_result::ResultOfGetIsEntityAfrag {
    crate::__imports::native_get_is_entity_a_frag(object)
}
pub fn start_rope_winding(rope_id: i32) -> altv_wasm_shared::natives_result::ResultOfStartRopeWinding {
    crate::__imports::native_start_rope_winding(rope_id)
}
pub fn set_use_kinematic_physics(entity: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetUseKinematicPhysics {
    crate::__imports::native_set_use_kinematic_physics(entity,
toggle)
}
pub fn get_rope_last_vertex_coord(rope_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetRopeLastVertexCoord {
    crate::__imports::native_get_rope_last_vertex_coord(rope_id)
}
pub fn does_script_own_rope(rope_id: i32) -> altv_wasm_shared::natives_result::ResultOfDoesScriptOwnRope {
    crate::__imports::native_does_script_own_rope(rope_id)
}
pub fn pin_rope_vertex(rope_id: i32,
vertex: i32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfPinRopeVertex {
    crate::__imports::native_pin_rope_vertex(rope_id,
vertex,
x,
y,
z)
}
pub fn break_entity_glass(entity: u32,
p1: f32,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
p6: f32,
p7: f32,
p8: f32,
p9: i32,
p10: bool) -> altv_wasm_shared::natives_result::ResultOfBreakEntityGlass {
    crate::__imports::native_break_entity_glass(entity,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8,
p9,
p10)
}
pub fn get_rope_vertex_count(rope_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetRopeVertexCount {
    crate::__imports::native_get_rope_vertex_count(rope_id)
}
pub fn rope_set_smooth_reelin(rope_id: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfRopeSetSmoothReelin {
    crate::__imports::native_rope_set_smooth_reelin(rope_id,
p1)
}
pub fn attach_entities_to_rope(rope_id: i32,
ent1: u32,
ent2: u32,
ent1_x: f32,
ent1_y: f32,
ent1_z: f32,
ent2_x: f32,
ent2_y: f32,
ent2_z: f32,
length: f32,
p10: bool,
p11: bool,
p12: shared::MemoryBufferId,
p13: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfAttachEntitiesToRope {
    crate::__imports::native_attach_entities_to_rope(rope_id,
ent1,
ent2,
ent1_x,
ent1_y,
ent1_z,
ent2_x,
ent2_y,
ent2_z,
length,
p10,
p11,
p12,
p13)
}
pub fn attach_rope_to_entity(rope_id: i32,
entity: u32,
x: f32,
y: f32,
z: f32,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfAttachRopeToEntity {
    crate::__imports::native_attach_rope_to_entity(rope_id,
entity,
x,
y,
z,
p5)
}
pub fn unpin_rope_vertex(rope_id: i32,
vertex: i32) -> altv_wasm_shared::natives_result::ResultOfUnpinRopeVertex {
    crate::__imports::native_unpin_rope_vertex(rope_id,
vertex)
}
pub fn delete_rope(rope_id: i32) -> altv_wasm_shared::natives_result::ResultOfDeleteRope {
    crate::__imports::native_delete_rope(rope_id)
}
pub fn rope_convert_to_simple(rope_id: i32) -> altv_wasm_shared::natives_result::ResultOfRopeConvertToSimple {
    crate::__imports::native_rope_convert_to_simple(rope_id)
}
pub fn start_rope_unwinding_front(rope_id: i32) -> altv_wasm_shared::natives_result::ResultOfStartRopeUnwindingFront {
    crate::__imports::native_start_rope_unwinding_front(rope_id)
}
pub fn set_disable_breaking(object: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDisableBreaking {
    crate::__imports::native_set_disable_breaking(object,
toggle)
}
pub fn rope_unload_textures() -> altv_wasm_shared::natives_result::ResultOfRopeUnloadTextures {
    crate::__imports::native_rope_unload_textures()
}
pub fn activate_physics(entity: u32) -> altv_wasm_shared::natives_result::ResultOfActivatePhysics {
    crate::__imports::native_activate_physics(entity)
}
pub fn rope_get_distance_between_ends(rope_id: i32) -> altv_wasm_shared::natives_result::ResultOfRopeGetDistanceBetweenEnds {
    crate::__imports::native_rope_get_distance_between_ends(rope_id)
}
pub fn get_cgoffset(entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetCgoffset {
    crate::__imports::native_get_cgoffset(entity)
}
pub fn is_rope_attached_at_both_ends(rope_id: i32) -> altv_wasm_shared::natives_result::ResultOfIsRopeAttachedAtBothEnds {
    crate::__imports::native_is_rope_attached_at_both_ends(rope_id)
}
pub fn rope_load_textures() -> altv_wasm_shared::natives_result::ResultOfRopeLoadTextures {
    crate::__imports::native_rope_load_textures()
}
pub fn set_in_stunt_mode(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetInStuntMode {
    crate::__imports::native_set_in_stunt_mode(p0)
}
pub fn rope_draw_enabled(rope_id: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfRopeDrawEnabled {
    crate::__imports::native_rope_draw_enabled(rope_id,
p1)
}
pub fn delete_child_rope(rope_id: i32) -> altv_wasm_shared::natives_result::ResultOfDeleteChildRope {
    crate::__imports::native_delete_child_rope(rope_id)
}
pub fn set_in_arena_mode(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetInArenaMode {
    crate::__imports::native_set_in_arena_mode(toggle)
}
pub fn rope_change_script_owner(p0: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfRopeChangeScriptOwner {
    crate::__imports::native_rope_change_script_owner(p0,
p1,
p2)
}
pub fn rope_set_refframevelocity_colliderorder(rope_id: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfRopeSetRefframevelocityColliderorder {
    crate::__imports::native_rope_set_refframevelocity_colliderorder(rope_id,
p1)
}
pub fn rope_attach_virtual_bound_geom(rope_id: i32,
p1: i32,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
p6: f32,
p7: f32,
p8: f32,
p9: f32,
p10: f32,
p11: f32,
p12: f32,
p13: f32) -> altv_wasm_shared::natives_result::ResultOfRopeAttachVirtualBoundGeom {
    crate::__imports::native_rope_attach_virtual_bound_geom(rope_id,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8,
p9,
p10,
p11,
p12,
p13)
}
pub fn detach_rope_from_entity(rope_id: i32,
entity: u32) -> altv_wasm_shared::natives_result::ResultOfDetachRopeFromEntity {
    crate::__imports::native_detach_rope_from_entity(rope_id,
entity)
}
pub fn set_cg_at_boundcenter(entity: u32) -> altv_wasm_shared::natives_result::ResultOfSetCgAtBoundcenter {
    crate::__imports::native_set_cg_at_boundcenter(entity)
}
pub fn rope_reset_length(rope_id: i32,
length: f32) -> altv_wasm_shared::natives_result::ResultOfRopeResetLength {
    crate::__imports::native_rope_reset_length(rope_id,
length)
}
pub fn rope_set_update_pinverts(rope_id: i32) -> altv_wasm_shared::natives_result::ResultOfRopeSetUpdatePinverts {
    crate::__imports::native_rope_set_update_pinverts(rope_id)
}
pub fn stop_rope_winding(rope_id: i32) -> altv_wasm_shared::natives_result::ResultOfStopRopeWinding {
    crate::__imports::native_stop_rope_winding(rope_id)
}
pub fn load_rope_data(rope_id: i32,
rope_preset: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfLoadRopeData {
    crate::__imports::native_load_rope_data(rope_id,
rope_preset)
}
pub fn reset_disable_breaking(object: u32) -> altv_wasm_shared::natives_result::ResultOfResetDisableBreaking {
    crate::__imports::native_reset_disable_breaking(object)
}
pub fn rope_force_length(rope_id: i32,
length: f32) -> altv_wasm_shared::natives_result::ResultOfRopeForceLength {
    crate::__imports::native_rope_force_length(rope_id,
length)
}
pub fn set_cgoffset(entity: u32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfSetCgoffset {
    crate::__imports::native_set_cgoffset(entity,
x,
y,
z)
}
pub fn rope_set_update_order(rope_id: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfRopeSetUpdateOrder {
    crate::__imports::native_rope_set_update_order(rope_id,
p1)
}
pub fn apply_impulse_to_cloth(pos_x: f32,
pos_y: f32,
pos_z: f32,
vec_x: f32,
vec_y: f32,
vec_z: f32,
impulse: f32) -> altv_wasm_shared::natives_result::ResultOfApplyImpulseToCloth {
    crate::__imports::native_apply_impulse_to_cloth(pos_x,
pos_y,
pos_z,
vec_x,
vec_y,
vec_z,
impulse)
}
pub fn add_rope(x: f32,
y: f32,
z: f32,
rot_x: f32,
rot_y: f32,
rot_z: f32,
length: f32,
rope_type: i32,
max_length: f32,
min_length: f32,
winding_speed: f32,
p11: bool,
p12: bool,
rigid: bool,
p14: f32,
break_when_shot: bool,
unk_ptr: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfAddRope {
    crate::__imports::native_add_rope(x,
y,
z,
rot_x,
rot_y,
rot_z,
length,
rope_type,
max_length,
min_length,
winding_speed,
p11,
p12,
rigid,
p14,
break_when_shot,
unk_ptr)
}
pub fn get_rope_vertex_coord(rope_id: i32,
vertex: i32) -> altv_wasm_shared::natives_result::ResultOfGetRopeVertexCoord {
    crate::__imports::native_get_rope_vertex_coord(rope_id,
vertex)
}
pub fn set_damping(entity: u32,
vertex: i32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetDamping {
    crate::__imports::native_set_damping(entity,
vertex,
value)
}
pub fn rope_draw_shadow_enabled(rope_id: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfRopeDrawShadowEnabled {
    crate::__imports::native_rope_draw_shadow_enabled(rope_id,
toggle)
}
pub fn rope_are_textures_loaded() -> altv_wasm_shared::natives_result::ResultOfRopeAreTexturesLoaded {
    crate::__imports::native_rope_are_textures_loaded()
}
pub fn does_rope_exist(rope_id: i32) -> altv_wasm_shared::natives_result::ResultOfDoesRopeExist {
    crate::__imports::native_does_rope_exist(rope_id)
}
pub fn stop_rope_unwinding_front(rope_id: i32) -> altv_wasm_shared::natives_result::ResultOfStopRopeUnwindingFront {
    crate::__imports::native_stop_rope_unwinding_front(rope_id)
}
pub fn reset_law_response_delay_override() -> altv_wasm_shared::natives_result::ResultOfResetLawResponseDelayOverride {
    crate::__imports::native_reset_law_response_delay_override()
}
pub fn set_player_model(player: u32,
model: u32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerModel {
    crate::__imports::native_set_player_model(player,
model)
}
pub fn set_wanted_level_multiplier(multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetWantedLevelMultiplier {
    crate::__imports::native_set_wanted_level_multiplier(multiplier)
}
pub fn set_player_team(player: u32,
team: i32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerTeam {
    crate::__imports::native_set_player_team(player,
team)
}
pub fn is_player_teleport_active() -> altv_wasm_shared::natives_result::ResultOfIsPlayerTeleportActive {
    crate::__imports::native_is_player_teleport_active()
}
pub fn change_player_ped(player: u32,
ped: u32,
p2: bool,
reset_damage: bool) -> altv_wasm_shared::natives_result::ResultOfChangePlayerPed {
    crate::__imports::native_change_player_ped(player,
ped,
p2,
reset_damage)
}
pub fn set_all_random_peds_flee(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetAllRandomPedsFlee {
    crate::__imports::native_set_all_random_peds_flee(player,
toggle)
}
pub fn is_special_ability_meter_full(player: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfIsSpecialAbilityMeterFull {
    crate::__imports::native_is_special_ability_meter_full(player,
p1)
}
pub fn set_player_reserve_parachute_model_override(player: u32,
model: u32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerReserveParachuteModelOverride {
    crate::__imports::native_set_player_reserve_parachute_model_override(player,
model)
}
pub fn get_wanted_level_radius(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetWantedLevelRadius {
    crate::__imports::native_get_wanted_level_radius(player)
}
pub fn are_player_stars_greyed_out(player: u32) -> altv_wasm_shared::natives_result::ResultOfArePlayerStarsGreyedOut {
    crate::__imports::native_are_player_stars_greyed_out(player)
}
pub fn get_player_wanted_centre_position(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerWantedCentrePosition {
    crate::__imports::native_get_player_wanted_centre_position(player)
}
pub fn get_player_group(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerGroup {
    crate::__imports::native_get_player_group(player)
}
pub fn clear_player_parachute_variation_override(player: u32) -> altv_wasm_shared::natives_result::ResultOfClearPlayerParachuteVariationOverride {
    crate::__imports::native_clear_player_parachute_variation_override(player)
}
pub fn set_player_forced_aim(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerForcedAim {
    crate::__imports::native_set_player_forced_aim(player,
toggle)
}
pub fn clear_player_parachute_pack_model_override(player: u32) -> altv_wasm_shared::natives_result::ResultOfClearPlayerParachutePackModelOverride {
    crate::__imports::native_clear_player_parachute_pack_model_override(player)
}
pub fn set_player_phone_palette_idx(player: u32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerPhonePaletteIdx {
    crate::__imports::native_set_player_phone_palette_idx(player,
flags)
}
pub fn get_player_target_entity(player: u32,
entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerTargetEntity {
    crate::__imports::native_get_player_target_entity(player,
entity)
}
pub fn set_player_cloth_lock_counter(value: i32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerClothLockCounter {
    crate::__imports::native_set_player_cloth_lock_counter(value)
}
pub fn special_ability_deactivate_mp(player: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSpecialAbilityDeactivateMp {
    crate::__imports::native_special_ability_deactivate_mp(player,
p1)
}
pub fn enable_special_ability(player: u32,
toggle: bool,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfEnableSpecialAbility {
    crate::__imports::native_enable_special_ability(player,
toggle,
p2)
}
pub fn get_player_sprint_time_remaining(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerSprintTimeRemaining {
    crate::__imports::native_get_player_sprint_time_remaining(player)
}
pub fn reset_player_input_gait(player: u32) -> altv_wasm_shared::natives_result::ResultOfResetPlayerInputGait {
    crate::__imports::native_reset_player_input_gait(player)
}
pub fn get_achievement_progress(achievement_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetAchievementProgress {
    crate::__imports::native_get_achievement_progress(achievement_id)
}
pub fn special_ability_deplete_meter(player: u32,
p1: bool,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfSpecialAbilityDepleteMeter {
    crate::__imports::native_special_ability_deplete_meter(player,
p1,
p2)
}
pub fn player_detach_virtual_bound() -> altv_wasm_shared::natives_result::ResultOfPlayerDetachVirtualBound {
    crate::__imports::native_player_detach_virtual_bound()
}
pub fn set_player_may_not_enter_any_vehicle(player: u32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerMayNotEnterAnyVehicle {
    crate::__imports::native_set_player_may_not_enter_any_vehicle(player)
}
pub fn get_number_of_players_in_team(team: i32) -> altv_wasm_shared::natives_result::ResultOfGetNumberOfPlayersInTeam {
    crate::__imports::native_get_number_of_players_in_team(team)
}
pub fn has_player_damaged_at_least_one_ped(player: u32) -> altv_wasm_shared::natives_result::ResultOfHasPlayerDamagedAtLeastOnePed {
    crate::__imports::native_has_player_damaged_at_least_one_ped(player)
}
pub fn set_player_vehicle_weapon_to_non_homing(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerVehicleWeaponToNonHoming {
    crate::__imports::native_set_player_vehicle_weapon_to_non_homing(p0)
}
pub fn set_apply_waypoint_of_player(player: u32,
hud_color: i32) -> altv_wasm_shared::natives_result::ResultOfSetApplyWaypointOfPlayer {
    crate::__imports::native_set_apply_waypoint_of_player(player,
hud_color)
}
pub fn is_player_wanted_level_greater(player: u32,
wanted_level: i32) -> altv_wasm_shared::natives_result::ResultOfIsPlayerWantedLevelGreater {
    crate::__imports::native_is_player_wanted_level_greater(player,
wanted_level)
}
pub fn set_player_invincible(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerInvincible {
    crate::__imports::native_set_player_invincible(player,
toggle)
}
pub fn clear_player_reserve_parachute_model_override(player: u32) -> altv_wasm_shared::natives_result::ResultOfClearPlayerReserveParachuteModelOverride {
    crate::__imports::native_clear_player_reserve_parachute_model_override(player)
}
pub fn get_entity_player_is_free_aiming_at(player: u32,
entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityPlayerIsFreeAimingAt {
    crate::__imports::native_get_entity_player_is_free_aiming_at(player,
entity)
}
pub fn set_player_lockon_range_override(player: u32,
range: f32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerLockonRangeOverride {
    crate::__imports::native_set_player_lockon_range_override(player,
range)
}
pub fn reset_player_arrest_state(player: u32) -> altv_wasm_shared::natives_result::ResultOfResetPlayerArrestState {
    crate::__imports::native_reset_player_arrest_state(player)
}
pub fn set_player_weapon_defense_modifier(player: u32,
modifier: f32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerWeaponDefenseModifier {
    crate::__imports::native_set_player_weapon_defense_modifier(player,
modifier)
}
pub fn is_player_free_aiming(player: u32) -> altv_wasm_shared::natives_result::ResultOfIsPlayerFreeAiming {
    crate::__imports::native_is_player_free_aiming(player)
}
pub fn special_ability_charge_small(player: u32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfSpecialAbilityChargeSmall {
    crate::__imports::native_special_ability_charge_small(player,
p1,
p2,
p3)
}
pub fn set_disable_ambient_melee_move(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDisableAmbientMeleeMove {
    crate::__imports::native_set_disable_ambient_melee_move(player,
toggle)
}
pub fn get_player_current_stealth_noise(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerCurrentStealthNoise {
    crate::__imports::native_get_player_current_stealth_noise(player)
}
pub fn allow_evasion_hud_if_disabling_hidden_evasion_this_frame(player: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfAllowEvasionHudIfDisablingHiddenEvasionThisFrame {
    crate::__imports::native_allow_evasion_hud_if_disabling_hidden_evasion_this_frame(player,
p1)
}
pub fn set_player_spectated_vehicle_radio_override(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerSpectatedVehicleRadioOverride {
    crate::__imports::native_set_player_spectated_vehicle_radio_override(p0)
}
pub fn set_player_weapon_takedown_defense_modifier(player: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerWeaponTakedownDefenseModifier {
    crate::__imports::native_set_player_weapon_takedown_defense_modifier(player,
p1)
}
pub fn set_police_ignore_player(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPoliceIgnorePlayer {
    crate::__imports::native_set_police_ignore_player(player,
toggle)
}
pub fn set_player_wanted_level_no_drop(player: u32,
wanted_level: i32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerWantedLevelNoDrop {
    crate::__imports::native_set_player_wanted_level_no_drop(player,
wanted_level,
p2)
}
pub fn suppress_witnesses_calling_police_this_frame(player: u32) -> altv_wasm_shared::natives_result::ResultOfSuppressWitnessesCallingPoliceThisFrame {
    crate::__imports::native_suppress_witnesses_calling_police_this_frame(player)
}
pub fn get_player_team(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerTeam {
    crate::__imports::native_get_player_team(player)
}
pub fn special_ability_reset(player: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSpecialAbilityReset {
    crate::__imports::native_special_ability_reset(player,
p1)
}
pub fn get_player_reserve_parachute_model_override(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerReserveParachuteModelOverride {
    crate::__imports::native_get_player_reserve_parachute_model_override(player)
}
pub fn is_player_being_arrested(player: u32,
at_arresting: bool) -> altv_wasm_shared::natives_result::ResultOfIsPlayerBeingArrested {
    crate::__imports::native_is_player_being_arrested(player,
at_arresting)
}
pub fn is_player_battle_aware(player: u32) -> altv_wasm_shared::natives_result::ResultOfIsPlayerBattleAware {
    crate::__imports::native_is_player_battle_aware(player)
}
pub fn set_player_wanted_level(player: u32,
wanted_level: i32,
disable_no_mission: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerWantedLevel {
    crate::__imports::native_set_player_wanted_level(player,
wanted_level,
disable_no_mission)
}
pub fn is_player_free_aiming_at_entity(player: u32,
entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsPlayerFreeAimingAtEntity {
    crate::__imports::native_is_player_free_aiming_at_entity(player,
entity)
}
pub fn give_player_ragdoll_control(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfGivePlayerRagdollControl {
    crate::__imports::native_give_player_ragdoll_control(player,
toggle)
}
pub fn special_ability_fill_meter(player: u32,
p1: bool,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfSpecialAbilityFillMeter {
    crate::__imports::native_special_ability_fill_meter(player,
p1,
p2)
}
pub fn is_special_ability_active(player: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfIsSpecialAbilityActive {
    crate::__imports::native_is_special_ability_active(player,
p1)
}
pub fn get_player_sprint_stamina_remaining(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerSprintStaminaRemaining {
    crate::__imports::native_get_player_sprint_stamina_remaining(player)
}
pub fn get_number_of_players() -> altv_wasm_shared::natives_result::ResultOfGetNumberOfPlayers {
    crate::__imports::native_get_number_of_players()
}
pub fn int_to_playerindex(value: i32) -> altv_wasm_shared::natives_result::ResultOfIntToPlayerindex {
    crate::__imports::native_int_to_playerindex(value)
}
pub fn is_player_dead(player: u32) -> altv_wasm_shared::natives_result::ResultOfIsPlayerDead {
    crate::__imports::native_is_player_dead(player)
}
pub fn set_police_radar_blips(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPoliceRadarBlips {
    crate::__imports::native_set_police_radar_blips(toggle)
}
pub fn get_player_ped(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerPed {
    crate::__imports::native_get_player_ped(player)
}
pub fn get_max_wanted_level() -> altv_wasm_shared::natives_result::ResultOfGetMaxWantedLevel {
    crate::__imports::native_get_max_wanted_level()
}
pub fn suppress_losing_wanted_level_if_hidden_this_frame(player: u32) -> altv_wasm_shared::natives_result::ResultOfSuppressLosingWantedLevelIfHiddenThisFrame {
    crate::__imports::native_suppress_losing_wanted_level_if_hidden_this_frame(player)
}
pub fn set_all_random_peds_flee_this_frame(player: u32) -> altv_wasm_shared::natives_result::ResultOfSetAllRandomPedsFleeThisFrame {
    crate::__imports::native_set_all_random_peds_flee_this_frame(player)
}
pub fn simulate_player_input_gait(player: u32,
amount: f32,
gait_type: i32,
speed: f32,
p4: bool,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfSimulatePlayerInputGait {
    crate::__imports::native_simulate_player_input_gait(player,
amount,
gait_type,
speed,
p4,
p5)
}
pub fn set_wanted_level_hidden_escape_time(player: u32,
wanted_level: i32,
loss_time: i32) -> altv_wasm_shared::natives_result::ResultOfSetWantedLevelHiddenEscapeTime {
    crate::__imports::native_set_wanted_level_hidden_escape_time(player,
wanted_level,
loss_time)
}
pub fn is_player_control_on(player: u32) -> altv_wasm_shared::natives_result::ResultOfIsPlayerControlOn {
    crate::__imports::native_is_player_control_on(player)
}
pub fn set_player_melee_weapon_damage_modifier(player: u32,
modifier: f32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerMeleeWeaponDamageModifier {
    crate::__imports::native_set_player_melee_weapon_damage_modifier(player,
modifier,
p2)
}
pub fn clear_player_has_damaged_at_least_one_non_animal_ped(player: u32) -> altv_wasm_shared::natives_result::ResultOfClearPlayerHasDamagedAtLeastOneNonAnimalPed {
    crate::__imports::native_clear_player_has_damaged_at_least_one_non_animal_ped(player)
}
pub fn set_player_vehicle_defense_modifier(player: u32,
modifier: f32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerVehicleDefenseModifier {
    crate::__imports::native_set_player_vehicle_defense_modifier(player,
modifier)
}
pub fn force_cleanup_for_all_threads_with_this_name(name: Option<&String>,
cleanup_flags: i32) -> altv_wasm_shared::natives_result::ResultOfForceCleanupForAllThreadsWithThisName {
    crate::__imports::native_force_cleanup_for_all_threads_with_this_name(name,
cleanup_flags)
}
pub fn set_player_stealth_perception_modifier(player: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerStealthPerceptionModifier {
    crate::__imports::native_set_player_stealth_perception_modifier(player,
value)
}
pub fn is_player_riding_train(player: u32) -> altv_wasm_shared::natives_result::ResultOfIsPlayerRidingTrain {
    crate::__imports::native_is_player_riding_train(player)
}
pub fn player_id() -> altv_wasm_shared::natives_result::ResultOfPlayerId {
    crate::__imports::native_player_id()
}
pub fn extend_world_boundary_for_player(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfExtendWorldBoundaryForPlayer {
    crate::__imports::native_extend_world_boundary_for_player(x,
y,
z)
}
pub fn get_time_since_last_arrest() -> altv_wasm_shared::natives_result::ResultOfGetTimeSinceLastArrest {
    crate::__imports::native_get_time_since_last_arrest()
}
pub fn get_player_ped_script_index(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerPedScriptIndex {
    crate::__imports::native_get_player_ped_script_index(player)
}
pub fn set_player_wanted_centre_position(player: u32,
position: Option<&shared::Vector3>,
p2: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerWantedCentrePosition {
    crate::__imports::native_set_player_wanted_centre_position(player,
position,
p2,
p3)
}
pub fn disable_camera_view_mode_cycle(player: u32) -> altv_wasm_shared::natives_result::ResultOfDisableCameraViewModeCycle {
    crate::__imports::native_disable_camera_view_mode_cycle(player)
}
pub fn set_player_can_damage_player(player1: u32,
player2: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerCanDamagePlayer {
    crate::__imports::native_set_player_can_damage_player(player1,
player2,
toggle)
}
pub fn get_player_fake_wanted_level(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerFakeWantedLevel {
    crate::__imports::native_get_player_fake_wanted_level(player)
}
pub fn set_player_target_level(target_level: i32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerTargetLevel {
    crate::__imports::native_set_player_target_level(target_level)
}
pub fn set_ignore_low_priority_shocking_events(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetIgnoreLowPriorityShockingEvents {
    crate::__imports::native_set_ignore_low_priority_shocking_events(player,
toggle)
}
pub fn set_player_lockon(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerLockon {
    crate::__imports::native_set_player_lockon(player,
toggle)
}
pub fn get_time_since_player_hit_vehicle(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetTimeSincePlayerHitVehicle {
    crate::__imports::native_get_time_since_player_hit_vehicle(player)
}
pub fn is_system_ui_being_displayed() -> altv_wasm_shared::natives_result::ResultOfIsSystemUiBeingDisplayed {
    crate::__imports::native_is_system_ui_being_displayed()
}
pub fn set_player_health_recharge_multiplier(player: u32,
regen_rate: f32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerHealthRechargeMultiplier {
    crate::__imports::native_set_player_health_recharge_multiplier(player,
regen_rate)
}
pub fn set_player_bluetooth_state(player: u32,
state: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerBluetoothState {
    crate::__imports::native_set_player_bluetooth_state(player,
state)
}
pub fn get_player_has_reserve_parachute(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerHasReserveParachute {
    crate::__imports::native_get_player_has_reserve_parachute(player)
}
pub fn disable_player_firing(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfDisablePlayerFiring {
    crate::__imports::native_disable_player_firing(player,
toggle)
}
pub fn is_player_playing(player: u32) -> altv_wasm_shared::natives_result::ResultOfIsPlayerPlaying {
    crate::__imports::native_is_player_playing(player)
}
pub fn get_is_player_driving_on_highway(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetIsPlayerDrivingOnHighway {
    crate::__imports::native_get_is_player_driving_on_highway(player)
}
pub fn is_player_bluetooth_enable(player: u32) -> altv_wasm_shared::natives_result::ResultOfIsPlayerBluetoothEnable {
    crate::__imports::native_is_player_bluetooth_enable(player)
}
pub fn is_remote_player_in_non_cloned_vehicle(player: u32) -> altv_wasm_shared::natives_result::ResultOfIsRemotePlayerInNonClonedVehicle {
    crate::__imports::native_is_remote_player_in_non_cloned_vehicle(player)
}
pub fn special_ability_lock(player_model: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSpecialAbilityLock {
    crate::__imports::native_special_ability_lock(player_model,
p1)
}
pub fn set_player_invincible_but_has_reactions(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerInvincibleButHasReactions {
    crate::__imports::native_set_player_invincible_but_has_reactions(player,
toggle)
}
pub fn get_player_name(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerName {
    crate::__imports::native_get_player_name(player)
}
pub fn set_run_sprint_multiplier_for_player(player: u32,
multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetRunSprintMultiplierForPlayer {
    crate::__imports::native_set_run_sprint_multiplier_for_player(player,
multiplier)
}
pub fn is_player_vehicle_weapon_toggled_to_non_homing(p0: i32) -> altv_wasm_shared::natives_result::ResultOfIsPlayerVehicleWeaponToggledToNonHoming {
    crate::__imports::native_is_player_vehicle_weapon_toggled_to_non_homing(p0)
}
pub fn set_player_can_do_drive_by(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerCanDoDriveBy {
    crate::__imports::native_set_player_can_do_drive_by(player,
toggle)
}
pub fn get_player_parachute_pack_tint_index(player: u32,
tint_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerParachutePackTintIndex {
    crate::__imports::native_get_player_parachute_pack_tint_index(player,
tint_index)
}
pub fn set_script_fire_position(coord_x: f32,
coord_y: f32,
coord_z: f32) -> altv_wasm_shared::natives_result::ResultOfSetScriptFirePosition {
    crate::__imports::native_set_script_fire_position(coord_x,
coord_y,
coord_z)
}
pub fn remove_script_fire_position() -> altv_wasm_shared::natives_result::ResultOfRemoveScriptFirePosition {
    crate::__imports::native_remove_script_fire_position()
}
pub fn is_player_logging_in_np() -> altv_wasm_shared::natives_result::ResultOfIsPlayerLoggingInNp {
    crate::__imports::native_is_player_logging_in_np()
}
pub fn set_player_cloth_pin_frames(player: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerClothPinFrames {
    crate::__imports::native_set_player_cloth_pin_frames(player,
p1)
}
pub fn get_player_parachute_tint_index(player: u32,
tint_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerParachuteTintIndex {
    crate::__imports::native_get_player_parachute_tint_index(player,
tint_index)
}
pub fn set_player_forced_zoom(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerForcedZoom {
    crate::__imports::native_set_player_forced_zoom(player,
toggle)
}
pub fn set_player_force_skip_aim_intro(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerForceSkipAimIntro {
    crate::__imports::native_set_player_force_skip_aim_intro(player,
toggle)
}
pub fn set_player_max_armour(player: u32,
value: i32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerMaxArmour {
    crate::__imports::native_set_player_max_armour(player,
value)
}
pub fn is_player_targetting_anything(player: u32) -> altv_wasm_shared::natives_result::ResultOfIsPlayerTargettingAnything {
    crate::__imports::native_is_player_targetting_anything(player)
}
pub fn is_player_targetting_entity(player: u32,
entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsPlayerTargettingEntity {
    crate::__imports::native_is_player_targetting_entity(player,
entity)
}
pub fn set_player_previous_variation_data(player: u32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerPreviousVariationData {
    crate::__imports::native_set_player_previous_variation_data(player,
p1,
p2,
p3,
p4,
p5)
}
pub fn get_are_camera_controls_disabled() -> altv_wasm_shared::natives_result::ResultOfGetAreCameraControlsDisabled {
    crate::__imports::native_get_are_camera_controls_disabled()
}
pub fn set_player_has_reserve_parachute(player: u32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerHasReserveParachute {
    crate::__imports::native_set_player_has_reserve_parachute(player)
}
pub fn is_wanted_and_has_been_seen_by_cops(player: u32) -> altv_wasm_shared::natives_result::ResultOfIsWantedAndHasBeenSeenByCops {
    crate::__imports::native_is_wanted_and_has_been_seen_by_cops(player)
}
pub fn set_player_may_only_enter_this_vehicle(player: u32,
vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerMayOnlyEnterThisVehicle {
    crate::__imports::native_set_player_may_only_enter_this_vehicle(player,
vehicle)
}
pub fn set_player_parachute_smoke_trail_color(player: u32,
r: i32,
g: i32,
b: i32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerParachuteSmokeTrailColor {
    crate::__imports::native_set_player_parachute_smoke_trail_color(player,
r,
g,
b)
}
pub fn special_ability_activate(player: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSpecialAbilityActivate {
    crate::__imports::native_special_ability_activate(player,
p1)
}
pub fn reset_wanted_level_hidden_escape_time(player: u32) -> altv_wasm_shared::natives_result::ResultOfResetWantedLevelHiddenEscapeTime {
    crate::__imports::native_reset_wanted_level_hidden_escape_time(player)
}
pub fn assisted_movement_flush_route() -> altv_wasm_shared::natives_result::ResultOfAssistedMovementFlushRoute {
    crate::__imports::native_assisted_movement_flush_route()
}
pub fn has_achievement_been_passed(achievement_id: i32) -> altv_wasm_shared::natives_result::ResultOfHasAchievementBeenPassed {
    crate::__imports::native_has_achievement_been_passed(achievement_id)
}
pub fn clear_player_parachute_model_override(player: u32) -> altv_wasm_shared::natives_result::ResultOfClearPlayerParachuteModelOverride {
    crate::__imports::native_clear_player_parachute_model_override(player)
}
pub fn is_player_script_control_on(player: u32) -> altv_wasm_shared::natives_result::ResultOfIsPlayerScriptControlOn {
    crate::__imports::native_is_player_script_control_on(player)
}
pub fn get_player_health_recharge_max_percent(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerHealthRechargeMaxPercent {
    crate::__imports::native_get_player_health_recharge_max_percent(player)
}
pub fn set_player_control(player: u32,
b_has_control: bool,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerControl {
    crate::__imports::native_set_player_control(player,
b_has_control,
flags)
}
pub fn set_player_max_explosive_damage(player: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerMaxExplosiveDamage {
    crate::__imports::native_set_player_max_explosive_damage(player,
p1)
}
pub fn set_everyone_ignore_player(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEveryoneIgnorePlayer {
    crate::__imports::native_set_everyone_ignore_player(player,
toggle)
}
pub fn is_player_ready_for_cutscene(player: u32) -> altv_wasm_shared::natives_result::ResultOfIsPlayerReadyForCutscene {
    crate::__imports::native_is_player_ready_for_cutscene(player)
}
pub fn add_player_targetable_entity(player: u32,
entity: u32) -> altv_wasm_shared::natives_result::ResultOfAddPlayerTargetableEntity {
    crate::__imports::native_add_player_targetable_entity(player,
entity)
}
pub fn get_player_max_armour(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerMaxArmour {
    crate::__imports::native_get_player_max_armour(player)
}
pub fn set_player_parachute_pack_tint_index(player: u32,
tint_index: i32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerParachutePackTintIndex {
    crate::__imports::native_set_player_parachute_pack_tint_index(player,
tint_index)
}
pub fn display_system_signin_ui(p0: bool) -> altv_wasm_shared::natives_result::ResultOfDisplaySystemSigninUi {
    crate::__imports::native_display_system_signin_ui(p0)
}
pub fn is_player_climbing(player: u32) -> altv_wasm_shared::natives_result::ResultOfIsPlayerClimbing {
    crate::__imports::native_is_player_climbing(player)
}
pub fn set_player_parachute_model_override(player: u32,
model: u32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerParachuteModelOverride {
    crate::__imports::native_set_player_parachute_model_override(player,
model)
}
pub fn get_cause_of_most_recent_force_cleanup() -> altv_wasm_shared::natives_result::ResultOfGetCauseOfMostRecentForceCleanup {
    crate::__imports::native_get_cause_of_most_recent_force_cleanup()
}
pub fn suppress_crime_this_frame(player: u32,
crime_type: i32) -> altv_wasm_shared::natives_result::ResultOfSuppressCrimeThisFrame {
    crate::__imports::native_suppress_crime_this_frame(player,
crime_type)
}
pub fn set_wanted_level_difficulty(player: u32,
difficulty: f32) -> altv_wasm_shared::natives_result::ResultOfSetWantedLevelDifficulty {
    crate::__imports::native_set_wanted_level_difficulty(player,
difficulty)
}
pub fn special_ability_deactivate_fast(player: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSpecialAbilityDeactivateFast {
    crate::__imports::native_special_ability_deactivate_fast(player,
p1)
}
pub fn int_to_participantindex(value: i32) -> altv_wasm_shared::natives_result::ResultOfIntToParticipantindex {
    crate::__imports::native_int_to_participantindex(value)
}
pub fn increase_player_jump_suppression_range(player: u32) -> altv_wasm_shared::natives_result::ResultOfIncreasePlayerJumpSuppressionRange {
    crate::__imports::native_increase_player_jump_suppression_range(player)
}
pub fn remove_player_targetable_entity(player: u32,
entity: u32) -> altv_wasm_shared::natives_result::ResultOfRemovePlayerTargetableEntity {
    crate::__imports::native_remove_player_targetable_entity(player,
entity)
}
pub fn set_auto_give_parachute_when_enter_plane(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetAutoGiveParachuteWhenEnterPlane {
    crate::__imports::native_set_auto_give_parachute_when_enter_plane(player,
toggle)
}
pub fn set_player_cloth_package_index(index: i32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerClothPackageIndex {
    crate::__imports::native_set_player_cloth_package_index(index)
}
pub fn set_player_sprint(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerSprint {
    crate::__imports::native_set_player_sprint(player,
toggle)
}
pub fn special_ability_charge_normalized(player: u32,
normalized_value: f32,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfSpecialAbilityChargeNormalized {
    crate::__imports::native_special_ability_charge_normalized(player,
normalized_value,
p2,
p3)
}
pub fn set_player_underwater_breath_percent_remaining(player: u32,
time: f32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerUnderwaterBreathPercentRemaining {
    crate::__imports::native_set_player_underwater_breath_percent_remaining(player,
time)
}
pub fn get_player_underwater_time_remaining(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerUnderwaterTimeRemaining {
    crate::__imports::native_get_player_underwater_time_remaining(player)
}
pub fn restore_player_stamina(player: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfRestorePlayerStamina {
    crate::__imports::native_restore_player_stamina(player,
p1)
}
pub fn set_player_parachute_tint_index(player: u32,
tint_index: i32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerParachuteTintIndex {
    crate::__imports::native_set_player_parachute_tint_index(player,
tint_index)
}
pub fn set_special_ability_multiplier(multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetSpecialAbilityMultiplier {
    crate::__imports::native_set_special_ability_multiplier(multiplier)
}
pub fn set_player_vehicle_damage_modifier(player: u32,
modifier: f32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerVehicleDamageModifier {
    crate::__imports::native_set_player_vehicle_damage_modifier(player,
modifier)
}
pub fn get_player_index() -> altv_wasm_shared::natives_result::ResultOfGetPlayerIndex {
    crate::__imports::native_get_player_index()
}
pub fn reset_player_stamina(player: u32) -> altv_wasm_shared::natives_result::ResultOfResetPlayerStamina {
    crate::__imports::native_reset_player_stamina(player)
}
pub fn get_wanted_level_time_to_escape() -> altv_wasm_shared::natives_result::ResultOfGetWantedLevelTimeToEscape {
    crate::__imports::native_get_wanted_level_time_to_escape()
}
pub fn set_swim_multiplier_for_player(player: u32,
multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetSwimMultiplierForPlayer {
    crate::__imports::native_set_swim_multiplier_for_player(player,
multiplier)
}
pub fn set_max_wanted_level(max_wanted_level: i32) -> altv_wasm_shared::natives_result::ResultOfSetMaxWantedLevel {
    crate::__imports::native_set_max_wanted_level(max_wanted_level)
}
pub fn start_player_teleport(player: u32,
x: f32,
y: f32,
z: f32,
heading: f32,
p5: bool,
find_collision_land: bool,
p7: bool) -> altv_wasm_shared::natives_result::ResultOfStartPlayerTeleport {
    crate::__imports::native_start_player_teleport(player,
x,
y,
z,
heading,
p5,
find_collision_land,
p7)
}
pub fn force_start_hidden_evasion(player: u32) -> altv_wasm_shared::natives_result::ResultOfForceStartHiddenEvasion {
    crate::__imports::native_force_start_hidden_evasion(player)
}
pub fn set_player_melee_weapon_defense_modifier(player: u32,
modifier: f32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerMeleeWeaponDefenseModifier {
    crate::__imports::native_set_player_melee_weapon_defense_modifier(player,
modifier)
}
pub fn assisted_movement_close_route() -> altv_wasm_shared::natives_result::ResultOfAssistedMovementCloseRoute {
    crate::__imports::native_assisted_movement_close_route()
}
pub fn set_player_reserve_parachute_tint_index(player: u32,
index: i32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerReserveParachuteTintIndex {
    crate::__imports::native_set_player_reserve_parachute_tint_index(player,
index)
}
pub fn are_player_flashing_stars_about_to_drop(player: u32) -> altv_wasm_shared::natives_result::ResultOfArePlayerFlashingStarsAboutToDrop {
    crate::__imports::native_are_player_flashing_stars_about_to_drop(player)
}
pub fn set_player_targeting_mode(target_mode: i32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerTargetingMode {
    crate::__imports::native_set_player_targeting_mode(target_mode)
}
pub fn is_special_ability_enabled(player: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfIsSpecialAbilityEnabled {
    crate::__imports::native_is_special_ability_enabled(player,
p1)
}
pub fn set_special_ability_mp(player: u32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfSetSpecialAbilityMp {
    crate::__imports::native_set_special_ability_mp(player,
p1,
p2)
}
pub fn set_player_sneaking_noise_multiplier(player: u32,
multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerSneakingNoiseMultiplier {
    crate::__imports::native_set_player_sneaking_noise_multiplier(player,
multiplier)
}
pub fn clear_player_wanted_level(player: u32) -> altv_wasm_shared::natives_result::ResultOfClearPlayerWantedLevel {
    crate::__imports::native_clear_player_wanted_level(player)
}
pub fn set_law_response_delay_override(p0: f32) -> altv_wasm_shared::natives_result::ResultOfSetLawResponseDelayOverride {
    crate::__imports::native_set_law_response_delay_override(p0)
}
pub fn get_players_last_vehicle() -> altv_wasm_shared::natives_result::ResultOfGetPlayersLastVehicle {
    crate::__imports::native_get_players_last_vehicle()
}
pub fn get_player_invincible(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerInvincible {
    crate::__imports::native_get_player_invincible(player)
}
pub fn special_ability_charge_absolute(player: u32,
p1: i32,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfSpecialAbilityChargeAbsolute {
    crate::__imports::native_special_ability_charge_absolute(player,
p1,
p2,
p3)
}
pub fn disable_player_throw_grenade_while_using_gun() -> altv_wasm_shared::natives_result::ResultOfDisablePlayerThrowGrenadeWhileUsingGun {
    crate::__imports::native_disable_player_throw_grenade_while_using_gun()
}
pub fn get_is_using_fps_third_person_cover() -> altv_wasm_shared::natives_result::ResultOfGetIsUsingFpsThirdPersonCover {
    crate::__imports::native_get_is_using_fps_third_person_cover()
}
pub fn reset_wanted_level_difficulty(player: u32) -> altv_wasm_shared::natives_result::ResultOfResetWantedLevelDifficulty {
    crate::__imports::native_reset_wanted_level_difficulty(player)
}
pub fn get_player_received_battle_event_recently(player: u32,
p1: i32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfGetPlayerReceivedBattleEventRecently {
    crate::__imports::native_get_player_received_battle_event_recently(player,
p1,
p2)
}
pub fn force_cleanup(cleanup_flags: i32) -> altv_wasm_shared::natives_result::ResultOfForceCleanup {
    crate::__imports::native_force_cleanup(cleanup_flags)
}
pub fn update_wanted_position_this_frame(player: u32) -> altv_wasm_shared::natives_result::ResultOfUpdateWantedPositionThisFrame {
    crate::__imports::native_update_wanted_position_this_frame(player)
}
pub fn disable_player_health_recharge(player: u32) -> altv_wasm_shared::natives_result::ResultOfDisablePlayerHealthRecharge {
    crate::__imports::native_disable_player_health_recharge(player)
}
pub fn set_player_weapon_minigun_defense_modifier(player: u32,
modifier: f32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerWeaponMinigunDefenseModifier {
    crate::__imports::native_set_player_weapon_minigun_defense_modifier(player,
modifier)
}
pub fn give_achievement_to_player(achievement_id: i32) -> altv_wasm_shared::natives_result::ResultOfGiveAchievementToPlayer {
    crate::__imports::native_give_achievement_to_player(achievement_id)
}
pub fn start_firing_amnesty(duration: i32) -> altv_wasm_shared::natives_result::ResultOfStartFiringAmnesty {
    crate::__imports::native_start_firing_amnesty(duration)
}
pub fn disable_player_vehicle_rewards(player: u32) -> altv_wasm_shared::natives_result::ResultOfDisablePlayerVehicleRewards {
    crate::__imports::native_disable_player_vehicle_rewards(player)
}
pub fn get_player_parachute_model_override(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerParachuteModelOverride {
    crate::__imports::native_get_player_parachute_model_override(player)
}
pub fn set_achievement_progress(achievement_id: i32,
progress: i32) -> altv_wasm_shared::natives_result::ResultOfSetAchievementProgress {
    crate::__imports::native_set_achievement_progress(achievement_id,
progress)
}
pub fn set_all_neutral_random_peds_flee_this_frame(player: u32) -> altv_wasm_shared::natives_result::ResultOfSetAllNeutralRandomPedsFleeThisFrame {
    crate::__imports::native_set_all_neutral_random_peds_flee_this_frame(player)
}
pub fn set_player_health_recharge_max_percent(player: u32,
limit: f32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerHealthRechargeMaxPercent {
    crate::__imports::native_set_player_health_recharge_max_percent(player,
limit)
}
pub fn stop_player_teleport() -> altv_wasm_shared::natives_result::ResultOfStopPlayerTeleport {
    crate::__imports::native_stop_player_teleport()
}
pub fn set_player_simulate_aiming(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerSimulateAiming {
    crate::__imports::native_set_player_simulate_aiming(player,
toggle)
}
pub fn is_special_ability_unlocked(player_model: u32) -> altv_wasm_shared::natives_result::ResultOfIsSpecialAbilityUnlocked {
    crate::__imports::native_is_special_ability_unlocked(player_model)
}
pub fn get_time_since_last_death() -> altv_wasm_shared::natives_result::ResultOfGetTimeSinceLastDeath {
    crate::__imports::native_get_time_since_last_death()
}
pub fn has_force_cleanup_occurred(cleanup_flags: i32) -> altv_wasm_shared::natives_result::ResultOfHasForceCleanupOccurred {
    crate::__imports::native_has_force_cleanup_occurred(cleanup_flags)
}
pub fn special_ability_charge_on_mission_failed(player: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSpecialAbilityChargeOnMissionFailed {
    crate::__imports::native_special_ability_charge_on_mission_failed(player,
p1)
}
pub fn set_air_drag_multiplier_for_players_vehicle(player: u32,
multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetAirDragMultiplierForPlayersVehicle {
    crate::__imports::native_set_air_drag_multiplier_for_players_vehicle(player,
multiplier)
}
pub fn set_player_can_collect_dropped_money(player: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerCanCollectDroppedMoney {
    crate::__imports::native_set_player_can_collect_dropped_money(player,
p1)
}
pub fn get_is_using_hood_camera() -> altv_wasm_shared::natives_result::ResultOfGetIsUsingHoodCamera {
    crate::__imports::native_get_is_using_hood_camera()
}
pub fn set_player_weapon_damage_modifier(player: u32,
modifier: f32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerWeaponDamageModifier {
    crate::__imports::native_set_player_weapon_damage_modifier(player,
modifier)
}
pub fn set_auto_give_scuba_gear_when_exit_vehicle(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetAutoGiveScubaGearWhenExitVehicle {
    crate::__imports::native_set_auto_give_scuba_gear_when_exit_vehicle(player,
toggle)
}
pub fn set_player_can_use_cover(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerCanUseCover {
    crate::__imports::native_set_player_can_use_cover(player,
toggle)
}
pub fn get_time_since_player_drove_on_pavement(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetTimeSincePlayerDroveOnPavement {
    crate::__imports::native_get_time_since_player_drove_on_pavement(player)
}
pub fn has_player_left_the_world(player: u32) -> altv_wasm_shared::natives_result::ResultOfHasPlayerLeftTheWorld {
    crate::__imports::native_has_player_left_the_world(player)
}
pub fn get_player_reserve_parachute_tint_index(player: u32,
index: i32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerReserveParachuteTintIndex {
    crate::__imports::native_get_player_reserve_parachute_tint_index(player,
index)
}
pub fn set_player_can_be_hassled_by_gangs(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerCanBeHassledByGangs {
    crate::__imports::native_set_player_can_be_hassled_by_gangs(player,
toggle)
}
pub fn special_ability_deactivate(player: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSpecialAbilityDeactivate {
    crate::__imports::native_special_ability_deactivate(player,
p1)
}
pub fn has_player_been_spotted_in_stolen_vehicle(player: u32) -> altv_wasm_shared::natives_result::ResultOfHasPlayerBeenSpottedInStolenVehicle {
    crate::__imports::native_has_player_been_spotted_in_stolen_vehicle(player)
}
pub fn player_ped_id() -> altv_wasm_shared::natives_result::ResultOfPlayerPedId {
    crate::__imports::native_player_ped_id()
}
pub fn set_player_explosive_damage_modifier(player: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerExplosiveDamageModifier {
    crate::__imports::native_set_player_explosive_damage_modifier(player,
p1)
}
pub fn set_player_parachute_variation_override(player: u32,
p1: i32,
p2: i32,
p3: i32,
p4: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerParachuteVariationOverride {
    crate::__imports::native_set_player_parachute_variation_override(player,
p1,
p2,
p3,
p4)
}
pub fn reset_world_boundary_for_player() -> altv_wasm_shared::natives_result::ResultOfResetWorldBoundaryForPlayer {
    crate::__imports::native_reset_world_boundary_for_player()
}
pub fn set_dispatch_cops_for_player(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDispatchCopsForPlayer {
    crate::__imports::native_set_dispatch_cops_for_player(player,
toggle)
}
pub fn get_time_since_player_drove_against_traffic(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetTimeSincePlayerDroveAgainstTraffic {
    crate::__imports::native_get_time_since_player_drove_against_traffic(player)
}
pub fn set_player_noise_multiplier(player: u32,
multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerNoiseMultiplier {
    crate::__imports::native_set_player_noise_multiplier(player,
multiplier)
}
pub fn report_police_spotted_player(player: u32) -> altv_wasm_shared::natives_result::ResultOfReportPoliceSpottedPlayer {
    crate::__imports::native_report_police_spotted_player(player)
}
pub fn set_player_parachute_pack_model_override(player: u32,
model: u32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerParachutePackModelOverride {
    crate::__imports::native_set_player_parachute_pack_model_override(player,
model)
}
pub fn get_player_debug_invincible(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerDebugInvincible {
    crate::__imports::native_get_player_debug_invincible(player)
}
pub fn is_player_free_for_ambient_task(player: u32) -> altv_wasm_shared::natives_result::ResultOfIsPlayerFreeForAmbientTask {
    crate::__imports::native_is_player_free_for_ambient_task(player)
}
pub fn get_is_mopping_area_free_in_front_of_player(player: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfGetIsMoppingAreaFreeInFrontOfPlayer {
    crate::__imports::native_get_is_mopping_area_free_in_front_of_player(player,
p1)
}
pub fn set_all_neutral_random_peds_flee(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetAllNeutralRandomPedsFlee {
    crate::__imports::native_set_all_neutral_random_peds_flee(player,
toggle)
}
pub fn can_player_start_mission(player: u32) -> altv_wasm_shared::natives_result::ResultOfCanPlayerStartMission {
    crate::__imports::native_can_player_start_mission(player)
}
pub fn set_player_wanted_level_now(player: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerWantedLevelNow {
    crate::__imports::native_set_player_wanted_level_now(player,
p1)
}
pub fn update_player_teleport(player: u32) -> altv_wasm_shared::natives_result::ResultOfUpdatePlayerTeleport {
    crate::__imports::native_update_player_teleport(player)
}
pub fn get_player_wanted_level(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerWantedLevel {
    crate::__imports::native_get_player_wanted_level(player)
}
pub fn get_time_since_player_hit_ped(player: u32) -> altv_wasm_shared::natives_result::ResultOfGetTimeSincePlayerHitPed {
    crate::__imports::native_get_time_since_player_hit_ped(player)
}
pub fn has_player_damaged_at_least_one_non_animal_ped(player: u32) -> altv_wasm_shared::natives_result::ResultOfHasPlayerDamagedAtLeastOneNonAnimalPed {
    crate::__imports::native_has_player_damaged_at_least_one_non_animal_ped(player)
}
pub fn get_player_rgb_colour(player: u32,
r: i32,
g: i32,
b: i32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerRgbColour {
    crate::__imports::native_get_player_rgb_colour(player,
r,
g,
b)
}
pub fn report_crime(player: u32,
crime_type: i32,
wanted_lvl_thresh: i32) -> altv_wasm_shared::natives_result::ResultOfReportCrime {
    crate::__imports::native_report_crime(player,
crime_type,
wanted_lvl_thresh)
}
pub fn special_ability_charge_continuous(player: u32,
p1: u32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfSpecialAbilityChargeContinuous {
    crate::__imports::native_special_ability_charge_continuous(player,
p1,
p2)
}
pub fn player_attach_virtual_bound(p0: f32,
p1: f32,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
p6: f32,
p7: f32) -> altv_wasm_shared::natives_result::ResultOfPlayerAttachVirtualBound {
    crate::__imports::native_player_attach_virtual_bound(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7)
}
pub fn set_player_homing_disabled_for_all_vehicle_weapons(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerHomingDisabledForAllVehicleWeapons {
    crate::__imports::native_set_player_homing_disabled_for_all_vehicle_weapons(p0,
p1)
}
pub fn network_player_id_to_int() -> altv_wasm_shared::natives_result::ResultOfNetworkPlayerIdToInt {
    crate::__imports::native_network_player_id_to_int()
}
pub fn get_player_parachute_smoke_trail_color(player: u32,
r: i32,
g: i32,
b: i32) -> altv_wasm_shared::natives_result::ResultOfGetPlayerParachuteSmokeTrailColor {
    crate::__imports::native_get_player_parachute_smoke_trail_color(player,
r,
g,
b)
}
pub fn set_player_fall_distance_to_trigger_ragdoll_override(player: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerFallDistanceToTriggerRagdollOverride {
    crate::__imports::native_set_player_fall_distance_to_trigger_ragdoll_override(player,
p1)
}
pub fn clear_player_has_damaged_at_least_one_ped(player: u32) -> altv_wasm_shared::natives_result::ResultOfClearPlayerHasDamagedAtLeastOnePed {
    crate::__imports::native_clear_player_has_damaged_at_least_one_ped(player)
}
pub fn get_is_player_driving_wreckless(player: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfGetIsPlayerDrivingWreckless {
    crate::__imports::native_get_is_player_driving_wreckless(player,
p1)
}
pub fn special_ability_charge_medium(player: u32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfSpecialAbilityChargeMedium {
    crate::__imports::native_special_ability_charge_medium(player,
p1,
p2,
p3)
}
pub fn special_ability_unlock(player_model: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSpecialAbilityUnlock {
    crate::__imports::native_special_ability_unlock(player_model,
p1)
}
pub fn is_player_online() -> altv_wasm_shared::natives_result::ResultOfIsPlayerOnline {
    crate::__imports::native_is_player_online()
}
pub fn can_ped_hear_player(player: u32,
ped: u32) -> altv_wasm_shared::natives_result::ResultOfCanPedHearPlayer {
    crate::__imports::native_can_ped_hear_player(player,
ped)
}
pub fn remove_player_helmet(player: u32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfRemovePlayerHelmet {
    crate::__imports::native_remove_player_helmet(player,
p2)
}
pub fn set_player_can_leave_parachute_smoke_trail(player: u32,
enabled: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerCanLeaveParachuteSmokeTrail {
    crate::__imports::native_set_player_can_leave_parachute_smoke_trail(player,
enabled)
}
pub fn special_ability_charge_large(player: u32,
p1: bool,
p2: bool,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfSpecialAbilityChargeLarge {
    crate::__imports::native_special_ability_charge_large(player,
p1,
p2,
p3)
}
pub fn force_cleanup_for_thread_with_this_id(id: i32,
cleanup_flags: i32) -> altv_wasm_shared::natives_result::ResultOfForceCleanupForThreadWithThisId {
    crate::__imports::native_force_cleanup_for_thread_with_this_id(id,
cleanup_flags)
}
pub fn is_player_pressing_horn(player: u32) -> altv_wasm_shared::natives_result::ResultOfIsPlayerPressingHorn {
    crate::__imports::native_is_player_pressing_horn(player)
}
pub fn set_law_peds_can_attack_non_wanted_player_this_frame(player: u32) -> altv_wasm_shared::natives_result::ResultOfSetLawPedsCanAttackNonWantedPlayerThisFrame {
    crate::__imports::native_set_law_peds_can_attack_non_wanted_player_this_frame(player)
}
pub fn get_wanted_level_threshold(wanted_level: i32) -> altv_wasm_shared::natives_result::ResultOfGetWantedLevelThreshold {
    crate::__imports::native_get_wanted_level_threshold(wanted_level)
}
pub fn set_player_leave_ped_behind(player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerLeavePedBehind {
    crate::__imports::native_set_player_leave_ped_behind(player,
toggle)
}
pub fn update_special_ability_from_stat(player: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfUpdateSpecialAbilityFromStat {
    crate::__imports::native_update_special_ability_from_stat(player,
p1)
}
pub fn stop_replay_recording() -> altv_wasm_shared::natives_result::ResultOfStopReplayRecording {
    crate::__imports::native_stop_replay_recording()
}
pub fn replay_cancel_event() -> altv_wasm_shared::natives_result::ResultOfReplayCancelEvent {
    crate::__imports::native_replay_cancel_event()
}
pub fn is_replay_recording() -> altv_wasm_shared::natives_result::ResultOfIsReplayRecording {
    crate::__imports::native_is_replay_recording()
}
pub fn replay_check_for_event_this_frame(mission_name_label: Option<&String>,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfReplayCheckForEventThisFrame {
    crate::__imports::native_replay_check_for_event_this_frame(mission_name_label,
p1)
}
pub fn replay_record_back_for_time(p0: f32,
p1: f32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfReplayRecordBackForTime {
    crate::__imports::native_replay_record_back_for_time(p0,
p1,
p2)
}
pub fn is_replay_record_space_available(p0: bool) -> altv_wasm_shared::natives_result::ResultOfIsReplayRecordSpaceAvailable {
    crate::__imports::native_is_replay_record_space_available(p0)
}
pub fn is_replay_available() -> altv_wasm_shared::natives_result::ResultOfIsReplayAvailable {
    crate::__imports::native_is_replay_available()
}
pub fn replay_start_event(p0: i32) -> altv_wasm_shared::natives_result::ResultOfReplayStartEvent {
    crate::__imports::native_replay_start_event(p0)
}
pub fn save_replay_recording() -> altv_wasm_shared::natives_result::ResultOfSaveReplayRecording {
    crate::__imports::native_save_replay_recording()
}
pub fn record_greatest_moment(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfRecordGreatestMoment {
    crate::__imports::native_record_greatest_moment(p0,
p1,
p2)
}
pub fn replay_stop_event() -> altv_wasm_shared::natives_result::ResultOfReplayStopEvent {
    crate::__imports::native_replay_stop_event()
}
pub fn cancel_replay_recording() -> altv_wasm_shared::natives_result::ResultOfCancelReplayRecording {
    crate::__imports::native_cancel_replay_recording()
}
pub fn replay_disable_camera_movement_this_frame() -> altv_wasm_shared::natives_result::ResultOfReplayDisableCameraMovementThisFrame {
    crate::__imports::native_replay_disable_camera_movement_this_frame()
}
pub fn start_replay_recording(mode: i32) -> altv_wasm_shared::natives_result::ResultOfStartReplayRecording {
    crate::__imports::native_start_replay_recording(mode)
}
pub fn is_replay_initialized() -> altv_wasm_shared::natives_result::ResultOfIsReplayInitialized {
    crate::__imports::native_is_replay_initialized()
}
pub fn replay_prevent_recording_this_frame() -> altv_wasm_shared::natives_result::ResultOfReplayPreventRecordingThisFrame {
    crate::__imports::native_replay_prevent_recording_this_frame()
}
pub fn replay_reset_event_info() -> altv_wasm_shared::natives_result::ResultOfReplayResetEventInfo {
    crate::__imports::native_replay_reset_event_info()
}
pub fn replay_control_shutdown() -> altv_wasm_shared::natives_result::ResultOfReplayControlShutdown {
    crate::__imports::native_replay_control_shutdown()
}
pub fn activate_rockstar_editor(p0: i32) -> altv_wasm_shared::natives_result::ResultOfActivateRockstarEditor {
    crate::__imports::native_activate_rockstar_editor(p0)
}
pub fn set_scripts_have_cleaned_up_for_replay_system() -> altv_wasm_shared::natives_result::ResultOfSetScriptsHaveCleanedUpForReplaySystem {
    crate::__imports::native_set_scripts_have_cleaned_up_for_replay_system()
}
pub fn register_effect_for_replay_editor(p0: Option<&String>,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfRegisterEffectForReplayEditor {
    crate::__imports::native_register_effect_for_replay_editor(p0,
p1)
}
pub fn replay_system_has_requested_a_script_cleanup() -> altv_wasm_shared::natives_result::ResultOfReplaySystemHasRequestedAscriptCleanup {
    crate::__imports::native_replay_system_has_requested_a_script_cleanup()
}
pub fn set_replay_system_paused_for_save(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetReplaySystemPausedForSave {
    crate::__imports::native_set_replay_system_paused_for_save(p0)
}
pub fn savemigration_mp_get_status() -> altv_wasm_shared::natives_result::ResultOfSavemigrationMpGetStatus {
    crate::__imports::native_savemigration_mp_get_status()
}
pub fn savemigration_mp_num_accounts() -> altv_wasm_shared::natives_result::ResultOfSavemigrationMpNumAccounts {
    crate::__imports::native_savemigration_mp_num_accounts()
}
pub fn savemigration_is_mp_enabled() -> altv_wasm_shared::natives_result::ResultOfSavemigrationIsMpEnabled {
    crate::__imports::native_savemigration_is_mp_enabled()
}
pub fn savemigration_mp_request_accounts() -> altv_wasm_shared::natives_result::ResultOfSavemigrationMpRequestAccounts {
    crate::__imports::native_savemigration_mp_request_accounts()
}
pub fn savemigration_mp_get_accounts_status() -> altv_wasm_shared::natives_result::ResultOfSavemigrationMpGetAccountsStatus {
    crate::__imports::native_savemigration_mp_get_accounts_status()
}
pub fn savemigration_mp_request_status() -> altv_wasm_shared::natives_result::ResultOfSavemigrationMpRequestStatus {
    crate::__imports::native_savemigration_mp_request_status()
}
pub fn savemigration_mp_get_account(p0: i32,
p1: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfSavemigrationMpGetAccount {
    crate::__imports::native_savemigration_mp_get_account(p0,
p1)
}
pub fn get_name_of_script_with_this_id(thread_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetNameOfScriptWithThisId {
    crate::__imports::native_get_name_of_script_with_this_id(thread_id)
}
pub fn shutdown_loading_screen() -> altv_wasm_shared::natives_result::ResultOfShutdownLoadingScreen {
    crate::__imports::native_shutdown_loading_screen()
}
pub fn bg_does_launch_param_exist(script_index: i32,
p1: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfBgDoesLaunchParamExist {
    crate::__imports::native_bg_does_launch_param_exist(script_index,
p1)
}
pub fn bg_end_context_hash(context_hash: u32) -> altv_wasm_shared::natives_result::ResultOfBgEndContextHash {
    crate::__imports::native_bg_end_context_hash(context_hash)
}
pub fn terminate_this_thread() -> altv_wasm_shared::natives_result::ResultOfTerminateThisThread {
    crate::__imports::native_terminate_this_thread()
}
pub fn get_no_loading_screen() -> altv_wasm_shared::natives_result::ResultOfGetNoLoadingScreen {
    crate::__imports::native_get_no_loading_screen()
}
pub fn bg_get_launch_param_value(script_index: i32,
p1: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfBgGetLaunchParamValue {
    crate::__imports::native_bg_get_launch_param_value(script_index,
p1)
}
pub fn get_event_data(event_group: i32,
event_index: i32,
event_data: shared::MemoryBufferId,
event_data_size: i32) -> altv_wasm_shared::natives_result::ResultOfGetEventData {
    crate::__imports::native_get_event_data(event_group,
event_index,
event_data,
event_data_size)
}
pub fn get_number_of_threads_running_the_script_with_this_hash(script_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetNumberOfThreadsRunningTheScriptWithThisHash {
    crate::__imports::native_get_number_of_threads_running_the_script_with_this_hash(script_hash)
}
pub fn script_thread_iterator_get_next_thread_id() -> altv_wasm_shared::natives_result::ResultOfScriptThreadIteratorGetNextThreadId {
    crate::__imports::native_script_thread_iterator_get_next_thread_id()
}
pub fn get_this_script_name() -> altv_wasm_shared::natives_result::ResultOfGetThisScriptName {
    crate::__imports::native_get_this_script_name()
}
pub fn is_thread_active(thread_id: i32) -> altv_wasm_shared::natives_result::ResultOfIsThreadActive {
    crate::__imports::native_is_thread_active(thread_id)
}
pub fn set_no_loading_screen(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetNoLoadingScreen {
    crate::__imports::native_set_no_loading_screen(toggle)
}
pub fn trigger_script_event(event_group: i32,
event_data: shared::MemoryBufferId,
event_data_size: i32,
player_bits: i32) -> altv_wasm_shared::natives_result::ResultOfTriggerScriptEvent {
    crate::__imports::native_trigger_script_event(event_group,
event_data,
event_data_size,
player_bits)
}
pub fn has_script_with_name_hash_loaded(script_hash: u32) -> altv_wasm_shared::natives_result::ResultOfHasScriptWithNameHashLoaded {
    crate::__imports::native_has_script_with_name_hash_loaded(script_hash)
}
pub fn get_number_of_events(event_group: i32) -> altv_wasm_shared::natives_result::ResultOfGetNumberOfEvents {
    crate::__imports::native_get_number_of_events(event_group)
}
pub fn request_script(script_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRequestScript {
    crate::__imports::native_request_script(script_name)
}
pub fn bg_start_context_hash(context_hash: u32) -> altv_wasm_shared::natives_result::ResultOfBgStartContextHash {
    crate::__imports::native_bg_start_context_hash(context_hash)
}
pub fn bg_set_exitflag_response() -> altv_wasm_shared::natives_result::ResultOfBgSetExitflagResponse {
    crate::__imports::native_bg_set_exitflag_response()
}
pub fn bg_get_script_id_from_name_hash(p0: u32) -> altv_wasm_shared::natives_result::ResultOfBgGetScriptIdFromNameHash {
    crate::__imports::native_bg_get_script_id_from_name_hash(p0)
}
pub fn bg_is_exitflag_set() -> altv_wasm_shared::natives_result::ResultOfBgIsExitflagSet {
    crate::__imports::native_bg_is_exitflag_set()
}
pub fn get_hash_of_this_script_name() -> altv_wasm_shared::natives_result::ResultOfGetHashOfThisScriptName {
    crate::__imports::native_get_hash_of_this_script_name()
}
pub fn get_event_exists(event_group: i32,
event_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetEventExists {
    crate::__imports::native_get_event_exists(event_group,
event_index)
}
pub fn bg_start_context(context_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfBgStartContext {
    crate::__imports::native_bg_start_context(context_name)
}
pub fn send_tu_script_event(event_group: i32,
event_data: shared::MemoryBufferId,
event_data_size: i32,
player_bits: i32) -> altv_wasm_shared::natives_result::ResultOfSendTuScriptEvent {
    crate::__imports::native_send_tu_script_event(event_group,
event_data,
event_data_size,
player_bits)
}
pub fn commit_to_loadingscreen_selction() -> altv_wasm_shared::natives_result::ResultOfCommitToLoadingscreenSelction {
    crate::__imports::native_commit_to_loadingscreen_selction()
}
pub fn get_id_of_this_thread() -> altv_wasm_shared::natives_result::ResultOfGetIdOfThisThread {
    crate::__imports::native_get_id_of_this_thread()
}
pub fn set_script_with_name_hash_as_no_longer_needed(script_hash: u32) -> altv_wasm_shared::natives_result::ResultOfSetScriptWithNameHashAsNoLongerNeeded {
    crate::__imports::native_set_script_with_name_hash_as_no_longer_needed(script_hash)
}
pub fn terminate_thread(thread_id: i32) -> altv_wasm_shared::natives_result::ResultOfTerminateThread {
    crate::__imports::native_terminate_thread(thread_id)
}
pub fn set_script_as_no_longer_needed(script_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetScriptAsNoLongerNeeded {
    crate::__imports::native_set_script_as_no_longer_needed(script_name)
}
pub fn request_script_with_name_hash(script_hash: u32) -> altv_wasm_shared::natives_result::ResultOfRequestScriptWithNameHash {
    crate::__imports::native_request_script_with_name_hash(script_hash)
}
pub fn get_event_at_index(event_group: i32,
event_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetEventAtIndex {
    crate::__imports::native_get_event_at_index(event_group,
event_index)
}
pub fn script_thread_iterator_reset() -> altv_wasm_shared::natives_result::ResultOfScriptThreadIteratorReset {
    crate::__imports::native_script_thread_iterator_reset()
}
pub fn bg_end_context(context_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfBgEndContext {
    crate::__imports::native_bg_end_context(context_name)
}
pub fn has_script_loaded(script_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfHasScriptLoaded {
    crate::__imports::native_has_script_loaded(script_name)
}
pub fn does_script_with_name_hash_exist(script_hash: u32) -> altv_wasm_shared::natives_result::ResultOfDoesScriptWithNameHashExist {
    crate::__imports::native_does_script_with_name_hash_exist(script_hash)
}
pub fn does_script_exist(script_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDoesScriptExist {
    crate::__imports::native_does_script_exist(script_name)
}
pub fn unregister_script_variable(unk_variable: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfUnregisterScriptVariable {
    crate::__imports::native_unregister_script_variable(unk_variable)
}
pub fn register_script_variable(unk_variable: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfRegisterScriptVariable {
    crate::__imports::native_register_script_variable(unk_variable)
}
pub fn force_check_script_variables() -> altv_wasm_shared::natives_result::ResultOfForceCheckScriptVariables {
    crate::__imports::native_force_check_script_variables()
}
pub fn start_shape_test_bounding_box(entity: u32,
flags1: i32,
flags2: i32) -> altv_wasm_shared::natives_result::ResultOfStartShapeTestBoundingBox {
    crate::__imports::native_start_shape_test_bounding_box(entity,
flags1,
flags2)
}
pub fn start_shape_test_capsule(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
radius: f32,
flags: i32,
entity: u32,
p9: i32) -> altv_wasm_shared::natives_result::ResultOfStartShapeTestCapsule {
    crate::__imports::native_start_shape_test_capsule(x1,
y1,
z1,
x2,
y2,
z2,
radius,
flags,
entity,
p9)
}
pub fn release_script_guid_from_entity(entity_hit: u32) -> altv_wasm_shared::natives_result::ResultOfReleaseScriptGuidFromEntity {
    crate::__imports::native_release_script_guid_from_entity(entity_hit)
}
pub fn start_shape_test_bound(entity: u32,
flags1: i32,
flags2: i32) -> altv_wasm_shared::natives_result::ResultOfStartShapeTestBound {
    crate::__imports::native_start_shape_test_bound(entity,
flags1,
flags2)
}
pub fn start_expensive_synchronous_shape_test_los_probe(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
flags: i32,
entity: u32,
p8: i32) -> altv_wasm_shared::natives_result::ResultOfStartExpensiveSynchronousShapeTestLosProbe {
    crate::__imports::native_start_expensive_synchronous_shape_test_los_probe(x1,
y1,
z1,
x2,
y2,
z2,
flags,
entity,
p8)
}
pub fn get_shape_test_result(shape_test_handle: i32,
hit: bool,
end_coords: Option<&shared::Vector3>,
surface_normal: Option<&shared::Vector3>,
entity_hit: u32) -> altv_wasm_shared::natives_result::ResultOfGetShapeTestResult {
    crate::__imports::native_get_shape_test_result(shape_test_handle,
hit,
end_coords,
surface_normal,
entity_hit)
}
pub fn get_shape_test_result_including_material(shape_test_handle: i32,
hit: bool,
end_coords: Option<&shared::Vector3>,
surface_normal: Option<&shared::Vector3>,
material_hash: u32,
entity_hit: u32) -> altv_wasm_shared::natives_result::ResultOfGetShapeTestResultIncludingMaterial {
    crate::__imports::native_get_shape_test_result_including_material(shape_test_handle,
hit,
end_coords,
surface_normal,
material_hash,
entity_hit)
}
pub fn start_shape_test_los_probe(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
flags: i32,
entity: u32,
p8: i32) -> altv_wasm_shared::natives_result::ResultOfStartShapeTestLosProbe {
    crate::__imports::native_start_shape_test_los_probe(x1,
y1,
z1,
x2,
y2,
z2,
flags,
entity,
p8)
}
pub fn start_shape_test_swept_sphere(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
radius: f32,
flags: i32,
entity: u32,
p9: i32) -> altv_wasm_shared::natives_result::ResultOfStartShapeTestSweptSphere {
    crate::__imports::native_start_shape_test_swept_sphere(x1,
y1,
z1,
x2,
y2,
z2,
radius,
flags,
entity,
p9)
}
pub fn start_shape_test_box(x: f32,
y: f32,
z: f32,
dim_x: f32,
dim_y: f32,
dim_z: f32,
rot_x: f32,
rot_y: f32,
rot_z: f32,
p9: i32,
flags: i32,
entity: u32,
p12: i32) -> altv_wasm_shared::natives_result::ResultOfStartShapeTestBox {
    crate::__imports::native_start_shape_test_box(x,
y,
z,
dim_x,
dim_y,
dim_z,
rot_x,
rot_y,
rot_z,
p9,
flags,
entity,
p12)
}
pub fn start_shape_test_mouse_cursor_los_probe(p_vec1: Option<&shared::Vector3>,
p_vec2: Option<&shared::Vector3>,
flag: i32,
entity: u32,
flag2: i32) -> altv_wasm_shared::natives_result::ResultOfStartShapeTestMouseCursorLosProbe {
    crate::__imports::native_start_shape_test_mouse_cursor_los_probe(p_vec1,
p_vec2,
flag,
entity,
flag2)
}
pub fn sc_inbox_get_total_num_messages() -> altv_wasm_shared::natives_result::ResultOfScInboxGetTotalNumMessages {
    crate::__imports::native_sc_inbox_get_total_num_messages()
}
pub fn sc_email_retrieve_emails(offset: i32,
limit: i32) -> altv_wasm_shared::natives_result::ResultOfScEmailRetrieveEmails {
    crate::__imports::native_sc_email_retrieve_emails(offset,
limit)
}
pub fn sc_licenseplate_get_add_is_pending(token: i32) -> altv_wasm_shared::natives_result::ResultOfScLicenseplateGetAddIsPending {
    crate::__imports::native_sc_licenseplate_get_add_is_pending(token)
}
pub fn sc_email_set_current_email_tag(p0: i32) -> altv_wasm_shared::natives_result::ResultOfScEmailSetCurrentEmailTag {
    crate::__imports::native_sc_email_set_current_email_tag(p0)
}
pub fn sc_licenseplate_isvalid(plate_text: Option<&String>,
token: i32) -> altv_wasm_shared::natives_result::ResultOfScLicenseplateIsvalid {
    crate::__imports::native_sc_licenseplate_isvalid(plate_text,
token)
}
pub fn sc_email_send_email(p0: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfScEmailSendEmail {
    crate::__imports::native_sc_email_send_email(p0)
}
pub fn sc_email_get_retrieval_status() -> altv_wasm_shared::natives_result::ResultOfScEmailGetRetrievalStatus {
    crate::__imports::native_sc_email_get_retrieval_status()
}
pub fn sc_profanity_get_check_is_valid(token: i32) -> altv_wasm_shared::natives_result::ResultOfScProfanityGetCheckIsValid {
    crate::__imports::native_sc_profanity_get_check_is_valid(token)
}
pub fn sc_community_event_get_display_name_by_id(p0: i32,
p1: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfScCommunityEventGetDisplayNameById {
    crate::__imports::native_sc_community_event_get_display_name_by_id(p0,
p1)
}
pub fn sc_licenseplate_add(plate_text: Option<&String>,
plate_data: shared::MemoryBufferId,
token: i32) -> altv_wasm_shared::natives_result::ResultOfScLicenseplateAdd {
    crate::__imports::native_sc_licenseplate_add(plate_text,
plate_data,
token)
}
pub fn sc_account_info_get_nickname() -> altv_wasm_shared::natives_result::ResultOfScAccountInfoGetNickname {
    crate::__imports::native_sc_account_info_get_nickname()
}
pub fn sc_community_event_get_extra_data_string_for_type(p0: Option<&String>,
p1: Option<&String>,
p2: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfScCommunityEventGetExtraDataStringForType {
    crate::__imports::native_sc_community_event_get_extra_data_string_for_type(p0,
p1,
p2)
}
pub fn sc_licenseplate_get_plate(token: i32,
plate_index: i32) -> altv_wasm_shared::natives_result::ResultOfScLicenseplateGetPlate {
    crate::__imports::native_sc_licenseplate_get_plate(token,
plate_index)
}
pub fn sc_presence_attr_set_int(attr_hash: u32,
value: i32) -> altv_wasm_shared::natives_result::ResultOfScPresenceAttrSetInt {
    crate::__imports::native_sc_presence_attr_set_int(attr_hash,
value)
}
pub fn sc_achievement_info_status(p0: i32) -> altv_wasm_shared::natives_result::ResultOfScAchievementInfoStatus {
    crate::__imports::native_sc_achievement_info_status(p0)
}
pub fn sc_email_message_push_gamer_to_recip_list(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfScEmailMessagePushGamerToRecipList {
    crate::__imports::native_sc_email_message_push_gamer_to_recip_list(gamer_handle)
}
pub fn sc_community_event_get_extra_data_float_for_type(p0: Option<&String>,
p1: f32,
p2: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfScCommunityEventGetExtraDataFloatForType {
    crate::__imports::native_sc_community_event_get_extra_data_float_for_type(p0,
p1,
p2)
}
pub fn sc_presence_attr_set_string(attr_hash: u32,
value: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfScPresenceAttrSetString {
    crate::__imports::native_sc_presence_attr_set_string(attr_hash,
value)
}
pub fn sc_inbox_set_message_as_read_at_index(msg_index: i32) -> altv_wasm_shared::natives_result::ResultOfScInboxSetMessageAsReadAtIndex {
    crate::__imports::native_sc_inbox_set_message_as_read_at_index(msg_index)
}
pub fn sc_gamerdata_get_active_xp_bonus(value: f32) -> altv_wasm_shared::natives_result::ResultOfScGamerdataGetActiveXpBonus {
    crate::__imports::native_sc_gamerdata_get_active_xp_bonus(value)
}
pub fn sc_licenseplate_get_plate_data(token: i32,
plate_index: i32) -> altv_wasm_shared::natives_result::ResultOfScLicenseplateGetPlateData {
    crate::__imports::native_sc_licenseplate_get_plate_data(token,
plate_index)
}
pub fn sc_transition_news_has_extra_data_tu() -> altv_wasm_shared::natives_result::ResultOfScTransitionNewsHasExtraDataTu {
    crate::__imports::native_sc_transition_news_has_extra_data_tu()
}
pub fn sc_community_event_get_display_name_for_type(p0: Option<&String>,
p1: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfScCommunityEventGetDisplayNameForType {
    crate::__imports::native_sc_community_event_get_display_name_for_type(p0,
p1)
}
pub fn sc_has_achievement_been_passed(achievement_id: i32) -> altv_wasm_shared::natives_result::ResultOfScHasAchievementBeenPassed {
    crate::__imports::native_sc_has_achievement_been_passed(achievement_id)
}
pub fn sc_email_delete_emails(p0: shared::MemoryBufferId,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfScEmailDeleteEmails {
    crate::__imports::native_sc_email_delete_emails(p0,
p1)
}
pub fn sc_community_event_is_active_for_type(p0: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfScCommunityEventIsActiveForType {
    crate::__imports::native_sc_community_event_is_active_for_type(p0)
}
pub fn sc_email_get_email_at_index(p0: i32,
p1: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfScEmailGetEmailAtIndex {
    crate::__imports::native_sc_email_get_email_at_index(p0,
p1)
}
pub fn sc_presence_set_activity_rating(p0: i32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfScPresenceSetActivityRating {
    crate::__imports::native_sc_presence_set_activity_rating(p0,
p1)
}
pub fn sc_community_event_get_event_id_for_type(p0: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfScCommunityEventGetEventIdForType {
    crate::__imports::native_sc_community_event_get_event_id_for_type(p0)
}
pub fn sc_community_event_get_event_id() -> altv_wasm_shared::natives_result::ResultOfScCommunityEventGetEventId {
    crate::__imports::native_sc_community_event_get_event_id()
}
pub fn sc_community_event_get_extra_data_float(p0: Option<&String>,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfScCommunityEventGetExtraDataFloat {
    crate::__imports::native_sc_community_event_get_extra_data_float(p0,
p1)
}
pub fn sc_email_message_clear_recip_list() -> altv_wasm_shared::natives_result::ResultOfScEmailMessageClearRecipList {
    crate::__imports::native_sc_email_message_clear_recip_list()
}
pub fn sc_licenseplate_get_isvalid_status(token: i32) -> altv_wasm_shared::natives_result::ResultOfScLicenseplateGetIsvalidStatus {
    crate::__imports::native_sc_licenseplate_get_isvalid_status(token)
}
pub fn sc_transition_news_end() -> altv_wasm_shared::natives_result::ResultOfScTransitionNewsEnd {
    crate::__imports::native_sc_transition_news_end()
}
pub fn sc_community_event_get_extra_data_string_by_id(p0: i32,
p1: Option<&String>,
p2: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfScCommunityEventGetExtraDataStringById {
    crate::__imports::native_sc_community_event_get_extra_data_string_by_id(p0,
p1,
p2)
}
pub fn sc_inbox_message_get_ugcdata(p0: i32,
p1: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfScInboxMessageGetUgcdata {
    crate::__imports::native_sc_inbox_message_get_ugcdata(p0,
p1)
}
pub fn sc_inbox_send_bounty_to_recip_list(data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfScInboxSendBountyToRecipList {
    crate::__imports::native_sc_inbox_send_bounty_to_recip_list(data)
}
pub fn sc_transition_news_show(p0: i32) -> altv_wasm_shared::natives_result::ResultOfScTransitionNewsShow {
    crate::__imports::native_sc_transition_news_show(p0)
}
pub fn sc_licenseplate_get_count(token: i32) -> altv_wasm_shared::natives_result::ResultOfScLicenseplateGetCount {
    crate::__imports::native_sc_licenseplate_get_count(token)
}
pub fn sc_community_event_get_extra_data_int(p0: Option<&String>,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfScCommunityEventGetExtraDataInt {
    crate::__imports::native_sc_community_event_get_extra_data_int(p0,
p1)
}
pub fn sc_profanity_check_string(string: Option<&String>,
token: i32) -> altv_wasm_shared::natives_result::ResultOfScProfanityCheckString {
    crate::__imports::native_sc_profanity_check_string(string,
token)
}
pub fn sc_inbox_message_get_data_string(p0: i32,
context: Option<&String>,
out: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfScInboxMessageGetDataString {
    crate::__imports::native_sc_inbox_message_get_data_string(p0,
context,
out)
}
pub fn sc_email_get_num_retrieved_emails() -> altv_wasm_shared::natives_result::ResultOfScEmailGetNumRetrievedEmails {
    crate::__imports::native_sc_email_get_num_retrieved_emails()
}
pub fn sc_gamerdata_get_string(name: Option<&String>,
value: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfScGamerdataGetString {
    crate::__imports::native_sc_gamerdata_get_string(name,
value)
}
pub fn sc_licenseplate_get_add_status(token: i32) -> altv_wasm_shared::natives_result::ResultOfScLicenseplateGetAddStatus {
    crate::__imports::native_sc_licenseplate_get_add_status(token)
}
pub fn sc_profanity_get_check_is_pending(token: i32) -> altv_wasm_shared::natives_result::ResultOfScProfanityGetCheckIsPending {
    crate::__imports::native_sc_profanity_get_check_is_pending(token)
}
pub fn sc_gamerdata_get_bool(name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfScGamerdataGetBool {
    crate::__imports::native_sc_gamerdata_get_bool(name)
}
pub fn sc_profanity_get_string_passed(token: i32) -> altv_wasm_shared::natives_result::ResultOfScProfanityGetStringPassed {
    crate::__imports::native_sc_profanity_get_string_passed(token)
}
pub fn sc_inbox_get_bounty_data_at_index(index: i32,
out_data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfScInboxGetBountyDataAtIndex {
    crate::__imports::native_sc_inbox_get_bounty_data_at_index(index,
out_data)
}
pub fn sc_pause_news_get_pending_story(p0: i32) -> altv_wasm_shared::natives_result::ResultOfScPauseNewsGetPendingStory {
    crate::__imports::native_sc_pause_news_get_pending_story(p0)
}
pub fn sc_community_event_get_extra_data_int_by_id(p0: i32,
p1: Option<&String>,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfScCommunityEventGetExtraDataIntById {
    crate::__imports::native_sc_community_event_get_extra_data_int_by_id(p0,
p1,
p2)
}
pub fn sc_licenseplate_get_check_is_pending(p0: i32) -> altv_wasm_shared::natives_result::ResultOfScLicenseplateGetCheckIsPending {
    crate::__imports::native_sc_licenseplate_get_check_is_pending(p0)
}
pub fn sc_transition_news_get_extra_data_int_tu(p0: Option<&String>,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfScTransitionNewsGetExtraDataIntTu {
    crate::__imports::native_sc_transition_news_get_extra_data_int_tu(p0,
p1)
}
pub fn sc_inbox_get_message_is_read_at_index(msg_index: i32) -> altv_wasm_shared::natives_result::ResultOfScInboxGetMessageIsReadAtIndex {
    crate::__imports::native_sc_inbox_get_message_is_read_at_index(msg_index)
}
pub fn sc_profanity_get_string_status(token: i32) -> altv_wasm_shared::natives_result::ResultOfScProfanityGetStringStatus {
    crate::__imports::native_sc_profanity_get_string_status(token)
}
pub fn sc_inbox_message_do_apply(p0: i32) -> altv_wasm_shared::natives_result::ResultOfScInboxMessageDoApply {
    crate::__imports::native_sc_inbox_message_do_apply(p0)
}
pub fn sc_community_event_get_extra_data_string(p0: Option<&String>,
p1: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfScCommunityEventGetExtraDataString {
    crate::__imports::native_sc_community_event_get_extra_data_string(p0,
p1)
}
pub fn sc_inbox_message_get_data_int(p0: i32,
context: Option<&String>,
out: i32) -> altv_wasm_shared::natives_result::ResultOfScInboxMessageGetDataInt {
    crate::__imports::native_sc_inbox_message_get_data_int(p0,
context,
out)
}
pub fn sc_community_event_is_active_by_id(p0: i32) -> altv_wasm_shared::natives_result::ResultOfScCommunityEventIsActiveById {
    crate::__imports::native_sc_community_event_is_active_by_id(p0)
}
pub fn sc_inbox_send_ugcstatupdate_to_recip_list(data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfScInboxSendUgcstatupdateToRecipList {
    crate::__imports::native_sc_inbox_send_ugcstatupdate_to_recip_list(data)
}
pub fn sc_gamerdata_get_float(name: Option<&String>,
value: f32) -> altv_wasm_shared::natives_result::ResultOfScGamerdataGetFloat {
    crate::__imports::native_sc_gamerdata_get_float(name,
value)
}
pub fn sc_inbox_get_message_type_at_index(msg_index: i32) -> altv_wasm_shared::natives_result::ResultOfScInboxGetMessageTypeAtIndex {
    crate::__imports::native_sc_inbox_get_message_type_at_index(msg_index)
}
pub fn sc_has_new_rockstar_msg() -> altv_wasm_shared::natives_result::ResultOfScHasNewRockstarMsg {
    crate::__imports::native_sc_has_new_rockstar_msg()
}
pub fn sc_cache_new_rockstar_msgs(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfScCacheNewRockstarMsgs {
    crate::__imports::native_sc_cache_new_rockstar_msgs(toggle)
}
pub fn sc_community_event_get_display_name(p0: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfScCommunityEventGetDisplayName {
    crate::__imports::native_sc_community_event_get_display_name(p0)
}
pub fn sc_presence_attr_set_float(attr_hash: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfScPresenceAttrSetFloat {
    crate::__imports::native_sc_presence_attr_set_float(attr_hash,
value)
}
pub fn sc_community_event_get_extra_data_float_by_id(p0: i32,
p1: Option<&String>,
p2: f32) -> altv_wasm_shared::natives_result::ResultOfScCommunityEventGetExtraDataFloatById {
    crate::__imports::native_sc_community_event_get_extra_data_float_by_id(p0,
p1,
p2)
}
pub fn sc_gamerdata_get_int(name: Option<&String>,
value: i32) -> altv_wasm_shared::natives_result::ResultOfScGamerdataGetInt {
    crate::__imports::native_sc_gamerdata_get_int(name,
value)
}
pub fn sc_licenseplate_set_plate_data(old_plate_text: Option<&String>,
new_plate_text: Option<&String>,
plate_data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfScLicenseplateSetPlateData {
    crate::__imports::native_sc_licenseplate_set_plate_data(old_plate_text,
new_plate_text,
plate_data)
}
pub fn sc_licenseplate_get_isvalid_is_pending(token: i32) -> altv_wasm_shared::natives_result::ResultOfScLicenseplateGetIsvalidIsPending {
    crate::__imports::native_sc_licenseplate_get_isvalid_is_pending(token)
}
pub fn sc_transition_news_show_next_item() -> altv_wasm_shared::natives_result::ResultOfScTransitionNewsShowNextItem {
    crate::__imports::native_sc_transition_news_show_next_item()
}
pub fn sc_inbox_message_push_gamer_t0_recip_list(gamer_handle: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfScInboxMessagePushGamerT0RecipList {
    crate::__imports::native_sc_inbox_message_push_gamer_t0_recip_list(gamer_handle)
}
pub fn sc_get_new_rockstar_msg() -> altv_wasm_shared::natives_result::ResultOfScGetNewRockstarMsg {
    crate::__imports::native_sc_get_new_rockstar_msg()
}
pub fn sc_pause_news_init_starter_pack(p0: i32) -> altv_wasm_shared::natives_result::ResultOfScPauseNewsInitStarterPack {
    crate::__imports::native_sc_pause_news_init_starter_pack(p0)
}
pub fn sc_community_event_get_extra_data_int_for_type(p0: Option<&String>,
p1: i32,
p2: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfScCommunityEventGetExtraDataIntForType {
    crate::__imports::native_sc_community_event_get_extra_data_int_for_type(p0,
p1,
p2)
}
pub fn sc_pause_news_shutdown() -> altv_wasm_shared::natives_result::ResultOfScPauseNewsShutdown {
    crate::__imports::native_sc_pause_news_shutdown()
}
pub fn sc_profanity_check_string_ugc(string: Option<&String>,
token: i32) -> altv_wasm_shared::natives_result::ResultOfScProfanityCheckStringUgc {
    crate::__imports::native_sc_profanity_check_string_ugc(string,
token)
}
pub fn sc_licenseplate_get_check_is_valid(p0: i32) -> altv_wasm_shared::natives_result::ResultOfScLicenseplateGetCheckIsValid {
    crate::__imports::native_sc_licenseplate_get_check_is_valid(p0)
}
pub fn sc_inbox_message_get_raw_type_at_index(p0: i32) -> altv_wasm_shared::natives_result::ResultOfScInboxMessageGetRawTypeAtIndex {
    crate::__imports::native_sc_inbox_message_get_raw_type_at_index(p0)
}
pub fn sc_licenseplate_check_string(p0: Option<&String>,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfScLicenseplateCheckString {
    crate::__imports::native_sc_licenseplate_check_string(p0,
p1)
}
pub fn sc_transition_news_show_timed(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfScTransitionNewsShowTimed {
    crate::__imports::native_sc_transition_news_show_timed(p0,
p1)
}
pub fn sc_community_event_is_active() -> altv_wasm_shared::natives_result::ResultOfScCommunityEventIsActive {
    crate::__imports::native_sc_community_event_is_active()
}
pub fn sc_inbox_message_get_data_bool(p0: i32,
p1: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfScInboxMessageGetDataBool {
    crate::__imports::native_sc_inbox_message_get_data_bool(p0,
p1)
}
pub fn playstats_npc_phone(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32,
p6: i32,
p7: i32,
p8: i32,
p9: i32,
p10: i32,
p11: i32,
p12: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsNpcPhone {
    crate::__imports::native_playstats_npc_phone(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8,
p9,
p10,
p11,
p12)
}
pub fn send_metric_punish_bodyguard(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSendMetricPunishBodyguard {
    crate::__imports::native_send_metric_punish_bodyguard(p0)
}
pub fn playstats_mc_formation_ends(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsMcFormationEnds {
    crate::__imports::native_playstats_mc_formation_ends(p0,
p1,
p2,
p3,
p4,
p5,
p6)
}
pub fn stat_set_cheat_is_active() -> altv_wasm_shared::natives_result::ResultOfStatSetCheatIsActive {
    crate::__imports::native_stat_set_cheat_is_active()
}
pub fn playstats_casino_inside_track(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsCasinoInsideTrack {
    crate::__imports::native_playstats_casino_inside_track(p0)
}
pub fn playstats_recover_contraband_mission(data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfPlaystatsRecoverContrabandMission {
    crate::__imports::native_playstats_recover_contraband_mission(data)
}
pub fn playstats_bc_smash_and_grab(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsBcSmashAndGrab {
    crate::__imports::native_playstats_bc_smash_and_grab(p0)
}
pub fn playstats_started_session_in_offlinemode() -> altv_wasm_shared::natives_result::ResultOfPlaystatsStartedSessionInOfflinemode {
    crate::__imports::native_playstats_started_session_in_offlinemode()
}
pub fn playstats_casino_chip(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsCasinoChip {
    crate::__imports::native_playstats_casino_chip(p0)
}
pub fn playstats_switch_mc_emblem(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsSwitchMcEmblem {
    crate::__imports::native_playstats_switch_mc_emblem(p0,
p1,
p2,
p3,
p4)
}
pub fn playstats_fm_event_deaddrop(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsFmEventDeaddrop {
    crate::__imports::native_playstats_fm_event_deaddrop(p0)
}
pub fn playstats_change_mc_role(p0: i32,
p1: i32,
p2: i32,
p3: i32,
role: i32,
p5: i32,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsChangeMcRole {
    crate::__imports::native_playstats_change_mc_role(p0,
p1,
p2,
p3,
role,
p5,
p6)
}
pub fn stat_get_vehicle_bail_distance() -> altv_wasm_shared::natives_result::ResultOfStatGetVehicleBailDistance {
    crate::__imports::native_stat_get_vehicle_bail_distance()
}
pub fn playstats_dar_checkpoint(data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfPlaystatsDarCheckpoint {
    crate::__imports::native_playstats_dar_checkpoint(data)
}
pub fn get_packed_stat_int_code(index: i32,
character_slot: i32) -> altv_wasm_shared::natives_result::ResultOfGetPackedStatIntCode {
    crate::__imports::native_get_packed_stat_int_code(index,
character_slot)
}
pub fn leaderboards_write_add_column(p0: i32,
p1: i32,
p2: f32) -> altv_wasm_shared::natives_result::ResultOfLeaderboardsWriteAddColumn {
    crate::__imports::native_leaderboards_write_add_column(p0,
p1,
p2)
}
pub fn playstats_casino_lucky_seven(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsCasinoLuckySeven {
    crate::__imports::native_playstats_casino_lucky_seven(p0)
}
pub fn set_freemode_prologue_done(p0: i32,
character_slot: i32) -> altv_wasm_shared::natives_result::ResultOfSetFreemodePrologueDone {
    crate::__imports::native_set_freemode_prologue_done(p0,
character_slot)
}
pub fn stat_slot_is_loaded(stat_slot: i32) -> altv_wasm_shared::natives_result::ResultOfStatSlotIsLoaded {
    crate::__imports::native_stat_slot_is_loaded(stat_slot)
}
pub fn playstats_gunrunning_mission_ended(data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfPlaystatsGunrunningMissionEnded {
    crate::__imports::native_playstats_gunrunning_mission_ended(data)
}
pub fn playstats_friend_activity(p0: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfPlaystatsFriendActivity {
    crate::__imports::native_playstats_friend_activity(p0,
p1)
}
pub fn leaderboards_get_number_of_columns(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfLeaderboardsGetNumberOfColumns {
    crate::__imports::native_leaderboards_get_number_of_columns(p0,
p1)
}
pub fn playstats_carclub_challenge(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsCarclubChallenge {
    crate::__imports::native_playstats_carclub_challenge(p0,
p1,
p2,
p3)
}
pub fn stat_get_bool(stat_hash: u32,
out_value: bool,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfStatGetBool {
    crate::__imports::native_stat_get_bool(stat_hash,
out_value,
p2)
}
pub fn presence_event_updatestat_int(stat_hash: u32,
value: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfPresenceEventUpdatestatInt {
    crate::__imports::native_presence_event_updatestat_int(stat_hash,
value,
p2)
}
pub fn playstats_ros_bet(amount: i32,
act: i32,
player: u32,
cm: f32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsRosBet {
    crate::__imports::native_playstats_ros_bet(amount,
act,
player,
cm)
}
pub fn playstats_job_lts_round_end(p0: shared::MemoryBufferId,
p1: shared::MemoryBufferId,
p2: shared::MemoryBufferId,
p3: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfPlaystatsJobLtsRoundEnd {
    crate::__imports::native_playstats_job_lts_round_end(p0,
p1,
p2,
p3)
}
pub fn playstats_bc_protection_racket(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsBcProtectionRacket {
    crate::__imports::native_playstats_bc_protection_racket(p0)
}
pub fn set_packed_stat_int_code(index: i32,
value: i32,
character_slot: i32) -> altv_wasm_shared::natives_result::ResultOfSetPackedStatIntCode {
    crate::__imports::native_set_packed_stat_int_code(index,
value,
character_slot)
}
pub fn playstats_fm_event_kingofthecastle(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsFmEventKingofthecastle {
    crate::__imports::native_playstats_fm_event_kingofthecastle(p0)
}
pub fn playstats_shop_item(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsShopItem {
    crate::__imports::native_playstats_shop_item(p0,
p1,
p2,
p3,
p4)
}
pub fn stat_set_gxt_label(stat_name: u32,
value: Option<&String>,
save: bool) -> altv_wasm_shared::natives_result::ResultOfStatSetGxtLabel {
    crate::__imports::native_stat_set_gxt_label(stat_name,
value,
save)
}
pub fn playstats_freemode_casino_mission_ended(data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfPlaystatsFreemodeCasinoMissionEnded {
    crate::__imports::native_playstats_freemode_casino_mission_ended(data)
}
pub fn playstats_robbery_prep(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsRobberyPrep {
    crate::__imports::native_playstats_robbery_prep(p0)
}
pub fn playstats_fm_event_pennedin(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsFmEventPennedin {
    crate::__imports::native_playstats_fm_event_pennedin(p0)
}
pub fn stat_get_flying_altitude(out_value: f32) -> altv_wasm_shared::natives_result::ResultOfStatGetFlyingAltitude {
    crate::__imports::native_stat_get_flying_altitude(out_value)
}
pub fn playstats_crate_drop_mission_done(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32,
p6: i32,
p7: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsCrateDropMissionDone {
    crate::__imports::native_playstats_crate_drop_mission_done(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7)
}
pub fn playstats_instanced_heist_ended(data: shared::MemoryBufferId,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsInstancedHeistEnded {
    crate::__imports::native_playstats_instanced_heist_ended(data,
p1,
p2,
p3)
}
pub fn playstats_pimenu_hide_options(data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfPlaystatsPimenuHideOptions {
    crate::__imports::native_playstats_pimenu_hide_options(data)
}
pub fn stat_get_user_id(stat_hash: u32) -> altv_wasm_shared::natives_result::ResultOfStatGetUserId {
    crate::__imports::native_stat_get_user_id(stat_hash)
}
pub fn playstats_casino_inside_track_light(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsCasinoInsideTrackLight {
    crate::__imports::native_playstats_casino_inside_track_light(p0)
}
pub fn playstats_defend_contraband_mission(data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfPlaystatsDefendContrabandMission {
    crate::__imports::native_playstats_defend_contraband_mission(data)
}
pub fn stat_reset_all_online_character_stats(p0: i32) -> altv_wasm_shared::natives_result::ResultOfStatResetAllOnlineCharacterStats {
    crate::__imports::native_stat_reset_all_online_character_stats(p0)
}
pub fn playstats_rival_behavior(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32,
p6: i32,
p7: i32,
p8: i32,
p9: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsRivalBehavior {
    crate::__imports::native_playstats_rival_behavior(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8,
p9)
}
pub fn playstats_hub_entry(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsHubEntry {
    crate::__imports::native_playstats_hub_entry(p0)
}
pub fn playstats_bw_fragile_goods(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsBwFragileGoods {
    crate::__imports::native_playstats_bw_fragile_goods(p0)
}
pub fn playstats_change_mc_outfit(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsChangeMcOutfit {
    crate::__imports::native_playstats_change_mc_outfit(p0,
p1,
p2,
p3,
p4)
}
pub fn get_packed_ng_int_stat_key(index: i32,
sp_stat: bool,
char_stat: bool,
character: i32,
section: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetPackedNgIntStatKey {
    crate::__imports::native_get_packed_ng_int_stat_key(index,
sp_stat,
char_stat,
character,
section)
}
pub fn playstats_import_export_mission_done(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsImportExportMissionDone {
    crate::__imports::native_playstats_import_export_mission_done(p0,
p1,
p2,
p3)
}
pub fn stat_set_date(stat_name: u32,
value: shared::MemoryBufferId,
num_fields: i32,
save: bool) -> altv_wasm_shared::natives_result::ResultOfStatSetDate {
    crate::__imports::native_stat_set_date(stat_name,
value,
num_fields,
save)
}
pub fn playstats_fm_event_huntbeast(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsFmEventHuntbeast {
    crate::__imports::native_playstats_fm_event_huntbeast(p0)
}
pub fn stat_get_number_of_seconds(stat_name: u32) -> altv_wasm_shared::natives_result::ResultOfStatGetNumberOfSeconds {
    crate::__imports::native_stat_get_number_of_seconds(stat_name)
}
pub fn playstats_warehouse_mission_ended(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsWarehouseMissionEnded {
    crate::__imports::native_playstats_warehouse_mission_ended(p0)
}
pub fn playstats_heist3_finale(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsHeist3Finale {
    crate::__imports::native_playstats_heist3_finale(p0)
}
pub fn leaderboards_write_add_column_long(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfLeaderboardsWriteAddColumnLong {
    crate::__imports::native_leaderboards_write_add_column_long(p0,
p1,
p2)
}
pub fn playstats_heist4_hack(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsHeist4Hack {
    crate::__imports::native_playstats_heist4_hack(p0,
p1,
p2,
p3,
p4)
}
pub fn leaderboards_read_successful(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfLeaderboardsReadSuccessful {
    crate::__imports::native_leaderboards_read_successful(p0,
p1,
p2)
}
pub fn presence_event_updatestat_float(stat_hash: u32,
value: f32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfPresenceEventUpdatestatFloat {
    crate::__imports::native_presence_event_updatestat_float(stat_hash,
value,
p2)
}
pub fn playstats_business_battle_ended(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsBusinessBattleEnded {
    crate::__imports::native_playstats_business_battle_ended(p0)
}
pub fn playstats_smuggler_mission_ended(data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfPlaystatsSmugglerMissionEnded {
    crate::__imports::native_playstats_smuggler_mission_ended(data)
}
pub fn stat_save_migration_consume_content(content_id: u32,
src_platform: Option<&String>,
src_gamer_handle: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfStatSaveMigrationConsumeContent {
    crate::__imports::native_stat_save_migration_consume_content(content_id,
src_platform,
src_gamer_handle)
}
pub fn stat_get_current_driving_reverse_distance() -> altv_wasm_shared::natives_result::ResultOfStatGetCurrentDrivingReverseDistance {
    crate::__imports::native_stat_get_current_driving_reverse_distance()
}
pub fn stat_start_record_stat(stat_type: i32,
value_type: i32) -> altv_wasm_shared::natives_result::ResultOfStatStartRecordStat {
    crate::__imports::native_stat_start_record_stat(stat_type,
value_type)
}
pub fn leaderboards2_read_get_row_data_info(p0: i32,
p1: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfLeaderboards2ReadGetRowDataInfo {
    crate::__imports::native_leaderboards2_read_get_row_data_info(p0,
p1)
}
pub fn playstats_cloth_change(p0: u32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsClothChange {
    crate::__imports::native_playstats_cloth_change(p0,
p1,
p2,
p3,
p4)
}
pub fn stat_get_pos(stat_name: u32,
out_x: f32,
out_y: f32,
out_z: f32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfStatGetPos {
    crate::__imports::native_stat_get_pos(stat_name,
out_x,
out_y,
out_z,
p4)
}
pub fn playstats_stone_hatchet_ended(data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfPlaystatsStoneHatchetEnded {
    crate::__imports::native_playstats_stone_hatchet_ended(data)
}
pub fn playstats_switch_passive_mode(p0: bool,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsSwitchPassiveMode {
    crate::__imports::native_playstats_switch_passive_mode(p0,
p1,
p2,
p3)
}
pub fn leaderboards2_read_get_row_data_float(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfLeaderboards2ReadGetRowDataFloat {
    crate::__imports::native_leaderboards2_read_get_row_data_float(p0,
p1)
}
pub fn set_profile_setting_creator_dm_done(value: i32) -> altv_wasm_shared::natives_result::ResultOfSetProfileSettingCreatorDmDone {
    crate::__imports::native_set_profile_setting_creator_dm_done(value)
}
pub fn playstats_fm_event_checkpointcollection(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsFmEventCheckpointcollection {
    crate::__imports::native_playstats_fm_event_checkpointcollection(p0)
}
pub fn playstats_casino_blackjack(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsCasinoBlackjack {
    crate::__imports::native_playstats_casino_blackjack(p0)
}
pub fn start_being_boss(p0: i32) -> altv_wasm_shared::natives_result::ResultOfStartBeingBoss {
    crate::__imports::native_start_being_boss(p0)
}
pub fn playstats_fm_event_passtheparcel(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsFmEventPasstheparcel {
    crate::__imports::native_playstats_fm_event_passtheparcel(p0)
}
pub fn stat_network_increment_on_suicide(p0: i32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfStatNetworkIncrementOnSuicide {
    crate::__imports::native_stat_network_increment_on_suicide(p0,
p1)
}
pub fn change_goon_looking_for_work(p0: i32) -> altv_wasm_shared::natives_result::ResultOfChangeGoonLookingForWork {
    crate::__imports::native_change_goon_looking_for_work(p0)
}
pub fn playstats_append_director_metric(p0: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfPlaystatsAppendDirectorMetric {
    crate::__imports::native_playstats_append_director_metric(p0)
}
pub fn playstats_fm_mission_end(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsFmMissionEnd {
    crate::__imports::native_playstats_fm_mission_end(p0,
p1,
p2)
}
pub fn playstats_award_xp(amount: i32,
r#type: u32,
category: u32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsAwardXp {
    crate::__imports::native_playstats_award_xp(amount,
r#type,
category)
}
pub fn playstats_award_bad_sport(id: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsAwardBadSport {
    crate::__imports::native_playstats_award_bad_sport(id)
}
pub fn stat_set_float(stat_name: u32,
value: f32,
save: bool) -> altv_wasm_shared::natives_result::ResultOfStatSetFloat {
    crate::__imports::native_stat_set_float(stat_name,
value,
save)
}
pub fn playstats_player_style(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsPlayerStyle {
    crate::__imports::native_playstats_player_style(p0)
}
pub fn stat_delete_slot(p0: i32) -> altv_wasm_shared::natives_result::ResultOfStatDeleteSlot {
    crate::__imports::native_stat_delete_slot(p0)
}
pub fn playstats_kill_yourself() -> altv_wasm_shared::natives_result::ResultOfPlaystatsKillYourself {
    crate::__imports::native_playstats_kill_yourself()
}
pub fn stat_set_bool(stat_name: u32,
value: bool,
save: bool) -> altv_wasm_shared::natives_result::ResultOfStatSetBool {
    crate::__imports::native_stat_set_bool(stat_name,
value,
save)
}
pub fn stat_migrate_check_already_done() -> altv_wasm_shared::natives_result::ResultOfStatMigrateCheckAlreadyDone {
    crate::__imports::native_stat_migrate_check_already_done()
}
pub fn playstats_fast_trvl(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32,
p6: i32,
p7: i32,
p8: i32,
p9: i32,
p10: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsFastTrvl {
    crate::__imports::native_playstats_fast_trvl(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8,
p9,
p10)
}
pub fn playstats_arcade_love_match(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsArcadeLoveMatch {
    crate::__imports::native_playstats_arcade_love_match(p0,
p1)
}
pub fn stat_save_migration_cancel_pending_operation() -> altv_wasm_shared::natives_result::ResultOfStatSaveMigrationCancelPendingOperation {
    crate::__imports::native_stat_save_migration_cancel_pending_operation()
}
pub fn playstats_background_script_action(action: Option<&String>,
value: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsBackgroundScriptAction {
    crate::__imports::native_playstats_background_script_action(action,
value)
}
pub fn playstats_earned_mc_points(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsEarnedMcPoints {
    crate::__imports::native_playstats_earned_mc_points(p0,
p1,
p2,
p3,
p4,
p5)
}
pub fn playstats_ban_alert(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsBanAlert {
    crate::__imports::native_playstats_ban_alert(p0)
}
pub fn playstats_arcade_game(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsArcadeGame {
    crate::__imports::native_playstats_arcade_game(p0,
p1,
p2,
p3,
p4,
p5,
p6)
}
pub fn playstats_heist3_prep(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsHeist3Prep {
    crate::__imports::native_playstats_heist3_prep(p0)
}
pub fn playstats_bc_cashing(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsBcCashing {
    crate::__imports::native_playstats_bc_cashing(p0)
}
pub fn stat_get_license_plate(stat_name: u32) -> altv_wasm_shared::natives_result::ResultOfStatGetLicensePlate {
    crate::__imports::native_stat_get_license_plate(stat_name)
}
pub fn set_profile_setting_creator_ctf_done(value: i32) -> altv_wasm_shared::natives_result::ResultOfSetProfileSettingCreatorCtfDone {
    crate::__imports::native_set_profile_setting_creator_ctf_done(value)
}
pub fn stat_get_current_speed() -> altv_wasm_shared::natives_result::ResultOfStatGetCurrentSpeed {
    crate::__imports::native_stat_get_current_speed()
}
pub fn stat_get_cancel_save_migration_status() -> altv_wasm_shared::natives_result::ResultOfStatGetCancelSaveMigrationStatus {
    crate::__imports::native_stat_get_cancel_save_migration_status()
}
pub fn stat_set_open_savetype_in_job(p0: i32) -> altv_wasm_shared::natives_result::ResultOfStatSetOpenSavetypeInJob {
    crate::__imports::native_stat_set_open_savetype_in_job(p0)
}
pub fn leaderboards_get_cache_number_of_rows(p0: i32) -> altv_wasm_shared::natives_result::ResultOfLeaderboardsGetCacheNumberOfRows {
    crate::__imports::native_leaderboards_get_cache_number_of_rows(p0)
}
pub fn playstats_hub_exit(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsHubExit {
    crate::__imports::native_playstats_hub_exit(p0)
}
pub fn stat_community_start_synch() -> altv_wasm_shared::natives_result::ResultOfStatCommunityStartSynch {
    crate::__imports::native_stat_community_start_synch()
}
pub fn stat_migrate_check_get_is_platform_available(p0: i32) -> altv_wasm_shared::natives_result::ResultOfStatMigrateCheckGetIsPlatformAvailable {
    crate::__imports::native_stat_migrate_check_get_is_platform_available(p0)
}
pub fn playstats_quit_mode(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsQuitMode {
    crate::__imports::native_playstats_quit_mode(p0,
p1,
p2,
p3,
p4)
}
pub fn playstats_njvs_vote(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsNjvsVote {
    crate::__imports::native_playstats_njvs_vote(p0)
}
pub fn leaderboards2_read_by_radius(p0: shared::MemoryBufferId,
p1: i32,
p2: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfLeaderboards2ReadByRadius {
    crate::__imports::native_leaderboards2_read_by_radius(p0,
p1,
p2)
}
pub fn playstats_idle_kick(ms_stood_idle: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsIdleKick {
    crate::__imports::native_playstats_idle_kick(ms_stood_idle)
}
pub fn get_player_has_driven_all_vehicles() -> altv_wasm_shared::natives_result::ResultOfGetPlayerHasDrivenAllVehicles {
    crate::__imports::native_get_player_has_driven_all_vehicles()
}
pub fn playstats_bw_head_hunter(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsBwHeadHunter {
    crate::__imports::native_playstats_bw_head_hunter(p0)
}
pub fn playstats_cheat_applied(cheat: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfPlaystatsCheatApplied {
    crate::__imports::native_playstats_cheat_applied(cheat)
}
pub fn playstats_hit_contraband_destroy_limit(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsHitContrabandDestroyLimit {
    crate::__imports::native_playstats_hit_contraband_destroy_limit(p0)
}
pub fn get_packed_int_stat_key(index: i32,
sp_stat: bool,
char_stat: bool,
character: i32) -> altv_wasm_shared::natives_result::ResultOfGetPackedIntStatKey {
    crate::__imports::native_get_packed_int_stat_key(index,
sp_stat,
char_stat,
character)
}
pub fn stat_disable_stats_tracking() -> altv_wasm_shared::natives_result::ResultOfStatDisableStatsTracking {
    crate::__imports::native_stat_disable_stats_tracking()
}
pub fn presence_event_updatestat_int_with_string(stat_hash: u32,
value: i32,
p2: i32,
string: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfPresenceEventUpdatestatIntWithString {
    crate::__imports::native_presence_event_updatestat_int_with_string(stat_hash,
value,
p2,
string)
}
pub fn stat_get_masked_int(stat_hash: u32,
out_value: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfStatGetMaskedInt {
    crate::__imports::native_stat_get_masked_int(stat_hash,
out_value,
p2,
p3,
p4)
}
pub fn playstats_fm_event_competitiveurbanwarfare(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsFmEventCompetitiveurbanwarfare {
    crate::__imports::native_playstats_fm_event_competitiveurbanwarfare(p0)
}
pub fn playstats_casino_roulette_light(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsCasinoRouletteLight {
    crate::__imports::native_playstats_casino_roulette_light(p0)
}
pub fn playstats_drone_usage(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsDroneUsage {
    crate::__imports::native_playstats_drone_usage(p0,
p1,
p2)
}
pub fn playstats_spin_wheel(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsSpinWheel {
    crate::__imports::native_playstats_spin_wheel(p0,
p1,
p2,
p3)
}
pub fn playstats_bw_assault(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsBwAssault {
    crate::__imports::native_playstats_bw_assault(p0)
}
pub fn stat_set_profile_setting_value(profile_setting: i32,
value: i32) -> altv_wasm_shared::natives_result::ResultOfStatSetProfileSettingValue {
    crate::__imports::native_stat_set_profile_setting_value(profile_setting,
value)
}
pub fn playstats_carclub_prize(p0: i32,
vehicle_model: u32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsCarclubPrize {
    crate::__imports::native_playstats_carclub_prize(p0,
vehicle_model)
}
pub fn playstats_oddjob_done(total_time_ms: i32,
p1: i32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfPlaystatsOddjobDone {
    crate::__imports::native_playstats_oddjob_done(total_time_ms,
p1,
p2)
}
pub fn stat_set_license_plate(stat_name: u32,
str: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfStatSetLicensePlate {
    crate::__imports::native_stat_set_license_plate(stat_name,
str)
}
pub fn playstats_fm_event_challenges(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsFmEventChallenges {
    crate::__imports::native_playstats_fm_event_challenges(p0)
}
pub fn stat_get_block_saves() -> altv_wasm_shared::natives_result::ResultOfStatGetBlockSaves {
    crate::__imports::native_stat_get_block_saves()
}
pub fn get_boss_goon_uuid(character_slot: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfGetBossGoonUuid {
    crate::__imports::native_get_boss_goon_uuid(character_slot,
p1,
p2)
}
pub fn end_being_goon(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfEndBeingGoon {
    crate::__imports::native_end_being_goon(p0,
p1,
p2,
p3,
p4)
}
pub fn playstats_create_match_history_id2(player_account_id: i32,
posix_time: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsCreateMatchHistoryId2 {
    crate::__imports::native_playstats_create_match_history_id2(player_account_id,
posix_time)
}
pub fn stat_get_challenge_flying_dist() -> altv_wasm_shared::natives_result::ResultOfStatGetChallengeFlyingDist {
    crate::__imports::native_stat_get_challenge_flying_dist()
}
pub fn force_cloud_mp_stats_download_and_overwrite_local_save() -> altv_wasm_shared::natives_result::ResultOfForceCloudMpStatsDownloadAndOverwriteLocalSave {
    crate::__imports::native_force_cloud_mp_stats_download_and_overwrite_local_save()
}
pub fn playstats_arena_wars_spectator(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsArenaWarsSpectator {
    crate::__imports::native_playstats_arena_wars_spectator(p0,
p1,
p2,
p3,
p4)
}
pub fn send_metric_ghosting_to_player(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSendMetricGhostingToPlayer {
    crate::__imports::native_send_metric_ghosting_to_player(p0)
}
pub fn playstats_award_nav(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsAwardNav {
    crate::__imports::native_playstats_award_nav(p0,
p1,
p2,
p3)
}
pub fn playstats_random_mission_done(name: Option<&String>,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsRandomMissionDone {
    crate::__imports::native_playstats_random_mission_done(name,
p1,
p2,
p3)
}
pub fn leaderboards2_read_get_row_data_end() -> altv_wasm_shared::natives_result::ResultOfLeaderboards2ReadGetRowDataEnd {
    crate::__imports::native_leaderboards2_read_get_row_data_end()
}
pub fn set_job_activity_id_started(p0: i32,
character_slot: i32) -> altv_wasm_shared::natives_result::ResultOfSetJobActivityIdStarted {
    crate::__imports::native_set_job_activity_id_started(p0,
character_slot)
}
pub fn playstats_bc_point_to_point(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsBcPointToPoint {
    crate::__imports::native_playstats_bc_point_to_point(p0)
}
pub fn stat_get_number_of_minutes(stat_name: u32) -> altv_wasm_shared::natives_result::ResultOfStatGetNumberOfMinutes {
    crate::__imports::native_stat_get_number_of_minutes(stat_name)
}
pub fn stat_get_int(stat_hash: u32,
out_value: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfStatGetInt {
    crate::__imports::native_stat_get_int(stat_hash,
out_value,
p2)
}
pub fn hired_limo(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfHiredLimo {
    crate::__imports::native_hired_limo(p0,
p1)
}
pub fn playstats_acquired_hidden_package(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsAcquiredHiddenPackage {
    crate::__imports::native_playstats_acquired_hidden_package(p0)
}
pub fn set_freemode_strand_progression_status(profile_setting: i32,
setting_value: i32) -> altv_wasm_shared::natives_result::ResultOfSetFreemodeStrandProgressionStatus {
    crate::__imports::native_set_freemode_strand_progression_status(profile_setting,
setting_value)
}
pub fn playstats_bc_car_jacking(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsBcCarJacking {
    crate::__imports::native_playstats_bc_car_jacking(p0)
}
pub fn stat_set_masked_int(stat_name: u32,
p1: i32,
p2: i32,
p3: i32,
save: bool) -> altv_wasm_shared::natives_result::ResultOfStatSetMaskedInt {
    crate::__imports::native_stat_set_masked_int(stat_name,
p1,
p2,
p3,
save)
}
pub fn playstats_mission_over(p0: Option<&String>,
p1: i32,
p2: i32,
p3: bool,
p4: bool,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfPlaystatsMissionOver {
    crate::__imports::native_playstats_mission_over(p0,
p1,
p2,
p3,
p4,
p5)
}
pub fn leaderboards_read_clear(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfLeaderboardsReadClear {
    crate::__imports::native_leaderboards_read_clear(p0,
p1,
p2)
}
pub fn playstats_bc_salvage(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsBcSalvage {
    crate::__imports::native_playstats_bc_salvage(p0)
}
pub fn stat_save_pending() -> altv_wasm_shared::natives_result::ResultOfStatSavePending {
    crate::__imports::native_stat_save_pending()
}
pub fn playstats_impexp_mission_ended(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsImpexpMissionEnded {
    crate::__imports::native_playstats_impexp_mission_ended(p0)
}
pub fn stat_cloud_slot_save_failed(p0: i32) -> altv_wasm_shared::natives_result::ResultOfStatCloudSlotSaveFailed {
    crate::__imports::native_stat_cloud_slot_save_failed(p0)
}
pub fn leaderboards2_read_by_score_int(p0: shared::MemoryBufferId,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfLeaderboards2ReadByScoreInt {
    crate::__imports::native_leaderboards2_read_by_score_int(p0,
p1,
p2)
}
pub fn stat_cloud_slot_load_failed(p0: i32) -> altv_wasm_shared::natives_result::ResultOfStatCloudSlotLoadFailed {
    crate::__imports::native_stat_cloud_slot_load_failed(p0)
}
pub fn playstats_master_control(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsMasterControl {
    crate::__imports::native_playstats_master_control(p0,
p1,
p2,
p3)
}
pub fn playstats_nightclub_mission_ended(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsNightclubMissionEnded {
    crate::__imports::native_playstats_nightclub_mission_ended(p0)
}
pub fn playstats_dupe_detected(data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfPlaystatsDupeDetected {
    crate::__imports::native_playstats_dupe_detected(data)
}
pub fn stat_get_current_front_wheel_distance() -> altv_wasm_shared::natives_result::ResultOfStatGetCurrentFrontWheelDistance {
    crate::__imports::native_stat_get_current_front_wheel_distance()
}
pub fn playstats_fm_event_hotproperty(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsFmEventHotproperty {
    crate::__imports::native_playstats_fm_event_hotproperty(p0)
}
pub fn playstats_enter_session_pack(data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfPlaystatsEnterSessionPack {
    crate::__imports::native_playstats_enter_session_pack(data)
}
pub fn playstats_bw_hunt_the_boss(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsBwHuntTheBoss {
    crate::__imports::native_playstats_bw_hunt_the_boss(p0)
}
pub fn leaderboards2_read_get_row_data_int(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfLeaderboards2ReadGetRowDataInt {
    crate::__imports::native_leaderboards2_read_get_row_data_int(p0,
p1)
}
pub fn stat_get_save_migration_status(data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfStatGetSaveMigrationStatus {
    crate::__imports::native_stat_get_save_migration_status(data)
}
pub fn playstats_inventory(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsInventory {
    crate::__imports::native_playstats_inventory(p0)
}
pub fn playstats_mc_clubhouse_activity(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32,
p6: i32,
p7: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsMcClubhouseActivity {
    crate::__imports::native_playstats_mc_clubhouse_activity(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7)
}
pub fn playstats_acid_mission_end(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsAcidMissionEnd {
    crate::__imports::native_playstats_acid_mission_end(p0)
}
pub fn playstats_stop_tracking_stunts() -> altv_wasm_shared::natives_result::ResultOfPlaystatsStopTrackingStunts {
    crate::__imports::native_playstats_stop_tracking_stunts()
}
pub fn stat_get_date(stat_hash: u32,
out_value: shared::MemoryBufferId,
num_fields: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfStatGetDate {
    crate::__imports::native_stat_get_date(stat_hash,
out_value,
num_fields,
p3)
}
pub fn stat_is_recording_stat() -> altv_wasm_shared::natives_result::ResultOfStatIsRecordingStat {
    crate::__imports::native_stat_is_recording_stat()
}
pub fn playstats_fm_event_urbanwarfare(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsFmEventUrbanwarfare {
    crate::__imports::native_playstats_fm_event_urbanwarfare(p0)
}
pub fn stat_set_user_id(stat_name: u32,
value: Option<&String>,
save: bool) -> altv_wasm_shared::natives_result::ResultOfStatSetUserId {
    crate::__imports::native_stat_set_user_id(stat_name,
value,
save)
}
pub fn playstats_bw_bossonbossdeathmatch(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsBwBossonbossdeathmatch {
    crate::__imports::native_playstats_bw_bossonbossdeathmatch(p0)
}
pub fn leaderboards_clear_cache_data_id(p0: i32) -> altv_wasm_shared::natives_result::ResultOfLeaderboardsClearCacheDataId {
    crate::__imports::native_leaderboards_clear_cache_data_id(p0)
}
pub fn playstats_quickfix_tool(element: i32,
item: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfPlaystatsQuickfixTool {
    crate::__imports::native_playstats_quickfix_tool(element,
item)
}
pub fn leaderboards_get_cache_data_row(p0: i32,
p1: i32,
p2: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfLeaderboardsGetCacheDataRow {
    crate::__imports::native_leaderboards_get_cache_data_row(p0,
p1,
p2)
}
pub fn leaderboards2_read_friends_by_row(p0: shared::MemoryBufferId,
p1: shared::MemoryBufferId,
p2: i32,
p3: bool,
p4: i32,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfLeaderboards2ReadFriendsByRow {
    crate::__imports::native_leaderboards2_read_friends_by_row(p0,
p1,
p2,
p3,
p4,
p5)
}
pub fn playstats_start_tracking_stunts() -> altv_wasm_shared::natives_result::ResultOfPlaystatsStartTrackingStunts {
    crate::__imports::native_playstats_start_tracking_stunts()
}
pub fn playstats_heist3_hack(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsHeist3Hack {
    crate::__imports::native_playstats_heist3_hack(p0,
p1,
p2,
p3,
p4,
p5)
}
pub fn playstats_npc_invite(p0: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfPlaystatsNpcInvite {
    crate::__imports::native_playstats_npc_invite(p0)
}
pub fn playstats_bc_most_wanted(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsBcMostWanted {
    crate::__imports::native_playstats_bc_most_wanted(p0)
}
pub fn packed_stat_get_int_stat_index(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPackedStatGetIntStatIndex {
    crate::__imports::native_packed_stat_get_int_stat_index(p0)
}
pub fn playstats_casino_roulette(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsCasinoRoulette {
    crate::__imports::native_playstats_casino_roulette(p0)
}
pub fn playstats_pegasus_as_personal_aircraft(model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsPegasusAsPersonalAircraft {
    crate::__imports::native_playstats_pegasus_as_personal_aircraft(model_hash)
}
pub fn start_being_goon(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfStartBeingGoon {
    crate::__imports::native_start_being_goon(p0,
p1,
p2)
}
pub fn stat_enable_stats_tracking() -> altv_wasm_shared::natives_result::ResultOfStatEnableStatsTracking {
    crate::__imports::native_stat_enable_stats_tracking()
}
pub fn stat_migrate_savegame_get_status() -> altv_wasm_shared::natives_result::ResultOfStatMigrateSavegameGetStatus {
    crate::__imports::native_stat_migrate_savegame_get_status()
}
pub fn stat_clear_dirty_read_detected() -> altv_wasm_shared::natives_result::ResultOfStatClearDirtyReadDetected {
    crate::__imports::native_stat_clear_dirty_read_detected()
}
pub fn stat_increment(stat_name: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfStatIncrement {
    crate::__imports::native_stat_increment(stat_name,
value)
}
pub fn playstats_race_checkpoint(p0: u32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsRaceCheckpoint {
    crate::__imports::native_playstats_race_checkpoint(p0,
p1,
p2,
p3,
p4)
}
pub fn leaderboards_get_cache_exists(p0: i32) -> altv_wasm_shared::natives_result::ResultOfLeaderboardsGetCacheExists {
    crate::__imports::native_leaderboards_get_cache_exists(p0)
}
pub fn stat_get_current_jump_distance() -> altv_wasm_shared::natives_result::ResultOfStatGetCurrentJumpDistance {
    crate::__imports::native_stat_get_current_jump_distance()
}
pub fn playstats_activity_done(p0: i32,
activity_id: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsActivityDone {
    crate::__imports::native_playstats_activity_done(p0,
activity_id)
}
pub fn leaderboards2_read_get_row_data_start(p0: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfLeaderboards2ReadGetRowDataStart {
    crate::__imports::native_leaderboards2_read_get_row_data_start(p0)
}
pub fn stat_load_pending(stat_slot: i32) -> altv_wasm_shared::natives_result::ResultOfStatLoadPending {
    crate::__imports::native_stat_load_pending(stat_slot)
}
pub fn leaderboards_read_any_pending() -> altv_wasm_shared::natives_result::ResultOfLeaderboardsReadAnyPending {
    crate::__imports::native_leaderboards_read_any_pending()
}
pub fn leaderboards_read_clear_all() -> altv_wasm_shared::natives_result::ResultOfLeaderboardsReadClearAll {
    crate::__imports::native_leaderboards_read_clear_all()
}
pub fn end_being_boss(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfEndBeingBoss {
    crate::__imports::native_end_being_boss(p0,
p1)
}
pub fn stat_migrate_savegame_start(platform_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfStatMigrateSavegameStart {
    crate::__imports::native_stat_migrate_savegame_start(platform_name)
}
pub fn stat_load(stat_slot: i32) -> altv_wasm_shared::natives_result::ResultOfStatLoad {
    crate::__imports::native_stat_load(stat_slot)
}
pub fn playstats_bw_belly_of_the_beast(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsBwBellyOfTheBeast {
    crate::__imports::native_playstats_bw_belly_of_the_beast(p0)
}
pub fn playstats_job_lts_end(p0: shared::MemoryBufferId,
p1: shared::MemoryBufferId,
p2: shared::MemoryBufferId,
p3: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfPlaystatsJobLtsEnd {
    crate::__imports::native_playstats_job_lts_end(p0,
p1,
p2,
p3)
}
pub fn stat_stop_record_stat() -> altv_wasm_shared::natives_result::ResultOfStatStopRecordStat {
    crate::__imports::native_stat_stop_record_stat()
}
pub fn stat_local_reset_all_online_character_stats(p0: i32) -> altv_wasm_shared::natives_result::ResultOfStatLocalResetAllOnlineCharacterStats {
    crate::__imports::native_stat_local_reset_all_online_character_stats(p0)
}
pub fn stat_clear_pending_saves(p0: i32) -> altv_wasm_shared::natives_result::ResultOfStatClearPendingSaves {
    crate::__imports::native_stat_clear_pending_saves(p0)
}
pub fn stat_set_string(stat_name: u32,
value: Option<&String>,
save: bool) -> altv_wasm_shared::natives_result::ResultOfStatSetString {
    crate::__imports::native_stat_set_string(stat_name,
value,
save)
}
pub fn stat_get_current_rear_wheel_distance() -> altv_wasm_shared::natives_result::ResultOfStatGetCurrentRearWheelDistance {
    crate::__imports::native_stat_get_current_rear_wheel_distance()
}
pub fn leaderboards2_read_by_row(p0: shared::MemoryBufferId,
p1: shared::MemoryBufferId,
p2: i32,
p3: shared::MemoryBufferId,
p4: i32,
p5: shared::MemoryBufferId,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfLeaderboards2ReadByRow {
    crate::__imports::native_leaderboards2_read_by_row(p0,
p1,
p2,
p3,
p4,
p5,
p6)
}
pub fn send_metric_vip_poach(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfSendMetricVipPoach {
    crate::__imports::native_send_metric_vip_poach(p0,
p1,
p2)
}
pub fn leaderboards_read_pending(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfLeaderboardsReadPending {
    crate::__imports::native_leaderboards_read_pending(p0,
p1,
p2)
}
pub fn playstats_race_to_point_mission_done(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsRaceToPointMissionDone {
    crate::__imports::native_playstats_race_to_point_mission_done(p0,
p1,
p2,
p3)
}
pub fn leaderboards2_write_data(p0: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfLeaderboards2WriteData {
    crate::__imports::native_leaderboards2_write_data(p0)
}
pub fn playstats_crate_created(p0: f32,
p1: f32,
p2: f32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsCrateCreated {
    crate::__imports::native_playstats_crate_created(p0,
p1,
p2)
}
pub fn stat_get_current_skydiving_distance() -> altv_wasm_shared::natives_result::ResultOfStatGetCurrentSkydivingDistance {
    crate::__imports::native_stat_get_current_skydiving_distance()
}
pub fn stat_community_synch_is_pending() -> altv_wasm_shared::natives_result::ResultOfStatCommunitySynchIsPending {
    crate::__imports::native_stat_community_synch_is_pending()
}
pub fn playstats_dj_usage(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsDjUsage {
    crate::__imports::native_playstats_dj_usage(p0,
p1)
}
pub fn stat_set_int(stat_name: u32,
value: i32,
save: bool) -> altv_wasm_shared::natives_result::ResultOfStatSetInt {
    crate::__imports::native_stat_set_int(stat_name,
value,
save)
}
pub fn stat_rollback_save_migration() -> altv_wasm_shared::natives_result::ResultOfStatRollbackSaveMigration {
    crate::__imports::native_stat_rollback_save_migration()
}
pub fn set_profile_setting_prologue_complete() -> altv_wasm_shared::natives_result::ResultOfSetProfileSettingPrologueComplete {
    crate::__imports::native_set_profile_setting_prologue_complete()
}
pub fn playstats_arena_wars_ended(data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfPlaystatsArenaWarsEnded {
    crate::__imports::native_playstats_arena_wars_ended(data)
}
pub fn playstats_copy_rank_into_new_slot(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsCopyRankIntoNewSlot {
    crate::__imports::native_playstats_copy_rank_into_new_slot(p0,
p1,
p2,
p3,
p4,
p5,
p6)
}
pub fn leaderboards_cache_data_row(p0: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfLeaderboardsCacheDataRow {
    crate::__imports::native_leaderboards_cache_data_row(p0)
}
pub fn leaderboards2_read_by_rank(p0: shared::MemoryBufferId,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfLeaderboards2ReadByRank {
    crate::__imports::native_leaderboards2_read_by_rank(p0,
p1,
p2)
}
pub fn playstats_prop_change(p0: u32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsPropChange {
    crate::__imports::native_playstats_prop_change(p0,
p1,
p2,
p3)
}
pub fn stat_get_current_drive_nocrash_distance() -> altv_wasm_shared::natives_result::ResultOfStatGetCurrentDriveNocrashDistance {
    crate::__imports::native_stat_get_current_drive_nocrash_distance()
}
pub fn playstats_fm_event_atob(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsFmEventAtob {
    crate::__imports::native_playstats_fm_event_atob(p0)
}
pub fn playstats_robbery_finale(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsRobberyFinale {
    crate::__imports::native_playstats_robbery_finale(p0)
}
pub fn stat_save_pending_or_requested() -> altv_wasm_shared::natives_result::ResultOfStatSavePendingOrRequested {
    crate::__imports::native_stat_save_pending_or_requested()
}
pub fn playstats_match_started(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsMatchStarted {
    crate::__imports::native_playstats_match_started(p0,
p1,
p2)
}
pub fn stat_is_stats_tracking_enabled() -> altv_wasm_shared::natives_result::ResultOfStatIsStatsTrackingEnabled {
    crate::__imports::native_stat_is_stats_tracking_enabled()
}
pub fn playstats_spent_pi_custom_loadout(amount: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsSpentPiCustomLoadout {
    crate::__imports::native_playstats_spent_pi_custom_loadout(amount)
}
pub fn stat_community_get_history(stat_name: u32,
p1: i32,
out_value: f32) -> altv_wasm_shared::natives_result::ResultOfStatCommunityGetHistory {
    crate::__imports::native_stat_community_get_history(stat_name,
p1,
out_value)
}
pub fn playstats_mission_ended(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsMissionEnded {
    crate::__imports::native_playstats_mission_ended(p0)
}
pub fn leaderboards_get_column_type(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfLeaderboardsGetColumnType {
    crate::__imports::native_leaderboards_get_column_type(p0,
p1,
p2)
}
pub fn playstats_fm_event_vehicletarget(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsFmEventVehicletarget {
    crate::__imports::native_playstats_fm_event_vehicletarget(p0)
}
pub fn stats_completed_character_creation(p0: i32) -> altv_wasm_shared::natives_result::ResultOfStatsCompletedCharacterCreation {
    crate::__imports::native_stats_completed_character_creation(p0)
}
pub fn playstats_mission_vote(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsMissionVote {
    crate::__imports::native_playstats_mission_vote(p0)
}
pub fn stat_get_load_safe_to_progress_to_mp_from_sp() -> altv_wasm_shared::natives_result::ResultOfStatGetLoadSafeToProgressToMpFromSp {
    crate::__imports::native_stat_get_load_safe_to_progress_to_mp_from_sp()
}
pub fn set_has_posted_all_vehicles_driven() -> altv_wasm_shared::natives_result::ResultOfSetHasPostedAllVehiclesDriven {
    crate::__imports::native_set_has_posted_all_vehicles_driven()
}
pub fn playstats_minigame_usage(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsMinigameUsage {
    crate::__imports::native_playstats_minigame_usage(p0,
p1,
p2)
}
pub fn playstats_mission_started(p0: Option<&String>,
p1: i32,
p2: i32,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfPlaystatsMissionStarted {
    crate::__imports::native_playstats_mission_started(p0,
p1,
p2,
p3)
}
pub fn playstats_heist4_finale(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsHeist4Finale {
    crate::__imports::native_playstats_heist4_finale(p0)
}
pub fn stat_set_current_posix_time(stat_name: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfStatSetCurrentPosixTime {
    crate::__imports::native_stat_set_current_posix_time(stat_name,
p1)
}
pub fn leaderboards2_read_by_handle(p0: shared::MemoryBufferId,
p1: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfLeaderboards2ReadByHandle {
    crate::__imports::native_leaderboards2_read_by_handle(p0,
p1)
}
pub fn leaderboards2_read_rank_prediction(p0: shared::MemoryBufferId,
p1: shared::MemoryBufferId,
p2: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfLeaderboards2ReadRankPrediction {
    crate::__imports::native_leaderboards2_read_rank_prediction(p0,
p1,
p2)
}
pub fn leaderboards_get_column_id(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfLeaderboardsGetColumnId {
    crate::__imports::native_leaderboards_get_column_id(p0,
p1,
p2)
}
pub fn playstats_leave_job_chain(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsLeaveJobChain {
    crate::__imports::native_playstats_leave_job_chain(p0,
p1,
p2,
p3,
p4)
}
pub fn set_profile_setting_sp_chop_mission_complete() -> altv_wasm_shared::natives_result::ResultOfSetProfileSettingSpChopMissionComplete {
    crate::__imports::native_set_profile_setting_sp_chop_mission_complete()
}
pub fn stat_migrate_check_start() -> altv_wasm_shared::natives_result::ResultOfStatMigrateCheckStart {
    crate::__imports::native_stat_migrate_check_start()
}
pub fn playstats_sell_contraband_mission(data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfPlaystatsSellContrabandMission {
    crate::__imports::native_playstats_sell_contraband_mission(data)
}
pub fn playstats_rank_up(rank: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsRankUp {
    crate::__imports::native_playstats_rank_up(rank)
}
pub fn stat_migrate_clear_for_restart() -> altv_wasm_shared::natives_result::ResultOfStatMigrateClearForRestart {
    crate::__imports::native_stat_migrate_clear_for_restart()
}
pub fn playstats_casino_three_card_poker_light(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsCasinoThreeCardPokerLight {
    crate::__imports::native_playstats_casino_three_card_poker_light(p0)
}
pub fn playstats_mission_checkpoint(p0: Option<&String>,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsMissionCheckpoint {
    crate::__imports::native_playstats_mission_checkpoint(p0,
p1,
p2,
p3)
}
pub fn leaderboards2_write_data_for_event_type(p0: shared::MemoryBufferId,
p1: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfLeaderboards2WriteDataForEventType {
    crate::__imports::native_leaderboards2_write_data_for_event_type(p0,
p1)
}
pub fn playstats_hold_up_mission_done(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsHoldUpMissionDone {
    crate::__imports::native_playstats_hold_up_mission_done(p0,
p1,
p2,
p3)
}
pub fn playstats_mc_request_bike(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsMcRequestBike {
    crate::__imports::native_playstats_mc_request_bike(p0,
p1,
p2,
p3,
p4)
}
pub fn playstats_collectible_picked_up(p0: i32,
object_hash: u32,
p2: i32,
p3: i32,
money_amount: i32,
rp_amount: i32,
chips_amount: i32,
p7: i32,
p8: i32,
p9: i32,
p10: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsCollectiblePickedUp {
    crate::__imports::native_playstats_collectible_picked_up(p0,
object_hash,
p2,
p3,
money_amount,
rp_amount,
chips_amount,
p7,
p8,
p9,
p10)
}
pub fn stat_get_save_migration_consume_content_status(p0: i32) -> altv_wasm_shared::natives_result::ResultOfStatGetSaveMigrationConsumeContentStatus {
    crate::__imports::native_stat_get_save_migration_consume_content_status(p0)
}
pub fn order_boss_vehicle(p0: i32,
p1: i32,
vehicle_hash: u32) -> altv_wasm_shared::natives_result::ResultOfOrderBossVehicle {
    crate::__imports::native_order_boss_vehicle(p0,
p1,
vehicle_hash)
}
pub fn playstats_acid_rnd(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsAcidRnd {
    crate::__imports::native_playstats_acid_rnd(p0)
}
pub fn playstats_set_join_type(join_type: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsSetJoinType {
    crate::__imports::native_playstats_set_join_type(join_type)
}
pub fn get_packed_tu_int_stat_key(index: i32,
sp_stat: bool,
char_stat: bool,
character: i32) -> altv_wasm_shared::natives_result::ResultOfGetPackedTuIntStatKey {
    crate::__imports::native_get_packed_tu_int_stat_key(index,
sp_stat,
char_stat,
character)
}
pub fn playstats_bw_yatchattack(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsBwYatchattack {
    crate::__imports::native_playstats_bw_yatchattack(p0)
}
pub fn change_uniform(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfChangeUniform {
    crate::__imports::native_change_uniform(p0,
p1,
p2)
}
pub fn playstats_sub_weap(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsSubWeap {
    crate::__imports::native_playstats_sub_weap(p0,
p1,
p2,
p3)
}
pub fn leaderboards_clear_cache_data() -> altv_wasm_shared::natives_result::ResultOfLeaderboardsClearCacheData {
    crate::__imports::native_leaderboards_clear_cache_data()
}
pub fn playstats_casino_blackjack_light(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsCasinoBlackjackLight {
    crate::__imports::native_playstats_casino_blackjack_light(p0)
}
pub fn playstats_abandoned_mc(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsAbandonedMc {
    crate::__imports::native_playstats_abandoned_mc(p0,
p1,
p2,
p3,
p4)
}
pub fn playstats_buy_contraband_mission(data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfPlaystatsBuyContrabandMission {
    crate::__imports::native_playstats_buy_contraband_mission(data)
}
pub fn playstats_dj_mission_ended(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsDjMissionEnded {
    crate::__imports::native_playstats_dj_mission_ended(p0)
}
pub fn stat_get_float(stat_hash: u32,
out_value: f32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfStatGetFloat {
    crate::__imports::native_stat_get_float(stat_hash,
out_value,
p2)
}
pub fn playstats_fm_heist_prep_ended(data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfPlaystatsFmHeistPrepEnded {
    crate::__imports::native_playstats_fm_heist_prep_ended(data)
}
pub fn get_packed_stat_bool_code(index: i32,
character_slot: i32) -> altv_wasm_shared::natives_result::ResultOfGetPackedStatBoolCode {
    crate::__imports::native_get_packed_stat_bool_code(index,
character_slot)
}
pub fn set_has_specialedition_content(value: i32) -> altv_wasm_shared::natives_result::ResultOfSetHasSpecialeditionContent {
    crate::__imports::native_set_has_specialedition_content(value)
}
pub fn playstats_gunrunning_rnd(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsGunrunningRnd {
    crate::__imports::native_playstats_gunrunning_rnd(p0)
}
pub fn stat_set_pos(stat_name: u32,
x: f32,
y: f32,
z: f32,
save: bool) -> altv_wasm_shared::natives_result::ResultOfStatSetPos {
    crate::__imports::native_stat_set_pos(stat_name,
x,
y,
z,
save)
}
pub fn set_packed_stat_bool_code(index: i32,
value: bool,
character_slot: i32) -> altv_wasm_shared::natives_result::ResultOfSetPackedStatBoolCode {
    crate::__imports::native_set_packed_stat_bool_code(index,
value,
character_slot)
}
pub fn playstats_website_visited(scaleform_hash: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsWebsiteVisited {
    crate::__imports::native_playstats_website_visited(scaleform_hash,
p1)
}
pub fn stat_migrate_check_get_platform_status(p0: i32,
p1: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfStatMigrateCheckGetPlatformStatus {
    crate::__imports::native_stat_migrate_check_get_platform_status(p0,
p1)
}
pub fn playstats_heist3_drone(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsHeist3Drone {
    crate::__imports::native_playstats_heist3_drone(p0)
}
pub fn playstats_heist4_prep(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsHeist4Prep {
    crate::__imports::native_playstats_heist4_prep(p0)
}
pub fn stat_save(p0: i32,
p1: bool,
p2: i32,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfStatSave {
    crate::__imports::native_stat_save(p0,
p1,
p2,
p3)
}
pub fn stat_get_number_of_days(stat_name: u32) -> altv_wasm_shared::natives_result::ResultOfStatGetNumberOfDays {
    crate::__imports::native_stat_get_number_of_days(stat_name)
}
pub fn playstats_bc_finders_keepers(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsBcFindersKeepers {
    crate::__imports::native_playstats_bc_finders_keepers(p0)
}
pub fn stat_cloud_slot_load_failed_code(p0: i32) -> altv_wasm_shared::natives_result::ResultOfStatCloudSlotLoadFailedCode {
    crate::__imports::native_stat_cloud_slot_load_failed_code(p0)
}
pub fn stat_get_string(stat_hash: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfStatGetString {
    crate::__imports::native_stat_get_string(stat_hash,
p1)
}
pub fn playstats_casino_slot_machine_light(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsCasinoSlotMachineLight {
    crate::__imports::native_playstats_casino_slot_machine_light(p0)
}
pub fn leaderboards2_read_by_score_float(p0: shared::MemoryBufferId,
p1: f32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfLeaderboards2ReadByScoreFloat {
    crate::__imports::native_leaderboards2_read_by_score_float(p0,
p1,
p2)
}
pub fn stat_get_current_near_miss_nocrash_precise() -> altv_wasm_shared::natives_result::ResultOfStatGetCurrentNearMissNocrashPrecise {
    crate::__imports::native_stat_get_current_near_miss_nocrash_precise()
}
pub fn playstats_weapon_mode_change(weapon_hash: u32,
component_hash_to: u32,
component_hash_from: u32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsWeaponModeChange {
    crate::__imports::native_playstats_weapon_mode_change(weapon_hash,
component_hash_to,
component_hash_from)
}
pub fn stat_clear_slot_for_reload(stat_slot: i32) -> altv_wasm_shared::natives_result::ResultOfStatClearSlotForReload {
    crate::__imports::native_stat_clear_slot_for_reload(stat_slot)
}
pub fn playstats_idle(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsIdle {
    crate::__imports::native_playstats_idle(p0,
p1,
p2)
}
pub fn stat_load_dirty_read_detected() -> altv_wasm_shared::natives_result::ResultOfStatLoadDirtyReadDetected {
    crate::__imports::native_stat_load_dirty_read_detected()
}
pub fn playstats_fm_event_criminaldamage(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsFmEventCriminaldamage {
    crate::__imports::native_playstats_fm_event_criminaldamage(p0)
}
pub fn playstats_casino_slot_machine(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsCasinoSlotMachine {
    crate::__imports::native_playstats_casino_slot_machine(p0)
}
pub fn leaderboards_get_cache_time(p0: i32) -> altv_wasm_shared::natives_result::ResultOfLeaderboardsGetCacheTime {
    crate::__imports::native_leaderboards_get_cache_time(p0)
}
pub fn playstats_bw_air_freight(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsBwAirFreight {
    crate::__imports::native_playstats_bw_air_freight(p0)
}
pub fn stat_get_recorded_value(value: f32) -> altv_wasm_shared::natives_result::ResultOfStatGetRecordedValue {
    crate::__imports::native_stat_get_recorded_value(value)
}
pub fn set_profile_setting_creator_races_done(value: i32) -> altv_wasm_shared::natives_result::ResultOfSetProfileSettingCreatorRacesDone {
    crate::__imports::native_set_profile_setting_creator_races_done(value)
}
pub fn leaderboards2_read_by_plaform(p0: shared::MemoryBufferId,
gamer_handle_csv: Option<&String>,
platform_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfLeaderboards2ReadByPlaform {
    crate::__imports::native_leaderboards2_read_by_plaform(p0,
gamer_handle_csv,
platform_name)
}
pub fn stat_get_number_of_hours(stat_name: u32) -> altv_wasm_shared::natives_result::ResultOfStatGetNumberOfHours {
    crate::__imports::native_stat_get_number_of_hours(stat_name)
}
pub fn stat_set_block_saves(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfStatSetBlockSaves {
    crate::__imports::native_stat_set_block_saves(toggle)
}
pub fn playstats_heist_save_cheat(hash: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsHeistSaveCheat {
    crate::__imports::native_playstats_heist_save_cheat(hash,
p1)
}
pub fn playstats_mc_killed_rival_mc_member(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsMcKilledRivalMcMember {
    crate::__imports::native_playstats_mc_killed_rival_mc_member(p0,
p1,
p2,
p3,
p4)
}
pub fn playstats_job_bend(p0: shared::MemoryBufferId,
p1: shared::MemoryBufferId,
p2: shared::MemoryBufferId,
p3: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfPlaystatsJobBend {
    crate::__imports::native_playstats_job_bend(p0,
p1,
p2,
p3)
}
pub fn set_save_migration_transaction_id_warning(transaction_id: i32) -> altv_wasm_shared::natives_result::ResultOfSetSaveMigrationTransactionIdWarning {
    crate::__imports::native_set_save_migration_transaction_id_warning(transaction_id)
}
pub fn playstats_casino_three_card_poker(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsCasinoThreeCardPoker {
    crate::__imports::native_playstats_casino_three_card_poker(p0)
}
pub fn playstats_job_activity_end(p0: shared::MemoryBufferId,
p1: shared::MemoryBufferId,
p2: shared::MemoryBufferId,
p3: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfPlaystatsJobActivityEnd {
    crate::__imports::native_playstats_job_activity_end(p0,
p1,
p2,
p3)
}
pub fn playstats_arcade_cabinet(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsArcadeCabinet {
    crate::__imports::native_playstats_arcade_cabinet(p0)
}
pub fn playstats_shopmenu_nav(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsShopmenuNav {
    crate::__imports::native_playstats_shopmenu_nav(p0,
p1,
p2)
}
pub fn stat_is_player_vehicle_above_ocean() -> altv_wasm_shared::natives_result::ResultOfStatIsPlayerVehicleAboveOcean {
    crate::__imports::native_stat_is_player_vehicle_above_ocean()
}
pub fn playstats_extra_event(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsExtraEvent {
    crate::__imports::native_playstats_extra_event(p0)
}
pub fn playstats_bw_sightseer(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsBwSightseer {
    crate::__imports::native_playstats_bw_sightseer(p0)
}
pub fn playstats_casino_story_mission_ended(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsCasinoStoryMissionEnded {
    crate::__imports::native_playstats_casino_story_mission_ended(p0,
p1)
}
pub fn playstats_inst_mission_end(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsInstMissionEnd {
    crate::__imports::native_playstats_inst_mission_end(p0)
}
pub fn playstats_carclub_points(p0: i32) -> altv_wasm_shared::natives_result::ResultOfPlaystatsCarclubPoints {
    crate::__imports::native_playstats_carclub_points(p0)
}
pub fn is_new_load_scene_loaded() -> altv_wasm_shared::natives_result::ResultOfIsNewLoadSceneLoaded {
    crate::__imports::native_is_new_load_scene_loaded()
}
pub fn remove_clip_set(clip_set: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRemoveClipSet {
    crate::__imports::native_remove_clip_set(clip_set)
}
pub fn force_allow_time_based_fading_this_frame() -> altv_wasm_shared::natives_result::ResultOfForceAllowTimeBasedFadingThisFrame {
    crate::__imports::native_force_allow_time_based_fading_this_frame()
}
pub fn request_collision_at_coord(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfRequestCollisionAtCoord {
    crate::__imports::native_request_collision_at_coord(x,
y,
z)
}
pub fn streamvol_is_valid(unused: i32) -> altv_wasm_shared::natives_result::ResultOfStreamvolIsValid {
    crate::__imports::native_streamvol_is_valid(unused)
}
pub fn set_restore_focus_entity(p0: u32) -> altv_wasm_shared::natives_result::ResultOfSetRestoreFocusEntity {
    crate::__imports::native_set_restore_focus_entity(p0)
}
pub fn get_player_switch_interp_out_duration() -> altv_wasm_shared::natives_result::ResultOfGetPlayerSwitchInterpOutDuration {
    crate::__imports::native_get_player_switch_interp_out_duration()
}
pub fn end_srl() -> altv_wasm_shared::natives_result::ResultOfEndSrl {
    crate::__imports::native_end_srl()
}
pub fn streamvol_create_line(p0: f32,
p1: f32,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfStreamvolCreateLine {
    crate::__imports::native_streamvol_create_line(p0,
p1,
p2,
p3,
p4,
p5,
p6)
}
pub fn add_model_to_creator_budget(model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfAddModelToCreatorBudget {
    crate::__imports::native_add_model_to_creator_budget(model_hash)
}
pub fn get_lodscale() -> altv_wasm_shared::natives_result::ResultOfGetLodscale {
    crate::__imports::native_get_lodscale()
}
pub fn set_player_switch_establishing_shot(name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetPlayerSwitchEstablishingShot {
    crate::__imports::native_set_player_switch_establishing_shot(name)
}
pub fn remove_anim_set(anim_set: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRemoveAnimSet {
    crate::__imports::native_remove_anim_set(anim_set)
}
pub fn set_focus_entity(entity: u32) -> altv_wasm_shared::natives_result::ResultOfSetFocusEntity {
    crate::__imports::native_set_focus_entity(entity)
}
pub fn is_model_a_vehicle(model: u32) -> altv_wasm_shared::natives_result::ResultOfIsModelAvehicle {
    crate::__imports::native_is_model_a_vehicle(model)
}
pub fn set_scene_streaming_tracks_cam_pos_this_frame() -> altv_wasm_shared::natives_result::ResultOfSetSceneStreamingTracksCamPosThisFrame {
    crate::__imports::native_set_scene_streaming_tracks_cam_pos_this_frame()
}
pub fn streamvol_delete(unused: i32) -> altv_wasm_shared::natives_result::ResultOfStreamvolDelete {
    crate::__imports::native_streamvol_delete(unused)
}
pub fn streamvol_create_frustum(p0: f32,
p1: f32,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
p6: f32,
p7: i32,
p8: i32) -> altv_wasm_shared::natives_result::ResultOfStreamvolCreateFrustum {
    crate::__imports::native_streamvol_create_frustum(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8)
}
pub fn set_srl_long_jump_mode(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetSrlLongJumpMode {
    crate::__imports::native_set_srl_long_jump_mode(p0)
}
pub fn get_player_short_switch_state() -> altv_wasm_shared::natives_result::ResultOfGetPlayerShortSwitchState {
    crate::__imports::native_get_player_short_switch_state()
}
pub fn new_load_scene_start(pos_x: f32,
pos_y: f32,
pos_z: f32,
offset_x: f32,
offset_y: f32,
offset_z: f32,
radius: f32,
p7: i32) -> altv_wasm_shared::natives_result::ResultOfNewLoadSceneStart {
    crate::__imports::native_new_load_scene_start(pos_x,
pos_y,
pos_z,
offset_x,
offset_y,
offset_z,
radius,
p7)
}
pub fn streamvol_create_sphere(x: f32,
y: f32,
z: f32,
rad: f32,
p4: i32,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfStreamvolCreateSphere {
    crate::__imports::native_streamvol_create_sphere(x,
y,
z,
rad,
p4,
p5)
}
pub fn has_collision_for_model_loaded(model: u32) -> altv_wasm_shared::natives_result::ResultOfHasCollisionForModelLoaded {
    crate::__imports::native_has_collision_for_model_loaded(model)
}
pub fn does_anim_dict_exist(anim_dict: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDoesAnimDictExist {
    crate::__imports::native_does_anim_dict_exist(anim_dict)
}
pub fn is_entity_focus(entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityFocus {
    crate::__imports::native_is_entity_focus(entity)
}
pub fn has_clip_set_loaded(clip_set: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfHasClipSetLoaded {
    crate::__imports::native_has_clip_set_loaded(clip_set)
}
pub fn clear_focus() -> altv_wasm_shared::natives_result::ResultOfClearFocus {
    crate::__imports::native_clear_focus()
}
pub fn is_model_in_cdimage(model: u32) -> altv_wasm_shared::natives_result::ResultOfIsModelInCdimage {
    crate::__imports::native_is_model_in_cdimage(model)
}
pub fn prefetch_srl(srl: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfPrefetchSrl {
    crate::__imports::native_prefetch_srl(srl)
}
pub fn get_used_creator_budget() -> altv_wasm_shared::natives_result::ResultOfGetUsedCreatorBudget {
    crate::__imports::native_get_used_creator_budget()
}
pub fn get_number_of_streaming_requests() -> altv_wasm_shared::natives_result::ResultOfGetNumberOfStreamingRequests {
    crate::__imports::native_get_number_of_streaming_requests()
}
pub fn set_render_hd_only(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetRenderHdOnly {
    crate::__imports::native_set_render_hd_only(toggle)
}
pub fn request_ipl(ipl_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRequestIpl {
    crate::__imports::native_request_ipl(ipl_name)
}
pub fn is_network_loading_scene() -> altv_wasm_shared::natives_result::ResultOfIsNetworkLoadingScene {
    crate::__imports::native_is_network_loading_scene()
}
pub fn set_ditch_police_models(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDitchPoliceModels {
    crate::__imports::native_set_ditch_police_models(toggle)
}
pub fn allow_player_switch_pan() -> altv_wasm_shared::natives_result::ResultOfAllowPlayerSwitchPan {
    crate::__imports::native_allow_player_switch_pan()
}
pub fn load_scene(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfLoadScene {
    crate::__imports::native_load_scene(x,
y,
z)
}
pub fn get_player_switch_state() -> altv_wasm_shared::natives_result::ResultOfGetPlayerSwitchState {
    crate::__imports::native_get_player_switch_state()
}
pub fn suppress_hd_map_streaming_this_frame() -> altv_wasm_shared::natives_result::ResultOfSuppressHdMapStreamingThisFrame {
    crate::__imports::native_suppress_hd_map_streaming_this_frame()
}
pub fn set_all_mapdata_culled(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetAllMapdataCulled {
    crate::__imports::native_set_all_mapdata_culled(p0)
}
pub fn ipl_group_swap_is_active() -> altv_wasm_shared::natives_result::ResultOfIplGroupSwapIsActive {
    crate::__imports::native_ipl_group_swap_is_active()
}
pub fn get_player_switch_interp_out_current_time() -> altv_wasm_shared::natives_result::ResultOfGetPlayerSwitchInterpOutCurrentTime {
    crate::__imports::native_get_player_switch_interp_out_current_time()
}
pub fn is_switch_skipping_descent() -> altv_wasm_shared::natives_result::ResultOfIsSwitchSkippingDescent {
    crate::__imports::native_is_switch_skipping_descent()
}
pub fn set_player_short_switch_style(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerShortSwitchStyle {
    crate::__imports::native_set_player_short_switch_style(p0)
}
pub fn remove_named_ptfx_asset(fx_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRemoveNamedPtfxAsset {
    crate::__imports::native_remove_named_ptfx_asset(fx_name)
}
pub fn ipl_group_swap_cancel() -> altv_wasm_shared::natives_result::ResultOfIplGroupSwapCancel {
    crate::__imports::native_ipl_group_swap_cancel()
}
pub fn set_streaming(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetStreaming {
    crate::__imports::native_set_streaming(toggle)
}
pub fn request_anim_set(anim_set: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRequestAnimSet {
    crate::__imports::native_request_anim_set(anim_set)
}
pub fn set_game_pauses_for_streaming(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetGamePausesForStreaming {
    crate::__imports::native_set_game_pauses_for_streaming(toggle)
}
pub fn is_safe_to_start_player_switch() -> altv_wasm_shared::natives_result::ResultOfIsSafeToStartPlayerSwitch {
    crate::__imports::native_is_safe_to_start_player_switch()
}
pub fn allow_player_switch_outro() -> altv_wasm_shared::natives_result::ResultOfAllowPlayerSwitchOutro {
    crate::__imports::native_allow_player_switch_outro()
}
pub fn is_model_a_ped(model: u32) -> altv_wasm_shared::natives_result::ResultOfIsModelAped {
    crate::__imports::native_is_model_a_ped(model)
}
pub fn set_reduce_ped_model_budget(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetReducePedModelBudget {
    crate::__imports::native_set_reduce_ped_model_budget(toggle)
}
pub fn get_player_switch_jump_cut_index() -> altv_wasm_shared::natives_result::ResultOfGetPlayerSwitchJumpCutIndex {
    crate::__imports::native_get_player_switch_jump_cut_index()
}
pub fn streamvol_has_loaded(unused: i32) -> altv_wasm_shared::natives_result::ResultOfStreamvolHasLoaded {
    crate::__imports::native_streamvol_has_loaded(unused)
}
pub fn load_global_water_file(water_type: i32) -> altv_wasm_shared::natives_result::ResultOfLoadGlobalWaterFile {
    crate::__imports::native_load_global_water_file(water_type)
}
pub fn set_reduce_vehicle_model_budget(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetReduceVehicleModelBudget {
    crate::__imports::native_set_reduce_vehicle_model_budget(toggle)
}
pub fn has_named_ptfx_asset_loaded(fx_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfHasNamedPtfxAssetLoaded {
    crate::__imports::native_has_named_ptfx_asset_loaded(fx_name)
}
pub fn is_ipl_active(ipl_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfIsIplActive {
    crate::__imports::native_is_ipl_active(ipl_name)
}
pub fn remove_ptfx_asset() -> altv_wasm_shared::natives_result::ResultOfRemovePtfxAsset {
    crate::__imports::native_remove_ptfx_asset()
}
pub fn request_models_in_room(interior: i32,
room_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRequestModelsInRoom {
    crate::__imports::native_request_models_in_room(interior,
room_name)
}
pub fn set_ped_population_budget(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedPopulationBudget {
    crate::__imports::native_set_ped_population_budget(p0)
}
pub fn allow_player_switch_ascent() -> altv_wasm_shared::natives_result::ResultOfAllowPlayerSwitchAscent {
    crate::__imports::native_allow_player_switch_ascent()
}
pub fn request_collision_for_model(model: u32) -> altv_wasm_shared::natives_result::ResultOfRequestCollisionForModel {
    crate::__imports::native_request_collision_for_model(model)
}
pub fn is_switch_to_multi_firstpart_finished() -> altv_wasm_shared::natives_result::ResultOfIsSwitchToMultiFirstpartFinished {
    crate::__imports::native_is_switch_to_multi_firstpart_finished()
}
pub fn request_ptfx_asset() -> altv_wasm_shared::natives_result::ResultOfRequestPtfxAsset {
    crate::__imports::native_request_ptfx_asset()
}
pub fn ipl_group_swap_start(ipl_name1: Option<&String>,
ipl_name2: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfIplGroupSwapStart {
    crate::__imports::native_ipl_group_swap_start(ipl_name1,
ipl_name2)
}
pub fn stop_player_switch() -> altv_wasm_shared::natives_result::ResultOfStopPlayerSwitch {
    crate::__imports::native_stop_player_switch()
}
pub fn request_model(model: u32) -> altv_wasm_shared::natives_result::ResultOfRequestModel {
    crate::__imports::native_request_model(model)
}
pub fn has_model_loaded(model: u32) -> altv_wasm_shared::natives_result::ResultOfHasModelLoaded {
    crate::__imports::native_has_model_loaded(model)
}
pub fn set_island_enabled(name: Option<&String>,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetIslandEnabled {
    crate::__imports::native_set_island_enabled(name,
toggle)
}
pub fn begin_srl() -> altv_wasm_shared::natives_result::ResultOfBeginSrl {
    crate::__imports::native_begin_srl()
}
pub fn request_menu_ped_model(model: u32) -> altv_wasm_shared::natives_result::ResultOfRequestMenuPedModel {
    crate::__imports::native_request_menu_ped_model(model)
}
pub fn is_new_load_scene_active() -> altv_wasm_shared::natives_result::ResultOfIsNewLoadSceneActive {
    crate::__imports::native_is_new_load_scene_active()
}
pub fn set_srl_time(p0: f32) -> altv_wasm_shared::natives_result::ResultOfSetSrlTime {
    crate::__imports::native_set_srl_time(p0)
}
pub fn override_lodscale_this_frame(scaling: f32) -> altv_wasm_shared::natives_result::ResultOfOverrideLodscaleThisFrame {
    crate::__imports::native_override_lodscale_this_frame(scaling)
}
pub fn switch_to_multi_firstpart(ped: u32,
flags: i32,
switch_type: i32) -> altv_wasm_shared::natives_result::ResultOfSwitchToMultiFirstpart {
    crate::__imports::native_switch_to_multi_firstpart(ped,
flags,
switch_type)
}
pub fn new_load_scene_start_sphere(x: f32,
y: f32,
z: f32,
radius: f32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfNewLoadSceneStartSphere {
    crate::__imports::native_new_load_scene_start_sphere(x,
y,
z,
radius,
p4)
}
pub fn allow_player_switch_descent() -> altv_wasm_shared::natives_result::ResultOfAllowPlayerSwitchDescent {
    crate::__imports::native_allow_player_switch_descent()
}
pub fn set_mapdatacullbox_enabled(name: Option<&String>,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetMapdatacullboxEnabled {
    crate::__imports::native_set_mapdatacullbox_enabled(name,
toggle)
}
pub fn get_player_switch_type() -> altv_wasm_shared::natives_result::ResultOfGetPlayerSwitchType {
    crate::__imports::native_get_player_switch_type()
}
pub fn init_creator_budget() -> altv_wasm_shared::natives_result::ResultOfInitCreatorBudget {
    crate::__imports::native_init_creator_budget()
}
pub fn get_ideal_player_switch_type(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32) -> altv_wasm_shared::natives_result::ResultOfGetIdealPlayerSwitchType {
    crate::__imports::native_get_ideal_player_switch_type(x1,
y1,
z1,
x2,
y2,
z2)
}
pub fn request_named_ptfx_asset(fx_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRequestNamedPtfxAsset {
    crate::__imports::native_request_named_ptfx_asset(fx_name)
}
pub fn set_hd_area(x: f32,
y: f32,
z: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfSetHdArea {
    crate::__imports::native_set_hd_area(x,
y,
z,
radius)
}
pub fn set_focus_pos_and_vel(x: f32,
y: f32,
z: f32,
offset_x: f32,
offset_y: f32,
offset_z: f32) -> altv_wasm_shared::natives_result::ResultOfSetFocusPosAndVel {
    crate::__imports::native_set_focus_pos_and_vel(x,
y,
z,
offset_x,
offset_y,
offset_z)
}
pub fn is_streamvol_active() -> altv_wasm_shared::natives_result::ResultOfIsStreamvolActive {
    crate::__imports::native_is_streamvol_active()
}
pub fn disable_switch_outro_fx() -> altv_wasm_shared::natives_result::ResultOfDisableSwitchOutroFx {
    crate::__imports::native_disable_switch_outro_fx()
}
pub fn load_all_objects_now() -> altv_wasm_shared::natives_result::ResultOfLoadAllObjectsNow {
    crate::__imports::native_load_all_objects_now()
}
pub fn set_srl_readahead_times(p0: i32,
p1: i32,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfSetSrlReadaheadTimes {
    crate::__imports::native_set_srl_readahead_times(p0,
p1,
p2,
p3)
}
pub fn remap_lodscale_range_this_frame(p0: f32,
p1: f32,
p2: f32,
p3: f32) -> altv_wasm_shared::natives_result::ResultOfRemapLodscaleRangeThisFrame {
    crate::__imports::native_remap_lodscale_range_this_frame(p0,
p1,
p2,
p3)
}
pub fn is_model_valid(model: u32) -> altv_wasm_shared::natives_result::ResultOfIsModelValid {
    crate::__imports::native_is_model_valid(model)
}
pub fn new_load_scene_stop() -> altv_wasm_shared::natives_result::ResultOfNewLoadSceneStop {
    crate::__imports::native_new_load_scene_stop()
}
pub fn set_player_switch_outro(camera_coord_x: f32,
camera_coord_y: f32,
camera_coord_z: f32,
cam_rotation_x: f32,
cam_rotation_y: f32,
cam_rotation_z: f32,
cam_fov: f32,
cam_far_clip: f32,
rotation_order: i32) -> altv_wasm_shared::natives_result::ResultOfSetPlayerSwitchOutro {
    crate::__imports::native_set_player_switch_outro(camera_coord_x,
camera_coord_y,
camera_coord_z,
cam_rotation_x,
cam_rotation_y,
cam_rotation_z,
cam_fov,
cam_far_clip,
rotation_order)
}
pub fn network_update_load_scene() -> altv_wasm_shared::natives_result::ResultOfNetworkUpdateLoadScene {
    crate::__imports::native_network_update_load_scene()
}
pub fn has_anim_set_loaded(anim_set: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfHasAnimSetLoaded {
    crate::__imports::native_has_anim_set_loaded(anim_set)
}
pub fn request_additional_collision_at_coord(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfRequestAdditionalCollisionAtCoord {
    crate::__imports::native_request_additional_collision_at_coord(x,
y,
z)
}
pub fn has_ptfx_asset_loaded() -> altv_wasm_shared::natives_result::ResultOfHasPtfxAssetLoaded {
    crate::__imports::native_has_ptfx_asset_loaded()
}
pub fn set_vehicle_population_budget(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehiclePopulationBudget {
    crate::__imports::native_set_vehicle_population_budget(p0)
}
pub fn shutdown_creator_budget() -> altv_wasm_shared::natives_result::ResultOfShutdownCreatorBudget {
    crate::__imports::native_shutdown_creator_budget()
}
pub fn clear_hd_area() -> altv_wasm_shared::natives_result::ResultOfClearHdArea {
    crate::__imports::native_clear_hd_area()
}
pub fn is_srl_loaded() -> altv_wasm_shared::natives_result::ResultOfIsSrlLoaded {
    crate::__imports::native_is_srl_loaded()
}
pub fn has_anim_dict_loaded(anim_dict: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfHasAnimDictLoaded {
    crate::__imports::native_has_anim_dict_loaded(anim_dict)
}
pub fn request_clip_set(clip_set: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRequestClipSet {
    crate::__imports::native_request_clip_set(clip_set)
}
pub fn request_anim_dict(anim_dict: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRequestAnimDict {
    crate::__imports::native_request_anim_dict(anim_dict)
}
pub fn enable_switch_pause_before_descent() -> altv_wasm_shared::natives_result::ResultOfEnableSwitchPauseBeforeDescent {
    crate::__imports::native_enable_switch_pause_before_descent()
}
pub fn switch_to_multi_secondpart(ped: u32) -> altv_wasm_shared::natives_result::ResultOfSwitchToMultiSecondpart {
    crate::__imports::native_switch_to_multi_secondpart(ped)
}
pub fn is_player_switch_in_progress() -> altv_wasm_shared::natives_result::ResultOfIsPlayerSwitchInProgress {
    crate::__imports::native_is_player_switch_in_progress()
}
pub fn is_switch_ready_for_descent() -> altv_wasm_shared::natives_result::ResultOfIsSwitchReadyForDescent {
    crate::__imports::native_is_switch_ready_for_descent()
}
pub fn set_interior_active(interior_i_d: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetInteriorActive {
    crate::__imports::native_set_interior_active(interior_i_d,
toggle)
}
pub fn set_model_as_no_longer_needed(model: u32) -> altv_wasm_shared::natives_result::ResultOfSetModelAsNoLongerNeeded {
    crate::__imports::native_set_model_as_no_longer_needed(model)
}
pub fn remove_ipl(ipl_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRemoveIpl {
    crate::__imports::native_remove_ipl(ipl_name)
}
pub fn set_srl_post_cutscene_camera(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfSetSrlPostCutsceneCamera {
    crate::__imports::native_set_srl_post_cutscene_camera(p0,
p1,
p2,
p3,
p4,
p5)
}
pub fn remove_model_from_creator_budget(model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfRemoveModelFromCreatorBudget {
    crate::__imports::native_remove_model_from_creator_budget(model_hash)
}
pub fn ipl_group_swap_finish() -> altv_wasm_shared::natives_result::ResultOfIplGroupSwapFinish {
    crate::__imports::native_ipl_group_swap_finish()
}
pub fn remove_anim_dict(anim_dict: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRemoveAnimDict {
    crate::__imports::native_remove_anim_dict(anim_dict)
}
pub fn get_global_water_file() -> altv_wasm_shared::natives_result::ResultOfGetGlobalWaterFile {
    crate::__imports::native_get_global_water_file()
}
pub fn set_srl_force_prestream(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetSrlForcePrestream {
    crate::__imports::native_set_srl_force_prestream(p0)
}
pub fn start_player_switch(from: u32,
to: u32,
flags: i32,
switch_type: i32) -> altv_wasm_shared::natives_result::ResultOfStartPlayerSwitch {
    crate::__imports::native_start_player_switch(from,
to,
flags,
switch_type)
}
pub fn ipl_group_swap_is_ready() -> altv_wasm_shared::natives_result::ResultOfIplGroupSwapIsReady {
    crate::__imports::native_ipl_group_swap_is_ready()
}
pub fn timestep() -> altv_wasm_shared::natives_result::ResultOfTimestep {
    crate::__imports::native_timestep()
}
pub fn sin(value: f32) -> altv_wasm_shared::natives_result::ResultOfSin {
    crate::__imports::native_sin(value)
}
pub fn ceil(value: f32) -> altv_wasm_shared::natives_result::ResultOfCeil {
    crate::__imports::native_ceil(value)
}
pub fn vdist(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32) -> altv_wasm_shared::natives_result::ResultOfVdist {
    crate::__imports::native_vdist(x1,
y1,
z1,
x2,
y2,
z2)
}
pub fn set_this_thread_priority(priority: i32) -> altv_wasm_shared::natives_result::ResultOfSetThisThreadPriority {
    crate::__imports::native_set_this_thread_priority(priority)
}
pub fn wait(ms: i32) -> altv_wasm_shared::natives_result::ResultOfWait {
    crate::__imports::native_wait(ms)
}
pub fn settimerb(value: i32) -> altv_wasm_shared::natives_result::ResultOfSettimerb {
    crate::__imports::native_settimerb(value)
}
pub fn vmag(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfVmag {
    crate::__imports::native_vmag(x,
y,
z)
}
pub fn sqrt(value: f32) -> altv_wasm_shared::natives_result::ResultOfSqrt {
    crate::__imports::native_sqrt(value)
}
pub fn timera() -> altv_wasm_shared::natives_result::ResultOfTimera {
    crate::__imports::native_timera()
}
pub fn shift_right(value: i32,
bit_shift: i32) -> altv_wasm_shared::natives_result::ResultOfShiftRight {
    crate::__imports::native_shift_right(value,
bit_shift)
}
pub fn vmag2(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfVmag2 {
    crate::__imports::native_vmag2(x,
y,
z)
}
pub fn vdist2(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32) -> altv_wasm_shared::natives_result::ResultOfVdist2 {
    crate::__imports::native_vdist2(x1,
y1,
z1,
x2,
y2,
z2)
}
pub fn start_new_script_with_args(script_name: Option<&String>,
args: shared::MemoryBufferId,
arg_count: i32,
stack_size: i32) -> altv_wasm_shared::natives_result::ResultOfStartNewScriptWithArgs {
    crate::__imports::native_start_new_script_with_args(script_name,
args,
arg_count,
stack_size)
}
pub fn to_float(value: i32) -> altv_wasm_shared::natives_result::ResultOfToFloat {
    crate::__imports::native_to_float(value)
}
pub fn settimera(value: i32) -> altv_wasm_shared::natives_result::ResultOfSettimera {
    crate::__imports::native_settimera(value)
}
pub fn start_new_script_with_name_hash_and_args(script_hash: u32,
args: shared::MemoryBufferId,
arg_count: i32,
stack_size: i32) -> altv_wasm_shared::natives_result::ResultOfStartNewScriptWithNameHashAndArgs {
    crate::__imports::native_start_new_script_with_name_hash_and_args(script_hash,
args,
arg_count,
stack_size)
}
pub fn timerb() -> altv_wasm_shared::natives_result::ResultOfTimerb {
    crate::__imports::native_timerb()
}
pub fn cos(value: f32) -> altv_wasm_shared::natives_result::ResultOfCos {
    crate::__imports::native_cos(value)
}
pub fn pow(base: f32,
exponent: f32) -> altv_wasm_shared::natives_result::ResultOfPow {
    crate::__imports::native_pow(base,
exponent)
}
pub fn start_new_script(script_name: Option<&String>,
stack_size: i32) -> altv_wasm_shared::natives_result::ResultOfStartNewScript {
    crate::__imports::native_start_new_script(script_name,
stack_size)
}
pub fn log10(value: f32) -> altv_wasm_shared::natives_result::ResultOfLog10 {
    crate::__imports::native_log10(value)
}
pub fn start_new_script_with_name_hash(script_hash: u32,
stack_size: i32) -> altv_wasm_shared::natives_result::ResultOfStartNewScriptWithNameHash {
    crate::__imports::native_start_new_script_with_name_hash(script_hash,
stack_size)
}
pub fn shift_left(value: i32,
bit_shift: i32) -> altv_wasm_shared::natives_result::ResultOfShiftLeft {
    crate::__imports::native_shift_left(value,
bit_shift)
}
pub fn round(value: f32) -> altv_wasm_shared::natives_result::ResultOfRound {
    crate::__imports::native_round(value)
}
pub fn floor(value: f32) -> altv_wasm_shared::natives_result::ResultOfFloor {
    crate::__imports::native_floor(value)
}
pub fn waypoint_recording_get_speed_at_point(name: Option<&String>,
point: i32) -> altv_wasm_shared::natives_result::ResultOfWaypointRecordingGetSpeedAtPoint {
    crate::__imports::native_waypoint_recording_get_speed_at_point(name,
point)
}
pub fn get_sequence_progress(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetSequenceProgress {
    crate::__imports::native_get_sequence_progress(ped)
}
pub fn set_scenario_group_enabled(scenario_group: Option<&String>,
enabled: bool) -> altv_wasm_shared::natives_result::ResultOfSetScenarioGroupEnabled {
    crate::__imports::native_set_scenario_group_enabled(scenario_group,
enabled)
}
pub fn set_anim_rate(entity: u32,
rate: f32,
priority: i32,
secondary: bool) -> altv_wasm_shared::natives_result::ResultOfSetAnimRate {
    crate::__imports::native_set_anim_rate(entity,
rate,
priority,
secondary)
}
pub fn task_go_to_entity_while_aiming_at_coord(ped: u32,
entity: u32,
aim_x: f32,
aim_y: f32,
aim_z: f32,
move_blend_ratio: f32,
shoot: bool,
target_radius: f32,
slow_distance: f32,
use_nav_mesh: bool,
instant_blend_to_aim: bool,
firing_pattern: u32) -> altv_wasm_shared::natives_result::ResultOfTaskGoToEntityWhileAimingAtCoord {
    crate::__imports::native_task_go_to_entity_while_aiming_at_coord(ped,
entity,
aim_x,
aim_y,
aim_z,
move_blend_ratio,
shoot,
target_radius,
slow_distance,
use_nav_mesh,
instant_blend_to_aim,
firing_pattern)
}
pub fn waypoint_playback_start_shooting_at_coord(ped: u32,
x: f32,
y: f32,
z: f32,
p4: bool,
firing_pattern: u32) -> altv_wasm_shared::natives_result::ResultOfWaypointPlaybackStartShootingAtCoord {
    crate::__imports::native_waypoint_playback_start_shooting_at_coord(ped,
x,
y,
z,
p4,
firing_pattern)
}
pub fn set_parachute_task_thrust(ped: u32,
thrust: f32) -> altv_wasm_shared::natives_result::ResultOfSetParachuteTaskThrust {
    crate::__imports::native_set_parachute_task_thrust(ped,
thrust)
}
pub fn task_follow_waypoint_recording(ped: u32,
name: Option<&String>,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfTaskFollowWaypointRecording {
    crate::__imports::native_task_follow_waypoint_recording(ped,
name,
p2,
p3,
p4)
}
pub fn task_shoot_at_entity(entity: u32,
target: u32,
duration: i32,
firing_pattern: u32) -> altv_wasm_shared::natives_result::ResultOfTaskShootAtEntity {
    crate::__imports::native_task_shoot_at_entity(entity,
target,
duration,
firing_pattern)
}
pub fn task_rappel_from_heli(ped: u32,
min_height_above_ground: f32) -> altv_wasm_shared::natives_result::ResultOfTaskRappelFromHeli {
    crate::__imports::native_task_rappel_from_heli(ped,
min_height_above_ground)
}
pub fn does_scenario_of_type_exist_in_area(x: f32,
y: f32,
z: f32,
scenario_name: Option<&String>,
radius: f32,
must_be_free: bool) -> altv_wasm_shared::natives_result::ResultOfDoesScenarioOfTypeExistInArea {
    crate::__imports::native_does_scenario_of_type_exist_in_area(x,
y,
z,
scenario_name,
radius,
must_be_free)
}
pub fn task_jump(ped: u32,
use_player_launch_force: bool,
do_super_jump: bool,
use_full_super_jump_force: bool) -> altv_wasm_shared::natives_result::ResultOfTaskJump {
    crate::__imports::native_task_jump(ped,
use_player_launch_force,
do_super_jump,
use_full_super_jump_force)
}
pub fn reset_scenario_types_enabled() -> altv_wasm_shared::natives_result::ResultOfResetScenarioTypesEnabled {
    crate::__imports::native_reset_scenario_types_enabled()
}
pub fn waypoint_playback_pause(p0: i32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfWaypointPlaybackPause {
    crate::__imports::native_waypoint_playback_pause(p0,
p1,
p2)
}
pub fn task_vehicle_park(ped: u32,
vehicle: u32,
x: f32,
y: f32,
z: f32,
heading: f32,
mode: i32,
radius: f32,
keep_engine_on: bool) -> altv_wasm_shared::natives_result::ResultOfTaskVehiclePark {
    crate::__imports::native_task_vehicle_park(ped,
vehicle,
x,
y,
z,
heading,
mode,
radius,
keep_engine_on)
}
pub fn task_clear_look_at(ped: u32) -> altv_wasm_shared::natives_result::ResultOfTaskClearLookAt {
    crate::__imports::native_task_clear_look_at(ped)
}
pub fn task_vehicle_escort(ped: u32,
vehicle: u32,
target_vehicle: u32,
mode: i32,
speed: f32,
driving_style: i32,
min_distance: f32,
min_height_above_terrain: i32,
no_roads_distance: f32) -> altv_wasm_shared::natives_result::ResultOfTaskVehicleEscort {
    crate::__imports::native_task_vehicle_escort(ped,
vehicle,
target_vehicle,
mode,
speed,
driving_style,
min_distance,
min_height_above_terrain,
no_roads_distance)
}
pub fn set_task_move_network_enable_collision_on_network_clone_when_fixed(ped: u32,
enable: bool) -> altv_wasm_shared::natives_result::ResultOfSetTaskMoveNetworkEnableCollisionOnNetworkCloneWhenFixed {
    crate::__imports::native_set_task_move_network_enable_collision_on_network_clone_when_fixed(ped,
enable)
}
pub fn task_vehicle_shoot_at_ped(ped: u32,
target: u32,
fire_tolerance: f32) -> altv_wasm_shared::natives_result::ResultOfTaskVehicleShootAtPed {
    crate::__imports::native_task_vehicle_shoot_at_ped(ped,
target,
fire_tolerance)
}
pub fn task_go_to_coord_while_aiming_at_coord(ped: u32,
x: f32,
y: f32,
z: f32,
aim_at_x: f32,
aim_at_y: f32,
aim_at_z: f32,
move_blend_ratio: f32,
shoot: bool,
target_radius: f32,
slow_distance: f32,
use_nav_mesh: bool,
nav_flags: i32,
instant_blend_to_aim: bool,
firing_pattern: u32) -> altv_wasm_shared::natives_result::ResultOfTaskGoToCoordWhileAimingAtCoord {
    crate::__imports::native_task_go_to_coord_while_aiming_at_coord(ped,
x,
y,
z,
aim_at_x,
aim_at_y,
aim_at_z,
move_blend_ratio,
shoot,
target_radius,
slow_distance,
use_nav_mesh,
nav_flags,
instant_blend_to_aim,
firing_pattern)
}
pub fn vehicle_waypoint_playback_override_speed(vehicle: u32,
speed: f32) -> altv_wasm_shared::natives_result::ResultOfVehicleWaypointPlaybackOverrideSpeed {
    crate::__imports::native_vehicle_waypoint_playback_override_speed(vehicle,
speed)
}
pub fn task_scripted_animation(ped: u32,
priority_low_data: i32,
priority_mid_data: i32,
priority_high_data: i32,
blend_in_delta: f32,
blend_out_delta: f32) -> altv_wasm_shared::natives_result::ResultOfTaskScriptedAnimation {
    crate::__imports::native_task_scripted_animation(ped,
priority_low_data,
priority_mid_data,
priority_high_data,
blend_in_delta,
blend_out_delta)
}
pub fn assisted_movement_override_load_distance_this_frame(dist: f32) -> altv_wasm_shared::natives_result::ResultOfAssistedMovementOverrideLoadDistanceThisFrame {
    crate::__imports::native_assisted_movement_override_load_distance_this_frame(dist)
}
pub fn task_start_scenario_in_place(ped: u32,
scenario_name: Option<&String>,
unk_delay: i32,
play_enter_anim: bool) -> altv_wasm_shared::natives_result::ResultOfTaskStartScenarioInPlace {
    crate::__imports::native_task_start_scenario_in_place(ped,
scenario_name,
unk_delay,
play_enter_anim)
}
pub fn task_vehicle_drive_to_coord_longrange(ped: u32,
vehicle: u32,
x: f32,
y: f32,
z: f32,
speed: f32,
drive_mode: i32,
stop_range: f32) -> altv_wasm_shared::natives_result::ResultOfTaskVehicleDriveToCoordLongrange {
    crate::__imports::native_task_vehicle_drive_to_coord_longrange(ped,
vehicle,
x,
y,
z,
speed,
drive_mode,
stop_range)
}
pub fn task_boat_mission(ped_driver: u32,
vehicle: u32,
target_vehicle: u32,
target_ped: u32,
x: f32,
y: f32,
z: f32,
mission: i32,
max_speed: f32,
driving_style: i32,
target_reached: f32,
boat_flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskBoatMission {
    crate::__imports::native_task_boat_mission(ped_driver,
vehicle,
target_vehicle,
target_ped,
x,
y,
z,
mission,
max_speed,
driving_style,
target_reached,
boat_flags)
}
pub fn task_follow_nav_mesh_to_coord(ped: u32,
x: f32,
y: f32,
z: f32,
move_blend_ratio: f32,
time: i32,
target_radius: f32,
flags: i32,
target_heading: f32) -> altv_wasm_shared::natives_result::ResultOfTaskFollowNavMeshToCoord {
    crate::__imports::native_task_follow_nav_mesh_to_coord(ped,
x,
y,
z,
move_blend_ratio,
time,
target_radius,
flags,
target_heading)
}
pub fn clear_ped_secondary_task(ped: u32) -> altv_wasm_shared::natives_result::ResultOfClearPedSecondaryTask {
    crate::__imports::native_clear_ped_secondary_task(ped)
}
pub fn task_follow_nav_mesh_to_coord_advanced(ped: u32,
x: f32,
y: f32,
z: f32,
move_blend_ratio: f32,
time: i32,
target_radius: f32,
flags: i32,
slide_to_coord_heading: f32,
max_slope_navigable: f32,
clamp_max_search_distance: f32,
target_heading: f32) -> altv_wasm_shared::natives_result::ResultOfTaskFollowNavMeshToCoordAdvanced {
    crate::__imports::native_task_follow_nav_mesh_to_coord_advanced(ped,
x,
y,
z,
move_blend_ratio,
time,
target_radius,
flags,
slide_to_coord_heading,
max_slope_navigable,
clamp_max_search_distance,
target_heading)
}
pub fn task_vehicle_goto_navmesh(ped: u32,
vehicle: u32,
x: f32,
y: f32,
z: f32,
speed: f32,
behavior_flag: i32,
stopping_range: f32) -> altv_wasm_shared::natives_result::ResultOfTaskVehicleGotoNavmesh {
    crate::__imports::native_task_vehicle_goto_navmesh(ped,
vehicle,
x,
y,
z,
speed,
behavior_flag,
stopping_range)
}
pub fn task_agitated_action_confront_response(ped: u32,
ped2: u32) -> altv_wasm_shared::natives_result::ResultOfTaskAgitatedActionConfrontResponse {
    crate::__imports::native_task_agitated_action_confront_response(ped,
ped2)
}
pub fn task_put_ped_directly_into_melee(ped: u32,
melee_target: u32,
blend_in_duration: f32,
time_in_melee: f32,
strafe_phase_sync: f32,
ai_combat_flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskPutPedDirectlyIntoMelee {
    crate::__imports::native_task_put_ped_directly_into_melee(ped,
melee_target,
blend_in_duration,
time_in_melee,
strafe_phase_sync,
ai_combat_flags)
}
pub fn task_go_to_coord_any_means_extra_params(ped: u32,
x: f32,
y: f32,
z: f32,
move_blend_ratio: f32,
vehicle: u32,
use_long_range_vehicle_pathing: bool,
driving_flags: i32,
max_range_to_shoot_targets: f32,
extra_veh_to_target_dist_to_prefer_vehicle: f32,
drive_straight_line_distance: f32,
extra_flags: i32,
warp_timer_m_s: f32) -> altv_wasm_shared::natives_result::ResultOfTaskGoToCoordAnyMeansExtraParams {
    crate::__imports::native_task_go_to_coord_any_means_extra_params(ped,
x,
y,
z,
move_blend_ratio,
vehicle,
use_long_range_vehicle_pathing,
driving_flags,
max_range_to_shoot_targets,
extra_veh_to_target_dist_to_prefer_vehicle,
drive_straight_line_distance,
extra_flags,
warp_timer_m_s)
}
pub fn task_turn_ped_to_face_coord(ped: u32,
x: f32,
y: f32,
z: f32,
duration: i32) -> altv_wasm_shared::natives_result::ResultOfTaskTurnPedToFaceCoord {
    crate::__imports::native_task_turn_ped_to_face_coord(ped,
x,
y,
z,
duration)
}
pub fn task_vehicle_heli_protect(pilot: u32,
vehicle: u32,
entity_to_follow: u32,
target_speed: f32,
driving_flags: i32,
radius: f32,
altitude: i32,
heli_flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskVehicleHeliProtect {
    crate::__imports::native_task_vehicle_heli_protect(pilot,
vehicle,
entity_to_follow,
target_speed,
driving_flags,
radius,
altitude,
heli_flags)
}
pub fn task_extend_route(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfTaskExtendRoute {
    crate::__imports::native_task_extend_route(x,
y,
z)
}
pub fn set_ped_desired_move_blend_ratio(ped: u32,
new_move_blend_ratio: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedDesiredMoveBlendRatio {
    crate::__imports::native_set_ped_desired_move_blend_ratio(ped,
new_move_blend_ratio)
}
pub fn get_phone_gesture_anim_total_time(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPhoneGestureAnimTotalTime {
    crate::__imports::native_get_phone_gesture_anim_total_time(ped)
}
pub fn remove_specific_cover_blocking_areas(start_x: f32,
start_y: f32,
start_z: f32,
end_x: f32,
end_y: f32,
end_z: f32,
block_objects: bool,
block_vehicles: bool,
block_map: bool,
block_player: bool) -> altv_wasm_shared::natives_result::ResultOfRemoveSpecificCoverBlockingAreas {
    crate::__imports::native_remove_specific_cover_blocking_areas(start_x,
start_y,
start_z,
end_x,
end_y,
end_z,
block_objects,
block_vehicles,
block_map,
block_player)
}
pub fn task_sweep_aim_entity(ped: u32,
anim_dict: Option<&String>,
low_anim_name: Option<&String>,
med_anim_name: Option<&String>,
hi_anim_name: Option<&String>,
runtime: i32,
target_entity: u32,
turn_rate: f32,
blend_in_duration: f32) -> altv_wasm_shared::natives_result::ResultOfTaskSweepAimEntity {
    crate::__imports::native_task_sweep_aim_entity(ped,
anim_dict,
low_anim_name,
med_anim_name,
hi_anim_name,
runtime,
target_entity,
turn_rate,
blend_in_duration)
}
pub fn set_anim_weight(entity: u32,
weight: f32,
priority: i32,
index: i32,
secondary: bool) -> altv_wasm_shared::natives_result::ResultOfSetAnimWeight {
    crate::__imports::native_set_anim_weight(entity,
weight,
priority,
index,
secondary)
}
pub fn waypoint_playback_start_aiming_at_ped(ped: u32,
target: u32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfWaypointPlaybackStartAimingAtPed {
    crate::__imports::native_waypoint_playback_start_aiming_at_ped(ped,
target,
p2)
}
pub fn task_smart_flee_ped(ped: u32,
flee_target: u32,
safe_distance: f32,
flee_time: i32,
prefer_pavements: bool,
update_to_nearest_hated_ped: bool) -> altv_wasm_shared::natives_result::ResultOfTaskSmartFleePed {
    crate::__imports::native_task_smart_flee_ped(ped,
flee_target,
safe_distance,
flee_time,
prefer_pavements,
update_to_nearest_hated_ped)
}
pub fn add_patrol_route_link(node_id1: i32,
node_id2: i32) -> altv_wasm_shared::natives_result::ResultOfAddPatrolRouteLink {
    crate::__imports::native_add_patrol_route_link(node_id1,
node_id2)
}
pub fn task_plane_mission(pilot: u32,
aircraft: u32,
target_vehicle: u32,
target_ped: u32,
destination_x: f32,
destination_y: f32,
destination_z: f32,
mission_flag: i32,
angular_drag: f32,
target_reached: f32,
target_heading: f32,
max_z: f32,
min_z: f32,
precise: bool) -> altv_wasm_shared::natives_result::ResultOfTaskPlaneMission {
    crate::__imports::native_task_plane_mission(pilot,
aircraft,
target_vehicle,
target_ped,
destination_x,
destination_y,
destination_z,
mission_flag,
angular_drag,
target_reached,
target_heading,
max_z,
min_z,
precise)
}
pub fn waypoint_playback_resume(p0: i32,
p1: bool,
p2: i32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfWaypointPlaybackResume {
    crate::__imports::native_waypoint_playback_resume(p0,
p1,
p2,
p3)
}
pub fn is_move_blend_ratio_sprinting(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsMoveBlendRatioSprinting {
    crate::__imports::native_is_move_blend_ratio_sprinting(ped)
}
pub fn get_ped_waypoint_progress(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedWaypointProgress {
    crate::__imports::native_get_ped_waypoint_progress(ped)
}
pub fn task_use_nearest_scenario_to_coord(ped: u32,
x: f32,
y: f32,
z: f32,
distance: f32,
duration: i32) -> altv_wasm_shared::natives_result::ResultOfTaskUseNearestScenarioToCoord {
    crate::__imports::native_task_use_nearest_scenario_to_coord(ped,
x,
y,
z,
distance,
duration)
}
pub fn add_scripted_cover_area(x: f32,
y: f32,
z: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfAddScriptedCoverArea {
    crate::__imports::native_add_scripted_cover_area(x,
y,
z,
radius)
}
pub fn ped_has_use_scenario_task(ped: u32) -> altv_wasm_shared::natives_result::ResultOfPedHasUseScenarioTask {
    crate::__imports::native_ped_has_use_scenario_task(ped)
}
pub fn task_move_network_advanced_by_name_with_init_params(ped: u32,
network: Option<&String>,
initial_parameters: i32,
x: f32,
y: f32,
z: f32,
rot_x: f32,
rot_y: f32,
rot_z: f32,
rot_order: i32,
blend_duration: f32,
allow_override_clone_update: bool,
dictionary: Option<&String>,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskMoveNetworkAdvancedByNameWithInitParams {
    crate::__imports::native_task_move_network_advanced_by_name_with_init_params(ped,
network,
initial_parameters,
x,
y,
z,
rot_x,
rot_y,
rot_z,
rot_order,
blend_duration,
allow_override_clone_update,
dictionary,
flags)
}
pub fn is_ped_getting_up(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedGettingUp {
    crate::__imports::native_is_ped_getting_up(ped)
}
pub fn task_combat_hated_targets_around_ped_timed(ped: u32,
radius: f32,
time: i32,
combat_flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskCombatHatedTargetsAroundPedTimed {
    crate::__imports::native_task_combat_hated_targets_around_ped_timed(ped,
radius,
time,
combat_flags)
}
pub fn task_plane_chase(pilot: u32,
entity_to_follow: u32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfTaskPlaneChase {
    crate::__imports::native_task_plane_chase(pilot,
entity_to_follow,
x,
y,
z)
}
pub fn task_move_network_by_name(ped: u32,
task: Option<&String>,
multiplier: f32,
allow_override_clone_update: bool,
anim_dict: Option<&String>,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskMoveNetworkByName {
    crate::__imports::native_task_move_network_by_name(ped,
task,
multiplier,
allow_override_clone_update,
anim_dict,
flags)
}
pub fn task_drive_by(driver_ped: u32,
target_ped: u32,
target_vehicle: u32,
target_x: f32,
target_y: f32,
target_z: f32,
distance_to_shoot: f32,
ped_accuracy: i32,
push_underneath_driving_task_if_driving: bool,
firing_pattern: u32) -> altv_wasm_shared::natives_result::ResultOfTaskDriveBy {
    crate::__imports::native_task_drive_by(driver_ped,
target_ped,
target_vehicle,
target_x,
target_y,
target_z,
distance_to_shoot,
ped_accuracy,
push_underneath_driving_task_if_driving,
firing_pattern)
}
pub fn waypoint_recording_get_coord(name: Option<&String>,
point: i32,
coord: Option<&shared::Vector3>) -> altv_wasm_shared::natives_result::ResultOfWaypointRecordingGetCoord {
    crate::__imports::native_waypoint_recording_get_coord(name,
point,
coord)
}
pub fn task_follow_to_offset_of_entity(ped: u32,
entity: u32,
offset_x: f32,
offset_y: f32,
offset_z: f32,
movement_speed: f32,
timeout: i32,
stopping_range: f32,
persist_following: bool) -> altv_wasm_shared::natives_result::ResultOfTaskFollowToOffsetOfEntity {
    crate::__imports::native_task_follow_to_offset_of_entity(ped,
entity,
offset_x,
offset_y,
offset_z,
movement_speed,
timeout,
stopping_range,
persist_following)
}
pub fn is_task_move_network_ready_for_transition(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsTaskMoveNetworkReadyForTransition {
    crate::__imports::native_is_task_move_network_ready_for_transition(ped)
}
pub fn task_vehicle_follow_waypoint_recording(ped: u32,
vehicle: u32,
w_p_recording: Option<&String>,
p3: i32,
p4: i32,
p5: i32,
p6: i32,
p7: f32,
p8: bool,
p9: f32) -> altv_wasm_shared::natives_result::ResultOfTaskVehicleFollowWaypointRecording {
    crate::__imports::native_task_vehicle_follow_waypoint_recording(ped,
vehicle,
w_p_recording,
p3,
p4,
p5,
p6,
p7,
p8,
p9)
}
pub fn task_goto_entity_offset_xy(ped: u32,
entity: u32,
duration: i32,
target_radius: f32,
offset_x: f32,
offset_y: f32,
move_blend_ratio: f32,
goto_entity_offset_flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskGotoEntityOffsetXy {
    crate::__imports::native_task_goto_entity_offset_xy(ped,
entity,
duration,
target_radius,
offset_x,
offset_y,
move_blend_ratio,
goto_entity_offset_flags)
}
pub fn is_move_blend_ratio_still(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsMoveBlendRatioStill {
    crate::__imports::native_is_move_blend_ratio_still(ped)
}
pub fn assisted_movement_remove_route(route: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAssistedMovementRemoveRoute {
    crate::__imports::native_assisted_movement_remove_route(route)
}
pub fn is_scenario_group_enabled(scenario_group: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfIsScenarioGroupEnabled {
    crate::__imports::native_is_scenario_group_enabled(scenario_group)
}
pub fn set_task_move_network_signal_local_float(ped: u32,
signal_name: Option<&String>,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetTaskMoveNetworkSignalLocalFloat {
    crate::__imports::native_set_task_move_network_signal_local_float(ped,
signal_name,
value)
}
pub fn clear_sequence_task(task_sequence_id: i32) -> altv_wasm_shared::natives_result::ResultOfClearSequenceTask {
    crate::__imports::native_clear_sequence_task(task_sequence_id)
}
pub fn set_ped_path_prefer_to_avoid_water(ped: u32,
avoid_water: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedPathPreferToAvoidWater {
    crate::__imports::native_set_ped_path_prefer_to_avoid_water(ped,
avoid_water)
}
pub fn task_seek_cover_to_coords(ped: u32,
x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
timeout: i32,
short_route: bool) -> altv_wasm_shared::natives_result::ResultOfTaskSeekCoverToCoords {
    crate::__imports::native_task_seek_cover_to_coords(ped,
x1,
y1,
z1,
x2,
y2,
z2,
timeout,
short_route)
}
pub fn close_sequence_task(task_sequence_id: i32) -> altv_wasm_shared::natives_result::ResultOfCloseSequenceTask {
    crate::__imports::native_close_sequence_task(task_sequence_id)
}
pub fn is_scenario_type_enabled(scenario_type: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfIsScenarioTypeEnabled {
    crate::__imports::native_is_scenario_type_enabled(scenario_type)
}
pub fn get_clip_set_for_scripted_gun_task(gun_task_type: i32) -> altv_wasm_shared::natives_result::ResultOfGetClipSetForScriptedGunTask {
    crate::__imports::native_get_clip_set_for_scripted_gun_task(gun_task_type)
}
pub fn task_vehicle_chase(driver: u32,
target_ent: u32) -> altv_wasm_shared::natives_result::ResultOfTaskVehicleChase {
    crate::__imports::native_task_vehicle_chase(driver,
target_ent)
}
pub fn task_move_network_by_name_with_init_params(ped: u32,
network: Option<&String>,
initial_parameters: i32,
blend_duration: f32,
allow_override_clone_update: bool,
anim_dict: Option<&String>,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskMoveNetworkByNameWithInitParams {
    crate::__imports::native_task_move_network_by_name_with_init_params(ped,
network,
initial_parameters,
blend_duration,
allow_override_clone_update,
anim_dict,
flags)
}
pub fn is_ped_running_arrest_task(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedRunningArrestTask {
    crate::__imports::native_is_ped_running_arrest_task(ped)
}
pub fn is_controlled_vehicle_unable_to_get_to_road(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsControlledVehicleUnableToGetToRoad {
    crate::__imports::native_is_controlled_vehicle_unable_to_get_to_road(ped)
}
pub fn task_cower(ped: u32,
duration: i32) -> altv_wasm_shared::natives_result::ResultOfTaskCower {
    crate::__imports::native_task_cower(ped,
duration)
}
pub fn task_stop_phone_gesture_animation(ped: u32,
blend_out_override: f32) -> altv_wasm_shared::natives_result::ResultOfTaskStopPhoneGestureAnimation {
    crate::__imports::native_task_stop_phone_gesture_animation(ped,
blend_out_override)
}
pub fn set_drive_task_max_cruise_speed(ped: u32,
speed: f32) -> altv_wasm_shared::natives_result::ResultOfSetDriveTaskMaxCruiseSpeed {
    crate::__imports::native_set_drive_task_max_cruise_speed(ped,
speed)
}
pub fn get_vehicle_waypoint_target_point(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleWaypointTargetPoint {
    crate::__imports::native_get_vehicle_waypoint_target_point(vehicle)
}
pub fn task_put_ped_directly_into_cover(ped: u32,
x: f32,
y: f32,
z: f32,
time: i32,
allow_peeking_and_firing: bool,
blend_in_duration: f32,
force_initial_facing_direction: bool,
force_face_left: bool,
identifier: i32,
do_entry: bool) -> altv_wasm_shared::natives_result::ResultOfTaskPutPedDirectlyIntoCover {
    crate::__imports::native_task_put_ped_directly_into_cover(ped,
x,
y,
z,
time,
allow_peeking_and_firing,
blend_in_duration,
force_initial_facing_direction,
force_face_left,
identifier,
do_entry)
}
pub fn reset_exclusive_scenario_group() -> altv_wasm_shared::natives_result::ResultOfResetExclusiveScenarioGroup {
    crate::__imports::native_reset_exclusive_scenario_group()
}
pub fn set_ped_path_avoid_fire(ped: u32,
avoid_fire: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedPathAvoidFire {
    crate::__imports::native_set_ped_path_avoid_fire(ped,
avoid_fire)
}
pub fn task_vehicle_aim_at_coord(ped: u32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfTaskVehicleAimAtCoord {
    crate::__imports::native_task_vehicle_aim_at_coord(ped,
x,
y,
z)
}
pub fn get_task_move_network_signal_float(ped: u32,
signal_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetTaskMoveNetworkSignalFloat {
    crate::__imports::native_get_task_move_network_signal_float(ped,
signal_name)
}
pub fn task_shocking_event_react(ped: u32,
event_handle: i32) -> altv_wasm_shared::natives_result::ResultOfTaskShockingEventReact {
    crate::__imports::native_task_shocking_event_react(ped,
event_handle)
}
pub fn add_cover_blocking_area(start_x: f32,
start_y: f32,
start_z: f32,
end_x: f32,
end_y: f32,
end_z: f32,
block_objects: bool,
block_vehicles: bool,
block_map: bool,
block_player: bool) -> altv_wasm_shared::natives_result::ResultOfAddCoverBlockingArea {
    crate::__imports::native_add_cover_blocking_area(start_x,
start_y,
start_z,
end_x,
end_y,
end_z,
block_objects,
block_vehicles,
block_map,
block_player)
}
pub fn task_shoot_at_coord(ped: u32,
x: f32,
y: f32,
z: f32,
duration: i32,
firing_pattern: u32) -> altv_wasm_shared::natives_result::ResultOfTaskShootAtCoord {
    crate::__imports::native_task_shoot_at_coord(ped,
x,
y,
z,
duration,
firing_pattern)
}
pub fn get_phone_gesture_anim_current_time(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPhoneGestureAnimCurrentTime {
    crate::__imports::native_get_phone_gesture_anim_current_time(ped)
}
pub fn waypoint_playback_stop_aiming_or_shooting(ped: u32) -> altv_wasm_shared::natives_result::ResultOfWaypointPlaybackStopAimingOrShooting {
    crate::__imports::native_waypoint_playback_stop_aiming_or_shooting(ped)
}
pub fn task_vehicle_drive_wander(ped: u32,
vehicle: u32,
speed: f32,
driving_style: i32) -> altv_wasm_shared::natives_result::ResultOfTaskVehicleDriveWander {
    crate::__imports::native_task_vehicle_drive_wander(ped,
vehicle,
speed,
driving_style)
}
pub fn task_guard_current_position(ped: u32,
max_patrol_proximity: f32,
defensive_area_radius: f32,
set_defensive_area: bool) -> altv_wasm_shared::natives_result::ResultOfTaskGuardCurrentPosition {
    crate::__imports::native_task_guard_current_position(ped,
max_patrol_proximity,
defensive_area_radius,
set_defensive_area)
}
pub fn task_combat_hated_targets_in_area(ped: u32,
x: f32,
y: f32,
z: f32,
radius: f32,
combat_flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskCombatHatedTargetsInArea {
    crate::__imports::native_task_combat_hated_targets_in_area(ped,
x,
y,
z,
radius,
combat_flags)
}
pub fn task_force_motion_state(ped: u32,
state: u32,
force_restart: bool) -> altv_wasm_shared::natives_result::ResultOfTaskForceMotionState {
    crate::__imports::native_task_force_motion_state(ped,
state,
force_restart)
}
pub fn task_leave_any_vehicle(ped: u32,
delay_time: i32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskLeaveAnyVehicle {
    crate::__imports::native_task_leave_any_vehicle(ped,
delay_time,
flags)
}
pub fn task_vehicle_shoot_at_coord(ped: u32,
x: f32,
y: f32,
z: f32,
fire_tolerance: f32) -> altv_wasm_shared::natives_result::ResultOfTaskVehicleShootAtCoord {
    crate::__imports::native_task_vehicle_shoot_at_coord(ped,
x,
y,
z,
fire_tolerance)
}
pub fn get_patrol_task_info(ped: u32,
time_left_at_node: i32,
node_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetPatrolTaskInfo {
    crate::__imports::native_get_patrol_task_info(ped,
time_left_at_node,
node_id)
}
pub fn waypoint_recording_get_num_points(name: Option<&String>,
points: i32) -> altv_wasm_shared::natives_result::ResultOfWaypointRecordingGetNumPoints {
    crate::__imports::native_waypoint_recording_get_num_points(name,
points)
}
pub fn get_active_vehicle_mission_type(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetActiveVehicleMissionType {
    crate::__imports::native_get_active_vehicle_mission_type(vehicle)
}
pub fn set_exclusive_scenario_group(scenario_group: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetExclusiveScenarioGroup {
    crate::__imports::native_set_exclusive_scenario_group(scenario_group)
}
pub fn clear_vehicle_crash_task(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfClearVehicleCrashTask {
    crate::__imports::native_clear_vehicle_crash_task(vehicle)
}
pub fn is_ped_sprinting(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedSprinting {
    crate::__imports::native_is_ped_sprinting(ped)
}
pub fn set_sequence_to_repeat(task_sequence_id: i32,
repeat: bool) -> altv_wasm_shared::natives_result::ResultOfSetSequenceToRepeat {
    crate::__imports::native_set_sequence_to_repeat(task_sequence_id,
repeat)
}
pub fn task_use_nearest_scenario_to_coord_warp(ped: u32,
x: f32,
y: f32,
z: f32,
radius: f32,
time_to_leave: i32) -> altv_wasm_shared::natives_result::ResultOfTaskUseNearestScenarioToCoordWarp {
    crate::__imports::native_task_use_nearest_scenario_to_coord_warp(ped,
x,
y,
z,
radius,
time_to_leave)
}
pub fn get_scripted_cover_point_coords(coverpoint: u32) -> altv_wasm_shared::natives_result::ResultOfGetScriptedCoverPointCoords {
    crate::__imports::native_get_scripted_cover_point_coords(coverpoint)
}
pub fn task_follow_point_route(ped: u32,
speed: f32,
mode: i32) -> altv_wasm_shared::natives_result::ResultOfTaskFollowPointRoute {
    crate::__imports::native_task_follow_point_route(ped,
speed,
mode)
}
pub fn use_waypoint_recording_as_assisted_movement_route(name: Option<&String>,
p1: bool,
p2: f32,
p3: f32) -> altv_wasm_shared::natives_result::ResultOfUseWaypointRecordingAsAssistedMovementRoute {
    crate::__imports::native_use_waypoint_recording_as_assisted_movement_route(name,
p1,
p2,
p3)
}
pub fn task_ped_slide_to_coord_hdg_rate(ped: u32,
x: f32,
y: f32,
z: f32,
heading: f32,
speed: f32,
heading_change_rate: f32) -> altv_wasm_shared::natives_result::ResultOfTaskPedSlideToCoordHdgRate {
    crate::__imports::native_task_ped_slide_to_coord_hdg_rate(ped,
x,
y,
z,
heading,
speed,
heading_change_rate)
}
pub fn does_scenario_exist_in_area(x: f32,
y: f32,
z: f32,
radius: f32,
must_be_free: bool) -> altv_wasm_shared::natives_result::ResultOfDoesScenarioExistInArea {
    crate::__imports::native_does_scenario_exist_in_area(x,
y,
z,
radius,
must_be_free)
}
pub fn task_perform_sequence(ped: u32,
task_sequence_id: i32) -> altv_wasm_shared::natives_result::ResultOfTaskPerformSequence {
    crate::__imports::native_task_perform_sequence(ped,
task_sequence_id)
}
pub fn task_turn_ped_to_face_entity(ped: u32,
entity: u32,
duration: i32) -> altv_wasm_shared::natives_result::ResultOfTaskTurnPedToFaceEntity {
    crate::__imports::native_task_turn_ped_to_face_entity(ped,
entity,
duration)
}
pub fn task_go_to_coord_any_means(ped: u32,
x: f32,
y: f32,
z: f32,
move_blend_ratio: f32,
vehicle: u32,
use_long_range_vehicle_pathing: bool,
driving_flags: i32,
max_range_to_shoot_targets: f32) -> altv_wasm_shared::natives_result::ResultOfTaskGoToCoordAnyMeans {
    crate::__imports::native_task_go_to_coord_any_means(ped,
x,
y,
z,
move_blend_ratio,
vehicle,
use_long_range_vehicle_pathing,
driving_flags,
max_range_to_shoot_targets)
}
pub fn set_drive_task_cruise_speed(driver: u32,
cruise_speed: f32) -> altv_wasm_shared::natives_result::ResultOfSetDriveTaskCruiseSpeed {
    crate::__imports::native_set_drive_task_cruise_speed(driver,
cruise_speed)
}
pub fn vehicle_waypoint_playback_use_default_speed(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfVehicleWaypointPlaybackUseDefaultSpeed {
    crate::__imports::native_vehicle_waypoint_playback_use_default_speed(vehicle)
}
pub fn add_vehicle_subtask_attack_coord(ped: u32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfAddVehicleSubtaskAttackCoord {
    crate::__imports::native_add_vehicle_subtask_attack_coord(ped,
x,
y,
z)
}
pub fn task_use_mobile_phone_timed(ped: u32,
duration: i32) -> altv_wasm_shared::natives_result::ResultOfTaskUseMobilePhoneTimed {
    crate::__imports::native_task_use_mobile_phone_timed(ped,
duration)
}
pub fn task_sky_dive(ped: u32,
instant: bool) -> altv_wasm_shared::natives_result::ResultOfTaskSkyDive {
    crate::__imports::native_task_sky_dive(ped,
instant)
}
pub fn assisted_movement_is_route_loaded(route: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAssistedMovementIsRouteLoaded {
    crate::__imports::native_assisted_movement_is_route_loaded(route)
}
pub fn clear_default_primary_task(ped: u32) -> altv_wasm_shared::natives_result::ResultOfClearDefaultPrimaryTask {
    crate::__imports::native_clear_default_primary_task(ped)
}
pub fn task_go_straight_to_coord_relative_to_entity(ped: u32,
entity: u32,
x: f32,
y: f32,
z: f32,
move_blend_ratio: f32,
time: i32) -> altv_wasm_shared::natives_result::ResultOfTaskGoStraightToCoordRelativeToEntity {
    crate::__imports::native_task_go_straight_to_coord_relative_to_entity(ped,
entity,
x,
y,
z,
move_blend_ratio,
time)
}
pub fn is_ped_playing_base_clip_in_scenario(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedPlayingBaseClipInScenario {
    crate::__imports::native_is_ped_playing_base_clip_in_scenario(ped)
}
pub fn task_reload_weapon(ped: u32,
draw_weapon: bool) -> altv_wasm_shared::natives_result::ResultOfTaskReloadWeapon {
    crate::__imports::native_task_reload_weapon(ped,
draw_weapon)
}
pub fn get_navmesh_route_result(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetNavmeshRouteResult {
    crate::__imports::native_get_navmesh_route_result(ped)
}
pub fn set_task_vehicle_chase_ideal_pursuit_distance(ped: u32,
distance: f32) -> altv_wasm_shared::natives_result::ResultOfSetTaskVehicleChaseIdealPursuitDistance {
    crate::__imports::native_set_task_vehicle_chase_ideal_pursuit_distance(ped,
distance)
}
pub fn task_vehicle_mission(driver: u32,
vehicle: u32,
vehicle_target: u32,
mission_type: i32,
cruise_speed: f32,
driving_style: i32,
target_reached: f32,
straight_line_distance: f32,
drive_against_traffic: bool) -> altv_wasm_shared::natives_result::ResultOfTaskVehicleMission {
    crate::__imports::native_task_vehicle_mission(driver,
vehicle,
vehicle_target,
mission_type,
cruise_speed,
driving_style,
target_reached,
straight_line_distance,
drive_against_traffic)
}
pub fn waypoint_playback_use_default_speed(p0: i32) -> altv_wasm_shared::natives_result::ResultOfWaypointPlaybackUseDefaultSpeed {
    crate::__imports::native_waypoint_playback_use_default_speed(p0)
}
pub fn task_aim_gun_at_coord(ped: u32,
x: f32,
y: f32,
z: f32,
time: i32,
instant_blend_to_aim: bool,
play_anim_intro: bool) -> altv_wasm_shared::natives_result::ResultOfTaskAimGunAtCoord {
    crate::__imports::native_task_aim_gun_at_coord(ped,
x,
y,
z,
time,
instant_blend_to_aim,
play_anim_intro)
}
pub fn uncuff_ped(ped: u32) -> altv_wasm_shared::natives_result::ResultOfUncuffPed {
    crate::__imports::native_uncuff_ped(ped)
}
pub fn task_wander_specific(ped: u32,
conditional_anim_group_str: Option<&String>,
conditional_anim_str: Option<&String>,
heading: f32) -> altv_wasm_shared::natives_result::ResultOfTaskWanderSpecific {
    crate::__imports::native_task_wander_specific(ped,
conditional_anim_group_str,
conditional_anim_str,
heading)
}
pub fn task_look_at_entity(ped: u32,
look_at: u32,
duration: i32,
flags: i32,
priority: i32) -> altv_wasm_shared::natives_result::ResultOfTaskLookAtEntity {
    crate::__imports::native_task_look_at_entity(ped,
look_at,
duration,
flags,
priority)
}
pub fn task_vehicle_play_anim(vehicle: u32,
animation_set: Option<&String>,
animation_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfTaskVehiclePlayAnim {
    crate::__imports::native_task_vehicle_play_anim(vehicle,
animation_set,
animation_name)
}
pub fn task_go_to_entity(entity: u32,
target: u32,
duration: i32,
distance: f32,
move_blend_ratio: f32,
slow_down_distance: f32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskGoToEntity {
    crate::__imports::native_task_go_to_entity(entity,
target,
duration,
distance,
move_blend_ratio,
slow_down_distance,
flags)
}
pub fn set_global_min_bird_flight_height(height: f32) -> altv_wasm_shared::natives_result::ResultOfSetGlobalMinBirdFlightHeight {
    crate::__imports::native_set_global_min_bird_flight_height(height)
}
pub fn task_warp_ped_directly_into_cover(ped: u32,
time: i32,
allow_peeking_and_firing: bool,
force_initial_facing_direction: bool,
force_face_left: bool,
identifier: i32) -> altv_wasm_shared::natives_result::ResultOfTaskWarpPedDirectlyIntoCover {
    crate::__imports::native_task_warp_ped_directly_into_cover(ped,
time,
allow_peeking_and_firing,
force_initial_facing_direction,
force_face_left,
identifier)
}
pub fn task_look_at_coord(entity: u32,
x: f32,
y: f32,
z: f32,
duration: i32,
flags: i32,
priority: i32) -> altv_wasm_shared::natives_result::ResultOfTaskLookAtCoord {
    crate::__imports::native_task_look_at_coord(entity,
x,
y,
z,
duration,
flags,
priority)
}
pub fn set_anim_looped(entity: u32,
looped: bool,
priority: i32,
secondary: bool) -> altv_wasm_shared::natives_result::ResultOfSetAnimLooped {
    crate::__imports::native_set_anim_looped(entity,
looped,
priority,
secondary)
}
pub fn waypoint_playback_get_is_paused(p0: i32) -> altv_wasm_shared::natives_result::ResultOfWaypointPlaybackGetIsPaused {
    crate::__imports::native_waypoint_playback_get_is_paused(p0)
}
pub fn get_task_move_network_state(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetTaskMoveNetworkState {
    crate::__imports::native_get_task_move_network_state(ped)
}
pub fn task_throw_projectile(ped: u32,
x: f32,
y: f32,
z: f32,
ignore_collision_entity_index: i32,
create_invincible_projectile: bool) -> altv_wasm_shared::natives_result::ResultOfTaskThrowProjectile {
    crate::__imports::native_task_throw_projectile(ped,
x,
y,
z,
ignore_collision_entity_index,
create_invincible_projectile)
}
pub fn task_react_and_flee_ped(ped: u32,
flee_target: u32) -> altv_wasm_shared::natives_result::ResultOfTaskReactAndFleePed {
    crate::__imports::native_task_react_and_flee_ped(ped,
flee_target)
}
pub fn play_anim_on_running_scenario(ped: u32,
anim_dict: Option<&String>,
anim_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfPlayAnimOnRunningScenario {
    crate::__imports::native_play_anim_on_running_scenario(ped,
anim_dict,
anim_name)
}
pub fn is_ped_cuffed(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedCuffed {
    crate::__imports::native_is_ped_cuffed(ped)
}
pub fn task_seek_cover_from_pos(ped: u32,
x: f32,
y: f32,
z: f32,
duration: i32,
allow_peeking_and_firing: bool) -> altv_wasm_shared::natives_result::ResultOfTaskSeekCoverFromPos {
    crate::__imports::native_task_seek_cover_from_pos(ped,
x,
y,
z,
duration,
allow_peeking_and_firing)
}
pub fn delete_patrol_route(patrol_route: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDeletePatrolRoute {
    crate::__imports::native_delete_patrol_route(patrol_route)
}
pub fn play_entity_scripted_anim(entity: u32,
priority_low_data: i32,
priority_mid_data: i32,
priority_high_data: i32,
blend_in_delta: f32,
blend_out_delta: f32) -> altv_wasm_shared::natives_result::ResultOfPlayEntityScriptedAnim {
    crate::__imports::native_play_entity_scripted_anim(entity,
priority_low_data,
priority_mid_data,
priority_high_data,
blend_in_delta,
blend_out_delta)
}
pub fn set_ped_path_can_use_ladders(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedPathCanUseLadders {
    crate::__imports::native_set_ped_path_can_use_ladders(ped,
toggle)
}
pub fn get_script_task_status(ped: u32,
task_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetScriptTaskStatus {
    crate::__imports::native_get_script_task_status(ped,
task_hash)
}
pub fn is_scenario_occupied(x: f32,
y: f32,
z: f32,
max_range: f32,
only_users_actually_at_scenario: bool) -> altv_wasm_shared::natives_result::ResultOfIsScenarioOccupied {
    crate::__imports::native_is_scenario_occupied(x,
y,
z,
max_range,
only_users_actually_at_scenario)
}
pub fn task_exit_cover(ped: u32,
exit_type: i32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfTaskExitCover {
    crate::__imports::native_task_exit_cover(ped,
exit_type,
x,
y,
z)
}
pub fn task_aim_gun_scripted(ped: u32,
script_task: u32,
disable_blocking_clip: bool,
instant_blend_to_aim: bool) -> altv_wasm_shared::natives_result::ResultOfTaskAimGunScripted {
    crate::__imports::native_task_aim_gun_scripted(ped,
script_task,
disable_blocking_clip,
instant_blend_to_aim)
}
pub fn task_shuffle_to_next_vehicle_seat(ped: u32,
vehicle: u32,
use_alternate_shuffle: bool) -> altv_wasm_shared::natives_result::ResultOfTaskShuffleToNextVehicleSeat {
    crate::__imports::native_task_shuffle_to_next_vehicle_seat(ped,
vehicle,
use_alternate_shuffle)
}
pub fn task_sweep_aim_position(ped: u32,
anim_dict: Option<&String>,
low_anim_name: Option<&String>,
med_anim_name: Option<&String>,
hi_anim_name: Option<&String>,
runtime: i32,
x: f32,
y: f32,
z: f32,
turn_rate: f32,
blend_in_duration: f32) -> altv_wasm_shared::natives_result::ResultOfTaskSweepAimPosition {
    crate::__imports::native_task_sweep_aim_position(ped,
anim_dict,
low_anim_name,
med_anim_name,
hi_anim_name,
runtime,
x,
y,
z,
turn_rate,
blend_in_duration)
}
pub fn task_combat_hated_targets_around_ped(ped: u32,
radius: f32,
combat_flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskCombatHatedTargetsAroundPed {
    crate::__imports::native_task_combat_hated_targets_around_ped(ped,
radius,
combat_flags)
}
pub fn waypoint_playback_override_speed(p0: i32,
p1: f32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfWaypointPlaybackOverrideSpeed {
    crate::__imports::native_waypoint_playback_override_speed(p0,
p1,
p2)
}
pub fn task_everyone_leave_vehicle(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfTaskEveryoneLeaveVehicle {
    crate::__imports::native_task_everyone_leave_vehicle(vehicle)
}
pub fn assisted_movement_request_route(route: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfAssistedMovementRequestRoute {
    crate::__imports::native_assisted_movement_request_route(route)
}
pub fn task_play_anim_advanced(ped: u32,
anim_dict: Option<&String>,
anim_name: Option<&String>,
pos_x: f32,
pos_y: f32,
pos_z: f32,
rot_x: f32,
rot_y: f32,
rot_z: f32,
anim_enter_speed: f32,
anim_exit_speed: f32,
duration: i32,
flag: i32,
anim_time: f32,
rot_order: i32,
ik_flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskPlayAnimAdvanced {
    crate::__imports::native_task_play_anim_advanced(ped,
anim_dict,
anim_name,
pos_x,
pos_y,
pos_z,
rot_x,
rot_y,
rot_z,
anim_enter_speed,
anim_exit_speed,
duration,
flag,
anim_time,
rot_order,
ik_flags)
}
pub fn task_flush_route() -> altv_wasm_shared::natives_result::ResultOfTaskFlushRoute {
    crate::__imports::native_task_flush_route()
}
pub fn set_task_move_network_anim_set(ped: u32,
clip_set: u32,
unk_variable_clip_set: u32) -> altv_wasm_shared::natives_result::ResultOfSetTaskMoveNetworkAnimSet {
    crate::__imports::native_set_task_move_network_anim_set(ped,
clip_set,
unk_variable_clip_set)
}
pub fn task_seek_cover_from_ped(ped: u32,
target: u32,
duration: i32,
allow_peeking_and_firing: bool) -> altv_wasm_shared::natives_result::ResultOfTaskSeekCoverFromPed {
    crate::__imports::native_task_seek_cover_from_ped(ped,
target,
duration,
allow_peeking_and_firing)
}
pub fn get_ped_desired_move_blend_ratio(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedDesiredMoveBlendRatio {
    crate::__imports::native_get_ped_desired_move_blend_ratio(ped)
}
pub fn add_vehicle_subtask_attack_ped(ped: u32,
target: u32) -> altv_wasm_shared::natives_result::ResultOfAddVehicleSubtaskAttackPed {
    crate::__imports::native_add_vehicle_subtask_attack_ped(ped,
target)
}
pub fn task_aim_gun_scripted_with_target(ped: u32,
target: u32,
x: f32,
y: f32,
z: f32,
gun_task_type: i32,
disable_blocking_clip: bool,
force_aim: bool) -> altv_wasm_shared::natives_result::ResultOfTaskAimGunScriptedWithTarget {
    crate::__imports::native_task_aim_gun_scripted_with_target(ped,
target,
x,
y,
z,
gun_task_type,
disable_blocking_clip,
force_aim)
}
pub fn set_task_move_network_signal_float_lerp_rate(ped: u32,
signal_name: Option<&String>,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetTaskMoveNetworkSignalFloatLerpRate {
    crate::__imports::native_set_task_move_network_signal_float_lerp_rate(ped,
signal_name,
value)
}
pub fn is_driveby_task_underneath_driving_task(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsDrivebyTaskUnderneathDrivingTask {
    crate::__imports::native_is_driveby_task_underneath_driving_task(ped)
}
pub fn set_ped_path_climb_cost_modifier(ped: u32,
modifier: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedPathClimbCostModifier {
    crate::__imports::native_set_ped_path_climb_cost_modifier(ped,
modifier)
}
pub fn task_perform_sequence_from_progress(ped: u32,
task_index: i32,
progress1: i32,
progress2: i32) -> altv_wasm_shared::natives_result::ResultOfTaskPerformSequenceFromProgress {
    crate::__imports::native_task_perform_sequence_from_progress(ped,
task_index,
progress1,
progress2)
}
pub fn waypoint_playback_start_aiming_at_coord(ped: u32,
x: f32,
y: f32,
z: f32,
p4: bool) -> altv_wasm_shared::natives_result::ResultOfWaypointPlaybackStartAimingAtCoord {
    crate::__imports::native_waypoint_playback_start_aiming_at_coord(ped,
x,
y,
z,
p4)
}
pub fn task_climb(ped: u32,
use_player_launch_force: bool) -> altv_wasm_shared::natives_result::ResultOfTaskClimb {
    crate::__imports::native_task_climb(ped,
use_player_launch_force)
}
pub fn vehicle_waypoint_playback_pause(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfVehicleWaypointPlaybackPause {
    crate::__imports::native_vehicle_waypoint_playback_pause(vehicle)
}
pub fn task_perform_sequence_locally(ped: u32,
task_sequence_id: i32) -> altv_wasm_shared::natives_result::ResultOfTaskPerformSequenceLocally {
    crate::__imports::native_task_perform_sequence_locally(ped,
task_sequence_id)
}
pub fn task_chat_to_ped(ped: u32,
target: u32,
flags: i32,
go_to_location_x: f32,
go_to_location_y: f32,
go_to_location_z: f32,
heading_degs: f32,
idle_time: f32) -> altv_wasm_shared::natives_result::ResultOfTaskChatToPed {
    crate::__imports::native_task_chat_to_ped(ped,
target,
flags,
go_to_location_x,
go_to_location_y,
go_to_location_z,
heading_degs,
idle_time)
}
pub fn set_high_fall_task(ped: u32,
min_time: i32,
max_time: i32,
entry_type: i32) -> altv_wasm_shared::natives_result::ResultOfSetHighFallTask {
    crate::__imports::native_set_high_fall_task(ped,
min_time,
max_time,
entry_type)
}
pub fn set_ped_path_can_use_climbovers(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedPathCanUseClimbovers {
    crate::__imports::native_set_ped_path_can_use_climbovers(ped,
toggle)
}
pub fn add_patrol_route_node(node_id: i32,
node_type: Option<&String>,
pos_x: f32,
pos_y: f32,
pos_z: f32,
heading_x: f32,
heading_y: f32,
heading_z: f32,
duration: i32) -> altv_wasm_shared::natives_result::ResultOfAddPatrolRouteNode {
    crate::__imports::native_add_patrol_route_node(node_id,
node_type,
pos_x,
pos_y,
pos_z,
heading_x,
heading_y,
heading_z,
duration)
}
pub fn task_play_phone_gesture_animation(ped: u32,
anim_dict: Option<&String>,
animation: Option<&String>,
bone_mask_type: Option<&String>,
blend_in_duration: f32,
blend_out_duration: f32,
is_looping: bool,
hold_last_frame: bool) -> altv_wasm_shared::natives_result::ResultOfTaskPlayPhoneGestureAnimation {
    crate::__imports::native_task_play_phone_gesture_animation(ped,
anim_dict,
animation,
bone_mask_type,
blend_in_duration,
blend_out_duration,
is_looping,
hold_last_frame)
}
pub fn set_ped_can_play_ambient_idles(ped: u32,
block_idle_clips: bool,
remove_idle_clip_if_playing: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCanPlayAmbientIdles {
    crate::__imports::native_set_ped_can_play_ambient_idles(ped,
block_idle_clips,
remove_idle_clip_if_playing)
}
pub fn is_ped_being_arrested(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedBeingArrested {
    crate::__imports::native_is_ped_being_arrested(ped)
}
pub fn task_set_blocking_of_non_temporary_events(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfTaskSetBlockingOfNonTemporaryEvents {
    crate::__imports::native_task_set_blocking_of_non_temporary_events(ped,
toggle)
}
pub fn task_stand_still(ped: u32,
time: i32) -> altv_wasm_shared::natives_result::ResultOfTaskStandStill {
    crate::__imports::native_task_stand_still(ped,
time)
}
pub fn is_task_move_network_active(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsTaskMoveNetworkActive {
    crate::__imports::native_is_task_move_network_active(ped)
}
pub fn task_plane_taxi(pilot: u32,
aircraft: u32,
x: f32,
y: f32,
z: f32,
cruise_speed: f32,
target_reached: f32) -> altv_wasm_shared::natives_result::ResultOfTaskPlaneTaxi {
    crate::__imports::native_task_plane_taxi(pilot,
aircraft,
x,
y,
z,
cruise_speed,
target_reached)
}
pub fn task_set_sphere_defensive_area(ped: u32,
x: f32,
y: f32,
z: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfTaskSetSphereDefensiveArea {
    crate::__imports::native_task_set_sphere_defensive_area(ped,
x,
y,
z,
radius)
}
pub fn task_achieve_heading(ped: u32,
heading: f32,
timeout: i32) -> altv_wasm_shared::natives_result::ResultOfTaskAchieveHeading {
    crate::__imports::native_task_achieve_heading(ped,
heading,
timeout)
}
pub fn task_combat_ped_timed(ped: u32,
target: u32,
time: i32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskCombatPedTimed {
    crate::__imports::native_task_combat_ped_timed(ped,
target,
time,
flags)
}
pub fn task_vehicle_mission_ped_target(ped: u32,
vehicle: u32,
ped_target: u32,
mission_type: i32,
max_speed: f32,
driving_style: i32,
min_distance: f32,
straight_line_distance: f32,
drive_against_traffic: bool) -> altv_wasm_shared::natives_result::ResultOfTaskVehicleMissionPedTarget {
    crate::__imports::native_task_vehicle_mission_ped_target(ped,
vehicle,
ped_target,
mission_type,
max_speed,
driving_style,
min_distance,
straight_line_distance,
drive_against_traffic)
}
pub fn task_smart_flee_coord(ped: u32,
x: f32,
y: f32,
z: f32,
distance: f32,
time: i32,
prefer_pavements: bool,
quit_if_out_of_range: bool) -> altv_wasm_shared::natives_result::ResultOfTaskSmartFleeCoord {
    crate::__imports::native_task_smart_flee_coord(ped,
x,
y,
z,
distance,
time,
prefer_pavements,
quit_if_out_of_range)
}
pub fn task_clear_defensive_area(ped: u32) -> altv_wasm_shared::natives_result::ResultOfTaskClearDefensiveArea {
    crate::__imports::native_task_clear_defensive_area(ped)
}
pub fn task_open_vehicle_door(ped: u32,
vehicle: u32,
time_out: i32,
seat: i32,
speed: f32) -> altv_wasm_shared::natives_result::ResultOfTaskOpenVehicleDoor {
    crate::__imports::native_task_open_vehicle_door(ped,
vehicle,
time_out,
seat,
speed)
}
pub fn task_plant_bomb(ped: u32,
x: f32,
y: f32,
z: f32,
heading: f32) -> altv_wasm_shared::natives_result::ResultOfTaskPlantBomb {
    crate::__imports::native_task_plant_bomb(ped,
x,
y,
z,
heading)
}
pub fn update_task_aim_gun_scripted_target(ped: u32,
target: u32,
x: f32,
y: f32,
z: f32,
disable_blocking_clip: bool) -> altv_wasm_shared::natives_result::ResultOfUpdateTaskAimGunScriptedTarget {
    crate::__imports::native_update_task_aim_gun_scripted_target(ped,
target,
x,
y,
z,
disable_blocking_clip)
}
pub fn task_go_to_entity_while_aiming_at_entity(ped: u32,
entity_to_walk_to: u32,
entity_to_aim_at: u32,
speed: f32,
shootat_entity: bool,
target_radius: f32,
slow_distance: f32,
use_nav_mesh: bool,
instant_blend_to_aim: bool,
firing_pattern: u32) -> altv_wasm_shared::natives_result::ResultOfTaskGoToEntityWhileAimingAtEntity {
    crate::__imports::native_task_go_to_entity_while_aiming_at_entity(ped,
entity_to_walk_to,
entity_to_aim_at,
speed,
shootat_entity,
target_radius,
slow_distance,
use_nav_mesh,
instant_blend_to_aim,
firing_pattern)
}
pub fn task_use_nearest_scenario_chain_to_coord_warp(ped: u32,
x: f32,
y: f32,
z: f32,
radius: f32,
time_to_leave: i32) -> altv_wasm_shared::natives_result::ResultOfTaskUseNearestScenarioChainToCoordWarp {
    crate::__imports::native_task_use_nearest_scenario_chain_to_coord_warp(ped,
x,
y,
z,
radius,
time_to_leave)
}
pub fn stop_anim_task(entity: u32,
anim_dictionary: Option<&String>,
animation_name: Option<&String>,
blend_delta: f32) -> altv_wasm_shared::natives_result::ResultOfStopAnimTask {
    crate::__imports::native_stop_anim_task(entity,
anim_dictionary,
animation_name,
blend_delta)
}
pub fn get_vehicle_waypoint_progress(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleWaypointProgress {
    crate::__imports::native_get_vehicle_waypoint_progress(vehicle)
}
pub fn task_warp_ped_into_vehicle(ped: u32,
vehicle: u32,
seat: i32) -> altv_wasm_shared::natives_result::ResultOfTaskWarpPedIntoVehicle {
    crate::__imports::native_task_warp_ped_into_vehicle(ped,
vehicle,
seat)
}
pub fn task_aim_gun_at_entity(ped: u32,
entity: u32,
duration: i32,
instant_blend_to_aim: bool) -> altv_wasm_shared::natives_result::ResultOfTaskAimGunAtEntity {
    crate::__imports::native_task_aim_gun_at_entity(ped,
entity,
duration,
instant_blend_to_aim)
}
pub fn task_get_off_boat(ped: u32,
boat: u32) -> altv_wasm_shared::natives_result::ResultOfTaskGetOffBoat {
    crate::__imports::native_task_get_off_boat(ped,
boat)
}
pub fn get_task_rappel_down_wall_state(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetTaskRappelDownWallState {
    crate::__imports::native_get_task_rappel_down_wall_state(ped)
}
pub fn request_waypoint_recording(name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRequestWaypointRecording {
    crate::__imports::native_request_waypoint_recording(name)
}
pub fn task_use_nearest_scenario_chain_to_coord(ped: u32,
x: f32,
y: f32,
z: f32,
max_range: f32,
time_to_leave: i32) -> altv_wasm_shared::natives_result::ResultOfTaskUseNearestScenarioChainToCoord {
    crate::__imports::native_task_use_nearest_scenario_chain_to_coord(ped,
x,
y,
z,
max_range,
time_to_leave)
}
pub fn task_swap_weapon(ped: u32,
draw_weapon: bool) -> altv_wasm_shared::natives_result::ResultOfTaskSwapWeapon {
    crate::__imports::native_task_swap_weapon(ped,
draw_weapon)
}
pub fn is_mounted_weapon_task_underneath_driving_task(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsMountedWeaponTaskUnderneathDrivingTask {
    crate::__imports::native_is_mounted_weapon_task_underneath_driving_task(ped)
}
pub fn open_patrol_route(patrol_route: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfOpenPatrolRoute {
    crate::__imports::native_open_patrol_route(patrol_route)
}
pub fn task_go_to_coord_and_aim_at_hated_entities_near_coord(ped_handle: u32,
go_to_location_x: f32,
go_to_location_y: f32,
go_to_location_z: f32,
focus_location_x: f32,
focus_location_y: f32,
focus_location_z: f32,
speed: f32,
shoot_at_enemies: bool,
distance_to_stop_at: f32,
no_roads_distance: f32,
use_nav_mesh: bool,
nav_flags: i32,
task_flags: i32,
firing_pattern: u32) -> altv_wasm_shared::natives_result::ResultOfTaskGoToCoordAndAimAtHatedEntitiesNearCoord {
    crate::__imports::native_task_go_to_coord_and_aim_at_hated_entities_near_coord(ped_handle,
go_to_location_x,
go_to_location_y,
go_to_location_z,
focus_location_x,
focus_location_y,
focus_location_z,
speed,
shoot_at_enemies,
distance_to_stop_at,
no_roads_distance,
use_nav_mesh,
nav_flags,
task_flags,
firing_pattern)
}
pub fn get_waypoint_distance_along_route(name: Option<&String>,
point: i32) -> altv_wasm_shared::natives_result::ResultOfGetWaypointDistanceAlongRoute {
    crate::__imports::native_get_waypoint_distance_along_route(name,
point)
}
pub fn get_task_move_network_signal_bool(ped: u32,
signal_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetTaskMoveNetworkSignalBool {
    crate::__imports::native_get_task_move_network_signal_bool(ped,
signal_name)
}
pub fn does_scripted_cover_point_exist_at_coords(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfDoesScriptedCoverPointExistAtCoords {
    crate::__imports::native_does_scripted_cover_point_exist_at_coords(x,
y,
z)
}
pub fn update_task_hands_up_duration(ped: u32,
duration: i32) -> altv_wasm_shared::natives_result::ResultOfUpdateTaskHandsUpDuration {
    crate::__imports::native_update_task_hands_up_duration(ped,
duration)
}
pub fn task_goto_entity_aiming(ped: u32,
target: u32,
distance_to_stop_at: f32,
start_aiming_dist: f32) -> altv_wasm_shared::natives_result::ResultOfTaskGotoEntityAiming {
    crate::__imports::native_task_goto_entity_aiming(ped,
target,
distance_to_stop_at,
start_aiming_dist)
}
pub fn is_ped_active_in_scenario(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedActiveInScenario {
    crate::__imports::native_is_ped_active_in_scenario(ped)
}
pub fn task_stealth_kill(killer: u32,
target: u32,
stealth_kill_action_result_hash: u32,
desired_move_blend_ratio: f32,
stealth_flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskStealthKill {
    crate::__imports::native_task_stealth_kill(killer,
target,
stealth_kill_action_result_hash,
desired_move_blend_ratio,
stealth_flags)
}
pub fn clear_ped_tasks_immediately(ped: u32) -> altv_wasm_shared::natives_result::ResultOfClearPedTasksImmediately {
    crate::__imports::native_clear_ped_tasks_immediately(ped)
}
pub fn set_expected_clone_next_task_move_network_state(ped: u32,
state: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetExpectedCloneNextTaskMoveNetworkState {
    crate::__imports::native_set_expected_clone_next_task_move_network_state(ped,
state)
}
pub fn is_ped_still(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedStill {
    crate::__imports::native_is_ped_still(ped)
}
pub fn task_heli_chase(pilot: u32,
entity_to_follow: u32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfTaskHeliChase {
    crate::__imports::native_task_heli_chase(pilot,
entity_to_follow,
x,
y,
z)
}
pub fn task_toggle_duck(ped: u32,
toggle_type: i32) -> altv_wasm_shared::natives_result::ResultOfTaskToggleDuck {
    crate::__imports::native_task_toggle_duck(ped,
toggle_type)
}
pub fn task_stand_guard(ped: u32,
x: f32,
y: f32,
z: f32,
heading: f32,
scenario_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfTaskStandGuard {
    crate::__imports::native_task_stand_guard(ped,
x,
y,
z,
heading,
scenario_name)
}
pub fn remove_cover_point(coverpoint: u32) -> altv_wasm_shared::natives_result::ResultOfRemoveCoverPoint {
    crate::__imports::native_remove_cover_point(coverpoint)
}
pub fn create_patrol_route() -> altv_wasm_shared::natives_result::ResultOfCreatePatrolRoute {
    crate::__imports::native_create_patrol_route()
}
pub fn close_patrol_route() -> altv_wasm_shared::natives_result::ResultOfClosePatrolRoute {
    crate::__imports::native_close_patrol_route()
}
pub fn get_is_task_active(ped: u32,
task_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetIsTaskActive {
    crate::__imports::native_get_is_task_active(ped,
task_index)
}
pub fn set_task_move_network_signal_bool(ped: u32,
signal_name: Option<&String>,
value: bool) -> altv_wasm_shared::natives_result::ResultOfSetTaskMoveNetworkSignalBool {
    crate::__imports::native_set_task_move_network_signal_bool(ped,
signal_name,
value)
}
pub fn task_go_to_coord_while_aiming_at_entity(ped: u32,
x: f32,
y: f32,
z: f32,
aim_at_i_d: u32,
move_blend_ratio: f32,
shoot: bool,
target_radius: f32,
slow_distance: f32,
use_nav_mesh: bool,
nav_flags: i32,
instant_blend_to_aim: bool,
firing_pattern: u32,
time: i32) -> altv_wasm_shared::natives_result::ResultOfTaskGoToCoordWhileAimingAtEntity {
    crate::__imports::native_task_go_to_coord_while_aiming_at_entity(ped,
x,
y,
z,
aim_at_i_d,
move_blend_ratio,
shoot,
target_radius,
slow_distance,
use_nav_mesh,
nav_flags,
instant_blend_to_aim,
firing_pattern,
time)
}
pub fn task_parachute_to_target(ped: u32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfTaskParachuteToTarget {
    crate::__imports::native_task_parachute_to_target(ped,
x,
y,
z)
}
pub fn task_heli_escort_heli(pilot: u32,
heli1: u32,
heli2: u32,
offset_x: f32,
offset_y: f32,
offset_z: f32) -> altv_wasm_shared::natives_result::ResultOfTaskHeliEscortHeli {
    crate::__imports::native_task_heli_escort_heli(pilot,
heli1,
heli2,
offset_x,
offset_y,
offset_z)
}
pub fn get_task_move_network_event(ped: u32,
event_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetTaskMoveNetworkEvent {
    crate::__imports::native_get_task_move_network_event(ped,
event_name)
}
pub fn waypoint_recording_get_closest_waypoint(name: Option<&String>,
x: f32,
y: f32,
z: f32,
point: i32) -> altv_wasm_shared::natives_result::ResultOfWaypointRecordingGetClosestWaypoint {
    crate::__imports::native_waypoint_recording_get_closest_waypoint(name,
x,
y,
z,
point)
}
pub fn task_climb_ladder(ped: u32,
fast: bool) -> altv_wasm_shared::natives_result::ResultOfTaskClimbLadder {
    crate::__imports::native_task_climb_ladder(ped,
fast)
}
pub fn is_playing_phone_gesture_anim(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPlayingPhoneGestureAnim {
    crate::__imports::native_is_playing_phone_gesture_anim(ped)
}
pub fn task_go_to_coord_any_means_extra_params_with_cruise_speed(ped: u32,
x: f32,
y: f32,
z: f32,
move_blend_ratio: f32,
vehicle: u32,
use_long_range_vehicle_pathing: bool,
driving_flags: i32,
max_range_to_shoot_targets: f32,
extra_veh_to_target_dist_to_prefer_vehicle: f32,
drive_straight_line_distance: f32,
extra_flags: i32,
cruise_speed: f32,
target_arrive_dist: f32) -> altv_wasm_shared::natives_result::ResultOfTaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed {
    crate::__imports::native_task_go_to_coord_any_means_extra_params_with_cruise_speed(ped,
x,
y,
z,
move_blend_ratio,
vehicle,
use_long_range_vehicle_pathing,
driving_flags,
max_range_to_shoot_targets,
extra_veh_to_target_dist_to_prefer_vehicle,
drive_straight_line_distance,
extra_flags,
cruise_speed,
target_arrive_dist)
}
pub fn update_task_sweep_aim_position(ped: u32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfUpdateTaskSweepAimPosition {
    crate::__imports::native_update_task_sweep_aim_position(ped,
x,
y,
z)
}
pub fn task_wander_standard(ped: u32,
heading: f32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskWanderStandard {
    crate::__imports::native_task_wander_standard(ped,
heading,
flags)
}
pub fn task_use_mobile_phone(ped: u32,
use_phone: bool,
desired_phone_mode: i32) -> altv_wasm_shared::natives_result::ResultOfTaskUseMobilePhone {
    crate::__imports::native_task_use_mobile_phone(ped,
use_phone,
desired_phone_mode)
}
pub fn task_patrol(ped: u32,
patrol_route_name: Option<&String>,
alert_state: i32,
can_chat_to_peds: bool,
use_head_look_at: bool) -> altv_wasm_shared::natives_result::ResultOfTaskPatrol {
    crate::__imports::native_task_patrol(ped,
patrol_route_name,
alert_state,
can_chat_to_peds,
use_head_look_at)
}
pub fn task_plane_land(pilot: u32,
plane: u32,
runway_start_x: f32,
runway_start_y: f32,
runway_start_z: f32,
runway_end_x: f32,
runway_end_y: f32,
runway_end_z: f32) -> altv_wasm_shared::natives_result::ResultOfTaskPlaneLand {
    crate::__imports::native_task_plane_land(pilot,
plane,
runway_start_x,
runway_start_y,
runway_start_z,
runway_end_x,
runway_end_y,
runway_end_z)
}
pub fn task_enter_vehicle(ped: u32,
vehicle: u32,
timeout: i32,
seat: i32,
speed: f32,
flag: i32,
override_entry_clipset_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfTaskEnterVehicle {
    crate::__imports::native_task_enter_vehicle(ped,
vehicle,
timeout,
seat,
speed,
flag,
override_entry_clipset_name)
}
pub fn task_submarine_goto_and_stop(ped: u32,
submarine: u32,
x: f32,
y: f32,
z: f32,
autopilot: bool) -> altv_wasm_shared::natives_result::ResultOfTaskSubmarineGotoAndStop {
    crate::__imports::native_task_submarine_goto_and_stop(ped,
submarine,
x,
y,
z,
autopilot)
}
pub fn set_parachute_task_target(ped: u32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfSetParachuteTaskTarget {
    crate::__imports::native_set_parachute_task_target(ped,
x,
y,
z)
}
pub fn clear_driveby_task_underneath_driving_task(ped: u32) -> altv_wasm_shared::natives_result::ResultOfClearDrivebyTaskUnderneathDrivingTask {
    crate::__imports::native_clear_driveby_task_underneath_driving_task(ped)
}
pub fn task_vehicle_temp_action(driver: u32,
vehicle: u32,
action: i32,
time: i32) -> altv_wasm_shared::natives_result::ResultOfTaskVehicleTempAction {
    crate::__imports::native_task_vehicle_temp_action(driver,
vehicle,
action,
time)
}
pub fn is_ped_running(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedRunning {
    crate::__imports::native_is_ped_running(ped)
}
pub fn get_navmesh_route_distance_remaining(ped: u32,
distance_remaining: f32,
is_path_ready: bool) -> altv_wasm_shared::natives_result::ResultOfGetNavmeshRouteDistanceRemaining {
    crate::__imports::native_get_navmesh_route_distance_remaining(ped,
distance_remaining,
is_path_ready)
}
pub fn task_guard_sphere_defensive_area(ped: u32,
defend_position_x: f32,
defend_position_y: f32,
defend_position_z: f32,
heading: f32,
max_patrol_proximity: f32,
time: i32,
x: f32,
y: f32,
z: f32,
defensive_area_radius: f32) -> altv_wasm_shared::natives_result::ResultOfTaskGuardSphereDefensiveArea {
    crate::__imports::native_task_guard_sphere_defensive_area(ped,
defend_position_x,
defend_position_y,
defend_position_z,
heading,
max_patrol_proximity,
time,
x,
y,
z,
defensive_area_radius)
}
pub fn get_is_waypoint_recording_loaded(name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetIsWaypointRecordingLoaded {
    crate::__imports::native_get_is_waypoint_recording_loaded(name)
}
pub fn set_task_vehicle_chase_behavior_flag(ped: u32,
flag: i32,
set: bool) -> altv_wasm_shared::natives_result::ResultOfSetTaskVehicleChaseBehaviorFlag {
    crate::__imports::native_set_task_vehicle_chase_behavior_flag(ped,
flag,
set)
}
pub fn set_mounted_weapon_target(shooting_ped: u32,
target_ped: u32,
target_vehicle: u32,
x: f32,
y: f32,
z: f32,
task_mode: i32,
ignore_target_veh_dead_check: bool) -> altv_wasm_shared::natives_result::ResultOfSetMountedWeaponTarget {
    crate::__imports::native_set_mounted_weapon_target(shooting_ped,
target_ped,
target_vehicle,
x,
y,
z,
task_mode,
ignore_target_veh_dead_check)
}
pub fn task_writhe(ped: u32,
target: u32,
min_fire_loops: i32,
start_state: i32,
force_shoot_on_ground: bool,
shoot_from_ground_timer: i32) -> altv_wasm_shared::natives_result::ResultOfTaskWrithe {
    crate::__imports::native_task_writhe(ped,
target,
min_fire_loops,
start_state,
force_shoot_on_ground,
shoot_from_ground_timer)
}
pub fn request_task_move_network_state_transition(ped: u32,
name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRequestTaskMoveNetworkStateTransition {
    crate::__imports::native_request_task_move_network_state_transition(ped,
name)
}
pub fn task_ped_slide_to_coord(ped: u32,
x: f32,
y: f32,
z: f32,
heading: f32,
speed: f32) -> altv_wasm_shared::natives_result::ResultOfTaskPedSlideToCoord {
    crate::__imports::native_task_ped_slide_to_coord(ped,
x,
y,
z,
heading,
speed)
}
pub fn task_guard_assigned_defensive_area(ped: u32,
x: f32,
y: f32,
z: f32,
heading: f32,
max_patrol_proximity: f32,
timer: i32) -> altv_wasm_shared::natives_result::ResultOfTaskGuardAssignedDefensiveArea {
    crate::__imports::native_task_guard_assigned_defensive_area(ped,
x,
y,
z,
heading,
max_patrol_proximity,
timer)
}
pub fn task_parachute(ped: u32,
give_parachute_item: bool,
instant: bool) -> altv_wasm_shared::natives_result::ResultOfTaskParachute {
    crate::__imports::native_task_parachute(ped,
give_parachute_item,
instant)
}
pub fn task_leave_vehicle(ped: u32,
vehicle: u32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskLeaveVehicle {
    crate::__imports::native_task_leave_vehicle(ped,
vehicle,
flags)
}
pub fn task_seek_cover_to_cover_point(ped: u32,
coverpoint: u32,
x: f32,
y: f32,
z: f32,
time: i32,
allow_peeking_and_firing: bool) -> altv_wasm_shared::natives_result::ResultOfTaskSeekCoverToCoverPoint {
    crate::__imports::native_task_seek_cover_to_cover_point(ped,
coverpoint,
x,
y,
z,
time,
allow_peeking_and_firing)
}
pub fn is_move_blend_ratio_running(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsMoveBlendRatioRunning {
    crate::__imports::native_is_move_blend_ratio_running(ped)
}
pub fn assisted_movement_set_route_properties(route: Option<&String>,
props: i32) -> altv_wasm_shared::natives_result::ResultOfAssistedMovementSetRouteProperties {
    crate::__imports::native_assisted_movement_set_route_properties(route,
props)
}
pub fn task_move_network_advanced_by_name(ped: u32,
network: Option<&String>,
x: f32,
y: f32,
z: f32,
rot_x: f32,
rot_y: f32,
rot_z: f32,
rot_order: i32,
blend_duration: f32,
allow_override_clone_update: bool,
anim_dict: Option<&String>,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskMoveNetworkAdvancedByName {
    crate::__imports::native_task_move_network_advanced_by_name(ped,
network,
x,
y,
z,
rot_x,
rot_y,
rot_z,
rot_order,
blend_duration,
allow_override_clone_update,
anim_dict,
flags)
}
pub fn set_task_move_network_signal_float(ped: u32,
signal_name: Option<&String>,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetTaskMoveNetworkSignalFloat {
    crate::__imports::native_set_task_move_network_signal_float(ped,
signal_name,
value)
}
pub fn add_cover_point(x: f32,
y: f32,
z: f32,
direction: f32,
usage: i32,
height: i32,
arc: i32,
is_priority: bool) -> altv_wasm_shared::natives_result::ResultOfAddCoverPoint {
    crate::__imports::native_add_cover_point(x,
y,
z,
direction,
usage,
height,
arc,
is_priority)
}
pub fn task_go_straight_to_coord(ped: u32,
x: f32,
y: f32,
z: f32,
speed: f32,
timeout: i32,
target_heading: f32,
distance_to_slide: f32) -> altv_wasm_shared::natives_result::ResultOfTaskGoStraightToCoord {
    crate::__imports::native_task_go_straight_to_coord(ped,
x,
y,
z,
speed,
timeout,
target_heading,
distance_to_slide)
}
pub fn set_drive_task_driving_style(ped: u32,
driving_style: i32) -> altv_wasm_shared::natives_result::ResultOfSetDriveTaskDrivingStyle {
    crate::__imports::native_set_drive_task_driving_style(ped,
driving_style)
}
pub fn task_heli_mission(pilot: u32,
aircraft: u32,
target_vehicle: u32,
target_ped: u32,
destination_x: f32,
destination_y: f32,
destination_z: f32,
mission_flag: i32,
max_speed: f32,
radius: f32,
target_heading: f32,
max_height: i32,
min_height: i32,
slow_down_distance: f32,
behavior_flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskHeliMission {
    crate::__imports::native_task_heli_mission(pilot,
aircraft,
target_vehicle,
target_ped,
destination_x,
destination_y,
destination_z,
mission_flag,
max_speed,
radius,
target_heading,
max_height,
min_height,
slow_down_distance,
behavior_flags)
}
pub fn remove_all_cover_blocking_areas() -> altv_wasm_shared::natives_result::ResultOfRemoveAllCoverBlockingAreas {
    crate::__imports::native_remove_all_cover_blocking_areas()
}
pub fn clear_primary_vehicle_task(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfClearPrimaryVehicleTask {
    crate::__imports::native_clear_primary_vehicle_task(vehicle)
}
pub fn vehicle_waypoint_playback_resume(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfVehicleWaypointPlaybackResume {
    crate::__imports::native_vehicle_waypoint_playback_resume(vehicle)
}
pub fn control_mounted_weapon(ped: u32) -> altv_wasm_shared::natives_result::ResultOfControlMountedWeapon {
    crate::__imports::native_control_mounted_weapon(ped)
}
pub fn reset_scenario_groups_enabled() -> altv_wasm_shared::natives_result::ResultOfResetScenarioGroupsEnabled {
    crate::__imports::native_reset_scenario_groups_enabled()
}
pub fn set_anim_phase(entity: u32,
phase: f32,
priority: i32,
secondary: bool) -> altv_wasm_shared::natives_result::ResultOfSetAnimPhase {
    crate::__imports::native_set_anim_phase(entity,
phase,
priority,
secondary)
}
pub fn is_ped_walking(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedWalking {
    crate::__imports::native_is_ped_walking(ped)
}
pub fn is_ped_in_writhe(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedInWrithe {
    crate::__imports::native_is_ped_in_writhe(ped)
}
pub fn is_waypoint_playback_going_on_for_ped(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsWaypointPlaybackGoingOnForPed {
    crate::__imports::native_is_waypoint_playback_going_on_for_ped(ped)
}
pub fn task_wander_in_area(ped: u32,
x: f32,
y: f32,
z: f32,
radius: f32,
minimal_length: f32,
time_between_walks: f32) -> altv_wasm_shared::natives_result::ResultOfTaskWanderInArea {
    crate::__imports::native_task_wander_in_area(ped,
x,
y,
z,
radius,
minimal_length,
time_between_walks)
}
pub fn clear_ped_tasks(ped: u32) -> altv_wasm_shared::natives_result::ResultOfClearPedTasks {
    crate::__imports::native_clear_ped_tasks(ped)
}
pub fn task_vehicle_drive_to_coord(ped: u32,
vehicle: u32,
x: f32,
y: f32,
z: f32,
speed: f32,
p6: i32,
vehicle_model: u32,
driving_mode: i32,
stop_range: f32,
straight_line_distance: f32) -> altv_wasm_shared::natives_result::ResultOfTaskVehicleDriveToCoord {
    crate::__imports::native_task_vehicle_drive_to_coord(ped,
vehicle,
x,
y,
z,
speed,
p6,
vehicle_model,
driving_mode,
stop_range,
straight_line_distance)
}
pub fn set_ped_path_can_drop_from_height(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedPathCanDropFromHeight {
    crate::__imports::native_set_ped_path_can_drop_from_height(ped,
toggle)
}
pub fn task_goto_entity_offset(ped: u32,
entity: u32,
time: i32,
seek_radius: f32,
seek_angle_deg: f32,
move_blend_ratio: f32,
goto_entity_offset_flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskGotoEntityOffset {
    crate::__imports::native_task_goto_entity_offset(ped,
entity,
time,
seek_radius,
seek_angle_deg,
move_blend_ratio,
goto_entity_offset_flags)
}
pub fn task_vehicle_aim_at_ped(ped: u32,
target: u32) -> altv_wasm_shared::natives_result::ResultOfTaskVehicleAimAtPed {
    crate::__imports::native_task_vehicle_aim_at_ped(ped,
target)
}
pub fn is_ped_strafing(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedStrafing {
    crate::__imports::native_is_ped_strafing(ped)
}
pub fn update_task_sweep_aim_entity(ped: u32,
entity: u32) -> altv_wasm_shared::natives_result::ResultOfUpdateTaskSweepAimEntity {
    crate::__imports::native_update_task_sweep_aim_entity(ped,
entity)
}
pub fn set_driveby_task_target(shooting_ped: u32,
target_ped: u32,
target_vehicle: u32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfSetDrivebyTaskTarget {
    crate::__imports::native_set_driveby_task_target(shooting_ped,
target_ped,
target_vehicle,
x,
y,
z)
}
pub fn task_stay_in_cover(ped: u32) -> altv_wasm_shared::natives_result::ResultOfTaskStayInCover {
    crate::__imports::native_task_stay_in_cover(ped)
}
pub fn get_ped_waypoint_distance(p0: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedWaypointDistance {
    crate::__imports::native_get_ped_waypoint_distance(p0)
}
pub fn waypoint_playback_start_shooting_at_ped(ped: u32,
ped2: u32,
p2: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfWaypointPlaybackStartShootingAtPed {
    crate::__imports::native_waypoint_playback_start_shooting_at_ped(ped,
ped2,
p2,
p3)
}
pub fn task_pause(ped: u32,
ms: i32) -> altv_wasm_shared::natives_result::ResultOfTaskPause {
    crate::__imports::native_task_pause(ped,
ms)
}
pub fn open_sequence_task(task_sequence_id: i32) -> altv_wasm_shared::natives_result::ResultOfOpenSequenceTask {
    crate::__imports::native_open_sequence_task(task_sequence_id)
}
pub fn task_play_anim(ped: u32,
anim_dictionary: Option<&String>,
animation_name: Option<&String>,
blend_in_speed: f32,
blend_out_speed: f32,
duration: i32,
flag: i32,
playback_rate: f32,
lock_x: bool,
lock_y: bool,
lock_z: bool) -> altv_wasm_shared::natives_result::ResultOfTaskPlayAnim {
    crate::__imports::native_task_play_anim(ped,
anim_dictionary,
animation_name,
blend_in_speed,
blend_out_speed,
duration,
flag,
playback_rate,
lock_x,
lock_y,
lock_z)
}
pub fn task_rappel_down_wall_using_clipset_override(ped: u32,
x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
min_z: f32,
rope_handle: i32,
clip_set: Option<&String>,
p10: i32) -> altv_wasm_shared::natives_result::ResultOfTaskRappelDownWallUsingClipsetOverride {
    crate::__imports::native_task_rappel_down_wall_using_clipset_override(ped,
x1,
y1,
z1,
x2,
y2,
z2,
min_z,
rope_handle,
clip_set,
p10)
}
pub fn set_scenario_type_enabled(scenario_type: Option<&String>,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetScenarioTypeEnabled {
    crate::__imports::native_set_scenario_type_enabled(scenario_type,
toggle)
}
pub fn task_set_decision_maker(ped: u32,
decision_maker_id: u32) -> altv_wasm_shared::natives_result::ResultOfTaskSetDecisionMaker {
    crate::__imports::native_task_set_decision_maker(ped,
decision_maker_id)
}
pub fn set_ped_waypoint_route_offset(ped: u32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedWaypointRouteOffset {
    crate::__imports::native_set_ped_waypoint_route_offset(ped,
x,
y,
z)
}
pub fn stop_anim_playback(entity: u32,
priority: i32,
secondary: bool) -> altv_wasm_shared::natives_result::ResultOfStopAnimPlayback {
    crate::__imports::native_stop_anim_playback(entity,
priority,
secondary)
}
pub fn task_synchronized_scene(ped: u32,
scene: i32,
anim_dictionary: Option<&String>,
animation_name: Option<&String>,
blend_in: f32,
blend_out: f32,
flags: i32,
ragdoll_blocking_flags: i32,
mover_blend_delta: f32,
ik_flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskSynchronizedScene {
    crate::__imports::native_task_synchronized_scene(ped,
scene,
anim_dictionary,
animation_name,
blend_in,
blend_out,
flags,
ragdoll_blocking_flags,
mover_blend_delta,
ik_flags)
}
pub fn task_vehicle_mission_coors_target(ped: u32,
vehicle: u32,
x: f32,
y: f32,
z: f32,
mission: i32,
cruise_speed: f32,
driving_style: i32,
target_reached: f32,
straight_line_distance: f32,
drive_against_traffic: bool) -> altv_wasm_shared::natives_result::ResultOfTaskVehicleMissionCoorsTarget {
    crate::__imports::native_task_vehicle_mission_coors_target(ped,
vehicle,
x,
y,
z,
mission,
cruise_speed,
driving_style,
target_reached,
straight_line_distance,
drive_against_traffic)
}
pub fn is_move_blend_ratio_walking(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsMoveBlendRatioWalking {
    crate::__imports::native_is_move_blend_ratio_walking(ped)
}
pub fn task_combat_ped(ped: u32,
target_ped: u32,
combat_flags: i32,
threat_response_flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskCombatPed {
    crate::__imports::native_task_combat_ped(ped,
target_ped,
combat_flags,
threat_response_flags)
}
pub fn set_next_desired_move_state(next_move_state: f32) -> altv_wasm_shared::natives_result::ResultOfSetNextDesiredMoveState {
    crate::__imports::native_set_next_desired_move_state(next_move_state)
}
pub fn task_hands_up(ped: u32,
duration: i32,
facing_ped: u32,
time_to_face_ped: i32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfTaskHandsUp {
    crate::__imports::native_task_hands_up(ped,
duration,
facing_ped,
time_to_face_ped,
flags)
}
pub fn set_ped_path_may_enter_water(ped: u32,
may_enter_water: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedPathMayEnterWater {
    crate::__imports::native_set_ped_path_may_enter_water(ped,
may_enter_water)
}
pub fn task_arrest_ped(ped: u32,
target: u32) -> altv_wasm_shared::natives_result::ResultOfTaskArrestPed {
    crate::__imports::native_task_arrest_ped(ped,
target)
}
pub fn is_waypoint_playback_going_on_for_vehicle(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsWaypointPlaybackGoingOnForVehicle {
    crate::__imports::native_is_waypoint_playback_going_on_for_vehicle(vehicle)
}
pub fn task_plane_goto_precise_vtol(ped: u32,
vehicle: u32,
x: f32,
y: f32,
z: f32,
flight_height: i32,
min_height_above_terrain: i32,
use_desired_orientation: bool,
desired_orientation: f32,
autopilot: bool) -> altv_wasm_shared::natives_result::ResultOfTaskPlaneGotoPreciseVtol {
    crate::__imports::native_task_plane_goto_precise_vtol(ped,
vehicle,
x,
y,
z,
flight_height,
min_height_above_terrain,
use_desired_orientation,
desired_orientation,
autopilot)
}
pub fn does_scenario_group_exist(scenario_group: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDoesScenarioGroupExist {
    crate::__imports::native_does_scenario_group_exist(scenario_group)
}
pub fn task_start_scenario_at_position(ped: u32,
scenario_name: Option<&String>,
x: f32,
y: f32,
z: f32,
heading: f32,
duration: i32,
sitting_scenario: bool,
teleport: bool) -> altv_wasm_shared::natives_result::ResultOfTaskStartScenarioAtPosition {
    crate::__imports::native_task_start_scenario_at_position(ped,
scenario_name,
x,
y,
z,
heading,
duration,
sitting_scenario,
teleport)
}
pub fn remove_cover_blocking_areas_at_position(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfRemoveCoverBlockingAreasAtPosition {
    crate::__imports::native_remove_cover_blocking_areas_at_position(x,
y,
z)
}
pub fn task_vehicle_follow(driver: u32,
vehicle: u32,
target_entity: u32,
speed: f32,
driving_style: i32,
min_distance: i32) -> altv_wasm_shared::natives_result::ResultOfTaskVehicleFollow {
    crate::__imports::native_task_vehicle_follow(driver,
vehicle,
target_entity,
speed,
driving_style,
min_distance)
}
pub fn remove_waypoint_recording(name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRemoveWaypointRecording {
    crate::__imports::native_remove_waypoint_recording(name)
}
pub fn remove_vehicle_high_detail_model(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfRemoveVehicleHighDetailModel {
    crate::__imports::native_remove_vehicle_high_detail_model(vehicle)
}
pub fn is_vehicle_mod_gen9_exclusive(vehicle: u32,
mod_type: i32,
mod_index: i32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleModGen9Exclusive {
    crate::__imports::native_is_vehicle_mod_gen9_exclusive(vehicle,
mod_type,
mod_index)
}
pub fn get_vehicle_class_estimated_max_speed(vehicle_class: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleClassEstimatedMaxSpeed {
    crate::__imports::native_get_vehicle_class_estimated_max_speed(vehicle_class)
}
pub fn set_tyre_wear_rate(vehicle: u32,
wheel_index: i32,
multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetTyreWearRate {
    crate::__imports::native_set_tyre_wear_rate(vehicle,
wheel_index,
multiplier)
}
pub fn set_arrive_distance_override_for_vehicle_persuit_attack(vehicle: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetArriveDistanceOverrideForVehiclePersuitAttack {
    crate::__imports::native_set_arrive_distance_override_for_vehicle_persuit_attack(vehicle,
p1)
}
pub fn set_vehicle_has_been_driven_flag(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleHasBeenDrivenFlag {
    crate::__imports::native_set_vehicle_has_been_driven_flag(vehicle,
toggle)
}
pub fn vehicle_set_override_extenable_side_ratio(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfVehicleSetOverrideExtenableSideRatio {
    crate::__imports::native_vehicle_set_override_extenable_side_ratio(p0,
p1)
}
pub fn get_last_shunt_vehicle(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetLastShuntVehicle {
    crate::__imports::native_get_last_shunt_vehicle(vehicle)
}
pub fn get_is_vehicle_disabled_by_emp(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetIsVehicleDisabledByEmp {
    crate::__imports::native_get_is_vehicle_disabled_by_emp(vehicle)
}
pub fn get_random_vehicle_model_in_memory(p0: bool,
model_hash: u32,
success_indicator: i32) -> altv_wasm_shared::natives_result::ResultOfGetRandomVehicleModelInMemory {
    crate::__imports::native_get_random_vehicle_model_in_memory(p0,
model_hash,
success_indicator)
}
pub fn set_vehicle_turret_target(vehicle: u32,
p1: bool,
x: f32,
y: f32,
z: f32,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleTurretTarget {
    crate::__imports::native_set_vehicle_turret_target(vehicle,
p1,
x,
y,
z,
p5)
}
pub fn set_should_lerp_from_ai_to_full_recording(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetShouldLerpFromAiToFullRecording {
    crate::__imports::native_set_should_lerp_from_ai_to_full_recording(vehicle,
p1)
}
pub fn set_vehicle_inactive_during_playback(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleInactiveDuringPlayback {
    crate::__imports::native_set_vehicle_inactive_during_playback(vehicle,
toggle)
}
pub fn set_vehicle_can_eject_passengers_if_locked(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleCanEjectPassengersIfLocked {
    crate::__imports::native_set_vehicle_can_eject_passengers_if_locked(p0,
p1)
}
pub fn set_vehicle_drops_money_when_blown_up(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDropsMoneyWhenBlownUp {
    crate::__imports::native_set_vehicle_drops_money_when_blown_up(vehicle,
toggle)
}
pub fn has_preload_mods_finished(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfHasPreloadModsFinished {
    crate::__imports::native_has_preload_mods_finished(vehicle)
}
pub fn set_vehicle_is_racing(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleIsRacing {
    crate::__imports::native_set_vehicle_is_racing(vehicle,
toggle)
}
pub fn get_train_carriage(train: u32,
trailer_number: i32) -> altv_wasm_shared::natives_result::ResultOfGetTrainCarriage {
    crate::__imports::native_get_train_carriage(train,
trailer_number)
}
pub fn get_submarine_number_of_air_leaks(submarine: u32) -> altv_wasm_shared::natives_result::ResultOfGetSubmarineNumberOfAirLeaks {
    crate::__imports::native_get_submarine_number_of_air_leaks(submarine)
}
pub fn set_vehicle_rudder_broken(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleRudderBroken {
    crate::__imports::native_set_vehicle_rudder_broken(vehicle,
toggle)
}
pub fn set_heli_combat_offset(vehicle: u32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfSetHeliCombatOffset {
    crate::__imports::native_set_heli_combat_offset(vehicle,
x,
y,
z)
}
pub fn clear_vehicle_generator_area_of_interest() -> altv_wasm_shared::natives_result::ResultOfClearVehicleGeneratorAreaOfInterest {
    crate::__imports::native_clear_vehicle_generator_area_of_interest()
}
pub fn set_boat_disable_avoidance(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetBoatDisableAvoidance {
    crate::__imports::native_set_boat_disable_avoidance(vehicle,
p1)
}
pub fn set_vehicle_influences_wanted_level(p0: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleInfluencesWantedLevel {
    crate::__imports::native_set_vehicle_influences_wanted_level(p0,
p1)
}
pub fn get_hydraulic_suspension_raise_factor(vehicle: u32,
wheel_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetHydraulicSuspensionRaiseFactor {
    crate::__imports::native_get_hydraulic_suspension_raise_factor(vehicle,
wheel_id)
}
pub fn set_plane_section_damage_scale(vehicle: u32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfSetPlaneSectionDamageScale {
    crate::__imports::native_set_plane_section_damage_scale(vehicle,
p1,
p2)
}
pub fn vehicle_start_parachuting(vehicle: u32,
active: bool) -> altv_wasm_shared::natives_result::ResultOfVehicleStartParachuting {
    crate::__imports::native_vehicle_start_parachuting(vehicle,
active)
}
pub fn set_vehicle_can_deform_wheels(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleCanDeformWheels {
    crate::__imports::native_set_vehicle_can_deform_wheels(vehicle,
toggle)
}
pub fn set_cargobob_pickup_rope_type(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetCargobobPickupRopeType {
    crate::__imports::native_set_cargobob_pickup_rope_type(p0,
p1)
}
pub fn detach_vehicle_from_cargobob(vehicle: u32,
cargobob: u32) -> altv_wasm_shared::natives_result::ResultOfDetachVehicleFromCargobob {
    crate::__imports::native_detach_vehicle_from_cargobob(vehicle,
cargobob)
}
pub fn get_total_duration_of_vehicle_recording(recording: i32,
script: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetTotalDurationOfVehicleRecording {
    crate::__imports::native_get_total_duration_of_vehicle_recording(recording,
script)
}
pub fn get_vehicle_window_tint(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleWindowTint {
    crate::__imports::native_get_vehicle_window_tint(vehicle)
}
pub fn allow_boat_boom_to_animate(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfAllowBoatBoomToAnimate {
    crate::__imports::native_allow_boat_boom_to_animate(vehicle,
toggle)
}
pub fn stop_all_garage_activity() -> altv_wasm_shared::natives_result::ResultOfStopAllGarageActivity {
    crate::__imports::native_stop_all_garage_activity()
}
pub fn set_vehicle_model_is_suppressed(model: u32,
suppressed: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleModelIsSuppressed {
    crate::__imports::native_set_vehicle_model_is_suppressed(model,
suppressed)
}
pub fn get_total_duration_of_vehicle_recording_id(id: i32) -> altv_wasm_shared::natives_result::ResultOfGetTotalDurationOfVehicleRecordingId {
    crate::__imports::native_get_total_duration_of_vehicle_recording_id(id)
}
pub fn remove_road_node_speed_zone(speedzone: i32) -> altv_wasm_shared::natives_result::ResultOfRemoveRoadNodeSpeedZone {
    crate::__imports::native_remove_road_node_speed_zone(speedzone)
}
pub fn set_vehicle_handling_override(vehicle: u32,
hash: u32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleHandlingOverride {
    crate::__imports::native_set_vehicle_handling_override(vehicle,
hash)
}
pub fn set_short_slowdown_for_landing(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfSetShortSlowdownForLanding {
    crate::__imports::native_set_short_slowdown_for_landing(vehicle)
}
pub fn set_dont_process_vehicle_glass(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDontProcessVehicleGlass {
    crate::__imports::native_set_dont_process_vehicle_glass(vehicle,
toggle)
}
pub fn set_vehicle_turret_speed_this_frame(vehicle: u32,
speed: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleTurretSpeedThisFrame {
    crate::__imports::native_set_vehicle_turret_speed_this_frame(vehicle,
speed)
}
pub fn set_vehicle_fixed(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleFixed {
    crate::__imports::native_set_vehicle_fixed(vehicle)
}
pub fn are_all_vehicle_windows_intact(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfAreAllVehicleWindowsIntact {
    crate::__imports::native_are_all_vehicle_windows_intact(vehicle)
}
pub fn set_can_use_hydraulics(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetCanUseHydraulics {
    crate::__imports::native_set_can_use_hydraulics(vehicle,
toggle)
}
pub fn does_extra_exist(vehicle: u32,
extra_id: i32) -> altv_wasm_shared::natives_result::ResultOfDoesExtraExist {
    crate::__imports::native_does_extra_exist(vehicle,
extra_id)
}
pub fn is_vehicle_in_burnout(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleInBurnout {
    crate::__imports::native_is_vehicle_in_burnout(vehicle)
}
pub fn set_wheelie_enabled(vehicle: u32,
enabled: bool) -> altv_wasm_shared::natives_result::ResultOfSetWheelieEnabled {
    crate::__imports::native_set_wheelie_enabled(vehicle,
enabled)
}
pub fn set_disable_vehicle_explosions_damage(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDisableVehicleExplosionsDamage {
    crate::__imports::native_set_disable_vehicle_explosions_damage(toggle)
}
pub fn is_vehicle_attached_to_tow_truck(tow_truck: u32,
vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleAttachedToTowTruck {
    crate::__imports::native_is_vehicle_attached_to_tow_truck(tow_truck,
vehicle)
}
pub fn set_vehicle_searchlight(heli: u32,
toggle: bool,
can_be_used_by_a_i: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleSearchlight {
    crate::__imports::native_set_vehicle_searchlight(heli,
toggle,
can_be_used_by_a_i)
}
pub fn set_train_cruise_speed(train: u32,
speed: f32) -> altv_wasm_shared::natives_result::ResultOfSetTrainCruiseSpeed {
    crate::__imports::native_set_train_cruise_speed(train,
speed)
}
pub fn attach_vehicle_on_to_trailer(vehicle: u32,
trailer: u32,
offset_x: f32,
offset_y: f32,
offset_z: f32,
coords_x: f32,
coords_y: f32,
coords_z: f32,
rotation_x: f32,
rotation_y: f32,
rotation_z: f32,
disable_collisions: f32) -> altv_wasm_shared::natives_result::ResultOfAttachVehicleOnToTrailer {
    crate::__imports::native_attach_vehicle_on_to_trailer(vehicle,
trailer,
offset_x,
offset_y,
offset_z,
coords_x,
coords_y,
coords_z,
rotation_x,
rotation_y,
rotation_z,
disable_collisions)
}
pub fn does_cargobob_have_pick_up_rope(cargobob: u32) -> altv_wasm_shared::natives_result::ResultOfDoesCargobobHavePickUpRope {
    crate::__imports::native_does_cargobob_have_pick_up_rope(cargobob)
}
pub fn set_vehicle_custom_path_node_streaming_radius(vehicle: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleCustomPathNodeStreamingRadius {
    crate::__imports::native_set_vehicle_custom_path_node_streaming_radius(vehicle,
p1)
}
pub fn set_vehicle_friction_override(vehicle: u32,
friction: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleFrictionOverride {
    crate::__imports::native_set_vehicle_friction_override(vehicle,
friction)
}
pub fn set_vehicle_can_leak_petrol(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleCanLeakPetrol {
    crate::__imports::native_set_vehicle_can_leak_petrol(vehicle,
toggle)
}
pub fn set_convertible_roof_latch_state(vehicle: u32,
state: bool) -> altv_wasm_shared::natives_result::ResultOfSetConvertibleRoofLatchState {
    crate::__imports::native_set_convertible_roof_latch_state(vehicle,
state)
}
pub fn set_vehicle_has_unbreakable_lights(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleHasUnbreakableLights {
    crate::__imports::native_set_vehicle_has_unbreakable_lights(vehicle,
toggle)
}
pub fn set_open_rear_doors_on_explosion(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetOpenRearDoorsOnExplosion {
    crate::__imports::native_set_open_rear_doors_on_explosion(vehicle,
toggle)
}
pub fn vehicle_set_enable_ramp_car_side_impulse(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfVehicleSetEnableRampCarSideImpulse {
    crate::__imports::native_vehicle_set_enable_ramp_car_side_impulse(p0,
p1)
}
pub fn has_vehicle_asset_loaded(vehicle_asset: i32) -> altv_wasm_shared::natives_result::ResultOfHasVehicleAssetLoaded {
    crate::__imports::native_has_vehicle_asset_loaded(vehicle_asset)
}
pub fn is_playback_going_on_for_vehicle(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsPlaybackGoingOnForVehicle {
    crate::__imports::native_is_playback_going_on_for_vehicle(vehicle)
}
pub fn get_vehicle_trailer_vehicle(vehicle: u32,
trailer: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleTrailerVehicle {
    crate::__imports::native_get_vehicle_trailer_vehicle(vehicle,
trailer)
}
pub fn set_vehicle_stays_frozen_when_cleaned_up(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleStaysFrozenWhenCleanedUp {
    crate::__imports::native_set_vehicle_stays_frozen_when_cleaned_up(vehicle,
toggle)
}
pub fn set_vehicle_use_alternate_handling(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleUseAlternateHandling {
    crate::__imports::native_set_vehicle_use_alternate_handling(vehicle,
toggle)
}
pub fn get_is_wheels_retracted(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetIsWheelsRetracted {
    crate::__imports::native_get_is_wheels_retracted(vehicle)
}
pub fn set_vehicle_allow_homing_missle_lockon_synced(vehicle: u32,
can_be_locked_on: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleAllowHomingMissleLockonSynced {
    crate::__imports::native_set_vehicle_allow_homing_missle_lockon_synced(vehicle,
can_be_locked_on,
p2)
}
pub fn is_vehicle_high_detail(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleHighDetail {
    crate::__imports::native_is_vehicle_high_detail(vehicle)
}
pub fn set_vehicle_mod_kit(vehicle: u32,
mod_kit: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleModKit {
    crate::__imports::native_set_vehicle_mod_kit(vehicle,
mod_kit)
}
pub fn force_playback_recorded_vehicle_update(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfForcePlaybackRecordedVehicleUpdate {
    crate::__imports::native_force_playback_recorded_vehicle_update(vehicle,
p1)
}
pub fn set_cargobob_exclude_from_pickup_entity(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetCargobobExcludeFromPickupEntity {
    crate::__imports::native_set_cargobob_exclude_from_pickup_entity(p0,
p1)
}
pub fn set_vehicle_act_as_if_high_speed_for_frag_smashing(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleActAsIfHighSpeedForFragSmashing {
    crate::__imports::native_set_vehicle_act_as_if_high_speed_for_frag_smashing(vehicle,
p1)
}
pub fn set_vehicle_headlight_shadows(vehicle: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleHeadlightShadows {
    crate::__imports::native_set_vehicle_headlight_shadows(vehicle,
p1)
}
pub fn set_vehicle_extra_colours(vehicle: u32,
pearlescent_color: i32,
wheel_color: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleExtraColours {
    crate::__imports::native_set_vehicle_extra_colours(vehicle,
pearlescent_color,
wheel_color)
}
pub fn set_vehicle_doors_locked_for_all_teams(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDoorsLockedForAllTeams {
    crate::__imports::native_set_vehicle_doors_locked_for_all_teams(vehicle,
toggle)
}
pub fn get_rotation_of_vehicle_recording_at_time(recording: i32,
time: f32,
script: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetRotationOfVehicleRecordingAtTime {
    crate::__imports::native_get_rotation_of_vehicle_recording_at_time(recording,
time,
script)
}
pub fn set_vehicle_can_engine_missfire(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleCanEngineMissfire {
    crate::__imports::native_set_vehicle_can_engine_missfire(vehicle,
toggle)
}
pub fn set_vehicle_active_for_ped_navigation(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleActiveForPedNavigation {
    crate::__imports::native_set_vehicle_active_for_ped_navigation(vehicle,
toggle)
}
pub fn set_disable_weapon_blade_forces(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDisableWeaponBladeForces {
    crate::__imports::native_set_disable_weapon_blade_forces(toggle)
}
pub fn get_vehicle_recording_id(recording: i32,
script: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetVehicleRecordingId {
    crate::__imports::native_get_vehicle_recording_id(recording,
script)
}
pub fn get_ped_using_vehicle_door(vehicle: u32,
doord: i32) -> altv_wasm_shared::natives_result::ResultOfGetPedUsingVehicleDoor {
    crate::__imports::native_get_ped_using_vehicle_door(vehicle,
doord)
}
pub fn set_train_track_spawn_frequency(track_index: i32,
frequency: i32) -> altv_wasm_shared::natives_result::ResultOfSetTrainTrackSpawnFrequency {
    crate::__imports::native_set_train_track_spawn_frequency(track_index,
frequency)
}
pub fn reset_vehicle_wheels(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfResetVehicleWheels {
    crate::__imports::native_reset_vehicle_wheels(vehicle,
toggle)
}
pub fn delete_script_vehicle_generator(vehicle_generator: i32) -> altv_wasm_shared::natives_result::ResultOfDeleteScriptVehicleGenerator {
    crate::__imports::native_delete_script_vehicle_generator(vehicle_generator)
}
pub fn set_vehicle_reduce_grip(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleReduceGrip {
    crate::__imports::native_set_vehicle_reduce_grip(vehicle,
toggle)
}
pub fn is_vehicle_seat_free(vehicle: u32,
seat_index: i32,
is_task_running: bool) -> altv_wasm_shared::natives_result::ResultOfIsVehicleSeatFree {
    crate::__imports::native_is_vehicle_seat_free(vehicle,
seat_index,
is_task_running)
}
pub fn allow_train_to_be_removed_by_population(p0: i32) -> altv_wasm_shared::natives_result::ResultOfAllowTrainToBeRemovedByPopulation {
    crate::__imports::native_allow_train_to_be_removed_by_population(p0)
}
pub fn set_vehicle_respects_locks_when_has_driver(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleRespectsLocksWhenHasDriver {
    crate::__imports::native_set_vehicle_respects_locks_when_has_driver(vehicle,
p1)
}
pub fn disable_plane_aileron(vehicle: u32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfDisablePlaneAileron {
    crate::__imports::native_disable_plane_aileron(vehicle,
p1,
p2)
}
pub fn set_vehicle_density_multiplier_this_frame(multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDensityMultiplierThisFrame {
    crate::__imports::native_set_vehicle_density_multiplier_this_frame(multiplier)
}
pub fn set_vehicle_engine_on(vehicle: u32,
value: bool,
instantly: bool,
disable_auto_start: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleEngineOn {
    crate::__imports::native_set_vehicle_engine_on(vehicle,
value,
instantly,
disable_auto_start)
}
pub fn get_vehicle_number_of_passengers(vehicle: u32,
include_driver: bool,
include_dead_occupants: bool) -> altv_wasm_shared::natives_result::ResultOfGetVehicleNumberOfPassengers {
    crate::__imports::native_get_vehicle_number_of_passengers(vehicle,
include_driver,
include_dead_occupants)
}
pub fn can_anchor_boat_here_ignore_players(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfCanAnchorBoatHereIgnorePlayers {
    crate::__imports::native_can_anchor_boat_here_ignore_players(vehicle)
}
pub fn set_disable_pretend_occupants(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDisablePretendOccupants {
    crate::__imports::native_set_disable_pretend_occupants(vehicle,
toggle)
}
pub fn get_vehicle_door_lock_status(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleDoorLockStatus {
    crate::__imports::native_get_vehicle_door_lock_status(vehicle)
}
pub fn does_vehicle_have_weapons(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfDoesVehicleHaveWeapons {
    crate::__imports::native_does_vehicle_have_weapons(vehicle)
}
pub fn bring_vehicle_to_halt(vehicle: u32,
distance: f32,
duration: i32,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfBringVehicleToHalt {
    crate::__imports::native_bring_vehicle_to_halt(vehicle,
distance,
duration,
p3)
}
pub fn set_far_draw_vehicles(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetFarDrawVehicles {
    crate::__imports::native_set_far_draw_vehicles(toggle)
}
pub fn can_anchor_boat_here(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfCanAnchorBoatHere {
    crate::__imports::native_can_anchor_boat_here(vehicle)
}
pub fn set_disable_bmx_extra_trick_forces(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetDisableBmxExtraTrickForces {
    crate::__imports::native_set_disable_bmx_extra_trick_forces(p0)
}
pub fn set_disable_explode_from_body_damage_on_collision(vehicle: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetDisableExplodeFromBodyDamageOnCollision {
    crate::__imports::native_set_disable_explode_from_body_damage_on_collision(vehicle,
value)
}
pub fn set_vehicle_generates_engine_shocking_events(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleGeneratesEngineShockingEvents {
    crate::__imports::native_set_vehicle_generates_engine_shocking_events(vehicle,
toggle)
}
pub fn is_vehicle_bumper_bouncing(vehicle: u32,
front_bumper: bool) -> altv_wasm_shared::natives_result::ResultOfIsVehicleBumperBouncing {
    crate::__imports::native_is_vehicle_bumper_bouncing(vehicle,
front_bumper)
}
pub fn set_hydraulics_control(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetHydraulicsControl {
    crate::__imports::native_set_hydraulics_control(vehicle,
toggle)
}
pub fn vehicle_set_ramp_and_ramming_cars_take_damage(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfVehicleSetRampAndRammingCarsTakeDamage {
    crate::__imports::native_vehicle_set_ramp_and_ramming_cars_take_damage(vehicle,
toggle)
}
pub fn get_vehicle_layout_hash(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleLayoutHash {
    crate::__imports::native_get_vehicle_layout_hash(vehicle)
}
pub fn is_any_ped_rappelling_from_heli(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsAnyPedRappellingFromHeli {
    crate::__imports::native_is_any_ped_rappelling_from_heli(vehicle)
}
pub fn get_vehicle_class(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleClass {
    crate::__imports::native_get_vehicle_class(vehicle)
}
pub fn is_vehicle_stopped_at_traffic_lights(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleStoppedAtTrafficLights {
    crate::__imports::native_is_vehicle_stopped_at_traffic_lights(vehicle)
}
pub fn set_increase_wheel_crush_damage(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetIncreaseWheelCrushDamage {
    crate::__imports::native_set_increase_wheel_crush_damage(vehicle,
toggle)
}
pub fn attach_vehicle_to_tow_truck(tow_truck: u32,
vehicle: u32,
rear: bool,
hook_offset_x: f32,
hook_offset_y: f32,
hook_offset_z: f32) -> altv_wasm_shared::natives_result::ResultOfAttachVehicleToTowTruck {
    crate::__imports::native_attach_vehicle_to_tow_truck(tow_truck,
vehicle,
rear,
hook_offset_x,
hook_offset_y,
hook_offset_z)
}
pub fn set_vehicle_wheels_can_break(vehicle: u32,
enabled: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleWheelsCanBreak {
    crate::__imports::native_set_vehicle_wheels_can_break(vehicle,
enabled)
}
pub fn start_playback_recorded_vehicle_using_ai(vehicle: u32,
recording: i32,
script: Option<&String>,
speed: f32,
driving_style: i32) -> altv_wasm_shared::natives_result::ResultOfStartPlaybackRecordedVehicleUsingAi {
    crate::__imports::native_start_playback_recorded_vehicle_using_ai(vehicle,
recording,
script,
speed,
driving_style)
}
pub fn toggle_vehicle_mod(vehicle: u32,
mod_type: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfToggleVehicleMod {
    crate::__imports::native_toggle_vehicle_mod(vehicle,
mod_type,
toggle)
}
pub fn transform_to_car(vehicle: u32,
no_animation: bool) -> altv_wasm_shared::natives_result::ResultOfTransformToCar {
    crate::__imports::native_transform_to_car(vehicle,
no_animation)
}
pub fn set_plane_engine_health(vehicle: u32,
health: f32) -> altv_wasm_shared::natives_result::ResultOfSetPlaneEngineHealth {
    crate::__imports::native_set_plane_engine_health(vehicle,
health)
}
pub fn set_trailer_inverse_mass_scale(vehicle: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetTrailerInverseMassScale {
    crate::__imports::native_set_trailer_inverse_mass_scale(vehicle,
p1)
}
pub fn set_vehicle_neon_enabled(vehicle: u32,
index: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleNeonEnabled {
    crate::__imports::native_set_vehicle_neon_enabled(vehicle,
index,
toggle)
}
pub fn get_vehicle_model_number_of_seats(model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleModelNumberOfSeats {
    crate::__imports::native_get_vehicle_model_number_of_seats(model_hash)
}
pub fn set_garbage_trucks(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetGarbageTrucks {
    crate::__imports::native_set_garbage_trucks(toggle)
}
pub fn set_vehicle_has_been_owned_by_player(vehicle: u32,
owned: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleHasBeenOwnedByPlayer {
    crate::__imports::native_set_vehicle_has_been_owned_by_player(vehicle,
owned)
}
pub fn set_vehicle_disable_towing(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDisableTowing {
    crate::__imports::native_set_vehicle_disable_towing(vehicle,
toggle)
}
pub fn get_vehicle_livery(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleLivery {
    crate::__imports::native_get_vehicle_livery(vehicle)
}
pub fn can_cargobob_pick_up_entity(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfCanCargobobPickUpEntity {
    crate::__imports::native_can_cargobob_pick_up_entity(p0,
p1)
}
pub fn set_vehicle_will_tell_others_to_hurry(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleWillTellOthersToHurry {
    crate::__imports::native_set_vehicle_will_tell_others_to_hurry(vehicle,
p1)
}
pub fn get_vehicle_num_of_broken_loosen_parts(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleNumOfBrokenLoosenParts {
    crate::__imports::native_get_vehicle_num_of_broken_loosen_parts(vehicle)
}
pub fn add_road_node_speed_zone(x: f32,
y: f32,
z: f32,
radius: f32,
speed: f32,
p5: bool) -> altv_wasm_shared::natives_result::ResultOfAddRoadNodeSpeedZone {
    crate::__imports::native_add_road_node_speed_zone(x,
y,
z,
radius,
speed,
p5)
}
pub fn are_any_vehicle_seats_free(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfAreAnyVehicleSeatsFree {
    crate::__imports::native_are_any_vehicle_seats_free(vehicle)
}
pub fn set_disable_hover_mode_flight(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDisableHoverModeFlight {
    crate::__imports::native_set_disable_hover_mode_flight(vehicle,
toggle)
}
pub fn get_position_in_recording(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetPositionInRecording {
    crate::__imports::native_get_position_in_recording(vehicle)
}
pub fn set_vehicle_timed_explosion(vehicle: u32,
ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleTimedExplosion {
    crate::__imports::native_set_vehicle_timed_explosion(vehicle,
ped,
toggle)
}
pub fn get_drift_tyres_set(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetDriftTyresSet {
    crate::__imports::native_get_drift_tyres_set(vehicle)
}
pub fn get_vehicle_class_max_acceleration(vehicle_class: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleClassMaxAcceleration {
    crate::__imports::native_get_vehicle_class_max_acceleration(vehicle_class)
}
pub fn set_door_allowed_to_be_broken_off(vehicle: u32,
door_id: i32,
is_breakable: bool) -> altv_wasm_shared::natives_result::ResultOfSetDoorAllowedToBeBrokenOff {
    crate::__imports::native_set_door_allowed_to_be_broken_off(vehicle,
door_id,
is_breakable)
}
pub fn set_trailer_attachment_enabled(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetTrailerAttachmentEnabled {
    crate::__imports::native_set_trailer_attachment_enabled(p0,
p1)
}
pub fn add_vehicle_stuck_check_with_warp(p0: i32,
p1: f32,
p2: i32,
p3: bool,
p4: bool,
p5: bool,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfAddVehicleStuckCheckWithWarp {
    crate::__imports::native_add_vehicle_stuck_check_with_warp(p0,
p1,
p2,
p3,
p4,
p5,
p6)
}
pub fn set_vehicle_can_be_used_by_fleeing_peds(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleCanBeUsedByFleeingPeds {
    crate::__imports::native_set_vehicle_can_be_used_by_fleeing_peds(vehicle,
toggle)
}
pub fn has_vehicle_recording_been_loaded(recording: i32,
script: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfHasVehicleRecordingBeenLoaded {
    crate::__imports::native_has_vehicle_recording_been_loaded(recording,
script)
}
pub fn can_shuffle_seat(vehicle: u32,
seat_index: i32) -> altv_wasm_shared::natives_result::ResultOfCanShuffleSeat {
    crate::__imports::native_can_shuffle_seat(vehicle,
seat_index)
}
pub fn set_vehicle_flight_nozzle_position(vehicle: u32,
angle_ratio: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleFlightNozzlePosition {
    crate::__imports::native_set_vehicle_flight_nozzle_position(vehicle,
angle_ratio)
}
pub fn set_render_train_as_derailed(train: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetRenderTrainAsDerailed {
    crate::__imports::native_set_render_train_as_derailed(train,
toggle)
}
pub fn set_vehicle_is_considered_by_player(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleIsConsideredByPlayer {
    crate::__imports::native_set_vehicle_is_considered_by_player(vehicle,
toggle)
}
pub fn disable_vehicle_turret_movement_this_frame(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfDisableVehicleTurretMovementThisFrame {
    crate::__imports::native_disable_vehicle_turret_movement_this_frame(vehicle)
}
pub fn force_submarine_surface_mode(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfForceSubmarineSurfaceMode {
    crate::__imports::native_force_submarine_surface_mode(vehicle,
toggle)
}
pub fn set_vehicle_colour_combination(vehicle: u32,
color_combination: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleColourCombination {
    crate::__imports::native_set_vehicle_colour_combination(vehicle,
color_combination)
}
pub fn get_num_mod_kits(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetNumModKits {
    crate::__imports::native_get_num_mod_kits(vehicle)
}
pub fn set_allow_vehicle_explodes_on_contact(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetAllowVehicleExplodesOnContact {
    crate::__imports::native_set_allow_vehicle_explodes_on_contact(vehicle,
toggle)
}
pub fn set_all_vehicle_generators_active() -> altv_wasm_shared::natives_result::ResultOfSetAllVehicleGeneratorsActive {
    crate::__imports::native_set_all_vehicle_generators_active()
}
pub fn set_vehicle_lights(vehicle: u32,
state: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleLights {
    crate::__imports::native_set_vehicle_lights(vehicle,
state)
}
pub fn close_bomb_bay_doors(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfCloseBombBayDoors {
    crate::__imports::native_close_bomb_bay_doors(vehicle)
}
pub fn set_vehicle_occupants_take_explosive_damage(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleOccupantsTakeExplosiveDamage {
    crate::__imports::native_set_vehicle_occupants_take_explosive_damage(vehicle,
toggle)
}
pub fn set_ambient_vehicle_neon_enabled(p0: bool) -> altv_wasm_shared::natives_result::ResultOfSetAmbientVehicleNeonEnabled {
    crate::__imports::native_set_ambient_vehicle_neon_enabled(p0)
}
pub fn get_vehicle_current_time_in_slip_stream(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleCurrentTimeInSlipStream {
    crate::__imports::native_get_vehicle_current_time_in_slip_stream(vehicle)
}
pub fn set_vehicle_custom_secondary_colour(vehicle: u32,
r: i32,
g: i32,
b: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleCustomSecondaryColour {
    crate::__imports::native_set_vehicle_custom_secondary_colour(vehicle,
r,
g,
b)
}
pub fn get_has_rocket_boost(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetHasRocketBoost {
    crate::__imports::native_get_has_rocket_boost(vehicle)
}
pub fn set_vehicle_combat_mode(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleCombatMode {
    crate::__imports::native_set_vehicle_combat_mode(toggle)
}
pub fn stabilise_entity_attached_to_heli(vehicle: u32,
entity: u32,
p2: f32) -> altv_wasm_shared::natives_result::ResultOfStabiliseEntityAttachedToHeli {
    crate::__imports::native_stabilise_entity_attached_to_heli(vehicle,
entity,
p2)
}
pub fn set_vehicle_can_be_targetted(vehicle: u32,
state: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleCanBeTargetted {
    crate::__imports::native_set_vehicle_can_be_targetted(vehicle,
state)
}
pub fn find_handler_vehicle_container_is_attached_to(entity: u32) -> altv_wasm_shared::natives_result::ResultOfFindHandlerVehicleContainerIsAttachedTo {
    crate::__imports::native_find_handler_vehicle_container_is_attached_to(entity)
}
pub fn set_disable_vehicle_petrol_tank_damage(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDisableVehiclePetrolTankDamage {
    crate::__imports::native_set_disable_vehicle_petrol_tank_damage(vehicle,
toggle)
}
pub fn set_forklift_fork_height(vehicle: u32,
height: f32) -> altv_wasm_shared::natives_result::ResultOfSetForkliftForkHeight {
    crate::__imports::native_set_forklift_fork_height(vehicle,
height)
}
pub fn get_random_vehicle_in_sphere(x: f32,
y: f32,
z: f32,
radius: f32,
model_hash: u32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfGetRandomVehicleInSphere {
    crate::__imports::native_get_random_vehicle_in_sphere(x,
y,
z,
radius,
model_hash,
flags)
}
pub fn set_tyre_wear_rate_scale(vehicle: u32,
wheel_index: i32,
multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetTyreWearRateScale {
    crate::__imports::native_set_tyre_wear_rate_scale(vehicle,
wheel_index,
multiplier)
}
pub fn is_this_model_a_quadbike(model: u32) -> altv_wasm_shared::natives_result::ResultOfIsThisModelAquadbike {
    crate::__imports::native_is_this_model_a_quadbike(model)
}
pub fn set_reduced_suspension_force(vehicle: u32,
enable: bool) -> altv_wasm_shared::natives_result::ResultOfSetReducedSuspensionForce {
    crate::__imports::native_set_reduced_suspension_force(vehicle,
enable)
}
pub fn get_outriggers_deployed(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetOutriggersDeployed {
    crate::__imports::native_get_outriggers_deployed(vehicle)
}
pub fn set_vehicle_enveff_scale(vehicle: u32,
fade: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleEnveffScale {
    crate::__imports::native_set_vehicle_enveff_scale(vehicle,
fade)
}
pub fn set_vehicle_door_auto_lock(vehicle: u32,
door_id: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDoorAutoLock {
    crate::__imports::native_set_vehicle_door_auto_lock(vehicle,
door_id,
toggle)
}
pub fn get_number_of_vehicle_colours(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetNumberOfVehicleColours {
    crate::__imports::native_get_number_of_vehicle_colours(vehicle)
}
pub fn get_vehicle_extra_colours(vehicle: u32,
pearlescent_color: i32,
wheel_color: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleExtraColours {
    crate::__imports::native_get_vehicle_extra_colours(vehicle,
pearlescent_color,
wheel_color)
}
pub fn attach_vehicle_to_trailer(vehicle: u32,
trailer: u32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfAttachVehicleToTrailer {
    crate::__imports::native_attach_vehicle_to_trailer(vehicle,
trailer,
radius)
}
pub fn is_rocket_boost_active(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsRocketBoostActive {
    crate::__imports::native_is_rocket_boost_active(vehicle)
}
pub fn is_vehicle_parachute_deployed(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleParachuteDeployed {
    crate::__imports::native_is_vehicle_parachute_deployed(vehicle)
}
pub fn get_vehicle_xenon_light_color_index(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleXenonLightColorIndex {
    crate::__imports::native_get_vehicle_xenon_light_color_index(vehicle)
}
pub fn get_submarine_is_under_design_depth(submarine: u32) -> altv_wasm_shared::natives_result::ResultOfGetSubmarineIsUnderDesignDepth {
    crate::__imports::native_get_submarine_is_under_design_depth(submarine)
}
pub fn set_vehicle_strong(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleStrong {
    crate::__imports::native_set_vehicle_strong(vehicle,
toggle)
}
pub fn is_vehicle_door_fully_open(vehicle: u32,
door_id: i32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleDoorFullyOpen {
    crate::__imports::native_is_vehicle_door_fully_open(vehicle,
door_id)
}
pub fn set_heli_tail_boom_can_break_off(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetHeliTailBoomCanBreakOff {
    crate::__imports::native_set_heli_tail_boom_can_break_off(vehicle,
toggle)
}
pub fn start_playback_recorded_vehicle(vehicle: u32,
recording: i32,
script: Option<&String>,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfStartPlaybackRecordedVehicle {
    crate::__imports::native_start_playback_recorded_vehicle(vehicle,
recording,
script,
p3)
}
pub fn set_heli_main_rotor_health(vehicle: u32,
health: f32) -> altv_wasm_shared::natives_result::ResultOfSetHeliMainRotorHealth {
    crate::__imports::native_set_heli_main_rotor_health(vehicle,
health)
}
pub fn set_vehicle_homing_lockedonto_state(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleHomingLockedontoState {
    crate::__imports::native_set_vehicle_homing_lockedonto_state(p0,
p1)
}
pub fn set_vehicle_ai_can_use_exclusive_seats(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleAiCanUseExclusiveSeats {
    crate::__imports::native_set_vehicle_ai_can_use_exclusive_seats(vehicle,
toggle)
}
pub fn attach_vehicle_to_cargobob(vehicle: u32,
cargobob: u32,
p2: i32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfAttachVehicleToCargobob {
    crate::__imports::native_attach_vehicle_to_cargobob(vehicle,
cargobob,
p2,
x,
y,
z)
}
pub fn set_vehicle_use_boost_button_for_wheel_retract(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleUseBoostButtonForWheelRetract {
    crate::__imports::native_set_vehicle_use_boost_button_for_wheel_retract(toggle)
}
pub fn is_plane_landing_gear_intact(plane: u32) -> altv_wasm_shared::natives_result::ResultOfIsPlaneLandingGearIntact {
    crate::__imports::native_is_plane_landing_gear_intact(plane)
}
pub fn set_transform_to_submarine_uses_alternate_input(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetTransformToSubmarineUsesAlternateInput {
    crate::__imports::native_set_transform_to_submarine_uses_alternate_input(vehicle,
toggle)
}
pub fn is_vehicle_model(vehicle: u32,
model: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleModel {
    crate::__imports::native_is_vehicle_model(vehicle,
model)
}
pub fn set_formation_leader(vehicle: u32,
x: f32,
y: f32,
z: f32,
p4: f32) -> altv_wasm_shared::natives_result::ResultOfSetFormationLeader {
    crate::__imports::native_set_formation_leader(vehicle,
x,
y,
z,
p4)
}
pub fn set_vehicle_can_save_in_garage(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleCanSaveInGarage {
    crate::__imports::native_set_vehicle_can_save_in_garage(vehicle,
toggle)
}
pub fn get_vehicle_num_of_broken_off_parts(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleNumOfBrokenOffParts {
    crate::__imports::native_get_vehicle_num_of_broken_off_parts(vehicle)
}
pub fn set_vehicle_steer_bias(vehicle: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleSteerBias {
    crate::__imports::native_set_vehicle_steer_bias(vehicle,
value)
}
pub fn get_current_playback_for_vehicle(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetCurrentPlaybackForVehicle {
    crate::__imports::native_get_current_playback_for_vehicle(vehicle)
}
pub fn set_ground_effect_reduces_drag(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetGroundEffectReducesDrag {
    crate::__imports::native_set_ground_effect_reduces_drag(toggle)
}
pub fn is_vehicle_alarm_activated(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleAlarmActivated {
    crate::__imports::native_is_vehicle_alarm_activated(vehicle)
}
pub fn set_special_flight_mode_target_ratio(vehicle: u32,
target_ratio: f32) -> altv_wasm_shared::natives_result::ResultOfSetSpecialFlightModeTargetRatio {
    crate::__imports::native_set_special_flight_mode_target_ratio(vehicle,
target_ratio)
}
pub fn set_vehicle_mod_color1(vehicle: u32,
paint_type: i32,
color: i32,
pearlescent_color: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleModColor1 {
    crate::__imports::native_set_vehicle_mod_color1(vehicle,
paint_type,
color,
pearlescent_color)
}
pub fn clear_vehicle_petroltank_fire_culprit(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfClearVehiclePetroltankFireCulprit {
    crate::__imports::native_clear_vehicle_petroltank_fire_culprit(vehicle)
}
pub fn release_preload_mods(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfReleasePreloadMods {
    crate::__imports::native_release_preload_mods(vehicle)
}
pub fn set_vehicle_weapon_restricted_ammo(vehicle: u32,
weapon_index: i32,
capacity: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleWeaponRestrictedAmmo {
    crate::__imports::native_set_vehicle_weapon_restricted_ammo(vehicle,
weapon_index,
capacity)
}
pub fn get_vehicle_mod_identifier_hash(vehicle: u32,
mod_type: i32,
mod_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleModIdentifierHash {
    crate::__imports::native_get_vehicle_mod_identifier_hash(vehicle,
mod_type,
mod_index)
}
pub fn set_vehicle_weapon_damage_scale(vehicle: u32,
multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleWeaponDamageScale {
    crate::__imports::native_set_vehicle_weapon_damage_scale(vehicle,
multiplier)
}
pub fn is_this_model_a_boat(model: u32) -> altv_wasm_shared::natives_result::ResultOfIsThisModelAboat {
    crate::__imports::native_is_this_model_a_boat(model)
}
pub fn set_vehicle_engine_health(vehicle: u32,
health: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleEngineHealth {
    crate::__imports::native_set_vehicle_engine_health(vehicle,
health)
}
pub fn set_disable_vehicle_petrol_tank_fires(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDisableVehiclePetrolTankFires {
    crate::__imports::native_set_disable_vehicle_petrol_tank_fires(vehicle,
toggle)
}
pub fn is_vehicle_bumper_broken_off(vehicle: u32,
front_bumper: bool) -> altv_wasm_shared::natives_result::ResultOfIsVehicleBumperBrokenOff {
    crate::__imports::native_is_vehicle_bumper_broken_off(vehicle,
front_bumper)
}
pub fn remove_vehicles_from_generators_in_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfRemoveVehiclesFromGeneratorsInArea {
    crate::__imports::native_remove_vehicles_from_generators_in_area(x1,
y1,
z1,
x2,
y2,
z2,
p6)
}
pub fn is_vehicle_window_intact(vehicle: u32,
window_index: i32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleWindowIntact {
    crate::__imports::native_is_vehicle_window_intact(vehicle,
window_index)
}
pub fn set_vehicle_wheel_type(vehicle: u32,
wheel_type: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleWheelType {
    crate::__imports::native_set_vehicle_wheel_type(vehicle,
wheel_type)
}
pub fn instantly_fill_vehicle_population() -> altv_wasm_shared::natives_result::ResultOfInstantlyFillVehiclePopulation {
    crate::__imports::native_instantly_fill_vehicle_population()
}
pub fn is_vehicle_producing_slip_stream(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleProducingSlipStream {
    crate::__imports::native_is_vehicle_producing_slip_stream(vehicle)
}
pub fn get_vehicle_mod_color2_name(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleModColor2Name {
    crate::__imports::native_get_vehicle_mod_color2_name(vehicle)
}
pub fn set_vehicle_on_ground_properly(vehicle: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleOnGroundProperly {
    crate::__imports::native_set_vehicle_on_ground_properly(vehicle,
p1)
}
pub fn set_transform_rate_for_animation(vehicle: u32,
transform_rate: f32) -> altv_wasm_shared::natives_result::ResultOfSetTransformRateForAnimation {
    crate::__imports::native_set_transform_rate_for_animation(vehicle,
transform_rate)
}
pub fn set_disable_wanted_cones_response(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDisableWantedConesResponse {
    crate::__imports::native_set_disable_wanted_cones_response(vehicle,
toggle)
}
pub fn is_vehicle_stolen(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleStolen {
    crate::__imports::native_is_vehicle_stolen(vehicle)
}
pub fn get_vehicle_class_max_braking(vehicle_class: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleClassMaxBraking {
    crate::__imports::native_get_vehicle_class_max_braking(vehicle_class)
}
pub fn is_vehicle_driveable(vehicle: u32,
is_on_fire_check: bool) -> altv_wasm_shared::natives_result::ResultOfIsVehicleDriveable {
    crate::__imports::native_is_vehicle_driveable(vehicle,
is_on_fire_check)
}
pub fn get_number_of_vehicle_number_plates() -> altv_wasm_shared::natives_result::ResultOfGetNumberOfVehicleNumberPlates {
    crate::__imports::native_get_number_of_vehicle_number_plates()
}
pub fn set_vehicle_can_be_visibly_damaged(vehicle: u32,
state: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleCanBeVisiblyDamaged {
    crate::__imports::native_set_vehicle_can_be_visibly_damaged(vehicle,
state)
}
pub fn set_plane_propeller_health(plane: u32,
health: f32) -> altv_wasm_shared::natives_result::ResultOfSetPlanePropellerHealth {
    crate::__imports::native_set_plane_propeller_health(plane,
health)
}
pub fn is_vehicle_siren_on(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleSirenOn {
    crate::__imports::native_is_vehicle_siren_on(vehicle)
}
pub fn vehicle_set_parachute_model_override(vehicle: u32,
model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfVehicleSetParachuteModelOverride {
    crate::__imports::native_vehicle_set_parachute_model_override(vehicle,
model_hash)
}
pub fn set_force_vehicle_engine_damage_by_bullet(p0: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetForceVehicleEngineDamageByBullet {
    crate::__imports::native_set_force_vehicle_engine_damage_by_bullet(p0,
p1)
}
pub fn set_vehicle_damage_scale(vehicle: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDamageScale {
    crate::__imports::native_set_vehicle_damage_scale(vehicle,
p1)
}
pub fn does_vehicle_allow_rappel(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfDoesVehicleAllowRappel {
    crate::__imports::native_does_vehicle_allow_rappel(vehicle)
}
pub fn set_police_focus_will_track_vehicle(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPoliceFocusWillTrackVehicle {
    crate::__imports::native_set_police_focus_will_track_vehicle(vehicle,
toggle)
}
pub fn get_vehicle_deformation_at_pos(vehicle: u32,
offset_x: f32,
offset_y: f32,
offset_z: f32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleDeformationAtPos {
    crate::__imports::native_get_vehicle_deformation_at_pos(vehicle,
offset_x,
offset_y,
offset_z)
}
pub fn set_vehicle_colours(vehicle: u32,
color_primary: i32,
color_secondary: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleColours {
    crate::__imports::native_set_vehicle_colours(vehicle,
color_primary,
color_secondary)
}
pub fn get_vehicle_class_max_agility(vehicle_class: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleClassMaxAgility {
    crate::__imports::native_get_vehicle_class_max_agility(vehicle_class)
}
pub fn disable_individual_plane_propeller(vehicle: u32,
propeller: i32) -> altv_wasm_shared::natives_result::ResultOfDisableIndividualPlanePropeller {
    crate::__imports::native_disable_individual_plane_propeller(vehicle,
propeller)
}
pub fn get_vehicle_has_kers(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleHasKers {
    crate::__imports::native_get_vehicle_has_kers(vehicle)
}
pub fn set_vehicle_doors_locked_for_player(vehicle: u32,
player: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDoorsLockedForPlayer {
    crate::__imports::native_set_vehicle_doors_locked_for_player(vehicle,
player,
toggle)
}
pub fn set_vehicle_can_leak_oil(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleCanLeakOil {
    crate::__imports::native_set_vehicle_can_leak_oil(vehicle,
toggle)
}
pub fn network_enable_empty_crowding_vehicles_removal(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkEnableEmptyCrowdingVehiclesRemoval {
    crate::__imports::native_network_enable_empty_crowding_vehicles_removal(toggle)
}
pub fn get_mod_slot_name(vehicle: u32,
mod_type: i32) -> altv_wasm_shared::natives_result::ResultOfGetModSlotName {
    crate::__imports::native_get_mod_slot_name(vehicle,
mod_type)
}
pub fn get_can_vehicle_be_placed_here(vehicle: u32,
x: f32,
y: f32,
z: f32,
rot_x: f32,
rot_y: f32,
rot_z: f32,
p7: i32,
p8: i32) -> altv_wasm_shared::natives_result::ResultOfGetCanVehicleBePlacedHere {
    crate::__imports::native_get_can_vehicle_be_placed_here(vehicle,
x,
y,
z,
rot_x,
rot_y,
rot_z,
p7,
p8)
}
pub fn set_can_respray_vehicle(vehicle: u32,
state: bool) -> altv_wasm_shared::natives_result::ResultOfSetCanResprayVehicle {
    crate::__imports::native_set_can_respray_vehicle(vehicle,
state)
}
pub fn is_vehicle_a_convertible(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfIsVehicleAconvertible {
    crate::__imports::native_is_vehicle_a_convertible(vehicle,
p1)
}
pub fn set_wheels_retracted_instantly(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfSetWheelsRetractedInstantly {
    crate::__imports::native_set_wheels_retracted_instantly(vehicle)
}
pub fn get_vehicle_model_acceleration_max_mods(model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleModelAccelerationMaxMods {
    crate::__imports::native_get_vehicle_model_acceleration_max_mods(model_hash)
}
pub fn is_extra_broken_off(vehicle: u32,
extra_id: i32) -> altv_wasm_shared::natives_result::ResultOfIsExtraBrokenOff {
    crate::__imports::native_is_extra_broken_off(vehicle,
extra_id)
}
pub fn get_fake_suspension_lowering_amount(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetFakeSuspensionLoweringAmount {
    crate::__imports::native_get_fake_suspension_lowering_amount(vehicle)
}
pub fn get_vehicle_model_max_traction(model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleModelMaxTraction {
    crate::__imports::native_get_vehicle_model_max_traction(model_hash)
}
pub fn get_vehicle_estimated_max_speed(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleEstimatedMaxSpeed {
    crate::__imports::native_get_vehicle_estimated_max_speed(vehicle)
}
pub fn set_glider_active(vehicle: u32,
state: bool) -> altv_wasm_shared::natives_result::ResultOfSetGliderActive {
    crate::__imports::native_set_glider_active(vehicle,
state)
}
pub fn stop_playback_recorded_vehicle(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfStopPlaybackRecordedVehicle {
    crate::__imports::native_stop_playback_recorded_vehicle(vehicle)
}
pub fn add_vehicle_combat_angled_avoidance_area(p0: f32,
p1: f32,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
p6: f32) -> altv_wasm_shared::natives_result::ResultOfAddVehicleCombatAngledAvoidanceArea {
    crate::__imports::native_add_vehicle_combat_angled_avoidance_area(p0,
p1,
p2,
p3,
p4,
p5,
p6)
}
pub fn clear_vehicle_custom_primary_colour(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfClearVehicleCustomPrimaryColour {
    crate::__imports::native_clear_vehicle_custom_primary_colour(vehicle)
}
pub fn get_tyre_health(vehicle: u32,
wheel_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetTyreHealth {
    crate::__imports::native_get_tyre_health(vehicle,
wheel_index)
}
pub fn is_vehicle_weapon_disabled(weapon_hash: u32,
vehicle: u32,
owner: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleWeaponDisabled {
    crate::__imports::native_is_vehicle_weapon_disabled(weapon_hash,
vehicle,
owner)
}
pub fn set_vehicle_tank_turret_position(vehicle: u32,
position: f32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleTankTurretPosition {
    crate::__imports::native_set_vehicle_tank_turret_position(vehicle,
position,
p2)
}
pub fn set_cargobob_pickup_magnet_ensure_pickup_entity_upright(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetCargobobPickupMagnetEnsurePickupEntityUpright {
    crate::__imports::native_set_cargobob_pickup_magnet_ensure_pickup_entity_upright(vehicle,
p1)
}
pub fn set_cargobob_force_dont_detach_vehicle(cargobob: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetCargobobForceDontDetachVehicle {
    crate::__imports::native_set_cargobob_force_dont_detach_vehicle(cargobob,
toggle)
}
pub fn is_vehicle_stopped(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleStopped {
    crate::__imports::native_is_vehicle_stopped(vehicle)
}
pub fn get_time_position_in_recording(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetTimePositionInRecording {
    crate::__imports::native_get_time_position_in_recording(vehicle)
}
pub fn is_entity_attached_to_handler_frame(vehicle: u32,
entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsEntityAttachedToHandlerFrame {
    crate::__imports::native_is_entity_attached_to_handler_frame(vehicle,
entity)
}
pub fn set_vehicle_window_tint(vehicle: u32,
tint: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleWindowTint {
    crate::__imports::native_set_vehicle_window_tint(vehicle,
tint)
}
pub fn does_vehicle_have_stuck_vehicle_check(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfDoesVehicleHaveStuckVehicleCheck {
    crate::__imports::native_does_vehicle_have_stuck_vehicle_check(vehicle)
}
pub fn set_vehicle_tail_lights(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleTailLights {
    crate::__imports::native_set_vehicle_tail_lights(vehicle,
toggle)
}
pub fn set_additional_rotation_for_recorded_vehicle_playback(vehicle: u32,
x: f32,
y: f32,
z: f32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfSetAdditionalRotationForRecordedVehiclePlayback {
    crate::__imports::native_set_additional_rotation_for_recorded_vehicle_playback(vehicle,
x,
y,
z,
p4)
}
pub fn get_vehicle_model_value(vehicle_model: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleModelValue {
    crate::__imports::native_get_vehicle_model_value(vehicle_model)
}
pub fn set_mission_train_coords(train: u32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfSetMissionTrainCoords {
    crate::__imports::native_set_mission_train_coords(train,
x,
y,
z)
}
pub fn set_taxi_lights(vehicle: u32,
state: bool) -> altv_wasm_shared::natives_result::ResultOfSetTaxiLights {
    crate::__imports::native_set_taxi_lights(vehicle,
state)
}
pub fn are_wings_of_plane_intact(plane: u32) -> altv_wasm_shared::natives_result::ResultOfAreWingsOfPlaneIntact {
    crate::__imports::native_are_wings_of_plane_intact(plane)
}
pub fn set_vehicle_can_break(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleCanBreak {
    crate::__imports::native_set_vehicle_can_break(vehicle,
toggle)
}
pub fn set_peds_can_fall_off_this_vehicle_from_large_fall_damage(vehicle: u32,
toggle: bool,
p2: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedsCanFallOffThisVehicleFromLargeFallDamage {
    crate::__imports::native_set_peds_can_fall_off_this_vehicle_from_large_fall_damage(vehicle,
toggle,
p2)
}
pub fn get_boat_vehicle_model_agility(model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetBoatVehicleModelAgility {
    crate::__imports::native_get_boat_vehicle_model_agility(model_hash)
}
pub fn set_drift_tyres(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDriftTyres {
    crate::__imports::native_set_drift_tyres(vehicle,
toggle)
}
pub fn set_vehicle_provides_cover(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleProvidesCover {
    crate::__imports::native_set_vehicle_provides_cover(vehicle,
toggle)
}
pub fn delete_mission_train(train: u32) -> altv_wasm_shared::natives_result::ResultOfDeleteMissionTrain {
    crate::__imports::native_delete_mission_train(train)
}
pub fn set_invert_vehicle_controls(vehicle: u32,
state: bool) -> altv_wasm_shared::natives_result::ResultOfSetInvertVehicleControls {
    crate::__imports::native_set_invert_vehicle_controls(vehicle,
state)
}
pub fn has_vehicle_petroltank_set_on_fire_by_entity(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfHasVehiclePetroltankSetOnFireByEntity {
    crate::__imports::native_has_vehicle_petroltank_set_on_fire_by_entity(p0,
p1)
}
pub fn set_use_double_click_for_car_jump(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetUseDoubleClickForCarJump {
    crate::__imports::native_set_use_double_click_for_car_jump(toggle)
}
pub fn set_vehicle_allow_no_passengers_lockon(veh: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleAllowNoPassengersLockon {
    crate::__imports::native_set_vehicle_allow_no_passengers_lockon(veh,
toggle)
}
pub fn get_vehicle_acceleration(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleAcceleration {
    crate::__imports::native_get_vehicle_acceleration(vehicle)
}
pub fn set_vehicle_no_explosion_damage_from_driver(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleNoExplosionDamageFromDriver {
    crate::__imports::native_set_vehicle_no_explosion_damage_from_driver(vehicle,
toggle)
}
pub fn get_vehicle_livery2_count(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleLivery2Count {
    crate::__imports::native_get_vehicle_livery2_count(vehicle)
}
pub fn override_plane_damage_threhsold(vehicle: u32,
health: f32) -> altv_wasm_shared::natives_result::ResultOfOverridePlaneDamageThrehsold {
    crate::__imports::native_override_plane_damage_threhsold(vehicle,
health)
}
pub fn get_is_left_vehicle_headlight_damaged(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetIsLeftVehicleHeadlightDamaged {
    crate::__imports::native_get_is_left_vehicle_headlight_damaged(vehicle)
}
pub fn clear_vehicle_custom_secondary_colour(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfClearVehicleCustomSecondaryColour {
    crate::__imports::native_clear_vehicle_custom_secondary_colour(vehicle)
}
pub fn get_vehicle_livery2(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleLivery2 {
    crate::__imports::native_get_vehicle_livery2(vehicle)
}
pub fn roll_up_window(vehicle: u32,
window_index: i32) -> altv_wasm_shared::natives_result::ResultOfRollUpWindow {
    crate::__imports::native_roll_up_window(vehicle,
window_index)
}
pub fn set_all_low_priority_vehicle_generators_active(active: bool) -> altv_wasm_shared::natives_result::ResultOfSetAllLowPriorityVehicleGeneratorsActive {
    crate::__imports::native_set_all_low_priority_vehicle_generators_active(active)
}
pub fn set_vehicle_extra_colour6(vehicle: u32,
color: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleExtraColour6 {
    crate::__imports::native_set_vehicle_extra_colour6(vehicle,
color)
}
pub fn set_vehicle_livery(vehicle: u32,
livery: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleLivery {
    crate::__imports::native_set_vehicle_livery(vehicle,
livery)
}
pub fn is_any_vehicle_near_point(x: f32,
y: f32,
z: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfIsAnyVehicleNearPoint {
    crate::__imports::native_is_any_vehicle_near_point(x,
y,
z,
radius)
}
pub fn is_any_entity_attached_to_handler_frame(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsAnyEntityAttachedToHandlerFrame {
    crate::__imports::native_is_any_entity_attached_to_handler_frame(vehicle)
}
pub fn get_vehicle_mod_kit(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleModKit {
    crate::__imports::native_get_vehicle_mod_kit(vehicle)
}
pub fn pause_playback_recorded_vehicle(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfPausePlaybackRecordedVehicle {
    crate::__imports::native_pause_playback_recorded_vehicle(vehicle)
}
pub fn is_this_model_an_amphibious_car(model: u32) -> altv_wasm_shared::natives_result::ResultOfIsThisModelAnAmphibiousCar {
    crate::__imports::native_is_this_model_an_amphibious_car(model)
}
pub fn is_heli_landing_area_blocked(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsHeliLandingAreaBlocked {
    crate::__imports::native_is_heli_landing_area_blocked(vehicle)
}
pub fn is_entry_point_for_seat_clear(ped: u32,
vehicle: u32,
seat_index: i32,
side: bool,
on_enter: bool) -> altv_wasm_shared::natives_result::ResultOfIsEntryPointForSeatClear {
    crate::__imports::native_is_entry_point_for_seat_clear(ped,
vehicle,
seat_index,
side,
on_enter)
}
pub fn create_mission_train(unk_variation: i32,
x: f32,
y: f32,
z: f32,
direction: bool,
p5: i32,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfCreateMissionTrain {
    crate::__imports::native_create_mission_train(unk_variation,
x,
y,
z,
direction,
p5,
p6)
}
pub fn track_vehicle_visibility(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfTrackVehicleVisibility {
    crate::__imports::native_track_vehicle_visibility(vehicle)
}
pub fn get_is_door_valid(vehicle: u32,
door_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetIsDoorValid {
    crate::__imports::native_get_is_door_valid(vehicle,
door_id)
}
pub fn set_vehicle_forward_speed_xy(vehicle: u32,
speed: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleForwardSpeedXy {
    crate::__imports::native_set_vehicle_forward_speed_xy(vehicle,
speed)
}
pub fn set_slow_down_effect_disabled(disabled: bool) -> altv_wasm_shared::natives_result::ResultOfSetSlowDownEffectDisabled {
    crate::__imports::native_set_slow_down_effect_disabled(disabled)
}
pub fn get_boat_boom_position_ratio(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetBoatBoomPositionRatio {
    crate::__imports::native_get_boat_boom_position_ratio(vehicle)
}
pub fn set_playback_speed(vehicle: u32,
speed: f32) -> altv_wasm_shared::natives_result::ResultOfSetPlaybackSpeed {
    crate::__imports::native_set_playback_speed(vehicle,
speed)
}
pub fn set_cargobob_pickup_magnet_reduced_strength(cargobob: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetCargobobPickupMagnetReducedStrength {
    crate::__imports::native_set_cargobob_pickup_magnet_reduced_strength(cargobob,
p1)
}
pub fn set_override_vehicle_door_torque(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfSetOverrideVehicleDoorTorque {
    crate::__imports::native_set_override_vehicle_door_torque(p0,
p1,
p2)
}
pub fn get_vehicle_tyres_can_burst(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleTyresCanBurst {
    crate::__imports::native_get_vehicle_tyres_can_burst(vehicle)
}
pub fn is_vehicle_stuck_timer_up(vehicle: u32,
p1: i32,
ms: i32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleStuckTimerUp {
    crate::__imports::native_is_vehicle_stuck_timer_up(vehicle,
p1,
ms)
}
pub fn set_vehicle_is_stolen(vehicle: u32,
is_stolen: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleIsStolen {
    crate::__imports::native_set_vehicle_is_stolen(vehicle,
is_stolen)
}
pub fn set_vehicle_handbrake(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleHandbrake {
    crate::__imports::native_set_vehicle_handbrake(vehicle,
toggle)
}
pub fn set_cargobob_pickup_magnet_pull_rope_length(vehicle: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetCargobobPickupMagnetPullRopeLength {
    crate::__imports::native_set_cargobob_pickup_magnet_pull_rope_length(vehicle,
p1)
}
pub fn get_vehicle_colour_combination(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleColourCombination {
    crate::__imports::native_get_vehicle_colour_combination(vehicle)
}
pub fn set_vehicle_impatience_timer(vehicle: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleImpatienceTimer {
    crate::__imports::native_set_vehicle_impatience_timer(vehicle,
p1)
}
pub fn attach_container_to_handler_frame_when_lined_up(vehicle: u32,
entity: u32) -> altv_wasm_shared::natives_result::ResultOfAttachContainerToHandlerFrameWhenLinedUp {
    crate::__imports::native_attach_container_to_handler_frame_when_lined_up(vehicle,
entity)
}
pub fn has_vehicle_phone_explosive_device() -> altv_wasm_shared::natives_result::ResultOfHasVehiclePhoneExplosiveDevice {
    crate::__imports::native_has_vehicle_phone_explosive_device()
}
pub fn set_vehicle_mod(vehicle: u32,
mod_type: i32,
mod_index: i32,
custom_tires: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleMod {
    crate::__imports::native_set_vehicle_mod(vehicle,
mod_type,
mod_index,
custom_tires)
}
pub fn pop_out_vehicle_windscreen(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfPopOutVehicleWindscreen {
    crate::__imports::native_pop_out_vehicle_windscreen(vehicle)
}
pub fn clear_vehicle_route_history(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfClearVehicleRouteHistory {
    crate::__imports::native_clear_vehicle_route_history(vehicle)
}
pub fn set_cargobob_pickup_magnet_reduced_falloff(cargobob: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetCargobobPickupMagnetReducedFalloff {
    crate::__imports::native_set_cargobob_pickup_magnet_reduced_falloff(cargobob,
p1)
}
pub fn set_vehicle_reduce_grip_level(vehicle: u32,
val: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleReduceGripLevel {
    crate::__imports::native_set_vehicle_reduce_grip_level(vehicle,
val)
}
pub fn set_heli_control_lagging_rate_scalar(helicopter: u32,
multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetHeliControlLaggingRateScalar {
    crate::__imports::native_set_heli_control_lagging_rate_scalar(helicopter,
multiplier)
}
pub fn does_cargobob_have_pickup_magnet(cargobob: u32) -> altv_wasm_shared::natives_result::ResultOfDoesCargobobHavePickupMagnet {
    crate::__imports::native_does_cargobob_have_pickup_magnet(cargobob)
}
pub fn set_vehicle_tyre_fixed(vehicle: u32,
tyre_index: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleTyreFixed {
    crate::__imports::native_set_vehicle_tyre_fixed(vehicle,
tyre_index)
}
pub fn get_tyre_wear_rate(vehicle: u32,
wheel_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetTyreWearRate {
    crate::__imports::native_get_tyre_wear_rate(vehicle,
wheel_index)
}
pub fn set_playback_to_use_ai_try_to_revert_back_later(vehicle: u32,
time: i32,
driving_style: i32,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlaybackToUseAiTryToRevertBackLater {
    crate::__imports::native_set_playback_to_use_ai_try_to_revert_back_later(vehicle,
time,
driving_style,
p3)
}
pub fn get_vehicle_homing_lockedonto_state(p0: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleHomingLockedontoState {
    crate::__imports::native_get_vehicle_homing_lockedonto_state(p0)
}
pub fn set_vehicle_stop_instantly_when_player_inactive(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleStopInstantlyWhenPlayerInactive {
    crate::__imports::native_set_vehicle_stop_instantly_when_player_inactive(vehicle,
toggle)
}
pub fn set_hover_mode_wing_ratio(vehicle: u32,
ratio: f32) -> altv_wasm_shared::natives_result::ResultOfSetHoverModeWingRatio {
    crate::__imports::native_set_hover_mode_wing_ratio(vehicle,
ratio)
}
pub fn set_vehicle_petrol_tank_health(vehicle: u32,
health: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehiclePetrolTankHealth {
    crate::__imports::native_set_vehicle_petrol_tank_health(vehicle,
health)
}
pub fn set_vehicle_custom_primary_colour(vehicle: u32,
r: i32,
g: i32,
b: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleCustomPrimaryColour {
    crate::__imports::native_set_vehicle_custom_primary_colour(vehicle,
r,
g,
b)
}
pub fn get_does_vehicle_have_tombstone(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetDoesVehicleHaveTombstone {
    crate::__imports::native_get_does_vehicle_have_tombstone(vehicle)
}
pub fn set_vehicle_explodes_on_high_explosion_damage(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleExplodesOnHighExplosionDamage {
    crate::__imports::native_set_vehicle_explodes_on_high_explosion_damage(vehicle,
toggle)
}
pub fn set_cargobob_exta_pickup_range(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetCargobobExtaPickupRange {
    crate::__imports::native_set_cargobob_exta_pickup_range(p0,
p1)
}
pub fn set_bike_easy_to_land(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetBikeEasyToLand {
    crate::__imports::native_set_bike_easy_to_land(vehicle,
toggle)
}
pub fn delete_all_trains() -> altv_wasm_shared::natives_result::ResultOfDeleteAllTrains {
    crate::__imports::native_delete_all_trains()
}
pub fn set_vehicle_tank_stationary(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleTankStationary {
    crate::__imports::native_set_vehicle_tank_stationary(vehicle,
p1)
}
pub fn set_tyre_health(vehicle: u32,
wheel_index: i32,
health: f32) -> altv_wasm_shared::natives_result::ResultOfSetTyreHealth {
    crate::__imports::native_set_tyre_health(vehicle,
wheel_index,
health)
}
pub fn set_vehicle_shoot_at_target(driver: u32,
entity: u32,
x_target: f32,
y_target: f32,
z_target: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleShootAtTarget {
    crate::__imports::native_set_vehicle_shoot_at_target(driver,
entity,
x_target,
y_target,
z_target)
}
pub fn is_taxi_light_on(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsTaxiLightOn {
    crate::__imports::native_is_taxi_light_on(vehicle)
}
pub fn are_plane_propellers_intact(plane: u32) -> altv_wasm_shared::natives_result::ResultOfArePlanePropellersIntact {
    crate::__imports::native_are_plane_propellers_intact(plane)
}
pub fn set_disable_map_collision(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfSetDisableMapCollision {
    crate::__imports::native_set_disable_map_collision(vehicle)
}
pub fn vehicle_set_enable_normalise_ramp_car_vertical_veloctiy(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfVehicleSetEnableNormaliseRampCarVerticalVeloctiy {
    crate::__imports::native_vehicle_set_enable_normalise_ramp_car_vertical_veloctiy(p0,
p1)
}
pub fn preload_vehicle_mod(vehicle: u32,
mod_type: i32,
mod_index: i32) -> altv_wasm_shared::natives_result::ResultOfPreloadVehicleMod {
    crate::__imports::native_preload_vehicle_mod(vehicle,
mod_type,
mod_index)
}
pub fn set_boat_anchor(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetBoatAnchor {
    crate::__imports::native_set_boat_anchor(vehicle,
toggle)
}
pub fn get_vehicle_neon_colour(vehicle: u32,
r: i32,
g: i32,
b: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleNeonColour {
    crate::__imports::native_get_vehicle_neon_colour(vehicle,
r,
g,
b)
}
pub fn set_vehicle_dont_terminate_task_when_achieved(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDontTerminateTaskWhenAchieved {
    crate::__imports::native_set_vehicle_dont_terminate_task_when_achieved(vehicle)
}
pub fn fix_vehicle_window(vehicle: u32,
window_index: i32) -> altv_wasm_shared::natives_result::ResultOfFixVehicleWindow {
    crate::__imports::native_fix_vehicle_window(vehicle,
window_index)
}
pub fn get_vehicle_mod(vehicle: u32,
mod_type: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleMod {
    crate::__imports::native_get_vehicle_mod(vehicle,
mod_type)
}
pub fn set_vehicle_doors_shut(vehicle: u32,
close_instantly: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDoorsShut {
    crate::__imports::native_set_vehicle_doors_shut(vehicle,
close_instantly)
}
pub fn explode_vehicle_in_cutscene(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfExplodeVehicleInCutscene {
    crate::__imports::native_explode_vehicle_in_cutscene(vehicle,
p1)
}
pub fn set_should_reset_turret_in_scripted_cameras(vehicle: u32,
should_reset: bool) -> altv_wasm_shared::natives_result::ResultOfSetShouldResetTurretInScriptedCameras {
    crate::__imports::native_set_should_reset_turret_in_scripted_cameras(vehicle,
should_reset)
}
pub fn set_position_offset_for_recorded_vehicle_playback(vehicle: u32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfSetPositionOffsetForRecordedVehiclePlayback {
    crate::__imports::native_set_position_offset_for_recorded_vehicle_playback(vehicle,
x,
y,
z)
}
pub fn set_vehicle_dirt_level(vehicle: u32,
dirt_level: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDirtLevel {
    crate::__imports::native_set_vehicle_dirt_level(vehicle,
dirt_level)
}
pub fn set_vehicle_extended_removal_range(vehicle: u32,
range: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleExtendedRemovalRange {
    crate::__imports::native_set_vehicle_extended_removal_range(vehicle,
range)
}
pub fn roll_down_window(vehicle: u32,
window_index: i32) -> altv_wasm_shared::natives_result::ResultOfRollDownWindow {
    crate::__imports::native_roll_down_window(vehicle,
window_index)
}
pub fn set_speed_boost_effect_disabled(disabled: bool) -> altv_wasm_shared::natives_result::ResultOfSetSpeedBoostEffectDisabled {
    crate::__imports::native_set_speed_boost_effect_disabled(disabled)
}
pub fn create_pick_up_rope_for_cargobob(cargobob: u32,
state: i32) -> altv_wasm_shared::natives_result::ResultOfCreatePickUpRopeForCargobob {
    crate::__imports::native_create_pick_up_rope_for_cargobob(cargobob,
state)
}
pub fn detach_container_from_handler_frame(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfDetachContainerFromHandlerFrame {
    crate::__imports::native_detach_container_from_handler_frame(vehicle)
}
pub fn stop_bringing_vehicle_to_halt(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfStopBringingVehicleToHalt {
    crate::__imports::native_stop_bringing_vehicle_to_halt(vehicle)
}
pub fn set_vehicle_door_open(vehicle: u32,
door_id: i32,
loose: bool,
open_instantly: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDoorOpen {
    crate::__imports::native_set_vehicle_door_open(vehicle,
door_id,
loose,
open_instantly)
}
pub fn get_vehicle_number_plate_text(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleNumberPlateText {
    crate::__imports::native_get_vehicle_number_plate_text(vehicle)
}
pub fn get_vehicle_extra_colour5(vehicle: u32,
color: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleExtraColour5 {
    crate::__imports::native_get_vehicle_extra_colour5(vehicle,
color)
}
pub fn get_vehicle_petrol_tank_health(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehiclePetrolTankHealth {
    crate::__imports::native_get_vehicle_petrol_tank_health(vehicle)
}
pub fn set_vehicle_allow_homing_missle_lockon(vehicle: u32,
toggle: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleAllowHomingMissleLockon {
    crate::__imports::native_set_vehicle_allow_homing_missle_lockon(vehicle,
toggle,
p2)
}
pub fn start_playback_recorded_vehicle_with_flags(vehicle: u32,
recording: i32,
script: Option<&String>,
flags: i32,
time: i32,
driving_style: i32) -> altv_wasm_shared::natives_result::ResultOfStartPlaybackRecordedVehicleWithFlags {
    crate::__imports::native_start_playback_recorded_vehicle_with_flags(vehicle,
recording,
script,
flags,
time,
driving_style)
}
pub fn set_vehicle_extra(vehicle: u32,
extra_id: i32,
disable: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleExtra {
    crate::__imports::native_set_vehicle_extra(vehicle,
extra_id,
disable)
}
pub fn is_cop_vehicle_in_area3d(x1: f32,
x2: f32,
y1: f32,
y2: f32,
z1: f32,
z2: f32) -> altv_wasm_shared::natives_result::ResultOfIsCopVehicleInArea3d {
    crate::__imports::native_is_cop_vehicle_in_area3d(x1,
x2,
y1,
y2,
z1,
z2)
}
pub fn is_this_model_a_car(model: u32) -> altv_wasm_shared::natives_result::ResultOfIsThisModelAcar {
    crate::__imports::native_is_this_model_a_car(model)
}
pub fn set_heli_resist_to_explosion(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetHeliResistToExplosion {
    crate::__imports::native_set_heli_resist_to_explosion(vehicle,
toggle)
}
pub fn get_vehicle_trailer_parent_vehicle(trailer: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleTrailerParentVehicle {
    crate::__imports::native_get_vehicle_trailer_parent_vehicle(trailer)
}
pub fn set_random_trains(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetRandomTrains {
    crate::__imports::native_set_random_trains(toggle)
}
pub fn set_allow_ramming_soop_or_ramp(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetAllowRammingSoopOrRamp {
    crate::__imports::native_set_allow_ramming_soop_or_ramp(p0,
p1)
}
pub fn get_vehicle_mod_color2(vehicle: u32,
paint_type: i32,
color: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleModColor2 {
    crate::__imports::native_get_vehicle_mod_color2(vehicle,
paint_type,
color)
}
pub fn set_vehicle_mod_color2(vehicle: u32,
paint_type: i32,
color: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleModColor2 {
    crate::__imports::native_set_vehicle_mod_color2(vehicle,
paint_type,
color)
}
pub fn get_vehicle_weapon_restricted_ammo(vehicle: u32,
weapon_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleWeaponRestrictedAmmo {
    crate::__imports::native_get_vehicle_weapon_restricted_ammo(vehicle,
weapon_index)
}
pub fn request_vehicle_asset(vehicle_hash: u32,
vehicle_asset: i32) -> altv_wasm_shared::natives_result::ResultOfRequestVehicleAsset {
    crate::__imports::native_request_vehicle_asset(vehicle_hash,
vehicle_asset)
}
pub fn set_rocket_boost_active(vehicle: u32,
active: bool) -> altv_wasm_shared::natives_result::ResultOfSetRocketBoostActive {
    crate::__imports::native_set_rocket_boost_active(vehicle,
active)
}
pub fn set_disable_ped_stand_on_top(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDisablePedStandOnTop {
    crate::__imports::native_set_disable_ped_stand_on_top(vehicle,
toggle)
}
pub fn set_vehicle_detonation_mode(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDetonationMode {
    crate::__imports::native_set_vehicle_detonation_mode(toggle)
}
pub fn remove_vehicle_stuck_check(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfRemoveVehicleStuckCheck {
    crate::__imports::native_remove_vehicle_stuck_check(vehicle)
}
pub fn get_vehicle_custom_secondary_colour(vehicle: u32,
r: i32,
g: i32,
b: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleCustomSecondaryColour {
    crate::__imports::native_get_vehicle_custom_secondary_colour(vehicle,
r,
g,
b)
}
pub fn suppress_neons_on_vehicle(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSuppressNeonsOnVehicle {
    crate::__imports::native_suppress_neons_on_vehicle(vehicle,
toggle)
}
pub fn get_last_ped_in_vehicle_seat(vehicle: u32,
seat_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetLastPedInVehicleSeat {
    crate::__imports::native_get_last_ped_in_vehicle_seat(vehicle,
seat_index)
}
pub fn set_random_boats(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetRandomBoats {
    crate::__imports::native_set_random_boats(toggle)
}
pub fn is_toggle_mod_on(vehicle: u32,
mod_type: i32) -> altv_wasm_shared::natives_result::ResultOfIsToggleModOn {
    crate::__imports::native_is_toggle_mod_on(vehicle,
mod_type)
}
pub fn set_hydraulic_suspension_raise_factor(vehicle: u32,
wheel_id: i32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetHydraulicSuspensionRaiseFactor {
    crate::__imports::native_set_hydraulic_suspension_raise_factor(vehicle,
wheel_id,
value)
}
pub fn set_car_high_speed_bump_severity_multiplier(multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetCarHighSpeedBumpSeverityMultiplier {
    crate::__imports::native_set_car_high_speed_bump_severity_multiplier(multiplier)
}
pub fn get_vehicle_is_dummy(p0: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleIsDummy {
    crate::__imports::native_get_vehicle_is_dummy(p0)
}
pub fn roll_down_windows(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfRollDownWindows {
    crate::__imports::native_roll_down_windows(vehicle)
}
pub fn set_bounds_affect_water_probes(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetBoundsAffectWaterProbes {
    crate::__imports::native_set_bounds_affect_water_probes(vehicle,
toggle)
}
pub fn set_ignore_planes_small_pitch_change(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetIgnorePlanesSmallPitchChange {
    crate::__imports::native_set_ignore_planes_small_pitch_change(p0,
p1)
}
pub fn set_vehicle_weapon_can_target_objects(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleWeaponCanTargetObjects {
    crate::__imports::native_set_vehicle_weapon_can_target_objects(vehicle,
toggle)
}
pub fn set_vehicle_bobblehead_velocity(x: f32,
y: f32,
p2: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleBobbleheadVelocity {
    crate::__imports::native_set_vehicle_bobblehead_velocity(x,
y,
p2)
}
pub fn get_vehicle_attached_to_cargobob(cargobob: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleAttachedToCargobob {
    crate::__imports::native_get_vehicle_attached_to_cargobob(cargobob)
}
pub fn set_pickup_rope_length_for_cargobob(cargobob: u32,
length1: f32,
length2: f32,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfSetPickupRopeLengthForCargobob {
    crate::__imports::native_set_pickup_rope_length_for_cargobob(cargobob,
length1,
length2,
p3)
}
pub fn set_trailer_legs_lowered(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfSetTrailerLegsLowered {
    crate::__imports::native_set_trailer_legs_lowered(vehicle)
}
pub fn get_vehicle_livery_count(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleLiveryCount {
    crate::__imports::native_get_vehicle_livery_count(vehicle)
}
pub fn open_bomb_bay_doors(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfOpenBombBayDoors {
    crate::__imports::native_open_bomb_bay_doors(vehicle)
}
pub fn set_vehicle_force_interiorlight(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleForceInteriorlight {
    crate::__imports::native_set_vehicle_force_interiorlight(vehicle,
toggle)
}
pub fn unpause_playback_recorded_vehicle(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfUnpausePlaybackRecordedVehicle {
    crate::__imports::native_unpause_playback_recorded_vehicle(vehicle)
}
pub fn set_force_fix_link_matrices(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfSetForceFixLinkMatrices {
    crate::__imports::native_set_force_fix_link_matrices(vehicle)
}
pub fn set_vehicle_use_more_restrictive_spawn_checks(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleUseMoreRestrictiveSpawnChecks {
    crate::__imports::native_set_vehicle_use_more_restrictive_spawn_checks(vehicle,
p1)
}
pub fn get_mod_text_label(vehicle: u32,
mod_type: i32,
mod_value: i32) -> altv_wasm_shared::natives_result::ResultOfGetModTextLabel {
    crate::__imports::native_get_mod_text_label(vehicle,
mod_type,
mod_value)
}
pub fn is_handler_frame_lined_up_with_container(vehicle: u32,
entity: u32) -> altv_wasm_shared::natives_result::ResultOfIsHandlerFrameLinedUpWithContainer {
    crate::__imports::native_is_handler_frame_lined_up_with_container(vehicle,
entity)
}
pub fn set_vehicle_gravity(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleGravity {
    crate::__imports::native_set_vehicle_gravity(vehicle,
toggle)
}
pub fn set_vehicle_disable_height_map_avoidance(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDisableHeightMapAvoidance {
    crate::__imports::native_set_vehicle_disable_height_map_avoidance(vehicle,
p1)
}
pub fn set_vehicle_undriveable(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleUndriveable {
    crate::__imports::native_set_vehicle_undriveable(vehicle,
toggle)
}
pub fn does_vehicle_have_roof(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfDoesVehicleHaveRoof {
    crate::__imports::native_does_vehicle_have_roof(vehicle)
}
pub fn set_vehicle_fullbeam(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleFullbeam {
    crate::__imports::native_set_vehicle_fullbeam(vehicle,
toggle)
}
pub fn set_vehicle_automatically_attaches(vehicle: u32,
p1: bool,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleAutomaticallyAttaches {
    crate::__imports::native_set_vehicle_automatically_attaches(vehicle,
p1,
p2)
}
pub fn get_vehicle_model_acceleration(model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleModelAcceleration {
    crate::__imports::native_get_vehicle_model_acceleration(model_hash)
}
pub fn get_vehicle_neon_enabled(vehicle: u32,
index: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleNeonEnabled {
    crate::__imports::native_get_vehicle_neon_enabled(vehicle,
index)
}
pub fn is_vehicle_sprayable(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleSprayable {
    crate::__imports::native_is_vehicle_sprayable(vehicle)
}
pub fn find_spawn_coordinates_for_heli(ped: u32) -> altv_wasm_shared::natives_result::ResultOfFindSpawnCoordinatesForHeli {
    crate::__imports::native_find_spawn_coordinates_for_heli(ped)
}
pub fn set_vehicle_neon_colour(vehicle: u32,
r: i32,
g: i32,
b: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleNeonColour {
    crate::__imports::native_set_vehicle_neon_colour(vehicle,
r,
g,
b)
}
pub fn set_hydraulic_vehicle_state(vehicle: u32,
state: i32) -> altv_wasm_shared::natives_result::ResultOfSetHydraulicVehicleState {
    crate::__imports::native_set_hydraulic_vehicle_state(vehicle,
state)
}
pub fn set_disable_retracting_weapon_blades(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDisableRetractingWeaponBlades {
    crate::__imports::native_set_disable_retracting_weapon_blades(toggle)
}
pub fn get_vehicle_dirt_level(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleDirtLevel {
    crate::__imports::native_get_vehicle_dirt_level(vehicle)
}
pub fn get_vehicle_lock_on_target(vehicle: u32,
entity: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleLockOnTarget {
    crate::__imports::native_get_vehicle_lock_on_target(vehicle,
entity)
}
pub fn raise_convertible_roof(vehicle: u32,
instantly_raise: bool) -> altv_wasm_shared::natives_result::ResultOfRaiseConvertibleRoof {
    crate::__imports::native_raise_convertible_roof(vehicle,
instantly_raise)
}
pub fn set_boat_sinks_when_wrecked(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetBoatSinksWhenWrecked {
    crate::__imports::native_set_boat_sinks_when_wrecked(vehicle,
toggle)
}
pub fn set_vehicle_steering_bias_scalar(p0: i32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleSteeringBiasScalar {
    crate::__imports::native_set_vehicle_steering_bias_scalar(p0,
p1)
}
pub fn detach_vehicle_from_trailer(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfDetachVehicleFromTrailer {
    crate::__imports::native_detach_vehicle_from_trailer(vehicle)
}
pub fn get_car_has_jump(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetCarHasJump {
    crate::__imports::native_get_car_has_jump(vehicle)
}
pub fn set_vehicle_number_plate_text_index(vehicle: u32,
plate_index: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleNumberPlateTextIndex {
    crate::__imports::native_set_vehicle_number_plate_text_index(vehicle,
plate_index)
}
pub fn get_vehicle_mod_modifier_value(vehicle: u32,
mod_type: i32,
mod_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleModModifierValue {
    crate::__imports::native_get_vehicle_mod_modifier_value(vehicle,
mod_type,
mod_index)
}
pub fn set_ambient_vehicle_range_multiplier_this_frame(value: f32) -> altv_wasm_shared::natives_result::ResultOfSetAmbientVehicleRangeMultiplierThisFrame {
    crate::__imports::native_set_ambient_vehicle_range_multiplier_this_frame(value)
}
pub fn get_is_vehicle_secondary_colour_custom(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetIsVehicleSecondaryColourCustom {
    crate::__imports::native_get_is_vehicle_secondary_colour_custom(vehicle)
}
pub fn set_disable_vehicle_engine_fires(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDisableVehicleEngineFires {
    crate::__imports::native_set_disable_vehicle_engine_fires(vehicle,
toggle)
}
pub fn has_instant_fill_vehicle_population_finished() -> altv_wasm_shared::natives_result::ResultOfHasInstantFillVehiclePopulationFinished {
    crate::__imports::native_has_instant_fill_vehicle_population_finished()
}
pub fn lower_forklift_forks(forklift: u32) -> altv_wasm_shared::natives_result::ResultOfLowerForkliftForks {
    crate::__imports::native_lower_forklift_forks(forklift)
}
pub fn get_position_of_vehicle_recording_id_at_time(id: i32,
time: f32) -> altv_wasm_shared::natives_result::ResultOfGetPositionOfVehicleRecordingIdAtTime {
    crate::__imports::native_get_position_of_vehicle_recording_id_at_time(id,
time)
}
pub fn get_number_of_vehicle_doors(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetNumberOfVehicleDoors {
    crate::__imports::native_get_number_of_vehicle_doors(vehicle)
}
pub fn set_vehicle_brake_lights(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleBrakeLights {
    crate::__imports::native_set_vehicle_brake_lights(vehicle,
toggle)
}
pub fn remove_vehicle_mod(vehicle: u32,
mod_type: i32) -> altv_wasm_shared::natives_result::ResultOfRemoveVehicleMod {
    crate::__imports::native_remove_vehicle_mod(vehicle,
mod_type)
}
pub fn set_vehicle_has_strong_axles(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleHasStrongAxles {
    crate::__imports::native_set_vehicle_has_strong_axles(vehicle,
toggle)
}
pub fn modify_vehicle_top_speed(vehicle: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfModifyVehicleTopSpeed {
    crate::__imports::native_modify_vehicle_top_speed(vehicle,
value)
}
pub fn set_vehicle_lod_multiplier(vehicle: u32,
multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleLodMultiplier {
    crate::__imports::native_set_vehicle_lod_multiplier(vehicle,
multiplier)
}
pub fn set_vehicle_door_shut(vehicle: u32,
door_id: i32,
close_instantly: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDoorShut {
    crate::__imports::native_set_vehicle_door_shut(vehicle,
door_id,
close_instantly)
}
pub fn skip_time_in_playback_recorded_vehicle(vehicle: u32,
time: f32) -> altv_wasm_shared::natives_result::ResultOfSkipTimeInPlaybackRecordedVehicle {
    crate::__imports::native_skip_time_in_playback_recorded_vehicle(vehicle,
time)
}
pub fn set_heli_can_pickup_entity_that_has_pick_up_disabled(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetHeliCanPickupEntityThatHasPickUpDisabled {
    crate::__imports::native_set_heli_can_pickup_entity_that_has_pick_up_disabled(vehicle,
toggle)
}
pub fn is_this_model_a_jetski(model: u32) -> altv_wasm_shared::natives_result::ResultOfIsThisModelAjetski {
    crate::__imports::native_is_this_model_a_jetski(model)
}
pub fn set_vehicle_deformation_fixed(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDeformationFixed {
    crate::__imports::native_set_vehicle_deformation_fixed(vehicle)
}
pub fn does_vehicle_exist_with_decorator(decorator: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfDoesVehicleExistWithDecorator {
    crate::__imports::native_does_vehicle_exist_with_decorator(decorator)
}
pub fn set_vehicle_number_plate_text(vehicle: u32,
plate_text: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetVehicleNumberPlateText {
    crate::__imports::native_set_vehicle_number_plate_text(vehicle,
plate_text)
}
pub fn set_trailer_legs_raised(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfSetTrailerLegsRaised {
    crate::__imports::native_set_trailer_legs_raised(vehicle)
}
pub fn set_vehicle_damage_scales(vehicle: u32,
p1: i32,
p2: i32,
p3: i32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDamageScales {
    crate::__imports::native_set_vehicle_damage_scales(vehicle,
p1,
p2,
p3,
p4)
}
pub fn set_vehicle_doors_locked_for_non_script_players(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDoorsLockedForNonScriptPlayers {
    crate::__imports::native_set_vehicle_doors_locked_for_non_script_players(vehicle,
toggle)
}
pub fn remove_pick_up_rope_for_cargobob(cargobob: u32) -> altv_wasm_shared::natives_result::ResultOfRemovePickUpRopeForCargobob {
    crate::__imports::native_remove_pick_up_rope_for_cargobob(cargobob)
}
pub fn set_disable_automatic_crash_task(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDisableAutomaticCrashTask {
    crate::__imports::native_set_disable_automatic_crash_task(vehicle,
toggle)
}
pub fn set_force_hd_vehicle(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetForceHdVehicle {
    crate::__imports::native_set_force_hd_vehicle(vehicle,
toggle)
}
pub fn set_vehicle_engine_can_degrade(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleEngineCanDegrade {
    crate::__imports::native_set_vehicle_engine_can_degrade(vehicle,
toggle)
}
pub fn set_vehicle_causes_swerving(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleCausesSwerving {
    crate::__imports::native_set_vehicle_causes_swerving(vehicle,
toggle)
}
pub fn does_vehicle_have_searchlight(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfDoesVehicleHaveSearchlight {
    crate::__imports::native_does_vehicle_have_searchlight(vehicle)
}
pub fn get_entity_attached_to_cargobob(p0: i32) -> altv_wasm_shared::natives_result::ResultOfGetEntityAttachedToCargobob {
    crate::__imports::native_get_entity_attached_to_cargobob(p0)
}
pub fn set_vehicle_shunt_on_stick(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleShuntOnStick {
    crate::__imports::native_set_vehicle_shunt_on_stick(toggle)
}
pub fn add_vehicle_phone_explosive_device(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfAddVehiclePhoneExplosiveDevice {
    crate::__imports::native_add_vehicle_phone_explosive_device(vehicle)
}
pub fn set_vehicle_kers_allowed(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleKersAllowed {
    crate::__imports::native_set_vehicle_kers_allowed(vehicle,
toggle)
}
pub fn force_sub_throttle_for_time(vehicle: u32,
p1: f32,
p2: f32) -> altv_wasm_shared::natives_result::ResultOfForceSubThrottleForTime {
    crate::__imports::native_force_sub_throttle_for_time(vehicle,
p1,
p2)
}
pub fn set_cargobob_pickup_magnet_active(cargobob: u32,
is_active: bool) -> altv_wasm_shared::natives_result::ResultOfSetCargobobPickupMagnetActive {
    crate::__imports::native_set_cargobob_pickup_magnet_active(cargobob,
is_active)
}
pub fn set_vehicle_generator_area_of_interest(x: f32,
y: f32,
z: f32,
radius: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleGeneratorAreaOfInterest {
    crate::__imports::native_set_vehicle_generator_area_of_interest(x,
y,
z,
radius)
}
pub fn have_vehicle_mods_streamed_in(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfHaveVehicleModsStreamedIn {
    crate::__imports::native_have_vehicle_mods_streamed_in(vehicle)
}
pub fn set_vehicle_flight_nozzle_position_immediate(vehicle: u32,
angle: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleFlightNozzlePositionImmediate {
    crate::__imports::native_set_vehicle_flight_nozzle_position_immediate(vehicle,
angle)
}
pub fn get_landing_gear_state(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetLandingGearState {
    crate::__imports::native_get_landing_gear_state(vehicle)
}
pub fn get_all_vehicles(vehs_struct: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetAllVehicles {
    crate::__imports::native_get_all_vehicles(vehs_struct)
}
pub fn set_vehicle_countermeasure_ammo(vehicle: u32,
counter_measure_count: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleCountermeasureAmmo {
    crate::__imports::native_set_vehicle_countermeasure_ammo(vehicle,
counter_measure_count)
}
pub fn set_cargobob_pickup_magnet_set_ambient_mode(vehicle: u32,
p1: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetCargobobPickupMagnetSetAmbientMode {
    crate::__imports::native_set_cargobob_pickup_magnet_set_ambient_mode(vehicle,
p1,
p2)
}
pub fn set_vehicle_act_as_if_has_siren_on(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleActAsIfHasSirenOn {
    crate::__imports::native_set_vehicle_act_as_if_has_siren_on(vehicle,
p1)
}
pub fn start_vehicle_horn(vehicle: u32,
duration: i32,
mode: u32,
forever: bool) -> altv_wasm_shared::natives_result::ResultOfStartVehicleHorn {
    crate::__imports::native_start_vehicle_horn(vehicle,
duration,
mode,
forever)
}
pub fn get_vehicle_plate_type(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehiclePlateType {
    crate::__imports::native_get_vehicle_plate_type(vehicle)
}
pub fn set_bike_on_stand(vehicle: u32,
x: f32,
y: f32) -> altv_wasm_shared::natives_result::ResultOfSetBikeOnStand {
    crate::__imports::native_set_bike_on_stand(vehicle,
x,
y)
}
pub fn get_num_vehicle_window_tints() -> altv_wasm_shared::natives_result::ResultOfGetNumVehicleWindowTints {
    crate::__imports::native_get_num_vehicle_window_tints()
}
pub fn vehicle_set_jet_wash_force_enabled(p0: i32) -> altv_wasm_shared::natives_result::ResultOfVehicleSetJetWashForceEnabled {
    crate::__imports::native_vehicle_set_jet_wash_force_enabled(p0)
}
pub fn set_vehicle_in_car_mod_shop(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleInCarModShop {
    crate::__imports::native_set_vehicle_in_car_mod_shop(vehicle,
toggle)
}
pub fn create_script_vehicle_generator(x: f32,
y: f32,
z: f32,
heading: f32,
p4: f32,
p5: f32,
model_hash: u32,
p7: i32,
p8: i32,
p9: i32,
p10: i32,
p11: bool,
p12: bool,
p13: bool,
p14: bool,
p15: bool,
p16: i32) -> altv_wasm_shared::natives_result::ResultOfCreateScriptVehicleGenerator {
    crate::__imports::native_create_script_vehicle_generator(x,
y,
z,
heading,
p4,
p5,
model_hash,
p7,
p8,
p9,
p10,
p11,
p12,
p13,
p14,
p15,
p16)
}
pub fn smash_vehicle_window(vehicle: u32,
window_index: i32) -> altv_wasm_shared::natives_result::ResultOfSmashVehicleWindow {
    crate::__imports::native_smash_vehicle_window(vehicle,
window_index)
}
pub fn is_big_vehicle(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsBigVehicle {
    crate::__imports::native_is_big_vehicle(vehicle)
}
pub fn set_vehicle_blip_throttle_randomly(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleBlipThrottleRandomly {
    crate::__imports::native_set_vehicle_blip_throttle_randomly(vehicle,
p1)
}
pub fn get_in_vehicle_clipset_hash_for_seat(vehicle: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfGetInVehicleClipsetHashForSeat {
    crate::__imports::native_get_in_vehicle_clipset_hash_for_seat(vehicle,
p1)
}
pub fn is_this_model_a_plane(model: u32) -> altv_wasm_shared::natives_result::ResultOfIsThisModelAplane {
    crate::__imports::native_is_this_model_a_plane(model)
}
pub fn get_vehicle_max_traction(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleMaxTraction {
    crate::__imports::native_get_vehicle_max_traction(vehicle)
}
pub fn set_heli_blades_full_speed(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfSetHeliBladesFullSpeed {
    crate::__imports::native_set_heli_blades_full_speed(vehicle)
}
pub fn set_cargobob_pickup_magnet_falloff(cargobob: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetCargobobPickupMagnetFalloff {
    crate::__imports::native_set_cargobob_pickup_magnet_falloff(cargobob,
p1)
}
pub fn get_vehicle_colours(vehicle: u32,
color_primary: i32,
color_secondary: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleColours {
    crate::__imports::native_get_vehicle_colours(vehicle,
color_primary,
color_secondary)
}
pub fn is_this_model_an_amphibious_quadbike(model: u32) -> altv_wasm_shared::natives_result::ResultOfIsThisModelAnAmphibiousQuadbike {
    crate::__imports::native_is_this_model_an_amphibious_quadbike(model)
}
pub fn set_vehicle_damage(vehicle: u32,
x_offset: f32,
y_offset: f32,
z_offset: f32,
damage: f32,
radius: f32,
focus_on_model: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDamage {
    crate::__imports::native_set_vehicle_damage(vehicle,
x_offset,
y_offset,
z_offset,
damage,
radius,
focus_on_model)
}
pub fn attach_entity_to_cargobob(p0: i32,
p1: i32,
p2: i32,
p3: i32,
p4: i32,
p5: i32) -> altv_wasm_shared::natives_result::ResultOfAttachEntityToCargobob {
    crate::__imports::native_attach_entity_to_cargobob(p0,
p1,
p2,
p3,
p4,
p5)
}
pub fn get_is_vehicle_shunting(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetIsVehicleShunting {
    crate::__imports::native_get_is_vehicle_shunting(vehicle)
}
pub fn set_fleeing_vehicles_use_switched_off_nodes(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetFleeingVehiclesUseSwitchedOffNodes {
    crate::__imports::native_set_fleeing_vehicles_use_switched_off_nodes(p0)
}
pub fn set_vehicle_doors_locked_for_all_players(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDoorsLockedForAllPlayers {
    crate::__imports::native_set_vehicle_doors_locked_for_all_players(vehicle,
toggle)
}
pub fn set_vehicle_wheels_can_break_off_when_blow_up(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleWheelsCanBreakOffWhenBlowUp {
    crate::__imports::native_set_vehicle_wheels_can_break_off_when_blow_up(vehicle,
toggle)
}
pub fn set_vehicle_ceiling_height(vehicle: u32,
height: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleCeilingHeight {
    crate::__imports::native_set_vehicle_ceiling_height(vehicle,
height)
}
pub fn generate_vehicle_creation_pos_from_paths(out_vec: Option<&shared::Vector3>,
p1: i32,
out_vec1: Option<&shared::Vector3>,
p3: i32,
p4: i32,
p5: i32,
p6: i32,
p7: i32,
p8: i32) -> altv_wasm_shared::natives_result::ResultOfGenerateVehicleCreationPosFromPaths {
    crate::__imports::native_generate_vehicle_creation_pos_from_paths(out_vec,
p1,
out_vec1,
p3,
p4,
p5,
p6,
p7,
p8)
}
pub fn network_cap_empty_crowding_vehicles_removal(p0: i32) -> altv_wasm_shared::natives_result::ResultOfNetworkCapEmptyCrowdingVehiclesRemoval {
    crate::__imports::native_network_cap_empty_crowding_vehicles_removal(p0)
}
pub fn set_playback_to_use_ai(vehicle: u32,
driving_style: i32) -> altv_wasm_shared::natives_result::ResultOfSetPlaybackToUseAi {
    crate::__imports::native_set_playback_to_use_ai(vehicle,
driving_style)
}
pub fn get_num_mod_colors(paint_type: i32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfGetNumModColors {
    crate::__imports::native_get_num_mod_colors(paint_type,
p1)
}
pub fn set_vehicle_door_latched(vehicle: u32,
door_id: i32,
p2: bool,
p3: bool,
p4: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDoorLatched {
    crate::__imports::native_set_vehicle_door_latched(vehicle,
door_id,
p2,
p3,
p4)
}
pub fn set_vehicle_livery2(vehicle: u32,
livery: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleLivery2 {
    crate::__imports::native_set_vehicle_livery2(vehicle,
livery)
}
pub fn request_vehicle_high_detail_model(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfRequestVehicleHighDetailModel {
    crate::__imports::native_request_vehicle_high_detail_model(vehicle)
}
pub fn remove_vehicle_window(vehicle: u32,
window_index: i32) -> altv_wasm_shared::natives_result::ResultOfRemoveVehicleWindow {
    crate::__imports::native_remove_vehicle_window(vehicle,
window_index)
}
pub fn vehicle_set_parachute_model_tint_index(vehicle: u32,
texture_variation: i32) -> altv_wasm_shared::natives_result::ResultOfVehicleSetParachuteModelTintIndex {
    crate::__imports::native_vehicle_set_parachute_model_tint_index(vehicle,
texture_variation)
}
pub fn is_vehicle_in_submarine_mode(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleInSubmarineMode {
    crate::__imports::native_is_vehicle_in_submarine_mode(vehicle)
}
pub fn get_vehicle_max_number_of_passengers(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleMaxNumberOfPassengers {
    crate::__imports::native_get_vehicle_max_number_of_passengers(vehicle)
}
pub fn set_can_adjust_ground_clearance(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetCanAdjustGroundClearance {
    crate::__imports::native_set_can_adjust_ground_clearance(vehicle,
p1)
}
pub fn get_is_right_vehicle_headlight_damaged(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetIsRightVehicleHeadlightDamaged {
    crate::__imports::native_get_is_right_vehicle_headlight_damaged(vehicle)
}
pub fn get_vehicle_enveff_scale(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleEnveffScale {
    crate::__imports::native_get_vehicle_enveff_scale(vehicle)
}
pub fn get_vehicle_can_deploy_parachute(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleCanDeployParachute {
    crate::__imports::native_get_vehicle_can_deploy_parachute(vehicle)
}
pub fn is_vehicle_visible(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleVisible {
    crate::__imports::native_is_vehicle_visible(vehicle)
}
pub fn set_train_speed(train: u32,
speed: f32) -> altv_wasm_shared::natives_result::ResultOfSetTrainSpeed {
    crate::__imports::native_set_train_speed(train,
speed)
}
pub fn clear_vehicle_phone_explosive_device() -> altv_wasm_shared::natives_result::ResultOfClearVehiclePhoneExplosiveDevice {
    crate::__imports::native_clear_vehicle_phone_explosive_device()
}
pub fn set_dip_straight_down_when_crashing_plane(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDipStraightDownWhenCrashingPlane {
    crate::__imports::native_set_dip_straight_down_when_crashing_plane(vehicle,
toggle)
}
pub fn set_vehicle_not_stealable_ambiently(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleNotStealableAmbiently {
    crate::__imports::native_set_vehicle_not_stealable_ambiently(vehicle,
p1)
}
pub fn set_goon_boss_vehicle(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetGoonBossVehicle {
    crate::__imports::native_set_goon_boss_vehicle(vehicle,
toggle)
}
pub fn set_vehicle_forward_speed(vehicle: u32,
speed: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleForwardSpeed {
    crate::__imports::native_set_vehicle_forward_speed(vehicle,
speed)
}
pub fn skip_to_end_and_stop_playback_recorded_vehicle(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfSkipToEndAndStopPlaybackRecordedVehicle {
    crate::__imports::native_skip_to_end_and_stop_playback_recorded_vehicle(vehicle)
}
pub fn is_this_model_a_train(model: u32) -> altv_wasm_shared::natives_result::ResultOfIsThisModelAtrain {
    crate::__imports::native_is_this_model_a_train(model)
}
pub fn get_heli_tail_boom_health(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetHeliTailBoomHealth {
    crate::__imports::native_get_heli_tail_boom_health(vehicle)
}
pub fn remove_vehicle_asset(vehicle_asset: i32) -> altv_wasm_shared::natives_result::ResultOfRemoveVehicleAsset {
    crate::__imports::native_remove_vehicle_asset(vehicle_asset)
}
pub fn set_last_driven_vehicle(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfSetLastDrivenVehicle {
    crate::__imports::native_set_last_driven_vehicle(vehicle)
}
pub fn set_plane_turbulence_multiplier(vehicle: u32,
multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetPlaneTurbulenceMultiplier {
    crate::__imports::native_set_plane_turbulence_multiplier(vehicle,
multiplier)
}
pub fn is_mission_train(train: u32) -> altv_wasm_shared::natives_result::ResultOfIsMissionTrain {
    crate::__imports::native_is_mission_train(train)
}
pub fn get_vehicle_max_braking(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleMaxBraking {
    crate::__imports::native_get_vehicle_max_braking(vehicle)
}
pub fn detach_vehicle_from_any_cargobob(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfDetachVehicleFromAnyCargobob {
    crate::__imports::native_detach_vehicle_from_any_cargobob(vehicle)
}
pub fn get_is_vehicle_engine_running(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetIsVehicleEngineRunning {
    crate::__imports::native_get_is_vehicle_engine_running(vehicle)
}
pub fn hide_tombstone(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfHideTombstone {
    crate::__imports::native_hide_tombstone(vehicle,
toggle)
}
pub fn get_heli_tail_rotor_health(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetHeliTailRotorHealth {
    crate::__imports::native_get_heli_tail_rotor_health(vehicle)
}
pub fn is_playback_using_ai_going_on_for_vehicle(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsPlaybackUsingAiGoingOnForVehicle {
    crate::__imports::native_is_playback_using_ai_going_on_for_vehicle(vehicle)
}
pub fn are_folding_wings_deployed(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfAreFoldingWingsDeployed {
    crate::__imports::native_are_folding_wings_deployed(vehicle)
}
pub fn detach_entity_from_cargobob(cargobob: u32,
entity: u32) -> altv_wasm_shared::natives_result::ResultOfDetachEntityFromCargobob {
    crate::__imports::native_detach_entity_from_cargobob(cargobob,
entity)
}
pub fn create_vehicle(model_hash: u32,
x: f32,
y: f32,
z: f32,
heading: f32,
is_network: bool,
b_script_host_veh: bool,
p7: bool) -> altv_wasm_shared::natives_result::ResultOfCreateVehicle {
    crate::__imports::native_create_vehicle(model_hash,
x,
y,
z,
heading,
is_network,
b_script_host_veh,
p7)
}
pub fn request_vehicle_recording(recording: i32,
script: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRequestVehicleRecording {
    crate::__imports::native_request_vehicle_recording(recording,
script)
}
pub fn set_vehicle_disable_collision_upon_creation(vehicle: u32,
disable: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDisableCollisionUponCreation {
    crate::__imports::native_set_vehicle_disable_collision_upon_creation(vehicle,
disable)
}
pub fn set_vehicle_force_afterburner(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleForceAfterburner {
    crate::__imports::native_set_vehicle_force_afterburner(vehicle,
toggle)
}
pub fn set_disable_superdummy(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetDisableSuperdummy {
    crate::__imports::native_set_disable_superdummy(vehicle,
p1)
}
pub fn is_ped_exclusive_driver_of_vehicle(ped: u32,
vehicle: u32,
out_index: i32) -> altv_wasm_shared::natives_result::ResultOfIsPedExclusiveDriverOfVehicle {
    crate::__imports::native_is_ped_exclusive_driver_of_vehicle(ped,
vehicle,
out_index)
}
pub fn is_boat_anchored(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsBoatAnchored {
    crate::__imports::native_is_boat_anchored(vehicle)
}
pub fn is_vehicle_on_all_wheels(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleOnAllWheels {
    crate::__imports::native_is_vehicle_on_all_wheels(vehicle)
}
pub fn get_display_name_from_vehicle_model(model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetDisplayNameFromVehicleModel {
    crate::__imports::native_get_display_name_from_vehicle_model(model_hash)
}
pub fn set_deploy_folding_wings(vehicle: u32,
deploy: bool,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetDeployFoldingWings {
    crate::__imports::native_set_deploy_folding_wings(vehicle,
deploy,
p2)
}
pub fn allow_ambient_vehicles_to_avoid_adverse_conditions(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfAllowAmbientVehiclesToAvoidAdverseConditions {
    crate::__imports::native_allow_ambient_vehicles_to_avoid_adverse_conditions(vehicle)
}
pub fn set_force_low_lod_anchor_mode(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetForceLowLodAnchorMode {
    crate::__imports::native_set_force_low_lod_anchor_mode(vehicle,
p1)
}
pub fn get_last_driven_vehicle() -> altv_wasm_shared::natives_result::ResultOfGetLastDrivenVehicle {
    crate::__imports::native_get_last_driven_vehicle()
}
pub fn set_clear_freeze_waiting_on_collision_once_player_enters(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetClearFreezeWaitingOnCollisionOncePlayerEnters {
    crate::__imports::native_set_clear_freeze_waiting_on_collision_once_player_enters(vehicle,
toggle)
}
pub fn set_vehicle_light_multiplier(vehicle: u32,
multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleLightMultiplier {
    crate::__imports::native_set_vehicle_light_multiplier(vehicle,
multiplier)
}
pub fn get_vehicle_mod_variation(vehicle: u32,
mod_type: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleModVariation {
    crate::__imports::native_get_vehicle_mod_variation(vehicle,
mod_type)
}
pub fn set_random_vehicle_density_multiplier_this_frame(multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetRandomVehicleDensityMultiplierThisFrame {
    crate::__imports::native_set_random_vehicle_density_multiplier_this_frame(multiplier)
}
pub fn get_vehicle_wheel_type(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleWheelType {
    crate::__imports::native_get_vehicle_wheel_type(vehicle)
}
pub fn get_vehicle_mod_color1_name(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfGetVehicleModColor1Name {
    crate::__imports::native_get_vehicle_mod_color1_name(vehicle,
p1)
}
pub fn is_vehicle_stuck_on_roof(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleStuckOnRoof {
    crate::__imports::native_is_vehicle_stuck_on_roof(vehicle)
}
pub fn get_livery_name(vehicle: u32,
livery_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetLiveryName {
    crate::__imports::native_get_livery_name(vehicle,
livery_index)
}
pub fn get_random_vehicle_back_bumper_in_sphere(p0: f32,
p1: f32,
p2: f32,
p3: f32,
p4: i32,
p5: i32,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfGetRandomVehicleBackBumperInSphere {
    crate::__imports::native_get_random_vehicle_back_bumper_in_sphere(p0,
p1,
p2,
p3,
p4,
p5,
p6)
}
pub fn is_this_model_a_bike(model: u32) -> altv_wasm_shared::natives_result::ResultOfIsThisModelAbike {
    crate::__imports::native_is_this_model_a_bike(model)
}
pub fn set_vehicle_cheat_power_increase(vehicle: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleCheatPowerIncrease {
    crate::__imports::native_set_vehicle_cheat_power_increase(vehicle,
value)
}
pub fn set_vehicle_tyre_smoke_color(vehicle: u32,
r: i32,
g: i32,
b: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleTyreSmokeColor {
    crate::__imports::native_set_vehicle_tyre_smoke_color(vehicle,
r,
g,
b)
}
pub fn set_vehicle_exclusive_driver(vehicle: u32,
ped: u32,
index: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleExclusiveDriver {
    crate::__imports::native_set_vehicle_exclusive_driver(vehicle,
ped,
index)
}
pub fn is_vehicle_siren_audio_on(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleSirenAudioOn {
    crate::__imports::native_is_vehicle_siren_audio_on(vehicle)
}
pub fn set_vehicle_indicator_lights(vehicle: u32,
turn_signal: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleIndicatorLights {
    crate::__imports::native_set_vehicle_indicator_lights(vehicle,
turn_signal,
toggle)
}
pub fn get_vehicle_tyre_smoke_color(vehicle: u32,
r: i32,
g: i32,
b: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleTyreSmokeColor {
    crate::__imports::native_get_vehicle_tyre_smoke_color(vehicle,
r,
g,
b)
}
pub fn get_vehicle_custom_primary_colour(vehicle: u32,
r: i32,
g: i32,
b: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleCustomPrimaryColour {
    crate::__imports::native_get_vehicle_custom_primary_colour(vehicle,
r,
g,
b)
}
pub fn set_vehicle_doors_locked(vehicle: u32,
door_lock_status: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDoorsLocked {
    crate::__imports::native_set_vehicle_doors_locked(vehicle,
door_lock_status)
}
pub fn set_use_desired_z_cruise_speed_for_landing(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetUseDesiredZcruiseSpeedForLanding {
    crate::__imports::native_set_use_desired_z_cruise_speed_for_landing(vehicle,
toggle)
}
pub fn add_vehicle_upsidedown_check(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfAddVehicleUpsidedownCheck {
    crate::__imports::native_add_vehicle_upsidedown_check(vehicle)
}
pub fn get_vehicle_extra_colour6(vehicle: u32,
color: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleExtraColour6 {
    crate::__imports::native_get_vehicle_extra_colour6(vehicle,
color)
}
pub fn set_vehicle_body_health(vehicle: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleBodyHealth {
    crate::__imports::native_set_vehicle_body_health(vehicle,
value)
}
pub fn set_vehicle_doors_locked_for_team(vehicle: u32,
team: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDoorsLockedForTeam {
    crate::__imports::native_set_vehicle_doors_locked_for_team(vehicle,
team,
toggle)
}
pub fn set_task_vehicle_goto_plane_min_height_above_terrain(plane: u32,
height: i32) -> altv_wasm_shared::natives_result::ResultOfSetTaskVehicleGotoPlaneMinHeightAboveTerrain {
    crate::__imports::native_set_task_vehicle_goto_plane_min_height_above_terrain(plane,
height)
}
pub fn is_vehicle_door_damaged(veh: u32,
door_i_d: i32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleDoorDamaged {
    crate::__imports::native_is_vehicle_door_damaged(veh,
door_i_d)
}
pub fn get_vehicle_health_percentage(vehicle: u32,
max_engine_health: f32,
max_petrol_tank_health: f32,
max_body_health: f32,
max_main_rotor_health: f32,
max_tail_rotor_health: f32,
max_unk_health: f32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleHealthPercentage {
    crate::__imports::native_get_vehicle_health_percentage(vehicle,
max_engine_health,
max_petrol_tank_health,
max_body_health,
max_main_rotor_health,
max_tail_rotor_health,
max_unk_health)
}
pub fn set_vehicle_keep_engine_on_when_abandoned(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleKeepEngineOnWhenAbandoned {
    crate::__imports::native_set_vehicle_keep_engine_on_when_abandoned(vehicle,
toggle)
}
pub fn start_vehicle_alarm(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfStartVehicleAlarm {
    crate::__imports::native_start_vehicle_alarm(vehicle)
}
pub fn get_vehicle_lights_state(vehicle: u32,
lights_on: bool,
highbeams_on: bool) -> altv_wasm_shared::natives_result::ResultOfGetVehicleLightsState {
    crate::__imports::native_get_vehicle_lights_state(vehicle,
lights_on,
highbeams_on)
}
pub fn set_vehicle_neon_index_colour(vehicle: u32,
index: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleNeonIndexColour {
    crate::__imports::native_set_vehicle_neon_index_colour(vehicle,
index)
}
pub fn set_carjack_mission_removal_parameters(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetCarjackMissionRemovalParameters {
    crate::__imports::native_set_carjack_mission_removal_parameters(p0,
p1)
}
pub fn is_vehicle_tyre_burst(vehicle: u32,
wheel_i_d: i32,
completely: bool) -> altv_wasm_shared::natives_result::ResultOfIsVehicleTyreBurst {
    crate::__imports::native_is_vehicle_tyre_burst(vehicle,
wheel_i_d,
completely)
}
pub fn explode_vehicle(vehicle: u32,
is_audible: bool,
is_invisible: bool) -> altv_wasm_shared::natives_result::ResultOfExplodeVehicle {
    crate::__imports::native_explode_vehicle(vehicle,
is_audible,
is_invisible)
}
pub fn get_is_boat_capsized(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetIsBoatCapsized {
    crate::__imports::native_get_is_boat_capsized(vehicle)
}
pub fn set_vehicle_max_speed(vehicle: u32,
speed: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleMaxSpeed {
    crate::__imports::native_set_vehicle_max_speed(vehicle,
speed)
}
pub fn set_vehicle_uses_mp_player_damage_multiplier(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleUsesMpPlayerDamageMultiplier {
    crate::__imports::native_set_vehicle_uses_mp_player_damage_multiplier(p0,
p1)
}
pub fn get_ped_in_vehicle_seat(vehicle: u32,
seat_index: i32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfGetPedInVehicleSeat {
    crate::__imports::native_get_ped_in_vehicle_seat(vehicle,
seat_index,
p2)
}
pub fn set_mission_train_as_no_longer_needed(train: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetMissionTrainAsNoLongerNeeded {
    crate::__imports::native_set_mission_train_as_no_longer_needed(train,
p1)
}
pub fn set_vehicle_interiorlight(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleInteriorlight {
    crate::__imports::native_set_vehicle_interiorlight(vehicle,
toggle)
}
pub fn set_lights_cutoff_distance_tweak(distance: f32) -> altv_wasm_shared::natives_result::ResultOfSetLightsCutoffDistanceTweak {
    crate::__imports::native_set_lights_cutoff_distance_tweak(distance)
}
pub fn is_heli_part_broken(vehicle: u32,
p1: bool,
p2: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfIsHeliPartBroken {
    crate::__imports::native_is_heli_part_broken(vehicle,
p1,
p2,
p3)
}
pub fn get_vehicle_has_parachute(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleHasParachute {
    crate::__imports::native_get_vehicle_has_parachute(vehicle)
}
pub fn set_cargobob_pickup_magnet_strength(cargobob: u32,
strength: f32) -> altv_wasm_shared::natives_result::ResultOfSetCargobobPickupMagnetStrength {
    crate::__imports::native_set_cargobob_pickup_magnet_strength(cargobob,
strength)
}
pub fn get_does_vehicle_have_damage_decals(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetDoesVehicleHaveDamageDecals {
    crate::__imports::native_get_does_vehicle_have_damage_decals(vehicle)
}
pub fn set_players_last_vehicle(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfSetPlayersLastVehicle {
    crate::__imports::native_set_players_last_vehicle(vehicle)
}
pub fn set_boat_wrecked(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfSetBoatWrecked {
    crate::__imports::native_set_boat_wrecked(vehicle)
}
pub fn transform_to_submarine(vehicle: u32,
no_animation: bool) -> altv_wasm_shared::natives_result::ResultOfTransformToSubmarine {
    crate::__imports::native_transform_to_submarine(vehicle,
no_animation)
}
pub fn set_vehicle_will_force_other_vehicles_to_stop(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleWillForceOtherVehiclesToStop {
    crate::__imports::native_set_vehicle_will_force_other_vehicles_to_stop(vehicle,
toggle)
}
pub fn set_vehicle_individual_doors_locked(vehicle: u32,
door_id: i32,
door_lock_status: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleIndividualDoorsLocked {
    crate::__imports::native_set_vehicle_individual_doors_locked(vehicle,
door_id,
door_lock_status)
}
pub fn is_this_model_a_bicycle(model: u32) -> altv_wasm_shared::natives_result::ResultOfIsThisModelAbicycle {
    crate::__imports::native_is_this_model_a_bicycle(model)
}
pub fn get_vehicle_model_max_braking_max_mods(model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleModelMaxBrakingMaxMods {
    crate::__imports::native_get_vehicle_model_max_braking_max_mods(model_hash)
}
pub fn set_vehicle_name_debug(vehicle: u32,
name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfSetVehicleNameDebug {
    crate::__imports::native_set_vehicle_name_debug(vehicle,
name)
}
pub fn get_entry_point_position(vehicle: u32,
door_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetEntryPointPosition {
    crate::__imports::native_get_entry_point_position(vehicle,
door_id)
}
pub fn set_pickup_rope_length_without_creating_rope_for_cargobob(p0: i32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfSetPickupRopeLengthWithoutCreatingRopeForCargobob {
    crate::__imports::native_set_pickup_rope_length_without_creating_rope_for_cargobob(p0,
p1,
p2)
}
pub fn is_vehicle_searchlight_on(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleSearchlightOn {
    crate::__imports::native_is_vehicle_searchlight_on(vehicle)
}
pub fn set_all_vehicle_generators_active_in_area(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
toggle: bool,
p7: bool) -> altv_wasm_shared::natives_result::ResultOfSetAllVehicleGeneratorsActiveInArea {
    crate::__imports::native_set_all_vehicle_generators_active_in_area(x1,
y1,
z1,
x2,
y2,
z2,
toggle,
p7)
}
pub fn swing_boat_boom_freely(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSwingBoatBoomFreely {
    crate::__imports::native_swing_boat_boom_freely(vehicle,
toggle)
}
pub fn set_hydraulic_wheel_state(vehicle: u32,
wheel_id: i32,
state: i32,
value: f32,
p4: i32) -> altv_wasm_shared::natives_result::ResultOfSetHydraulicWheelState {
    crate::__imports::native_set_hydraulic_wheel_state(vehicle,
wheel_id,
state,
value,
p4)
}
pub fn detach_vehicle_from_tow_truck(tow_truck: u32,
vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfDetachVehicleFromTowTruck {
    crate::__imports::native_detach_vehicle_from_tow_truck(tow_truck,
vehicle)
}
pub fn set_vehicle_broken_parts_dont_affect_ai_handling(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleBrokenPartsDontAffectAiHandling {
    crate::__imports::native_set_vehicle_broken_parts_dont_affect_ai_handling(vehicle,
p1)
}
pub fn set_vehicle_use_player_light_settings(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleUsePlayerLightSettings {
    crate::__imports::native_set_vehicle_use_player_light_settings(vehicle,
toggle)
}
pub fn get_vehicle_engine_health(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleEngineHealth {
    crate::__imports::native_get_vehicle_engine_health(vehicle)
}
pub fn set_vehicle_remove_aggressive_carjack_mission(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleRemoveAggressiveCarjackMission {
    crate::__imports::native_set_vehicle_remove_aggressive_carjack_mission(p0)
}
pub fn set_vehicle_limit_speed_when_player_inactive(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleLimitSpeedWhenPlayerInactive {
    crate::__imports::native_set_vehicle_limit_speed_when_player_inactive(vehicle,
toggle)
}
pub fn remove_vehicle_upsidedown_check(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfRemoveVehicleUpsidedownCheck {
    crate::__imports::native_remove_vehicle_upsidedown_check(vehicle)
}
pub fn get_random_vehicle_front_bumper_in_sphere(p0: f32,
p1: f32,
p2: f32,
p3: f32,
p4: i32,
p5: i32,
p6: i32) -> altv_wasm_shared::natives_result::ResultOfGetRandomVehicleFrontBumperInSphere {
    crate::__imports::native_get_random_vehicle_front_bumper_in_sphere(p0,
p1,
p2,
p3,
p4,
p5,
p6)
}
pub fn set_submarine_crush_depths(vehicle: u32,
p1: bool,
depth1: f32,
depth2: f32,
depth3: f32) -> altv_wasm_shared::natives_result::ResultOfSetSubmarineCrushDepths {
    crate::__imports::native_set_submarine_crush_depths(vehicle,
p1,
depth1,
depth2,
depth3)
}
pub fn set_turret_hidden(vehicle: u32,
index: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetTurretHidden {
    crate::__imports::native_set_turret_hidden(vehicle,
index,
toggle)
}
pub fn force_submarine_neurtal_buoyancy(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfForceSubmarineNeurtalBuoyancy {
    crate::__imports::native_force_submarine_neurtal_buoyancy(p0,
p1)
}
pub fn is_vehicle_being_brought_to_halt(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleBeingBroughtToHalt {
    crate::__imports::native_is_vehicle_being_brought_to_halt(vehicle)
}
pub fn get_flying_vehicle_model_agility(model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetFlyingVehicleModelAgility {
    crate::__imports::native_get_flying_vehicle_model_agility(model_hash)
}
pub fn set_override_nitrous_level(vehicle: u32,
toggle: bool,
level: f32,
power: f32,
recharge_time: f32,
disable_sound: bool) -> altv_wasm_shared::natives_result::ResultOfSetOverrideNitrousLevel {
    crate::__imports::native_set_override_nitrous_level(vehicle,
toggle,
level,
power,
recharge_time,
disable_sound)
}
pub fn set_tyre_maximum_grip_difference_due_to_wear_rate(vehicle: u32,
wheel_index: i32,
multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetTyreMaximumGripDifferenceDueToWearRate {
    crate::__imports::native_set_tyre_maximum_grip_difference_due_to_wear_rate(vehicle,
wheel_index,
multiplier)
}
pub fn get_vehicle_individual_door_lock_status(vehicle: u32,
door_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleIndividualDoorLockStatus {
    crate::__imports::native_get_vehicle_individual_door_lock_status(vehicle,
door_id)
}
pub fn set_number_of_parked_vehicles(value: i32) -> altv_wasm_shared::natives_result::ResultOfSetNumberOfParkedVehicles {
    crate::__imports::native_set_number_of_parked_vehicles(value)
}
pub fn set_vehicle_uses_large_rear_ramp(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleUsesLargeRearRamp {
    crate::__imports::native_set_vehicle_uses_large_rear_ramp(vehicle,
toggle)
}
pub fn get_attached_pick_up_hook_position(cargobob: u32) -> altv_wasm_shared::natives_result::ResultOfGetAttachedPickUpHookPosition {
    crate::__imports::native_get_attached_pick_up_hook_position(cargobob)
}
pub fn set_vehicle_alarm(vehicle: u32,
state: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleAlarm {
    crate::__imports::native_set_vehicle_alarm(vehicle,
state)
}
pub fn set_disable_vertical_flight_mode_transition(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDisableVerticalFlightModeTransition {
    crate::__imports::native_set_disable_vertical_flight_mode_transition(vehicle,
toggle)
}
pub fn is_vehicle_in_garage_area(garage_name: Option<&String>,
vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleInGarageArea {
    crate::__imports::native_is_vehicle_in_garage_area(garage_name,
vehicle)
}
pub fn set_cargobob_pickup_rope_damping_multiplier(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetCargobobPickupRopeDampingMultiplier {
    crate::__imports::native_set_cargobob_pickup_rope_damping_multiplier(p0,
p1)
}
pub fn set_vehicle_ready_for_cleanup(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleReadyForCleanup {
    crate::__imports::native_set_vehicle_ready_for_cleanup(p0)
}
pub fn control_landing_gear(vehicle: u32,
state: i32) -> altv_wasm_shared::natives_result::ResultOfControlLandingGear {
    crate::__imports::native_control_landing_gear(vehicle,
state)
}
pub fn lock_doors_when_no_longer_needed(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfLockDoorsWhenNoLongerNeeded {
    crate::__imports::native_lock_doors_when_no_longer_needed(vehicle)
}
pub fn get_are_bomb_bay_doors_open(aircraft: u32) -> altv_wasm_shared::natives_result::ResultOfGetAreBombBayDoorsOpen {
    crate::__imports::native_get_are_bomb_bay_doors_open(aircraft)
}
pub fn detach_vehicle_from_any_tow_truck(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfDetachVehicleFromAnyTowTruck {
    crate::__imports::native_detach_vehicle_from_any_tow_truck(vehicle)
}
pub fn set_special_flight_mode_ratio(vehicle: u32,
ratio: f32) -> altv_wasm_shared::natives_result::ResultOfSetSpecialFlightModeRatio {
    crate::__imports::native_set_special_flight_mode_ratio(vehicle,
ratio)
}
pub fn get_position_of_vehicle_recording_at_time(recording: i32,
time: f32,
script: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetPositionOfVehicleRecordingAtTime {
    crate::__imports::native_get_position_of_vehicle_recording_at_time(recording,
time,
script)
}
pub fn is_vehicle_extra_turned_on(vehicle: u32,
extra_id: i32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleExtraTurnedOn {
    crate::__imports::native_is_vehicle_extra_turned_on(vehicle,
extra_id)
}
pub fn set_vehicle_avoid_player_vehicle_riot_van_mission(p0: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleAvoidPlayerVehicleRiotVanMission {
    crate::__imports::native_set_vehicle_avoid_player_vehicle_riot_van_mission(p0)
}
pub fn vehicle_set_override_side_ratio(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfVehicleSetOverrideSideRatio {
    crate::__imports::native_vehicle_set_override_side_ratio(p0,
p1)
}
pub fn is_vehicle_attached_to_cargobob(cargobob: u32,
vehicle_attached: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleAttachedToCargobob {
    crate::__imports::native_is_vehicle_attached_to_cargobob(cargobob,
vehicle_attached)
}
pub fn set_disable_damage_with_picked_up_entity(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetDisableDamageWithPickedUpEntity {
    crate::__imports::native_set_disable_damage_with_picked_up_entity(p0,
p1)
}
pub fn set_disable_random_trains_this_frame(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDisableRandomTrainsThisFrame {
    crate::__imports::native_set_disable_random_trains_this_frame(toggle)
}
pub fn get_vehicle_is_mercenary(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleIsMercenary {
    crate::__imports::native_get_vehicle_is_mercenary(vehicle)
}
pub fn set_vehicle_door_broken(vehicle: u32,
door_id: i32,
delete_door: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDoorBroken {
    crate::__imports::native_set_vehicle_door_broken(vehicle,
door_id,
delete_door)
}
pub fn set_vehicle_explodes_on_explosion_damage_at_zero_body_health(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleExplodesOnExplosionDamageAtZeroBodyHealth {
    crate::__imports::native_set_vehicle_explodes_on_explosion_damage_at_zero_body_health(vehicle,
toggle)
}
pub fn reset_vehicle_stuck_timer(vehicle: u32,
null_attributes: i32) -> altv_wasm_shared::natives_result::ResultOfResetVehicleStuckTimer {
    crate::__imports::native_reset_vehicle_stuck_timer(vehicle,
null_attributes)
}
pub fn set_vehicle_has_muted_sirens(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleHasMutedSirens {
    crate::__imports::native_set_vehicle_has_muted_sirens(vehicle,
toggle)
}
pub fn set_script_vehicle_generator(vehicle_generator: i32,
enabled: bool) -> altv_wasm_shared::natives_result::ResultOfSetScriptVehicleGenerator {
    crate::__imports::native_set_script_vehicle_generator(vehicle_generator,
enabled)
}
pub fn set_random_boats_mp(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetRandomBoatsMp {
    crate::__imports::native_set_random_boats_mp(toggle)
}
pub fn get_vehicle_flight_nozzle_position(plane: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleFlightNozzlePosition {
    crate::__imports::native_get_vehicle_flight_nozzle_position(plane)
}
pub fn request_vehicle_dial(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfRequestVehicleDial {
    crate::__imports::native_request_vehicle_dial(vehicle)
}
pub fn set_dont_allow_player_to_enter_vehicle_if_locked_for_player(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetDontAllowPlayerToEnterVehicleIfLockedForPlayer {
    crate::__imports::native_set_dont_allow_player_to_enter_vehicle_if_locked_for_player(vehicle,
p1)
}
pub fn get_vehicle_class_max_traction(vehicle_class: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleClassMaxTraction {
    crate::__imports::native_get_vehicle_class_max_traction(vehicle_class)
}
pub fn get_vehicle_model_max_braking(model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleModelMaxBraking {
    crate::__imports::native_get_vehicle_model_max_braking(model_hash)
}
pub fn get_has_retractable_wheels(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetHasRetractableWheels {
    crate::__imports::native_get_has_retractable_wheels(vehicle)
}
pub fn is_this_model_a_heli(model: u32) -> altv_wasm_shared::natives_result::ResultOfIsThisModelAheli {
    crate::__imports::native_is_this_model_a_heli(model)
}
pub fn set_vehicle_steer_for_buildings(vehicle: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleSteerForBuildings {
    crate::__imports::native_set_vehicle_steer_for_buildings(vehicle,
p1)
}
pub fn lower_convertible_roof(vehicle: u32,
instantly_lower: bool) -> altv_wasm_shared::natives_result::ResultOfLowerConvertibleRoof {
    crate::__imports::native_lower_convertible_roof(vehicle,
instantly_lower)
}
pub fn get_vehicle_class_from_name(model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleClassFromName {
    crate::__imports::native_get_vehicle_class_from_name(model_hash)
}
pub fn get_vehicle_size(vehicle: u32,
out1: Option<&shared::Vector3>,
out2: Option<&shared::Vector3>) -> altv_wasm_shared::natives_result::ResultOfGetVehicleSize {
    crate::__imports::native_get_vehicle_size(vehicle,
out1,
out2)
}
pub fn set_vehicle_active_during_playback(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleActiveDuringPlayback {
    crate::__imports::native_set_vehicle_active_during_playback(vehicle,
toggle)
}
pub fn set_script_rocket_boost_recharge_time(vehicle: u32,
seconds: f32) -> altv_wasm_shared::natives_result::ResultOfSetScriptRocketBoostRechargeTime {
    crate::__imports::native_set_script_rocket_boost_recharge_time(vehicle,
seconds)
}
pub fn clear_last_driven_vehicle() -> altv_wasm_shared::natives_result::ResultOfClearLastDrivenVehicle {
    crate::__imports::native_clear_last_driven_vehicle()
}
pub fn set_vehicle_use_cutscene_wheel_compression(p0: u32,
p1: bool,
p2: bool,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleUseCutsceneWheelCompression {
    crate::__imports::native_set_vehicle_use_cutscene_wheel_compression(p0,
p1,
p2,
p3)
}
pub fn set_vehicle_used_for_pilot_school(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleUsedForPilotSchool {
    crate::__imports::native_set_vehicle_used_for_pilot_school(vehicle,
toggle)
}
pub fn set_plane_resist_to_explosion(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlaneResistToExplosion {
    crate::__imports::native_set_plane_resist_to_explosion(vehicle,
toggle)
}
pub fn reset_formation_leader() -> altv_wasm_shared::natives_result::ResultOfResetFormationLeader {
    crate::__imports::native_reset_formation_leader()
}
pub fn set_cargobob_pickup_magnet_set_targeted_mode(vehicle: u32,
cargobob: u32) -> altv_wasm_shared::natives_result::ResultOfSetCargobobPickupMagnetSetTargetedMode {
    crate::__imports::native_set_cargobob_pickup_magnet_set_targeted_mode(vehicle,
cargobob)
}
pub fn remove_vehicle_combat_avoidance_area(p0: i32) -> altv_wasm_shared::natives_result::ResultOfRemoveVehicleCombatAvoidanceArea {
    crate::__imports::native_remove_vehicle_combat_avoidance_area(p0)
}
pub fn is_turret_seat(vehicle: u32,
seat_index: i32) -> altv_wasm_shared::natives_result::ResultOfIsTurretSeat {
    crate::__imports::native_is_turret_seat(vehicle,
seat_index)
}
pub fn pop_off_vehicle_roof_with_impulse(vehicle: u32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfPopOffVehicleRoofWithImpulse {
    crate::__imports::native_pop_off_vehicle_roof_with_impulse(vehicle,
x,
y,
z)
}
pub fn get_num_vehicle_mods(vehicle: u32,
mod_type: i32) -> altv_wasm_shared::natives_result::ResultOfGetNumVehicleMods {
    crate::__imports::native_get_num_vehicle_mods(vehicle,
mod_type)
}
pub fn set_boat_remains_anchored_while_player_is_driver(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetBoatRemainsAnchoredWhilePlayerIsDriver {
    crate::__imports::native_set_boat_remains_anchored_while_player_is_driver(vehicle,
toggle)
}
pub fn set_vehicle_xenon_light_color_index(vehicle: u32,
color_index: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleXenonLightColorIndex {
    crate::__imports::native_set_vehicle_xenon_light_color_index(vehicle,
color_index)
}
pub fn get_vehicle_has_landing_gear(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleHasLandingGear {
    crate::__imports::native_get_vehicle_has_landing_gear(vehicle)
}
pub fn copy_vehicle_damages(source_vehicle: u32,
target_vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfCopyVehicleDamages {
    crate::__imports::native_copy_vehicle_damages(source_vehicle,
target_vehicle)
}
pub fn get_vehicle_cause_of_destruction(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleCauseOfDestruction {
    crate::__imports::native_get_vehicle_cause_of_destruction(vehicle)
}
pub fn get_heli_main_rotor_health(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetHeliMainRotorHealth {
    crate::__imports::native_get_heli_main_rotor_health(vehicle)
}
pub fn set_vehicle_brake(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleBrake {
    crate::__imports::native_set_vehicle_brake(vehicle,
toggle)
}
pub fn set_aircraft_pilot_skill_noise_scalar(vehicle: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetAircraftPilotSkillNoiseScalar {
    crate::__imports::native_set_aircraft_pilot_skill_noise_scalar(vehicle,
p1)
}
pub fn set_disable_turret_movement(vehicle: u32,
turret_id: i32) -> altv_wasm_shared::natives_result::ResultOfSetDisableTurretMovement {
    crate::__imports::native_set_disable_turret_movement(vehicle,
turret_id)
}
pub fn get_vehicle_homing_lockon_state(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleHomingLockonState {
    crate::__imports::native_get_vehicle_homing_lockon_state(vehicle)
}
pub fn set_enable_vehicle_slipstreaming(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetEnableVehicleSlipstreaming {
    crate::__imports::native_set_enable_vehicle_slipstreaming(toggle)
}
pub fn set_heli_turbulence_scalar(vehicle: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetHeliTurbulenceScalar {
    crate::__imports::native_set_heli_turbulence_scalar(vehicle,
p1)
}
pub fn is_vehicle_attached_to_trailer(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfIsVehicleAttachedToTrailer {
    crate::__imports::native_is_vehicle_attached_to_trailer(vehicle)
}
pub fn set_boat_low_lod_anchor_distance(vehicle: u32,
value: f32) -> altv_wasm_shared::natives_result::ResultOfSetBoatLowLodAnchorDistance {
    crate::__imports::native_set_boat_low_lod_anchor_distance(vehicle,
value)
}
pub fn set_vehicle_may_be_used_by_goto_point_any_means(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleMayBeUsedByGotoPointAnyMeans {
    crate::__imports::native_set_vehicle_may_be_used_by_goto_point_any_means(vehicle,
p1)
}
pub fn get_has_vehicle_been_hit_by_shunt(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetHasVehicleBeenHitByShunt {
    crate::__imports::native_get_has_vehicle_been_hit_by_shunt(vehicle)
}
pub fn get_vehicle_mod_color1(vehicle: u32,
paint_type: i32,
color: i32,
pearlescent_color: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleModColor1 {
    crate::__imports::native_get_vehicle_mod_color1(vehicle,
paint_type,
color,
pearlescent_color)
}
pub fn get_vehicle_bomb_ammo(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleBombAmmo {
    crate::__imports::native_get_vehicle_bomb_ammo(vehicle)
}
pub fn delete_vehicle(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfDeleteVehicle {
    crate::__imports::native_delete_vehicle(vehicle)
}
pub fn set_parked_vehicle_density_multiplier_this_frame(multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetParkedVehicleDensityMultiplierThisFrame {
    crate::__imports::native_set_parked_vehicle_density_multiplier_this_frame(multiplier)
}
pub fn set_vehicle_tyres_can_burst(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleTyresCanBurst {
    crate::__imports::native_set_vehicle_tyres_can_burst(vehicle,
toggle)
}
pub fn network_use_high_precision_train_blending(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfNetworkUseHighPrecisionTrainBlending {
    crate::__imports::native_network_use_high_precision_train_blending(vehicle,
toggle)
}
pub fn get_both_vehicle_headlights_damaged(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetBothVehicleHeadlightsDamaged {
    crate::__imports::native_get_both_vehicle_headlights_damaged(vehicle)
}
pub fn set_vehicle_tyre_burst(vehicle: u32,
index: i32,
on_rim: bool,
p3: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleTyreBurst {
    crate::__imports::native_set_vehicle_tyre_burst(vehicle,
index,
on_rim,
p3)
}
pub fn set_boat_ignore_land_probes(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetBoatIgnoreLandProbes {
    crate::__imports::native_set_boat_ignore_land_probes(p0,
p1)
}
pub fn set_cargobob_pickup_magnet_pull_strength(cargobob: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetCargobobPickupMagnetPullStrength {
    crate::__imports::native_set_cargobob_pickup_magnet_pull_strength(cargobob,
p1)
}
pub fn set_disable_heli_explode_from_body_damage(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetDisableHeliExplodeFromBodyDamage {
    crate::__imports::native_set_disable_heli_explode_from_body_damage(p0,
p1)
}
pub fn get_vehicle_colours_which_can_be_set(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleColoursWhichCanBeSet {
    crate::__imports::native_get_vehicle_colours_which_can_be_set(vehicle)
}
pub fn detonate_vehicle_phone_explosive_device() -> altv_wasm_shared::natives_result::ResultOfDetonateVehiclePhoneExplosiveDevice {
    crate::__imports::native_detonate_vehicle_phone_explosive_device()
}
pub fn set_check_for_enough_room_for_ped(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetCheckForEnoughRoomForPed {
    crate::__imports::native_set_check_for_enough_room_for_ped(vehicle,
p1)
}
pub fn set_script_ramp_impulse_scale(vehicle: u32,
impulse_scale: f32) -> altv_wasm_shared::natives_result::ResultOfSetScriptRampImpulseScale {
    crate::__imports::native_set_script_ramp_impulse_scale(vehicle,
impulse_scale)
}
pub fn get_entity_attached_to_tow_truck(tow_truck: u32) -> altv_wasm_shared::natives_result::ResultOfGetEntityAttachedToTowTruck {
    crate::__imports::native_get_entity_attached_to_tow_truck(tow_truck)
}
pub fn set_vehicle_slipstreaming_should_time_out(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleSlipstreamingShouldTimeOut {
    crate::__imports::native_set_vehicle_slipstreaming_should_time_out(toggle)
}
pub fn set_use_higher_car_jump(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetUseHigherCarJump {
    crate::__imports::native_set_use_higher_car_jump(vehicle,
toggle)
}
pub fn get_is_vehicle_primary_colour_custom(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetIsVehiclePrimaryColourCustom {
    crate::__imports::native_get_is_vehicle_primary_colour_custom(vehicle)
}
pub fn disable_vehcile_dynamic_ambient_scales(vehicle: u32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfDisableVehcileDynamicAmbientScales {
    crate::__imports::native_disable_vehcile_dynamic_ambient_scales(vehicle,
p1,
p2)
}
pub fn get_rotation_of_vehicle_recording_id_at_time(id: i32,
time: f32) -> altv_wasm_shared::natives_result::ResultOfGetRotationOfVehicleRecordingIdAtTime {
    crate::__imports::native_get_rotation_of_vehicle_recording_id_at_time(id,
time)
}
pub fn remove_vehicle_recording(recording: i32,
script: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfRemoveVehicleRecording {
    crate::__imports::native_remove_vehicle_recording(recording,
script)
}
pub fn get_vehicle_number_plate_text_index(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleNumberPlateTextIndex {
    crate::__imports::native_get_vehicle_number_plate_text_index(vehicle)
}
pub fn set_special_flight_mode_allowed(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetSpecialFlightModeAllowed {
    crate::__imports::native_set_special_flight_mode_allowed(vehicle,
toggle)
}
pub fn set_vehicle_out_of_control(vehicle: u32,
kill_driver: bool,
explode_on_impact: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleOutOfControl {
    crate::__imports::native_set_vehicle_out_of_control(vehicle,
kill_driver,
explode_on_impact)
}
pub fn disable_vehicle_explosion_break_off_parts() -> altv_wasm_shared::natives_result::ResultOfDisableVehicleExplosionBreakOffParts {
    crate::__imports::native_disable_vehicle_explosion_break_off_parts()
}
pub fn get_vehicle_body_health(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleBodyHealth {
    crate::__imports::native_get_vehicle_body_health(vehicle)
}
pub fn set_vehicle_door_control(vehicle: u32,
door_id: i32,
speed: i32,
angle: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleDoorControl {
    crate::__imports::native_set_vehicle_door_control(vehicle,
door_id,
speed,
angle)
}
pub fn set_convertible_roof(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfSetConvertibleRoof {
    crate::__imports::native_set_convertible_roof(vehicle,
p1)
}
pub fn vehicle_set_extenable_side_target_ratio(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfVehicleSetExtenableSideTargetRatio {
    crate::__imports::native_vehicle_set_extenable_side_target_ratio(p0,
p1)
}
pub fn get_vehicle_color(vehicle: u32,
r: i32,
g: i32,
b: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleColor {
    crate::__imports::native_get_vehicle_color(vehicle,
r,
g,
b)
}
pub fn set_vehicle_extra_colour5(vehicle: u32,
color: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleExtraColour5 {
    crate::__imports::native_set_vehicle_extra_colour5(vehicle,
color)
}
pub fn get_vehicle_model_estimated_max_speed(model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleModelEstimatedMaxSpeed {
    crate::__imports::native_get_vehicle_model_estimated_max_speed(model_hash)
}
pub fn swing_boat_boom_to_ratio(vehicle: u32,
ratio: f32) -> altv_wasm_shared::natives_result::ResultOfSwingBoatBoomToRatio {
    crate::__imports::native_swing_boat_boom_to_ratio(vehicle,
ratio)
}
pub fn set_vehicle_siren(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleSiren {
    crate::__imports::native_set_vehicle_siren(vehicle,
toggle)
}
pub fn set_vehicle_bomb_ammo(vehicle: u32,
bomb_count: i32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleBombAmmo {
    crate::__imports::native_set_vehicle_bomb_ammo(vehicle,
bomb_count)
}
pub fn disable_vehicle_weapon(disabled: bool,
weapon_hash: u32,
vehicle: u32,
owner: u32) -> altv_wasm_shared::natives_result::ResultOfDisableVehicleWeapon {
    crate::__imports::native_disable_vehicle_weapon(disabled,
weapon_hash,
vehicle,
owner)
}
pub fn does_script_vehicle_generator_exist(vehicle_generator: i32) -> altv_wasm_shared::natives_result::ResultOfDoesScriptVehicleGeneratorExist {
    crate::__imports::native_does_script_vehicle_generator_exist(vehicle_generator)
}
pub fn set_wheels_extended_instantly(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfSetWheelsExtendedInstantly {
    crate::__imports::native_set_wheels_extended_instantly(vehicle)
}
pub fn get_vehicle_doors_locked_for_player(vehicle: u32,
player: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleDoorsLockedForPlayer {
    crate::__imports::native_get_vehicle_doors_locked_for_player(vehicle,
player)
}
pub fn get_closest_vehicle(x: f32,
y: f32,
z: f32,
radius: f32,
model_hash: u32,
flags: i32) -> altv_wasm_shared::natives_result::ResultOfGetClosestVehicle {
    crate::__imports::native_get_closest_vehicle(x,
y,
z,
radius,
model_hash,
flags)
}
pub fn are_plane_control_panels_intact(vehicle: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfArePlaneControlPanelsIntact {
    crate::__imports::native_are_plane_control_panels_intact(vehicle,
p1)
}
pub fn set_distant_cars_enabled(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetDistantCarsEnabled {
    crate::__imports::native_set_distant_cars_enabled(toggle)
}
pub fn get_make_name_from_vehicle_model(model_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetMakeNameFromVehicleModel {
    crate::__imports::native_get_make_name_from_vehicle_model(model_hash)
}
pub fn set_vehicle_is_wanted(vehicle: u32,
state: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleIsWanted {
    crate::__imports::native_set_vehicle_is_wanted(vehicle,
state)
}
pub fn is_seat_warp_only(vehicle: u32,
seat_index: i32) -> altv_wasm_shared::natives_result::ResultOfIsSeatWarpOnly {
    crate::__imports::native_is_seat_warp_only(vehicle,
seat_index)
}
pub fn get_vehicle_countermeasure_ammo(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleCountermeasureAmmo {
    crate::__imports::native_get_vehicle_countermeasure_ammo(vehicle)
}
pub fn enable_vehicle_dynamic_ambient_scales(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfEnableVehicleDynamicAmbientScales {
    crate::__imports::native_enable_vehicle_dynamic_ambient_scales(vehicle)
}
pub fn set_aircraft_ignore_hightmap_optimisation(vehicle: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetAircraftIgnoreHightmapOptimisation {
    crate::__imports::native_set_aircraft_ignore_hightmap_optimisation(vehicle,
p1)
}
pub fn get_convertible_roof_state(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetConvertibleRoofState {
    crate::__imports::native_get_convertible_roof_state(vehicle)
}
pub fn set_vehicle_bulldozer_arm_position(vehicle: u32,
position: f32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleBulldozerArmPosition {
    crate::__imports::native_set_vehicle_bulldozer_arm_position(vehicle,
position,
p2)
}
pub fn set_global_position_offset_for_recorded_vehicle_playback(vehicle: u32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfSetGlobalPositionOffsetForRecordedVehiclePlayback {
    crate::__imports::native_set_global_position_offset_for_recorded_vehicle_playback(vehicle,
x,
y,
z)
}
pub fn set_vehicle_burnout(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleBurnout {
    crate::__imports::native_set_vehicle_burnout(vehicle,
toggle)
}
pub fn set_vehicle_needs_to_be_hotwired(vehicle: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetVehicleNeedsToBeHotwired {
    crate::__imports::native_set_vehicle_needs_to_be_hotwired(vehicle,
toggle)
}
pub fn get_vehicle_mod_kit_type(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleModKitType {
    crate::__imports::native_get_vehicle_mod_kit_type(vehicle)
}
pub fn set_car_boot_open(vehicle: u32) -> altv_wasm_shared::natives_result::ResultOfSetCarBootOpen {
    crate::__imports::native_set_car_boot_open(vehicle)
}
pub fn set_heli_blades_speed(vehicle: u32,
speed: f32) -> altv_wasm_shared::natives_result::ResultOfSetHeliBladesSpeed {
    crate::__imports::native_set_heli_blades_speed(vehicle,
speed)
}
pub fn switch_train_track(track_id: i32,
state: bool) -> altv_wasm_shared::natives_result::ResultOfSwitchTrainTrack {
    crate::__imports::native_switch_train_track(track_id,
state)
}
pub fn set_heli_tail_rotor_health(vehicle: u32,
health: f32) -> altv_wasm_shared::natives_result::ResultOfSetHeliTailRotorHealth {
    crate::__imports::native_set_heli_tail_rotor_health(vehicle,
health)
}
pub fn get_vehicle_door_angle_ratio(vehicle: u32,
door_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetVehicleDoorAngleRatio {
    crate::__imports::native_get_vehicle_door_angle_ratio(vehicle,
door_id)
}
pub fn set_vehicle_tow_truck_arm_position(vehicle: u32,
position: f32) -> altv_wasm_shared::natives_result::ResultOfSetVehicleTowTruckArmPosition {
    crate::__imports::native_set_vehicle_tow_truck_arm_position(vehicle,
position)
}
pub fn set_rocket_boost_fill(vehicle: u32,
percentage: f32) -> altv_wasm_shared::natives_result::ResultOfSetRocketBoostFill {
    crate::__imports::native_set_rocket_boost_fill(vehicle,
percentage)
}
pub fn get_deep_ocean_scaler() -> altv_wasm_shared::natives_result::ResultOfGetDeepOceanScaler {
    crate::__imports::native_get_deep_ocean_scaler()
}
pub fn test_vertical_probe_against_all_water(x: f32,
y: f32,
z: f32,
flags: i32,
water_height: f32) -> altv_wasm_shared::natives_result::ResultOfTestVerticalProbeAgainstAllWater {
    crate::__imports::native_test_vertical_probe_against_all_water(x,
y,
z,
flags,
water_height)
}
pub fn set_calmed_wave_height_scaler(height: f32) -> altv_wasm_shared::natives_result::ResultOfSetCalmedWaveHeightScaler {
    crate::__imports::native_set_calmed_wave_height_scaler(height)
}
pub fn reset_deep_ocean_scaler() -> altv_wasm_shared::natives_result::ResultOfResetDeepOceanScaler {
    crate::__imports::native_reset_deep_ocean_scaler()
}
pub fn test_probe_against_all_water(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
flags: i32,
water_height: f32) -> altv_wasm_shared::natives_result::ResultOfTestProbeAgainstAllWater {
    crate::__imports::native_test_probe_against_all_water(x1,
y1,
z1,
x2,
y2,
z2,
flags,
water_height)
}
pub fn get_water_height_no_waves(x: f32,
y: f32,
z: f32,
height: f32) -> altv_wasm_shared::natives_result::ResultOfGetWaterHeightNoWaves {
    crate::__imports::native_get_water_height_no_waves(x,
y,
z,
height)
}
pub fn remove_extra_calming_quad(calming_quad: i32) -> altv_wasm_shared::natives_result::ResultOfRemoveExtraCalmingQuad {
    crate::__imports::native_remove_extra_calming_quad(calming_quad)
}
pub fn set_deep_ocean_scaler(intensity: f32) -> altv_wasm_shared::natives_result::ResultOfSetDeepOceanScaler {
    crate::__imports::native_set_deep_ocean_scaler(intensity)
}
pub fn modify_water(x: f32,
y: f32,
radius: f32,
height: f32) -> altv_wasm_shared::natives_result::ResultOfModifyWater {
    crate::__imports::native_modify_water(x,
y,
radius,
height)
}
pub fn get_water_height(x: f32,
y: f32,
z: f32,
height: f32) -> altv_wasm_shared::natives_result::ResultOfGetWaterHeight {
    crate::__imports::native_get_water_height(x,
y,
z,
height)
}
pub fn add_extra_calming_quad(x_low: f32,
y_low: f32,
x_high: f32,
y_high: f32,
height: f32) -> altv_wasm_shared::natives_result::ResultOfAddExtraCalmingQuad {
    crate::__imports::native_add_extra_calming_quad(x_low,
y_low,
x_high,
y_high,
height)
}
pub fn test_probe_against_water(x1: f32,
y1: f32,
z1: f32,
x2: f32,
y2: f32,
z2: f32,
result: Option<&shared::Vector3>) -> altv_wasm_shared::natives_result::ResultOfTestProbeAgainstWater {
    crate::__imports::native_test_probe_against_water(x1,
y1,
z1,
x2,
y2,
z2,
result)
}
pub fn get_ammo_in_ped_weapon(ped: u32,
weaponhash: u32) -> altv_wasm_shared::natives_result::ResultOfGetAmmoInPedWeapon {
    crate::__imports::native_get_ammo_in_ped_weapon(ped,
weaponhash)
}
pub fn get_weapon_time_between_shots(weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetWeaponTimeBetweenShots {
    crate::__imports::native_get_weapon_time_between_shots(weapon_hash)
}
pub fn set_ped_current_weapon_visible(ped: u32,
visible: bool,
deselect_weapon: bool,
p3: bool,
p4: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedCurrentWeaponVisible {
    crate::__imports::native_set_ped_current_weapon_visible(ped,
visible,
deselect_weapon,
p3,
p4)
}
pub fn get_selected_ped_weapon(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetSelectedPedWeapon {
    crate::__imports::native_get_selected_ped_weapon(ped)
}
pub fn remove_air_defence_sphere(zone_id: i32) -> altv_wasm_shared::natives_result::ResultOfRemoveAirDefenceSphere {
    crate::__imports::native_remove_air_defence_sphere(zone_id)
}
pub fn is_ped_weapon_component_active(ped: u32,
weapon_hash: u32,
component_hash: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedWeaponComponentActive {
    crate::__imports::native_is_ped_weapon_component_active(ped,
weapon_hash,
component_hash)
}
pub fn get_weapon_component_type_model(component_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetWeaponComponentTypeModel {
    crate::__imports::native_get_weapon_component_type_model(component_hash)
}
pub fn clear_ped_last_weapon_damage(ped: u32) -> altv_wasm_shared::natives_result::ResultOfClearPedLastWeaponDamage {
    crate::__imports::native_clear_ped_last_weapon_damage(ped)
}
pub fn get_current_ped_vehicle_weapon(ped: u32,
weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetCurrentPedVehicleWeapon {
    crate::__imports::native_get_current_ped_vehicle_weapon(ped,
weapon_hash)
}
pub fn set_weapon_animation_override(ped: u32,
anim_style: u32) -> altv_wasm_shared::natives_result::ResultOfSetWeaponAnimationOverride {
    crate::__imports::native_set_weapon_animation_override(ped,
anim_style)
}
pub fn has_entity_been_damaged_by_weapon(entity: u32,
weapon_hash: u32,
weapon_type: i32) -> altv_wasm_shared::natives_result::ResultOfHasEntityBeenDamagedByWeapon {
    crate::__imports::native_has_entity_been_damaged_by_weapon(entity,
weapon_hash,
weapon_type)
}
pub fn set_ped_ammo(ped: u32,
weapon_hash: u32,
ammo: i32,
p3: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedAmmo {
    crate::__imports::native_set_ped_ammo(ped,
weapon_hash,
ammo,
p3)
}
pub fn set_ped_infinite_ammo_clip(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedInfiniteAmmoClip {
    crate::__imports::native_set_ped_infinite_ammo_clip(ped,
toggle)
}
pub fn remove_all_air_defence_spheres() -> altv_wasm_shared::natives_result::ResultOfRemoveAllAirDefenceSpheres {
    crate::__imports::native_remove_all_air_defence_spheres()
}
pub fn remove_weapon_component_from_ped(ped: u32,
weapon_hash: u32,
component_hash: u32) -> altv_wasm_shared::natives_result::ResultOfRemoveWeaponComponentFromPed {
    crate::__imports::native_remove_weapon_component_from_ped(ped,
weapon_hash,
component_hash)
}
pub fn set_ped_drops_inventory_weapon(ped: u32,
weapon_hash: u32,
x_offset: f32,
y_offset: f32,
z_offset: f32,
ammo_count: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedDropsInventoryWeapon {
    crate::__imports::native_set_ped_drops_inventory_weapon(ped,
weapon_hash,
x_offset,
y_offset,
z_offset,
ammo_count)
}
pub fn make_ped_reload(ped: u32) -> altv_wasm_shared::natives_result::ResultOfMakePedReload {
    crate::__imports::native_make_ped_reload(ped)
}
pub fn add_ped_ammo_by_type(ped: u32,
ammo_type_hash: u32,
ammo: i32) -> altv_wasm_shared::natives_result::ResultOfAddPedAmmoByType {
    crate::__imports::native_add_ped_ammo_by_type(ped,
ammo_type_hash,
ammo)
}
pub fn set_ped_stun_gun_finite_ammo(p0: i32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedStunGunFiniteAmmo {
    crate::__imports::native_set_ped_stun_gun_finite_ammo(p0,
p1)
}
pub fn get_ped_weapon_tint_index(ped: u32,
weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedWeaponTintIndex {
    crate::__imports::native_get_ped_weapon_tint_index(ped,
weapon_hash)
}
pub fn has_ped_been_damaged_by_weapon(ped: u32,
weapon_hash: u32,
weapon_type: i32) -> altv_wasm_shared::natives_result::ResultOfHasPedBeenDamagedByWeapon {
    crate::__imports::native_has_ped_been_damaged_by_weapon(ped,
weapon_hash,
weapon_type)
}
pub fn get_ammo_in_clip(ped: u32,
weapon_hash: u32,
ammo: i32) -> altv_wasm_shared::natives_result::ResultOfGetAmmoInClip {
    crate::__imports::native_get_ammo_in_clip(ped,
weapon_hash,
ammo)
}
pub fn get_weapon_damage(weapon_hash: u32,
component_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetWeaponDamage {
    crate::__imports::native_get_weapon_damage(weapon_hash,
component_hash)
}
pub fn give_weapon_component_to_weapon_object(weapon_object: u32,
component_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGiveWeaponComponentToWeaponObject {
    crate::__imports::native_give_weapon_component_to_weapon_object(weapon_object,
component_hash)
}
pub fn has_weapon_asset_loaded(weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfHasWeaponAssetLoaded {
    crate::__imports::native_has_weapon_asset_loaded(weapon_hash)
}
pub fn get_ped_ammo_by_type(ped: u32,
ammo_type_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedAmmoByType {
    crate::__imports::native_get_ped_ammo_by_type(ped,
ammo_type_hash)
}
pub fn get_current_ped_weapon(ped: u32,
weapon_hash: u32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfGetCurrentPedWeapon {
    crate::__imports::native_get_current_ped_weapon(ped,
weapon_hash,
p2)
}
pub fn get_current_ped_weapon_entity_index(ped: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfGetCurrentPedWeaponEntityIndex {
    crate::__imports::native_get_current_ped_weapon_entity_index(ped,
p1)
}
pub fn get_weapon_damage_type(weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetWeaponDamageType {
    crate::__imports::native_get_weapon_damage_type(weapon_hash)
}
pub fn set_ped_infinite_ammo(ped: u32,
toggle: bool,
weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfSetPedInfiniteAmmo {
    crate::__imports::native_set_ped_infinite_ammo(ped,
toggle,
weapon_hash)
}
pub fn get_weapontype_slot(weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetWeapontypeSlot {
    crate::__imports::native_get_weapontype_slot(weapon_hash)
}
pub fn fire_air_defence_sphere_weapon_at_position(zone_id: i32,
x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfFireAirDefenceSphereWeaponAtPosition {
    crate::__imports::native_fire_air_defence_sphere_weapon_at_position(zone_id,
x,
y,
z)
}
pub fn is_ped_armed(ped: u32,
type_flags: i32) -> altv_wasm_shared::natives_result::ResultOfIsPedArmed {
    crate::__imports::native_is_ped_armed(ped,
type_flags)
}
pub fn set_weapon_damage_modifier(weapon_hash: u32,
damage_multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetWeaponDamageModifier {
    crate::__imports::native_set_weapon_damage_modifier(weapon_hash,
damage_multiplier)
}
pub fn set_ped_drops_weapons_when_dead(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedDropsWeaponsWhenDead {
    crate::__imports::native_set_ped_drops_weapons_when_dead(ped,
toggle)
}
pub fn request_weapon_high_detail_model(weapon_object: u32) -> altv_wasm_shared::natives_result::ResultOfRequestWeaponHighDetailModel {
    crate::__imports::native_request_weapon_high_detail_model(weapon_object)
}
pub fn remove_weapon_from_ped(ped: u32,
weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfRemoveWeaponFromPed {
    crate::__imports::native_remove_weapon_from_ped(ped,
weapon_hash)
}
pub fn set_weapon_aoe_modifier(weapon_hash: u32,
multiplier: f32) -> altv_wasm_shared::natives_result::ResultOfSetWeaponAoeModifier {
    crate::__imports::native_set_weapon_aoe_modifier(weapon_hash,
multiplier)
}
pub fn is_flash_light_on(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsFlashLightOn {
    crate::__imports::native_is_flash_light_on(ped)
}
pub fn get_weapon_component_variant_extra_model(component_hash: u32,
extra_component_index: i32) -> altv_wasm_shared::natives_result::ResultOfGetWeaponComponentVariantExtraModel {
    crate::__imports::native_get_weapon_component_variant_extra_model(component_hash,
extra_component_index)
}
pub fn set_ped_cycle_vehicle_weapons_only(ped: u32) -> altv_wasm_shared::natives_result::ResultOfSetPedCycleVehicleWeaponsOnly {
    crate::__imports::native_set_ped_cycle_vehicle_weapons_only(ped)
}
pub fn set_ped_weapon_tint_index(ped: u32,
weapon_hash: u32,
tint_index: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedWeaponTintIndex {
    crate::__imports::native_set_ped_weapon_tint_index(ped,
weapon_hash,
tint_index)
}
pub fn request_weapon_asset(weapon_hash: u32,
p1: i32,
p2: i32) -> altv_wasm_shared::natives_result::ResultOfRequestWeaponAsset {
    crate::__imports::native_request_weapon_asset(weapon_hash,
p1,
p2)
}
pub fn get_weapon_clip_size(weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetWeaponClipSize {
    crate::__imports::native_get_weapon_clip_size(weapon_hash)
}
pub fn get_max_ammo_by_type(ped: u32,
ammo_type_hash: u32,
ammo: i32) -> altv_wasm_shared::natives_result::ResultOfGetMaxAmmoByType {
    crate::__imports::native_get_max_ammo_by_type(ped,
ammo_type_hash,
ammo)
}
pub fn does_weapon_take_weapon_component(weapon_hash: u32,
component_hash: u32) -> altv_wasm_shared::natives_result::ResultOfDoesWeaponTakeWeaponComponent {
    crate::__imports::native_does_weapon_take_weapon_component(weapon_hash,
component_hash)
}
pub fn set_weapon_object_component_tint_index(weapon_object: u32,
camo_component_hash: u32,
color_index: i32) -> altv_wasm_shared::natives_result::ResultOfSetWeaponObjectComponentTintIndex {
    crate::__imports::native_set_weapon_object_component_tint_index(weapon_object,
camo_component_hash,
color_index)
}
pub fn get_weapon_tint_count(weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetWeaponTintCount {
    crate::__imports::native_get_weapon_tint_count(weapon_hash)
}
pub fn set_ped_ammo_by_type(ped: u32,
ammo_type_hash: u32,
ammo: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedAmmoByType {
    crate::__imports::native_set_ped_ammo_by_type(ped,
ammo_type_hash,
ammo)
}
pub fn get_weapon_component_variant_extra_count(component_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetWeaponComponentVariantExtraCount {
    crate::__imports::native_get_weapon_component_variant_extra_count(component_hash)
}
pub fn is_ped_current_weapon_silenced(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedCurrentWeaponSilenced {
    crate::__imports::native_is_ped_current_weapon_silenced(ped)
}
pub fn give_loadout_to_ped(ped: u32,
loadout_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGiveLoadoutToPed {
    crate::__imports::native_give_loadout_to_ped(ped,
loadout_hash)
}
pub fn set_ped_drops_weapon(ped: u32) -> altv_wasm_shared::natives_result::ResultOfSetPedDropsWeapon {
    crate::__imports::native_set_ped_drops_weapon(ped)
}
pub fn get_ped_last_weapon_impact_coord(ped: u32,
coords: Option<&shared::Vector3>) -> altv_wasm_shared::natives_result::ResultOfGetPedLastWeaponImpactCoord {
    crate::__imports::native_get_ped_last_weapon_impact_coord(ped,
coords)
}
pub fn hide_ped_weapon_for_scripted_cutscene(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfHidePedWeaponForScriptedCutscene {
    crate::__imports::native_hide_ped_weapon_for_scripted_cutscene(ped,
toggle)
}
pub fn has_vehicle_got_projectile_attached(driver: u32,
vehicle: u32,
weapon_hash: u32,
p3: i32) -> altv_wasm_shared::natives_result::ResultOfHasVehicleGotProjectileAttached {
    crate::__imports::native_has_vehicle_got_projectile_attached(driver,
vehicle,
weapon_hash,
p3)
}
pub fn set_current_ped_vehicle_weapon(ped: u32,
weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfSetCurrentPedVehicleWeapon {
    crate::__imports::native_set_current_ped_vehicle_weapon(ped,
weapon_hash)
}
pub fn has_weapon_got_weapon_component(weapon: u32,
component_hash: u32) -> altv_wasm_shared::natives_result::ResultOfHasWeaponGotWeaponComponent {
    crate::__imports::native_has_weapon_got_weapon_component(weapon,
component_hash)
}
pub fn add_ammo_to_ped(ped: u32,
weapon_hash: u32,
ammo: i32) -> altv_wasm_shared::natives_result::ResultOfAddAmmoToPed {
    crate::__imports::native_add_ammo_to_ped(ped,
weapon_hash,
ammo)
}
pub fn get_ped_ammo_type_from_weapon(ped: u32,
weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedAmmoTypeFromWeapon {
    crate::__imports::native_get_ped_ammo_type_from_weapon(ped,
weapon_hash)
}
pub fn get_max_range_of_current_ped_weapon(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetMaxRangeOfCurrentPedWeapon {
    crate::__imports::native_get_max_range_of_current_ped_weapon(ped)
}
pub fn set_ped_chance_of_firing_blanks(ped: u32,
x_bias: f32,
y_bias: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedChanceOfFiringBlanks {
    crate::__imports::native_set_ped_chance_of_firing_blanks(ped,
x_bias,
y_bias)
}
pub fn get_lockon_distance_of_current_ped_weapon(ped: u32) -> altv_wasm_shared::natives_result::ResultOfGetLockonDistanceOfCurrentPedWeapon {
    crate::__imports::native_get_lockon_distance_of_current_ped_weapon(ped)
}
pub fn get_best_ped_weapon(ped: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfGetBestPedWeapon {
    crate::__imports::native_get_best_ped_weapon(ped,
p1)
}
pub fn refill_ammo_instantly(ped: u32) -> altv_wasm_shared::natives_result::ResultOfRefillAmmoInstantly {
    crate::__imports::native_refill_ammo_instantly(ped)
}
pub fn has_ped_got_weapon(ped: u32,
weapon_hash: u32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfHasPedGotWeapon {
    crate::__imports::native_has_ped_got_weapon(ped,
weapon_hash,
p2)
}
pub fn create_air_defence_sphere(x: f32,
y: f32,
z: f32,
radius: f32,
p4: f32,
p5: f32,
p6: f32,
weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfCreateAirDefenceSphere {
    crate::__imports::native_create_air_defence_sphere(x,
y,
z,
radius,
p4,
p5,
p6,
weapon_hash)
}
pub fn is_weapon_valid(weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfIsWeaponValid {
    crate::__imports::native_is_weapon_valid(weapon_hash)
}
pub fn create_weapon_object(weapon_hash: u32,
ammo_count: i32,
x: f32,
y: f32,
z: f32,
show_world_model: bool,
scale: f32,
p7: i32,
p8: i32,
p9: i32) -> altv_wasm_shared::natives_result::ResultOfCreateWeaponObject {
    crate::__imports::native_create_weapon_object(weapon_hash,
ammo_count,
x,
y,
z,
show_world_model,
scale,
p7,
p8,
p9)
}
pub fn set_weapon_object_camo_index(weapon_object: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetWeaponObjectCamoIndex {
    crate::__imports::native_set_weapon_object_camo_index(weapon_object,
p1)
}
pub fn set_flash_light_active_history(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetFlashLightActiveHistory {
    crate::__imports::native_set_flash_light_active_history(ped,
toggle)
}
pub fn create_air_defence_angled_area(p0: f32,
p1: f32,
p2: f32,
p3: f32,
p4: f32,
p5: f32,
p6: f32,
p7: f32,
p8: f32,
radius: f32,
weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfCreateAirDefenceAngledArea {
    crate::__imports::native_create_air_defence_angled_area(p0,
p1,
p2,
p3,
p4,
p5,
p6,
p7,
p8,
radius,
weapon_hash)
}
pub fn set_ped_weapon_component_tint_index(ped: u32,
weapon_hash: u32,
camo_component_hash: u32,
color_index: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedWeaponComponentTintIndex {
    crate::__imports::native_set_ped_weapon_component_tint_index(ped,
weapon_hash,
camo_component_hash,
color_index)
}
pub fn get_ped_weapon_camo_index(ped: u32,
weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedWeaponCamoIndex {
    crate::__imports::native_get_ped_weapon_camo_index(ped,
weapon_hash)
}
pub fn get_max_ammo_in_clip(ped: u32,
weapon_hash: u32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfGetMaxAmmoInClip {
    crate::__imports::native_get_max_ammo_in_clip(ped,
weapon_hash,
p2)
}
pub fn set_ped_ammo_to_drop(ped: u32,
p1: i32) -> altv_wasm_shared::natives_result::ResultOfSetPedAmmoToDrop {
    crate::__imports::native_set_ped_ammo_to_drop(ped,
p1)
}
pub fn remove_weapon_asset(weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfRemoveWeaponAsset {
    crate::__imports::native_remove_weapon_asset(weapon_hash)
}
pub fn clear_entity_last_weapon_damage(entity: u32) -> altv_wasm_shared::natives_result::ResultOfClearEntityLastWeaponDamage {
    crate::__imports::native_clear_entity_last_weapon_damage(entity)
}
pub fn set_current_ped_weapon(ped: u32,
weapon_hash: u32,
b_force_in_hand: bool) -> altv_wasm_shared::natives_result::ResultOfSetCurrentPedWeapon {
    crate::__imports::native_set_current_ped_weapon(ped,
weapon_hash,
b_force_in_hand)
}
pub fn give_weapon_object_to_ped(weapon_object: u32,
ped: u32) -> altv_wasm_shared::natives_result::ResultOfGiveWeaponObjectToPed {
    crate::__imports::native_give_weapon_object_to_ped(weapon_object,
ped)
}
pub fn give_delayed_weapon_to_ped(ped: u32,
weapon_hash: u32,
ammo_count: i32,
b_force_in_hand: bool) -> altv_wasm_shared::natives_result::ResultOfGiveDelayedWeaponToPed {
    crate::__imports::native_give_delayed_weapon_to_ped(ped,
weapon_hash,
ammo_count,
b_force_in_hand)
}
pub fn get_weapon_component_hud_stats(component_hash: u32,
out_data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetWeaponComponentHudStats {
    crate::__imports::native_get_weapon_component_hud_stats(component_hash,
out_data)
}
pub fn get_weapon_object_component_tint_index(weapon_object: u32,
camo_component_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetWeaponObjectComponentTintIndex {
    crate::__imports::native_get_weapon_object_component_tint_index(weapon_object,
camo_component_hash)
}
pub fn set_can_ped_select_inventory_weapon(ped: u32,
weapon_hash: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetCanPedSelectInventoryWeapon {
    crate::__imports::native_set_can_ped_select_inventory_weapon(ped,
weapon_hash,
toggle)
}
pub fn set_ped_shoot_ordnance_weapon(ped: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetPedShootOrdnanceWeapon {
    crate::__imports::native_set_ped_shoot_ordnance_weapon(ped,
p1)
}
pub fn is_ped_weapon_ready_to_shoot(ped: u32) -> altv_wasm_shared::natives_result::ResultOfIsPedWeaponReadyToShoot {
    crate::__imports::native_is_ped_weapon_ready_to_shoot(ped)
}
pub fn can_use_weapon_on_parachute(weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfCanUseWeaponOnParachute {
    crate::__imports::native_can_use_weapon_on_parachute(weapon_hash)
}
pub fn give_weapon_to_ped(ped: u32,
weapon_hash: u32,
ammo_count: i32,
is_hidden: bool,
b_force_in_hand: bool) -> altv_wasm_shared::natives_result::ResultOfGiveWeaponToPed {
    crate::__imports::native_give_weapon_to_ped(ped,
weapon_hash,
ammo_count,
is_hidden,
b_force_in_hand)
}
pub fn get_weapontype_group(weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetWeapontypeGroup {
    crate::__imports::native_get_weapontype_group(weapon_hash)
}
pub fn has_ped_got_weapon_component(ped: u32,
weapon_hash: u32,
component_hash: u32) -> altv_wasm_shared::natives_result::ResultOfHasPedGotWeaponComponent {
    crate::__imports::native_has_ped_got_weapon_component(ped,
weapon_hash,
component_hash)
}
pub fn enable_laser_sight_rendering(toggle: bool) -> altv_wasm_shared::natives_result::ResultOfEnableLaserSightRendering {
    crate::__imports::native_enable_laser_sight_rendering(toggle)
}
pub fn get_weapon_object_from_ped(ped: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfGetWeaponObjectFromPed {
    crate::__imports::native_get_weapon_object_from_ped(ped,
p1)
}
pub fn get_weapon_object_tint_index(weapon: u32) -> altv_wasm_shared::natives_result::ResultOfGetWeaponObjectTintIndex {
    crate::__imports::native_get_weapon_object_tint_index(weapon)
}
pub fn does_air_defence_sphere_exist(zone_id: i32) -> altv_wasm_shared::natives_result::ResultOfDoesAirDefenceSphereExist {
    crate::__imports::native_does_air_defence_sphere_exist(zone_id)
}
pub fn set_flash_light_fade_distance(distance: f32) -> altv_wasm_shared::natives_result::ResultOfSetFlashLightFadeDistance {
    crate::__imports::native_set_flash_light_fade_distance(distance)
}
pub fn set_ped_gadget(ped: u32,
gadget_hash: u32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfSetPedGadget {
    crate::__imports::native_set_ped_gadget(ped,
gadget_hash,
p2)
}
pub fn get_weapon_hud_stats(weapon_hash: u32,
out_data: shared::MemoryBufferId) -> altv_wasm_shared::natives_result::ResultOfGetWeaponHudStats {
    crate::__imports::native_get_weapon_hud_stats(weapon_hash,
out_data)
}
pub fn give_weapon_component_to_ped(ped: u32,
weapon_hash: u32,
component_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGiveWeaponComponentToPed {
    crate::__imports::native_give_weapon_component_to_ped(ped,
weapon_hash,
component_hash)
}
pub fn is_air_defence_sphere_in_area(x: f32,
y: f32,
z: f32,
radius: f32,
out_zone_id: i32) -> altv_wasm_shared::natives_result::ResultOfIsAirDefenceSphereInArea {
    crate::__imports::native_is_air_defence_sphere_in_area(x,
y,
z,
radius,
out_zone_id)
}
pub fn get_max_ammo(ped: u32,
weapon_hash: u32,
ammo: i32) -> altv_wasm_shared::natives_result::ResultOfGetMaxAmmo {
    crate::__imports::native_get_max_ammo(ped,
weapon_hash,
ammo)
}
pub fn set_ammo_in_clip(ped: u32,
weapon_hash: u32,
ammo: i32) -> altv_wasm_shared::natives_result::ResultOfSetAmmoInClip {
    crate::__imports::native_set_ammo_in_clip(ped,
weapon_hash,
ammo)
}
pub fn set_eqipped_weapon_start_spinning_at_full_speed(ped: u32) -> altv_wasm_shared::natives_result::ResultOfSetEqippedWeaponStartSpinningAtFullSpeed {
    crate::__imports::native_set_eqipped_weapon_start_spinning_at_full_speed(ped)
}
pub fn set_pickup_ammo_amount_scaler(p0: f32) -> altv_wasm_shared::natives_result::ResultOfSetPickupAmmoAmountScaler {
    crate::__imports::native_set_pickup_ammo_amount_scaler(p0)
}
pub fn set_weapon_effect_duration_modifier(p0: u32,
p1: f32) -> altv_wasm_shared::natives_result::ResultOfSetWeaponEffectDurationModifier {
    crate::__imports::native_set_weapon_effect_duration_modifier(p0,
p1)
}
pub fn set_player_targettable_for_air_defence_sphere(player: u32,
zone_id: i32,
enable: bool) -> altv_wasm_shared::natives_result::ResultOfSetPlayerTargettableForAirDefenceSphere {
    crate::__imports::native_set_player_targettable_for_air_defence_sphere(player,
zone_id,
enable)
}
pub fn set_can_ped_select_all_weapons(ped: u32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetCanPedSelectAllWeapons {
    crate::__imports::native_set_can_ped_select_all_weapons(ped,
toggle)
}
pub fn get_ped_weapontype_in_slot(ped: u32,
weapon_slot: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedWeapontypeInSlot {
    crate::__imports::native_get_ped_weapontype_in_slot(ped,
weapon_slot)
}
pub fn get_ped_weapon_component_tint_index(ped: u32,
weapon_hash: u32,
camo_component_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedWeaponComponentTintIndex {
    crate::__imports::native_get_ped_weapon_component_tint_index(ped,
weapon_hash,
camo_component_hash)
}
pub fn remove_all_ped_weapons(ped: u32,
p1: bool) -> altv_wasm_shared::natives_result::ResultOfRemoveAllPedWeapons {
    crate::__imports::native_remove_all_ped_weapons(ped,
p1)
}
pub fn get_weapontype_model(weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetWeapontypeModel {
    crate::__imports::native_get_weapontype_model(weapon_hash)
}
pub fn get_ped_original_ammo_type_from_weapon(ped: u32,
weapon_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetPedOriginalAmmoTypeFromWeapon {
    crate::__imports::native_get_ped_original_ammo_type_from_weapon(ped,
weapon_hash)
}
pub fn get_is_ped_gadget_equipped(ped: u32,
gadget_hash: u32) -> altv_wasm_shared::natives_result::ResultOfGetIsPedGadgetEquipped {
    crate::__imports::native_get_is_ped_gadget_equipped(ped,
gadget_hash)
}
pub fn remove_weapon_component_from_weapon_object(object: u32,
component_hash: u32) -> altv_wasm_shared::natives_result::ResultOfRemoveWeaponComponentFromWeaponObject {
    crate::__imports::native_remove_weapon_component_from_weapon_object(object,
component_hash)
}
pub fn set_weapon_object_tint_index(weapon: u32,
tint_index: i32) -> altv_wasm_shared::natives_result::ResultOfSetWeaponObjectTintIndex {
    crate::__imports::native_set_weapon_object_tint_index(weapon,
tint_index)
}
pub fn explode_projectiles(ped: u32,
weapon_hash: u32,
p2: bool) -> altv_wasm_shared::natives_result::ResultOfExplodeProjectiles {
    crate::__imports::native_explode_projectiles(ped,
weapon_hash,
p2)
}
pub fn remove_all_projectiles_of_type(weapon_hash: u32,
explode: bool) -> altv_wasm_shared::natives_result::ResultOfRemoveAllProjectilesOfType {
    crate::__imports::native_remove_all_projectiles_of_type(weapon_hash,
explode)
}
pub fn get_zone_at_coords(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfGetZoneAtCoords {
    crate::__imports::native_get_zone_at_coords(x,
y,
z)
}
pub fn get_zone_popschedule(zone_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetZonePopschedule {
    crate::__imports::native_get_zone_popschedule(zone_id)
}
pub fn clear_popschedule_override_vehicle_model(schedule_id: i32) -> altv_wasm_shared::natives_result::ResultOfClearPopscheduleOverrideVehicleModel {
    crate::__imports::native_clear_popschedule_override_vehicle_model(schedule_id)
}
pub fn get_zone_scumminess(zone_id: i32) -> altv_wasm_shared::natives_result::ResultOfGetZoneScumminess {
    crate::__imports::native_get_zone_scumminess(zone_id)
}
pub fn override_popschedule_vehicle_model(schedule_id: i32,
vehicle_hash: u32) -> altv_wasm_shared::natives_result::ResultOfOverridePopscheduleVehicleModel {
    crate::__imports::native_override_popschedule_vehicle_model(schedule_id,
vehicle_hash)
}
pub fn get_hash_of_map_area_at_coords(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfGetHashOfMapAreaAtCoords {
    crate::__imports::native_get_hash_of_map_area_at_coords(x,
y,
z)
}
pub fn get_zone_from_name_id(zone_name: Option<&String>) -> altv_wasm_shared::natives_result::ResultOfGetZoneFromNameId {
    crate::__imports::native_get_zone_from_name_id(zone_name)
}
pub fn set_zone_enabled(zone_id: i32,
toggle: bool) -> altv_wasm_shared::natives_result::ResultOfSetZoneEnabled {
    crate::__imports::native_set_zone_enabled(zone_id,
toggle)
}
pub fn get_name_of_zone(x: f32,
y: f32,
z: f32) -> altv_wasm_shared::natives_result::ResultOfGetNameOfZone {
    crate::__imports::native_get_name_of_zone(x,
y,
z)
}
