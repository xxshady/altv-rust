#pragma once
#include "alt_bridge.h"

namespace natives {
    using Success = bool;

    std::shared_ptr<alt::INative::Context> ctx;

    void init() {
        ctx = alt::ICore::Instance().CreateNativesContext();
    }

    static char* save_c_string(const char* str) {
        if (str == nullptr) return nullptr;
        static char* stringValues[256] = { 0 };
        static int nextString = 0;
        if (stringValues[nextString]) free(stringValues[nextString]);
        char* _str = _strdup(str);
        stringValues[nextString] = _str;
        nextString = (nextString + 1) % 256;
        return _str;
    }

    char* clone_c_string(const char* str) {
        size_t stringSize = strlen(str);
        char* writable = new char[stringSize + 1];
        std::memcpy(writable, str, stringSize);
        writable[stringSize] = '\0';
        return writable;
    }


    class CStringPtr {
    public:
        char* ptr = nullptr;

        CStringPtr(std::string content) : ptr(save_c_string(content.c_str())) {}
        CStringPtr() {}
    };

    CStringPtr create_c_string_ptr(std::string content) {
        return { content };
    }

    CStringPtr create_null_c_string_ptr() {
        return {};
    }

    std::string read_c_string_ptr(const CStringPtr& str_ref) {
        return { str_ref.ptr };
    }

    bool is_c_string_ptr_null(const CStringPtr& str_ref) {
        return str_ref.ptr == nullptr;
    }
Success app_get_float(f32* native_return, const CStringPtr& property_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1514FB24C02C2322);
    ctx->Reset();

    ctx->Push(property_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success app_set_float(const CStringPtr& property_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x25D7687C68E0DAA4);
    ctx->Reset();

    ctx->Push(property_.ptr);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success app_set_block(const CStringPtr& block_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x262AB456A3D21F93);
    ctx->Reset();

    ctx->Push(block_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success app_set_string(const CStringPtr& property_, const CStringPtr& value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3FF2FCEC4B7721B4);
    ctx->Reset();

    ctx->Push(property_.ptr);
    ctx->Push(value_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success app_delete_app_data(bool* native_return, const CStringPtr& app_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x44151AEA95C8A003);
    ctx->Reset();

    ctx->Push(app_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success app_clear_block() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5FE1DF3342DB7DBA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success app_set_int(const CStringPtr& property_, i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x607E8E3D3E4F9611);
    ctx->Reset();

    ctx->Push(property_.ptr);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success app_has_linked_social_club_account(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x71EEE69745088DA0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success app_get_string(CStringPtr& native_return, const CStringPtr& property_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x749B023950D2311C);
    ctx->Reset();

    ctx->Push(property_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success app_data_valid(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x846AA8E7D55EE5B6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success app_save_data() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x95C5D356CDA6E85F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success app_get_deleted_file_status(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC9853A2BE3DED1A6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success app_has_synced_data(bool* native_return, const CStringPtr& app_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCA52279A7271517F);
    ctx->Reset();

    ctx->Push(app_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success app_set_app(const CStringPtr& app_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCFD0406ADAF90D2B);
    ctx->Reset();

    ctx->Push(app_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success app_get_int(i32* native_return, const CStringPtr& property_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD3A58A12C77D9D4B);
    ctx->Reset();

    ctx->Push(property_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success app_close_app() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE41C65E07A5F05FC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success app_close_block() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE8E3FCF72EAC0EF8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_audio_scene(bool* native_return, const CStringPtr& scene_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x013A80FC08F6E4F2);
    ctx->Reset();

    ctx->Push(scene_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success unrequest_tennis_banks() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0150B6FF25A9E2E5);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_audio_body_damage_factor(u32 vehicle_, f32 intensity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x01BB4D577D38BD9E);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(intensity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ambient_zone_enabled(bool* native_return, const CStringPtr& ambient_zone_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x01E2817A479A7F9B);
    ctx->Reset();

    ctx->Push(ambient_zone_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_vehicle_default_horn(u32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x02165D55000219AC);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success prepare_synchronized_audio_event_for_scene(bool* native_return, i32 scene_i_d_, const CStringPtr& audio_event_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x029FE7CD1B7E2E75);
    ctx->Reset();

    ctx->Push(scene_i_d_);
    ctx->Push(audio_event_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_radio_position_audio_mute(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x02E93C796ABD3A97);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success unlock_radio_station_track_list(const CStringPtr& radio_station_, const CStringPtr& track_list_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x031ACB6ABA18C729);
    ctx->Reset();

    ctx->Push(radio_station_.ptr);
    ctx->Push(track_list_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success can_vehicle_receive_cb_radio(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x032A116663A4D5AC);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_horn_sound_index(u32 vehicle_, i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0350E7E17BA767D0);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_alarm(const CStringPtr& alarm_name_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0355EF116C4C97B2);
    ctx->Reset();

    ctx->Push(alarm_name_.ptr);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_portal_settings_override(const CStringPtr& p0_, const CStringPtr& p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x044DBAD7A7FA2BE5);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    ctx->Push(p1_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_in_current_conversation(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x049E937F18F4020C);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_radio_faded_out(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0626A247D2405330);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success force_ped_panic_walla() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x062D5EAD4DA2FA6A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_footsteps_events_enabled(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0653B735BFBDFE87);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_script_update_door_audio(u32 door_hash_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x06C0023BED16DD6B);
    ctx->Reset();

    ctx->Push(door_hash_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_conversation_audio_controlled_by_anim(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0B568201DD99F0EB);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_voice_group_from_race_to_pvg(u32 ped_, u32 voice_group_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0BABC1345ABBFB16);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(voice_group_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_radio_on(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0BE4BE946463F917);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success release_mission_audio_bank() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0EC92A1BF0857187);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_player_veh_have_radio(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x109697E2FFBAC8A1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_mobile_radio_enabled_during_gameplay(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1098355A16064BB3);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success unhint_named_script_audio_bank(const CStringPtr& audio_bank_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x11579D940949C49E);
    ctx->Reset();

    ctx->Push(audio_bank_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_ambient_zone_list_state(const CStringPtr& ambient_zone_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x120C48C614909FA4);
    ctx->Reset();

    ctx->Push(ambient_zone_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_audio_special_effect_mode(i32 mode_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x12561FCBB62D5B9C);
    ctx->Reset();

    ctx->Push(mode_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success override_trevor_rage(const CStringPtr& voice_effect_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x13AD665062541A7E);
    ctx->Reset();

    ctx->Push(voice_effect_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_walla_density(f32 p0_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x149AEE66F0CB3A99);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_entity_to_audio_mix_group(u32 entity_, const CStringPtr& group_name_, f32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x153973AB99FE8980);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(group_name_.ptr);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_global_radio_signal_level(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x159B7318403A1CD8);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_custom_radio_track_list(const CStringPtr& radio_station_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1654F24A88A8E3FE);
    ctx->Reset();

    ctx->Push(radio_station_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_scripted_conversation_ongoing(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x16754C556D2EDE3D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success remove_entity_from_audio_mix_group(u32 entity_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x18EB48CFC41F2EA0);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_mission_complete_playing(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x19A30C23F5827F8A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success unhint_ambient_audio_bank() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x19AF7ED9B9D23058);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_user_radio_control_enabled(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x19F21E63AE6EAE4E);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_race_and_voice_group(u32 ped_, i32 p1_, u32 voice_group_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1B7ABE26CBCBF8C7);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(voice_group_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success blip_siren(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1B9025BDA76822B6);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_veh_radio_station(u32 vehicle_, const CStringPtr& radio_station_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1B9C0099CB942AC6);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(radio_station_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success enable_vehicle_fanbelt_damage(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1C073274E065C6D2);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ambient_zone_state_persistent(const CStringPtr& ambient_zone_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1D6650420CEC9D3B);
    ctx->Reset();

    ctx->Push(ambient_zone_.ptr);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success prepare_music_event(bool* native_return, const CStringPtr& event_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1E5185B72EF5158A);
    ctx->Reset();

    ctx->Push(event_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ped_ringtone_playing(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1E8E5E20937E3137);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success load_stream(bool* native_return, const CStringPtr& stream_name_, const CStringPtr& sound_set_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1F1F957154EC51DF);
    ctx->Reset();

    ctx->Push(stream_name_.ptr);
    ctx->Push(sound_set_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_siren_with_no_driver(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1FEF0683B96EBCF2);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_stream_from_position(f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x21442F412E8DE56B);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_ambient_zone_state(const CStringPtr& zone_name_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x218DD44AAAC964FF);
    ctx->Reset();

    ctx->Push(zone_name_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_alarm_playing(bool* native_return, const CStringPtr& alarm_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x226435CB96CCFC8C);
    ctx->Reset();

    ctx->Push(alarm_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success start_preloaded_conversation() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x23641AFE870AF385);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_script_phone_conversation(bool p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x252E5F915EABB675);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_cloth_events_enabled(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x29DA3CA8D8B2692D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success unblock_speech_context_group(const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2ACABED337622DF2);
    ctx->Reset();

    ctx->Push(p0_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_radio_station_favourited(bool* native_return, const CStringPtr& radio_station_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B1784DB08AFEA79);
    ctx->Reset();

    ctx->Push(radio_station_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success enable_vehicle_exhaust_pops(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2BE4BC731D039D5A);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_radio_frontend_fade_time(f32 fade_time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2C96CDB04FCA358E);
    ctx->Reset();

    ctx->Push(fade_time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_radio_track_with_start_offset(const CStringPtr& radio_station_name_, const CStringPtr& mix_name_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2CB0075110BE1E56);
    ctx->Reset();

    ctx->Push(radio_station_name_.ptr);
    ctx->Push(mix_name_.ptr);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success audio_is_scripted_music_playing(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2DD39BF3E2F9C47F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_network_id_from_sound_id(i32* native_return, i32 sound_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2DE3F0A134FFBC0D);
    ctx->Reset();

    ctx->Push(sound_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success stop_all_alarms(bool stop_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2F794A877ADD4C92);
    ctx->Reset();

    ctx->Push(stop_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_script_audio_bank(bool* native_return, const CStringPtr& audio_bank_, bool p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2F844A8B08D76685);
    ctx->Reset();

    ctx->Push(audio_bank_.ptr);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_variable_on_stream(const CStringPtr& unk_variable_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2F9D3834AEB9EF79);
    ctx->Reset();

    ctx->Push(unk_variable_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_any_positional_speech_playing(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x30CA2EF91D15ADF8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_position_for_null_conv_ped(i32 p0_, f32 p1_, f32 p2_, f32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x33E3C6C6F2F0B506);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success freeze_radio_station(const CStringPtr& radio_station_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x344F393B027E38C3);
    ctx->Reset();

    ctx->Push(radio_station_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_current_track_sound_name(u32* native_return, const CStringPtr& radio_station_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x34D66BC058019CE0);
    ctx->Reset();

    ctx->Push(radio_station_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success play_ped_ambient_speech_with_voice_native(u32 ped_, const CStringPtr& speech_name_, const CStringPtr& voice_name_, const CStringPtr& speech_param_, bool p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3523634255FC3318);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(speech_name_.ptr);
    ctx->Push(voice_name_.ptr);
    ctx->Push(speech_param_.ptr);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success release_sound_id(i32 sound_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x353FC880830B88FA);
    ctx->Reset();

    ctx->Push(sound_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_aggressive_horns(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x395BF71085D1B1D9);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_static_emitter_enabled(const CStringPtr& emitter_name_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x399D2D3B33F1B8EB);
    ctx->Reset();

    ctx->Push(emitter_name_.ptr);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_music_vol_slider(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3A48AB4445D499BE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success play_vehicle_door_open_sound(u32 vehicle_, i32 door_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3A539D52857EA82D);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(door_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success preload_script_conversation(bool p0_, bool p1_, bool p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3B3CAD6166916D87);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cutscene_audio_override(const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3B4BF5F0859204D9);
    ctx->Reset();

    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_radio_enabled(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3B988190C0AA6C0B);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_gps_active(bool active_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3BD3F52BA9B1E4E8);
    ctx->Reset();

    ctx->Push(active_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success override_veh_horn(u32 vehicle_, bool override_, i32 horn_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3CDC1E622CCE0356);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(override_);
    ctx->Push(horn_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_veh_has_normal_radio(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3E45765F3FBB582F);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_current_track_play_time(i32* native_return, const CStringPtr& radio_station_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3E65CDE5215832C1);
    ctx->Reset();

    ctx->Push(radio_station_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success hint_mission_audio_bank(bool* native_return, const CStringPtr& audio_bank_, bool p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x40763EA7B9B783E7);
    ctx->Reset();

    ctx->Push(audio_bank_.ptr);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_voice_full(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x40CF0D12D142A9E8);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_sound_id(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x430386FE9BF80B45);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_siren_can_be_controlled_by_audio(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x43FA0DFC5DF87815);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success lock_radio_station(const CStringPtr& radio_station_name_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x477D9DB48F889591);
    ctx->Reset();

    ctx->Push(radio_station_name_.ptr);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success update_unlockable_dj_radio_tracks(bool enable_mixes_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x47AED84213A47510);
    ctx->Reset();

    ctx->Push(enable_mixes_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_current_scripted_conversation_line(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x480357EE890C295A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success does_context_exist_for_this_ped(bool* native_return, u32 ped_, const CStringPtr& speech_name_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x49B99BF3FDA89A7A);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(speech_name_.ptr);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_boost_active(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4A04DE7CAB2739A1);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_tennis_banks(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4ADA3F19BE4A6047);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_radio_station_as_favourite(const CStringPtr& radio_station_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4CAFEBFA21EC188D);
    ctx->Reset();

    ctx->Push(radio_station_.ptr);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_music_track_list(const CStringPtr& radio_station_, const CStringPtr& track_list_name_, i32 milliseconds_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4E0AF9114608257C);
    ctx->Reset();

    ctx->Push(radio_station_.ptr);
    ctx->Push(track_list_name_.ptr);
    ctx->Push(milliseconds_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_custom_radio_track_list(const CStringPtr& radio_station_, const CStringPtr& track_list_name_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4E404A9361F75BB2);
    ctx->Reset();

    ctx->Push(radio_station_.ptr);
    ctx->Push(track_list_name_.ptr);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_stream_play_time(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4E72BBDBCA58A3DB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success force_use_audio_game_object(u32 vehicle_, const CStringPtr& audio_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4F0C413926060B38);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(audio_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_audible_music_track_text_id(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x50B196FC9ED6545B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success has_loaded_mp_data_set(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x544810ED9DB6BBE6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success distant_cop_car_sirens(bool value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x552369F549563AD5);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_next_radio_track(const CStringPtr& radio_name_, const CStringPtr& radio_track_, const CStringPtr& p2_, const CStringPtr& p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x55ECF4D13D9903B0);
    ctx->Reset();

    ctx->Push(radio_name_.ptr);
    ctx->Push(radio_track_.ptr);
    ctx->Push(p2_.ptr);
    ctx->Push(p3_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_conversations_persist(bool p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x58BB377BEC7CD5F4);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_stream_frontend() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x58FCE43488F9F5F4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success load_stream_with_start_offset(bool* native_return, const CStringPtr& stream_name_, i32 start_offset_, const CStringPtr& sound_set_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x59C16B79F53B3712);
    ctx->Reset();

    ctx->Push(stream_name_.ptr);
    ctx->Push(start_offset_);
    ctx->Push(sound_set_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_audio_engine_damage_factor(u32 vehicle_, f32 damage_factor_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x59E7B488451F4D3A);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(damage_factor_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cancel_music_event(bool* native_return, const CStringPtr& event_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5B17A90291133DA5);
    ctx->Reset();

    ctx->Push(event_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success has_loaded_sp_data_set(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5B50ABB1FE3746F4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success play_sound_from_entity_hash(i32 sound_id_, u32 model_, u32 entity_, u32 sound_set_hash_, i32 p4_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5B9853296731E88D);
    ctx->Reset();

    ctx->Push(sound_id_);
    ctx->Push(model_);
    ctx->Push(entity_);
    ctx->Push(sound_set_hash_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success refresh_closest_ocean_shoreline() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5D2BFAAB8D956E0E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_audibly_damaged(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5DB8010EE71FDEF2);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ambient_voice_name_hash(u32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5E203DA2BA15D436);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success is_player_veh_radio_enable(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5F43D83FD6738741);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success preload_script_phone_conversation(bool p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6004BCB0E226AAEA);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_conversation_audio_placeholder(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x61631F5DF50D1C34);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_vehicle_door_close_sound(u32 vehicle_, i32 door_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x62A456AA4769EF34);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(door_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success link_static_emitter_to_entity(const CStringPtr& emitter_name_, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x651D3228960D08AF);
    ctx->Reset();

    ctx->Push(emitter_name_.ptr);
    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success release_ambient_audio_bank() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x65475A218FFAA93D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success trigger_siren_audio(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x66C3FB05206041BA);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_mission_news_story_unlocked(bool* native_return, i32 news_story_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x66E49BF55B4B1874);
    ctx->Reset();

    ctx->Push(news_story_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success play_sound_frontend(i32 sound_id_, const CStringPtr& audio_name_, const CStringPtr& audio_ref_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x67C540AA08E4A6F5);
    ctx->Reset();

    ctx->Push(sound_id_);
    ctx->Push(audio_name_.ptr);
    ctx->Push(audio_ref_.ptr);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_script_conversation(bool p0_, bool p1_, bool p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6B17C62C9635D2DC);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_ped_ringtone(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6C5AE23EFA885092);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ambient_voice_name(u32 ped_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6C8065A3B780185B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_game_in_control_of_music(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6D28DC1671E334FD);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success skip_radio_forward() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6DDBBDD98E2E9C25);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_mission_complete_ready_for_ui(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6F259F82D873B8B8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_player_vehicle_alarm_audio_active(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6FDDAD856E36988A);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success trigger_music_event(bool* native_return, const CStringPtr& event_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x706D57B0F50DA710);
    ctx->Reset();

    ctx->Push(event_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success script_overrides_wind_elevation(bool p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x70B8EC8FC108A634);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_any_speech_playing(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x729072355FA39EC9);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_variable_on_under_water_stream(const CStringPtr& unk_variable_name_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x733ADF241531E5C2);
    ctx->Reset();

    ctx->Push(unk_variable_name_.ptr);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_mission_audio_bank(bool* native_return, const CStringPtr& audio_bank_, bool p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7345BDD95E62E0F2);
    ctx->Reset();

    ctx->Push(audio_bank_.ptr);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_mobile_phone_call_ongoing(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7497D2CE2C30D24C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_sound_id_from_network_id(i32* native_return, i32 net_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x75262FD12D0A1C84);
    ctx->Reset();

    ctx->Push(net_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success override_microphone_settings(u32 hash_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x75773E11BA459E90);
    ctx->Reset();

    ctx->Push(hash_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_horn_enabled(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x76D683C108594D0E);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_radio_station_music_only(const CStringPtr& radio_station_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x774BD811F656A122);
    ctx->Reset();

    ctx->Push(radio_station_.ptr);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success release_named_script_audio_bank(const CStringPtr& audio_bank_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x77ED170667F50170);
    ctx->Reset();

    ctx->Push(audio_bank_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success release_script_audio_bank() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7A2D8AD0A9EB9C3F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_current_playing_speech(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7A73D05A607734C7);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_voice_group(u32 ped_, u32 voice_group_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7CDC8C3B89F661B3);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(voice_group_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success update_sound_coord(i32 sound_id_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7EC3C679D0E7E46B);
    ctx->Reset();

    ctx->Push(sound_id_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_sound(i32 sound_id_, const CStringPtr& audio_name_, const CStringPtr& audio_ref_, bool p3_, i32 p4_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7FF4944CC209192D);
    ctx->Reset();

    ctx->Push(sound_id_);
    ctx->Push(audio_name_.ptr);
    ctx->Push(audio_ref_.ptr);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_cutscene_audio() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x806058BBDC136E06);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success audio_is_music_playing(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x845FFC3A4FEEFA3E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success pause_scripted_conversation(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8530AD776CD72B12);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_initial_player_station(const CStringPtr& radio_station_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x88795F13FACDA88D);
    ctx->Reset();

    ctx->Push(radio_station_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_stream_from_ped(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x89049DD63C08B5D1);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_for_null_conv_ped(i32 p0_, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x892B6AB8F33606F5);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success interrupt_conversation_and_pause(u32 ped_, const CStringPtr& p1_, const CStringPtr& speaker_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8A694D7A68F8DC38);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_.ptr);
    ctx->Push(speaker_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_synchronized_audio_event(bool* native_return, i32 scene_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8B2FD4560E55DD2D);
    ctx->Reset();

    ctx->Push(scene_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_interior_walla_density(f32 p0_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8BF907833BE275DE);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success find_radio_station_index(i32* native_return, u32 station_name_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8D67489793FF428B);
    ctx->Reset();

    ctx->Push(station_name_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success play_sound_from_coord(i32 sound_id_, const CStringPtr& audio_name_, f32 x_, f32 y_, f32 z_, const CStringPtr& audio_ref_, bool is_network_, i32 range_, bool p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8D8686B622B88120);
    ctx->Reset();

    ctx->Push(sound_id_);
    ctx->Push(audio_name_.ptr);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(audio_ref_.ptr);
    ctx->Push(is_network_);
    ctx->Push(range_);
    ctx->Push(p8_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_ped_ambient_speech_native(u32 ped_, const CStringPtr& speech_name_, const CStringPtr& speech_param_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8E04FEDD28D42462);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(speech_name_.ptr);
    ctx->Push(speech_param_.ptr);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success hint_ambient_audio_bank(bool* native_return, const CStringPtr& audio_bank_, bool p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8F8C0E370AE62F5C);
    ctx->Reset();

    ctx->Push(audio_bank_.ptr);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ambient_speech_playing(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9072C8B49907BFAD);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stop_synchronized_audio_event(bool* native_return, i32 scene_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x92D6A88E64A94430);
    ctx->Reset();

    ctx->Push(scene_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ambient_speech_disabled(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x932C2D096A2C3FFF);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success init_synch_scene_audio_with_entity(const CStringPtr& audio_event_, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x950A154B8DAB6185);
    ctx->Reset();

    ctx->Push(audio_event_.ptr);
    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_is_drunk(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x95D2D383D5396B8A);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_ped_to_conversation(i32 index_, u32 ped_, const CStringPtr& p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x95D9F4BC443956E7);
    ctx->Reset();

    ctx->Push(index_);
    ctx->Push(ped_);
    ctx->Push(p2_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success skip_to_next_scripted_conversation_line() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9663FE6B7A61EB00);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ambient_zone_list_state(const CStringPtr& ambient_zone_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9748FA4DE50CCE3E);
    ctx->Reset();

    ctx->Push(ambient_zone_.ptr);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_force_reverse_warning(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x97FFB4ADEED08066);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ambient_voice_name_hash(u32 ped_, u32 hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9A53DED9921DE990);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success unhint_script_audio_bank() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9AC92EED5E4793AB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success restart_scripted_conversation() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9AEB285D1818C9AC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_conversations_persist_new(bool p0_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9BD7BD55E4533183);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_horn_permanently_on(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9C11908013EA4715);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_horn_permanently_on_time(u32 vehicle_, f32 time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D3AF56E94C9AE98);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_ped_speaking(u32 ped_, bool shaking_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D64D7405520E3D3);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(shaking_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_horn_active(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D6BFC12B05C6121);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success prepare_alarm(bool* native_return, const CStringPtr& alarm_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D74AE343DB65533);
    ctx->Reset();

    ctx->Push(alarm_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success interrupt_conversation(u32 ped_, const CStringPtr& voiceline_, const CStringPtr& speaker_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA018A12E5C5C2FA6);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(voiceline_.ptr);
    ctx->Push(speaker_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_music_oneshot_playing(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA097AB275061FB21);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_radio_retuning(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA151A7394A214E65);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stop_alarm(const CStringPtr& alarm_name_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA1CADDCD98415A41);
    ctx->Reset();

    ctx->Push(alarm_name_.ptr);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_sound(i32 sound_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA3B0C41BA5CC0BB5);
    ctx->Reset();

    ctx->Push(sound_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_stream() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA4718A1419D18151);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_gender(u32 ped_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA5342D390CDA41D6);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_radio_station_genre(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA571991A7FE6CCEB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_audio_script_cleanup_time(i32 time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA5F377B175A699C5);
    ctx->Reset();

    ctx->Push(time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_radio_to_station_index(i32 radio_station_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA619B168B8A8570F);
    ctx->Reset();

    ctx->Push(radio_station_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success unregister_script_with_audio() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA8638BE228D4751A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success block_speech_context_group(const CStringPtr& p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA8A7D434AFB4B97B);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_ped_pain_audio(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA9A41C1E940FB0E8);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_variation_chosen_for_scripted_line(i32* native_return, void* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA19F5572C38B564);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success stop_ped_speaking_synced(u32 ped_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAB6781A5F3101470);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_default_horn_ignore_mods(u32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xACB5DCCA1EC76840);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_emitter_radio_station(const CStringPtr& emitter_name_, const CStringPtr& radio_station_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xACF57305B12AF907);
    ctx->Reset();

    ctx->Push(emitter_name_.ptr);
    ctx->Push(radio_station_.ptr);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_variable_on_sound(i32 sound_id_, const CStringPtr& unk_variable_, f32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAD6B3148A78AE9B6);
    ctx->Reset();

    ctx->Push(sound_id_);
    ctx->Push(unk_variable_.ptr);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_mission_complete_audio(const CStringPtr& audio_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB138AAB8A70D3C69);
    ctx->Reset();

    ctx->Push(audio_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success unlock_mission_news_story(i32 news_story_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB165AB7C248B2DC1);
    ctx->Reset();

    ctx->Push(news_story_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_radio_station_name(CStringPtr& native_return, i32 radio_station_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB28ECA15046CA8B9);
    ctx->Reset();

    ctx->Push(radio_station_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success clear_all_broken_glass() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB32209EFFDC04913);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_mobile_phone_radio_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB35CE999E8EF317E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_radio_track(const CStringPtr& radio_station_, const CStringPtr& radio_track_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB39786F201FEE30B);
    ctx->Reset();

    ctx->Push(radio_station_.ptr);
    ctx->Push(radio_track_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_portal_settings_override(const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB4BBFD9CD8B3922B);
    ctx->Reset();

    ctx->Push(p0_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cancel_all_police_reports() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB4F90FAF7670B16F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_no_ducking_for_conversation(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB542DE8C3D1CB210);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_audio_scene_active(bool* native_return, const CStringPtr& scene_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB65B60556E2A9225);
    ctx->Reset();

    ctx->Push(scene_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_microphone_position(bool toggle_, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 x3_, f32 y3_, f32 z3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB6AE90EDDE95C762);
    ctx->Reset();

    ctx->Push(toggle_);
    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(x3_);
    ctx->Push(y3_);
    ctx->Push(z3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_stream_from_vehicle(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB70374A758007DFA);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success enable_stunt_jump_audio() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB81CF134AEB56FFB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_current_playing_ambient_speech(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB8BEC0CA6F0EDB0F);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_audio_flag(const CStringPtr& flag_name_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB9EFD5C25018725A);
    ctx->Reset();

    ctx->Push(flag_name_.ptr);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_audio_scenes() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBAC7FC81A75EC1A1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_radio_loud(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBB6F1CAEC68B0BCE);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_pain(u32 ped_, i32 pain_i_d_, i32 p1_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBC9AE166038A5CEC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(pain_i_d_);
    ctx->Push(p1_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_variable_on_synch_scene_audio(const CStringPtr& unk_variable_name_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBCC29F935ED07688);
    ctx->Reset();

    ctx->Push(unk_variable_name_.ptr);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ambient_zone_state(const CStringPtr& zone_name_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBDA07E5950085E46);
    ctx->Reset();

    ctx->Push(zone_name_.ptr);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_skip_minigun_spin_up_audio(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBEF34B1D9624D5DD);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_mobile_phone_radio_state(bool state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBF286C554784F3DF);
    ctx->Reset();

    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success use_footstep_script_sweeteners(u32 ped_, bool p1_, u32 hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBF4DC1784BE94DFA);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success enable_stall_warning_sounds(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC15907D667F7CFB2);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_veh_forced_radio_this_frame(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC1805D05E6D4FE10);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_radio_auto_unfreeze(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC1AA9F53CE982990);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_animal_vocalization_playing(bool* native_return, u32 ped_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC265DF9FB44A9FBD);
    ctx->Reset();

    ctx->Push(ped_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success add_line_to_conversation(i32 index_, const CStringPtr& p1_, const CStringPtr& p2_, i32 p3_, i32 p4_, bool p5_, bool p6_, bool p7_, bool p8_, i32 p9_, bool p10_, bool p11_, bool p12_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC5EF963405593646);
    ctx->Reset();

    ctx->Push(index_);
    ctx->Push(p1_.ptr);
    ctx->Push(p2_.ptr);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(p10_);
    ctx->Push(p11_);
    ctx->Push(p12_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_next_audible_beat(bool* native_return, f32* out1_, f32* out2_, i32* out3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC64A06D939F826F5);
    ctx->Reset();

    ctx->Push(out1_);
    ctx->Push(out2_);
    ctx->Push(out3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success play_ped_ambient_speech_and_clone_native(u32 ped_, const CStringPtr& speech_name_, const CStringPtr& speech_param_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC6941B4A3A8FBBB9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(speech_name_.ptr);
    ctx->Push(speech_param_.ptr);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_radio_to_station_name(const CStringPtr& station_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC69EDA28699D5107);
    ctx->Reset();

    ctx->Push(station_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success register_script_with_audio(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC6ED9D5092438D91);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success prepare_synchronized_audio_event(bool* native_return, const CStringPtr& audio_event_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC7ABCACA4985A766);
    ctx->Reset();

    ctx->Push(audio_event_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_mobile_interference_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC8B1B2425604CDD0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success init_synch_scene_audio_with_position(const CStringPtr& audio_event_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC8EDE9BDBCCBA6D4);
    ctx->Reset();

    ctx->Push(audio_event_.ptr);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success preload_vehicle_audio_bank(u32 vehicle_model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCA4CEA6AE0000A7E);
    ctx->Reset();

    ctx->Push(vehicle_model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_deferred_sound_frontend(const CStringPtr& sound_name_, const CStringPtr& soundset_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCADA5A0D0702381E);
    ctx->Reset();

    ctx->Push(sound_name_.ptr);
    ctx->Push(soundset_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_animal_mood(u32 animal_, i32 mood_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCC97B29285B1DC3B);
    ctx->Reset();

    ctx->Push(animal_);
    ctx->Push(mood_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_scripted_speech_playing(bool* native_return, u32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCC9AA18DCC7084F4);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success play_end_credits_music(bool play_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCD536C4D33DCC900);
    ctx->Reset();

    ctx->Push(play_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success release_weapon_audio() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCE4AC0439F607045);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success activate_audio_slowmo_mode(const CStringPtr& mode_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD01005D2BA2EB778);
    ctx->Reset();

    ctx->Push(mode_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_stream_playing(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD11FA52EB849D978);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success create_new_scripted_conversation() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD2C91A0B572AAE56);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success override_player_ground_material(u32 hash_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD2CC78CD3D0B50F9);
    ctx->Reset();

    ctx->Push(hash_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_vehicle_startup_rev_sound(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD2DCCD8E16E20997);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_horn_sound_index(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD53F3A29BCE2580E);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success freeze_microphone() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD57AAAE0E2214D11);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_scripted_conversation(i32* native_return, bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD79DEEFB53455EBA);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_positioned_player_vehicle_radio_emitter_enabled(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDA07819E452FFE8F);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_radio_retune_down() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDD6BCF9E94425DF9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success deactivate_audio_slowmo_mode(const CStringPtr& mode_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDDC635D5B3262C56);
    ctx->Reset();

    ctx->Push(mode_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_scripted_conversation_loaded(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDF0D54BE7A776737);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stop_audio_scene(const CStringPtr& scene_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDFE8422B3B94E688);
    ctx->Reset();

    ctx->Push(scene_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_police_report(i32* native_return, const CStringPtr& name_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDFEBD56D9BD1EB16);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success stop_smoke_grenade_explosion_sounds() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE4E6DD5566D28C82);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_audio_vehicle_priority(u32 vehicle_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE5564483E407F914);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_sound_from_entity(i32 sound_id_, const CStringPtr& audio_name_, u32 entity_, const CStringPtr& audio_ref_, bool is_network_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE65F427EB70AB1ED);
    ctx->Reset();

    ctx->Push(sound_id_);
    ctx->Push(audio_name_.ptr);
    ctx->Push(entity_);
    ctx->Push(audio_ref_.ptr);
    ctx->Push(is_network_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_is_preloaded_conversation_ready(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE73364DB90778FFA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success reset_trevor_rage() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE78503B10C4314E0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_music_playtime(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE7A0D23DC414507B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_player_radio_station_index(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE8AF77C4C06ADC93);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_player_angry(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEA241BB04110F091);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_stream_from_object(u32 object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEBAA9B64D76356FD);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_ambient_speech_from_position_native(const CStringPtr& speech_name_, const CStringPtr& voice_name_, f32 x_, f32 y_, f32 z_, const CStringPtr& speech_param_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xED640017ED337E45);
    ctx->Reset();

    ctx->Push(speech_name_.ptr);
    ctx->Push(voice_name_.ptr);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(speech_param_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_animal_vocalization(u32 ped_handle_, i32 p1_, const CStringPtr& speech_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEE066C7006C49C0A);
    ctx->Reset();

    ctx->Push(ped_handle_);
    ctx->Push(p1_);
    ctx->Push(speech_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_audio_scene_variable(const CStringPtr& scene_, const CStringPtr& unk_variable_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEF21A9EF089A2668);
    ctx->Reset();

    ctx->Push(scene_.ptr);
    ctx->Push(unk_variable_.ptr);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success block_death_jingle(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF154B8D1775B2DEC);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_num_unlocked_radio_stations(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF1620ECB50E01DE7);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_vehicle_startup_rev_sound(u32 vehicle_, const CStringPtr& p1_, const CStringPtr& p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF1F8157B8C3F171C);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_.ptr);
    ctx->Push(p2_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success override_underwater_stream(const CStringPtr& p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF2A9CDABCEA04BD6);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_missile_warning_enabled(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF3365489E0DD50F9);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ambient_zone_list_state_persistent(const CStringPtr& ambient_zone_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF3638DAE8C4045E1);
    ctx->Reset();

    ctx->Push(ambient_zone_.ptr);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_ped_audio_flags(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF54BB7B61036F335);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_siren_bypass_mp_driver_check(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF584CF8529B51434);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_radio_station_name(CStringPtr& native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF6D733C32076AD03);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success set_frontend_radio_active(bool active_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF7F26C6E9CC9EBB8);
    ctx->Reset();

    ctx->Push(active_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success block_all_speech_from_ped(u32 ped_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF8AD2EED7C47E8FE);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_ped_ringtone(const CStringPtr& ringtone_name_, u32 ped_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF9E56683CA8E11A5);
    ctx->Reset();

    ctx->Push(ringtone_name_.ptr);
    ctx->Push(ped_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success use_siren_as_horn(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFA932DE350266EF8);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success hint_script_audio_bank(bool* native_return, const CStringPtr& audio_bank_, bool p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFB380A29641EC31A);
    ctx->Reset();

    ctx->Push(audio_bank_.ptr);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success record_broken_glass(f32 x_, f32 y_, f32 z_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFBE20329593DEC9D);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success unfreeze_radio_station(const CStringPtr& radio_station_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFC00454CF60B91DD);
    ctx->Reset();

    ctx->Push(radio_station_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_sound_finished(bool* native_return, i32 sound_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFCBDCE714A7C88E5);
    ctx->Reset();

    ctx->Push(sound_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success request_ambient_audio_bank(bool* native_return, const CStringPtr& audio_bank_, bool p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFE02FFBED8CA9D99);
    ctx->Reset();

    ctx->Push(audio_bank_.ptr);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_radio_retune_up() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFF266D1D0EB1195D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success lock_radio_station_track_list(const CStringPtr& radio_station_, const CStringPtr& track_list_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFF5E5EA2DCEEACF3);
    ctx->Reset();

    ctx->Push(radio_station_.ptr);
    ctx->Push(track_list_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reactivate_all_world_brains_that_are_waiting_till_out_of_range() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0B40ED49D7D6FF84);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success register_object_script_brain(const CStringPtr& script_name_, u32 model_hash_, i32 p2_, f32 activation_range_, i32 p4_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0BE84C318BA6EC22);
    ctx->Reset();

    ctx->Push(script_name_.ptr);
    ctx->Push(model_hash_);
    ctx->Push(p2_);
    ctx->Push(activation_range_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_script_brain_set(i32 brain_set_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x14D8518E9760F08F);
    ctx->Reset();

    ctx->Push(brain_set_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success register_world_point_script_brain(const CStringPtr& script_name_, f32 activation_range_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3CDC7136613284BD);
    ctx->Reset();

    ctx->Push(script_name_.ptr);
    ctx->Push(activation_range_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reactivate_all_object_brains_that_are_waiting_till_out_of_range() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4D953DF78EBF8158);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_script_to_random_ped(const CStringPtr& name_, u32 model_, f32 p2_, f32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4EE5367468A65CCC);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(model_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success enable_script_brain_set(i32 brain_set_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x67AA4D73F0CFA86B);
    ctx->Reset();

    ctx->Push(brain_set_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reactivate_named_world_brains_waiting_till_out_of_range(const CStringPtr& script_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6D6840CEE8845831);
    ctx->Reset();

    ctx->Push(script_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reactivate_named_object_brains_waiting_till_out_of_range(const CStringPtr& script_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6E91B04E08773030);
    ctx->Reset();

    ctx->Push(script_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_world_point_within_brain_activation_range(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC5042CC6F5E3D450);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_object_within_brain_activation_range(bool* native_return, u32 object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCCBA154209823057);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_gameplay_cam_shaking(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x016C090630DF1F89);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_gameplay_cam_max_motion_blur_strength_this_update(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0225778816FDC28C);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cam_active(i32 cam_, bool active_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x026FB97D0A425F84);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(active_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_cam_spline_paused(bool* native_return, i32 cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0290F35C0AD97864);
    ctx->Reset();

    ctx->Push(cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_cam_rendering(bool* native_return, i32 cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x02EC0AF5C5A49B7A);
    ctx->Reset();

    ctx->Push(cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_cam_interpolating(bool* native_return, i32 cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x036F97C908C2B52C);
    ctx->Reset();

    ctx->Push(cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_cam_dof_strength(f32* native_return, i32 cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x06D153C0B99B6128);
    ctx->Reset();

    ctx->Push(cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success render_script_cams(bool render_, bool ease_, i32 ease_time_, bool p3_, bool p4_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x07E5B515DB0636FC);
    ctx->Reset();

    ctx->Push(render_);
    ctx->Push(ease_);
    ctx->Push(ease_time_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_cam_spline_node_using_camera_frame(i32 cam_, i32 cam2_, i32 length_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A9F2A468B328E74);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(cam2_);
    ctx->Push(length_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_vehicle_cam_stunt_settings_this_update() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0AA27680A0BD43FA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_first_person_aim_cam_near_clip_this_update(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0AF7B437918103B3);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_gameplay_cam_shaking(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0EF93E9F3D08C178);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_cam_spline_node_using_camera(i32 cam_, i32 cam2_, i32 length_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0FB82563989CF4FB);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(cam2_);
    ctx->Push(length_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_first_person_shooter_camera_heading(f32 yaw_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x103991D4A307D472);
    ctx->Reset();

    ctx->Push(yaw_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_first_person_flash_effect_vehicle_model_hash(u32 vehicle_model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x11FA5D3479C7DD47);
    ctx->Reset();

    ctx->Push(vehicle_model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cutscene_cam_far_clip_this_update(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x12DED8CA53D47EA5);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cam_spline_duration(i32 cam_, i32 time_duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1381539FEE034CDA);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(time_duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success hard_attach_cam_to_ped_bone(i32 cam_, u32 ped_, i32 bone_index_, f32 p3_, f32 p4_, f32 p5_, f32 p6_, f32 p7_, f32 p8_, bool p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x149916F50C34A40D);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(ped_);
    ctx->Push(bone_index_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_gameplay_cam_coord(Vector3Wrapper& native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x14D6F5678D8F1B37);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success get_final_rendered_cam_motion_blur_strength(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x162F9D995753DC19);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_cam_use_shallow_dof_mode(i32 cam_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x16A96863A17552BB);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_cinematic_slow_mo_this_update(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x17FCA7199A530203);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_gameplay_entity_hint(u32 entity_, f32 x_offset_, f32 y_offset_, f32 z_offset_, bool p4_, i32 time_, i32 ease_in_time_, i32 ease_out_time_, i32 p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x189E955A8313E298);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(x_offset_);
    ctx->Push(y_offset_);
    ctx->Push(z_offset_);
    ctx->Push(p4_);
    ctx->Push(time_);
    ctx->Push(ease_in_time_);
    ctx->Push(ease_out_time_);
    ctx->Push(p8_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_follow_vehicle_cam_zoom_level(i32 zoom_level_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x19464CB6E4078C8A);
    ctx->Reset();

    ctx->Push(zoom_level_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_cam_active_view_mode_context(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x19CAFA3C87F7C2FF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success disable_aim_cam_this_update() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1A31FE0049E542F6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cam_debug_name(i32 camera_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1B93E0107865DD40);
    ctx->Reset();

    ctx->Push(camera_);
    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_script_global_shaking(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1C9D7949FA533490);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_in_vehicle_mobile_phone_camera_rendering(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1F2300CB7FA7B7F6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success hard_attach_cam_to_entity(i32 cam_, u32 entity_, f32 x_rot_, f32 y_rot_, f32 z_rot_, f32 x_offset_, f32 y_offset_, f32 z_offset_, bool is_relative_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x202A5ED9CE01D6E7);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(entity_);
    ctx->Push(x_rot_);
    ctx->Push(y_rot_);
    ctx->Push(z_rot_);
    ctx->Push(x_offset_);
    ctx->Push(y_offset_);
    ctx->Push(z_offset_);
    ctx->Push(is_relative_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_first_person_flash_effect_vehicle_model_name(const CStringPtr& vehicle_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x21E253A7F8DA5DFB);
    ctx->Reset();

    ctx->Push(vehicle_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_cinematic_cam_shaking(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2238E588E588A6D7);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cam_spline_phase(i32 cam_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x242B5874F0A4E052);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_code_gameplay_hint(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x247ACBC4ABBC9D1C);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_cam_far_dof(f32* native_return, i32 cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x255F8DAFD540D397);
    ctx->Reset();

    ctx->Push(cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_final_rendered_remote_player_cam_rot(Vector3Wrapper& native_return, u32 player_, i32 rotation_order_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x26903D9CD1175F2C);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(rotation_order_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success allow_motion_blur_decay(i32 p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x271017B9BA825366);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success use_script_cam_for_ambient_population_origin_this_frame(bool p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x271401846BD26E92);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_bonnet_camera_relative_heading_and_pitch(f32 p0_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x28B022A17B068A3A);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cam_view_mode_for_context(i32 context_, i32 view_mode_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2A2173E46DAECD12);
    ctx->Reset();

    ctx->Push(context_);
    ctx->Push(view_mode_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_gameplay_cam_ignore_entity_collision_this_update(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2AED6301F67007D5);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_gameplay_ped_hint(u32 ped_, f32 x1_, f32 y1_, f32 z1_, bool p4_, i32 duration_, i32 blend_out_duration_, i32 blend_in_duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B486269ACD548D3);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(p4_);
    ctx->Push(duration_);
    ctx->Push(blend_out_duration_);
    ctx->Push(blend_in_duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cam_dof_max_near_in_focus_distance_blend_level(i32 camera_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2C654B4943BDDF7C);
    ctx->Reset();

    ctx->Push(camera_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_first_person_aim_cam_relative_heading_limits_this_update(f32 p0_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2F7F2B26DD3F18EE);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_interpolating_from_script_cams(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3044240D2E0FA842);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stop_cutscene_cam_shaking(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x324C5AA411DA7737);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_follow_ped_cam_zoom_level(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x33E6C8EFD0CD93E9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success force_tightspace_custom_framing_this_update() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x380B4968D1E09E55);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_gameplay_cam_rendering(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x39B5D1B10383F0C8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_gameplay_cam_relative_pitch(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3A6867B4845BEDA2);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_cam_dof_planes(i32 cam_, f32 p1_, f32 p2_, f32 p3_, f32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3CF48F6F96E749DC);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cam_near_dof(i32 cam_, f32 near_d_o_f_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3FA4BF0A7AB7DE2C);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(near_d_o_f_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_allow_custom_vehicle_drive_by_cam_this_update(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4008EDF7D6E48175);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success override_cam_spline_velocity(i32 cam_, i32 p1_, f32 p2_, f32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x40B62FA033EB0346);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cam_anim_current_phase(i32 cam_, f32 phase_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4145A4C44FF3B5A6);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(phase_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_third_person_aim_cam_near_clip_this_update(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x42156508606DE65E);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success use_dedicated_stunt_camera_this_update(const CStringPtr& cam_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x425A920FDB9A0DDA);
    ctx->Reset();

    ctx->Push(cam_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_follow_ped_cam_this_update(bool* native_return, const CStringPtr& cam_name_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x44A113DD6FFC48D1);
    ctx->Reset();

    ctx->Push(cam_name_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_cam_inherit_roll_vehicle(i32 cam_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x45F1DE9C34B93AE6);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_scripted_camera_is_first_person_this_frame(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x469F2ECDEC046337);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cam_dof_focal_length_multiplier(i32 camera_, f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x47B595D60664CFFA);
    ctx->Reset();

    ctx->Push(camera_);
    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_camera_relative_heading_and_pitch(f32 roll_, f32 pitch_, f32 yaw_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x48608C3464F58AB4);
    ctx->Reset();

    ctx->Push(roll_);
    ctx->Push(pitch_);
    ctx->Push(yaw_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success are_widescreen_borders_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4879E4FE39074CDF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_gameplay_cam_motion_blur_scaling_this_update(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x487A82C650EB7799);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_cam_collision_for_object(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x49482F9FCD825AAA);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cam_coord(i32 cam_, f32 pos_x_, f32 pos_y_, f32 pos_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4D41783FB745E42E);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_cinematic_first_person_vehicle_interior_cam_rendering(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4F32C0D5A90A9B40);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_fly_cam_horizontal_response(i32 cam_, f32 p1_, f32 p2_, f32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x503F5920162365B2);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_gameplay_hint_fov(f32 f_o_v_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x513403FB9C56211F);
    ctx->Reset();

    ctx->Push(f_o_v_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cinematic_button_active(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x51669F7D1FB53D9F);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_rendering_cam(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5234F9F10919EABA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success point_cam_at_entity(i32 cam_, u32 entity_, f32 p2_, f32 p3_, f32 p4_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5640BFF86B16E8DC);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(entity_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_first_person_flash_effect_this_update() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x59424BD75174C9B1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_near_clip_scan_this_update() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5A43C76F7FC7BA5F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_follow_ped_cam_view_mode(i32 view_mode_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5A4F9EDF1673F704);
    ctx->Reset();

    ctx->Push(view_mode_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_screen_faded_in(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5A859503B0C08678);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_final_rendered_cam_rot(Vector3Wrapper& native_return, i32 rotation_order_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5B4E4C817FCC2DFB);
    ctx->Reset();

    ctx->Push(rotation_order_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success set_first_person_flash_effect_type(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5C41E6BABC9E2112);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success was_fly_cam_constrained_on_previous_udpate(bool* native_return, i32 cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5C48A1D6E3B33179);
    ctx->Reset();

    ctx->Push(cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_screen_fading_in(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5C544BC6C57AC575);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_follow_vehicle_cam_seat_this_update(i32 seat_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5C90CAB09951A12F);
    ctx->Reset();

    ctx->Push(seat_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_gameplay_hint_camera_relative_side_offset(f32 x_offset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5D7B620DAE436138);
    ctx->Reset();

    ctx->Push(x_offset_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success trigger_vehicle_part_broken_camera_shake(u32 vehicle_, i32 p1_, f32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5D96CFB59DA076A0);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_first_person_aim_cam_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5E346D934122613F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success create_camera(i32* native_return, u32 cam_hash_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5E3CF89C6BCCA67D);
    ctx->Reset();

    ctx->Push(cam_hash_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_cam_dof_strength(i32 cam_, f32 dof_strength_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5EE29B4D7D5DF897);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(dof_strength_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_final_rendered_remote_player_cam_fov(f32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5F35F6732C3FBBA0);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success add_cam_spline_node_using_gameplay_frame(i32 cam_, i32 length_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x609278246A29CA34);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(length_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success attach_cam_to_ped_bone(i32 cam_, u32 ped_, i32 bone_index_, f32 x_, f32 y_, f32 z_, bool heading_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x61A3DBA14AB7F411);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(ped_);
    ctx->Push(bone_index_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(heading_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success camera_prevent_collision_settings_for_triplehead_in_interiors_this_update() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x62374889A4D59F72);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_cinematic_vehicle_idle_mode_this_update() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x62ECFCFDEE7885D6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success use_vehicle_cam_stunt_settings_this_update() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6493CF69859B116A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_gameplay_cam_fov(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x65019750A0324133);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_cam_controls_mini_map_heading(i32 cam_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x661B5C8654ADD825);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success point_cam_at_ped_bone(i32 cam_, u32 ped_, i32 bone_index_, f32 x_, f32 y_, f32 z_, bool p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x68B2B5F33BA63C41);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(ped_);
    ctx->Push(bone_index_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_aim_cam_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x68EDDA28A5976D07);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success shake_cam(i32 cam_, const CStringPtr& type_, f32 amplitude_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6A25241C340D3822);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(type_.ptr);
    ctx->Push(amplitude_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_camera_with_params(i32* native_return, u32 cam_hash_, f32 pos_x_, f32 pos_y_, f32 pos_z_, f32 rot_x_, f32 rot_y_, f32 rot_z_, f32 fov_, bool p8_, i32 p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6ABFA3E16460F22D);
    ctx->Reset();

    ctx->Push(cam_hash_);
    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);
    ctx->Push(fov_);
    ctx->Push(p8_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_cam_shaking(bool* native_return, i32 cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6B24BFE83A2BE47B);
    ctx->Reset();

    ctx->Push(cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_gameplay_cam_relative_pitch(f32 angle_, f32 scaling_factor_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6D0858B8EDFD2B7D);
    ctx->Reset();

    ctx->Push(angle_);
    ctx->Push(scaling_factor_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cam_motion_blur_strength(i32 cam_, f32 strength_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6F0F77FBA9A8F2E6);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(strength_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_interpolating_to_script_cams(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x705A276EBFF3133D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_first_person_aim_cam_zoom_factor(f32 zoom_factor_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x70894BD0915C5BCA);
    ctx->Reset();

    ctx->Push(zoom_factor_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_gameplay_cam_looking_behind(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x70FDA869F3317EA9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success reset_gameplay_cam_full_attach_parent_transform_timer() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7295C203DD659DFE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_use_hi_dof_on_synced_scene_this_update() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x731A880555DA3647);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_cinematic_shot(u32 p0_, i32 time_, bool p2_, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x741B0129D4560F31);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(time_);
    ctx->Push(p2_);
    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_gameplay_cam_relative_heading(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x743607648ADD4587);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success is_aim_cam_active_in_accurate_mode(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x74BD83EA840F6BC9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_first_person_shooter_camera_pitch(f32 pitch_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x759E13EBC1C15C5A);
    ctx->Reset();

    ctx->Push(pitch_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_cinematic_shot(u32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7660C6E75D3A078E);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_debug_cam(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x77C3CEC46BE286F6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_screen_fading_out(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x797AC7CB535BA28F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_table_games_camera_this_update(bool* native_return, u32 hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x79C0E43EB9B944E2);
    ctx->Reset();

    ctx->Push(hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ignore_menu_preference_for_bonnet_camera_this_update() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7B8A361C1813FBEF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cam_spline_node_extra_flags(i32 cam_, i32 p1_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7BF1A54AE67AC070);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(p1_);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_cam_rot(Vector3Wrapper& native_return, i32 cam_, i32 rotation_order_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7D304C1C955E3E12);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(rotation_order_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success override_cam_spline_motion_blur(i32 cam_, i32 p1_, f32 p2_, f32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7DCF7C708D292D55);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cam_dof_fnumber_of_lens(i32 camera_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7DD234D6F3914C5B);
    ctx->Reset();

    ctx->Push(camera_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_first_person_aim_cam_zoom_factor(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7EC52CC40597D170);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_cam_death_fail_effect_state(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x80C8B1846639BB19);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_final_rendered_cam_fov(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x80EC114669DAEFF4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_gameplay_cam_rot(Vector3Wrapper& native_return, i32 rotation_order_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x837765A25378F0BB);
    ctx->Reset();

    ctx->Push(rotation_order_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success set_cam_spline_node_ease(i32 cam_, i32 easing_function_, i32 p2_, f32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x83B8201ED82A9A2D);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(easing_function_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_gameplay_object_hint(u32 object_, f32 x_offset_, f32 y_offset_, f32 z_offset_, bool p4_, i32 time_, i32 ease_in_time_, i32 ease_out_time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x83E87508A2CA2AC6);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(x_offset_);
    ctx->Push(y_offset_);
    ctx->Push(z_offset_);
    ctx->Push(p4_);
    ctx->Push(time_);
    ctx->Push(ease_in_time_);
    ctx->Push(ease_out_time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cam_rot(i32 cam_, f32 rot_x_, f32 rot_y_, f32 rot_z_, i32 rotation_order_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x85973643155D0B07);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);
    ctx->Push(rotation_order_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_cam_spline_node(i32 camera_, f32 x_, f32 y_, f32 z_, f32 x_rot_, f32 y_rot_, f32 z_rot_, i32 length_, i32 smoothing_style_, i32 rotation_order_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8609C75EC438FB3B);
    ctx->Reset();

    ctx->Push(camera_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(x_rot_);
    ctx->Push(y_rot_);
    ctx->Push(z_rot_);
    ctx->Push(length_);
    ctx->Push(smoothing_style_);
    ctx->Push(rotation_order_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success destroy_cam(i32 cam_, bool b_script_host_cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x865908C81A2C22E9);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(b_script_host_cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success do_screen_fade_out(i32 duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x891B5B39AC6302AF);
    ctx->Reset();

    ctx->Push(duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_focus_ped_on_screen(u32* native_return, f32 p0_, i32 p1_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, f32 p6_, i32 p7_, i32 p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x89215EC747DF244A);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_gameplay_cam_follow_ped_this_update(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8BBACBF51DA047A8);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success replay_get_max_distance_allowed_from_player(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8BFCEB5EA1B161B6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_cam_affects_aiming(i32 cam_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8C1DC7770C51DC8D);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_follow_ped_cam_view_mode(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8D4D46230B2C353A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success attach_cam_to_vehicle_bone(i32 cam_, u32 vehicle_, i32 bone_index_, bool relative_rotation_, f32 rot_x_, f32 rot_y_, f32 rot_z_, f32 offset_x_, f32 offset_y_, f32 offset_z_, bool fixed_direction_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8DB3F12A02CAEF72);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(vehicle_);
    ctx->Push(bone_index_);
    ctx->Push(relative_rotation_);
    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);
    ctx->Push(offset_x_);
    ctx->Push(offset_y_);
    ctx->Push(offset_z_);
    ctx->Push(fixed_direction_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success destroy_all_cams(bool b_script_host_cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8E5FB15663F79120);
    ctx->Reset();

    ctx->Push(b_script_host_cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_third_person_cam_relative_heading_limits_this_update(f32 minimum_, f32 maximum_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8F993D26E0CA5E8E);
    ctx->Reset();

    ctx->Push(minimum_);
    ctx->Push(maximum_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_follow_vehicle_cam_high_angle_mode_this_update(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x91EF6EE6419E5B97);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_final_rendered_cam_far_dof(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9780F32BCAF72431);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success play_cam_anim(bool* native_return, i32 cam_, const CStringPtr& anim_name_, const CStringPtr& anim_dictionary_, f32 x_, f32 y_, f32 z_, f32 x_rot_, f32 y_rot_, f32 z_rot_, bool p9_, i32 p10_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9A2D0FB2E7852392);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(anim_name_.ptr);
    ctx->Push(anim_dictionary_.ptr);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(x_rot_);
    ctx->Push(y_rot_);
    ctx->Push(z_rot_);
    ctx->Push(p9_);
    ctx->Push(p10_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_follow_vehicle_cam_high_angle_mode_every_update(bool p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9DFE13ECDC1EC196);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success invalidate_cinematic_vehicle_idle_mode() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9E4CFFF989258472);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success block_first_person_orientation_reset_this_update() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9F97DA93681F87EA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cam_active_with_interp(i32 cam_to_, i32 cam_from_, i32 duration_, i32 ease_location_, i32 ease_rotation_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9FBDA379383A52A4);
    ctx->Reset();

    ctx->Push(cam_to_);
    ctx->Push(cam_from_);
    ctx->Push(duration_);
    ctx->Push(ease_location_);
    ctx->Push(ease_rotation_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_final_rendered_cam_near_dof(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA03502FC581F7D9B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_cam_anim_current_phase(f32* native_return, i32 cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA10B2DB49E92A6B0);
    ctx->Reset();

    ctx->Push(cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_use_hi_dof() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA13B0222F3D94A94);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_final_rendered_cam_coord(Vector3Wrapper& native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA200EB1EE790F448);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success set_gameplay_vehicle_hint(u32 vehicle_, f32 offset_x_, f32 offset_y_, f32 offset_z_, bool p4_, i32 time_, i32 ease_in_time_, i32 ease_out_time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA2297E18F3E71C2E);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(offset_x_);
    ctx->Push(offset_y_);
    ctx->Push(offset_z_);
    ctx->Push(p4_);
    ctx->Push(time_);
    ctx->Push(ease_in_time_);
    ctx->Push(ease_out_time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success animated_shake_cam(i32 cam_, const CStringPtr& p1_, const CStringPtr& p2_, const CStringPtr& p3_, f32 amplitude_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA2746EEAE3E577CD);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(p1_.ptr);
    ctx->Push(p2_.ptr);
    ctx->Push(p3_.ptr);
    ctx->Push(amplitude_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cam_is_inside_vehicle(i32 cam_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA2767257A320FC82);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success detach_cam(i32 cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA2FABBE87F4BAD82);
    ctx->Reset();

    ctx->Push(cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_cinematic_rendering_this_update(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA41BCD7213805AAC);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_follow_vehicle_cam_view_mode(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA4FF579AC0E3AAAE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_third_person_cam_relative_pitch_limits_this_update(f32 minimum_, f32 maximum_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA516C198B7DCA1E1);
    ctx->Reset();

    ctx->Push(minimum_);
    ctx->Push(maximum_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cam_spline_node_velocity_scale(i32 cam_, i32 p1_, f32 scale_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA6385DEB180F319F);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(p1_);
    ctx->Push(scale_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success bypass_camera_collision_buoyancy_test_this_update() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA7092AFE81944852);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_cam_exist(bool* native_return, i32 cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA7A932170592B50E);
    ctx->Reset();

    ctx->Push(cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_gameplay_cam_shake_amplitude(f32 amplitude_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA87E00932DB4D85D);
    ctx->Reset();

    ctx->Push(amplitude_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_cam_far_clip(i32 cam_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAABD62873FFB1A33);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_follow_vehicle_cam_view_mode(i32 view_mode_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAC253D7842768F48);
    ctx->Reset();

    ctx->Push(view_mode_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_cinematic_bonnet_camera_this_update() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xADFF1B2A555F5FBA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cam_far_clip(i32 cam_, f32 far_clip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAE306F2A904BF86E);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(far_clip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_first_person_camera_water_clipping_test_this_update() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB1381B97F70C7B30);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cam_fov(i32 cam_, f32 field_of_view_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB13C14F66A00D047);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(field_of_view_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_cinematic_cam_rendering(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB15162CB5826E9E8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_screen_faded_out(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB16FCE9DDC7BA182);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_cam_spline_node_index(i32* native_return, i32 cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB22B17DF858716A6);
    ctx->Reset();

    ctx->Push(cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_gameplay_cam_relative_heading(f32 heading_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB4EC2312F4E5B1F1);
    ctx->Reset();

    ctx->Push(heading_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_cam_with_params(i32* native_return, const CStringPtr& cam_name_, f32 pos_x_, f32 pos_y_, f32 pos_z_, f32 rot_x_, f32 rot_y_, f32 rot_z_, f32 fov_, bool p8_, i32 p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB51194800B257161);
    ctx->Reset();

    ctx->Push(cam_name_.ptr);
    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);
    ctx->Push(fov_);
    ctx->Push(p8_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_cam_spline_phase(f32* native_return, i32 cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB5349E36C546509A);
    ctx->Reset();

    ctx->Push(cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_cam_far_clip(f32* native_return, i32 cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB60A9CFEB21CA6AA);
    ctx->Reset();

    ctx->Push(cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_cam_coord(Vector3Wrapper& native_return, i32 cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBAC038F7459AE5AE);
    ctx->Reset();

    ctx->Push(cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success is_cinematic_cam_shaking(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBBC08F6B4CB8FF0A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_first_person_aim_cam_relative_pitch_limits_this_update(f32 p0_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBCFC632DB7673BF0);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_cam_shaking(i32 cam_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBDECF64367884AC3);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_code_gameplay_hint_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBF72910D0F26F025);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_cam_params(i32 cam_, f32 pos_x_, f32 pos_y_, f32 pos_z_, f32 rot_x_, f32 rot_y_, f32 rot_z_, f32 field_of_view_, i32 p8_, i32 p9_, i32 p10_, i32 p11_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBFD8727AEA3CCEBA);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);
    ctx->Push(field_of_view_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(p10_);
    ctx->Push(p11_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_cam_near_dof(f32* native_return, i32 cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC2612D223D915A1C);
    ctx->Reset();

    ctx->Push(cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success animated_shake_script_global(const CStringPtr& p0_, const CStringPtr& p1_, const CStringPtr& p2_, f32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC2EAE3FB8CDBED31);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    ctx->Push(p1_.ptr);
    ctx->Push(p2_.ptr);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_cam_fov(f32* native_return, i32 cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC3330A45CCCDB26A);
    ctx->Reset();

    ctx->Push(cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_cam_dof_max_near_in_focus_distance(i32 camera_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC3654A441402562D);
    ctx->Reset();

    ctx->Push(camera_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_cam(i32* native_return, const CStringPtr& cam_name_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC3981DCE61D9E13F);
    ctx->Reset();

    ctx->Push(cam_name_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_cam_near_clip(f32* native_return, i32 cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC520A34DAFBF24B1);
    ctx->Reset();

    ctx->Push(cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_cam_dof_focus_distance_bias(i32 camera_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC669EEA5D031B7DE);
    ctx->Reset();

    ctx->Push(camera_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_follow_ped_cam_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC6D3D26810C8E0F9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_cinematic_cam_shake_amplitude(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC724C701C30B2FE7);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cam_near_clip(i32 cam_, f32 near_clip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC7848EFCCC545182);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(near_clip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_rendering_script_cams_using_catch_up(bool render_, f32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC819F3CBB62BF692);
    ctx->Reset();

    ctx->Push(render_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_follow_ped_cam_ladder_align_this_update() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC8391C309684595A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_fly_cam_vertical_controls_this_update(i32 cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC8B5C4A79CC18B94);
    ctx->Reset();

    ctx->Push(cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_cam_playing_anim(bool* native_return, i32 cam_, const CStringPtr& anim_name_, const CStringPtr& anim_dictionary_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC90621D8A0CEECF2);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(anim_name_.ptr);
    ctx->Push(anim_dictionary_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_script_global_shaking(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC912AF078AF19212);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_fly_cam_coord_and_constrain(i32 cam_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC91C6C55199308CA);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_gameplay_hint_camera_relative_vertical_offset(f32 y_offset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC92717EF615B6704);
    ctx->Reset();

    ctx->Push(y_offset_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_cinematic_idle_cam_rendering(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCA9D2AA3E326D720);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_follow_vehicle_cam_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCBBDE6D335D6D496);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_cinematic_shot_active(bool* native_return, u32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCC9F3371A7C28BC9);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stop_gameplay_hint_being_cancelled_this_update(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCCD078C2665D2973);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_first_person_aim_cam_zoom_factor_limits_this_update(f32 p0_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCED08CBE8EBB97C7);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_final_rendered_cam_near_clip(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD0082607100D7193);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_cam_spline_smoothing_style(i32 cam_, i32 smoothing_style_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD1B0F412F109EA5D);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(smoothing_style_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_gameplay_hint_base_orbit_pitch_offset(f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD1F8363DFAD03848);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success do_screen_fade_in(i32 duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD4E8E24955024033);
    ctx->Reset();

    ctx->Push(duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_gameplay_coord_hint(f32 x_, f32 y_, f32 z_, i32 duration_, i32 blend_out_duration_, i32 blend_in_duration_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD51ADCD2D8BC0FB3);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(duration_);
    ctx->Push(blend_out_duration_);
    ctx->Push(blend_in_duration_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_bonnet_cinematic_cam_rendering(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD7360051C885628B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_cam_shake_amplitude(i32 cam_, f32 amplitude_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD93DB43B82BC0D00);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(amplitude_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_cam_spline_node_phase(f32* native_return, i32 cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD9D0E694C8282C96);
    ctx->Reset();

    ctx->Push(cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success bypass_cutscene_cam_rendering_this_update() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDB629FFD9285FA06);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_gameplay_cam_altitude_fov_scaling_state(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDB90C6CCA48940F1);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cinematic_news_channel_active_this_update() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDC9DA9E8789F5246);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_widescreen_borders(bool p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDCD4EA924F42D01A);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success shake_cinematic_cam(const CStringPtr& shake_type_, f32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDCE214D9ED58F3CF);
    ctx->Reset();

    ctx->Push(shake_type_.ptr);
    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cinematic_mode_active(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDCF0754AC3D6FD4E);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_follow_cam_ignore_attach_parent_movement_this_update() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDD79DF9F4D26E1C9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_on_foot_first_person_view_this_update() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDE2EF5DA284CC8DF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_third_person_cam_orbit_distance_limits_this_update(f32 p0_, f32 distance_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDF2E1F7742402E81);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(distance_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_cam_active(bool* native_return, i32 cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDFB2B516207D3534);
    ctx->Reset();

    ctx->Push(cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_final_rendered_cam_far_clip(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDFC8CBC606FDB0FC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_cam_dof_overridden_focus_distance_blend_level(i32 p0_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE111A7C0D200CBC5);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_synchronized_cam_anim(bool* native_return, i32 p0_, i32 p1_, const CStringPtr& anim_name_, const CStringPtr& anim_dictionary_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE32EFE9AB4A9AA0C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(anim_name_.ptr);
    ctx->Push(anim_dictionary_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_sphere_visible(bool* native_return, f32 x_, f32 y_, f32 z_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE33D59DA70B58FDF);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_gameplay_hint_camera_blend_to_follow_ped_medium_view_mode(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE3433EADAAF7EE40);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_gameplay_hint_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE520FF1AD2785B40);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_fly_cam_vertical_response(i32 cam_, f32 p1_, f32 p2_, f32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE827B9382CFB41BA);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_in_vehicle_cam_state_this_update(u32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE9EA16D6E54CDCA4);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_gameplay_cam_altitude_fov_scaling_this_update() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEA7F0AD7E9BA676F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_allowed_independent_camera_modes(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEAF0FA793D05C592);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_cam_far_dof(i32 cam_, f32 far_d_o_f_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEDD91296CD01AEE0);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(far_d_o_f_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_cam_view_mode_for_context(i32* native_return, i32 context_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEE778F8C7E1142E2);
    ctx->Reset();

    ctx->Push(context_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_follow_vehicle_cam_zoom_level(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEE82280AB767B690);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success stop_cam_pointing(i32 cam_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF33AB75780BA57DE);
    ctx->Reset();

    ctx->Push(cam_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_gameplay_hint(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF46C581C61718916);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success shake_script_global(const CStringPtr& p0_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF4C8CF9E353AFECA);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success invalidate_idle_cam() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF4F2C0D4EE209E20);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cam_dof_overridden_focus_distance(i32 camera_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF55E4046F6F831DC);
    ctx->Reset();

    ctx->Push(camera_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_cinematic_cam_input_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF5F1E89A970B7796);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success point_cam_at_coord(i32 cam_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF75497BB865F0803);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_gameplay_hint_follow_distance_scalar(f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF8BDBF3D573049A1);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_fly_cam_max_height(i32 cam_, f32 height_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF9D02130ECDD1D77);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(height_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_gameplay_cam_entity_to_limit_focus_over_bounding_sphere_this_update(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFD3151CD37EA2245);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success shake_gameplay_cam(const CStringPtr& shake_name_, f32 intensity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFD55E49555E017CF);
    ctx->Reset();

    ctx->Push(shake_name_.ptr);
    ctx->Push(intensity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success attach_cam_to_entity(i32 cam_, u32 entity_, f32 x_offset_, f32 y_offset_, f32 z_offset_, bool is_relative_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFEDB7D269E8C60E3);
    ctx->Reset();

    ctx->Push(cam_);
    ctx->Push(entity_);
    ctx->Push(x_offset_);
    ctx->Push(y_offset_);
    ctx->Push(z_offset_);
    ctx->Push(is_relative_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_clock_minutes(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x13D2B8ADD79640F2);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_clock_hours(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x25223CA6B4D20B7F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_milliseconds_per_game_minute(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2F8B4D1C595B11DB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_clock_day_of_month(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3D10BC92A4DB1D35);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success pause_clock(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4055E40BD2DBEC1D);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_clock_time(i32 hour_, i32 minute_, i32 second_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x47C3B5848C3E45D8);
    ctx->Reset();

    ctx->Push(hour_);
    ctx->Push(minute_);
    ctx->Push(second_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_clock_seconds(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x494E97C2EF27C470);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_local_time(i32* year_, i32* month_, i32* day_, i32* hour_, i32* minute_, i32* second_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x50C7A99057A69748);
    ctx->Reset();

    ctx->Push(year_);
    ctx->Push(month_);
    ctx->Push(day_);
    ctx->Push(hour_);
    ctx->Push(minute_);
    ctx->Push(second_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_utc_time(i32* year_, i32* month_, i32* day_, i32* hour_, i32* minute_, i32* second_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8117E09A19EEF4D3);
    ctx->Reset();

    ctx->Push(year_);
    ctx->Push(month_);
    ctx->Push(day_);
    ctx->Push(hour_);
    ctx->Push(minute_);
    ctx->Push(second_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_clock_year(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x961777E64BDAF717);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_clock_date(i32 day_, i32 month_, i32 year_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB096419DF0D06CE7);
    ctx->Reset();

    ctx->Push(day_);
    ctx->Push(month_);
    ctx->Push(year_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_clock_month(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBBC72712E80257A1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success advance_clock_time_to(i32 hour_, i32 minute_, i32 second_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC8CA9670B9D83B3B);
    ctx->Reset();

    ctx->Push(hour_);
    ctx->Push(minute_);
    ctx->Push(second_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_to_clock_time(i32 hours_, i32 minutes_, i32 seconds_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD716F30D8C8980E2);
    ctx->Reset();

    ctx->Push(hours_);
    ctx->Push(minutes_);
    ctx->Push(seconds_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_clock_day_of_week(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD972E4BD7AEB235F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_posix_time(i32* year_, i32* month_, i32* day_, i32* hour_, i32* minute_, i32* second_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDA488F299A5B164E);
    ctx->Reset();

    ctx->Push(year_);
    ctx->Push(month_);
    ctx->Push(day_);
    ctx->Push(hour_);
    ctx->Push(minute_);
    ctx->Push(second_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cutscene_origin_and_orientation(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x011883F41211432A);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cutscene_ped_prop_variation(const CStringPtr& cutscene_ent_name_, i32 component_id_, i32 drawable_id_, i32 texture_id_, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0546524ADE2E9723);
    ctx->Reset();

    ctx->Push(cutscene_ent_name_.ptr);
    ctx->Push(component_id_);
    ctx->Push(drawable_id_);
    ctx->Push(texture_id_);
    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_cut_file(const CStringPtr& cutscene_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x06A3524161C502BA);
    ctx->Reset();

    ctx->Push(cutscene_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cutscene_multihead_fade_manual(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x06EE9048FD080382);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_index_of_cutscene_entity(u32* native_return, const CStringPtr& cutscene_ent_name_, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A2E9FDB9A8C62F6);
    ctx->Reset();

    ctx->Push(cutscene_ent_name_.ptr);
    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_cut_file_concat_count(i32* native_return, const CStringPtr& cutscene_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0ABC54DE641DC0FC);
    ctx->Reset();

    ctx->Push(cutscene_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success start_cutscene(i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x186D5CB5E7B0FF7B);
    ctx->Reset();

    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_cutscene_at_coords(f32 x_, f32 y_, f32 z_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1C9ADDA3244A1FBF);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cutscene_multihead_fade(bool p0_, bool p1_, bool p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x20746F7B1032A3C7);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_can_display_minimap_during_cutscene_this_update() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2131046957F31B04);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_this_cutscene_loaded(bool* native_return, const CStringPtr& cutscene_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x228D3D94F8A11C3C);
    ctx->Reset();

    ctx->Push(cutscene_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_cutscene_ped_component_variation_from_ped(const CStringPtr& cutscene_ent_name_, u32 ped_, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2A56C06EBEF2B0D9);
    ctx->Reset();

    ctx->Push(cutscene_ent_name_.ptr);
    ctx->Push(ped_);
    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_set_mocap_cutscene_can_be_skipped(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2F137B508DE238F2);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success was_cutscene_skipped(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x40C8656EDAEDD569);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_cutscene_can_be_skipped(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x41FAA8FB2ECE8720);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_cutscene() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x440AF51A3462B86F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_cutscene_section_playing(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x49010A6A396553D8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success does_cutscene_entity_exist(bool* native_return, const CStringPtr& cutscene_ent_name_, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x499EF20C5DB25C59);
    ctx->Reset();

    ctx->Push(cutscene_ent_name_.ptr);
    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_cutscene_entity_streaming_flags(const CStringPtr& cutscene_ent_name_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4C61C75BEE8184C2);
    ctx->Reset();

    ctx->Push(cutscene_ent_name_.ptr);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success can_set_exit_state_for_registered_entity(bool* native_return, const CStringPtr& cutscene_ent_name_, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4C6A6451C79E4662);
    ctx->Reset();

    ctx->Push(cutscene_ent_name_.ptr);
    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_cutscene_authorized(bool* native_return, const CStringPtr& cutscene_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4CEBC1ED31E8925E);
    ctx->Reset();

    ctx->Push(cutscene_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success does_cutscene_handle_exist(i32* native_return, i32 cutscene_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4FCD976DA686580C);
    ctx->Reset();

    ctx->Push(cutscene_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_cutscene_concat_section_playing(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x583DF8E3D4AFBD98);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_cutscene_play_duration(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5D583F71C901F2A3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success can_use_mobile_phone_during_cutscene(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5EDEF0CF8C1DAB3C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success can_set_enter_state_for_registered_entity(bool* native_return, const CStringPtr& cutscene_ent_name_, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x645D0B458D8E17B5);
    ctx->Reset();

    ctx->Push(cutscene_ent_name_.ptr);
    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success has_cutscene_cut_this_frame(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x708BDD8CD795B043);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_cutscene_playback_flag_set(bool* native_return, i32 flag_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x71B74D2AE19338D0);
    ctx->Reset();

    ctx->Push(flag_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success request_cutscene(const CStringPtr& cutscene_name_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7A86743F475D9E09);
    ctx->Reset();

    ctx->Push(cutscene_name_.ptr);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_cutscene_finished(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7C0A893088881D57);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_model_player_will_exit_scene(u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7F96F23FA9B73327);
    ctx->Reset();

    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cutscene_fade_values(bool p0_, bool p1_, bool p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8093F23ABACCC7D4);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_script_can_start_cutscene(i32 thread_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8D9DF6ECA8768583);
    ctx->Reset();

    ctx->Push(thread_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_cutscene_end_time(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x971D7B15BCDBEF99);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_cutscene_trigger_area(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9896CE4721BE84BA);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_cutscene_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x991251AFC3981F84);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_multihead_fade_up(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA0FE76168A189DDB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success has_cut_file_loaded(bool* native_return, const CStringPtr& cutscene_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA1C996C2A744262E);
    ctx->Reset();

    ctx->Push(cutscene_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success can_set_exit_state_for_camera(bool* native_return, bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB2CBCD0930DFB420);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success can_request_assets_for_cutscene_entity(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB56BBBCC2955D9CB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_cutscene_origin(f32 x_, f32 y_, f32 z_, f32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB812B3FD1C01CF27);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cutscene_ped_component_variation(const CStringPtr& cutscene_ent_name_, i32 component_id_, i32 drawable_id_, i32 texture_id_, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA01E7B6DEEFBBC9);
    ctx->Reset();

    ctx->Push(cutscene_ent_name_.ptr);
    ctx->Push(component_id_);
    ctx->Push(drawable_id_);
    ctx->Push(texture_id_);
    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_index_of_registered_entity(u32* native_return, const CStringPtr& cutscene_ent_name_, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC0741A26499654CD);
    ctx->Reset();

    ctx->Push(cutscene_ent_name_.ptr);
    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success request_cutscene_with_playback_list(const CStringPtr& cutscene_name_, i32 playback_flags_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC23DE0E91C30B58C);
    ctx->Reset();

    ctx->Push(cutscene_name_.ptr);
    ctx->Push(playback_flags_);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_cutscene_loaded(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC59F528E9AB9F339);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_pad_can_shake_during_cutscene(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC61B86C9F61EB404);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_cutscene(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC7272775B4DC786E);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_cut_file(const CStringPtr& cutscene_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD00D76A7DFC9D852);
    ctx->Reset();

    ctx->Push(cutscene_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_cutscene_immediately() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD220BDD222AC4A1E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_cutscene_playing(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD3C2E180A40F031E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_car_generators_can_update_during_cutscene(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE36A98D8AB3D3C66);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success register_entity_for_cutscene(u32 cutscene_ped_, const CStringPtr& cutscene_ent_name_, i32 p2_, u32 model_hash_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE40C1C56DF95C2E8);
    ctx->Reset();

    ctx->Push(cutscene_ped_);
    ctx->Push(cutscene_ent_name_.ptr);
    ctx->Push(p2_);
    ctx->Push(model_hash_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_cutscene_time(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE625BEABBAFFDAB9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_cutscene_total_duration(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEE53B14A19E480D4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success datafile_select_creator_stats(bool* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x01095C95CD46B624);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success datadict_get_type(i32* native_return, void* object_data_, const CStringPtr& key_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x031C55ED33227371);
    ctx->Reset();

    ctx->Push(key_.ptr);
    ctx->Push(object_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success dataarray_get_count(i32* native_return, void* array_data_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x065DB281590CEA2D);
    ctx->Reset();

    ctx->Push(array_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success datadict_get_float(f32* native_return, void* object_data_, const CStringPtr& key_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x06610343E73B9727);
    ctx->Reset();

    ctx->Push(key_.ptr);
    ctx->Push(object_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success datadict_get_bool(bool* native_return, void* object_data_, const CStringPtr& key_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1186940ED72FFEEC);
    ctx->Reset();

    ctx->Push(key_.ptr);
    ctx->Push(object_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success datafile_has_loaded_file_data(bool* native_return, i32 request_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x15FF52B809DB2353);
    ctx->Reset();

    ctx->Push(request_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success datafile_select_active_file(bool* native_return, i32 request_id_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x22DA66936E0FFF37);
    ctx->Reset();

    ctx->Push(request_id_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success datafile_store_mission_header(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2ED61456317B8178);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success dataarray_add_string(void* array_data_, const CStringPtr& value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2F0661C155AEEEAA);
    ctx->Reset();

    ctx->Push(value_.ptr);
    ctx->Push(array_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success datadict_set_bool(void* object_data_, const CStringPtr& key_, bool value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x35124302A556A325);
    ctx->Reset();

    ctx->Push(key_.ptr);
    ctx->Push(value_);
    ctx->Push(object_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success dataarray_get_type(i32* native_return, void* array_data_, i32 array_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3A0014ADB172A3C5);
    ctx->Reset();

    ctx->Push(array_index_);
    ctx->Push(array_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success datadict_get_string(CStringPtr& native_return, void* object_data_, const CStringPtr& key_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3D2FD9E763B24472);
    ctx->Reset();

    ctx->Push(key_.ptr);
    ctx->Push(object_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success dataarray_get_int(i32* native_return, void* array_data_, i32 array_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3E5AE19425CD74BE);
    ctx->Reset();

    ctx->Push(array_index_);
    ctx->Push(array_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success dataarray_add_vector(void* array_data_, f32 value_x_, f32 value_y_, f32 value_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x407F8D034F70F0C2);
    ctx->Reset();

    ctx->Push(value_x_);
    ctx->Push(value_y_);
    ctx->Push(value_z_);
    ctx->Push(array_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_update_mission(bool* native_return, const CStringPtr& content_id_, const CStringPtr& content_name_, const CStringPtr& description_, const CStringPtr& tags_csv_, const CStringPtr& content_type_name_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4645DE9980999E93);
    ctx->Reset();

    ctx->Push(content_id_.ptr);
    ctx->Push(content_name_.ptr);
    ctx->Push(description_.ptr);
    ctx->Push(tags_csv_.ptr);
    ctx->Push(content_type_name_.ptr);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success datadict_get_vector(Vector3Wrapper& native_return, void* object_data_, const CStringPtr& key_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x46CD3CB66E0825CC);
    ctx->Reset();

    ctx->Push(key_.ptr);
    ctx->Push(object_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success datadict_set_vector(void* object_data_, const CStringPtr& key_, f32 value_x_, f32 value_y_, f32 value_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4CD49B76338C7DEE);
    ctx->Reset();

    ctx->Push(key_.ptr);
    ctx->Push(value_x_);
    ctx->Push(value_y_);
    ctx->Push(value_z_);
    ctx->Push(object_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success datafile_update_save_to_cloud(bool* native_return, bool* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4DFDD9EB705F8140);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success dataarray_get_bool(bool* native_return, void* array_data_, i32 array_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x50C1B2874E50C114);
    ctx->Reset();

    ctx->Push(array_index_);
    ctx->Push(array_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success datafile_select_ugc_player_data(bool* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x52818819057F2B40);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success dataarray_add_float(void* array_data_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x57A995FD75D37F56);
    ctx->Reset();

    ctx->Push(value_);
    ctx->Push(array_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success datadict_create_array(i32* native_return, void* object_data_, const CStringPtr& key_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5B11728527CA6E5F);
    ctx->Reset();

    ctx->Push(key_.ptr);
    ctx->Push(object_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success ugc_update_content(bool* native_return, void* data_, const CStringPtr& content_id_, i32 data_count_, const CStringPtr& content_name_, const CStringPtr& description_, const CStringPtr& tags_csv_, const CStringPtr& content_type_name_, i32 p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x648E7A5434AF7969);
    ctx->Reset();

    ctx->Push(content_id_.ptr);
    ctx->Push(data_count_);
    ctx->Push(content_name_.ptr);
    ctx->Push(description_.ptr);
    ctx->Push(tags_csv_.ptr);
    ctx->Push(content_type_name_.ptr);
    ctx->Push(p7_);
    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success dataarray_add_dict(i32* native_return, void* array_data_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6889498B3E19C797);
    ctx->Reset();

    ctx->Push(array_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success ugc_set_player_data(bool* native_return, const CStringPtr& content_id_, f32 rating_, const CStringPtr& content_type_name_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x692D808C34A82143);
    ctx->Reset();

    ctx->Push(content_id_.ptr);
    ctx->Push(rating_);
    ctx->Push(content_type_name_.ptr);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success datafile_delete_for_additional_data_file(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6AD0BD5E087866CB);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success datafile_clear_watch_list() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6CC86E78358D5119);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success datadict_get_int(i32* native_return, void* object_data_, const CStringPtr& key_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x78F06F6B1FB5A80C);
    ctx->Reset();

    ctx->Push(key_.ptr);
    ctx->Push(object_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success datadict_get_array(i32* native_return, void* object_data_, const CStringPtr& key_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7A983AA9DA2659ED);
    ctx->Reset();

    ctx->Push(key_.ptr);
    ctx->Push(object_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success datafile_start_save_to_cloud(bool* native_return, const CStringPtr& filename_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x83BCCE3224735F05);
    ctx->Reset();

    ctx->Push(filename_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success dataarray_get_dict(i32* native_return, void* array_data_, i32 array_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8B5FADCC4E3A145F);
    ctx->Reset();

    ctx->Push(array_index_);
    ctx->Push(array_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success dataarray_get_vector(Vector3Wrapper& native_return, void* array_data_, i32 array_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8D2064E5B64A628A);
    ctx->Reset();

    ctx->Push(array_index_);
    ctx->Push(array_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success datafile_delete_requested_file(bool* native_return, i32 request_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8F5EA1C01D65A100);
    ctx->Reset();

    ctx->Push(request_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success datadict_set_string(void* object_data_, const CStringPtr& key_, const CStringPtr& value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8FF3847DADD8E30C);
    ctx->Reset();

    ctx->Push(key_.ptr);
    ctx->Push(value_.ptr);
    ctx->Push(object_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success datafile_get_file_dict(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x906B778CA1DC72B6);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success datafile_delete(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9AB9C1CFC8862DFB);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success datafile_select_ugc_stats(bool* native_return, i32 p0_, bool p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9CB0BFA7A9342C3D);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success datadict_create_dict(i32* native_return, void* object_data_, const CStringPtr& key_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA358F56F10732EE1);
    ctx->Reset();

    ctx->Push(key_.ptr);
    ctx->Push(object_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success ugc_create_mission(bool* native_return, const CStringPtr& content_name_, const CStringPtr& description_, const CStringPtr& tags_csv_, const CStringPtr& content_type_name_, bool publish_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA5EFC3E847D60507);
    ctx->Reset();

    ctx->Push(content_name_.ptr);
    ctx->Push(description_.ptr);
    ctx->Push(tags_csv_.ptr);
    ctx->Push(content_type_name_.ptr);
    ctx->Push(publish_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success datafile_select_ugc_data(bool* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA69AC4ADE82B57A4);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success datafile_load_offline_ugc_for_additional_data_file(bool* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA6EEF01087181EDD);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success datafile_watch_request_id(i32 request_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAD6875BBC0FC899C);
    ctx->Reset();

    ctx->Push(request_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success datadict_get_dict(i32* native_return, void* object_data_, const CStringPtr& key_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB6B9DDC412FCEEE2);
    ctx->Reset();

    ctx->Push(key_.ptr);
    ctx->Push(object_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success datafile_is_save_pending(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBEDB96A7584AA8CF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success dataarray_get_float(f32* native_return, void* array_data_, i32 array_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC0C527B525D7CFB5);
    ctx->Reset();

    ctx->Push(array_index_);
    ctx->Push(array_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success datadict_set_float(void* object_data_, const CStringPtr& key_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC27E1CC2D795105E);
    ctx->Reset();

    ctx->Push(key_.ptr);
    ctx->Push(value_);
    ctx->Push(object_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success datafile_load_offline_ugc(bool* native_return, const CStringPtr& filename_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC5238C011AF405E4);
    ctx->Reset();

    ctx->Push(filename_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success datafile_flush_mission_header() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC55854C7D7274882);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_create_content(bool* native_return, void* data_, i32 data_count_, const CStringPtr& content_name_, const CStringPtr& description_, const CStringPtr& tags_csv_, const CStringPtr& content_type_name_, bool publish_, i32 p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC84527E235FCA219);
    ctx->Reset();

    ctx->Push(data_count_);
    ctx->Push(content_name_.ptr);
    ctx->Push(description_.ptr);
    ctx->Push(tags_csv_.ptr);
    ctx->Push(content_type_name_.ptr);
    ctx->Push(publish_);
    ctx->Push(p7_);
    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success dataarray_add_int(void* array_data_, i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCABDB751D86FE93B);
    ctx->Reset();

    ctx->Push(value_);
    ctx->Push(array_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success datafile_create(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD27058A1CA2B13EE);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success dataarray_get_string(CStringPtr& native_return, void* array_data_, i32 array_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD3F2FFEB8D836F52);
    ctx->Reset();

    ctx->Push(array_index_);
    ctx->Push(array_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success datafile_get_file_dict_for_additional_data_file(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDBF860CF1DB8E599);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success datadict_set_int(void* object_data_, const CStringPtr& key_, i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE7E035450A7948D5);
    ctx->Reset();

    ctx->Push(key_.ptr);
    ctx->Push(value_);
    ctx->Push(object_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success dataarray_add_bool(void* array_data_, bool value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF8B0F5A43E928C76);
    ctx->Reset();

    ctx->Push(value_);
    ctx->Push(array_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success datafile_has_valid_file_data(bool* native_return, i32 request_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF8CC1EBE0B62E29F);
    ctx->Reset();

    ctx->Push(request_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success datafile_is_valid_request_id(bool* native_return, i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFCCAE5B92A830878);
    ctx->Reset();

    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success decor_remove(bool* native_return, u32 entity_, const CStringPtr& property_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x00EE9F297C738720);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(property_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success decor_exist_on(bool* native_return, u32 entity_, const CStringPtr& property_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x05661B80A8C9165F);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(property_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success decor_set_int(bool* native_return, u32 entity_, const CStringPtr& property_name_, i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0CE3AA5E1CA19E10);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(property_name_.ptr);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success decor_set_float(bool* native_return, u32 entity_, const CStringPtr& property_name_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x211AB1DD8D0F363A);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(property_name_.ptr);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success decor_is_registered_as_type(bool* native_return, const CStringPtr& property_name_, i32 type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4F14F9F870D6FBC8);
    ctx->Reset();

    ctx->Push(property_name_.ptr);
    ctx->Push(type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success decor_get_float(f32* native_return, u32 entity_, const CStringPtr& property_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6524A2F114706F43);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(property_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success decor_set_bool(bool* native_return, u32 entity_, const CStringPtr& property_name_, bool value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6B1E8E2ED1335B71);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(property_name_.ptr);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success decor_set_time(bool* native_return, u32 entity_, const CStringPtr& property_name_, i32 timestamp_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x95AED7B8E39ECAA4);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(property_name_.ptr);
    ctx->Push(timestamp_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success decor_register(const CStringPtr& property_name_, i32 type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9FD90732F56403CE);
    ctx->Reset();

    ctx->Push(property_name_.ptr);
    ctx->Push(type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success decor_get_int(i32* native_return, u32 entity_, const CStringPtr& property_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA06C969B02A97298);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(property_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success decor_register_lock() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA9D14EEA259F9248);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success decor_get_bool(bool* native_return, u32 entity_, const CStringPtr& property_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDACE671663F2F5DB);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(property_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success on_enter_mp() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0888C3502DBBEEF5);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_is_loading_screen_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x10D0A8F259E93EC9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success are_any_ccs_pending(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x241FCA5B1AA14F75);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success has_cloud_requests_finished(bool* native_return, bool* p0_, i32 unused_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x46E2B844905BC5F0);
    ctx->Reset();

    ctx->Push(unused_);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_dlc_present(bool* native_return, u32 dlc_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x812595A0644CE1DE);
    ctx->Reset();

    ctx->Push(dlc_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ever_had_bad_pack_order(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8D30F648014A92B5);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_extracontent_cloud_result(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9489659372A81585);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success dlc_check_compat_pack_configuration(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA213B11DFF526300);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_is_initial_loading_screen_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC4637A6D03C24CC3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success on_enter_sp() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD7C10C4A637992C9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success dlc_check_cloud_data_correct(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF2E07819EF1A5289);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success has_entity_clear_los_to_entity_in_front(bool* native_return, u32 entity1_, u32 entity2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0267D00AF114F17A);
    ctx->Reset();

    ctx->Push(entity1_);
    ctx->Push(entity2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success remove_model_swap(f32 x_, f32 y_, f32 z_, f32 radius_, u32 original_model_, u32 new_model_, bool p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x033C0F9A64E229AE);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(original_model_);
    ctx->Push(new_model_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_index_from_entity_index(u32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x04A2A40C73395041);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success does_entity_have_drawable(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x060D6E96F8B8E48D);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_entity_coords(u32 entity_, f32 x_pos_, f32 y_pos_, f32 z_pos_, bool x_axis_, bool y_axis_, bool z_axis_, bool clear_area_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x06843DA7060A026B);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(x_pos_);
    ctx->Push(y_pos_);
    ctx->Push(z_pos_);
    ctx->Push(x_axis_);
    ctx->Push(y_axis_);
    ctx->Push(z_axis_);
    ctx->Push(clear_area_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success find_anim_event_phase(bool* native_return, void* p3_, void* p4_, const CStringPtr& anim_dictionary_, const CStringPtr& anim_name_, const CStringPtr& p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x07F1BE2BCCAA27A7);
    ctx->Reset();

    ctx->Push(anim_dictionary_.ptr);
    ctx->Push(anim_name_.ptr);
    ctx->Push(p2_.ptr);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_entity_records_collisions(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A50A1EEDAD01E65);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_forward_vector(Vector3Wrapper& native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A794A5A57F8DF91);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success is_entity_a_mission_entity(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A7B270912999B3C);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_entity_load_collision_flag(u32 entity_, bool toggle_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0DC7CABAB1E9B67E);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_max_speed(u32 entity_, f32 speed_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0E46A3FCBDE2A1B1);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(speed_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_entity_touching_model(bool* native_return, u32 entity_, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0F42323798A58C8C);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stop_synchronized_map_entity_anim(bool* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, i32 y2_, f32 z2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x11E79CAB7183B6F5);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_entity_static(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1218E6886D3D8327);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success create_forced_object(f32 x_, f32 y_, f32 z_, i32 p3_, u32 model_hash_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x150E808B375A385A);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p3_);
    ctx->Push(model_hash_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_max_health(i32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x15D757606D170C3C);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_entity_max_health(u32 entity_, i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x166E7CF68597D8B5);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_dynamic(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1718DE8E3F2823CA);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_can_be_damaged(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1760FFA8AB074D66);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_entity_touching_entity(bool* native_return, u32 entity_, u32 target_entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x17FFC1B2BA35A494);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(target_entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_offset_from_entity_in_world_coords(Vector3Wrapper& native_return, u32 entity_, f32 offset_x_, f32 offset_y_, f32 offset_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1899F328B0E12848);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(offset_x_);
    ctx->Push(offset_y_);
    ctx->Push(offset_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success apply_force_to_entity_center_of_mass(u32 entity_, i32 force_type_, f32 x_, f32 y_, f32 z_, bool p5_, bool is_direction_rel_, bool is_force_rel_, bool p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x18FF00FC7EFF559E);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(force_type_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p5_);
    ctx->Push(is_direction_rel_);
    ctx->Push(is_force_rel_);
    ctx->Push(p8_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_use_max_distance_for_water_reflection(u32 entity_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1A092BB0C3808B96);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_collision(u32 entity_, bool toggle_, bool keep_physics_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1A9205C1B9EE827F);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);
    ctx->Push(keep_physics_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_velocity(u32 entity_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1C99BB7B6E96D16F);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_entity_upsidedown(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1DBD58820FA61D71);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_entity_height_above_ground(f32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1DD55701034110E5);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success is_entity_playing_anim(bool* native_return, u32 entity_, const CStringPtr& anim_dict_, const CStringPtr& anim_name_, i32 task_flag_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1F0B79228E461EC9);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(anim_dict_.ptr);
    ctx->Push(anim_name_.ptr);
    ctx->Push(task_flag_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_entity_of_type_attached_to_entity(u32* native_return, u32 entity_, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1F922734E259BD26);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success is_entity_at_coord(bool* native_return, u32 entity_, f32 x_pos_, f32 y_pos_, f32 z_pos_, f32 x_size_, f32 y_size_, f32 z_size_, bool p7_, bool p8_, i32 p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x20B60995556D004F);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(x_pos_);
    ctx->Push(y_pos_);
    ctx->Push(z_pos_);
    ctx->Push(x_size_);
    ctx->Push(y_size_);
    ctx->Push(z_size_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success has_entity_anim_finished(bool* native_return, u32 entity_, const CStringPtr& anim_dict_, const CStringPtr& anim_name_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x20B711662962B472);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(anim_dict_.ptr);
    ctx->Push(anim_name_.ptr);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_entity_rotation_velocity(Vector3Wrapper& native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x213B91045D09B983);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success does_entity_have_anim_director(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2158E81A6AF65EA9);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_offset_from_entity_given_world_coords(Vector3Wrapper& native_return, u32 entity_, f32 pos_x_, f32 pos_y_, f32 pos_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2274BC1C4885E333);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success set_entity_coords_no_offset(u32 entity_, f32 x_pos_, f32 y_pos_, f32 z_pos_, bool x_axis_, bool y_axis_, bool z_axis_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x239A3351AC1DA385);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(x_pos_);
    ctx->Push(y_pos_);
    ctx->Push(z_pos_);
    ctx->Push(x_axis_);
    ctx->Push(y_axis_);
    ctx->Push(z_axis_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_as_no_longer_needed(u32* ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2595DD4236549CE3);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_entity_attached_to_any_vehicle(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x26AA915AD89BFB4B);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stop_entity_anim(bool* native_return, u32 entity_, const CStringPtr& animation_, const CStringPtr& anim_group_, f32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x28004F88151E03E0);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(animation_.ptr);
    ctx->Push(anim_group_.ptr);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_entity_anim_speed(u32 entity_, const CStringPtr& anim_dictionary_, const CStringPtr& anim_name_, f32 speed_multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x28D1A16553C51776);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(anim_dictionary_.ptr);
    ctx->Push(anim_name_.ptr);
    ctx->Push(speed_multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_motion_blur(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x295D82A8559F9150);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_noweapondecals(u32 entity_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2C2E3DC128F44309);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_anim_current_time(f32* native_return, u32 entity_, const CStringPtr& anim_dict_, const CStringPtr& anim_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x346D81500D088F42);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(anim_dict_.ptr);
    ctx->Push(anim_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_entity_can_only_be_damaged_by_script_participants(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x352E2B5CF420BF3B);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_allow_migrate_to_spectator(u32 entity_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x36F32DE87082343E);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_invincible(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3882114BDE571AD4);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_should_freeze_waiting_on_collision(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3910051CCECDB00C);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_entity_clear_los_to_entity_adjust_for_cover(bool* native_return, u32 entity1_, u32 entity2_, i32 trace_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x394BDE2A7BBA031E);
    ctx->Reset();

    ctx->Push(entity1_);
    ctx->Push(entity2_);
    ctx->Push(trace_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success create_model_hide_excluding_script_objects(f32 x_, f32 y_, f32 z_, f32 radius_, u32 model_hash_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3A52AE588830BF7F);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(model_hash_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_object_as_no_longer_needed(u32* object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3AE22DEB5BA5A3E6);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_coords(Vector3Wrapper& native_return, u32 entity_, bool alive_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3FEF770D40960D5A);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(alive_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success force_entity_ai_and_animation_update(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x40FDEDB72F8293B2);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_lod_dist(i32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4159C2762B5791D6);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success freeze_entity_position(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x428CA6DBD1094446);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_synchronized_entity_anim(bool* native_return, u32 entity_, f32 p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x43D3807C077261E3);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_entity_anim_current_time(u32 entity_, const CStringPtr& anim_dictionary_, const CStringPtr& anim_name_, f32 time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4487C259F0F70977);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(anim_dictionary_.ptr);
    ctx->Push(anim_name_.ptr);
    ctx->Push(time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_alpha(u32 entity_, i32 alpha_level_, bool skin_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x44A0870B7E92D7C0);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(alpha_level_);
    ctx->Push(skin_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_world_position_of_entity_bone(Vector3Wrapper& native_return, u32 entity_, i32 bone_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x44A8FCB8ED227738);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(bone_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success get_entity_bone_postion(Vector3Wrapper& native_return, u32 entity_, i32 bone_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x46F8696933A63C9B);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(bone_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success is_entity_visible(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x47D6F43D77935C75);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_entity_velocity(Vector3Wrapper& native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4805D2B1D8CF94A9);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success get_entity_attached_to(u32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x48C2BED9180FE123);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success reset_pickup_entity_glow(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x490861B88F4FD846);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_has_gravity(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4A4722448F18EEF5);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_index_from_entity_index(u32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4B53F92932ADFAC0);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_nearest_player_to_entity_on_team(u32* native_return, u32 entity_, i32 team_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4DC9A62F844D9337);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(team_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_entity_anim_total_time(f32* native_return, u32 entity_, const CStringPtr& anim_dict_, const CStringPtr& anim_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x50BD2730B191E360);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(anim_dict_.ptr);
    ctx->Push(anim_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success is_entity_in_angled_area(bool* native_return, u32 entity_, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 width_, bool debug_, bool include_z_, i32 p10_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x51210CED3DA1C78A);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(width_);
    ctx->Push(debug_);
    ctx->Push(include_z_);
    ctx->Push(p10_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_entity_a_ped(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x524AC5ECEA15343E);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_entity_upright(bool* native_return, u32 entity_, f32 angle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5333F526F6AB19AA);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(angle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_entity_in_area(bool* native_return, u32 entity_, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, bool p7_, bool p8_, i32 p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x54736AA40E271165);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_entity_trafficlight_override(u32 entity_, i32 state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x57C5DB656185EAC4);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_lod_dist(u32 entity_, i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5927F96A78577363);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_alpha(i32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5A47B3B5E63E94C6);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_entity_height(f32* native_return, u32 entity_, f32 x_, f32 y_, f32 z_, bool at_top_, bool in_world_coords_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5A504562485944DD);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(at_top_);
    ctx->Push(in_world_coords_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_entity_sort_bias(u32 entity_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5C3B791D580E0BC2);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_last_material_hit_by_entity(u32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5C3D0A935F535C4C);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success attach_entity_bone_to_entity_bone(u32 entity1_, u32 entity2_, i32 bone_index1_, i32 bone_index2_, bool p4_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5C48B75732C8456C);
    ctx->Reset();

    ctx->Push(entity1_);
    ctx->Push(entity2_);
    ctx->Push(bone_index1_);
    ctx->Push(bone_index2_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_entity_dead(bool* native_return, u32 entity_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5F9532F3B5CC2551);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success has_entity_been_damaged_by_any_ped(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x605F5A140F202491);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success remove_forced_object(f32 x_, f32 y_, f32 z_, f32 p3_, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x61B6775E83C0DB6F);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p3_);
    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_coords_without_plants_reset(u32 entity_, f32 x_pos_, f32 y_pos_, f32 z_pos_, bool alive_, bool dead_flag_, bool ragdoll_flag_, bool clear_area_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x621873ECE1178967);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(x_pos_);
    ctx->Push(y_pos_);
    ctx->Push(z_pos_);
    ctx->Push(alive_);
    ctx->Push(dead_flag_);
    ctx->Push(ragdoll_flag_);
    ctx->Push(clear_area_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_as_no_longer_needed(u32* vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x629BFA74418D6239);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_cant_cause_collision_damaged_entity(u32 entity1_, u32 entity2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x68B562E124CC0AEF);
    ctx->Reset();

    ctx->Push(entity1_);
    ctx->Push(entity2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_requires_more_expensive_river_check(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x694E00132F2823ED);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_entity_a_vehicle(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6AC7003FA6E5575E);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_entity_health(u32 entity_, i32 health_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6B76DC1F3AE6E6A3);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(health_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success attach_entity_to_entity(u32 entity1_, u32 entity2_, i32 bone_index_, f32 x_pos_, f32 y_pos_, f32 z_pos_, f32 x_rot_, f32 y_rot_, f32 z_rot_, bool p9_, bool use_soft_pinning_, bool collision_, bool is_ped_, i32 vertex_index_, bool fixed_rot_, i32 p15_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6B9BBD38AB0796DF);
    ctx->Reset();

    ctx->Push(entity1_);
    ctx->Push(entity2_);
    ctx->Push(bone_index_);
    ctx->Push(x_pos_);
    ctx->Push(y_pos_);
    ctx->Push(z_pos_);
    ctx->Push(x_rot_);
    ctx->Push(y_rot_);
    ctx->Push(z_rot_);
    ctx->Push(p9_);
    ctx->Push(use_soft_pinning_);
    ctx->Push(collision_);
    ctx->Push(is_ped_);
    ctx->Push(vertex_index_);
    ctx->Push(fixed_rot_);
    ctx->Push(p15_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success enable_entity_bullet_collision(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6CE177D014502E8A);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_only_damaged_by_relationship_group(u32 entity_, bool p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7022BD828FA0B082);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_nearest_player_to_entity(u32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7196842CB375CDB3);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success does_entity_exist(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7239B21A38F536BA);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_entity_render_scorched(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x730F5F8D3F0F2050);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_an_entity(bool* native_return, u32 handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x731EC8A916BD11A1);
    ctx->Reset();

    ctx->Push(handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_entity_at_entity(bool* native_return, u32 entity1_, u32 entity2_, f32 x_size_, f32 y_size_, f32 z_size_, bool p5_, bool p6_, i32 p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x751B70C3D034E187);
    ctx->Reset();

    ctx->Push(entity1_);
    ctx->Push(entity2_);
    ctx->Push(x_size_);
    ctx->Push(y_size_);
    ctx->Push(z_size_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success does_entity_have_skeleton(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x764EB96874EFFDC1);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_entity_quaternion(u32 entity_, f32 x_, f32 y_, f32 z_, f32 w_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x77B21BE7AC540F07);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(w_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_is_in_vehicle(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x78E8E3A640178255);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_only_damaged_by_player(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x79F020FF9EDC0748);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_quaternion(f32* x_, f32* y_, f32* z_, f32* w_, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7B3703D2D32DFA18);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(w_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_lights(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7CFBA6A80BDF3874);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_entity_anim(bool* native_return, u32 entity_, const CStringPtr& anim_name_, const CStringPtr& anim_dict_, f32 p3_, bool loop_, bool stay_in_anim_, bool p6_, f32 delta_, i32 bitset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7FB218262B810701);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(anim_name_.ptr);
    ctx->Push(anim_dict_.ptr);
    ctx->Push(p3_);
    ctx->Push(loop_);
    ctx->Push(stay_in_anim_);
    ctx->Push(p6_);
    ctx->Push(delta_);
    ctx->Push(bitset_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_entity_roll(f32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x831E0242595560DF);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_entity_angular_velocity(u32 entity_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8339643499D1222E);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_heading_from_eulers(f32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x846BF6291198A71E);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_entity_rotation(u32 entity_, f32 pitch_, f32 roll_, f32 yaw_, i32 rotation_order_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8524A8B0171D5E07);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(pitch_);
    ctx->Push(roll_);
    ctx->Push(yaw_);
    ctx->Push(rotation_order_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_forward_y(f32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x866A4A5FAE349510);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success is_entity_in_air(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x886E37EC497200B6);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success create_model_hide(f32 x_, f32 y_, f32 z_, f32 radius_, u32 model_hash_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8A97BCA30A0CE478);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(model_hash_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_type(i32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8ACD366038D14505);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success has_entity_collided_with_anything(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8BAD02F0368D9E14);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_entity_forward_x(f32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8BB4EF4214E0E6D5);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success is_entity_an_object(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8D68C8FD0FACA94E);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_entity_heading(u32 entity_, f32 heading_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8E2530AA8ADA980E);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(heading_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_model_swap(f32 x_, f32 y_, f32 z_, f32 radius_, u32 original_model_, u32 new_model_, bool p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x92C47782FDA8B2A3);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(original_model_);
    ctx->Push(new_model_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_entity_been_damaged_by_any_object(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x95EB9964FF5C5C65);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_entity_upright_value(f32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x95EED5A694951F9F);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success detach_entity(u32 entity_, bool dynamic_, bool collision_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x961AC54BF0613F5D);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(dynamic_);
    ctx->Push(collision_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_speed_vector(Vector3Wrapper& native_return, u32 entity_, bool relative_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9A8D700A51CB7B0D);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(relative_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success reset_entity_alpha(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9B1E824FFBB7027A);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_completely_disable_collision(u32 entity_, bool toggle_, bool keep_physics_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9EBC85ED0FFFE51C);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);
    ctx->Push(keep_physics_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_model(u32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9F47B058362C84B5);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_entity_no_collision_entity(u32 entity1_, u32 entity2_, bool this_frame_only_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA53ED5520C07654A);
    ctx->Reset();

    ctx->Push(entity1_);
    ctx->Push(entity2_);
    ctx->Push(this_frame_only_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_script(CStringPtr& native_return, u32* script_, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA6E9C38DB51D7748);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(script_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success clear_entity_last_damage_entity(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA72CD9CA74A5ECBA);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_last_entity_hit_by_entity(u32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA75EE4F689B85391);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_can_climb_on_entity(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA80AE305E0A3044F);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_always_prerender(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xACAD101E1FB66689);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_as_mission_entity(u32 entity_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAD738C3085FE7E11);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success delete_entity(u32* entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAE3CBE5BF394C9C9);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_rotation(Vector3Wrapper& native_return, u32 entity_, i32 rotation_order_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAFBD61CC738D9EB9);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(rotation_order_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success is_entity_attached_to_any_ped(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB1632E9A5F988D11);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_entity_can_only_be_damaged_by_entity(u32 entity1_, u32 entity2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB17BC6453F6CF5AC);
    ctx->Reset();

    ctx->Push(entity1_);
    ctx->Push(entity2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_bone_count(i32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB328DCC3A3AA401B);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_entity_attached(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB346476EF1A64897);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_entity_in_zone(bool* native_return, u32 entity_, const CStringPtr& zone_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB6463CF6AF527071);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(zone_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_entity_as_no_longer_needed(u32* entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB736A491E64A32CF);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_synchronized_map_entity_anim(bool* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, i32 y2_, f32 z2_, const CStringPtr& p6_, const CStringPtr& p7_, f32 p8_, f32 p9_, i32 p10_, f32 p11_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB9C54555ED30FBC4);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(p6_.ptr);
    ctx->Push(p7_.ptr);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(p10_);
    ctx->Push(p11_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_entity_bone_object_rotation(Vector3Wrapper& native_return, u32 entity_, i32 bone_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBD8D32550E5CEBFE);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(bone_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success get_entity_proofs(bool* native_return, bool* bullet_proof_, bool* fire_proof_, bool* explosion_proof_, bool* collision_proof_, bool* melee_proof_, bool* steam_proof_, bool* p7_, bool* drown_proof_, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBE8CD9BE829BBEBF);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(bullet_proof_);
    ctx->Push(fire_proof_);
    ctx->Push(explosion_proof_);
    ctx->Push(collision_proof_);
    ctx->Push(melee_proof_);
    ctx->Push(steam_proof_);
    ctx->Push(p7_);
    ctx->Push(drown_proof_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_entity_water_reflection_flag(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC34BC448DA29F5E9);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success attach_entity_to_entity_physically(u32 entity1_, u32 entity2_, i32 bone_index1_, i32 bone_index2_, f32 x_pos1_, f32 y_pos1_, f32 z_pos1_, f32 x_pos2_, f32 y_pos2_, f32 z_pos2_, f32 x_rot_, f32 y_rot_, f32 z_rot_, f32 break_force_, bool fixed_rot_, bool p15_, bool collision_, bool p17_, i32 p18_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC3675780C92F90F9);
    ctx->Reset();

    ctx->Push(entity1_);
    ctx->Push(entity2_);
    ctx->Push(bone_index1_);
    ctx->Push(bone_index2_);
    ctx->Push(x_pos1_);
    ctx->Push(y_pos1_);
    ctx->Push(z_pos1_);
    ctx->Push(x_pos2_);
    ctx->Push(y_pos2_);
    ctx->Push(z_pos2_);
    ctx->Push(x_rot_);
    ctx->Push(y_rot_);
    ctx->Push(z_rot_);
    ctx->Push(break_force_);
    ctx->Push(fixed_rot_);
    ctx->Push(p15_);
    ctx->Push(collision_);
    ctx->Push(p17_);
    ctx->Push(p18_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success apply_force_to_entity(u32 entity_, i32 force_flags_, f32 x_, f32 y_, f32 z_, f32 off_x_, f32 off_y_, f32 off_z_, i32 bone_index_, bool is_direction_rel_, bool ignore_up_vec_, bool is_force_rel_, bool p12_, bool p13_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC5F68BE9613E2D18);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(force_flags_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(off_x_);
    ctx->Push(off_y_);
    ctx->Push(off_z_);
    ctx->Push(bone_index_);
    ctx->Push(is_direction_rel_);
    ctx->Push(ignore_up_vec_);
    ctx->Push(is_force_rel_);
    ctx->Push(p12_);
    ctx->Push(p13_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_synchronized_entity_anim(bool* native_return, u32 entity_, i32 synced_scene_, const CStringPtr& animation_, const CStringPtr& prop_name_, f32 p4_, f32 p5_, i32 p6_, f32 p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC77720A12FE14A86);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(synced_scene_);
    ctx->Push(animation_.ptr);
    ctx->Push(prop_name_.ptr);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success has_entity_been_damaged_by_entity(bool* native_return, u32 entity1_, u32 entity2_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC86D67D52A707CF8);
    ctx->Reset();

    ctx->Push(entity1_);
    ctx->Push(entity2_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_entity_collision_disabled(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCCF1E97BEFDAE480);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_entity_bone_rotation(Vector3Wrapper& native_return, u32 entity_, i32 bone_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCE6294A232D03786);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(bone_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success set_pickup_collides_with_projectiles(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCEA7C8E1B48FF68C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_bone_object_postion(Vector3Wrapper& native_return, u32 entity_, i32 bone_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCF1247CC86961FD6);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(bone_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success is_entity_attached_to_any_object(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCF511840CEEDE0CC);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_entity_in_water(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCFB0A0D8EDD145A3);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_entity_waiting_for_world_collision(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD05BFF0C0A12C68F);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_entity_can_be_targeted_without_los(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD3997889736FD899);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_pitch(f32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD45DC2893621E1FE);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_entity_speed(f32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD5037BA82E12416F);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success is_entity_visible_to_script(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD796CB5BA8F20E32);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_pick_up_by_cargobob_disabled(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD7B80E7C3BEFC396);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_object_index_from_entity_index(u32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD7E3B9735C0F89D6);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_entity_can_be_damaged(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD95CC5D2AB15A09F);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success remove_model_hide(f32 x_, f32 y_, f32 z_, f32 radius_, u32 model_hash_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD9E3006FB3CBD765);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(model_hash_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_entity_have_physics(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDA95EA3317CC5064);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_wait_for_collisions_before_probe(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDC6F8601FAF2E893);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_entity_belong_to_this_script(bool* native_return, u32 entity_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDDE6DF5AE89981D2);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success has_entity_been_damaged_by_any_vehicle(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDFD5033FDBA0A9C8);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_can_auto_vault_on_entity(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE12ABE5E3A389A6C);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_can_be_damaged_by_relationship_group(u32 entity_, bool b_can_be_damaged_, i32 rel_group_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE22D8FDE858B8119);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(b_can_be_damaged_);
    ctx->Push(rel_group_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_entity_occluded(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE31C2C72B8692B64);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_collision_normal_of_last_hit_for_entity(Vector3Wrapper& native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE465D4AB7CA6AE72);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success is_entity_on_screen(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE659E47AF827484B);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_entity_mirror_reflection_flag(u32 entity_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE66377CDDADA4810);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_submerged_level(f32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE81AFC1BC4CC41CE);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_entity_heading(f32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE83D4F9BA2A38914);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success has_collision_loaded_around_entity(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE9676F61BC0B3321);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_entity_is_target_priority(u32 entity_, bool p1_, f32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEA02E132F5C68722);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_visible(u32 entity_, bool toggle_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEA1C610A04DB6BBB);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_anim_event_fired(bool* native_return, u32 entity_, u32 action_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEAF4CD9EA3E7E922);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(action_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_entity_matrix(Vector3Wrapper& forward_vector_, Vector3Wrapper& right_vector_, Vector3Wrapper& up_vector_, Vector3Wrapper& position_, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xECB2FC7235A7D137);
    ctx->Reset();

    ctx->Push(entity_);
    alt::INative::Vector3 alt_forward_vector_ { forward_vector_.x, 0, forward_vector_.y, 0, forward_vector_.z };
ctx->Push(&alt_forward_vector_);

    alt::INative::Vector3 alt_right_vector_ { right_vector_.x, 0, right_vector_.y, 0, right_vector_.z };
ctx->Push(&alt_right_vector_);

    alt::INative::Vector3 alt_up_vector_ { up_vector_.x, 0, up_vector_.y, 0, up_vector_.z };
ctx->Push(&alt_up_vector_);

    alt::INative::Vector3 alt_position_ { position_.x, 0, position_.y, 0, position_.z };
ctx->Push(&alt_position_);


    Success result = native->Invoke(ctx);
    if (result) {
        forward_vector_.x = alt_forward_vector_.x;
forward_vector_.y = alt_forward_vector_.y;
forward_vector_.z = alt_forward_vector_.z;

    right_vector_.x = alt_right_vector_.x;
right_vector_.y = alt_right_vector_.y;
right_vector_.z = alt_right_vector_.z;

    up_vector_.x = alt_up_vector_.x;
up_vector_.y = alt_up_vector_.y;
up_vector_.z = alt_up_vector_.z;

    position_.x = alt_position_.x;
position_.y = alt_position_.y;
position_.z = alt_position_.z;

        /* VOID native_return */
    }
    return result;
}
Success would_entity_be_occluded(bool* native_return, u32 entity_model_hash_, f32 x_, f32 y_, f32 z_, bool p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEE5D2A122E09EC42);
    ctx->Reset();

    ctx->Push(entity_model_hash_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_entity_health(i32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEEF059FAD016D209);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_entity_attached_to_entity(bool* native_return, u32 from_, u32 to_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEFBE71898A993728);
    ctx->Reset();

    ctx->Push(from_);
    ctx->Push(to_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success process_entity_attachments(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF4080490ADC51C6F);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_population_type(i32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF6F5161F4534EDFF);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_entity_proofs(u32 entity_, bool bullet_proof_, bool fire_proof_, bool explosion_proof_, bool collision_proof_, bool melee_proof_, bool steam_proof_, bool p7_, bool water_proof_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFAEE099C6F890BB8);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(bullet_proof_);
    ctx->Push(fire_proof_);
    ctx->Push(explosion_proof_);
    ctx->Push(collision_proof_);
    ctx->Push(melee_proof_);
    ctx->Push(steam_proof_);
    ctx->Push(p7_);
    ctx->Push(water_proof_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_bone_index_by_name(i32* native_return, u32 entity_, const CStringPtr& bone_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFB71170B7E76ACBA);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(bone_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success has_entity_clear_los_to_entity(bool* native_return, u32 entity1_, u32 entity2_, i32 trace_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFCDFF7B72D23A1AC);
    ctx->Reset();

    ctx->Push(entity1_);
    ctx->Push(entity2_);
    ctx->Push(trace_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success attach_entity_bone_to_entity_bone_y_forward(u32 entity1_, u32 entity2_, i32 bone_index1_, i32 bone_index2_, bool p4_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFD1695C5D3B05439);
    ctx->Reset();

    ctx->Push(entity1_);
    ctx->Push(entity2_);
    ctx->Push(bone_index1_);
    ctx->Push(bone_index2_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_anim_duration(f32* native_return, const CStringPtr& anim_dict_, const CStringPtr& anim_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFEDDF04D62B8D790);
    ctx->Reset();

    ctx->Push(anim_dict_.ptr);
    ctx->Push(anim_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success is_shocking_event_in_sphere(bool* native_return, i32 event_type_, f32 x_, f32 y_, f32 z_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1374ABB7C15BAB92);
    ctx->Reset();

    ctx->Push(event_type_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success remove_shocking_event(bool* native_return, u32 event_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2CDA538C44C6CCE5);
    ctx->Reset();

    ctx->Push(event_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success suppress_shocking_events_next_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2F9A292AD0A3BD89);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_shocking_event_spawn_blocking_areas() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x340F1415B68AEADE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success suppress_shocking_event_type_next_frame(i32 event_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3FD2EC8BF1F1CF30);
    ctx->Reset();

    ctx->Push(event_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_decision_maker_event_response(u32 name_, i32 event_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4FC9381A7AEE8968);
    ctx->Reset();

    ctx->Push(name_);
    ctx->Push(event_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success suppress_agitation_events_next_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5F3B7749C112D552);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_shocking_event_for_entity(i32* native_return, i32 event_type_, u32 entity_, f32 duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7FD8F3BE76F89422);
    ctx->Reset();

    ctx->Push(event_type_);
    ctx->Push(entity_);
    ctx->Push(duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_decision_maker(u32 ped_, u32 name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB604A2942ADED0EE);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(name_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success unblock_decision_maker_event(u32 name_, i32 event_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD7CD9CF34F2C99E8);
    ctx->Reset();

    ctx->Push(name_);
    ctx->Push(event_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_shocking_event_at_position(i32* native_return, i32 event_type_, f32 x_, f32 y_, f32 z_, f32 duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD9F8455409B525E9);
    ctx->Reset();

    ctx->Push(event_type_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success block_decision_maker_event(u32 name_, i32 event_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE42FCDFD0E4196F7);
    ctx->Reset();

    ctx->Push(name_);
    ctx->Push(event_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_all_shocking_events(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEAABE8FDFA21274C);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_shop_ped_apparel_forced_prop_count(i32* native_return, u32 component_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x017568A8182D98A6);
    ctx->Reset();

    ctx->Push(component_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_hash_name_for_component(u32* native_return, u32 entity_, i32 component_id_, i32 drawable_variant_, i32 texture_variant_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0368B3A838070348);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(component_id_);
    ctx->Push(drawable_variant_);
    ctx->Push(texture_variant_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success is_dlc_vehicle_mod(bool* native_return, u32 hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0564B9FF9631B82C);
    ctx->Reset();

    ctx->Push(hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_shop_ped_outfit_locate(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x073CA26B079F956E);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_tattoo_shop_dlc_item_index(i32* native_return, u32 overlay_hash_, i32 p1_, i32 character_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x10144267DD22866C);
    ctx->Reset();

    ctx->Push(overlay_hash_);
    ctx->Push(p1_);
    ctx->Push(character_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_shop_ped_outfit_component_variant(bool* native_return, void* out_component_variant_, u32 outfit_hash_, i32 unk_variant_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x19F2A026EDF0013F);
    ctx->Reset();

    ctx->Push(outfit_hash_);
    ctx->Push(unk_variant_index_);
    ctx->Push(out_component_variant_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success init_shop_ped_component(void* out_component_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1E8C308FD312C036);
    ctx->Reset();

    ctx->Push(out_component_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_shop_ped_query_component(void* out_component_, i32 component_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x249E310B2D920699);
    ctx->Reset();

    ctx->Push(component_id_);
    ctx->Push(out_component_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_num_tattoo_shop_dlc_items(i32* native_return, i32 character_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x278F76C3B0A8F109);
    ctx->Reset();

    ctx->Push(character_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_dlc_weapon_data_sp(bool* native_return, void* out_data_, i32 dlc_weapon_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x310836EE7129BA33);
    ctx->Reset();

    ctx->Push(dlc_weapon_index_);
    ctx->Push(out_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_dlc_weapon_component_data_sp(bool* native_return, void* component_data_ptr_, i32 dlc_weapon_index_, i32 dlc_weap_comp_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x31D5E073B6F93CDC);
    ctx->Reset();

    ctx->Push(dlc_weapon_index_);
    ctx->Push(dlc_weap_comp_index_);
    ctx->Push(component_data_ptr_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_dlc_vehicle_data(bool* native_return, void* out_data_, i32 dlc_vehicle_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x33468EDC08E371F6);
    ctx->Reset();

    ctx->Push(dlc_vehicle_index_);
    ctx->Push(out_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success does_shop_ped_apparel_have_restriction_tag(bool* native_return, u32 component_hash_, u32 restriction_tag_hash_, i32 component_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x341DE7ED1D2A1BFD);
    ctx->Reset();

    ctx->Push(component_hash_);
    ctx->Push(restriction_tag_hash_);
    ctx->Push(component_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success revert_content_changeset_group_for_all(u32 hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3C1978285B036B25);
    ctx->Reset();

    ctx->Push(hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_num_dlc_weapon_components(i32* native_return, i32 dlc_weapon_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x405425358A7D61FE);
    ctx->Reset();

    ctx->Push(dlc_weapon_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_num_dlc_weapons_sp(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4160B65AE085B5A9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success setup_shop_ped_apparel_query(i32* native_return, i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x50F457823CE6EB5F);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_dlc_vehicle_flags(i32* native_return, i32 dlc_vehicle_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5549EE11FA22FCF2);
    ctx->Reset();

    ctx->Push(dlc_vehicle_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_shop_ped_prop(void* out_prop_, u32 component_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5D5CAFF661DDF6FC);
    ctx->Reset();

    ctx->Push(component_hash_);
    ctx->Push(out_prop_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_hash_name_for_prop(u32* native_return, u32 entity_, i32 component_id_, i32 prop_index_, i32 prop_texture_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5D6160275CAEC8DD);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(component_id_);
    ctx->Push(prop_index_);
    ctx->Push(prop_texture_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success execute_content_changeset_group_for_all(u32 hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6BEDF5769AC2DC07);
    ctx->Reset();

    ctx->Push(hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_forced_component(u32* name_hash_, i32* enum_value_, i32* component_type_, u32 component_hash_, i32 forced_component_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6C93ED8C2F74859B);
    ctx->Reset();

    ctx->Push(component_hash_);
    ctx->Push(forced_component_index_);
    ctx->Push(name_hash_);
    ctx->Push(enum_value_);
    ctx->Push(component_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_shop_ped_query_prop_index(i32* native_return, u32 component_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6CEBE002E58DEE97);
    ctx->Reset();

    ctx->Push(component_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_dlc_weapon_component_data(bool* native_return, void* component_data_ptr_, i32 dlc_weapon_index_, i32 dlc_weap_comp_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6CF598A2957C2BF8);
    ctx->Reset();

    ctx->Push(dlc_weapon_index_);
    ctx->Push(dlc_weap_comp_index_);
    ctx->Push(component_data_ptr_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_shop_ped_query_outfit(void* outfit_, i32 outfit_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6D793F03A631FE56);
    ctx->Reset();

    ctx->Push(outfit_index_);
    ctx->Push(outfit_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_variant_component(u32* name_hash_, i32* enum_value_, i32* component_type_, u32 component_hash_, i32 unk_variant_component_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6E11F282F11863B6);
    ctx->Reset();

    ctx->Push(component_hash_);
    ctx->Push(unk_variant_component_index_);
    ctx->Push(name_hash_);
    ctx->Push(enum_value_);
    ctx->Push(component_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_shop_ped_component(void* out_component_, u32 component_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x74C0E2A57EC66760);
    ctx->Reset();

    ctx->Push(component_hash_);
    ctx->Push(out_component_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_current_ped_component_have_restriction_tag(bool* native_return, u32 ped_, i32 component_id_, u32 restriction_tag_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7796B21B76221BC5);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(component_id_);
    ctx->Push(restriction_tag_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_dlc_weapon_data(bool* native_return, void* out_data_, i32 dlc_weapon_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x79923CD21BECE14E);
    ctx->Reset();

    ctx->Push(dlc_weapon_index_);
    ctx->Push(out_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_shop_ped_query_component_index(i32* native_return, u32 component_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x96E2929292A4DB77);
    ctx->Reset();

    ctx->Push(component_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success setup_shop_ped_apparel_query_tu(i32* native_return, i32 character_, i32 p1_, i32 p2_, bool p3_, i32 p4_, i32 component_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9BDF59818B1E38C1);
    ctx->Reset();

    ctx->Push(character_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(component_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_num_dlc_vehicles(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA7A866D21CD2329B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_shop_ped_outfit_prop_variant(bool* native_return, void* out_prop_variant_, u32 outfit_hash_, i32 unk_variant_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA9F9C2E0FDE11CBB);
    ctx->Reset();

    ctx->Push(outfit_hash_);
    ctx->Push(unk_variant_index_);
    ctx->Push(out_prop_variant_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_num_dlc_weapon_components_sp(i32* native_return, i32 dlc_weapon_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAD2A7A6DFF55841B);
    ctx->Reset();

    ctx->Push(dlc_weapon_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_shop_ped_outfit(void* p1_, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB7952076E444979D);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_dlc_vehicle_mod_lock_hash(u32* native_return, u32 hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC098810437312FFF);
    ctx->Reset();

    ctx->Push(hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_shop_ped_apparel_variant_component_count(i32* native_return, u32 component_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC17AD0E5752BECDA);
    ctx->Reset();

    ctx->Push(component_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_shop_ped_apparel_forced_component_count(i32* native_return, u32 component_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC6B9DB42C04DD8C3);
    ctx->Reset();

    ctx->Push(component_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_shop_ped_apparel_variant_prop_count(i32* native_return, u32 prop_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD40AAC51E8E4C663);
    ctx->Reset();

    ctx->Push(prop_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_content_item_locked(bool* native_return, u32 item_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD4D7B033C3AA243C);
    ctx->Reset();

    ctx->Push(item_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success does_current_ped_prop_have_restriction_tag(bool* native_return, u32 ped_, i32 component_id_, u32 restriction_tag_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD726BAB4554DA580);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(component_id_);
    ctx->Push(restriction_tag_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_variant_prop(u32* name_hash_, i32* enum_value_, i32* anchor_point_, u32 component_hash_, i32 unk_variant_prop_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD81B7F27BC773E66);
    ctx->Reset();

    ctx->Push(component_hash_);
    ctx->Push(unk_variant_prop_index_);
    ctx->Push(name_hash_);
    ctx->Push(enum_value_);
    ctx->Push(anchor_point_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_shop_ped_query_prop(void* out_prop_, i32 component_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDE44A00999B2837D);
    ctx->Reset();

    ctx->Push(component_id_);
    ctx->Push(out_prop_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_forced_prop(u32* name_hash_, i32* enum_value_, i32* anchor_point_, u32 component_hash_, i32 forced_prop_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE1CA84EBF72E691D);
    ctx->Reset();

    ctx->Push(component_hash_);
    ctx->Push(forced_prop_index_);
    ctx->Push(name_hash_);
    ctx->Push(enum_value_);
    ctx->Push(anchor_point_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success init_shop_ped_prop(void* out_prop_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEB0A2B758F7B850F);
    ctx->Reset();

    ctx->Push(out_prop_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_dlc_vehicle_model(u32* native_return, i32 dlc_vehicle_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xECC01B7C5763333C);
    ctx->Reset();

    ctx->Push(dlc_vehicle_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_num_dlc_weapons(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEE47635F352DA367);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success setup_shop_ped_outfit_query(i32* native_return, i32 character_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF3FBE2D50A6A8C28);
    ctx->Reset();

    ctx->Push(character_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_tattoo_shop_dlc_item_data(bool* native_return, void* out_component_, i32 character_type_, i32 decoration_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFF56381874F82086);
    ctx->Reset();

    ctx->Push(character_type_);
    ctx->Push(decoration_index_);
    ctx->Push(out_component_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stop_fire_in_range(f32 x_, f32 y_, f32 z_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x056A8A219B8E829F);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_owner_of_explosion_in_angled_area(u32* native_return, i32 explosion_type_, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x14BA4BA137AF6CEC);
    ctx->Reset();

    ctx->Push(explosion_type_);
    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success add_owned_explosion(u32 ped_, f32 x_, f32 y_, f32 z_, i32 explosion_type_, f32 damage_scale_, bool is_audible_, bool is_invisible_, f32 camera_shake_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x172AA1B624FA1013);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(explosion_type_);
    ctx->Push(damage_scale_);
    ctx->Push(is_audible_);
    ctx->Push(is_invisible_);
    ctx->Push(camera_shake_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_entity_on_fire(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x28D3FED7190D3A0B);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_explosion_in_area(bool* native_return, i32 explosion_type_, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2E2EBA0EE7CED0E0);
    ctx->Reset();

    ctx->Push(explosion_type_);
    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_closest_fire_pos(bool* native_return, Vector3Wrapper& out_position_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x352A9F6BCF90081F);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    alt::INative::Vector3 alt_out_position_ { out_position_.x, 0, out_position_.y, 0, out_position_.z };
ctx->Push(&alt_out_position_);


    Success result = native->Invoke(ctx);
    if (result) {
        out_position_.x = alt_out_position_.x;
out_position_.y = alt_out_position_.y;
out_position_.z = alt_out_position_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success add_explosion_with_user_vfx(f32 x_, f32 y_, f32 z_, i32 explosion_type_, u32 explosion_fx_, f32 damage_scale_, bool is_audible_, bool is_invisible_, f32 camera_shake_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x36DD3FE58B5E5212);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(explosion_type_);
    ctx->Push(explosion_fx_);
    ctx->Push(damage_scale_);
    ctx->Push(is_audible_);
    ctx->Push(is_invisible_);
    ctx->Push(camera_shake_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_number_of_fires_in_range(i32* native_return, f32 x_, f32 y_, f32 z_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x50CAD495A460B305);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_explosion_active_in_area(bool* native_return, i32 explosion_type_, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6070104B699B2EF4);
    ctx->Reset();

    ctx->Push(explosion_type_);
    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success start_script_fire(i32* native_return, f32 x_, f32 y_, f32 z_, i32 max_children_, bool is_gas_fire_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6B83617E04503888);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(max_children_);
    ctx->Push(is_gas_fire_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success stop_entity_fire(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7F0DD2EBBB651AFF);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_script_fire(i32 fire_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7FF548385680673F);
    ctx->Reset();

    ctx->Push(fire_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_flammability_multiplier(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8F390AC4155099BA);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_explosion_in_angled_area(bool* native_return, i32 explosion_type_, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 width_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA079A6C51525DC4B);
    ctx->Reset();

    ctx->Push(explosion_type_);
    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(width_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_explosion_in_sphere(bool* native_return, i32 explosion_type_, f32 x_, f32 y_, f32 z_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAB0F816885B0E483);
    ctx->Reset();

    ctx->Push(explosion_type_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_owner_of_explosion_in_sphere(u32* native_return, i32 explosion_type_, f32 x_, f32 y_, f32 z_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB3CD51E3DB86F176);
    ctx->Reset();

    ctx->Push(explosion_type_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success add_explosion(f32 x_, f32 y_, f32 z_, i32 explosion_type_, f32 damage_scale_, bool is_audible_, bool is_invisible_, f32 camera_shake_, bool no_damage_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE3AD2BDBAEE269AC);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(explosion_type_);
    ctx->Push(damage_scale_);
    ctx->Push(is_audible_);
    ctx->Push(is_invisible_);
    ctx->Push(camera_shake_);
    ctx->Push(no_damage_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_entity_fire(i32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF6A9D9708F6F23DF);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success create_checkpoint(i32* native_return, i32 type_, f32 pos_x1_, f32 pos_y1_, f32 pos_z1_, f32 pos_x2_, f32 pos_y2_, f32 pos_z2_, f32 diameter_, i32 red_, i32 green_, i32 blue_, i32 alpha_, i32 reserved_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0134F0835AB6BFCB);
    ctx->Reset();

    ctx->Push(type_);
    ctx->Push(pos_x1_);
    ctx->Push(pos_y1_);
    ctx->Push(pos_z1_);
    ctx->Push(pos_x2_);
    ctx->Push(pos_y2_);
    ctx->Push(pos_z2_);
    ctx->Push(diameter_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);
    ctx->Push(reserved_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success has_streamed_texture_dict_loaded(bool* native_return, const CStringPtr& texture_dict_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0145F696AAAAD2E4);
    ctx->Reset();

    ctx->Push(texture_dict_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success procgrass_disable_ambscalescan() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0218BA067D249DEA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_scuff_decals(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x02369D5C8A51FDCF);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cascade_shadows_set_dynamic_depth_value(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x02AC28F3A01FA04A);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_particle_fx_non_looped_on_entity_bone(bool* native_return, const CStringPtr& effect_name_, u32 entity_, f32 offset_x_, f32 offset_y_, f32 offset_z_, f32 rot_x_, f32 rot_y_, f32 rot_z_, i32 bone_index_, f32 scale_, bool axis_x_, bool axis_y_, bool axis_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x02B1F2A72E0F5325);
    ctx->Reset();

    ctx->Push(effect_name_.ptr);
    ctx->Push(entity_);
    ctx->Push(offset_x_);
    ctx->Push(offset_y_);
    ctx->Push(offset_z_);
    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);
    ctx->Push(bone_index_);
    ctx->Push(scale_);
    ctx->Push(axis_x_);
    ctx->Push(axis_y_);
    ctx->Push(axis_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success render_shadowed_lights_with_no_shadows(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x03300B57FCAC6DDB);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cascade_shadows_init_session() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x03FC694AE06C5A20);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success release_bink_movie(i32 bink_movie_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x04D950EEFA4EED8C);
    ctx->Reset();

    ctx->Push(bink_movie_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_vehicle_have_crew_emblem(bool* native_return, u32 vehicle_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x060D935D3981A275);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success animpostfx_stop(const CStringPtr& effect_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x068E835A1D0DC0E3);
    ctx->Reset();

    ctx->Push(effect_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success golf_trail_set_facing(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x06F761EA47C1D3ED);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_debug_box(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, i32 r_, i32 g_, i32 b_, i32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x083A2CA4F2E573BD);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);
    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_petrol_trail_decals() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A123435A26C36CD);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success free_memory_for_mission_creator_photo() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A46AF8A78DC5E0A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_flash(f32 p0_, f32 p1_, f32 fade_in_, f32 duration_, f32 fade_out_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0AB84296FED9CFC6);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(fade_in_);
    ctx->Push(duration_);
    ctx->Push(fade_out_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_tvshow_currently_playing(bool* native_return, u32 video_cliphash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0AD973CA1E077B60);
    ctx->Reset();

    ctx->Push(video_cliphash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success cascade_shadows_enable_freezer(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0AE73D8DF3A762B2);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_status_of_save_high_quality_photo(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0C0C4E81E1AC60A0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success has_scaleform_movie_filename_loaded(bool* native_return, const CStringPtr& scaleform_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0C1C5D756FB5F337);
    ctx->Reset();

    ctx->Push(scaleform_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success seethrough_set_max_thickness(f32 thickness_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0C8FAC83902A62DF);
    ctx->Reset();

    ctx->Push(thickness_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_bink_movie_time(i32 bink_movie_, f32 progress_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0CB6B3446855B57A);
    ctx->Reset();

    ctx->Push(bink_movie_);
    ctx->Push(progress_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_particle_fx_non_looped_on_entity(bool* native_return, const CStringPtr& effect_name_, u32 entity_, f32 offset_x_, f32 offset_y_, f32 offset_z_, f32 rot_x_, f32 rot_y_, f32 rot_z_, f32 scale_, bool axis_x_, bool axis_y_, bool axis_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0D53A3B8DA0809D2);
    ctx->Reset();

    ctx->Push(effect_name_.ptr);
    ctx->Push(entity_);
    ctx->Push(offset_x_);
    ctx->Push(offset_y_);
    ctx->Push(offset_z_);
    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);
    ctx->Push(scale_);
    ctx->Push(axis_x_);
    ctx->Push(axis_y_);
    ctx->Push(axis_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_status_of_take_high_quality_photo(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0D6CA79EEEBD8CA3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success draw_scaleform_movie_fullscreen(i32 scaleform_, i32 red_, i32 green_, i32 blue_, i32 alpha_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0DF606929C105BE1);
    ctx->Reset();

    ctx->Push(scaleform_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_composite_shotgun_decals(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0E4299C549F0D1F1);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_particle_fx_non_looped_on_ped_bone(bool* native_return, const CStringPtr& effect_name_, u32 ped_, f32 offset_x_, f32 offset_y_, f32 offset_z_, f32 rot_x_, f32 rot_y_, f32 rot_z_, i32 bone_index_, f32 scale_, bool axis_x_, bool axis_y_, bool axis_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0E7E72961BA18619);
    ctx->Reset();

    ctx->Push(effect_name_.ptr);
    ctx->Push(ped_);
    ctx->Push(offset_x_);
    ctx->Push(offset_y_);
    ctx->Push(offset_z_);
    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);
    ctx->Push(bone_index_);
    ctx->Push(scale_);
    ctx->Push(axis_x_);
    ctx->Push(axis_y_);
    ctx->Push(axis_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_timecycle_modifier() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0F07E7745A236711);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_low_quality_photo_to_phone(bool p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1072F115DAB0717E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success seethrough_set_color_near(i32 red_, i32 green_, i32 blue_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1086127B3A63505E);
    ctx->Reset();

    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ui3dscene_make_pushed_preset_persistent(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x108BE26959A9D9BB);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_tv_audio_frontend(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x113D2C5DC57E1774);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_scaleform_movie(i32* native_return, const CStringPtr& scaleform_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x11FE353CF9733E6F);
    ctx->Reset();

    ctx->Push(scaleform_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_artificial_lights_state(bool state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1268615ACE24D504);
    ctx->Reset();

    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_oil_decal(i32* native_return, f32 x_, f32 y_, f32 z_, f32 ground_lvl_, f32 width_, f32 transparency_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x126D7F89FE859A5E);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(ground_lvl_);
    ctx->Push(width_);
    ctx->Push(transparency_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success golf_trail_set_colour(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_, i32 p6_, i32 p7_, i32 p8_, i32 p9_, i32 p10_, i32 p11_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x12995F2E53FFA601);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(p10_);
    ctx->Push(p11_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success procgrass_enable_ambscalescan() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x14FC5833464340A8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_all_tcmodifier_overrides(const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x15E33297C3E8DC60);
    ctx->Reset();

    ctx->Push(p0_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success override_interior_smoke_level(f32 level_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1600FD8CF72EBC12);
    ctx->Reset();

    ctx->Push(level_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_procobj_creation() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1612C45F9E3E0D44);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success seethrough_set_highlight_noise(f32 noise_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1636D7FC127B10D2);
    ctx->Reset();

    ctx->Push(noise_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_tracked_point_info(i32 point_, f32 x_, f32 y_, f32 z_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x164ECBB3CF750CB0);
    ctx->Reset();

    ctx->Push(point_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_status_of_load_mission_creator_photo(i32* native_return, void* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1670F8D05056F257);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success register_postfx_bullet_impact(f32 weapon_world_pos_x_, f32 weapon_world_pos_y_, f32 weapon_world_pos_z_, f32 intensity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x170911F37F646F29);
    ctx->Reset();

    ctx->Push(weapon_world_pos_x_);
    ctx->Push(weapon_world_pos_y_);
    ctx->Push(weapon_world_pos_z_);
    ctx->Push(intensity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_debug_lines_and_spheres_drawing_active(bool enabled_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x175B6BFC15CDD0C5);
    ctx->Reset();

    ctx->Push(enabled_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_nightvision(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x18F621F7A5B1F85D);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success seethrough_set_hilight_intensity(f32 intensity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x19E50EB6E33E1D28);
    ctx->Reset();

    ctx->Push(intensity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_tcmodifier_override(const CStringPtr& modifier_name1_, const CStringPtr& modifier_name2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1A8E2C8B9CF4549C);
    ctx->Reset();

    ctx->Push(modifier_name1_.ptr);
    ctx->Push(modifier_name2_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_particle_fx_looped_on_entity(i32* native_return, const CStringPtr& effect_name_, u32 entity_, f32 x_offset_, f32 y_offset_, f32 z_offset_, f32 x_rot_, f32 y_rot_, f32 z_rot_, f32 scale_, bool x_axis_, bool y_axis_, bool z_axis_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1AE42C1660FD6517);
    ctx->Reset();

    ctx->Push(effect_name_.ptr);
    ctx->Push(entity_);
    ctx->Push(x_offset_);
    ctx->Push(y_offset_);
    ctx->Push(z_offset_);
    ctx->Push(x_rot_);
    ctx->Push(y_rot_);
    ctx->Push(z_rot_);
    ctx->Push(scale_);
    ctx->Push(x_axis_);
    ctx->Push(y_axis_);
    ctx->Push(z_axis_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_taken_photo_is_mugshot(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1BBC135A4D25EDDE);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success terraingrid_set_params(f32 x_, f32 y_, f32 z_, f32 forward_x_, f32 forward_y_, f32 forward_z_, f32 size_x_, f32 size_y_, f32 size_z_, f32 grid_scale_, f32 glow_intensity_, f32 normal_height_, f32 height_diff_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1C4FC5752BCD8E48);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(forward_x_);
    ctx->Push(forward_y_);
    ctx->Push(forward_z_);
    ctx->Push(size_x_);
    ctx->Push(size_y_);
    ctx->Push(size_z_);
    ctx->Push(grid_scale_);
    ctx->Push(glow_intensity_);
    ctx->Push(normal_height_);
    ctx->Push(height_diff_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_transition_out_of_timecycle_modifier(f32 strength_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1CBA05AE7BD7EE05);
    ctx->Reset();

    ctx->Push(strength_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_scaleform_movie3d_solid(i32 scaleform_, f32 pos_x_, f32 pos_y_, f32 pos_z_, f32 rot_x_, f32 rot_y_, f32 rot_z_, f32 p7_, f32 p8_, f32 p9_, f32 scale_x_, f32 scale_y_, f32 scale_z_, i32 rotation_order_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1CE592FDC749D6F5);
    ctx->Reset();

    ctx->Push(scaleform_);
    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(scale_x_);
    ctx->Push(scale_y_);
    ctx->Push(scale_z_);
    ctx->Push(rotation_order_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_scaleform_movie_as_no_longer_needed(i32* scaleform_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1D132D614DD86811);
    ctx->Reset();

    ctx->Push(scaleform_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_icon_color(u32 entity_, i32 red_, i32 green_, i32 blue_, i32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1D5F595CCAE2E238);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success begin_take_mission_creator_photo(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1DD2139A9A20DCE8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_particle_fx_non_looped_emitter_size(f32 p0_, f32 p1_, f32 scale_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1E2E01C00837D26E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(scale_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_playlist_on_channel(bool* native_return, i32 tv_channel_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1F710BFF7DAE6261);
    ctx->Reset();

    ctx->Push(tv_channel_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_tv_volume(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2170813D3DD8661B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_tv_channel_playlist_at_hour(i32 tv_channel_, const CStringPtr& playlist_name_, i32 hour_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2201C576FACAEBE8);
    ctx->Reset();

    ctx->Push(tv_channel_);
    ctx->Push(playlist_name_.ptr);
    ctx->Push(hour_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_usingnightvision(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2202A3F42C8E5F79);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success animpostfx_play(const CStringPtr& effect_name_, i32 duration_, bool looped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2206BF9A37B7F724);
    ctx->Reset();

    ctx->Push(effect_name_.ptr);
    ctx->Push(duration_);
    ctx->Push(looped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success dont_render_in_game_ui(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x22A249A53034450A);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_backfaceculling(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x23BA6B0C2AD7B0D3);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success golf_trail_set_radius(f32 p0_, f32 p1_, f32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2485D34E50A22E84);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_particle_fx_non_looped_at_coord(bool* native_return, const CStringPtr& effect_name_, f32 x_pos_, f32 y_pos_, f32 z_pos_, f32 x_rot_, f32 y_rot_, f32 z_rot_, f32 scale_, bool x_axis_, bool y_axis_, bool z_axis_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x25129531F77B9ED3);
    ctx->Reset();

    ctx->Push(effect_name_.ptr);
    ctx->Push(x_pos_);
    ctx->Push(y_pos_);
    ctx->Push(z_pos_);
    ctx->Push(x_rot_);
    ctx->Push(y_rot_);
    ctx->Push(z_rot_);
    ctx->Push(scale_);
    ctx->Push(x_axis_);
    ctx->Push(y_axis_);
    ctx->Push(z_axis_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success cascade_shadows_set_bound_position(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x259BA6D4E6F808F1);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cascade_shadows_set_screen_size_check_enabled(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x25FC3E33A31AD0C9);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_particle_fx_non_looped_colour(f32 r_, f32 g_, f32 b_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x26143A59EF48B262);
    ctx->Reset();

    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_checkpoint_cylinder_height(i32 checkpoint_, f32 near_height_, f32 far_height_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2707AAE9D9297D89);
    ctx->Reset();

    ctx->Push(checkpoint_);
    ctx->Push(near_height_);
    ctx->Push(far_height_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cascade_shadows_clear_shadow_sample_type() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x27CB772218215325);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_disable_petrol_decals_recycling_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x27CFB1B1E078CB2D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_particle_fx_bullet_impact_scale(f32 scale_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x27E32866E9A5C416);
    ctx->Reset();

    ctx->Push(scale_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success phonephotoeditor_set_frame_txd(bool* native_return, const CStringPtr& texture_dict_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x27FEB5254759CDE3);
    ctx->Reset();

    ctx->Push(texture_dict_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success draw_marker(i32 type_, f32 pos_x_, f32 pos_y_, f32 pos_z_, f32 dir_x_, f32 dir_y_, f32 dir_z_, f32 rot_x_, f32 rot_y_, f32 rot_z_, f32 scale_x_, f32 scale_y_, f32 scale_z_, i32 red_, i32 green_, i32 blue_, i32 alpha_, bool bob_up_and_down_, bool face_camera_, i32 p19_, bool rotate_, const CStringPtr& texture_dict_, const CStringPtr& texture_name_, bool draw_on_ents_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x28477EC23D892089);
    ctx->Reset();

    ctx->Push(type_);
    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(dir_x_);
    ctx->Push(dir_y_);
    ctx->Push(dir_z_);
    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);
    ctx->Push(scale_x_);
    ctx->Push(scale_y_);
    ctx->Push(scale_z_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);
    ctx->Push(bob_up_and_down_);
    ctx->Push(face_camera_);
    ctx->Push(p19_);
    ctx->Push(rotate_);
    ctx->Push(texture_dict_.ptr);
    ctx->Push(texture_name_.ptr);
    ctx->Push(draw_on_ents_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_textured_poly(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 x3_, f32 y3_, f32 z3_, i32 red_, i32 green_, i32 blue_, i32 alpha_, const CStringPtr& texture_dict_, const CStringPtr& texture_name_, f32 u1_, f32 v1_, f32 w1_, f32 u2_, f32 v2_, f32 w2_, f32 u3_, f32 v3_, f32 w3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x29280002282F1928);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(x3_);
    ctx->Push(y3_);
    ctx->Push(z3_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);
    ctx->Push(texture_dict_.ptr);
    ctx->Push(texture_name_.ptr);
    ctx->Push(u1_);
    ctx->Push(v1_);
    ctx->Push(w1_);
    ctx->Push(u2_);
    ctx->Push(v2_);
    ctx->Push(w2_);
    ctx->Push(u3_);
    ctx->Push(v3_);
    ctx->Push(w3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_tv_volume(f32 volume_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2982BF73F66E9DDC);
    ctx->Reset();

    ctx->Push(volume_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_particle_fx_shootout_boat() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2A251AA48B2B46DB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success override_interior_smoke_name(const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2A2A52824DB96700);
    ctx->Reset();

    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success queue_operation_to_create_sorted_list_of_photos(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2A893980E96B659A);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_particle_fx_slipstream_lodrange_scale(f32 scale_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B40A97646381508);
    ctx->Reset();

    ctx->Push(scale_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_sprite_named_rendertarget(const CStringPtr& texture_dict_, const CStringPtr& texture_name_, f32 screen_x_, f32 screen_y_, f32 width_, f32 height_, f32 heading_, i32 red_, i32 green_, i32 blue_, i32 alpha_, i32 p11_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2BC54A8188768488);
    ctx->Reset();

    ctx->Push(texture_dict_.ptr);
    ctx->Push(texture_name_.ptr);
    ctx->Push(screen_x_);
    ctx->Push(screen_y_);
    ctx->Push(width_);
    ctx->Push(height_);
    ctx->Push(heading_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);
    ctx->Push(p11_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_moon_cycle_override() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2BF72AD5B41AA739);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success enable_moon_cycle_override(f32 strength_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2C328AF17210F009);
    ctx->Reset();

    ctx->Push(strength_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success procgrass_is_cullsphere_enabled(bool* native_return, i32 handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2C42340F916C5930);
    ctx->Reset();

    ctx->Push(handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_timecycle_modifier(const CStringPtr& modifier_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2C933ABF17A1DF41);
    ctx->Reset();

    ctx->Push(modifier_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_sprite_arx(const CStringPtr& texture_dict_, const CStringPtr& texture_name_, f32 x_, f32 y_, f32 width_, f32 height_, f32 p6_, i32 red_, i32 green_, i32 blue_, i32 alpha_, i32 p11_, i32 p12_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2D3B147AFAD49DE0);
    ctx->Reset();

    ctx->Push(texture_dict_.ptr);
    ctx->Push(texture_name_.ptr);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(width_);
    ctx->Push(height_);
    ctx->Push(p6_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);
    ctx->Push(p11_);
    ctx->Push(p12_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_scaleform_movie_method_return_value_int(i32* native_return, i32 method_return_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2DE7EFA66B906036);
    ctx->Reset();

    ctx->Push(method_return_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_is_petrol_decal_in_range(bool* native_return, f32 x_coord_, f32 y_coord_, f32 z_coord_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2F09F7976C512404);
    ctx->Reset();

    ctx->Push(x_coord_);
    ctx->Push(y_coord_);
    ctx->Push(z_coord_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_active_scaleform_movie_deleting(bool* native_return, i32 val_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2FCB133CA50A49EB);
    ctx->Reset();

    ctx->Push(val_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success grassbatch_disable_flattening() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x302C91AB2D477F7E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_current_tv_clip_namehash(u32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x30432A0118736E00);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_is_widescreen(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x30CF4BDA4FCB1905);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success golf_trail_set_path(f32 p0_, f32 p1_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, f32 p6_, f32 p7_, bool p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x312342E1A4874F3F);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_decal_wash_level(f32* native_return, i32 decal_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x323F647679A09103);
    ctx->Reset();

    ctx->Push(decal_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_scaleform_movie_to_use_large_rt(i32 scaleform_handle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x32F34FF7F617643B);
    ctx->Reset();

    ctx->Push(scaleform_handle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_bink_movie(i32* native_return, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x338D9F609FD632DB);
    ctx->Reset();

    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success free_memory_for_mission_creator_photo_preview() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x346EF3ECAAAB149E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_maximum_number_of_photos(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x34D23450F028B0BF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_screen_coord_from_world_coord(bool* native_return, f32* screen_x_, f32* screen_y_, f32 world_x_, f32 world_y_, f32 world_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x34E82F05DF2974F5);
    ctx->Reset();

    ctx->Push(world_x_);
    ctx->Push(world_y_);
    ctx->Push(world_z_);
    ctx->Push(screen_x_);
    ctx->Push(screen_y_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_texture_resolution(Vector3Wrapper& native_return, const CStringPtr& texture_dict_, const CStringPtr& texture_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x35736EE65BD00C11);
    ctx->Reset();

    ctx->Push(texture_dict_.ptr);
    ctx->Push(texture_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success get_requestingnightvision(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x35FB78DC42B7BD21);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success end_text_command_scaleform_string() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x362E2D3FE93A9959);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_occlusion_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3669F1B198DCAA4F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success animpostfx_is_running(bool* native_return, const CStringPtr& effect_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x36AD3E690DA5ACEB);
    ctx->Reset();

    ctx->Push(effect_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success cascade_shadows_set_split_z_exp_weight(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x36F6626459D91457);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_debug_text(const CStringPtr& text_, f32 x_, f32 y_, f32 z_, i32 red_, i32 green_, i32 blue_, i32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3903E216620488E8);
    ctx->Reset();

    ctx->Push(text_.ptr);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_light_override_max_intensity_scale(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x393BD2275CEB7793);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success draw_rect(f32 x_, f32 y_, f32 width_, f32 height_, i32 r_, i32 g_, i32 b_, i32 a_, bool p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3A618A217E5154F0);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(width_);
    ctx->Push(height_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);
    ctx->Push(a_);
    ctx->Push(p8_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_transition_timecycle_modifier(const CStringPtr& modifier_name_, f32 transition_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3BCF567485E1971C);
    ctx->Reset();

    ctx->Push(modifier_name_.ptr);
    ctx->Push(transition_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_checkpoint_direction(i32 checkpoint_, f32 pos_x_, f32 pos_y_, f32 pos_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3C788E7F6438754D);
    ctx->Reset();

    ctx->Push(checkpoint_);
    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success pop_timecycle_modifier() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3C8938D7D872211E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success save_high_quality_photo(bool* native_return, i32 unused_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3DEC726C25A11BAC);
    ctx->Reset();

    ctx->Push(unused_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_load_high_quality_photo_status(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x40AFB081F8ADD4EE);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success add_vehicle_crew_emblem(bool* native_return, u32 vehicle_, u32 ped_, i32 bone_index_, f32 x1_, f32 x2_, f32 x3_, f32 y1_, f32 y2_, f32 y3_, f32 z1_, f32 z2_, f32 z3_, f32 scale_, i32 p13_, i32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x428BDCB9DA58DA53);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(ped_);
    ctx->Push(bone_index_);
    ctx->Push(x1_);
    ctx->Push(x2_);
    ctx->Push(x3_);
    ctx->Push(y1_);
    ctx->Push(y2_);
    ctx->Push(y3_);
    ctx->Push(z1_);
    ctx->Push(z2_);
    ctx->Push(z3_);
    ctx->Push(scale_);
    ctx->Push(p13_);
    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success seethrough_get_max_thickness(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x43DBAE39626CE83F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success override_nightvision_light_range(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x43FA7CBE20DAB219);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_checkpoint_inside_cylinder_scale(i32 checkpoint_, f32 scale_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x44621483FF966526);
    ctx->Reset();

    ctx->Push(checkpoint_);
    ctx->Push(scale_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_usingseethrough(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x44B80ABAB9D80BD3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_timecycle_transition_modifier_index(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x459FD2C8D0AB78BC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_decal_bullet_impact_range_scale(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x46D1A61A21F566FC);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_current_number_of_cloud_photos(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x473151EBC762C6DA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success load_mission_creator_photo(bool* native_return, void* p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4862437A486F91B0);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_status_of_sorted_list_operation() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4AF92ACD3141D96C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_checkpoint_inside_cylinder_height_scale(i32 checkpoint_, f32 scale_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4B5B4DA5D79F1943);
    ctx->Reset();

    ctx->Push(checkpoint_);
    ctx->Push(scale_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_disable_decal_rendering_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4B5CFC83122DF602);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success use_snow_wheel_vfx_when_unsheltered(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4CC7F0FEA5283FE0);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_petrol_decal(i32* native_return, f32 x_, f32 y_, f32 z_, f32 ground_lvl_, f32 width_, f32 transparency_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4F5212C7AD880DF8);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(ground_lvl_);
    ctx->Push(width_);
    ctx->Push(transparency_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_extra_tcmodifier(const CStringPtr& modifier_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5096FD9CCB49056D);
    ctx->Reset();

    ctx->Push(modifier_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success call_scaleform_movie_method_with_string(i32 scaleform_, const CStringPtr& method_name_, const CStringPtr& param1_, const CStringPtr& param2_, const CStringPtr& param3_, const CStringPtr& param4_, const CStringPtr& param5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x51BC1ED3CC44E8F7);
    ctx->Reset();

    ctx->Push(scaleform_);
    ctx->Push(method_name_.ptr);
    ctx->Push(param1_.ptr);
    ctx->Push(param2_.ptr);
    ctx->Push(param3_.ptr);
    ctx->Push(param4_.ptr);
    ctx->Push(param5_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_scaleform_movie(i32 scaleform_handle_, f32 x_, f32 y_, f32 width_, f32 height_, i32 red_, i32 green_, i32 blue_, i32 alpha_, i32 p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x54972ADAF0294A93);
    ctx->Reset();

    ctx->Push(scaleform_handle_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(width_);
    ctx->Push(height_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_particle_fx_bang_scrape_lodrange_scale(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x54E22EA2C1956A8D);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success push_timecycle_modifier() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x58F735290861E6B4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_status_of_create_mission_creator_photo_preview(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5B0316762AFD4A64);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success wash_decals_from_vehicle(u32 vehicle_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5B712761429DBC14);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_shadowed_spot_light(f32 pos_x_, f32 pos_y_, f32 pos_z_, f32 dir_x_, f32 dir_y_, f32 dir_z_, i32 color_r_, i32 color_g_, i32 color_b_, f32 distance_, f32 brightness_, f32 roundness_, f32 radius_, f32 falloff_, i32 shadow_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5BCA583A583194DB);
    ctx->Reset();

    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(dir_x_);
    ctx->Push(dir_y_);
    ctx->Push(dir_z_);
    ctx->Push(color_r_);
    ctx->Push(color_g_);
    ctx->Push(color_b_);
    ctx->Push(distance_);
    ctx->Push(brightness_);
    ctx->Push(roundness_);
    ctx->Push(radius_);
    ctx->Push(falloff_);
    ctx->Push(shadow_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_screenblur_fade_current_time(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5CCABFFCA31DDE33);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success terraingrid_set_colours(i32 low_r_, i32 low_g_, i32 low_b_, i32 low_alpha_, i32 r_, i32 g_, i32 b_, i32 alpha_, i32 high_r_, i32 high_g_, i32 high_b_, i32 high_alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5CE62918F8D703C7);
    ctx->Reset();

    ctx->Push(low_r_);
    ctx->Push(low_g_);
    ctx->Push(low_b_);
    ctx->Push(low_alpha_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);
    ctx->Push(alpha_);
    ctx->Push(high_r_);
    ctx->Push(high_g_);
    ctx->Push(high_b_);
    ctx->Push(high_alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_decals_in_range(f32 x_, f32 y_, f32 z_, f32 range_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5D6B2D4830A67C62);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(range_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_skidmark_range_scale(f32 scale_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5DBF05DB5926D089);
    ctx->Reset();

    ctx->Push(scale_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success enable_procobj_creation() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5DEBD9C4DC995692);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_latest_brief_string_exist(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5E657EF1099EDD65);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success cascade_shadows_set_entity_tracker_scale(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5E9DAF5A20F15908);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_particle_fx_looped_evolution(i32 ptfx_handle_, const CStringPtr& property_name_, f32 amount_, bool no_network_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5F0C4B5B1C393BE2);
    ctx->Reset();

    ctx->Push(ptfx_handle_);
    ctx->Push(property_name_.ptr);
    ctx->Push(amount_);
    ctx->Push(no_network_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cascade_shadows_set_cascade_bounds_scale(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5F0F3F56635809EF);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_downwash_ptfx(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5F6DF3D92271E8A1);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_checkpoint_decal_rot_aligned_to_camera_rot(i32 checkpoint_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x615D3925E87A3B26);
    ctx->Reset();

    ctx->Push(checkpoint_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_script_gfx_draw_order(i32 draw_order_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x61BB1D9B3A95D802);
    ctx->Reset();

    ctx->Push(draw_order_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_grass_cull_sphere(i32 handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x61F95E5BB3E0A8C6);
    ctx->Reset();

    ctx->Push(handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_bink_movie(i32 bink_movie_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x63606A61DE68898A);
    ctx->Reset();

    ctx->Push(bink_movie_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success procgrass_disable_cullsphere(i32 handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x649C97D52332341A);
    ctx->Reset();

    ctx->Push(handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_scaleform_movie_with_ignore_super_widescreen(i32* native_return, const CStringPtr& scaleform_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x65E7E78842E74CDB);
    ctx->Reset();

    ctx->Push(scaleform_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_bink_should_skip(i32 bink_movie_, bool b_should_skip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6805D58CAA427B72);
    ctx->Reset();

    ctx->Push(bink_movie_);
    ctx->Push(b_should_skip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success free_memory_for_low_quality_photo() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6A12D88881435DCA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_force_motionblur(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6A51F78772175A51);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_line(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, i32 red_, i32 green_, i32 blue_, i32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6B7256074AE34680);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success use_particle_fx_asset(const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6C38AF3693A69A91);
    ctx->Reset();

    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_scaleform_movie_to_use_system_time(i32 scaleform_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6D8EB211944DCE08);
    ctx->Reset();

    ctx->Push(scaleform_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success grassbatch_enable_flattening_in_sphere(f32 x_, f32 y_, f32 z_, f32 radius_, f32 p4_, f32 p5_, f32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6D955F6A9E0295B1);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_script_gfx_align_position(f32* calculated_x_, f32* calculated_y_, f32 x_, f32 y_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6DD8F5AA635EB4B2);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(calculated_x_);
    ctx->Push(calculated_y_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cascade_shadows_set_aircraft_mode(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6DDBF9DFFC4AC080);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_networked_particle_fx_looped_on_entity(i32* native_return, const CStringPtr& effect_name_, u32 entity_, f32 x_offset_, f32 y_offset_, f32 z_offset_, f32 x_rot_, f32 y_rot_, f32 z_rot_, f32 scale_, bool x_axis_, bool y_axis_, bool z_axis_, f32 r_, f32 g_, f32 b_, f32 a_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6F60E89A7B64EE1D);
    ctx->Reset();

    ctx->Push(effect_name_.ptr);
    ctx->Push(entity_);
    ctx->Push(x_offset_);
    ctx->Push(y_offset_);
    ctx->Push(z_offset_);
    ctx->Push(x_rot_);
    ctx->Push(y_rot_);
    ctx->Push(z_rot_);
    ctx->Push(scale_);
    ctx->Push(x_axis_);
    ctx->Push(y_axis_);
    ctx->Push(z_axis_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);
    ctx->Push(a_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success seethrough_reset() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x70A64C0234EF522C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_bink_movie(i32 bink_movie_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x70D2CC8A542A973C);
    ctx->Reset();

    ctx->Push(bink_movie_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_bink_movie(i32 bink_movie_, f32 p1_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, i32 r_, i32 g_, i32 b_, i32 a_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7118E83EEB9F7238);
    ctx->Reset();

    ctx->Push(bink_movie_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);
    ctx->Push(a_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_checkpoint_rgba(i32 checkpoint_, i32 red_, i32 green_, i32 blue_, i32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7167371E8AD747F7);
    ctx->Reset();

    ctx->Push(checkpoint_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_particle_fx_looped_alpha(i32 ptfx_handle_, f32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x726845132380142E);
    ctx->Reset();

    ctx->Push(ptfx_handle_);
    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_textured_poly_with_three_colours(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 x3_, f32 y3_, f32 z3_, f32 red1_, f32 green1_, f32 blue1_, i32 alpha1_, f32 red2_, f32 green2_, f32 blue2_, i32 alpha2_, f32 red3_, f32 green3_, f32 blue3_, i32 alpha3_, const CStringPtr& texture_dict_, const CStringPtr& texture_name_, f32 u1_, f32 v1_, f32 w1_, f32 u2_, f32 v2_, f32 w2_, f32 u3_, f32 v3_, f32 w3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x736D7AA1B750856B);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(x3_);
    ctx->Push(y3_);
    ctx->Push(z3_);
    ctx->Push(red1_);
    ctx->Push(green1_);
    ctx->Push(blue1_);
    ctx->Push(alpha1_);
    ctx->Push(red2_);
    ctx->Push(green2_);
    ctx->Push(blue2_);
    ctx->Push(alpha2_);
    ctx->Push(red3_);
    ctx->Push(green3_);
    ctx->Push(blue3_);
    ctx->Push(alpha3_);
    ctx->Push(texture_dict_.ptr);
    ctx->Push(texture_name_.ptr);
    ctx->Push(u1_);
    ctx->Push(v1_);
    ctx->Push(w1_);
    ctx->Push(u2_);
    ctx->Push(v2_);
    ctx->Push(w2_);
    ctx->Push(u3_);
    ctx->Push(v3_);
    ctx->Push(w3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_debug_cross(f32 x_, f32 y_, f32 z_, f32 size_, i32 red_, i32 green_, i32 blue_, i32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x73B1189623049839);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(size_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_particle_fx_looped_exist(bool* native_return, i32 ptfx_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x74AFEF0D2E1E409B);
    ctx->Reset();

    ctx->Push(ptfx_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success enable_movie_keyframe_wait(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x74C180030FDE4B69);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success begin_create_low_quality_copy_of_photo(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x759650634F07B6B4);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_scaleform_movie_method_return_value_ready(bool* native_return, i32 method_return_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x768FF8961BA904D6);
    ctx->Reset();

    ctx->Push(method_return_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_particle_fx_non_looped_alpha(f32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x77168D722C58B2FC);
    ctx->Reset();

    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success scaleform_movie_method_add_param_literal_string(const CStringPtr& string_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x77FE3402004CD1B0);
    ctx->Reset();

    ctx->Push(string_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_marker_sphere(f32 x_, f32 y_, f32 z_, f32 radius_, i32 red_, i32 green_, i32 blue_, f32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x799017F9E3B10112);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ui3dscene_clear_patched_data() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7A42B2E236E71415);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success phonephotoeditor_toggle(bool* native_return, bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7AC24EAB6D74118D);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_screenblur_fade_running(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7B226C785A52A0A9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_seethrough(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7E08924259E08CE0);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_particle_fx_looped_colour(i32 ptfx_handle_, f32 r_, f32 g_, f32 b_, bool p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7F8F65877F88783B);
    ctx->Reset();

    ctx->Push(ptfx_handle_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success begin_create_mission_creator_photo_preview(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7FA5D82B8F58EC06);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success draw_debug_line(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, i32 r_, i32 g_, i32 b_, i32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7FDFADE676AA3CB0);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);
    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success begin_text_command_scaleform_string(const CStringPtr& component_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x80338406F3475E55);
    ctx->Reset();

    ctx->Push(component_type_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cascade_shadows_enable_entity_tracker(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x80ECBC0C856D3B0B);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_exposure_readback(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x814AF7DCAACC597B);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_scaleform_container_movie_loaded_into_parent(bool* native_return, i32 scaleform_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8217150E1217EBFD);
    ctx->Reset();

    ctx->Push(scaleform_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success abort_vehicle_crew_emblem_request(bool* native_return, i32* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x82ACC484FFA3B05F);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_timecycle_modifier_strength(f32 strength_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x82E7FFCD5B2326B3);
    ctx->Reset();

    ctx->Push(strength_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success attach_tv_audio_to_entity(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x845BAD77CC770633);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success move_vehicle_decals(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x84C8D7C2D30D3280);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_is_hidef(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x84ED31191CC5D2C9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success grab_pausemenu_ownership() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x851CD923176EBA7C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_scaleform_movie_loaded(bool* native_return, i32 scaleform_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x85F01B8D5B90570E);
    ctx->Reset();

    ctx->Push(scaleform_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_scaleform_movie_deleting(bool* native_return, i32 val_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x86255B1FC929E33E);
    ctx->Reset();

    ctx->Push(val_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_actual_screen_resolution(i32* x_, i32* y_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x873C9F3104101DD3);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success enable_movie_subtitles(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x873FA65C778AD970);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_scaleform_movie3d(i32 scaleform_, f32 pos_x_, f32 pos_y_, f32 pos_z_, f32 rot_x_, f32 rot_y_, f32 rot_z_, f32 p7_, f32 p8_, f32 p9_, f32 scale_x_, f32 scale_y_, f32 scale_z_, i32 rotation_order_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x87D51D72255D4E78);
    ctx->Reset();

    ctx->Push(scaleform_);
    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(scale_x_);
    ctx->Push(scale_y_);
    ctx->Push(scale_z_);
    ctx->Push(rotation_order_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_screen_resolution(i32* x_, i32* y_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x888D57E407E63624);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_particle_fx_override(const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x89C8553DD3274AAE);
    ctx->Reset();

    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success patch_decal_diffuse_map(i32 decal_type_, const CStringPtr& texture_dict_, const CStringPtr& texture_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8A35C742130C6080);
    ctx->Reset();

    ctx->Push(decal_type_);
    ctx->Push(texture_dict_.ptr);
    ctx->Push(texture_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_particle_fx_force_vehicle_interior(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8CDE909A0370BB3A);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_bink_movie_time(f32* native_return, i32 bink_movie_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8E17DDD6B9D5BF29);
    ctx->Reset();

    ctx->Push(bink_movie_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success stop_particle_fx_looped(i32 ptfx_handle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8F75998877616996);
    ctx->Reset();

    ctx->Push(ptfx_handle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_particle_fx_blood_scale(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x908311265D42A820);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_status_of_take_mission_creator_photo(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x90A78ECAA4E78453);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success clear_extra_tcmodifier() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x92CCC17A7A2285DA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_scaleform_script_hud_movie(i32 hud_component_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9304881D6F6537EA);
    ctx->Reset();

    ctx->Push(hud_component_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_particle_fx_foot_lodrange_scale(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x949F397A288B28B3);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_sprite_arx_with_uv(const CStringPtr& texture_dict_, const CStringPtr& texture_name_, f32 x_, f32 y_, f32 width_, f32 height_, f32 u1_, f32 v1_, f32 u2_, f32 v2_, f32 heading_, i32 red_, i32 green_, i32 blue_, i32 alpha_, i32 p15_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x95812F9B26074726);
    ctx->Reset();

    ctx->Push(texture_dict_.ptr);
    ctx->Push(texture_name_.ptr);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(width_);
    ctx->Push(height_);
    ctx->Push(u1_);
    ctx->Push(v1_);
    ctx->Push(u2_);
    ctx->Push(v2_);
    ctx->Push(heading_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);
    ctx->Push(p15_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success override_ped_crew_logo_texture(bool* native_return, u32 ped_, const CStringPtr& txd_, const CStringPtr& txn_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x95EB5E34F821BABE);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(txd_.ptr);
    ctx->Push(txn_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_light_override_max_intensity_scale(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9641588DAB93B4B5);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_petrol_trail_decal_info(f32 x_, f32 y_, f32 z_, f32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x967278682CB6967A);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_particle_fx_shootout_boat(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x96EF97DAEB89BEF5);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success begin_scaleform_script_hud_movie_method(bool* native_return, i32 hud_component_, const CStringPtr& method_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x98C494FD5BDFBFD5);
    ctx->Reset();

    ctx->Push(hud_component_);
    ctx->Push(method_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ui3dscene_assign_ped_to_slot(bool* native_return, const CStringPtr& preset_name_, u32 ped_, i32 slot_, f32 pos_x_, f32 pos_y_, f32 pos_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x98C4FE6EC34154CA);
    ctx->Reset();

    ctx->Push(preset_name_.ptr);
    ctx->Push(ped_);
    ctx->Push(slot_);
    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_is_timecycle_transitioning_out(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x98D18905BF723B99);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success request_early_light_check() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x98EDF76A7271E4F2);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_petrol_trail_decals(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x99AC7F0D8B9C893D);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_postfx_bullet_impacts_after_hud(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9B079E5221D984D3);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success query_movie_mesh_set_state(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9B6E70C5CEEF4EEB);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success wash_decals_in_range(f32 x_, f32 y_, f32 z_, f32 range_, f32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9C30613D50A6ADEF);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(range_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_entity_icon(i32* native_return, u32 entity_, const CStringPtr& icon_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9CD43EEE12BF4DD0);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(icon_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success golf_trail_set_shader_params(f32 p0_, f32 p1_, f32 p2_, f32 p3_, f32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9CFDD90B2B844BF7);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success seethrough_set_fade_enddistance(f32 distance_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D75795B9DC6EBBF);
    ctx->Reset();

    ctx->Push(distance_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success enable_alien_blood_vfx(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9DCE1F0F78260875);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success trigger_screenblur_fade_in(bool* native_return, f32 transition_time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA328A24AAA6B7FDC);
    ctx->Reset();

    ctx->Push(transition_time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success terraingrid_activate(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA356990E161C9E65);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_debug_text2d(const CStringPtr& text_, f32 x_, f32 y_, f32 z_, i32 red_, i32 green_, i32 blue_, i32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA3BB2E9555C05A8F);
    ctx->Reset();

    ctx->Push(text_.ptr);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_networked_particle_fx_non_looped_on_ped_bone(bool* native_return, const CStringPtr& effect_name_, u32 ped_, f32 offset_x_, f32 offset_y_, f32 offset_z_, f32 rot_x_, f32 rot_y_, f32 rot_z_, i32 bone_index_, f32 scale_, bool axis_x_, bool axis_y_, bool axis_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA41B6A43642AC2CF);
    ctx->Reset();

    ctx->Push(effect_name_.ptr);
    ctx->Push(ped_);
    ctx->Push(offset_x_);
    ctx->Push(offset_y_);
    ctx->Push(offset_z_);
    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);
    ctx->Push(bone_index_);
    ctx->Push(scale_);
    ctx->Push(axis_x_);
    ctx->Push(axis_y_);
    ctx->Push(axis_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success register_noir_lens_effect() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA44FF770DFBC5DAE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success golf_trail_get_visual_control_point(Vector3Wrapper& native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA4664972A9B8F8BA);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success set_weather_ptfx_use_override_settings(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA46B73FAA3460AE1);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success golf_trail_get_max_height(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA4819F5E23E2FFAD);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success golf_trail_set_enabled(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA51C4B86B71652AE);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success begin_take_high_quality_photo(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA67C35C56EB1BD9D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success remove_decals_from_object_facing(u32 obj_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA6F6F70FDC6D144C);
    ctx->Reset();

    ctx->Push(obj_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success seethrough_set_fade_startdistance(f32 distance_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA78DE25577300BA1);
    ctx->Reset();

    ctx->Push(distance_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_draw_origin(f32 x_, f32 y_, f32 z_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA0008F3BBB8F416);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_debug_sphere(f32 x_, f32 y_, f32 z_, f32 radius_, i32 red_, i32 green_, i32 blue_, i32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAAD68E1AB39DA632);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success grassbatch_enable_flattening_ext_in_sphere(f32 x_, f32 y_, f32 z_, i32 p3_, f32 p4_, f32 p5_, f32 p6_, f32 scale_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAAE9BE70EC7C69AB);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(scale_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success begin_scaleform_movie_method_on_frontend(bool* native_return, const CStringPtr& method_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAB58C27C2E6123C6);
    ctx->Reset();

    ctx->Push(method_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success draw_poly(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 x3_, f32 y3_, f32 z3_, i32 red_, i32 green_, i32 blue_, i32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAC26716048436851);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(x3_);
    ctx->Push(y3_);
    ctx->Push(z3_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_particle_fx_cam_inside_nonplayer_vehicle(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xACEE6F360FC1F6B6);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_on_island_x_for_taken_photo(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xADD6627C4D325458);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_unparsed_scaleform_string() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAE4E8157D9ECF087);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success procgrass_enable_cullsphere(i32 handle_, f32 x_, f32 y_, f32 z_, f32 scale_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAE51BC858F32BA66);
    ctx->Reset();

    ctx->Push(handle_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(scale_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success use_snow_foot_vfx_when_unsheltered(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAEEDAD1420C65CC0);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_bink_movie_volume(i32 bink_movie_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAFF33B1178172223);
    ctx->Reset();

    ctx->Push(bink_movie_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cascade_shadows_set_shadow_sample_type(const CStringPtr& type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB11D94BC55F41932);
    ctx->Reset();

    ctx->Push(type_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success golf_trail_set_fixed_control_point(i32 type_, f32 x_pos_, f32 y_pos_, f32 z_pos_, f32 p4_, i32 red_, i32 green_, i32 blue_, i32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB1BB03742917A5D6);
    ctx->Reset();

    ctx->Push(type_);
    ctx->Push(x_pos_);
    ctx->Push(y_pos_);
    ctx->Push(z_pos_);
    ctx->Push(p4_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success destroy_tracked_point(i32 point_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB25DC90BAD56CA42);
    ctx->Reset();

    ctx->Push(point_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_screen_aspect_ratio(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB2EBE8CBC58B90E9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success add_decal(i32* native_return, i32 decal_type_, f32 pos_x_, f32 pos_y_, f32 pos_z_, f32 p4_, f32 p5_, f32 p6_, f32 p7_, f32 p8_, f32 p9_, f32 width_, f32 height_, f32 r_coef_, f32 g_coef_, f32 b_coef_, f32 opacity_, f32 timeout_, bool p17_, bool p18_, bool p19_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB302244A1839BDAD);
    ctx->Reset();

    ctx->Push(decal_type_);
    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(width_);
    ctx->Push(height_);
    ctx->Push(r_coef_);
    ctx->Push(g_coef_);
    ctx->Push(b_coef_);
    ctx->Push(opacity_);
    ctx->Push(timeout_);
    ctx->Push(p17_);
    ctx->Push(p18_);
    ctx->Push(p19_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_motionblur_max_vel_scaler(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB3C641F3630BF6DA);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_particle_fx_looped_scale(i32 ptfx_handle_, f32 scale_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB44250AAA456492D);
    ctx->Reset();

    ctx->Push(ptfx_handle_);
    ctx->Push(scale_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success animpostfx_stop_all() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB4EDDC19532BFB85);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_lock_adaptive_dof_distance(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB569F41F3E7E83A4);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success load_movie_mesh_set(i32* native_return, const CStringPtr& movie_mesh_set_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB66064452270E8F1);
    ctx->Reset();

    ctx->Push(movie_mesh_set_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success unpatch_decal_diffuse_map(i32 decal_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB7ED70C49521A61D);
    ctx->Reset();

    ctx->Push(decal_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_particle_fx_non_looped_scale(f32 scale_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB7EF5850C39FABCA);
    ctx->Reset();

    ctx->Push(scale_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_script_gfx_align(i32 horizontal_align_, i32 vertical_align_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB8A850F20A067EB6);
    ctx->Reset();

    ctx->Push(horizontal_align_);
    ctx->Push(vertical_align_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_particle_fx_from_entity(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB8FEAEEBCC127425);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success begin_scaleform_movie_method_on_frontend_header(bool* native_return, const CStringPtr& method_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB9449845F73F5E9C);
    ctx->Reset();

    ctx->Push(method_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_checkpoint_rgba2(i32 checkpoint_, i32 red_, i32 green_, i32 blue_, i32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB9EA40907C680580);
    ctx->Reset();

    ctx->Push(checkpoint_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_particle_fx_in_vehicle_interior(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA0127DA25FD54C9);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_particle_fx_foot_override_name(const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA3D194057C79A7B);
    ctx->Reset();

    ctx->Push(p0_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_hidof_override(bool p0_, bool p1_, f32 nearplane_out_, f32 nearplane_in_, f32 farplane_out_, f32 farplane_in_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA3D65906822BED5);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(nearplane_out_);
    ctx->Push(nearplane_in_);
    ctx->Push(farplane_out_);
    ctx->Push(farplane_in_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success scaleform_movie_method_add_param_texture_name_string(const CStringPtr& string_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA7148484BD90365);
    ctx->Reset();

    ctx->Push(string_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_tv_channel(i32 channel_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBAABBB23EB6E484E);
    ctx->Reset();

    ctx->Push(channel_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_safe_zone_size(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBAF107B6BB2C97F0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_extra_tcmodifier(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBB0527EC6341496D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_particle_fx_bullet_impact_lodrange_scale(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBB90E12CAC1DAB25);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_current_player_tcmodifier(const CStringPtr& modifier_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBBF327DED94E4DEB);
    ctx->Reset();

    ctx->Push(modifier_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success phonephotoeditor_is_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBCEDB009461DA156);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success request_scaleform_movie_skip_render_while_paused(i32* native_return, const CStringPtr& scaleform_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBD06C611BB9048C2);
    ctx->Reset();

    ctx->Push(scaleform_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_player_tcmodifier_transition(f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBDEB86F4D5809204);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_grass_cull_sphere(i32* native_return, f32 p0_, f32 p1_, f32 p2_, f32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBE197EAA669238F4);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_streamed_texture_dict_as_no_longer_needed(const CStringPtr& texture_dict_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBE2CACCF5A8AA805);
    ctx->Reset();

    ctx->Push(texture_dict_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_tv_channel_playlist(i32 tv_channel_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBEB3D46BB7F043C0);
    ctx->Reset();

    ctx->Push(tv_channel_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_next_player_tcmodifier(const CStringPtr& modifier_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBF59707B3E5ED531);
    ctx->Reset();

    ctx->Push(modifier_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success golf_trail_set_fixed_control_point_enable(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC0416B061F2B7E5E);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_hdtex_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC35A6D07C93802B2);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success scaleform_movie_method_add_param_int(i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC3D0841A0CC546A6);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_particle_fx(i32 ptfx_handle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC401503DFE8D53CF);
    ctx->Reset();

    ctx->Push(ptfx_handle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_tracked_point_visible(bool* native_return, i32 point_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC45CCDAAC9221CA8);
    ctx->Reset();

    ctx->Push(point_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success end_scaleform_movie_method_return_value(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC50AA39A577AF886);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success request_scaleform_movie_instance(i32* native_return, const CStringPtr& scaleform_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC514489CFB8AF806);
    ctx->Reset();

    ctx->Push(scaleform_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success scaleform_movie_method_add_param_bool(bool value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC58424BA936EB458);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_depthwriting(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC5C8F970D4EDFF71);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_script_gfx_draw_behind_pausemenu(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC6372ECD45D73BCD);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ptfx_force_vehicle_interior_flag(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC6730E0D14E50703);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_scaleform_movie_method() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC6796A8FFA375E53);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_decal_alive(bool* native_return, i32 decal_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC694D74949CAFD0C);
    ctx->Reset();

    ctx->Push(decal_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success start_particle_fx_looped_on_entity_bone(i32* native_return, const CStringPtr& effect_name_, u32 entity_, f32 x_offset_, f32 y_offset_, f32 z_offset_, f32 x_rot_, f32 y_rot_, f32 z_rot_, i32 bone_index_, f32 scale_, bool x_axis_, bool y_axis_, bool z_axis_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC6EB449E33977F0B);
    ctx->Reset();

    ctx->Push(effect_name_.ptr);
    ctx->Push(entity_);
    ctx->Push(x_offset_);
    ctx->Push(y_offset_);
    ctx->Push(z_offset_);
    ctx->Push(x_rot_);
    ctx->Push(y_rot_);
    ctx->Push(z_rot_);
    ctx->Push(bone_index_);
    ctx->Push(scale_);
    ctx->Push(x_axis_);
    ctx->Push(y_axis_);
    ctx->Push(z_axis_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success start_networked_particle_fx_non_looped_on_entity(bool* native_return, const CStringPtr& effect_name_, u32 entity_, f32 offset_x_, f32 offset_y_, f32 offset_z_, f32 rot_x_, f32 rot_y_, f32 rot_z_, f32 scale_, bool axis_x_, bool axis_y_, bool axis_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC95EB1DB6E92113D);
    ctx->Reset();

    ctx->Push(effect_name_.ptr);
    ctx->Push(entity_);
    ctx->Push(offset_x_);
    ctx->Push(offset_y_);
    ctx->Push(offset_z_);
    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);
    ctx->Push(scale_);
    ctx->Push(axis_x_);
    ctx->Push(axis_y_);
    ctx->Push(axis_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success fade_up_ped_light(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC9B18B4619F48F7B);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_vehicle_distantlights(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC9F98AC1884E73A2);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success water_reflection_set_script_object_visibility(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCA465D9CC0D231BA);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_particle_fx_bullet_trace_no_angle_reject(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCA4AE345A153D573);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_noisinessoveride(f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCB6A7C3BB17A0C67);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_status_of_create_low_quality_copy_of_photo(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCB82A0BF0E3E3265);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success remove_decals_from_object(u32 obj_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCCF71CBDDF5B6CB9);
    ctx->Reset();

    ctx->Push(obj_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_scaleform_movie_fullscreen_masked(i32 scaleform1_, i32 scaleform2_, i32 red_, i32 green_, i32 blue_, i32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCF537FDE4FBD4CE5);
    ctx->Reset();

    ctx->Push(scaleform1_);
    ctx->Push(scaleform2_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_in_water_ptfx(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCFD16F0DB5A3535C);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success call_scaleform_movie_method_with_number(i32 scaleform_, const CStringPtr& method_name_, f32 param1_, f32 param2_, f32 param3_, f32 param4_, f32 param5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD0837058AE2E4BEE);
    ctx->Reset();

    ctx->Push(scaleform_);
    ctx->Push(method_name_.ptr);
    ctx->Push(param1_);
    ctx->Push(param2_);
    ctx->Push(param3_);
    ctx->Push(param4_);
    ctx->Push(param5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_spot_light(f32 pos_x_, f32 pos_y_, f32 pos_z_, f32 dir_x_, f32 dir_y_, f32 dir_z_, i32 color_r_, i32 color_g_, i32 color_b_, f32 distance_, f32 brightness_, f32 hardness_, f32 radius_, f32 falloff_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD0F64B265C8C8B33);
    ctx->Reset();

    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(dir_x_);
    ctx->Push(dir_y_);
    ctx->Push(dir_z_);
    ctx->Push(color_r_);
    ctx->Push(color_g_);
    ctx->Push(color_b_);
    ctx->Push(distance_);
    ctx->Push(brightness_);
    ctx->Push(hardness_);
    ctx->Push(radius_);
    ctx->Push(falloff_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_tv_player_watching_this_frame(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD1C55B110E4DF534);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success pass_keyboard_input_to_scaleform(bool* native_return, i32 scaleform_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD1C7CB175E012964);
    ctx->Reset();

    ctx->Push(scaleform_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success animpostfx_stop_and_flush_requests(const CStringPtr& effect_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD2209BE128B5418C);
    ctx->Reset();

    ctx->Push(effect_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_vehicle_crew_emblem(u32 vehicle_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD2300034310557E4);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cascade_shadows_set_cascade_bounds(i32 p0_, bool p1_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, bool p6_, f32 p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD2936CAB8B58FCBD);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cascade_shadows_set_dynamic_depth_mode(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD39D13C9FEBF0511);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ui3dscene_is_available(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD3A10FC7FD8D98CD);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success draw_box(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, i32 red_, i32 green_, i32 blue_, i32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD3A9971CADAC7252);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success scaleform_movie_method_add_param_float(f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD69736AAE04DB51A);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success preset_interior_ambient_cache(const CStringPtr& timecycle_modifier_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD7021272EB0A451E);
    ctx->Reset();

    ctx->Push(timecycle_modifier_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success fade_decals_in_range(f32 x_, f32 y_, f32 z_, f32 p3_, f32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD77EDADB0420E6E0);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success seethrough_set_heatscale(i32 index_, f32 heat_scale_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD7D0B00177485411);
    ctx->Reset();

    ctx->Push(index_);
    ctx->Push(heat_scale_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success free_memory_for_high_quality_photo() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD801CC02177FA3F1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_scaleform_movie_method_return_value_bool(bool* native_return, i32 method_return_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD80A80346A45D761);
    ctx->Reset();

    ctx->Push(method_return_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success enable_clown_blood_vfx(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD821490579791273);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_debug_line_with_two_colours(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, i32 r1_, i32 g1_, i32 b1_, i32 r2_, i32 g2_, i32 b2_, i32 alpha1_, i32 alpha2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD8B9A8AC5608FF94);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(r1_);
    ctx->Push(g1_);
    ctx->Push(b1_);
    ctx->Push(r2_);
    ctx->Push(g2_);
    ctx->Push(b2_);
    ctx->Push(alpha1_);
    ctx->Push(alpha2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_disable_petrol_decals_igniting_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD9454B5752C857DC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_checkpoint_force_direction(i32 checkpoint_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDB1EA9411C8911EC);
    ctx->Reset();

    ctx->Push(checkpoint_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success golf_trail_set_tessellation(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDBAA5EC848BA2D46);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_render_in_game_ui(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDC459CFA0CCE245B);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_maximum_number_of_cloud_photos(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDC54A7AF8B3A14EF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_particle_fx_looped_far_clip_dist(i32 ptfx_handle_, f32 range_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDCB194B85EF7B541);
    ctx->Reset();

    ctx->Push(ptfx_handle_);
    ctx->Push(range_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_particle_fx_in_range(f32 x_, f32 y_, f32 z_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDD19FA1C6D657305);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_networked_particle_fx_looped_on_entity_bone(i32* native_return, const CStringPtr& effect_name_, u32 entity_, f32 x_offset_, f32 y_offset_, f32 z_offset_, f32 x_rot_, f32 y_rot_, f32 z_rot_, i32 bone_index_, f32 scale_, bool x_axis_, bool y_axis_, bool z_axis_, f32 r_, f32 g_, f32 b_, f32 a_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDDE23F30CC5A0F03);
    ctx->Reset();

    ctx->Push(effect_name_.ptr);
    ctx->Push(entity_);
    ctx->Push(x_offset_);
    ctx->Push(y_offset_);
    ctx->Push(z_offset_);
    ctx->Push(x_rot_);
    ctx->Push(y_rot_);
    ctx->Push(z_rot_);
    ctx->Push(bone_index_);
    ctx->Push(scale_);
    ctx->Push(x_axis_);
    ctx->Push(y_axis_);
    ctx->Push(z_axis_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);
    ctx->Push(a_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success disable_screenblur_fade() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDE81239437E8C5A8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success update_lights_on_entity(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDEADC0DEDEADC0DE);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_scaleform_script_hud_movie_loaded(bool* native_return, i32 hud_component_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDF6E5987D2B4D140);
    ctx->Reset();

    ctx->Push(hud_component_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success request_streamed_texture_dict(const CStringPtr& texture_dict_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDFA2EF8E04127DD5);
    ctx->Reset();

    ctx->Push(texture_dict_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success toggle_paused_renderphases(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDFC252D8A3E15AB7);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_icon_visibility(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE0E8BEECCA96BA31);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_particle_fx_looped_at_coord(i32* native_return, const CStringPtr& effect_name_, f32 x_, f32 y_, f32 z_, f32 x_rot_, f32 y_rot_, f32 z_rot_, f32 scale_, bool x_axis_, bool y_axis_, bool z_axis_, bool p11_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE184F4F0DC5910E7);
    ctx->Reset();

    ctx->Push(effect_name_.ptr);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(x_rot_);
    ctx->Push(y_rot_);
    ctx->Push(z_rot_);
    ctx->Push(scale_);
    ctx->Push(x_axis_);
    ctx->Push(y_axis_);
    ctx->Push(z_axis_);
    ctx->Push(p11_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success reset_paused_renderphases() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE1C8709406F2C41C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_scaleform_movie_method_return_value_string(CStringPtr& native_return, i32 method_return_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE1E258829A885245);
    ctx->Reset();

    ctx->Push(method_return_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success set_distance_blur_strength_override(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE2892E7E55D7073A);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_artificial_vehicle_lights_state(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE2B187C0939B3D32);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_tracked_point(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE2C9439ED45DEA60);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success animpostfx_get_current_time(f32* native_return, const CStringPtr& effect_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE35B38A27E8E7179);
    ctx->Reset();

    ctx->Push(effect_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success reset_script_gfx_align() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE3A3DB414A373DAB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_adaptation(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE3E2C1B4C59DBC77);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_motionblur_max_vel_scaler(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE59343E9E96529E7);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success toggle_player_damage_overlay(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE63D7C6EECECB66B);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_scaleform_movie_to_use_super_large_rt(i32 scaleform_handle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE6A9F00D4240B519);
    ctx->Reset();

    ctx->Push(scaleform_handle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_noiseoveride(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE787BF1C5CF823C9);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_this_photo_slot_contain_a_valid_photo(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE791DF1F73ED2C8B);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success draw_sprite(const CStringPtr& texture_dict_, const CStringPtr& texture_name_, f32 screen_x_, f32 screen_y_, f32 width_, f32 height_, f32 heading_, i32 red_, i32 green_, i32 blue_, i32 alpha_, bool p11_, i32 p12_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE7FFAE5EBF23D890);
    ctx->Reset();

    ctx->Push(texture_dict_.ptr);
    ctx->Push(texture_name_.ptr);
    ctx->Push(screen_x_);
    ctx->Push(screen_y_);
    ctx->Push(width_);
    ctx->Push(height_);
    ctx->Push(heading_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);
    ctx->Push(p11_);
    ctx->Push(p12_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_marker_ex(i32 type_, f32 pos_x_, f32 pos_y_, f32 pos_z_, f32 dir_x_, f32 dir_y_, f32 dir_z_, f32 rot_x_, f32 rot_y_, f32 rot_z_, f32 scale_x_, f32 scale_y_, f32 scale_z_, i32 red_, i32 green_, i32 blue_, i32 alpha_, bool bob_up_and_down_, bool face_camera_, i32 p19_, bool rotate_, const CStringPtr& texture_dict_, const CStringPtr& texture_name_, bool draw_on_ents_, bool p24_, bool p25_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE82728F0DE75D13A);
    ctx->Reset();

    ctx->Push(type_);
    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(dir_x_);
    ctx->Push(dir_y_);
    ctx->Push(dir_z_);
    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);
    ctx->Push(scale_x_);
    ctx->Push(scale_y_);
    ctx->Push(scale_z_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);
    ctx->Push(bob_up_and_down_);
    ctx->Push(face_camera_);
    ctx->Push(p19_);
    ctx->Push(rotate_);
    ctx->Push(texture_dict_.ptr);
    ctx->Push(texture_name_.ptr);
    ctx->Push(draw_on_ents_);
    ctx->Push(p24_);
    ctx->Push(p25_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success scaleform_movie_method_add_param_player_name_string(const CStringPtr& string_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE83A3E3557A56640);
    ctx->Reset();

    ctx->Push(string_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_decals_from_vehicle(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE91F1B65F2B48D57);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_particle_fx_override(const CStringPtr& old_asset_, const CStringPtr& new_asset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEA1E2D93F6F75ED9);
    ctx->Reset();

    ctx->Push(old_asset_.ptr);
    ctx->Push(new_asset_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success release_movie_mesh_set(i32 movie_mesh_set_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEB119AA014E89183);
    ctx->Reset();

    ctx->Push(movie_mesh_set_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_toggle_paused_renderphases_status(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEB3DAC2C86001E5E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success scaleform_movie_method_add_param_latest_brief_string(i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEC52C631A1831C03);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success load_high_quality_photo(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEC72C258667BE5EA);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success remove_decal(i32 decal_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xED3F346429CCD659);
    ctx->Reset();

    ctx->Push(decal_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_particle_fx_cam_inside_vehicle(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEEC4047028426510);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_exposuretweak(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEF398BEEE4EF45F9);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success call_scaleform_movie_method_with_number_and_string(i32 scaleform_, const CStringPtr& method_name_, f32 float_param1_, f32 float_param2_, f32 float_param3_, f32 float_param4_, f32 float_param5_, const CStringPtr& string_param1_, const CStringPtr& string_param2_, const CStringPtr& string_param3_, const CStringPtr& string_param4_, const CStringPtr& string_param5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEF662D8D57E290B1);
    ctx->Reset();

    ctx->Push(scaleform_);
    ctx->Push(method_name_.ptr);
    ctx->Push(float_param1_);
    ctx->Push(float_param2_);
    ctx->Push(float_param3_);
    ctx->Push(float_param4_);
    ctx->Push(float_param5_);
    ctx->Push(string_param1_.ptr);
    ctx->Push(string_param2_.ptr);
    ctx->Push(string_param3_.ptr);
    ctx->Push(string_param4_.ptr);
    ctx->Push(string_param5_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success adjust_next_pos_size_as_normalized169() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEFABC7722293DA7C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success trigger_screenblur_fade_out(bool* native_return, f32 transition_time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEFACC8AEF94430D5);
    ctx->Reset();

    ctx->Push(transition_time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success override_interior_smoke_end() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEFB55E7C25D3B3BE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_region_vfx(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEFD97FF47B745B8D);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_aspect_ratio(f32* native_return, bool b_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF1307EF624A80D87);
    ctx->Reset();

    ctx->Push(b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success ui3dscene_push_preset(bool* native_return, const CStringPtr& preset_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF1CEA8A4198D8E9A);
    ctx->Reset();

    ctx->Push(preset_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success start_particle_fx_looped_on_ped_bone(i32* native_return, const CStringPtr& effect_name_, u32 ped_, f32 x_offset_, f32 y_offset_, f32 z_offset_, f32 x_rot_, f32 y_rot_, f32 z_rot_, i32 bone_index_, f32 scale_, bool x_axis_, bool y_axis_, bool z_axis_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF28DA9F38CD1787C);
    ctx->Reset();

    ctx->Push(effect_name_.ptr);
    ctx->Push(ped_);
    ctx->Push(x_offset_);
    ctx->Push(y_offset_);
    ctx->Push(z_offset_);
    ctx->Push(x_rot_);
    ctx->Push(y_rot_);
    ctx->Push(z_rot_);
    ctx->Push(bone_index_);
    ctx->Push(scale_);
    ctx->Push(x_axis_);
    ctx->Push(y_axis_);
    ctx->Push(z_axis_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success draw_light_with_range(f32 pos_x_, f32 pos_y_, f32 pos_z_, i32 color_r_, i32 color_g_, i32 color_b_, f32 range_, f32 intensity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF2A1B2771A01DBD4);
    ctx->Reset();

    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(color_r_);
    ctx->Push(color_g_);
    ctx->Push(color_b_);
    ctx->Push(range_);
    ctx->Push(intensity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_arena_theme_and_variation_for_taken_photo(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF3F776ADA161E47D);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_scaleform_script_hud_movie(i32 hud_component_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF44A5456AC3F4F97);
    ctx->Reset();

    ctx->Push(hud_component_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_light_with_rangeex(f32 x_, f32 y_, f32 z_, i32 r_, i32 g_, i32 b_, f32 range_, f32 intensity_, f32 shadow_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF49E9A9716A04595);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);
    ctx->Push(range_);
    ctx->Push(intensity_);
    ctx->Push(shadow_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_checkpoint_clipplane_with_pos_norm(i32 checkpoint_, f32 pos_x_, f32 pos_y_, f32 pos_z_, f32 unk_x_, f32 unk_y_, f32 unk_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF51D36185993515D);
    ctx->Reset();

    ctx->Push(checkpoint_);
    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(unk_x_);
    ctx->Push(unk_y_);
    ctx->Push(unk_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_networked_particle_fx_non_looped_at_coord(bool* native_return, const CStringPtr& effect_name_, f32 x_pos_, f32 y_pos_, f32 z_pos_, f32 x_rot_, f32 y_rot_, f32 z_rot_, f32 scale_, bool x_axis_, bool y_axis_, bool z_axis_, bool p11_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF56B8137DF10135D);
    ctx->Reset();

    ctx->Push(effect_name_.ptr);
    ctx->Push(x_pos_);
    ctx->Push(y_pos_);
    ctx->Push(z_pos_);
    ctx->Push(x_rot_);
    ctx->Push(y_rot_);
    ctx->Push(z_rot_);
    ctx->Push(scale_);
    ctx->Push(x_axis_);
    ctx->Push(y_axis_);
    ctx->Push(z_axis_);
    ctx->Push(p11_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_script_gfx_align_params(f32 x_, f32 y_, f32 w_, f32 h_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF5A2C681787E579D);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(w_);
    ctx->Push(h_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_status_of_sorted_list_operation(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF5BED327CEA362B1);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success delete_checkpoint(i32 checkpoint_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF5ED37F54CD4D52E);
    ctx->Reset();

    ctx->Push(checkpoint_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success begin_scaleform_movie_method(bool* native_return, i32 scaleform_, const CStringPtr& method_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF6E48914C7A8694E);
    ctx->Reset();

    ctx->Push(scaleform_);
    ctx->Push(method_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_weather_ptfx_override_curr_level(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF78B803082D4386F);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_tv_channel_playlist(i32 tv_channel_, const CStringPtr& playlist_name_, bool restart_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF7B38B8305F1FE8B);
    ctx->Reset();

    ctx->Push(tv_channel_);
    ctx->Push(playlist_name_.ptr);
    ctx->Push(restart_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_particle_fx_looped_offsets(i32 ptfx_handle_, f32 x_, f32 y_, f32 z_, f32 rot_x_, f32 rot_y_, f32 rot_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF7DDEBEC43483C43);
    ctx->Reset();

    ctx->Push(ptfx_handle_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_bink_movie_audio_frontend(i32 bink_movie_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF816F2933752322D);
    ctx->Reset();

    ctx->Push(bink_movie_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success call_scaleform_movie_method(i32 scaleform_, const CStringPtr& method_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFBD96D87AC96D533);
    ctx->Reset();

    ctx->Push(scaleform_);
    ctx->Push(method_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_tv_channel(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFC1E275A90D39995);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_checkpoint_force_old_arrow_pointing(i32 checkpoint_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFCF6788FC4860CD4);
    ctx->Reset();

    ctx->Push(checkpoint_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_tv_channel(f32 x_pos_, f32 y_pos_, f32 x_scale_, f32 y_scale_, f32 rotation_, i32 red_, i32 green_, i32 blue_, i32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFDDC2B4ED3C69DF0);
    ctx->Reset();

    ctx->Push(x_pos_);
    ctx->Push(y_pos_);
    ctx->Push(x_scale_);
    ctx->Push(y_scale_);
    ctx->Push(rotation_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_timecycle_modifier_index(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFDF3D97C674AFB66);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_vehicle_crew_emblem_request_state(i32* native_return, u32 vehicle_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFE26117A5841B2FF);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success seethrough_set_noise_max(f32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFEBFBFDFB66039DE);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_draw_origin() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFF0B610F6BE0D7AF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success seethrough_set_noise_min(f32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFF5992E1C9E65D05);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_blip_rotation(i32* native_return, i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x003E92BA477F9D7F);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_current_webpage_id(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x01A358D9128B7A86);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success has_additional_text_loaded(bool* native_return, i32 slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x02245FE4BED318B8);
    ctx->Reset();

    ctx->Push(slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success flash_ability_bar(i32 milliseconds_to_flash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x02CFBA0C9E9275CE);
    ctx->Reset();

    ctx->Push(milliseconds_to_flash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_text_proportional(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x038C1F517D7FDCF8);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_text_component_integer(i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x03B504CF259931BC);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_colour(i32 blip_, i32 color_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x03D7FB09E75D6B7E);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(color_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_director_mode_available(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x04655F9D075D0AE5);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_menu_ped_bool_stat(bool* native_return, bool* out_value_, u32 stat_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x052991E59076E4E4);
    ctx->Reset();

    ctx->Push(stat_hash_);
    ctx->Push(out_value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_max_armour_hud_display(i32 maximum_value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x06A320535F5F0248);
    ctx->Reset();

    ctx->Push(maximum_value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success change_fake_mp_cash(i32 cash_, i32 bank_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0772DF77852C2E30);
    ctx->Reset();

    ctx->Push(cash_);
    ctx->Push(bank_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_text_scale(f32 scale_, f32 size_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x07C837F9A01C34C9);
    ctx->Reset();

    ctx->Push(scale_);
    ctx->Push(size_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_minimap_fow_reveal_coordinate(f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0923DBF87DFF735E);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_radar_zoom(i32 zoom_level_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x096EF57A0C999BBA);
    ctx->Reset();

    ctx->Push(zoom_level_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_scripted_hud_component_hidden_this_frame(bool* native_return, i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x09C0403ED9A751C2);
    ctx->Reset();

    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success begin_text_command_is_this_help_message_being_displayed(const CStringPtr& label_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A24DA3A41B718F5);
    ctx->Reset();

    ctx->Push(label_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success hud_suppress_weapon_wheel_results_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0AFC4AF510774B47);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success show_hud_component_this_frame(i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0B4DF1FA60C0E664);
    ctx->Reset();

    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_ai_blip_forced_on(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0C4BBF625CA98C4E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_warning_message_option_items(bool* native_return, i32 index_, const CStringPtr& name_, i32 cash_, i32 rp_, i32 lvl_, i32 colour_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0C5A80A9E096D529);
    ctx->Reset();

    ctx->Push(index_);
    ctx->Push(name_.ptr);
    ctx->Push(cash_);
    ctx->Push(rp_);
    ctx->Push(lvl_);
    ctx->Push(colour_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success use_vehicle_targeting_reticule(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0C698D8F099174C7);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_savegame_list_unique_id(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0CF54F20DE43879C);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_text_component_formatted_integer(i32 value_, bool comma_separated_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0E4C749FF9DE9CC4);
    ctx->Reset();

    ctx->Push(value_);
    ctx->Push(comma_separated_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success restart_frontend_menu(u32 menu_hash_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x10706DC6AD2D49C0);
    ctx->Reset();

    ctx->Push(menu_hash_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_is_this_help_message_being_displayed(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x10BDDBFC529428DD);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success busyspinner_off() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x10D373323E5B9C0D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_text_component_substring_time(i32 timestamp_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1115F16B8AB9E8BF);
    ctx->Reset();

    ctx->Push(timestamp_);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_sonar_blips_this_frame(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1121BFA1A1A522A8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_named_rendertarget_linked(bool* native_return, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x113750538FA31298);
    ctx->Reset();

    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_text_input_box_enabled(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1185A8087587322C);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_reticule_values() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x12782CE0A636E9F0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success lock_minimap_position(f32 x_, f32 y_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1279E861A329E73F);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_name_to_player_name(i32 blip_, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x127DE7B20C60A6A3);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_show_cone(i32 blip_, bool toggle_, i32 hud_color_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x13127EC3665E8EE1);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(toggle_);
    ctx->Push(hud_color_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_thefeed_post_crewtag_with_game_name(i32* native_return, i32* p2_, bool p0_, bool p1_, i32 p3_, bool is_leader_, bool unk0_, i32 clan_desc_, const CStringPtr& player_name_, i32 r_, i32 g_, i32 b_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x137BC35589E34E1E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p3_);
    ctx->Push(is_leader_);
    ctx->Push(unk0_);
    ctx->Push(clan_desc_);
    ctx->Push(player_name_.ptr);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success pause_menu_get_mouse_hover_unique_id(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x13C4B962653A5280);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success release_control_of_frontend() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x14621BB1DF14E2B2);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_secondary_colour(i32 blip_, i32 r_, i32 g_, i32 b_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x14892474891E09EB);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success hud_showing_character_switch_selection(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x14C9FDCC41F81F63);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_next_blip_info_id(i32* native_return, i32 blip_sprite_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x14F96AA50D6FBEA7);
    ctx->Reset();

    ctx->Push(blip_sprite_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_mp_gamer_tags_point_health(i32 gamer_tag_id_, i32 value_, i32 maximum_value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1563FE35E9928E67);
    ctx->Reset();

    ctx->Push(gamer_tag_id_);
    ctx->Push(value_);
    ctx->Push(maximum_value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_radar_hidden(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x157F93B036700462);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_warning_message_with_header_and_substring_flags_extended(const CStringPtr& label_title_, const CStringPtr& label_message_, i32 p2_, i32 p3_, const CStringPtr& label_message2_, bool p5_, i32 p6_, i32 p7_, const CStringPtr& p8_, const CStringPtr& p9_, bool background_, i32 error_code_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x15803FEC3B9A872B);
    ctx->Reset();

    ctx->Push(label_title_.ptr);
    ctx->Push(label_message_.ptr);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(label_message2_.ptr);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_.ptr);
    ctx->Push(p9_.ptr);
    ctx->Push(background_);
    ctx->Push(error_code_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_ped_have_ai_blip(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x15B8ECF844EE67ED);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success thefeed_show() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x15CFA549788D35EF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_character_from_audio_conversation_filename(CStringPtr& native_return, const CStringPtr& text_, i32 position_, i32 length_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x169BD9382084C8C0);
    ctx->Reset();

    ctx->Push(text_.ptr);
    ctx->Push(position_);
    ctx->Push(length_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success set_second_script_variable_hud_colour(i32 r_, i32 g_, i32 b_, i32 a_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x16A304E6CB2BFAB9);
    ctx->Reset();

    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);
    ctx->Push(a_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success use_fake_mp_cash(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x170F541E1CADD1DE);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_text_component_substring_text_label_hash_key(u32 gxt_entry_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x17299B63C7683A2B);
    ctx->Reset();

    ctx->Push(gxt_entry_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success thefeed_set_rgba_parameter_for_next_message(i32 red_, i32 green_, i32 blue_, i32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x17430B918701C342);
    ctx->Reset();

    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success thefeed_set_flash_duration_parameter_for_next_message(i32 count_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x17AD8C9706BDD88A);
    ctx->Reset();

    ctx->Push(count_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_waypoint_blip_enum_id(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x186E5D252FA50E7D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_hud_preference_switched_on(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1930DFA731813EC4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success show_for_sale_icon_on_blip(i32 blip_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x19BD6E3C0E16A8FA);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_minimap_in_spectator_mode(bool toggle_, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1A5CD7752DD28CD3);
    ctx->Reset();

    ctx->Push(toggle_);
    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_named_rendertarget_render_id(i32* native_return, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1A6478B61C6BDC3B);
    ctx->Reset();

    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success close_mp_text_chat() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1AC8F4AD40E22127);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_first_blip_info_id(i32* native_return, i32 blip_sprite_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1BEDE233E6CD2A1F);
    ctx->Reset();

    ctx->Push(blip_sprite_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_pause_menu_restarting(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1C491717107431C7);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success does_text_block_exist(bool* native_return, const CStringPtr& gxt_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1C7302E725259789);
    ctx->Reset();

    ctx->Push(gxt_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_text_drop_shadow() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1CA3E9EAC9D93E5E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success replace_hud_colour(i32 hud_color_index_, i32 hud_color_index2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1CCC708F0F850613);
    ctx->Reset();

    ctx->Push(hud_color_index_);
    ctx->Push(hud_color_index2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_thefeed_post_messagetext(i32* native_return, const CStringPtr& txd_name_, const CStringPtr& texture_name_, bool flash_, i32 icon_type_, const CStringPtr& sender_, const CStringPtr& subject_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1CCD9A37359072CF);
    ctx->Reset();

    ctx->Push(txd_name_.ptr);
    ctx->Push(texture_name_.ptr);
    ctx->Push(flash_);
    ctx->Push(icon_type_);
    ctx->Push(sender_.ptr);
    ctx->Push(subject_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success mp_text_chat_disable(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1DB21A44B09E8BA3);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_waypoint_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1DD1F58F493F1DA5);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ability_bar_visibility(bool visible_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1DFEDD15019315A9);
    ctx->Reset();

    ctx->Push(visible_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_blip_info_id_display(i32* native_return, i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1E314167F701DC3B);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success end_text_command_thefeed_post_messagetext_tu(i32* native_return, const CStringPtr& txd_name_, const CStringPtr& texture_name_, bool flash_, i32 icon_type_, const CStringPtr& sender_, const CStringPtr& subject_, f32 duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1E6611149DB3DB6B);
    ctx->Reset();

    ctx->Push(txd_name_.ptr);
    ctx->Push(texture_name_.ptr);
    ctx->Push(flash_);
    ctx->Push(icon_type_);
    ctx->Push(sender_.ptr);
    ctx->Push(subject_.ptr);
    ctx->Push(duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_race_track_render(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1EAC5F91BCBC5073);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success custom_minimap_set_blip_object(i32 sprite_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1EAE6DD17B7A5EFA);
    ctx->Reset();

    ctx->Push(sprite_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_blip_sprite(i32* native_return, i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1FC877464A04FC4F);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success begin_text_command_thefeed_post(const CStringPtr& text_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x202709F4C58A0424);
    ctx->Reset();

    ctx->Push(text_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success hide_minimap_interior_map_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x20FE7FDFEEAD38C0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success draw_frontend_background_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x211C4EF450086857);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_script_hidden_help_this_frame(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x214CD562A939246A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success force_scripted_gfx_when_frontend_active(const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2162C446DFDF38FD);
    ctx->Reset();

    ctx->Push(p0_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_gps_flags() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x21986729D6A3A830);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_hud_component_position(Vector3Wrapper& native_return, i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x223CA69A8C4417FD);
    ctx->Reset();

    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success get_current_frontend_menu_version(u32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2309595AD6145265);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_bigmap_active(bool toggle_big_map_, bool show_full_map_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x231C8F89D0539D8F);
    ctx->Reset();

    ctx->Push(toggle_big_map_);
    ctx->Push(show_full_map_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_category(i32 blip_, i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x234CDD44D996FD9A);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_display_help(i32 p0_, bool loop_, bool beep_, i32 shape_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x238FFE5C7B0498A6);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(loop_);
    ctx->Push(beep_);
    ctx->Push(shape_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success show_friend_indicator_on_blip(i32 blip_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x23C3EB807312F01A);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success begin_text_command_add_directly_to_previous_briefs(const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x23D69E0465570028);
    ctx->Reset();

    ctx->Push(p0_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_floating_help_text_on_screen(bool* native_return, i32 hud_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2432784ACA090DA4);
    ctx->Reset();

    ctx->Push(hud_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success hide_hudmarkers_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x243296A510B562B6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_character_menu_ped_masked_int_stat(bool* native_return, void* out_value_, u32 stat_hash_, i32 p2_, i32 mask_, bool p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x24A49BEAF468DC90);
    ctx->Reset();

    ctx->Push(stat_hash_);
    ctx->Push(p2_);
    ctx->Push(mask_);
    ctx->Push(p4_);
    ctx->Push(out_value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_blip_as_mission_creator_blip(i32 blip_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x24AC0137444F9FD5);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_text_outline() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2513DFB0FB8400FE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_radius_blip_edge(i32 blip_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x25615540D894B814);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success thefeed_hide_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x25F87B30C382FCA7);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success begin_text_command_display_text(const CStringPtr& text_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x25FBB336DF1804CB);
    ctx->Reset();

    ctx->Push(text_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_director_mode_launched_by_script() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2632482FD6B9AB87);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_mission_creator_blip(bool* native_return, i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x26F49BF3381D933D);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success custom_minimap_clear_blips() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2708FC083123F9FF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_pause_menu_state(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x272ACD84970869C5);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success display_area_name(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x276B6CE369C33678);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_force_show_gps(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2790F4B17D098E26);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reload_map_menu() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2916A928514C9827);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success lock_minimap_angle(i32 angle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x299FAEBB108AE05B);
    ctx->Reset();

    ctx->Push(angle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_additional_text(i32 p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2A179DF17CCF04CD);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success pause_menu_is_context_menu_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2A25ADC48F87841F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_custom_mp_hud_color(i32 hud_color_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2ACCB195F3CCD9DE);
    ctx->Reset();

    ctx->Push(hud_color_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_fade(i32 blip_, i32 opacity_, i32 duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2AEE8F8390D2298C);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(opacity_);
    ctx->Push(duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_as_minimal_on_edge(i32 blip_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B6D467DAB714E8D);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_thefeed_post_stats(i32* native_return, const CStringPtr& stat_title_, i32 icon_enum_, bool step_val_, i32 bar_value_, bool is_important_, const CStringPtr& picture_texture_dict_, const CStringPtr& picture_texture_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B7E9A4EAAA93C89);
    ctx->Reset();

    ctx->Push(stat_title_.ptr);
    ctx->Push(icon_enum_);
    ctx->Push(step_val_);
    ctx->Push(bar_value_);
    ctx->Push(is_important_);
    ctx->Push(picture_texture_dict_.ptr);
    ctx->Push(picture_texture_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_blip_fade_direction(i32* native_return, i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2C173AE2BDB9385E);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_blip_use_height_indicator_on_edge(i32 blip_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2C9F302398E13141);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_small_prints() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2CEA2839313C09AC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success pause_toggle_fullscreen_map(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2DE6C5E2E996F178);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_menu_layout_changed_event_occurred(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2E22FEFA0100275E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_blip_flashes_alternate(i32 blip_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2E8D9498C56DD0D1);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_thefeed_post_ticker(i32* native_return, bool blink_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2ED7843F8F801023);
    ctx->Reset();

    ctx->Push(blink_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_store_pending_network_shutdown_to_open(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2F057596F2BD0061);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success add_point_to_gps_custom_route(f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x311438A071DD9B1A);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_mp_gamer_tag_health_bar_colour(i32 gamer_tag_id_, i32 hud_color_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3158C77A7E888AB4);
    ctx->Reset();

    ctx->Push(gamer_tag_id_);
    ctx->Push(hud_color_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_mp_gamer_tag(i32 gamer_tag_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x31698AA80E0223F8);
    ctx->Reset();

    ctx->Push(gamer_tag_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success thefeed_update_item_texture(const CStringPtr& txd_string1_, const CStringPtr& txn_string1_, const CStringPtr& txd_string2_, const CStringPtr& txn_string2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x317EBA71D7543F52);
    ctx->Reset();

    ctx->Push(txd_string1_.ptr);
    ctx->Push(txn_string1_.ptr);
    ctx->Push(txd_string2_.ptr);
    ctx->Push(txn_string2_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_gps_flashes(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x320D0E0D936A0E9B);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_help_message_fading_out(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x327EDEEEAC55C369);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success thefeed_hide() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x32888337579A5970);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_thefeed_post_unlock(i32* native_return, const CStringPtr& gxt_label1_, i32 p1_, const CStringPtr& gxt_label2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x33EE12743CCD6343);
    ctx->Reset();

    ctx->Push(gxt_label1_.ptr);
    ctx->Push(p1_);
    ctx->Push(gxt_label2_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success pause_menu_get_mouse_hover_index(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x359AF31A4B52F5ED);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success remove_fake_cone_data(i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x35A3CD97B2C0A6D2);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_minimap_golf_course_off() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x35EDD5B2E3FF01C0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_menu_trigger_event_details(i32* last_item_menu_id_, i32* selected_item_unique_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x36C1451A88A09630);
    ctx->Reset();

    ctx->Push(last_item_menu_id_);
    ctx->Push(selected_item_unique_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_thefeed_post_ticker_with_tokens(i32* native_return, bool blink_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x378E809BF61EC840);
    ctx->Reset();

    ctx->Push(blink_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_warning_message_with_header_extended(void* p6_, void* p7_, const CStringPtr& entry_header_, const CStringPtr& entry_line1_, i32 flags_, const CStringPtr& entry_line2_, bool p4_, i32 p5_, bool show_bg_, i32 p9_, i32 p10_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x38B55259C2E078ED);
    ctx->Reset();

    ctx->Push(entry_header_.ptr);
    ctx->Push(entry_line1_.ptr);
    ctx->Push(flags_);
    ctx->Push(entry_line2_.ptr);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(show_bg_);
    ctx->Push(p9_);
    ctx->Push(p10_);
    ctx->Push(p6_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_colour_of_next_text_component(i32 hud_color_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x39BBF623FC803EAC);
    ctx->Reset();

    ctx->Push(hud_color_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_frontend_ready_for_control(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3BAB9A4E4F2FF5C7);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_pause_menu_ped_lighting(bool state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3CA6050692BC61B0);
    ctx->Reset();

    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_gps_multi_route(i32 hud_color_, bool route_from_player_, bool display_on_foot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3D3D15AF7BCAAF83);
    ctx->Reset();

    ctx->Push(hud_color_);
    ctx->Push(route_from_player_);
    ctx->Push(display_on_foot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_mouse_rolled_over_instructional_buttons(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3D9ACB1EB139E702);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_gps_multi_route_render(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3DDA37128DD1ACA8);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success unlock_minimap_position() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3E93E06DB8EF1F30);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_ai_blip_has_cone(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3EED80DFF7325CAA);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_north_blid_index(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3F0CF9CB7E589B88);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_health_hud_display_values(i32 health_, i32 capacity_, bool was_added_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3F5CC444DCAAA8F2);
    ctx->Reset();

    ctx->Push(health_);
    ctx->Push(capacity_);
    ctx->Push(was_added_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success display_hud_when_paused_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x402F9ED62087E898);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_pm_warningscreen_active(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x41350B4FC28E3941);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_hovering_over_mission_creator_blip(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4167EFE0527D706E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_length_of_literal_string_in_bytes(i32* native_return, const CStringPtr& string_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x43E4111189E54F0E);
    ctx->Reset();

    ctx->Push(string_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_text_edge(i32 p0_, i32 r_, i32 g_, i32 b_, i32 a_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x441603240D202FA6);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);
    ctx->Push(a_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success pause_menu_deactivate_context(u32 context_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x444D8CF241EC25C5);
    ctx->Reset();

    ctx->Push(context_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_thefeed_post_ticker_forced(i32* native_return, bool blink_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x44FA03975424A0EE);
    ctx->Reset();

    ctx->Push(blink_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success reset_hud_component_values(i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x450930E616475D0D);
    ctx->Reset();

    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_alpha(i32 blip_, i32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x45FF974EEE1C8734);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_text_dropshadow(i32 distance_, i32 r_, i32 g_, i32 b_, i32 a_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x465C84BC39F1C351);
    ctx->Reset();

    ctx->Push(distance_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);
    ctx->Push(a_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_blip_for_radius(i32* native_return, f32 pos_x_, f32 pos_y_, f32 pos_z_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x46818D79B1F7499A);
    ctx->Reset();

    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success hud_force_special_vehicle_weapon_wheel() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x488043841BBE156F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success pause_menu_redraw_instructional_buttons(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4895BDEA16E7C080);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success thefeed_set_vibrate_parameter_for_next_message(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4A0C7C9BB10ABB36);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_standard_blip_enum_id(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4A9923385BDB9DAD);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success hide_loading_on_fade_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4B0311D3CDC4648F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_short_height_threshold(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4B5B620C9B59ED34);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_blip_info_id_entity_index(u32* native_return, i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4BA4E2553AFEDC2C);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success is_help_message_being_displayed(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4D79439A6B55AC67);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_text_justification(i32 justify_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4E096588B13FFECA);
    ctx->Reset();

    ctx->Push(justify_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_navigating_menu_content(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4E3CD0EF8A489541);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_mp_gamer_tag_active(bool* native_return, i32 gamer_tag_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4E929E7A5796FD26);
    ctx->Reset();

    ctx->Push(gamer_tag_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success show_scripted_hud_component_this_frame(i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4F38DCA127DAAEA2);
    ctx->Reset();

    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_route(i32 blip_, bool enabled_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4F7D8A9BFB0B43E9);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(enabled_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_floating_help(i32 hud_index_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x50085246ABD3FEFA);
    ctx->Reset();

    ctx->Push(hud_index_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_inside_very_small_interior(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x504DFE62A1692296);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success begin_text_command_get_number_of_lines_for_string(const CStringPtr& entry_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x521FB041D93DD0E4);
    ctx->Reset();

    ctx->Push(entry_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success open_reportugc_menu() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x523A590C1A3CC0D3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_default_script_rendertarget_render_id(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x52F0982D7FD156B6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success end_text_command_thefeed_post_messagetext_with_crew_tag_and_additional_icon(i32* native_return, const CStringPtr& txd_name_, const CStringPtr& texture_name_, bool flash_, i32 icon_type1_, const CStringPtr& sender_, const CStringPtr& subject_, f32 duration_, const CStringPtr& clan_tag_, i32 icon_type2_, i32 p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x531B84E7DA981FB6);
    ctx->Reset();

    ctx->Push(txd_name_.ptr);
    ctx->Push(texture_name_.ptr);
    ctx->Push(flash_);
    ctx->Push(icon_type1_);
    ctx->Push(sender_.ptr);
    ctx->Push(subject_.ptr);
    ctx->Push(duration_);
    ctx->Push(clan_tag_.ptr);
    ctx->Push(icon_type2_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success hide_number_on_blip(i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x532CFF637EF80148);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success custom_minimap_set_active(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5354C5BA2EA868A4);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_hidden_on_legend(i32 blip_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x54318C915D27E4CE);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success begin_text_command_get_screen_width_of_display_text(const CStringPtr& text_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x54CE8AC98E120CAB);
    ctx->Reset();

    ctx->Push(text_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success custom_minimap_create_blip(i32* native_return, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x551DF99658DB6EE8);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success thefeed_set_scripted_menu_height(f32 pos_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x55598D21339CB998);
    ctx->Reset();

    ctx->Push(pos_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success dont_zoom_minimap_when_sniping_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x55F5A5F07134DE60);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ai_ped_vehicle_blip_index(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x56176892826A4FE8);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success thefeed_auto_post_gametips_on() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x56C8B608CFD49854);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_allow_comma_on_text_input(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x577599CCED639CA2);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_next_message_to_previous_briefs_list(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x57D760D55F54E071);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success register_named_rendertarget(bool* native_return, const CStringPtr& name_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x57D9C12635E25CE3);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success thefeed_force_render_off() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x583049884A2EEE3C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_blip_coords(Vector3Wrapper& native_return, i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x586AFE3FF72D996E);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success set_minimap_block_waypoint(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x58FADDED207897DC);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_screen_code_wants_script_to_control(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x593FEAE1F73392D4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_mp_gamer_tag_free(bool* native_return, i32 gamer_tag_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x595B5178E412E199);
    ctx->Reset();

    ctx->Push(gamer_tag_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_radar_as_interior_this_frame(u32 interior_, f32 x_, f32 y_, i32 z_, i32 zoom_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x59E727A1C9D3E31A);
    ctx->Reset();

    ctx->Push(interior_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(zoom_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_blip_for_coord(i32* native_return, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5A039BB0BCA604B6);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_gps_flags(i32 p0_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5B440763A4C8D15B);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_pause_menu_position(Vector3Wrapper& native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5BFF36D6ED83E0AE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success get_new_selected_mission_creator_blip(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5C90988E7C8E1AF4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success end_text_command_thefeed_post_messagetext_with_crew_tag(i32* native_return, const CStringPtr& txd_name_, const CStringPtr& texture_name_, bool flash_, i32 icon_type_, const CStringPtr& sender_, const CStringPtr& subject_, f32 duration_, const CStringPtr& clan_tag_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5CBF7BADE20DB93E);
    ctx->Reset();

    ctx->Push(txd_name_.ptr);
    ctx->Push(texture_name_.ptr);
    ctx->Push(flash_);
    ctx->Push(icon_type_);
    ctx->Push(sender_.ptr);
    ctx->Push(subject_.ptr);
    ctx->Push(duration_);
    ctx->Push(clan_tag_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success add_blip_for_entity(i32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5CDE92C702A8FCE7);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_use_island_map(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5E1460624D194A38);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_ped_in_pause_menu() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5E62BE5DC58E9E06);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_text_render_id(i32 render_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5F15302936E07111);
    ctx->Reset();

    ctx->Push(render_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_mission_name(bool p0_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5F28ECF5FC84772F);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_text_component_substring_keyboard_display(const CStringPtr& string_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5F68520888E69014);
    ctx->Reset();

    ctx->Push(string_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success hide_minimap_exterior_map_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5FBAE526203990C9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success show_heading_indicator_on_blip(i32 blip_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5FBCA48327B914DF);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_menu_ped_float_stat(bool* native_return, f32* out_value_, u32 stat_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5FBD7095FE7AE57F);
    ctx->Reset();

    ctx->Push(stat_hash_);
    ctx->Push(out_value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success request_additional_text_for_dlc(const CStringPtr& gxt_, i32 slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6009F9F1AE90D8A6);
    ctx->Reset();

    ctx->Push(gxt_.ptr);
    ctx->Push(slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_next_message_to_previous_briefs(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x60296AF4BA14ABC5);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success allow_sonar_blips(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x60734CC207C9833C);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success show_account_picker() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x60E892BA4F5BDCA4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_mp_gamer_tag_colour(i32 gamer_tag_id_, i32 component_, i32 hud_color_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x613ED644950626AE);
    ctx->Reset();

    ctx->Push(gamer_tag_id_);
    ctx->Push(component_);
    ctx->Push(hud_color_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_all_help_messages() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6178F68A87A4D3A0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_minimap_fow_do_not_update(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x62E849B7EB28E770);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_text_wrap(f32 start_, f32 end_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x63145D9C883A1A70);
    ctx->Reset();

    ctx->Push(start_);
    ctx->Push(end_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_mouse_event(bool* native_return, void* p1_, void* p2_, void* p3_, i32 scaleform_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x632B2940C67F4EA9);
    ctx->Reset();

    ctx->Push(scaleform_handle_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_mp_gamer_tag_visibility(i32 gamer_tag_id_, i32 component_, bool toggle_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x63BB75ABEDC1F6A0);
    ctx->Reset();

    ctx->Push(gamer_tag_id_);
    ctx->Push(component_);
    ctx->Push(toggle_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_text_font(i32 font_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x66E0276CC5F6B9DA);
    ctx->Reset();

    ctx->Push(font_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success code_wants_script_to_take_control(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x66E7CB63C97B7D20);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_gps_multi_route() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x67EEDEA1B9BAFD94);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success hide_hud_component_this_frame(i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6806C51AD12B83B8);
    ctx->Reset();

    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success override_mp_text_chat_team_string(u32 gxt_entry_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6A1738B4323FE2D9);
    ctx->Reset();

    ctx->Push(gxt_entry_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success toggle_stealth_radar(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6AFDFB93754950C7);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success flash_minimap_display_with_color(i32 hud_color_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6B1DE27EE78E6A19);
    ctx->Reset();

    ctx->Push(hud_color_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_text_right_justify(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6B3C4650BC8BEE47);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_minimap_sonar_sweep(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6B50FC8749632EC1);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_text_component_substring_player_name(const CStringPtr& text_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6C188BE134E074AA);
    ctx->Reset();

    ctx->Push(text_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_use_set_destination_in_pause_map(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6CDD58146A436083);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success dont_tilt_minimap_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6D14BFDC33B34F55);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_frontend_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6D3465A73092F0E6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_mp_gamer_tag_with_crew_color(u32 player_, const CStringPtr& username_, bool pointed_clan_tag_, bool is_rockstar_clan_, const CStringPtr& clan_tag_, i32 clan_flag_, i32 r_, i32 g_, i32 b_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6DD05E9D83EFA4C9);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(username_.ptr);
    ctx->Push(pointed_clan_tag_);
    ctx->Push(is_rockstar_clan_);
    ctx->Push(clan_tag_.ptr);
    ctx->Push(clan_flag_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_mp_gamer_tag_movie_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6E0EB3EB47C8D7AA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_minimap_fow_coordinate_is_revealed(bool* native_return, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6E31B91145873922);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success remove_warning_message_option_items() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6EF54AB721DC6242);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success thefeed_only_show_tooltips(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6F1554B0CC2089FA);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_as_friendly(i32 blip_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6F6F290102C02AB4);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_online_policies_menu_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6F72CD94F7B5B68C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_warning_message_with_header_and_substring_flags(const CStringPtr& entry_header_, const CStringPtr& entry_line1_, i32 instructional_key_, const CStringPtr& entry_line2_, bool p4_, i32 p5_, i32 additional_int_info_, const CStringPtr& additional_text_info_line1_, const CStringPtr& additional_text_info_line2_, bool show_background_, i32 error_code_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x701919482C74B5AB);
    ctx->Reset();

    ctx->Push(entry_header_.ptr);
    ctx->Push(entry_line1_.ptr);
    ctx->Push(instructional_key_);
    ctx->Push(entry_line2_.ptr);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(additional_int_info_);
    ctx->Push(additional_text_info_line1_.ptr);
    ctx->Push(additional_text_info_line2_.ptr);
    ctx->Push(show_background_);
    ctx->Push(error_code_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success hide_hud_and_radar_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x719FF505F097FD20);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_additional_text(const CStringPtr& gxt_, i32 slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x71A78003C8E71424);
    ctx->Reset();

    ctx->Push(gxt_.ptr);
    ctx->Push(slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_minimap_golf_course(i32 hole_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x71BDB63DBAF8DA59);
    ctx->Reset();

    ctx->Push(hole_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_blip_hud_colour(i32* native_return, i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x729B5F1EFBC0AAEE);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success hud_set_weapon_wheel_top_slot(u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x72C1056D678BB7D8);
    ctx->Reset();

    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success trigger_sonar_blip(f32 pos_x_, f32 pos_y_, f32 pos_z_, f32 radius_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x72DD432F3CDFC0EE);
    ctx->Reset();

    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(radius_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success display_sniper_scope_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x73115226F4814E62);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success pulse_blip(i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x742D6FD43115AF73);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success show_tick_on_blip(i32 blip_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x74513EA3E505181E);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_frontend_active(bool active_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x745711A75AB09277);
    ctx->Reset();

    ctx->Push(active_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success show_height_on_blip(i32 blip_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x75A16C3DA34F1245);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_minimap_component(bool* native_return, i32 component_id_, bool toggle_, i32 override_color_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x75A9A10948D1DEA6);
    ctx->Reset();

    ctx->Push(component_id_);
    ctx->Push(toggle_);
    ctx->Push(override_color_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success open_social_club_menu() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x75D3691713C3B05A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_text_component_substring_phone_number(const CStringPtr& p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x761B77454205A61D);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success display_hud_when_not_in_state_of_play_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7669F9E39DC17063);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_floating_help_text_screen_position(i32 hud_index_, f32 x_, f32 y_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7679CC1BCEBE3D4C);
    ctx->Reset();

    ctx->Push(hud_index_);
    ctx->Push(x_);
    ctx->Push(y_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_dynamic_pause_menu_error_message() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7792424AA0EAC32E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_fake_pausemap_player_position_this_frame(f32 x_, f32 y_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x77E2DD177910E1CF);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success pause_menuception_go_deeper(i32 page_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x77F16B447824DA6C);
    ctx->Reset();

    ctx->Push(page_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_floating_help_text_world_position(i32 hud_index_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x784BA7E0ECEB4178);
    ctx->Reset();

    ctx->Push(hud_index_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_floating_help_text_style(i32 hud_index_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x788E7FD431BD67F1);
    ctx->Reset();

    ctx->Push(hud_index_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_named_rendertarget_registered(bool* native_return, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x78DCDC15C9F116B4);
    ctx->Reset();

    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_message_being_displayed(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7984C03AA5CC2F41);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_gps_race_track() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7AA5B4CE533C858B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_thefeed_post_unlock_tu_with_color(i32* native_return, i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7AE0589093A2E088);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_warning_message(const CStringPtr& title_msg_, i32 flags_, const CStringPtr& prompt_msg_, bool p3_, i32 p4_, const CStringPtr& p5_, const CStringPtr& p6_, bool show_background_, i32 error_code_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7B1776B3B53F8D74);
    ctx->Reset();

    ctx->Push(title_msg_.ptr);
    ctx->Push(flags_);
    ctx->Push(prompt_msg_.ptr);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_.ptr);
    ctx->Push(p6_.ptr);
    ctx->Push(show_background_);
    ctx->Push(error_code_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_icon_colour(i32 color_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7B21E0BB01E8224A);
    ctx->Reset();

    ctx->Push(color_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_filename_for_audio_conversation(CStringPtr& native_return, const CStringPtr& label_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7B5280EBA9840C72);
    ctx->Reset();

    ctx->Push(label_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success set_mp_gamer_tag_big_text(i32 gamer_tag_id_, const CStringPtr& string_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7B7723747CCB55B6);
    ctx->Reset();

    ctx->Push(gamer_tag_id_);
    ctx->Push(string_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success mp_text_chat_is_team_job(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7C226D5346D4D10A);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_hud_colour(i32* r_, i32* g_, i32* b_, i32* a_, i32 hud_color_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7C9C91AB74A0360F);
    ctx->Reset();

    ctx->Push(hud_color_index_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);
    ctx->Push(a_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ai_ped_ped_blip_index(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7CD934010E115C2C);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_menu_layout_changed_event_details(i32* last_item_menu_id_, i32* selected_item_menu_id_, i32* selected_item_unique_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7E17BE53E1AAABAF);
    ctx->Reset();

    ctx->Push(last_item_menu_id_);
    ctx->Push(selected_item_menu_id_);
    ctx->Push(selected_item_unique_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_inside_very_large_interior(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7EC8ABA5E74B3D7A);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ime_in_progress(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x801879A9B4F4B2FB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_length_of_string_with_this_text_label(i32* native_return, const CStringPtr& gxt_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x801BD273D3A23F74);
    ctx->Reset();

    ctx->Push(gxt_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success open_online_policies_menu() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x805D7CBB36FD6C4C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_is_in_director_mode(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x808519373FD336A3);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_text_component_substring_blip_name(i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x80EAD8E2E1D5D52E);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success thefeed_clear_frozen_post() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x80FE4F3AB4E1B62A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_description_for_ugc_mission_eight_strings(bool p0_, const CStringPtr& p1_, const CStringPtr& p2_, const CStringPtr& p3_, const CStringPtr& p4_, const CStringPtr& p5_, const CStringPtr& p6_, const CStringPtr& p7_, const CStringPtr& p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x817B86108EB94E51);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_.ptr);
    ctx->Push(p2_.ptr);
    ctx->Push(p3_.ptr);
    ctx->Push(p4_.ptr);
    ctx->Push(p5_.ptr);
    ctx->Push(p6_.ptr);
    ctx->Push(p7_.ptr);
    ctx->Push(p8_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success unlock_minimap_angle() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8183455E16C42E3A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_warning_screen_message_hash(u32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x81DF9ABA6C83DFF9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success refresh_waypoint() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x81FA173F170560D1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success thefeed_get_last_shown_phone_activatable_feed_id(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x82352748437638CA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success display_player_name_tags_on_blips(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x82CEDC33687E1F50);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_route_colour(i32 blip_, i32 colour_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x837155CD2F63DA09);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(colour_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_fake_cone_array() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8410C5E0CD847B9D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success pause_menu_is_context_active(bool* native_return, u32 context_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x84698AB38D0C6636);
    ctx->Reset();

    ctx->Push(context_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success begin_text_command_display_help(const CStringPtr& input_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8509B634FBE7DA11);
    ctx->Reset();

    ctx->Push(input_type_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success begin_text_command_is_message_displayed(const CStringPtr& text_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x853648FD1063A213);
    ctx->Reset();

    ctx->Push(text_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_get_screen_width_of_display_text(f32* native_return, bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x85F061DA64ED2F67);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success remove_blip(i32* blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x86A652570E5F25DD);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_close_text_input_box() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8817605C2BA76200);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_allow_ability_bar(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x889329C80FE5963C);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success dont_zoom_minimap_when_running_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x89DA85D949CE57A0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_is_message_displayed(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8A9BA1AB3E237613);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_streaming_additional_text(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8B6817B71B85EBF0);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_mouse_cursor_style(i32 sprite_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8DB8CFFD58B62552);
    ctx->Reset();

    ctx->Push(sprite_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_help(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8DFCED7A656F8802);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_thefeed_post_crew_rankup_with_literal_flag(i32* native_return, const CStringPtr& p0_, const CStringPtr& p1_, const CStringPtr& p2_, bool p3_, bool p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8EFCCF6EC66D85E4);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    ctx->Push(p1_.ptr);
    ctx->Push(p2_.ptr);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_character_menu_ped_float_stat(bool* native_return, f32* out_value_, f32 stat_hash_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8F08017F9D7C47BD);
    ctx->Reset();

    ctx->Push(stat_hash_);
    ctx->Push(p2_);
    ctx->Push(out_value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success begin_text_command_override_button_text(const CStringPtr& gxt_entry_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8F9EE5687F8EECCD);
    ctx->Reset();

    ctx->Push(gxt_entry_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_gps_custom_route_render(bool toggle_, i32 radar_thickness_, i32 map_thickness_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x900086F371220B6F);
    ctx->Reset();

    ctx->Push(toggle_);
    ctx->Push(radar_thickness_);
    ctx->Push(map_thickness_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_display(i32 blip_, i32 display_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9029B2F3DA924928);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(display_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_get_number_of_lines_for_string(i32* native_return, f32 x_, f32 y_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9040DFB09BE75706);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_pausemap_in_interior_mode(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9049FE339D5F6F6F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_menu_ped_masked_int_stat(bool* native_return, i32* out_value_, u32 stat_hash_, i32 mask_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x90A6526CF0381030);
    ctx->Reset();

    ctx->Push(stat_hash_);
    ctx->Push(mask_);
    ctx->Push(p3_);
    ctx->Push(out_value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_minimap_in_prologue(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9133955F1A2DA957);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_reportugc_menu_open(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9135584D09A3437E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success disable_pausemenu_spinner(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9245E81072704B8A);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success thefeed_set_background_color_for_next_post(i32 hud_color_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x92F0DA1E27DB96DC);
    ctx->Reset();

    ctx->Push(hud_color_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_text_component_substring_website(const CStringPtr& website_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x94CF4AC034C9C986);
    ctx->Reset();

    ctx->Push(website_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_multiplayer_wallet_cash() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x95CF81BD06EE1887);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success display_help_text_this_frame(const CStringPtr& message_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x960C9FF8F616E41C);
    ctx->Reset();

    ctx->Push(message_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_multiplayer_hud_cash() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x968F270E39141ECA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success display_cash(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x96DEC8D5430208B7);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_blip_alpha(i32* native_return, i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x970F608F0EE6C885);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_max_health_hud_display(i32 maximum_value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x975D66A0BC17064C);
    ctx->Reset();

    ctx->Push(maximum_value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_ai_blip_notice_range(u32 ped_, f32 range_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x97C65887D4B37FA9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(range_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_thefeed_post_crewtag(i32* native_return, i32* p2_, bool p0_, bool p1_, i32 p3_, bool is_leader_, bool unk0_, i32 clan_desc_, i32 r_, i32 g_, i32 b_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x97C9E4E7024A8F2C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p3_);
    ctx->Push(is_leader_);
    ctx->Push(unk0_);
    ctx->Push(clan_desc_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_current_website_id(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x97D47996FC48CBAD);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_mouse_cursor_visible(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x98215325A695E78A);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_first_n_characters_of_literal_string(CStringPtr& native_return, const CStringPtr& string_, i32 length_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x98C3CF913D895111);
    ctx->Reset();

    ctx->Push(string_.ptr);
    ctx->Push(length_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success set_ability_bar_value(f32 p0_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9969599CCFF5D85E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_number_of_active_blips(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9A3FF3DE163034E8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_blip_info_id_pickup_index(i32* native_return, i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9B6786E4C03DD382);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_mp_gamer_tag_num_packages(i32 gamer_tag_id_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9C16459B2324B2CF);
    ctx->Reset();

    ctx->Push(gamer_tag_id_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_brief() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D292F73ADBD9313);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_print(i32 duration_, bool draw_immediately_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D77056A530643F6);
    ctx->Reset();

    ctx->Push(duration_);
    ctx->Push(draw_immediately_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_social_club_tour(const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9E778248D6685FE0);
    ctx->Reset();

    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_radar_preference_switched_on(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9EB6522EA68F22FE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_cop_blip_sprite(i32 p0_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9FCB3CBFB3EAD69A);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success display_radar(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA0EBB943C300E693);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success thefeed_force_render_on() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA13C11E1B5C06BFC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success hud_get_weapon_wheel_top_slot(u32* native_return, i32 weapon_type_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA13E93403F26C812);
    ctx->Reset();

    ctx->Push(weapon_type_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_fake_gps_player_position_this_frame(f32 x_, f32 y_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA17784FCA9548D15);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success flash_wanted_display(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA18AFB39081B6A1F);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_pm_player_crew_color(bool* native_return, i32* r_, i32* g_, i32* b_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA238192F33110615);
    ctx->Reset();

    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success has_director_mode_been_launched_by_code(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA277800A9EAE340E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success show_number_on_blip(i32 blip_, i32 number_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA3C0B359DCB848B6);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(number_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success hud_get_weapon_wheel_currently_highlighted(u32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA48931185F0536FE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success hide_street_and_car_names_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA4DEDE28B1814289);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_text_leading(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA50ABC31E3CDFAFF);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_blip_flashing(bool* native_return, i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA5E41FD83AD6CEF0);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success display_ammo_this_frame(bool display_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA5E78BA2B1331C55);
    ctx->Reset();

    ctx->Push(display_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success display_hud(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA6294919E56FF02A);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_mp_gamer_tags_should_use_vehicle_health(i32 gamer_tag_id_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA67F9C46D612B6F1);
    ctx->Reset();

    ctx->Push(gamer_tag_id_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_blip_exist(bool* native_return, i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA6DB27D19ECBB7DA);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_waypoint_off() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA7E4E2D361C2627F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_hud_hidden(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA86478C6958735C5);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success end_text_command_override_button_text(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA86911979638106F);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_rotation_with_float(i32 blip_, f32 heading_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA8B6AFDAC320AC87);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(heading_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success thefeed_flush_queue() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA8FDB297A8D25FBA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_point_to_gps_multi_route(f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA905192A6781C41B);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success thefeed_is_paused(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA9CBFD40B3FA3010);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success end_text_command_thefeed_post_award(i32* native_return, const CStringPtr& texture_dict_, const CStringPtr& texture_name_, i32 rp_bonus_, i32 color_overlay_, const CStringPtr& title_label_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA295B6F28BD587D);
    ctx->Reset();

    ctx->Push(texture_dict_.ptr);
    ctx->Push(texture_name_.ptr);
    ctx->Push(rp_bonus_);
    ctx->Push(color_overlay_);
    ctx->Push(title_label_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_blip_flash_interval(i32 blip_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA51DB313C010A7E);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_hud_component_position(i32 id_, f32 x_, f32 y_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAABB1F56E2A17CED);
    ctx->Reset();

    ctx->Push(id_);
    ctx->Push(x_);
    ctx->Push(y_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_mouse_cursor_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAAE7CE1D63167423);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success begin_text_command_busyspinner_on(const CStringPtr& string_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xABA17D7CE615ADBF);
    ctx->Reset();

    ctx->Push(string_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_text_label_exist(bool* native_return, const CStringPtr& gxt_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAC09CA973C564252);
    ctx->Reset();

    ctx->Push(gxt_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success give_ped_to_pause_menu(u32 ped_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAC0BFBDC3BE00E14);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_subtitle_preference_switched_on(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAD6DACA4BA53E0A4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success has_this_additional_text_loaded(bool* native_return, const CStringPtr& gxt_, i32 slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xADBF060E2B30C5BC);
    ctx->Reset();

    ctx->Push(gxt_.ptr);
    ctx->Push(slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success thefeed_auto_post_gametips_off() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xADED7F5748ACAFE6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_coords(i32 blip_, f32 pos_x_, f32 pos_y_, f32 pos_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAE2AF67E9D9AF65D);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_priority(i32 blip_, i32 priority_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAE9FC9EF6A9FAC79);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(priority_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_warning_message_ready_for_control(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAF42195A42C63BBA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_minimap_rendering(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAF754F20EB5CD51A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_pause_menu_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB0034A223497FFCB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_floating_help_text_to_entity(i32 hud_index_, u32 entity_, f32 offset_x_, f32 offset_y_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB094BC1DB4018240);
    ctx->Reset();

    ctx->Push(hud_index_);
    ctx->Push(entity_);
    ctx->Push(offset_x_);
    ctx->Push(offset_y_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_mp_text_chat_typing(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB118AF58B5F332A1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_has_ai_blip_with_colour(u32 ped_, bool has_cone_, i32 color_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB13DCB4C6FAAD238);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(has_cone_);
    ctx->Push(color_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_flashes(i32 blip_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB14552383D39CE3E);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_bright(i32 blip_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB203913733F27884);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_character_from_audio_conversation_filename_with_byte_limit(CStringPtr& native_return, const CStringPtr& text_, i32 position_, i32 length_, i32 max_length_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB2798643312205C5);
    ctx->Reset();

    ctx->Push(text_.ptr);
    ctx->Push(position_);
    ctx->Push(length_);
    ctx->Push(max_length_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success busyspinner_is_displaying(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB2A592B04648A9CB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_blip_marker_long_distance(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB552929B85FC27EC);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_reminder_message() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB57D8DD645CFA2CF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_thefeed_post_versus_tu(i32* native_return, const CStringPtr& txd_name1_, const CStringPtr& texture_name1_, i32 count1_, const CStringPtr& txd_name2_, const CStringPtr& texture_name2_, i32 count2_, i32 hud_color1_, i32 hud_color2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB6871B0555B02996);
    ctx->Reset();

    ctx->Push(txd_name1_.ptr);
    ctx->Push(texture_name1_.ptr);
    ctx->Push(count1_);
    ctx->Push(txd_name2_.ptr);
    ctx->Push(texture_name2_.ptr);
    ctx->Push(count2_);
    ctx->Push(hud_color1_);
    ctx->Push(hud_color2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success thefeed_report_logo_off() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB695E2CD0A2DA9EE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cop_blip_sprite_as_standard() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB7B873520C84C118);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success show_outline_indicator_on_blip(i32 blip_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB81656BC81FE24D1);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success begin_text_command_print(const CStringPtr& gxt_entry_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB87A37EEB7FAA67D);
    ctx->Reset();

    ctx->Push(gxt_entry_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_global_actionscript_flag(i32 flag_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB99C4E4D9499DF29);
    ctx->Reset();

    ctx->Push(flag_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_help_message_style(i32 style_, i32 hud_color_, i32 alpha_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB9C362BABECDDC7A);
    ctx->Reset();

    ctx->Push(style_);
    ctx->Push(hud_color_);
    ctx->Push(alpha_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success suppress_frontend_rendering_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA751764F0821256);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_off_wanted_star_flash(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA8D65C1C65702E5);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success thefeed_set_snap_feed_item_positions(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBAE4F9B97CD43B30);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_set_blip_name(i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBC38B49BCB83BC9B);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_hud_component_active(bool* native_return, i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBC4C9EA5391ECC0D);
    ctx->Reset();

    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_blip_from_entity(i32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBC8DBDCA2436F7E8);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_radar_zoom_precise(f32 zoom_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBD12C5EEE184C337);
    ctx->Reset();

    ctx->Push(zoom_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_busyspinner_on(i32 busy_spinner_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBD12F8228410D9B4);
    ctx->Reset();

    ctx->Push(busy_spinner_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_blip_for_pickup(i32* native_return, i32 pickup_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBE339365C863BD36);
    ctx->Reset();

    ctx->Push(pickup_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success thefeed_remove_item(i32 notification_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBE4390CB40B3E627);
    ctx->Reset();

    ctx->Push(notification_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_text_colour(i32 red_, i32 green_, i32 blue_, i32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBE6B23FFA53FB442);
    ctx->Reset();

    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);
    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_as_short_range(i32 blip_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBE8BE4FE60E27B72);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_blip_info_id_type(i32* native_return, i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBE9B0959FFD0779B);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success draw_hud_over_fade_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBF4F34A85CA2970C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_fake_mp_gamer_tag(i32* native_return, u32 ped_, const CStringPtr& username_, bool pointed_clan_tag_, bool is_rockstar_clan_, const CStringPtr& clan_tag_, i32 clan_flag_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBFEFE3321A3F5015);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(username_.ptr);
    ctx->Push(pointed_clan_tag_);
    ctx->Push(is_rockstar_clan_);
    ctx->Push(clan_tag_.ptr);
    ctx->Push(clan_flag_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_text_centre(bool align_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC02F4DBFB51D988B);
    ctx->Reset();

    ctx->Push(align_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_multiplayer_wallet_cash() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC2D15BEF167E27BC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_fake_spectator_mode(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC2D2AD9EAAE265B8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_widescreen_format(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC3B07BA00A83B0F1);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_social_club_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC406BE343FC4B9AF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_blip_extended_height_threshold(i32 blip_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC4278F70131BAA6D);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_cop_blip_from_ped(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC594B315EDF2D4AF);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_text_component_substring_text_label(const CStringPtr& label_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC63CD5D2920ACBE7);
    ctx->Reset();

    ctx->Push(label_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success preload_busyspinner() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC65AB383CD91DF98);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_thefeed_post_messagetext_subtitle_label(i32* native_return, const CStringPtr& txd_name_, const CStringPtr& texture_name_, bool flash_, i32 icon_type_, const CStringPtr& sender_, const CStringPtr& subject_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC6F580E4C94926AC);
    ctx->Reset();

    ctx->Push(txd_name_.ptr);
    ctx->Push(texture_name_.ptr);
    ctx->Push(flash_);
    ctx->Push(icon_type_);
    ctx->Push(sender_.ptr);
    ctx->Push(subject_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success show_contact_instructional_button(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC772A904CDE1186F);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success pause_menu_set_busy_spinner(bool p0_, i32 position_, i32 spinner_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC78E239AC5B2DDB9);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(position_);
    ctx->Push(spinner_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_multiplayer_bank_cash() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC7C6789AA1CFEDD0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success pause_menu_get_mouse_click_event(bool* native_return, void* p0_, void* p1_, void* p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC8E1071177A23BE5);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success end_text_command_thefeed_post_unlock_tu(i32* native_return, const CStringPtr& gxt_label1_, i32 p1_, const CStringPtr& gxt_label2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC8F3AAF93D0600BF);
    ctx->Reset();

    ctx->Push(gxt_label1_.ptr);
    ctx->Push(p1_);
    ctx->Push(gxt_label2_.ptr);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_character_menu_ped_int_stat(bool* native_return, void* p1_, i32 p0_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCA6B2F7CE32AB653);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p2_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success show_gold_tick_on_blip(i32 blip_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCAC2031EBF79B1A8);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_radar_zoom_to_distance(f32 zoom_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCB7CC0D58405AD41);
    ctx->Reset();

    ctx->Push(zoom_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_prints() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCC33FA791322B9D9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success allow_pause_when_not_in_state_of_play_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCC3FDDED67BCFC63);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_display_text(f32 x_, f32 y_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCD015E5BB0D96A57);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_scale2d(i32 blip_, f32 x_scale_, f32 y_scale_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCD6524439909C979);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(x_scale_);
    ctx->Push(y_scale_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_fake_spectator_mode(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCD74233600C4EA6B);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success pause_menuception_the_kick() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCDCA26E80FAECB8F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_blip_for_area(i32* native_return, f32 x_, f32 y_, f32 z_, f32 width_, f32 height_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCE5D0E5E315DB238);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(width_);
    ctx->Push(height_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_character_from_audio_conversation_filename_bytes(CStringPtr& native_return, const CStringPtr& text_, i32 start_position_, i32 end_position_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCE94AEBA5D82908A);
    ctx->Reset();

    ctx->Push(text_.ptr);
    ctx->Push(start_position_);
    ctx->Push(end_position_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success flag_player_context_in_tournament(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCEF214315D276FD1);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_mp_gamer_tag_wanted_level(i32 gamer_tag_id_, i32 wantedlvl_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCF228E2AA03099C3);
    ctx->Reset();

    ctx->Push(gamer_tag_id_);
    ctx->Push(wantedlvl_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_this_print(const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCF708001E1E536DD);
    ctx->Reset();

    ctx->Push(p0_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_add_directly_to_previous_briefs(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCFDBDF5AE59BA0F4);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_street_name_from_hash_key(CStringPtr& native_return, u32 hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD0EF8A959B8A4CB9);
    ctx->Reset();

    ctx->Push(hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success clear_all_blip_routes() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD12882D3FF82BF11);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_block_wanted_flash(bool disabled_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD1942374085C8469);
    ctx->Reset();

    ctx->Push(disabled_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_fake_minimap_max_altimeter_height(f32 altitude_, bool p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD201F3FF917A506D);
    ctx->Reset();

    ctx->Push(altitude_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_thefeed_post_replay(i32* native_return, i32 type_, i32 image_, const CStringPtr& text_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD202B92CBF1D816F);
    ctx->Reset();

    ctx->Push(type_);
    ctx->Push(image_);
    ctx->Push(text_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success update_radar_zoom_to_blip() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD2049635DEB9C375);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_mp_gamer_tags_should_use_points_health(i32 gamer_tag_id_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD29EC58C2F6B5014);
    ctx->Reset();

    ctx->Push(gamer_tag_id_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success close_social_club_menu() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD2B32BE3FC1626C6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_has_ai_blip(u32 ped_, bool has_cone_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD30C50DF888D58B5);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(has_cone_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_scale(i32 blip_, f32 scale_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD38744167B2FA257);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(scale_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_flash_timer(i32 blip_, i32 duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD3CD6FD297AE87CC);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success busyspinner_is_on(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD422FCC5F239A915);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success thefeed_report_logo_on() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD4438C0564490E63);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success hide_help_text_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD46923FC481CA285);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_closest_blip_info_id(i32* native_return, i32 blip_sprite_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD484BF71050CA1EE);
    ctx->Reset();

    ctx->Push(blip_sprite_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_mp_gamer_tag_alpha(i32 gamer_tag_id_, i32 component_, i32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD48FE545CD46F857);
    ctx->Reset();

    ctx->Push(gamer_tag_id_);
    ctx->Push(component_);
    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_script_variable_hud_colour(i32 r_, i32 g_, i32 b_, i32 a_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD68A5FF8A3A89874);
    ctx->Reset();

    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);
    ctx->Push(a_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success delete_waypoints_from_this_player() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD8E694757BCEA8E9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_blip_short_range(bool* native_return, i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDA5F8727EB75B926);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_help_message_on_screen(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDAD37F45428801AE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_warning_message_option_highlight(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDAF87174BE7454FF);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success start_gps_custom_route(i32 hud_color_, bool display_on_foot_, bool follow_player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDB34E8D56FC13B08);
    ctx->Reset();

    ctx->Push(hud_color_);
    ctx->Push(display_on_foot_);
    ctx->Push(follow_player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_rendered_character_height(f32* native_return, f32 size_, i32 font_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDB88A37483346780);
    ctx->Reset();

    ctx->Push(size_);
    ctx->Push(font_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_warning_message_with_header(void* show_background_, void* p7_, const CStringPtr& entry_header_, const CStringPtr& entry_line1_, i32 instructional_key_, const CStringPtr& entry_line2_, bool p4_, i32 p5_, bool p8_, i32 p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDC38CC1E35B6A5D7);
    ctx->Reset();

    ctx->Push(entry_header_.ptr);
    ctx->Push(entry_line1_.ptr);
    ctx->Push(instructional_key_);
    ctx->Push(entry_line2_.ptr);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(show_background_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_main_player_blip_id(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDCD4EC3F419D02FA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success show_crew_indicator_on_blip(i32 blip_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDCFB5D4DB8BF367E);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_scripted_hud_component_active(bool* native_return, i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDD100EB17A94FF65);
    ctx->Reset();

    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_multiplayer_bank_cash() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDD21B55DF695CD0A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_blip_have_gps_route(bool* native_return, i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDD2238F57B977751);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success pause_menu_activate_context(u32 context_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDD564BDD0472C936);
    ctx->Reset();

    ctx->Push(context_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_text_command_thefeed_post_replay_input(i32* native_return, i32 type_, const CStringPtr& button_, const CStringPtr& text_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDD6CB2CCE7C2735C);
    ctx->Reset();

    ctx->Push(type_);
    ctx->Push(button_.ptr);
    ctx->Push(text_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success pause_menu_get_hair_colour_index(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDE03620F8703A9DF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_mp_gamer_tag_name(i32 gamer_tag_id_, const CStringPtr& string_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDEA2B8283BAA3944);
    ctx->Reset();

    ctx->Push(gamer_tag_id_);
    ctx->Push(string_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_pause_menu_active(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDF47FC56C71569CF);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_blip_colour(i32* native_return, i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDF729E8D20CF7327);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_blip_sprite(i32 blip_, i32 sprite_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDF735600A4696DAF);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(sprite_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_minimap_fow_discovery_ratio(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE0130B41D3CF4574);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success begin_text_command_clear_print(const CStringPtr& text_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE124FA80A759019C);
    ctx->Reset();

    ctx->Push(text_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_warning_message_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE18B138FABC53103);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success thefeed_resume() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE1CD1E48E025E661);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_high_detail(i32 blip_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE2590BC29220CEBB);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success hide_scripted_hud_component_this_frame(i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE374C498D8BADC14);
    ctx->Reset();

    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_global_actionscript_flag(i32* native_return, i32 flag_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE3B05614DCE1D014);
    ctx->Reset();

    ctx->Push(flag_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_blip_on_minimap(bool* native_return, i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE41CA53051197A27);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_mission_name_for_ugc_mission(bool p0_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE45087D85F468BC2);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_valid_vehicle_hit_hash(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE4C3B169876D33D7);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_ai_blip_gang_id(u32 ped_, i32 gang_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE52B8E7F85D39A08);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(gang_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success allow_display_of_multiplayer_cash_text(bool allow_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE67C6DFD386EA5E7);
    ctx->Reset();

    ctx->Push(allow_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_gps_custom_route() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE6DE0561D9232A64);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_text_component_float(f32 value_, i32 decimal_places_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE7DCB5B874BCD96E);
    ctx->Reset();

    ctx->Push(value_);
    ctx->Push(decimal_places_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_radar_as_exterior_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE81B7D2A3DAB2D81);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success release_named_rendertarget(bool* native_return, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE9F6FFE837354DD4);
    ctx->Reset();

    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_blip_name_from_text_file(i32 blip_, const CStringPtr& gxt_entry_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEAA0FFE120D92784);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(gxt_entry_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success hud_force_weapon_wheel(bool show_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEB354E5376BC81A7);
    ctx->Reset();

    ctx->Push(show_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_updating_mp_gamer_tag_name_and_crew_details(bool* native_return, i32 gamer_tag_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEB709A36958ABE0D);
    ctx->Reset();

    ctx->Push(gamer_tag_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_valid_vehicle_hit_hashes() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEB81A3DADD503187);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success take_control_of_frontend() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEC9264727EEC0F28);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_pause_menu_ped_sleep_state(bool state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xECF128344E9FF9F1);
    ctx->Reset();

    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_close_reportugc_menu() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEE4C0E6DBC6F2C6F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_all_mp_gamer_tags_visibility(i32 gamer_tag_id_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEE76FF7E6A0166B0);
    ctx->Reset();

    ctx->Push(gamer_tag_id_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success activate_frontend_menu(u32 menuhash_, bool toggle_pause_, i32 component_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEF01D36B9C9D0C7B);
    ctx->Reset();

    ctx->Push(menuhash_);
    ctx->Push(toggle_pause_);
    ctx->Push(component_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_menu_ped_int_stat(bool* native_return, void* p1_, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEF4CED81CEBEDC6D);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success end_text_command_thefeed_post_mpticker(i32* native_return, bool blink_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF020C96915705B3A);
    ctx->Reset();

    ctx->Push(blink_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_length_of_literal_string(i32* native_return, const CStringPtr& string_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF030907CCBB8A9FD);
    ctx->Reset();

    ctx->Push(string_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success pause_menu_set_warn_on_tab_change(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF06EBB91A81E09E3);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success are_online_policies_up_to_date(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF13FE2A80C05C561);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success show_start_mission_instructional_button(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF1A6C18B35BCADE6);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_menu_trigger_event_occurred(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF284AC67940C6812);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success flash_minimap_display() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF2DD778C22B15BDA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success replace_hud_colour_with_rgba(i32 hud_color_index_, i32 r_, i32 g_, i32 b_, i32 a_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF314CF4F0211894E);
    ctx->Reset();

    ctx->Push(hud_color_index_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);
    ctx->Push(a_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success override_mp_text_chat_color(i32 p0_, i32 hud_color_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF47E567B3630DD12);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(hud_color_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success link_named_rendertarget(u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF6C09E276AEB3F2D);
    ctx->Reset();

    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success setup_fake_cone_data(i32 blip_, f32 p1_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, f32 p6_, i32 p7_, i32 p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF83D0FEBE75E62C9);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blip_rotation(i32 blip_, i32 rotation_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF87683CDF73C3F6E);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(rotation_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_minimap_hide_fow(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF8DEE0A5600CBB93);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success begin_text_command_set_blip_name(const CStringPtr& text_label_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF9113A30DE5C6670);
    ctx->Reset();

    ctx->Push(text_label_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_radar_zoom_to_blip(i32 blip_, f32 zoom_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF98E4B3E56AFC7B1);
    ctx->Reset();

    ctx->Push(blip_);
    ctx->Push(zoom_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_hud_screen_position_from_world_position(i32* native_return, f32* screen_x_, f32* screen_y_, f32 world_x_, f32 world_y_, f32 world_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF9904D11F1ACBEC3);
    ctx->Reset();

    ctx->Push(world_x_);
    ctx->Push(world_y_);
    ctx->Push(world_z_);
    ctx->Push(screen_x_);
    ctx->Push(screen_y_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_blip_info_id_coord(Vector3Wrapper& native_return, i32 blip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFA7C7F0AADF25D09);
    ctx->Reset();

    ctx->Push(blip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success end_text_command_clear_print() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFCC75460ABA29378);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_ai_blip_sprite(u32 ped_, i32 sprite_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFCFACD0DB9D7A57D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(sprite_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_multiplayer_hud_cash(i32 p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFD1D220394BCB824);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success thefeed_pause() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFDB423997FA30340);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success thefeed_reset_all_parameters() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFDD85225B2DEA55E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success thefeed_freeze_next_post() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFDEC055AB549E328);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_new_waypoint(f32 x_, f32 y_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFE43368D2AA4F2FC);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_gps_player_waypoint() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFF4FB7C8CDFA3DA7);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_interior_at_coords_with_type(i32* native_return, f32 x_, f32 y_, f32 z_, const CStringPtr& interior_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x05B7A89BD78797FC);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(interior_type_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_interior_from_entity(i32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2107BA504071A6BB);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success clear_room_for_game_viewport() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x23B59D8912F94246);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_interior_location_and_namehash(Vector3Wrapper& position_, u32* name_hash_, i32 interior_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x252BDC06B73FA6EA);
    ctx->Reset();

    ctx->Push(interior_);
    alt::INative::Vector3 alt_position_ { position_.x, 0, position_.y, 0, position_.z };
ctx->Push(&alt_position_);

    ctx->Push(name_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        position_.x = alt_position_.x;
position_.y = alt_position_.y;
position_.z = alt_position_.z;

        /* VOID native_return */
    }
    return result;
}
Success unpin_interior(i32 interior_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x261CCE7EED010641);
    ctx->Reset();

    ctx->Push(interior_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_valid_interior(bool* native_return, i32 interior_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x26B0E73D7EAAF4D3);
    ctx->Reset();

    ctx->Push(interior_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success pin_interior_in_memory(i32 interior_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2CA429C029CCF247);
    ctx->Reset();

    ctx->Push(interior_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_interior_entity_set_active(bool* native_return, i32 interior_, const CStringPtr& entity_set_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x35F7DD45E8C0A16D);
    ctx->Reset();

    ctx->Push(interior_);
    ctx->Push(entity_set_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success force_activating_tracking_on_entity(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x38C1CB1CB119A016);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_key_for_entity_in_room(u32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x399685DB942336BC);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success add_pickup_to_interior_room_by_name(i32 pickup_, const CStringPtr& room_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3F6167F351168730);
    ctx->Reset();

    ctx->Push(pickup_);
    ctx->Push(room_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_room_for_game_viewport_by_key(u32 room_hash_key_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x405DC2AEF6AF95B9);
    ctx->Reset();

    ctx->Push(room_hash_key_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success refresh_interior(i32 interior_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x41F37C3427C75AE0);
    ctx->Reset();

    ctx->Push(interior_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success deactivate_interior_entity_set(i32 interior_, const CStringPtr& entity_set_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x420BD37289EEE162);
    ctx->Reset();

    ctx->Push(interior_);
    ctx->Push(entity_set_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_room_key_from_entity(u32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x47C2A06D4F5F424B);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success activate_interior_groups_using_camera() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x483ACA1176CA93F1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_interior_in_use(bool* native_return, i32 interior_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4C2330E61D3DEB56);
    ctx->Reset();

    ctx->Push(interior_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success enable_shadow_cull_model_this_frame(u32 map_object_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x50C375537449F369);
    ctx->Reset();

    ctx->Push(map_object_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_room_for_entity(u32 entity_, i32 interior_, u32 room_hash_key_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x52923C4710DD9907);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(interior_);
    ctx->Push(room_hash_key_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success activate_interior_entity_set(i32 interior_, const CStringPtr& entity_set_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x55E86AF2712B36A1);
    ctx->Reset();

    ctx->Push(interior_);
    ctx->Push(entity_set_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_interior(i32 interior_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6170941419D7D8EC);
    ctx->Reset();

    ctx->Push(interior_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_interior_ready(bool* native_return, i32 interior_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6726BDCCC1932F0E);
    ctx->Reset();

    ctx->Push(interior_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_is_exterior_only(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7241CCB7D020DB69);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success enable_stadium_probes_this_frame(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7ECDF98587E92DEC);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success retain_entity_in_interior(u32 entity_, i32 interior_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x82EBB79E258FA2B7);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(interior_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_interior_state_of_entity(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x85D5422B2039A70D);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_room_for_game_viewport(i32 interior_i_d_, u32 room_hash_key_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x920D853F3E17F1DA);
    ctx->Reset();

    ctx->Push(interior_i_d_);
    ctx->Push(room_hash_key_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_interior_capped(bool* native_return, i32 interior_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x92BAC8ACF88CEC26);
    ctx->Reset();

    ctx->Push(interior_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_offset_from_interior_in_world_coords(Vector3Wrapper& native_return, i32 interior_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9E3B3E6D66F6E22F);
    ctx->Reset();

    ctx->Push(interior_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success disable_metro_system(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9E6542F0CE8E70A3);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_room_key_for_game_viewport(u32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA6575914D2A0B450);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success enable_exterior_cull_model_this_frame(u32 map_object_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA97F257D0151A6AB);
    ctx->Reset();

    ctx->Push(map_object_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_room_for_game_viewport_by_name(const CStringPtr& room_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAF348AFCB575A441);
    ctx->Reset();

    ctx->Push(room_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_interior_at_coords(i32* native_return, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB0F7F8663821D9C3);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success clear_room_for_entity(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB365FC0C4E27FFA7);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_interior_disabled(bool* native_return, i32 interior_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBC5115A5A939DD15);
    ctx->Reset();

    ctx->Push(interior_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_interior_scene(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBC72B5D7A1CBD54D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_interior_entity_set_tint_index(i32 interior_, const CStringPtr& entity_set_name_, i32 color_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC1F1920BAF281317);
    ctx->Reset();

    ctx->Push(interior_);
    ctx->Push(entity_set_name_.ptr);
    ctx->Push(color_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cap_interior(i32 interior_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD9175F941610DB54);
    ctx->Reset();

    ctx->Push(interior_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_interior_group_id(i32* native_return, i32 interior_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE4A84ABF135EF91A);
    ctx->Reset();

    ctx->Push(interior_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_interior_from_primary_view(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE7D267EC6CA966C3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_interior_from_collision(i32* native_return, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEC4CF9FCB29A4424);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_collision_marked_outside(bool* native_return, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEEA5AC2EDA7C33E8);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_interior_at_coords_with_typehash(i32* native_return, f32 x_, f32 y_, f32 z_, u32 type_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF0F77ADB9F67E79D);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(type_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_interior_heading(f32* native_return, i32 interior_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF49B58631D9E22D9);
    ctx->Reset();

    ctx->Push(interior_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success remove_from_itemset(u32 item_, u32 itemset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x25E68244B0177686);
    ctx->Reset();

    ctx->Push(item_);
    ctx->Push(itemset_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_in_itemset(bool* native_return, u32 item_, u32 itemset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2D0FC594D1E9C107);
    ctx->Reset();

    ctx->Push(item_);
    ctx->Push(itemset_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success create_itemset(u32* native_return, bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x35AD299F50D91B24);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success clean_itemset(u32 itemset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x41BC0D722FC04221);
    ctx->Reset();

    ctx->Push(itemset_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_indexed_item_in_itemset(u32* native_return, i32 index_, u32 itemset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7A197E2521EE2BAB);
    ctx->Reset();

    ctx->Push(index_);
    ctx->Push(itemset_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success is_itemset_valid(bool* native_return, u32 itemset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB1B1EA596344DFAB);
    ctx->Reset();

    ctx->Push(itemset_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_itemset_size(i32* native_return, u32 itemset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD9127E83ABF7C631);
    ctx->Reset();

    ctx->Push(itemset_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success destroy_itemset(u32 itemset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDE18220B1C183EDA);
    ctx->Reset();

    ctx->Push(itemset_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_to_itemset(bool* native_return, u32 item_, u32 itemset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE3945201F14637DD);
    ctx->Reset();

    ctx->Push(item_);
    ctx->Push(itemset_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success lobby_auto_multiplayer_event(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8AA464D4E0F6ACCD);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success lobby_set_auto_multiplayer(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB0C56BD3D808D863);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success lobby_auto_multiplayer_random_job(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC6DC823253FBB366);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success lobby_set_auto_mp_random_job(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC7E7181C09F33B69);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success lobby_auto_multiplayer_freemode(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEF7D17BC6C85264C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success lobby_auto_multiplayer_menu(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF2CA003F167E21D2);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success shutdown_session_clears_auto_multiplayer(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFA1E0E893D915215);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success lobby_set_auto_multiplayer_event(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFC309E94546FCDB5);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_current_language(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2BDD44CC428A7EAE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success localization_get_system_language(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x497420E022796B3F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success localization_get_system_date_type(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA8AE43AEC1A61314);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success display_onscreen_keyboard(i32 p0_, const CStringPtr& window_title_, const CStringPtr& p2_, const CStringPtr& default_text_, const CStringPtr& default_concat1_, const CStringPtr& default_concat2_, const CStringPtr& default_concat3_, i32 max_input_length_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x00DC833F2568DBF6);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(window_title_.ptr);
    ctx->Push(p2_.ptr);
    ctx->Push(default_text_.ptr);
    ctx->Push(default_concat1_.ptr);
    ctx->Push(default_concat2_.ptr);
    ctx->Push(default_concat3_.ptr);
    ctx->Push(max_input_length_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_area_of_vehicles(f32 x_, f32 y_, f32 z_, f32 radius_, bool p4_, bool p5_, bool p6_, bool p7_, bool p8_, bool p9_, i32 p10_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x01C7B9B38428AEB6);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(p10_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cloud_settings_override(const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x02DEAAC8F8EA7FE7);
    ctx->Reset();

    ctx->Push(p0_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_model_dimensions(Vector3Wrapper& minimum_, Vector3Wrapper& maximum_, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x03E8D3D5F549087A);
    ctx->Reset();

    ctx->Push(model_hash_);
    alt::INative::Vector3 alt_minimum_ { minimum_.x, 0, minimum_.y, 0, minimum_.z };
ctx->Push(&alt_minimum_);

    alt::INative::Vector3 alt_maximum_ { maximum_.x, 0, maximum_.y, 0, maximum_.z };
ctx->Push(&alt_maximum_);


    Success result = native->Invoke(ctx);
    if (result) {
        minimum_.x = alt_minimum_.x;
minimum_.y = alt_minimum_.y;
minimum_.z = alt_minimum_.z;

    maximum_.x = alt_maximum_.x;
maximum_.y = alt_maximum_.y;
maximum_.z = alt_maximum_.z;

        /* VOID native_return */
    }
    return result;
}
Success stop_save_array() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x04456F95153C6BE4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_area_of_cops(f32 x_, f32 y_, f32 z_, f32 radius_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x04F8FC8FCF58F88D);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_incident_with_entity(bool* native_return, i32* out_incident_i_d_, i32 dispatch_service_, u32 ped_, i32 num_units_, f32 radius_, i32 p5_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x05983472F0494E60);
    ctx->Reset();

    ctx->Push(dispatch_service_);
    ctx->Push(ped_);
    ctx->Push(num_units_);
    ctx->Push(radius_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(out_incident_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_code_requested_autosave() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x06462A961E94B67C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_cheat_with_hash_been_activated(bool* native_return, u32 hash_, i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x071E2A839DE82D90);
    ctx->Reset();

    ctx->Push(hash_);
    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success have_credits_reached_end(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x075F1D57402C93BA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_area_of_projectiles(f32 x_, f32 y_, f32 z_, f32 radius_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A1CB9094635D1A6);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_steam_version(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A27B2B6282F7169);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success script_race_init(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A60017F841A54F2);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success are_strings_equal(bool* native_return, const CStringPtr& string1_, const CStringPtr& string2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0C515FAB3FF9EA92);
    ctx->Reset();

    ctx->Push(string1_.ptr);
    ctx->Push(string2_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success update_onscreen_keyboard(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0CF2B696BBF945AE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success clear_weather_type_now_persist_network(i32 milliseconds_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0CF97F497FE7D048);
    ctx->Reset();

    ctx->Push(milliseconds_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success register_enum_to_save(void* p0_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x10C2FA78D0E128A1);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success override_save_house(bool* native_return, bool p0_, f32 p1_, f32 p2_, f32 p3_, f32 p4_, bool p5_, f32 p6_, f32 p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1162EA8AE9D24EEA);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_override_weatherex(const CStringPtr& weather_type_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1178E104409FE58C);
    ctx->Reset();

    ctx->Push(weather_type_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_fire_ammo_this_frame(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x11879CDD803D30F4);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success preload_cloud_hat(const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x11B56FBBF7224868);
    ctx->Reset();

    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_angled_area_of_vehicles(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 width_, bool p7_, bool p8_, bool p9_, bool p10_, bool p11_, i32 p12_, i32 p13_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x11DB3500F042A8AA);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(width_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(p10_);
    ctx->Push(p11_);
    ctx->Push(p12_);
    ctx->Push(p13_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_pop_multiplier_area_networked(bool* native_return, i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1312F4B242609CE3);
    ctx->Reset();

    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success does_pop_multiplier_area_exist(bool* native_return, i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1327E2FE9746BAEE);
    ctx->Reset();

    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_xbox_platform(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x138679CA01E21F53);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_fake_wanted_level(i32 fake_wanted_level_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1454F2448DE30163);
    ctx->Reset();

    ctx->Push(fake_wanted_level_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_async_install_finished(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x14832BF2ABA53FC5);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_frame_time(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x15C40837039FFAF7);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success does_pop_multiplier_sphere_exist(bool* native_return, i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x171BAFB3C60389F4);
    ctx->Reset();

    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_tennis_swing_anim_complete(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x17DF68D720AA77F8);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_angle_between2d_vectors(f32* native_return, f32 x1_, f32 y1_, f32 x2_, f32 y2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x186FC4BE848E1C92);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(x2_);
    ctx->Push(y2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_tennis_swing_anim_can_be_interrupted(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x19BFED045C647C49);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_minigame_in_progress(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x19E00D7322C6F85B);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_bullet_in_angled_area(bool* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 width_, bool owned_by_player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1A8B5F3C01E2B477);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(width_);
    ctx->Push(owned_by_player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success add_stunt_jump(i32* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 x3_, f32 y3_, f32 z3_, f32 x4_, f32 y4_, f32 z4_, f32 cam_x_, f32 cam_y_, f32 cam_z_, i32 p15_, i32 p16_, i32 p17_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1A992DA297A4630C);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(x3_);
    ctx->Push(y3_);
    ctx->Push(z3_);
    ctx->Push(x4_);
    ctx->Push(y4_);
    ctx->Push(z4_);
    ctx->Push(cam_x_);
    ctx->Push(cam_y_);
    ctx->Push(cam_z_);
    ctx->Push(p15_);
    ctx->Push(p16_);
    ctx->Push(p17_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success clear_replay_stats() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1B1AB132A16FDA55);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_benchmark_pass(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1B2366C3F2A5C8DF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success script_race_player_hit_checkpoint(u32 player_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1BB299305C3E8C13);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success acos(f32* native_return, f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1D08B970013C34B6);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_time_scale(f32 time_scale_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1D408577D440E81E);
    ctx->Reset();

    ctx->Push(time_scale_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_fade_out_after_arrest(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1E0B4DC0D990A4E7);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success compare_strings(i32* native_return, const CStringPtr& str1_, const CStringPtr& str2_, bool match_case_, i32 max_length_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1E34710ECD4AB0EB);
    ctx->Reset();

    ctx->Push(str1_.ptr);
    ctx->Push(str2_.ptr);
    ctx->Push(match_case_);
    ctx->Push(max_length_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success supress_random_event_this_frame(i32 event_type_, bool suppress_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1EAE0A6E978894A2);
    ctx->Reset();

    ctx->Push(event_type_);
    ctx->Push(suppress_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_wind_direction(Vector3Wrapper& native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1F400FEF721170DA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success add_hospital_restart(i32* native_return, f32 x_, f32 y_, f32 z_, f32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1F464EF988465A81);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success script_race_shutdown() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1FF6BF9A63E5757F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_clouds_alpha(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x20AC25E781AE4A84);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success has_code_requested_autosave(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2107A3773771186D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success copy_script_struct(void* dst_, void* src_, i32 size_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x213AEB2B90CBA7AC);
    ctx->Reset();

    ctx->Push(size_);
    ctx->Push(dst_);
    ctx->Push(src_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_closest_point_on_line(Vector3Wrapper& native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 x3_, f32 y3_, f32 z3_, bool clamp_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x21C235BC64831E5A);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(x3_);
    ctx->Push(y3_);
    ctx->Push(z3_);
    ctx->Push(clamp_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success ignore_next_restart(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x21FFB63D8C615361);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_stunt_jump_message_showing(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2272B0A1343129F4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success disable_screen_dimming_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x23227DF0B2115469);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_police_restart(i32 police_index_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x23285DED6EBD7EA3);
    ctx->Reset();

    ctx->Push(police_index_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_content_to_load(CStringPtr& native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x24DA7D7667FD7B09);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success set_riot_mode_enabled(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2587A48BC88DFADF);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_dispatch_spawn_blocking_area(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x264AC28B01B353A5);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success enable_tennis_mode(u32 ped_, bool toggle_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x28A04B411933F8A6);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_weather_type_now(const CStringPtr& weather_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x29B487C359E19889);
    ctx->Reset();

    ctx->Push(weather_type_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_minigame_in_progress(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B4A15E44DE0F478);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_status_of_mission_repeat_save(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B5E102E4A42F2BF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_replay_stat_mission_type(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B626A0150E4D449);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success pause_death_arrest_restart(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2C2B3493FBF51C71);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_dispatch_spawn_sphere_blocking_area(i32* native_return, f32 x1_, f32 y1_, f32 x2_, f32 y2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2D4259F1FEB81DA9);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(x2_);
    ctx->Push(y2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_projectile_type_in_area(bool* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, i32 type_, bool owned_by_player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2E0DC353342C4A6D);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(type_);
    ctx->Push(owned_by_player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_next_weather_type(bool* native_return, const CStringPtr& weather_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2FAA3A30BEC0F25D);
    ctx->Reset();

    ctx->Push(weather_type_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_heading_from_vector2d(f32* native_return, f32 dx_, f32 dy_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2FFB6B224F4B2926);
    ctx->Reset();

    ctx->Push(dx_);
    ctx->Push(dy_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success activity_feed_add_substring_to_caption(const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x31125FD509D9043F);
    ctx->Reset();

    ctx->Push(p0_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_random_float_in_range(f32* native_return, f32 start_range_, f32 end_range_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x313CE5879CEB6FCD);
    ctx->Reset();

    ctx->Push(start_range_);
    ctx->Push(end_range_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success water_override_set_oceannoiseminamplitude(f32 min_amplitude_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x31727907B2C43C55);
    ctx->Reset();

    ctx->Push(min_amplitude_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_pop_multiplier_sphere(i32* native_return, f32 x_, f32 y_, f32 z_, f32 radius_, f32 ped_multiplier_, f32 vehicle_multiplier_, bool p6_, bool p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x32C7A7E8C43A1F80);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(ped_multiplier_);
    ctx->Push(vehicle_multiplier_);
    ctx->Push(p6_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success clear_override_weather() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x338D2E3477711050);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_projectile_type_within_distance(bool* native_return, f32 x_, f32 y_, f32 z_, u32 projectile_hash_, f32 radius_, bool owned_by_player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x34318593248C8FB2);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(projectile_hash_);
    ctx->Push(radius_);
    ctx->Push(owned_by_player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success register_int_to_save(void* p0_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x34C9EE5986258415);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success save_end_user_benchmark() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x37DEB0AA183FB6D8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_area_occupied_slow(bool* native_return, i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_, i32 p6_, i32 p7_, i32 p8_, i32 p9_, i32 p10_, i32 p11_, i32 p12_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x39455BF4F4F55186);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(p10_);
    ctx->Push(p11_);
    ctx->Push(p12_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_status_of_manual_save(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x397BAA01068BAA96);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success landing_screen_started_end_user_benchmark(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3BBBD13E5041A79E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_coords_of_projectile_type_in_angled_area(bool* native_return, Vector3Wrapper& position_out_, f32 vec_angled_area_point1_x_, f32 vec_angled_area_point1_y_, f32 vec_angled_area_point1_z_, f32 vec_angled_area_point2_x_, f32 vec_angled_area_point2_y_, f32 vec_angled_area_point2_z_, f32 distance_of_opposite_face_, u32 weapon_type_, bool b_is_player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3DA8C28346B62CED);
    ctx->Reset();

    ctx->Push(vec_angled_area_point1_x_);
    ctx->Push(vec_angled_area_point1_y_);
    ctx->Push(vec_angled_area_point1_z_);
    ctx->Push(vec_angled_area_point2_x_);
    ctx->Push(vec_angled_area_point2_y_);
    ctx->Push(vec_angled_area_point2_z_);
    ctx->Push(distance_of_opposite_face_);
    ctx->Push(weapon_type_);
    ctx->Push(b_is_player_);
    alt::INative::Vector3 alt_position_out_ { position_out_.x, 0, position_out_.y, 0, position_out_.z };
ctx->Push(&alt_position_out_);


    Success result = native->Invoke(ctx);
    if (result) {
        position_out_.x = alt_position_out_.x;
position_out_.y = alt_position_out_.y;
position_out_.z = alt_position_out_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success next_onscreen_keyboard_result_will_display_using_these_fonts(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3ED1438C1F5C6612);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_bullet_in_area(bool* native_return, f32 x_, f32 y_, f32 z_, f32 radius_, bool owned_by_player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3F2023999AD51C1F);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(owned_by_player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_real_world_time(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3F60413F5DF65748);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success create_incident(bool* native_return, i32* out_incident_i_d_, i32 dispatch_service_, f32 x_, f32 y_, f32 z_, i32 num_units_, f32 radius_, i32 p7_, i32 p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3F892CAF67444AE7);
    ctx->Reset();

    ctx->Push(dispatch_service_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(num_units_);
    ctx->Push(radius_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(out_incident_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success water_override_set_oceanwaveamplitude(f32 amplitude_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x405591EC8FD9096D);
    ctx->Reset();

    ctx->Push(amplitude_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_end_user_benchmark() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x437138B6A830166A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_beast_jump_this_frame(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x438822C279B73B93);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_random_seed(i32 seed_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x444D98F98C11F3EC);
    ctx->Reset();

    ctx->Push(seed_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success queue_mission_repeat_save(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x44A0BDC559B35F6E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_prev_weather_type(bool* native_return, const CStringPtr& weather_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x44F28F86433B10A9);
    ctx->Reset();

    ctx->Push(weather_type_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_dispatch_time_between_spawn_attempts(i32 p0_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x44F7CBC1BEB3327D);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_police_restart(i32* native_return, f32 p0_, f32 p1_, f32 p2_, f32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x452736765B31FC4B);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_benchmark_iterations(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4750FC27570311EC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_dispatch_time_between_spawn_attempts_multiplier(i32 p0_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x48838ED9937A15D1);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_pc_version(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x48AF36444B965238);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success register_text_label23_to_save(void* p0_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x48F069265A0E4BEC);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_fade_out_after_death(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4A18E01DF2C87B86);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_content_id_index(u32 content_id_, i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4B82FA6F2D624634);
    ctx->Reset();

    ctx->Push(content_id_);
    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_fake_wanted_level(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4C9296CBCD1B971E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_durango_version(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4D982ADB1978442D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success activity_feed_create(const CStringPtr& p0_, const CStringPtr& p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4DCDF92BF64236CD);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    ctx->Push(p1_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_is_in_animal_form(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4EBB7E87AA0DBED4);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_save_house(i32 savehouse_handle_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4F548CABEAE553BC);
    ctx->Reset();

    ctx->Push(savehouse_handle_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success do_auto_save() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x50EEAAD86232EE55);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_projectile_in_area(bool* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, bool owned_by_player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5270A8FBC098C3F8);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(owned_by_player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_bits_in_range(i32* native_return, i32 unk_var_, i32 range_start_, i32 range_end_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x53158863FCC0893A);
    ctx->Reset();

    ctx->Push(unk_var_);
    ctx->Push(range_start_);
    ctx->Push(range_end_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_tennis_move_network_signal_float(u32 ped_, const CStringPtr& p1_, f32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x54F157E0336A3822);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_.ptr);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success delete_incident(i32 incident_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x556C1AA270D5A207);
    ctx->Reset();

    ctx->Push(incident_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_pc_cheat_with_hash_been_activated(bool* native_return, u32 hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x557E43C447E700A8);
    ctx->Reset();

    ctx->Push(hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_prev_weather_type_hash_name(u32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x564B884A05EC45A3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_game_paused(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x577D1284D6873711);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_curr_weather_state(u32 weather_type1_, u32 weather_type2_, f32 percent_weather2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x578C752848ECFA0C);
    ctx->Reset();

    ctx->Push(weather_type1_);
    ctx->Push(weather_type2_);
    ctx->Push(percent_weather2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_super_jump_this_frame(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x57FFF03E423A4C0B);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_dispatch_spawn_location() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5896F2BD5683A4E1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cancel_onscreen_keyboard() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x58A39BE597CE99CD);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success string_to_int(bool* native_return, i32* out_integer_, const CStringPtr& string_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5A5F40FE637EB584);
    ctx->Reset();

    ctx->Push(string_.ptr);
    ctx->Push(out_integer_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success are_profile_settings_valid(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5AA3BEFA29F03AD4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_replay_stat_mission_id(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5B1F2E327B6B6FE1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_tennis_mode(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5D5479D115290C3F);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success start_save_array_with_size(void* p0_, i32 size_, const CStringPtr& array_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x60FE567DF1B1AF9D);
    ctx->Reset();

    ctx->Push(size_);
    ctx->Push(array_name_.ptr);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_sniper_inverted(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x61A23B7EDA9BDA24);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success water_override_set_rippleminbumpiness(f32 min_bumpiness_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6216B116083A7CB4);
    ctx->Reset();

    ctx->Push(min_bumpiness_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success tan(f32* native_return, f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x632106CC96E82E91);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_rain(f32 intensity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x643E26EA6E024D92);
    ctx->Reset();

    ctx->Push(intensity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_script_high_prio(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x65D2EBB47E1CEC21);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_pop_multiplier_area(i32* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 p6_, f32 p7_, bool p8_, bool p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x67F6413D3220E18D);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success plm_is_in_constrained_mode(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x684A41975F077262);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_total_successful_stunt_jumps(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6856EC3D35C81EA4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success find_spawn_point_in_direction(bool* native_return, Vector3Wrapper& spawn_point_, f32 pos_x_, f32 pos_y_, f32 pos_z_, f32 fwd_vec_x_, f32 fwd_vec_y_, f32 fwd_vec_z_, f32 distance_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6874E2190B0C1972);
    ctx->Reset();

    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(fwd_vec_x_);
    ctx->Push(fwd_vec_y_);
    ctx->Push(fwd_vec_z_);
    ctx->Push(distance_);
    alt::INative::Vector3 alt_spawn_point_ { spawn_point_.x, 0, spawn_point_.y, 0, spawn_point_.z };
ctx->Push(&alt_spawn_point_);


    Success result = native->Invoke(ctx);
    if (result) {
        spawn_point_.x = alt_spawn_point_.x;
spawn_point_.y = alt_spawn_point_.y;
spawn_point_.z = alt_spawn_point_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_auto_save_in_progress(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x69240733738C19A0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success use_active_camera_for_timeslicing_centre() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x693478ACBD7F18E7);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_replay_stat_value(i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x69FE6DC87BD2A5E9);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_is_auto_save_off(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6E04F06094C87047);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_this_is_a_trigger_script(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6F2135B6129620C1);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success register_text_label15_to_save(void* p0_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6F7794F28C6B2535);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_game_installed_this_session(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6FDDF453C0C756EC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_dispatch_ideal_spawn_distance(f32 distance_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6FE601A64180D423);
    ctx->Reset();

    ctx->Push(distance_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success activity_feed_action_start_with_command_line_add(const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x703CC7F60CBB2B57);
    ctx->Reset();

    ctx->Push(p0_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_weather_type_persist(const CStringPtr& weather_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x704983DF373B198F);
    ctx->Reset();

    ctx->Push(weather_type_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_restart_coord_override(f32 x_, f32 y_, f32 z_, f32 heading_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x706B5EDCAA7FA663);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(heading_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_next_weather_type_hash_name(u32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x711327CD09C8F162);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success queue_mission_repeat_load(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x72DE52178C291CB5);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success absf(f32* native_return, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x73D57CFFDD12C355);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_gravity_level(i32 level_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x740E14FAD5842351);
    ctx->Reset();

    ctx->Push(level_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success populate_now() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7472BB270D7B4F3E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_save_data() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x74E20C9145FB66FD);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_dispatch_ideal_spawn_distance() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x77A84429DD9F0A15);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_stunt_jump_in_progress(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7A3F19700A4D0525);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_this_a_minigame_script(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7B30F65D7B710098);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success water_override_set_ripplebumpiness(f32 bumpiness_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7C9C0B1EEB1F9072);
    ctx->Reset();

    ctx->Push(bumpiness_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success register_float_to_save(void* p0_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7CAEC29ECB5DFEBB);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_frontend_fading(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7EA2B6AF97ECA6ED);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_scenario_spawn_history() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7EC6F9A478A6A512);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_snow(f32 level_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7F06937B0CDCBC1A);
    ctx->Reset();

    ctx->Push(level_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ratio_of_closest_point_on_line(f32* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 x3_, f32 y3_, f32 z3_, bool clamp_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7F8F6405F4777AF6);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(x3_);
    ctx->Push(y3_);
    ctx->Push(z3_);
    ctx->Push(clamp_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success is_prospero_version(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x807ABE1AB65C24D2);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_replay_stat_at_index(i32* native_return, i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8098C8D6597AAE18);
    ctx->Reset();

    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success register_text_label31_to_save(void* p0_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8269816F6CFD40F8);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_projectile_of_projectile_type_within_distance(bool* native_return, Vector3Wrapper& out_coords_, u32* out_projectile_, u32 ped_, u32 weapon_hash_, f32 distance_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x82FDE6A57EE4EE44);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(distance_);
    ctx->Push(p5_);
    alt::INative::Vector3 alt_out_coords_ { out_coords_.x, 0, out_coords_.y, 0, out_coords_.z };
ctx->Push(&alt_out_coords_);

    ctx->Push(out_projectile_);

    Success result = native->Invoke(ctx);
    if (result) {
        out_coords_.x = alt_out_coords_.x;
out_coords_.y = alt_out_coords_.y;
out_coords_.z = alt_out_coords_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_onscreen_keyboard_result(CStringPtr& native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8362B09B91893647);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success shoot_single_bullet_between_coords(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, i32 damage_, bool p7_, u32 weapon_hash_, u32 owner_ped_, bool is_audible_, bool is_invisible_, f32 speed_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x867654CBC7606F2C);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(damage_);
    ctx->Push(p7_);
    ctx->Push(weapon_hash_);
    ctx->Push(owner_ped_);
    ctx->Push(is_audible_);
    ctx->Push(is_invisible_);
    ctx->Push(speed_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success atan2(f32* native_return, f32 p0_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8927CBF9D22261A4);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success activity_feed_post() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8951EB9C6906D3C8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_memory_card_in_use(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8A75CE2956274ADD);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_random_weather_type() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8B05F884CF7E8020);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_allocated_stack_size(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8B3CA62B1EF19B62);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_ground_z_and_normal_for3d_coord(bool* native_return, f32* ground_z_, Vector3Wrapper& normal_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8BDC7BFC57A81E76);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(ground_z_);
    alt::INative::Vector3 alt_normal_ { normal_.x, 0, normal_.y, 0, normal_.z };
ctx->Push(&alt_normal_);


    Success result = native->Invoke(ctx);
    if (result) {
        normal_.x = alt_normal_.x;
normal_.y = alt_normal_.y;
normal_.z = alt_normal_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success inform_code_of_content_id_of_current_ugc_mission(const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8D74E26F54B4E5C3);
    ctx->Reset();

    ctx->Push(p0_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_coords_of_projectile_type_in_area(bool* native_return, Vector3Wrapper& projectile_pos_, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, u32 projectile_hash_, bool owned_by_player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8D7A43EC6A5FEA45);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(projectile_hash_);
    ctx->Push(owned_by_player_);
    alt::INative::Vector3 alt_projectile_pos_ { projectile_pos_.x, 0, projectile_pos_.y, 0, projectile_pos_.z };
ctx->Push(&alt_projectile_pos_);


    Success result = native->Invoke(ctx);
    if (result) {
        projectile_pos_.x = alt_projectile_pos_.x;
projectile_pos_.y = alt_projectile_pos_.y;
projectile_pos_.z = alt_projectile_pos_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_bits_in_range(i32* unk_var_, i32 range_start_, i32 range_end_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8EF07E15701D61ED);
    ctx->Reset();

    ctx->Push(range_start_);
    ctx->Push(range_end_);
    ctx->Push(p3_);
    ctx->Push(unk_var_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success script_race_get_player_split_time(bool* native_return, i32* p1_, i32* p2_, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8EF5573A1F801A5C);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success play_tennis_dive_anim(u32 ped_, i32 p1_, f32 p2_, f32 p3_, f32 p4_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8FA9C42FC5D7C64B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success activity_feed_large_image_url(const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x916CA67D26FD1E37);
    ctx->Reset();

    ctx->Push(p0_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_dispatch_spawn_angled_blocking_area(i32* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 width_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x918C7B2D2FF3928B);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(width_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_set_script_is_safe_for_network_game() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9243BAC96D64C050);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_end_user_benchmark() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x92790862E36C2ADA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_bit(i32* address_, i32 offset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x933D6A9EEC1BACD0);
    ctx->Reset();

    ctx->Push(offset_);
    ctx->Push(address_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_area_leave_vehicle_health(f32 x_, f32 y_, f32 z_, f32 radius_, bool p4_, bool p5_, bool p6_, bool p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x957838AAF91BD12D);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success unload_all_cloud_hats() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x957E790EA1727B64);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_rain_level(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x96695E368AD855F3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_is_player_in_animal_form(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9689123E3F213AA5);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_random_event_flag(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x971927086CFD2158);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success activity_feed_add_int_to_caption(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x97E7E2C04245115B);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_bullet_impacted_in_area(bool* native_return, f32 x_, f32 y_, f32 z_, f32 p3_, bool p4_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9870ACFB89A90995);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_num_successful_stunt_jumps(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x996DD1E1E02F1008);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success block_dispatch_service_resource_creation(i32 dispatch_service_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9B2BD3773123EA2F);
    ctx->Reset();

    ctx->Push(dispatch_service_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_instance_priority_mode(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9BAE5AD2508DF078);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_game_timer(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9CD27B0045628463);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_player_is_repeating_a_mission(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D8D44ADBBA61EF2);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success terminate_all_scripts_with_this_name(const CStringPtr& script_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9DC711BC69C548DF);
    ctx->Reset();

    ctx->Push(script_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ground_z_excluding_objects_for3d_coord(bool* native_return, f32* ground_z_, f32 x_, f32 y_, f32 z_, bool p4_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9E82F0F362881B29);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(ground_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_aussie_version(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9F1935CA1F724008);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success water_override_set_ripplemaxbumpiness(f32 max_bumpiness_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9F5E6BB6B34540DA);
    ctx->Reset();

    ctx->Push(max_bumpiness_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_commandline_end_user_benchmark(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA049A5BE0F04F2F8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_size_of_save_data(i32* native_return, bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA09F896CE912481F);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_point_area_overlap(bool* native_return, i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_, i32 p6_, i32 p7_, i32 p8_, i32 p9_, i32 p10_, i32 p11_, i32 p12_, i32 p13_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA0AD167E4B39D9A2);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(p10_);
    ctx->Push(p11_);
    ctx->Push(p12_);
    ctx->Push(p13_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_forced_jump_this_frame(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA1183BCFEE0F93D1);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_replay_stats() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA23E821FBDF8A5F2);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_restart_coord_override() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA2716D40842EAF79);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_mission_flag(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA33CDCCDA663159E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_override_weather(const CStringPtr& weather_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA43D5C6FE51ADBEF);
    ctx->Reset();

    ctx->Push(weather_type_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_save_house_details_after_successful_load(bool* native_return, Vector3Wrapper& p0_, f32* p1_, bool* fade_in_after_load_, bool* p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA4A0065E39C9F25C);
    ctx->Reset();

    alt::INative::Vector3 alt_p0_ { p0_.x, 0, p0_.y, 0, p0_.z };
ctx->Push(&alt_p0_);

    ctx->Push(p1_);
    ctx->Push(fade_in_after_load_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        p0_.x = alt_p0_.x;
p0_.y = alt_p0_.y;
p0_.z = alt_p0_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success disable_stunt_jump_set(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA5272EBEDD4747F6);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_area(f32 x_, f32 y_, f32 z_, f32 radius_, bool p4_, bool ignore_cop_cars_, bool ignore_objects_, bool p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA56F01F3765B93A0);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(p4_);
    ctx->Push(ignore_cop_cars_);
    ctx->Push(ignore_objects_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_area_occupied(bool* native_return, f32 p0_, f32 p1_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, bool p6_, bool p7_, bool p8_, bool p9_, bool p10_, i32 p11_, bool p12_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA61B4DF533DCB56E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(p10_);
    ctx->Push(p11_);
    ctx->Push(p12_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_explosive_ammo_this_frame(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA66C71C98D5F2CFB);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success action_manager_enable_action(u32 hash_, bool enable_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA6A12939F16D85BE);
    ctx->Reset();

    ctx->Push(hash_);
    ctx->Push(enable_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_orbis_version(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA72BC0B675B1519E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success register_int64_to_save(void* p0_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA735353C77334EA0);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success unload_cloud_hat(const CStringPtr& name_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA74802FB8D0B7814);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success water_override_set_shorewavemaxamplitude(f32 max_amplitude_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA7A1127490312C36);
    ctx->Reset();

    ctx->Push(max_amplitude_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success water_override_fade_in(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA8434F1DFF41D6E7);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_wind_speed(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA8CF1CC0AFCD3F12);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success start_save_data(void* p0_, i32 p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA9575F812C6A7997);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success atan(f32* native_return, f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA9D1795CD5043663);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_this_script_can_be_paused(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA391C728106F7AF);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success plm_get_constrained_duration_ms(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xABB2FA71C83A1B72);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_wind(f32 speed_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAC3A74E8384A9919);
    ctx->Reset();

    ctx->Push(speed_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_dispatch_spawn_blocking_areas() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAC7BFD5C1D83EA75);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_position_occupied(bool* native_return, f32 x_, f32 y_, f32 z_, f32 range_, bool p4_, bool check_vehicles_, bool check_peds_, bool p7_, bool p8_, u32 ignore_entity_, bool p10_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xADCDE75E1C60F32D);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(range_);
    ctx->Push(p4_);
    ctx->Push(check_vehicles_);
    ctx->Push(check_peds_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(ignore_entity_);
    ctx->Push(p10_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_incident_requested_units(i32 incident_id_, i32 dispatch_service_, i32 num_units_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB08B85D860E7BA3C);
    ctx->Reset();

    ctx->Push(incident_id_);
    ctx->Push(dispatch_service_);
    ctx->Push(num_units_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_pop_multiplier_area(i32 id_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB129E447A2EDA4BF);
    ctx->Reset();

    ctx->Push(id_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_base_element_location_from_metadata_block(bool* native_return, void* p0_, void* p1_, i32 p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB335F761606DB47C);
    ctx->Reset();

    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_tactical_nav_mesh_points() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB3CD58CCA6CDA852);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success water_override_set_oceanwavemaxamplitude(f32 max_amplitude_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB3E6360DDE733E82);
    ctx->Reset();

    ctx->Push(max_amplitude_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_credits_fade_out_with_screen(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB51B9AB9EF81868C);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_tactical_nav_mesh_point(f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB8721407EE9C3FF6);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_japanese_version(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB8C0BB75D8A77DB3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success water_override_set_shorewaveamplitude(f32 amplitude_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB8F87EAD7533B176);
    ctx->Reset();

    ctx->Push(amplitude_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_credits_active(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB938B7E6D3C0620C);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_this_script_can_remove_blips_created_by_any_script(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB98236CAAECEF897);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success water_override_set_rippledisturb(f32 disturb_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB9854DFDE0D833D6);
    ctx->Reset();

    ctx->Push(disturb_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success activity_feed_online_played_with_post(const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA4B8D83BDC75551);
    ctx->Reset();

    ctx->Push(p0_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_stunt_jump_angled(i32* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 radius1_, f32 x3_, f32 y3_, f32 z3_, f32 x4_, f32 y4_, f32 z4_, f32 radius2_, f32 cam_x_, f32 cam_y_, f32 cam_z_, i32 p17_, i32 p18_, i32 p19_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBBE5D803A5360CBF);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(radius1_);
    ctx->Push(x3_);
    ctx->Push(y3_);
    ctx->Push(z3_);
    ctx->Push(x4_);
    ctx->Push(y4_);
    ctx->Push(z4_);
    ctx->Push(radius2_);
    ctx->Push(cam_x_);
    ctx->Push(cam_y_);
    ctx->Push(cam_z_);
    ctx->Push(p17_);
    ctx->Push(p18_);
    ctx->Push(p19_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success clear_area_of_peds(f32 x_, f32 y_, f32 z_, f32 radius_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBE31FD6CE464AC59);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_save_struct_with_size(void* p0_, i32 size_, const CStringPtr& struct_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBF737600CDDBEADD);
    ctx->Reset();

    ctx->Push(size_);
    ctx->Push(struct_name_.ptr);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success shoot_single_bullet_between_coords_ignore_entity_new(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, i32 damage_, bool p7_, u32 weapon_hash_, u32 owner_ped_, bool is_audible_, bool is_invisible_, f32 speed_, u32 entity_, bool p14_, bool p15_, u32 target_entity_, bool p17_, i32 p18_, i32 p19_, i32 p20_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBFE5756E7407064A);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(damage_);
    ctx->Push(p7_);
    ctx->Push(weapon_hash_);
    ctx->Push(owner_ped_);
    ctx->Push(is_audible_);
    ctx->Push(is_invisible_);
    ctx->Push(speed_);
    ctx->Push(entity_);
    ctx->Push(p14_);
    ctx->Push(p15_);
    ctx->Push(target_entity_);
    ctx->Push(p17_);
    ctx->Push(p18_);
    ctx->Push(p19_);
    ctx->Push(p20_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success register_save_house(i32* native_return, f32 x_, f32 y_, f32 z_, f32 p3_, const CStringPtr& p4_, i32 p5_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC0714D0A7EEECA54);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p3_);
    ctx->Push(p4_.ptr);
    ctx->Push(p5_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success force_game_state_playing() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC0AA53F866B3134D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success water_override_fade_out(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC3C221ADDDE31A11);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success water_override_set_shorewaveminamplitude(f32 min_amplitude_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC3EAD29AB273ECE8);
    ctx->Reset();

    ctx->Push(min_amplitude_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_mission_flag(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC4301E5121A0ED73);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_profile_setting(i32* native_return, i32 profile_setting_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC488FF2356EA7791);
    ctx->Reset();

    ctx->Push(profile_setting_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_scarlett_version(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC545AB1CF97ABB34);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success water_override_set_strength(f32 strength_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC54A08C85AE4D410);
    ctx->Reset();

    ctx->Push(strength_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_snow_level(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC5868A966E5BE3AE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_instance_priority_hint(i32 flag_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC5F0A8EBD3F361CE);
    ctx->Reset();

    ctx->Push(flag_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cleanup_async_install() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC79AE21974B01FB2);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_end_user_benchmark() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC7DB36C24634F52B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success asin(f32* native_return, f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC843060B5765DCE7);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success disable_hospital_restart(i32 hospital_index_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC8535819C450EBA8);
    ctx->Reset();

    ctx->Push(hospital_index_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_incident_valid(bool* native_return, i32 incident_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC8BC6461E629BEAA);
    ctx->Reset();

    ctx->Push(incident_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success register_bool_to_save(void* p0_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC8F4131414C835A1);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ground_z_for3d_coord(bool* native_return, f32* ground_z_, f32 x_, f32 y_, f32 z_, bool ignore_water_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC906A7DAB05C8D2B);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(ignore_water_);
    ctx->Push(p5_);
    ctx->Push(ground_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_save_menu_active(bool ignore_vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC9BF75D28165FF77);
    ctx->Reset();

    ctx->Push(ignore_vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_string_null_or_empty(bool* native_return, const CStringPtr& string_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCA042B6957743895);
    ctx->Reset();

    ctx->Push(string_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success display_onscreen_keyboard_with_longer_initial_string(void* p2_, i32 p0_, const CStringPtr& window_title_, const CStringPtr& default_text_, const CStringPtr& default_concat1_, const CStringPtr& default_concat2_, const CStringPtr& default_concat3_, const CStringPtr& default_concat4_, const CStringPtr& default_concat5_, const CStringPtr& default_concat6_, const CStringPtr& default_concat7_, i32 max_input_length_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCA78CFA0366592FE);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(window_title_.ptr);
    ctx->Push(default_text_.ptr);
    ctx->Push(default_concat1_.ptr);
    ctx->Push(default_concat2_.ptr);
    ctx->Push(default_concat3_.ptr);
    ctx->Push(default_concat4_.ptr);
    ctx->Push(default_concat5_.ptr);
    ctx->Push(default_concat6_.ptr);
    ctx->Push(default_concat7_.ptr);
    ctx->Push(max_input_length_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_index_of_current_level(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCBAD6729F7B1F4FC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_ps3_version(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCCA1072C29D096C2);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_weather_type_persist() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCCC39339BEF76CF5);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_city_density(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD10282B6E3751BA0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_dispatch_spawn_location(f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD10F442036302D50);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success are_credits_running(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD19C0826DC20CF1C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_hash_key(u32* native_return, const CStringPtr& string_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD24D37CC275948CC);
    ctx->Reset();

    ctx->Push(string_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_ideal_spawn_distance_for_incident(i32 incident_id_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD261BA3E7E998072);
    ctx->Reset();

    ctx->Push(incident_id_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_random_event_flag(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD2D57F1D764117B1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success should_use_metric_measurements(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD3D15555431AB793);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_random_int_in_range(i32* native_return, i32 start_range_, i32 end_range_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD53343AA4FB7DD28);
    ctx->Reset();

    ctx->Push(start_range_);
    ctx->Push(end_range_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success have_replay_stats_been_stored(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD642319C54AADEB6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_stunt_jumps_can_trigger(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD79185689F8FD5DF);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_wanted_response_num_peds_to_spawn() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD9F692D349249528);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_fade_in_after_death_arrest(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDA66D2796BA33F12);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success enable_dispatch_service(i32 dispatch_service_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDC0F817884CDD856);
    ctx->Reset();

    ctx->Push(dispatch_service_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success delete_stunt_jump(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDC518000E39DAE1F);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_bullet_impacted_in_box(bool* native_return, f32 p0_, f32 p1_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, bool p6_, bool p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDC8C5D7CFEAB8394);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_replay_stat_count(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDC9274A7EF6B2867);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success clear_area_of_objects(f32 x_, f32 y_, f32 z_, f32 radius_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDD9B9B385AAC7F5B);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_bullet_in_box(bool* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, bool owned_by_player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDE0F6D7450D37351);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(owned_by_player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success allow_mission_creator_warp(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDEA36202FC3382DF);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_coords_of_projectile_type_within_distance(bool* native_return, Vector3Wrapper& out_coords_, u32 ped_, u32 weapon_hash_, f32 distance_, bool p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDFB4138EEFED7B81);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(distance_);
    ctx->Push(p4_);
    alt::INative::Vector3 alt_out_coords_ { out_coords_.x, 0, out_coords_.y, 0, out_coords_.z };
ctx->Push(&alt_out_coords_);


    Success result = native->Invoke(ctx);
    if (result) {
        out_coords_.x = alt_out_coords_.x;
out_coords_.y = alt_out_coords_.y;
out_coords_.z = alt_out_coords_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success begin_replay_stats(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE0E500246FF73D66);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_tennis_swing_anim(u32 ped_, const CStringPtr& anim_dict_, const CStringPtr& anim_name_, f32 p3_, f32 p4_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE266ED23311F24D4);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(anim_dict_.ptr);
    ctx->Push(anim_name_.ptr);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success enable_stunt_jump_set(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE369A5783B866016);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success shoot_single_bullet_between_coords_ignore_entity(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, i32 damage_, bool p7_, u32 weapon_hash_, u32 owner_ped_, bool is_audible_, bool is_invisible_, f32 speed_, u32 entity_, i32 p14_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE3A7742E0B7A2F8B);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(damage_);
    ctx->Push(p7_);
    ctx->Push(weapon_hash_);
    ctx->Push(owner_ped_);
    ctx->Push(is_audible_);
    ctx->Push(is_invisible_);
    ctx->Push(speed_);
    ctx->Push(entity_);
    ctx->Push(p14_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success prevent_arrest_state_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE3D969D2785FFB5E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_wanted_response_num_peds_to_spawn(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE532EC1A63231B4F);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_point_obscured_by_a_mission_entity(bool* native_return, f32 p0_, f32 p1_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE54E209C35FFA18D);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success restart_game() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE574A662ACAEFBB1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_system_time_step(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE599A503B3837E1B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success remove_pop_multiplier_sphere(i32 id_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE6869BECDD8F2403);
    ctx->Reset();

    ctx->Push(id_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cancel_stunt_jump() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE6B7B0ACD4E4B75E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_bit(i32* address_, i32 offset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE80492A9AC099A93);
    ctx->Reset();

    ctx->Push(offset_);
    ctx->Push(address_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_resumed_from_suspend(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE8B9C0EC9E183F35);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_tennis_swing_anim_swung(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE95B0C7D5BA3B96B);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ui_started_end_user_benchmark(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEA2F2061875EED90);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success activity_feed_action_start_with_command_line(const CStringPtr& p0_, const CStringPtr& p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEB078CA2B5E82ADD);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    ctx->Push(p1_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_wind_direction(f32 direction_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEB0F4468467B4528);
    ctx->Reset();

    ctx->Push(direction_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_save_struct() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEB1774DF12BB9F12);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success queue_mission_repeat_save_for_benchmark_test(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEB2104E905C6F2E9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success reset_dispatch_time_between_spawn_attempts(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEB2DB0CAD13154B3);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_number_resources_allocated_to_wanted_level(i32* native_return, i32 dispatch_service_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEB4A0C2D56441717);
    ctx->Reset();

    ctx->Push(dispatch_service_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success quit_game() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEB6891F03362FB12);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success activity_feed_add_literal_substring_to_caption(const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEBD3205A207939ED);
    ctx->Reset();

    ctx->Push(p0_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_content_id_index(i32* native_return, u32 content_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xECF041186C5A94DC);
    ctx->Reset();

    ctx->Push(content_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_weather_type_now_persist(const CStringPtr& weather_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xED712CA327900C8A);
    ctx->Reset();

    ctx->Push(weather_type_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success register_text_label_to_save(void* p0_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEDB1232C5BEAE62F);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_wind_speed(f32 speed_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEE09ECEDBABE47FC);
    ctx->Reset();

    ctx->Push(speed_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_projectile_type_in_angled_area(bool* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 width_, i32 p7_, bool owned_by_player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF0BC12401061DEA0);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(width_);
    ctx->Push(p7_);
    ctx->Push(owned_by_player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success absi(i32* native_return, i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF0D31AD191A74F87);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success using_mission_creator(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF14878FC50BEC6EE);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_distance_between_coords(f32* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, bool use_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF1B760881820C952);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(use_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success is_string_null(bool* native_return, const CStringPtr& string_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF22B6C47C6EAB066);
    ctx->Reset();

    ctx->Push(string_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_random_mwc_int_in_range(i32* native_return, i32 start_range_, i32 end_range_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF2D49816A804D134);
    ctx->Reset();

    ctx->Push(start_range_);
    ctx->Push(end_range_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success slerp_near_quaternion(f32* out_x_, f32* out_y_, f32* out_z_, f32* out_w_, f32 t_, f32 x_, f32 y_, f32 z_, f32 w_, f32 x1_, f32 y1_, f32 z1_, f32 w1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF2F6A2FA49278625);
    ctx->Reset();

    ctx->Push(t_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(w_);
    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(w1_);
    ctx->Push(out_x_);
    ctx->Push(out_y_);
    ctx->Push(out_z_);
    ctx->Push(out_w_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_clouds_alpha(f32 opacity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF36199225D6D8C86);
    ctx->Reset();

    ctx->Push(opacity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_curr_weather_state(u32* weather_type1_, u32* weather_type2_, f32* percent_weather2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF3BBE884A14BB413);
    ctx->Reset();

    ctx->Push(weather_type1_);
    ctx->Push(weather_type2_);
    ctx->Push(percent_weather2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_fade_in_after_load(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF3D78F59DFE18D79);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_line_plane_intersection(bool* native_return, f32* p12_, f32 p0_, f32 p1_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, f32 p6_, f32 p7_, f32 p8_, f32 p9_, f32 p10_, f32 p11_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF56DFB7B61BE7276);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(p10_);
    ctx->Push(p11_);
    ctx->Push(p12_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success force_lightning_flash() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF6062E089251C898);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_xbox360_version(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF6201B4DAF662A9D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success water_override_set_oceanwaveminamplitude(f32 min_amplitude_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF751B16FB32ABC1D);
    ctx->Reset();

    ctx->Push(min_amplitude_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_sce_platform(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF911E695C1EB8518);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success override_freeze_flags(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFA3FFB0EEBC288A3);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success register_text_label63_to_save(void* p0_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFAA457EF263E8763);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ticker_johnmarston_is_done() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFB00CA71DA386228);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_weather_type_overtime_persist(const CStringPtr& weather_type_, f32 time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFB5045B7C42B75BF);
    ctx->Reset();

    ctx->Push(weather_type_.ptr);
    ctx->Push(time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success toggle_show_optional_stunt_jump_camera(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFB80AB299D2EE1BD);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success load_cloud_hat(const CStringPtr& name_, f32 transition_time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFC4842A34657BFCB);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(transition_time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_frame_count(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFC8202EFC642E6F2);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_number_of_free_stacks_of_this_size(i32* native_return, i32 stack_size_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFEAD16FC8F9DFC0F);
    ctx->Reset();

    ctx->Push(stack_size_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_sniper_bullet_in_area(bool* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFEFCF11B01287125);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_explosive_melee_this_frame(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFF1BED81BFDC0FE0);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cell_cam_activate_selfie_mode(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x015C49A93E3E086E);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cell_cam_set_selfie_mode_roll_offset(f32 roll_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x15E69E2802C24B8D);
    ctx->Reset();

    ctx->Push(roll_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cell_cam_set_selfie_mode_side_offset_scaling(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1B0B4AEED5B9B41C);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_mobile_phone_rotation(Vector3Wrapper& rotation_, u32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1CEFB61F193070AE);
    ctx->Reset();

    ctx->Push(p1_);
    alt::INative::Vector3 alt_rotation_ { rotation_.x, 0, rotation_.y, 0, rotation_.z };
ctx->Push(&alt_rotation_);


    Success result = native->Invoke(ctx);
    if (result) {
        rotation_.x = alt_rotation_.x;
rotation_.y = alt_rotation_.y;
rotation_.z = alt_rotation_.z;

        /* VOID native_return */
    }
    return result;
}
Success cell_cam_set_selfie_mode_vert_pan_offset(f32 vert_pan_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3117D84EFA60F77B);
    ctx->Reset();

    ctx->Push(vert_pan_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_mobile_phone_dof_state(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x375A706A5C2FD084);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success destroy_mobile_phone() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3BC861DF703E5097);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cell_cam_is_char_visible_no_face_check(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x439E9BC95B7E7FBE);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success cell_horizontal_mode_toggle(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x44E44169EF70138E);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cell_cam_set_selfie_mode_head_pitch_offset(f32 pitch_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x466DA42C89865553);
    ctx->Reset();

    ctx->Push(pitch_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cell_cam_set_selfie_mode_horz_pan_offset(f32 horizontal_pan_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x53F4892D18EC90A4);
    ctx->Reset();

    ctx->Push(horizontal_pan_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_mobile_phone_position(Vector3Wrapper& position_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x584FDFDA48805B86);
    ctx->Reset();

    alt::INative::Vector3 alt_position_ { position_.x, 0, position_.y, 0, position_.z };
ctx->Push(&alt_position_);


    Success result = native->Invoke(ctx);
    if (result) {
        position_.x = alt_position_.x;
position_.y = alt_position_.y;
position_.z = alt_position_.z;

        /* VOID native_return */
    }
    return result;
}
Success set_mobile_phone_position(f32 pos_x_, f32 pos_y_, f32 pos_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x693A5C6D6734085B);
    ctx->Reset();

    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cell_set_input(i32 direction_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x95C9E72F3D7DEC9B);
    ctx->Reset();

    ctx->Push(direction_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cell_cam_activate_shallow_dof_mode(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA2CCBE62CD4C91A4);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_mobile_phone(i32 phone_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA4E8E696C532FBC7);
    ctx->Reset();

    ctx->Push(phone_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cell_cam_set_selfie_mode_distance_scaling(f32 distance_scaling_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAC2890471901861C);
    ctx->Reset();

    ctx->Push(distance_scaling_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_mobile_phone_render_id(i32* render_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB4A53E05F68B6FA1);
    ctx->Reset();

    ctx->Push(render_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_mobile_phone_rotation(f32 rot_x_, f32 rot_y_, f32 rot_z_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBB779C0CA917E865);
    ctx->Reset();

    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success can_phone_be_seen_on_screen(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC4E2813898C97A4B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_mobile_phone_scale(f32 scale_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCBDD322A73D6D932);
    ctx->Reset();

    ctx->Push(scale_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cell_cam_set_selfie_mode_head_yaw_offset(f32 yaw_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD6ADE981781FCA09);
    ctx->Reset();

    ctx->Push(yaw_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cell_cam_set_selfie_mode_head_roll_offset(f32 roll_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF1E22DC13F5EEBAD);
    ctx->Reset();

    ctx->Push(roll_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success script_is_moving_mobile_phone_offscreen(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF511F759238A5122);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cell_cam_activate(bool p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFDE8F069C542D126);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_pay_business_supplies(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0035BB914316F1E3);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_wage_payment_bonus(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x005ACA7100BD101D);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_rockstar(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x02CE1D6AC0FC73EA);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_vehicle_requested(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x02D24A35A9CC3503);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_upgrade_arena(i32 amount_, bool p1_, bool p2_, const CStringPtr& p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x037ABB06825D7AB1);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_delete_character(i32 character_slot_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x05A50AF38947EB8D);
    ctx->Reset();

    ctx->Push(character_slot_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_order_warehouse_vehicle(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x05F04155A226FBBF);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_casino_time_trial_win(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0819DB99FD2FBBD8);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_goon(i32 p0_, i32 p1_, i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x08A1B82B91900682);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_boss(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x08B0CA7A6AB3AC32);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_can_transfer_cash(bool* native_return, i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x08E8EEADFD0DC4A0);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_earn_casino_mission_participation(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x09E8F18641BE2575);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_business_hub_sell(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0B39CF0D53F1C883);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_uprade_bunker(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0C82D21A77C22D49);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_agency(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0CB1BE0633C024A8);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_buy_tiltrotor(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0CCE73BC7A11E885);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_pa_service_snack(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0D30EB83668E63C5);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_challenge(i32 amount_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0DD362F14F18942A);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_sell_base(i32 amount_, u32 base_name_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0E1E2FF3F4EC11AA);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(base_name_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_arena_career_progression(i32 amount_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0F99F70C61F14619);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_pa_heli_pickup(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0FE8E1FCD2B86B33);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_upgrade_acid_lab_equipment(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x110EE9D486C23126);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_pa_service_heli(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x112209CE0290C03A);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_first_time_bonus(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x11B0A20C493F7E36);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_apartment_utilities(void* data_, i32 amount_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1254B5B3925EFD3D);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_doomsday_finale_bonus(i32 amount_, u32 vehicle_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x128A747F4A230952);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(vehicle_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_buy_bunker(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x12D148D26538D0F9);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_bounty(void* gamer_handle_, void* p2_, i32 amount_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x131BB5DA15453ACF);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p3_);
    ctx->Push(gamer_handle_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_source_participation_acid_lab(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x136F11B5DF1B304D);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_pvc_transfer_balance(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x13A8DE2FD77D04F3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_spend_car_club_membership(i32 amount1_, i32 p1_, i32 p2_, i32 amount2_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1464E17207CD36E2);
    ctx->Reset();

    ctx->Push(amount1_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(amount2_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_award_contract(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x146D4EB6D22A403F);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_arena_join_spectator(i32 amount_, i32 p1_, bool p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x14EAEA58F93B55AF);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_casino_can_bet(bool* native_return, u32 hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x158C16F5E4CF41F8);
    ctx->Reset();

    ctx->Push(hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_earn_gangops_wages_bonus(i32 amount_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x15BB2A5C757EB91F);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_upgrade_tiltrotor(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x165E135D6DFA2907);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_taxi(i32 amount_, bool p1_, bool p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x17C3A7D31EAE39F9);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_deduct_cash(i32 amount_, const CStringPtr& p1_, const CStringPtr& p2_, bool p3_, bool p4_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x18B7AE224B087E26);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_.ptr);
    ctx->Push(p2_.ptr);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_agency(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1B2120405080125C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_service_earn_gangops_rival_delivery(i32 earned_money_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1B882107C23A9022);
    ctx->Reset();

    ctx->Push(earned_money_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_bounty_hunter_mission(i32 amount_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1BEA0CD93470BB1F);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_gangops_finale(i32 amount_, const CStringPtr& p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1C121FC9545E0D52);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_can_share_job_cash(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1C2473301B1C66BA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_spent_betting(i32 amount_, i32 p1_, const CStringPtr& match_id_, bool p3_, bool p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1C436FD11FFA692F);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(match_id_.ptr);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_upgrade_nightclub_and_warehouse(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1DC9B749E7AE282B);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_fmbb_boss_work(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1FDA0AA679C9919B);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success process_cash_gift(CStringPtr& native_return, i32* p0_, i32* p1_, const CStringPtr& p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x20194D48EAEC9A41);
    ctx->Reset();

    ctx->Push(p2_.ptr);
    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_spent_upgrade_hacker_truck(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x226C284C830D0CA8);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_fixer_rival_delivery(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x235D41210B3A1A5E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_gangops_elite(i32 amount_, const CStringPtr& p1_, i32 act_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2597A0D4A4FC2C77);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_.ptr);
    ctx->Push(act_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_cash_drop(i32 amount_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x289016EC778D60E0);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_job_skip(i32 amount_, const CStringPtr& match_id_, bool p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x28F174A67B8D0C2F);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(match_id_.ptr);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_upgrade_acid_lab_scoop(i32 p0_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2940558E05BCC2EC);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_bounty(i32 p0_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x29B260B84947DFCC);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_gangops_repair_cost(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2A7CEC72C3443BCC);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_purchase_hacker_truck(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2A93C46AAB1EACC9);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_upgrade_office_garage(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2AFC2D19B50797F2);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_challenge_win(void* p1_, i32 p0_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B171E6B2F64D8DF);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p2_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_biker_shop(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2C5809EB9DF57257);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_gunrunning(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2CEB0E0BC2A77C05);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_gangops_wages(i32 amount_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2DCB19ABAB0380A8);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_trade_impexp_warehouse_property(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2FAB6614CE22E196);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_buy_contraband_mission(i32 p0_, i32 p1_, u32 p2_, bool p3_, bool p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x30FD873ECE50E9F6);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_hangar_trade(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x31BA138F6304FB9F);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_purchase_impexp_warehouse_property(void* data_, i32 amount_, bool p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x33981D6804E62F49);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_buy_casino(void* data_, i32 amount_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x34A6FC4D06C4DA0F);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_wage_payment(i32 amount_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x35F8DA0E8A31EF1B);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_upgrade_truck(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x365E877C61D6988B);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_autoshop_business(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x36A7FD5A7194B03E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_agency_contract(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x38482AD49CB905C7);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_casino_can_bet_pvc(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x394DCDB9E836B7A9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_can_bet(bool* native_return, i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3A54E33660DED67F);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_casino_buy_chips(bool* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3BD101471C7F9EEC);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_initialize_cash(i32 wallet_, i32 bank_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3DA5ECD1A56CBA6D);
    ctx->Reset();

    ctx->Push(wallet_);
    ctx->Push(bank_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_upgrade_base(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3DD3F33A5D55EA6F);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_warehouse(i32 amount_, i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3E4ADAFF1830F146);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_casino_heist_awards(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3EC7471E6909798A);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_personal_vehicle(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_, i32 p6_, i32 p7_, i32 p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3F4D00167E41E0AD);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_buy_arena(i32 amount_, bool p1_, bool p2_, const CStringPtr& p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x40D5DA9550B7CB46);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_juggalo_story_mission_participation(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x40FF6CCCC476185C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_upgrade_impexp_warehouse_property(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4128464231E3CA0B);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_business_battle(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x42FCE14F50F27291);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_not_badsport(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4337511FA8221D36);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_arcade(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x43AA7FAC4E6D6687);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_rename_acid_product(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x446798F7495DD7D8);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_sightseeing_reward(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x45087AE480B233AC);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_holdups(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x45B8154E077D9E4D);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_upgrade_casino(void* data_, i32 amount_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4740D62BC1B4EBEA);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_casino_heist_skip_mission(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x487009DD91D93429);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_upgrade_acid_lab_mines(i32 p0_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4B99AB08C92C54E4);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_upgrade_arcade(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4C3B75694F7E0D9C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_buy_base(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4EA3F425C7744D21);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_pvc_balance(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4F54F3B6C202FB4E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_earn_daily_objective_event(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5128DF14A5BB86FC);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_ai_target_kill(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x515B4A22E4D3C6D7);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_boat_pickup(i32 p0_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x524EE43A37232C00);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_daily_vehicle(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x533073E8A596008C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_beach_party(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x54ABA22FA6371249);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_collectables_action_figures(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5517F90043466049);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_upgrade_arcade(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5574637681911FDA);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_purchase_club_house(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x55A1E095DB052FA5);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_casino_mission_reward(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x566FD402B25787DE);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_receive_player_jobshare_cash(void* gamer_handle_, i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x56A3B51944C50598);
    ctx->Reset();

    ctx->Push(value_);
    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_yohan_source_goods(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x59498BC8B1C8B15C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_award_short_trip(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5B4DBDED84D6A420);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_target_refund(i32 amount_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5B669CF2299A271F);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_employ_assassins(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5BBBD92186E1F1C5);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_jukebox(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5BCDE0F640C773D2);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_collectable_completed_collection(i32 amount_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5C9B198AF5A54FA6);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_vc_balance(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5CBAD97E059E1B94);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_can_receive_player_cash(bool* native_return, i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5D17BE59D2123284);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_evc_balance(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5D1E75F91C07DEE5);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_spent_ballistic_equipment(i32 amount_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5D97630A8A0EF123);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_arena_war_assassinate_target(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5E7AE8AABE8B7C0D);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_gangops_trip_skip(i32 amount_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5ECE6FD7B4EC8D6A);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_change_appearance(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5F456788B05FAEAC);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_pay_employee_wage(i32 p0_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5FD5ED82CBBE9989);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_bend_job(i32 amount_, const CStringPtr& heist_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x61326EE6DF15B0CA);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(heist_hash_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_upgrade_hangar(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x615EB504B0788DAF);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_arena_premium(i32 amount_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x619496D837EFD920);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_suv_fst_trvl(i32 p0_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x61A2DF64ED2D396E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_fixer_prep(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6283E5DE4C4460C6);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_arena_war(i32 amount_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x631F1CB8FB4130AA);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_buy_property(i32 cost_, u32 property_name_, bool p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x650A08A280870AF6);
    ctx->Reset();

    ctx->Push(cost_);
    ctx->Push(property_name_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_nightclub_and_warehouse(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x65482BFD0923C8A1);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_agency_safe(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x663B4B9D11742A12);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_upgrade_business_property(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x675D19C6067CAE08);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_spin_the_wheel_cash(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x676C48776CACBB5A);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_job_bonus(void* p1_, void* p2_, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6816FB4416760775);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_purchase_office_property(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x69EF772B192614C1);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_from_rockstar(i32 p0_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6A445B64ED7ABEB5);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_cinema(i32 p0_, i32 p1_, bool p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6B38ECB05A63A685);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_smuggler_work(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6B7E4FB50D5F3D65);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_submarine(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6C8BC1488527AAAB);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_upgrade_agency(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6CCA64840589A3B6);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_buy_passive_mode(i32 p0_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6D3A430D1A809179);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_buy_reveal_players(i32 p0_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6E176F1B18BC0637);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_daily_objectives(i32 amount_, const CStringPtr& type_, i32 character_slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6EA318C91C1A8786);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(type_.ptr);
    ctx->Push(character_slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success was_vc_withdrawal_successful(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6FCF8DDEA146C45B);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_spent_purchase_business_property(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6FD97159FE3C971A);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_string_bank_wallet_balance(CStringPtr& native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x700AF71AE615E6DD);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_spend_arena_spectator_box(i32 amount_, i32 type_, bool p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7049BF858601DC0F);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(type_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_cashing_out(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x718FBBF67414FA36);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_biker(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x71BEC32FA466E105);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_casino_heist(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x72E7C7B9615FA3C3);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_can_spend_money2(bool* native_return, void* p4_, i32 p0_, bool p1_, bool p2_, bool p3_, i32 p5_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7303E27CC6532080);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_earn_award_phone(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7397A115030F1BE3);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_buy_smokes(i32 p0_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x75AF80E61248EEBD);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_buy_airstrike(i32 cost_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x763B4BD305338F19);
    ctx->Reset();

    ctx->Push(cost_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_vc_bank_balance(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x76EF28DA05EA395A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_spend_gangops_cannon(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x771ADB0E7635B7BF);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_sell_acid(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x79B656937DF6DF5D);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_rdr_bonus(i32 amount_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7A5349B773584675);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_buy_bounty(i32 amount_, u32 victim_, bool p2_, bool p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7B718E197453F2D9);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(victim_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_heli_pickup(i32 p0_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7BF1D73DB2ECA492);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_economy_has_fixed_crazy_numbers(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7C4FCCD2E4DEB394);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_spent_player_healthcare(i32 p0_, i32 p1_, bool p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7C99101F7FCE2EE5);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_set_discount(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7E2F4E8F44CAF4E0);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_telescope(i32 p0_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7FE61782AD94CC09);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_arrest_bail(i32 p0_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x812F5488B1B2A299);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_money_can_bet(bool* native_return, i32 amount_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x81404F3DC124FE5B);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_buy_heli_strike(i32 cost_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x81AA4610E3FD3A69);
    ctx->Reset();

    ctx->Push(cost_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_request_job(i32 p0_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8204DA7934DF3155);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_manual_delete_character(i32 character_slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x821418C727FCACD7);
    ctx->Reset();

    ctx->Push(character_slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_betting(i32 amount_, const CStringPtr& p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x827A5BA1A44ACA6D);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_casino_collectable_completed_collection(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x83AD64F53F4E9483);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_rename_acid_lab(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x842B1C5AF61ACDE9);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_property(i32 amount_, u32 property_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x849648349D77F5C5);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(property_name_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_destroying_contraband(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x84C0116D012E8FC2);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_collectable_item(i32 amount_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x84FF63BD4966F33D);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_business_product(i32 amount_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8586789730B10CAF);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_buy_arcade(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x870289A558348378);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_nightclub_entry_fee(u32 player_, i32 amount_, i32 p1_, bool p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x876056684281655D);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_casino_generic(i32 amount_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x88BF9B612B84D3C3);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_award_fixer_mission(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x88D6C327D6C57C45);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_upgrade_sub(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x89049A84065CE68E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_casino_can_buy_chips_pvc(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8968D4D8C6C40C11);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_buy_fairground_ride(i32 amount_, i32 p1_, bool p2_, bool p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8A7B3952DD64D2B5);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_sell_prize_vehicle(i32 amount_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8BCB27A057DF7B7F);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_upgrade_office_property(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8E243837643D9583);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_buy_sub(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x90CD7C6871FBF1B4);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_bike_shop(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x923AEA8E78F8DF0B);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_sell_bunker(i32 amount_, u32 bunker_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9251B6ABF2D0A5B4);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(bunker_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_car_club_bar(i32 p0_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x925227803A0EAA1B);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_business_property_fees(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x92D1CFDA1227FF1C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_pay_match_entry_fee(i32 amount_, const CStringPtr& match_id_, bool p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9346E14F2AF74D46);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(match_id_.ptr);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_interaction_menu_ability(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x93AA4165CB67E925);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_cargo_sourcing(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x948705F6F9C50824);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_casino_award(i32 amount_, u32 hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x973A9781A34F8DEB);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success can_pay_amount_to_boss(bool* native_return, i32* p3_, i32 p0_, i32 p1_, i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9777734DAD16992F);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(amount_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_earn_taxi_job(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x991E1588FAD9019D);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_robbed_by_mugger(i32 amount_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x995A65F15F581359);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_purchase_club_house(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x998E18CEB44487FC);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_spin_the_wheel_payment(i32 amount_, i32 p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9A5BD1D0000B339C);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_earned_from_bank_and_wallets(i32* native_return, i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9B5016A6433A68C5);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_spend_autoshop_modify(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9BEA350D7C48061B);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_daily_stash_house_participation(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9C0C6BD0F94CE391);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_request_heist(i32 p0_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D26502BB97BFE62);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_heist_award(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D4FDBB035229669);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_pay_vehicle_insurance_premium(void* gamer_handle_, i32 amount_, u32 vehicle_model_, bool not_bankrupt_, bool has_the_money_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9FF28D88C766E3E8);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(vehicle_model_);
    ctx->Push(not_bankrupt_);
    ctx->Push(has_the_money_);
    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_gangattack_pickup(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA03D4ACE0A3284CE);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_gangops_start_strand(i32 type_, i32 amount_, bool p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA19EC0786E326E06);
    ctx->Reset();

    ctx->Push(type_);
    ctx->Push(amount_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_buy_mfgarage(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA2ED36DCF0FCA413);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_can_spend_from_bank(bool* native_return, i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA31FD6A0865B6D14);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_buy_backup_gang(i32 p0_, i32 p1_, bool p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA3EDDAA42411D3B9);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_vc_wallet_balance(i32* native_return, i32 character_slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA40F9C2623F6A8B5);
    ctx->Reset();

    ctx->Push(character_slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_earn_beach_party_lost_found(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA51338E0DCCD4065);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_trade_business_property(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA51B086B0B2C0F7A);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_buy_offtheradar(i32 p0_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA628A745E2275C5D);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_bull_shark(i32 p0_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA6DD8458CE24012C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_string_bank_balance(CStringPtr& native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA6FA3979BED01B81);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_spent_vehicle_export_mods(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_, i32 p6_, i32 p7_, i32 p8_, i32 p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA75CCF58A60A5FD1);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_club_management_participation(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA75EAC69F59E96E7);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_upgrade_acid_lab_armor(i32 p0_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA7D541C9ACD63133);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_street_dealer(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA81017EE1324FDFE);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_arena_war_event_cargo(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA82959062361B259);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_award_taxi(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA914768AD35CD3A5);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_gangops_setup(i32 amount_, const CStringPtr& p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA9160796D47A2CF8);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_clear_character_wallet(i32 character_slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA921DED15FDF28F5);
    ctx->Reset();

    ctx->Push(character_slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_collectables(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA95CFB4E02390842);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_upgrade_warehouse_property(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA95F667A755725DA);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_gangops_award(i32 amount_, const CStringPtr& p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA9A31475F530DFDA);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_.ptr);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_can_spend_money(bool* native_return, i32 p0_, bool p1_, bool p2_, bool p3_, i32 p4_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAB3CAA6B422164DA);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_spent_buy_truck(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAC272C0AE01B4BD8);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_casino_story_mission_reward(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAC95ED552157E092);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_call_player(void* p1_, i32 p0_, bool p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xACDE7185B374177C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_ammo_drop(i32 p0_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB162DC95C0A3317B);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_hangar_utility_charges(i32 amount_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB18AC2ECBB15CB6A);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_crate_drop(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB1CC1B9EC3007A2A);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_hangar_staff_charges(i32 amount_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB1F1346FD57685D7);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_prostitutes(i32 p0_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB21B89501CFAC79E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_job(i32 amount_, const CStringPtr& p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB2CC4836834E8A98);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_buy_supplies(i32 p0_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB48185C0CA67B16B);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_pa_service_dancer(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB49ECA122467D05F);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_purchase_office_garage(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB4C2EC463672474E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_nightclub_dancing(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB4DEAE67F35E2ACD);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_vehicle(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_, i32 p6_, i32 p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB539BD8A4C1EECF8);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_arcade_mgmt(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB5B58E24868CB09E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_tuner_award(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB846F547D3792DF6);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_set_common_fields(i32 p0_, i32 p1_, i32 p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB9F7A469460E7A4A);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_fixer_finale(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA154373C5FE51E8);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_carclub_membership(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBC6227792A188E2E);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_tuner_robbery(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBCB266247193AC61);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_purchase_warehouse_property(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBD0EFB25CCA8F97A);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_award_random_event(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBEAFBB1B98B7EF55);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_hidden(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBF8793B91EA094A7);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_upgrade_autoshop(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC10322A8D3E061EE);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_import_export_repair(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC1952F3773BA18FE);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_award_daily_stash(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC30650FA74A19D02);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_fooligan_job_participation(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC376B92D0E060970);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_fmbb_phonecall_mission(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC5156361F26E2212);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_autoshop_income(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC66D1CF99ED7FE25);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_nightclub_and_warehouse(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC6E74CF8C884C880);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_premium_job(i32 amount_, const CStringPtr& p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC8407624CEF2354B);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_casino_club(i32 amount1_, i32 p1_, bool p2_, i32 p3_, i32 p4_, i32 p5_, i32 p6_, i32 amount2_, i32 p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC991C255AA6D90B2);
    ctx->Reset();

    ctx->Push(amount1_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(amount2_);
    ctx->Push(p8_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_bank_interest(i32 p0_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCA230C9682556CF1);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_sell_participation_acid_lab(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCA3EF9B09A8D76B4);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_daily_stash_house_completed(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCABC9874AFA70D6D);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_dar_challenge(i32 amount_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCAC672087B4A24AB);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_purchase_hangar(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCCB339CC970452DA);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_defer_cash_transactions_until_shop_save() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCD0F5B5D932AE473);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_move_submarine(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCD4D66B43B1DD28D);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_goon(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCDA1C62BE2777802);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_fooligan_job(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCE4452AE85F5E252);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_upgrade_mfgarage(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCF8F346DDDC66643);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_award_dead_drop(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD01EBAEA1F905EF6);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_upgrade_agency(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD07C7C3F1995108C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_award_acid_lab(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD1A8165767AD2D23);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_car_club_takeover(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD1E46824E6FB92B5);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_island_heist(i32 amount1_, i32 p1_, i32 p2_, i32 p3_, i32 amount2_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD21D111C46BA9F15);
    ctx->Reset();

    ctx->Push(amount1_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(amount2_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_arcade(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD29334ED1A256DBF);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_casino_heist(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_, i32 p6_, i32 p7_, i32 p8_, i32 p9_, i32 p10_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD30E8392F407C328);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(p10_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_no_cops(i32 p0_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD5BB406F4E04019F);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_mc_ability(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD7CCCBA28C4ECAF0);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_comp_suv(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD86581F9E7CDA383);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_wager(i32 p0_, i32 p1_, i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD99DB210089617FE);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_buy_healthcare(i32 cost_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD9B067E55253E3DD);
    ctx->Reset();

    ctx->Push(cost_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_holdups(i32 p0_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD9B86B9872039763);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_source_bike(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD9DF467CBE4398C8);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_gangops_skip_mission(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDA947AE8880D5C18);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_boss(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDBC966A01C02BCA7);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_can_spend_from_bank_and_wallet(bool* native_return, i32 amount_, i32 character_slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDC18531D7019A535);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(character_slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_spend_nightclub_bar_drink(i32 amount_, i32 p1_, bool p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDD21B016E4289465);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_upgrade_autoshop(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDD829AA198FDC46C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_award_juggalo_mission(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDDF047577F1A02A7);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_yatch_mission(i32 amount_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDE68E30D89F97132);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_jobx2(i32 amount_, const CStringPtr& p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDEBBF584665411D0);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_smuggler_agency(i32 amount_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDEE612F2D71B0308);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_rc_time_trial(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDFF49EE984E7AAE8);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_juggalo_story_mission(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE01D10BA8CD53621);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_arena_skill_level_progression(i32 amount_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE08256F972C7BB2C);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_nightclub(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE0F82D68C7039158);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_vc_withdrawal_completed(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE154B48B68EF72BC);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_spent_buy_wantedlevel(void* p1_, i32 p0_, bool p2_, bool p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE1B13771A843C4F6);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_pa_service_impound(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE23ADC6FCB1F29AE);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success deposit_vc(bool* native_return, i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE260E0BB9CD995AC);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_spent_rdr_hatchet_bonus(i32 amount_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE284D46FFDB82E36);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_agency_phone(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE29F3D5FA63B1B82);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_island_heist_dj_mission(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE2BB399D90942091);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_dispatch_call(i32 amount_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE2E244AB823B4483);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_setup_participation_acid_lab(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE3942D59E8A7F70D);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_hire_mugger(i32 p0_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE404BFB981665BF0);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_make_it_rain(i32 amount_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE5F5A060439C2F5D);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_hire_mercenary(i32 p0_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE7B80E2BF9D80BD6);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_move_yacht(i32 amount_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE7DF4E0545DFB56E);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_island_heist(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE86689E5F82DE429);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_hacker_truck(i32 p0_, i32 amount_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE8815FE993896AD3);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(amount_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_order_bodyguard_vehicle(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE8B0B270B6E7C76E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_remaining_transfer_balance(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEA560AC9EEB1E19B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_spend_buy_agency(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEA8CD3C9B3C35884);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_play_arcade(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEAD3D81F2C3A1458);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_supply(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEBD482B82ACB8BAD);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_carwash(i32 p0_, i32 p1_, i32 p2_, bool p3_, bool p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEC03C719DB2F4306);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_contraband(i32 amount_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xECA658CE2A4E5A72);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_pickup(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xED1517D3AF17C698);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_gangops_prep_participation(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xED26584F6BDCBBFD);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_casino_sell_chips(bool* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xED44897CB336F480);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_can_spend_from_wallet(bool* native_return, i32 amount_, i32 character_slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xED5AB8860415BABA);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(character_slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_spent_pa_service_vehicle(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xED5FD7AF10F5E262);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_purchase_nightclub_and_warehouse(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xED76D195E6E3BF7F);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_vehicle_export(i32 amount_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEDEAD9A91EC768B3);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_in_stripclub(i32 p0_, bool p1_, i32 p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEE99784E4467689C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_buy_autoshop(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEEB7E5D1FEB20869);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_buy_item(i32 amount_, u32 item_, i32 p2_, i32 p3_, bool p4_, const CStringPtr& item_name_, i32 p6_, i32 p7_, i32 p8_, bool p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF0077C797F66A355);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(item_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(item_name_.ptr);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_buy_acid_lab(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF1E26A7924327152);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_fixer_agency_short_trip(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF4A8E57460BF2037);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_rob_armored_cars(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF514621E8EA463D0);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_casino_can_bet_amount(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF62F6D9528358FE4);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_earn_bounty_hunter_reward(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF6B170F9A02E9E87);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_rehire_dj(i32 amount_, i32 p1_, bool p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF6C8A544E4CF14FC);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success withdraw_vc(i32* native_return, i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF70EFA14FE091429);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_earn_from_import_export(i32 amount_, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF92A014A634442D6);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_string_wallet_balance(CStringPtr& native_return, i32 character_slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF9B10B529DCFB33B);
    ctx->Reset();

    ctx->Push(character_slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_refund_cash(i32 index_, const CStringPtr& context_, const CStringPtr& reason_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF9C812CD7C46E817);
    ctx->Reset();

    ctx->Push(index_);
    ctx->Push(context_.ptr);
    ctx->Push(reason_.ptr);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_from_criminal_mastermind(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFA009A62990671D4);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_upgrade_club_house(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFA07759E6FDDD7CF);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_assassinate_target_killed(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFA700D8A9905F78A);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_give_player_jobshare_cash(void* gamer_handle_, i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFB18DF9CB95E0105);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_player_is_high_earner(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFB2456B2040A6A67);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_earn_from_ambient_job(void* p2_, i32 p0_, const CStringPtr& p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFB6DB092FBAE29E6);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_.ptr);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spend_casino_membership(i32 amount_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFBBE0570EDF39D46);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_rename_organization(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFC4EE00A7B3BFB76);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_bb_event_bonus(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFDD8D2440DAF1590);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_earn_daily_vehicle_bonus(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFE65AFE7308E32B2);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_spent_boss_goon(bool* native_return, i32 amount_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFFBE02CD385356BD);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_earn_fmbb_wage_bonus(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFFFBA1B1F7C0B6F4);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success net_gameserver_retrieve_init_session_status(bool* native_return, i32* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0395CB47B022E62C);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_delete_character_get_status(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A6D923DFFC9BD89);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success net_gameserver_delete_set_telemetry_nonce_seed(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x112CEF1615A1139F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_retrieve_start_session_status(bool* native_return, i32* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x170910093218C8B9);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_transfer_bank_to_wallet_get_status(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x23789E777D14CE44);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success net_gameserver_catalog_item_key_is_valid(bool* native_return, u32 hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x247F0F73A182EA0B);
    ctx->Reset();

    ctx->Push(hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_basket_start(bool* native_return, i32* transaction_id_, u32 category_hash_, u32 action_hash_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x279F08B1A4B29B7E);
    ctx->Reset();

    ctx->Push(category_hash_);
    ctx->Push(action_hash_);
    ctx->Push(flags_);
    ctx->Push(transaction_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_basket_is_full(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x27F76CC6C55AD30E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_is_catalog_current(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B949A1E6AEC8F6A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_session_apply_received_data(bool* native_return, i32 char_slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2F41D51BA3BCD1F1);
    ctx->Reset();

    ctx->Push(char_slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_transfer_wallet_to_bank_get_status(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x350AA5EBC03D3BD2);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success net_gameserver_refresh_server_catalog(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x357B152EF96C30B6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_start_session_restart(bool* native_return, bool inventory_, bool playerbalance_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x35A1B3E1D1315CFA);
    ctx->Reset();

    ctx->Push(inventory_);
    ctx->Push(playerbalance_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_checkout_start(bool* native_return, i32 transaction_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x39BE7CEA8D9CC8E6);
    ctx->Reset();

    ctx->Push(transaction_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_catalog_is_valid(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3C4487461E9B0DCB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_begin_service(bool* native_return, i32* transaction_id_, u32 category_hash_, u32 item_hash_, u32 action_type_hash_, i32 value_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3C5FD37B5499582E);
    ctx->Reset();

    ctx->Push(category_hash_);
    ctx->Push(item_hash_);
    ctx->Push(action_type_hash_);
    ctx->Push(value_);
    ctx->Push(flags_);
    ctx->Push(transaction_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_transfer_cash_set_telemetry_nonce_seed(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x498C1E05CE5F7877);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_delete_character(bool* native_return, i32 slot_, bool transfer_, u32 reason_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x51F1A8E48C3D2F6D);
    ctx->Reset();

    ctx->Push(slot_);
    ctx->Push(transfer_);
    ctx->Push(reason_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_transaction_in_progress(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x613F125BA3BD2EB9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_start_session_pending(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x72EB7BA9B69BF6AB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_clear_session(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x74A0FD0688F1EE45);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_use_server_transactions(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7D2708796355B20B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_is_session_refresh_pending(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x810E8431C0614BF9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_get_catalog_cloud_crc(u32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x85F6C9ABA1DE2BCF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success net_gameserver_get_session_state_and_status(bool* native_return, i32* p0_, bool* p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x897433D292B44130);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_set_telemetry_nonce_seed(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9507D4271988E1AE);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_start_session(bool* native_return, i32 char_slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA135AC892A58FC07);
    ctx->Reset();

    ctx->Push(char_slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_basket_is_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA65568121DF2EA26);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_is_session_valid(bool* native_return, i32 char_slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB24F0944DA203D9E);
    ctx->Reset();

    ctx->Push(char_slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_catalog_item_is_valid(bool* native_return, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBD4D7EAF8A30F637);
    ctx->Reset();

    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_retrieve_session_error_code(bool* native_return, i32* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC13C38E47EA5DF31);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_get_price(i32* native_return, u32 item_hash_, u32 category_hash_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC27009422FCCA88D);
    ctx->Reset();

    ctx->Push(item_hash_);
    ctx->Push(category_hash_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success net_gameserver_transfer_wallet_to_bank(bool* native_return, i32 char_slot_, i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC2F7FE5309181C7D);
    ctx->Reset();

    ctx->Push(char_slot_);
    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_retrieve_catalog_refresh_status(bool* native_return, i32* state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCF38DAFBB49EDE5E);
    ctx->Reset();

    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_transfer_bank_to_wallet(bool* native_return, i32 char_slot_, i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD47A2C1BA117471D);
    ctx->Reset();

    ctx->Push(char_slot_);
    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_basket_apply_server_data(bool* native_return, void* p1_, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE1A0450ED46A7812);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_end_service(bool* native_return, i32 transaction_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE2A99A9B524BEFFF);
    ctx->Reset();

    ctx->Push(transaction_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_init_session(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE3E5A7C64CA2C6ED);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_basket_add_item(bool* native_return, void* item_data_, i32 quantity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF30980718C8ED876);
    ctx->Reset();

    ctx->Push(quantity_);
    ctx->Push(item_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_gameserver_basket_end(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFA336E7F40C0A0D0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_time_offset(i32* native_return, i32 time_a_, i32 time_b_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x017008CCDAD48503);
    ctx->Reset();

    ctx->Push(time_a_);
    ctx->Push(time_b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_get_platform_party_member_count(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x01ABCE5E7CBDA196);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_has_control_of_entity(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x01BF60A500E28887);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_can_send_local_invite(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x021ABCBD98EC4320);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_cancel_transition_matchmaking() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x023782EFC70585EE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_should_show_promotion_alert_screen(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x023ACAB2DC9DC4A4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_gamer_status_result(bool* native_return, void* p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x02A8BEC6FD9AF660);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_has_get_finished(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x02ADA21EA2F6918F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_local_scene_from_network_id(i32* native_return, i32 net_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x02C40BF885C567B6);
    ctx->Reset();

    ctx->Push(net_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_is_player_talking(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x031E11F3D447647E);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_object_can_blend_when_fixed(u32 object_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0379DAF89BA09AA5);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_clear_invalid_object_models() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x03B2F03A53D85E41);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_session_reserve_slots_transition(bool* native_return, i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x041C7F2A6C9894E6);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_primary_clan_data_cancel() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x042E4B70B93E6054);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_tunable_cloud_request_pending(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0467C11ED88B7D28);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_in_spectator_mode(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x048746E388762E11);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_transition_finish(bool* native_return, i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x04918A41BC9B8157);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_random_float_ranged(f32* native_return, f32 range_start_, f32 range_end_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x04BD27B5ACB67067);
    ctx->Reset();

    ctx->Push(range_start_);
    ctx->Push(range_end_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success network_is_activity_session(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x05095437424397FA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_signed_in(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x054354A99211EB96);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_clear_followers() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x058F43EC59A8631A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_register_entity_as_networked(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x06FAACD625D80CAA);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_can_play_multiplayer_with_gamer(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x07DD29D5E22763F1);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_check_text_communication_privileges(bool* native_return, i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x07EAB372C8841D99);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success facebook_post_completed_heist(bool* native_return, const CStringPtr& heist_name_, i32 cash_earned_, i32 xp_earned_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x098AB65B9ED9A9EC);
    ctx->Reset();

    ctx->Push(heist_name_.ptr);
    ctx->Push(cash_earned_);
    ctx->Push(xp_earned_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_entity_is_local(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0991549DE4D64762);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success can_register_mission_pickups(bool* native_return, i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A49D1CB6E34AF72);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success facebook_post_completed_milestone(bool* native_return, i32 milestone_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0AE1F1653B554AB9);
    ctx->Reset();

    ctx->Push(milestone_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_max_num_network_vehicles(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0AFCE529F69B21FF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success cloud_get_availability_check_result(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0B0CC10720653F3B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success title_texture_download_request(i32* native_return, const CStringPtr& file_path_, const CStringPtr& name_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0B203B4AFDE53A4F);
    ctx->Reset();

    ctx->Push(file_path_.ptr);
    ctx->Push(name_.ptr);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_is_transition_host(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0B824797C9BF2159);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_pending_friend(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0BE73DA6984A6E33);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_max_num_network_peds(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0C1F7D49C39D2289);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_set_transition_visibility_lock(bool p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0C978FDA19692C2C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_num_created_mission_vehicles(i32* native_return, bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0CD9AB83489430EA);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_check_privileges(bool* native_return, i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0CF6CC51AA18F0F8);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_invite_failed_message_for_invite_menu(void* p0_, void* p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0D77A82DC2D0DA59);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_transition_closed_crew(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0DBD5D7E3C5BEC3B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_average_ping(f32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0E3A041ED6AC2B45);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success network_set_activity_player_max(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0E4F77F7B9D74D84);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_set_attribute_damage_to_player(bool* native_return, u32 ped_, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0EDE326D47CD0F3E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ped_to_net(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0EDEC3C276198689);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_is_gamer_in_my_session(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0F10B05DDF8D16E9);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_allow_cloning_while_in_tutorial(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0F1A4B45B7693B95);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_override_receive_restrictions_all(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0FF2862B61A58AF9);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_signed_online(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1077788E268557C2);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_tunable_cloud_crc(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x10BD227A753B0D84);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_is_game_in_progress(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x10FAB35428CCC9D7);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_clan_release_emblem(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x113E6E3E50E286B0);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_session_set_script_validate_join() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1153FA02A659051C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_send_important_transition_invite_via_presence(bool* native_return, void* gamer_handle_, const CStringPtr& p1_, i32 data_count_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1171A97A3D3981B6);
    ctx->Reset();

    ctx->Push(p1_.ptr);
    ctx->Push(data_count_);
    ctx->Push(p3_);
    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_platform_party_members(i32* native_return, void* data_, i32 data_size_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x120364DE2845DAF8);
    ctx->Reset();

    ctx->Push(data_size_);
    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_is_activity_spectator(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x12103B9E0C9F92FB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_last_player_pos_received_over_network(Vector3Wrapper& native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x125E6D638B8605D4);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success set_player_invisible_locally(u32 player_, bool b_include_players_vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x12B37D54667DB0B8);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(b_include_players_vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_num_created_mission_objects(i32* native_return, bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x12B6281B6C6706C0);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_clan_request_emblem(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x13518FF1C6B28938);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_has_age_restrictions(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1353F87E89946207);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_can_gamer_play_multiplayer_with_me(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x135F9B7B7ADD2185);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_transition_set_in_progress(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1398582B7F72B3ED);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_non_participants_of_this_script_as_ghosts(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x13F1FCB111B820B0);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_clear_offline_invite_pending() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x140E6A44870A11CE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_allow_remote_synced_scene_local_player_requests(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x144DA052257AE7D8);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_queuing_for_session_join(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x14922ED3E38761F0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_copy_content(bool* native_return, void* p0_, void* p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x152D90E4C1B4738A);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_am_i_blocked_by_gamer(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x15337C7C268A27B2);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_user_starter_access(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x155467ACA0F55705);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success ugc_query_by_content_id(bool* native_return, const CStringPtr& content_id_, bool latest_version_, const CStringPtr& content_type_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x158EC424F35EC469);
    ctx->Reset();

    ctx->Push(content_id_.ptr);
    ctx->Push(latest_version_);
    ctx->Push(content_type_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success texture_download_request(i32* native_return, void* gamer_handle_, const CStringPtr& file_path_, const CStringPtr& name_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x16160DA74A8E74A2);
    ctx->Reset();

    ctx->Push(file_path_.ptr);
    ctx->Push(name_.ptr);
    ctx->Push(p3_);
    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success ugc_did_description_request_succeed(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x162C23CA83ED0A62);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_conceal_entity(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1632BE0AC1E62876);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_connected_via_relay(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x16D3D49902F697BB);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_request_content_data_from_index(i32* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x171DF6A0C07FB3DC);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_player_get_cheater_reason(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x172F75B6EE2233BA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success reset_ghost_alpha() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x17330EBF2F2124A8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_clear_create_result() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x17440AA15D1D3739);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_set_property_id(i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1775961C2FBBCB5C);
    ctx->Reset();

    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_keep_entity_collision_disabled_after_anim_scene(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x17C9E241111A674D);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_start_solo_tutorial_session() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x17E0198B3882C2CB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_content_modifier_list_id(i32* native_return, u32 content_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x187382F8A3E0A6C3);
    ctx->Reset();

    ctx->Push(content_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_clear_group_activity() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1888694923EF4591);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_does_entity_exist_with_network_id(bool* native_return, i32 net_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x18A47D074708FD68);
    ctx->Reset();

    ctx->Push(net_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_num_participants(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x18D0456E86604654);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_access_tunable_float_modification_detection_registration_hash(bool* native_return, f32* value_, u32 context_hash_, u32 name_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1950DAE9848A4739);
    ctx->Reset();

    ctx->Push(context_hash_);
    ctx->Push(name_hash_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_player_is_badsport(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x19D8DA0E5A68045A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_friend(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1A24A179F9B31654);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_get_content_rating(f32* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1ACCFBA3D8DAB2EE);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success network_is_player_a_participant_on_script(bool* native_return, u32 player_, const CStringPtr& script_, i32 instance_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1AD5B71586B94820);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(script_.ptr);
    ctx->Push(instance_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_participant_index(i32* native_return, i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1B84DF6AF2A46938);
    ctx->Reset();

    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_set_player_is_passive(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1B857666604B1A74);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_set_this_script_is_network_script(i32 max_num_mission_participants_, bool p1_, i32 instance_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1CA59E306ECB80A5);
    ctx->Reset();

    ctx->Push(max_num_mission_participants_);
    ctx->Push(p1_);
    ctx->Push(instance_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_commerce_data_fetch_in_progress(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1D4DC17C38FEAFF0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_get_content_has_lo_res_photo(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1D610EB0FEA716D9);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_host_of_script(u32* native_return, const CStringPtr& script_name_, i32 instance_id_, i32 position_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1D6A14F1F9A736FC);
    ctx->Reset();

    ctx->Push(script_name_.ptr);
    ctx->Push(instance_id_);
    ctx->Push(position_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success network_set_rich_presence(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1DCCACDCFC569362);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_publish(bool* native_return, const CStringPtr& content_id_, const CStringPtr& base_content_id_, const CStringPtr& content_type_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1DE0F5F50D723CAA);
    ctx->Reset();

    ctx->Push(content_id_.ptr);
    ctx->Push(base_content_id_.ptr);
    ctx->Push(content_type_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_num_reserved_mission_peds(i32* native_return, bool p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1F13D5AE5CB17E17);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_clan_get_local_memberships_count(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1F471B79ACC90BEF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_fade_in_entity(u32 entity_, bool state_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1F4ED342ACEFE62D);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(state_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_set_privilege_check_result_not_needed() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1F7BC3539F9E0224);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_transition_set_content_creator(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1F8E00FB18239600);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_friend_count(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x203F1CFD823B27A4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_get_player_loudness(f32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x21A1684A25C2867F);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success is_entity_a_ghost(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x21D04D7BC538C146);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_prevent_script_host_migration() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2302C0264EA58D31);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_add_followers(i32* p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x236406F60CF216D6);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_disable_realtime_multiplayer() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x236905C700FDB54D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_has_cached_player_head_blend_data(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x237D5336A9A54108);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_was_invited(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x23DFB504655D0CE4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_entity_locally_visible(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x241E289B5C059EDC);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_presence_invite_content_id(CStringPtr& native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x24409FC4C55CB22D);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success ugc_did_create_succeed(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x24E4E51FC16305F9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_player_index(u32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x24FB80D107371267);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success network_get_signalling_info(void* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2555CF7DA5473794);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_position_hash_of_this_script(u32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x257ED0FADF750BCF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success network_add_client_entity_area(i32* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x25B99872D588A101);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_have_online_privileges(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x25CB5A9F37BFD063);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_remove_all_queued_join_requests() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x25D990F8E0E3F13C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_are_transition_details_valid(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2615AA2A695930C1);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_mark_as_preferred_activity(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x261E97AD7BCF3D40);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_set_script_controlling_teams(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x265559DA40B3F327);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success delay_mp_store_open() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x265635150FB0D82E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_allow_remote_attachment_modification(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x267C78C60E806B9A);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_presence_invite_session_id(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x26E1CD96B0903D60);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_has_automute_override(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x26F07DD83A5F7F98);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_mark_visible(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x271CC6AB59EBF9A5);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_set_bookmarked(bool* native_return, const CStringPtr& content_id_, bool bookmarked_, const CStringPtr& content_type_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x274A1519DFC1094F);
    ctx->Reset();

    ctx->Push(content_id_.ptr);
    ctx->Push(bookmarked_);
    ctx->Push(content_type_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_activity_spectator_from_handle(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2763BBAA72A7BCB9);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_on_return_to_single_player() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x283B6062A2C01E9B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_this_script_is_network_script(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2910669969E9535E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_transition_matchmaking(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x292564C735375EDF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_network_id_can_migrate(i32 net_id_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x299EEB23175895FC);
    ctx->Reset();

    ctx->Push(net_id_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_has_modify_finished(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x299EF3C576773506);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_explode_heli(u32 vehicle_, bool is_audible_, bool is_invisible_, i32 net_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2A5E0621DD815A9A);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(is_audible_);
    ctx->Push(is_invisible_);
    ctx->Push(net_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_commerce_item_num_cats(i32* native_return, i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2A7776C709904AB0);
    ctx->Reset();

    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_use_high_precision_blending(i32 net_i_d_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B1813ABA29016C5);
    ctx->Reset();

    ctx->Push(net_i_d_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_add_client_entity_angled_area(i32* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B1C623823DB0D9D);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_open_transition_matchmaking() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B3A8F7CA3A38FDE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_clan_crewinfo_get_crewranktitle(bool* native_return, i32 p0_, const CStringPtr& p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B51EDBEFC301339);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_can_queue_for_previous_session_join(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2BF66D2E7414F686);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_current_public_content_id(const CStringPtr& mission_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2C863ACDCD12B3DB);
    ctx->Reset();

    ctx->Push(mission_id_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reserve_local_network_mission_peds(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2C8DF5D129595281);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_gamer_status_from_queue(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2CC848A861D01493);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_in_progress_finish_time(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2CE9D95E4051AECD);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_session_do_friend_matchmaking(bool* native_return, i32 p0_, i32 p1_, i32 max_players_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2CFC76E0D087C994);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(max_players_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_is_description_request_in_progress(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2D5DC831176D0114);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_local_player_invincible_time(i32 time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2D95C7E2D7E07307);
    ctx->Reset();

    ctx->Push(time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_killer_of_player(u32* native_return, u32* weapon_hash_, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2DA41ED6E1FCD7A5);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success network_launch_transition(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2DCF46CB1A4F0884);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_has_bone_been_hit_by_killer(bool* native_return, i32 bone_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2E0BF682CC778D49);
    ctx->Reset();

    ctx->Push(bone_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_any_player_near(bool* native_return, i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2E4C123D1C8A710E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_friend_in_same_title(bool* native_return, const CStringPtr& friend_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2EA9A3BEDF3F17B8);
    ctx->Reset();

    ctx->Push(friend_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_commerce_store_open(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2EAC52B4019E2782);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_cancel_invite() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2FBF47B1B36D36F9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_in_platform_party(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2FC5650B0271CB57);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_explode_vehicle(bool* native_return, u32 vehicle_, bool is_audible_, bool is_invisible_, i32 net_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x301A42153C9AD707);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(is_audible_);
    ctx->Push(is_invisible_);
    ctx->Push(net_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_override_chat_restrictions(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3039AE5AD2C9C0C4);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_get_content_is_published(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3054F114121C21EA);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_texture_download_request(i32* native_return, const CStringPtr& p0_, i32 p1_, i32 p2_, i32 p3_, const CStringPtr& p4_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x308F96458B7087CC);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_.ptr);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_set_transition_activity_id(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x30DE938B516F0AD2);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_get_my_content(bool* native_return, void* p3_, i32 p0_, i32 p1_, const CStringPtr& p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3195F8DD0D531052);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_.ptr);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_send_transition_gamer_instruction(bool* native_return, void* gamer_handle_, const CStringPtr& p1_, i32 p2_, i32 p3_, bool p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x31D1D2B858D25E6B);
    ctx->Reset();

    ctx->Push(p1_.ptr);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_get_content_language(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x32DD916F3F7C9672);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_network_id_visible_in_cutscene_hack(i32 net_id_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x32EBD154CB6B8B99);
    ctx->Reset();

    ctx->Push(net_id_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_session_do_freeroam_quickmatch(bool* native_return, i32 p0_, i32 p1_, i32 p2_, i32 max_players_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x330ED4D05491934F);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(max_players_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_register_player_broadcast_variables(i32* unk_vars_, i32 num_vars_, const CStringPtr& debug_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3364AA97340CA215);
    ctx->Reset();

    ctx->Push(num_vars_);
    ctx->Push(debug_name_.ptr);
    ctx->Push(unk_vars_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_last_vel_received_over_network(Vector3Wrapper& native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x33DE49EDF4DDE77A);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success network_session_leave_single_player() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3442775428FD2DAA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success texture_download_get_name(CStringPtr& native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3448505B6E35262D);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_block_invites(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x34F9E9049454A7A0);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_average_packet_loss(f32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x350C23949E43686C);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success network_is_tutorial_session_change_pending(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x35F0B98A8387274D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_start_communication_permissions_check(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x36391F397731595D);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_get_num_script_participants(i32* native_return, const CStringPtr& script_name_, i32 instance_id_, i32 position_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3658E8CD94FC121A);
    ctx->Reset();

    ctx->Push(script_name_.ptr);
    ctx->Push(instance_id_);
    ctx->Push(position_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success net_to_veh(u32* native_return, i32 net_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x367B936610BA360C);
    ctx->Reset();

    ctx->Push(net_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success network_set_player_mental_state(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x367EF5E2F439B4C6);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_get_content_file_version(i32* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x37025B27D9B658B1);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_get_respawn_result(Vector3Wrapper& coordinates_, f32* heading_, i32 random_int_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x371EA43692861CF1);
    ctx->Reset();

    ctx->Push(random_int_);
    alt::INative::Vector3 alt_coordinates_ { coordinates_.x, 0, coordinates_.y, 0, coordinates_.z };
ctx->Push(&alt_coordinates_);

    ctx->Push(heading_);

    Success result = native->Invoke(ctx);
    if (result) {
        coordinates_.x = alt_coordinates_.x;
coordinates_.y = alt_coordinates_.y;
coordinates_.z = alt_coordinates_.z;

        /* VOID native_return */
    }
    return result;
}
Success network_get_unreliable_resend_count(i32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3765C3A3E8192E10);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_add_entity_angled_area(i32* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 width_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x376C6375BA60293A);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(width_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_is_transition_open_to_matchmaking(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x37A4494483B9F5C9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_entity_from_object_id(u32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x37D5F739FD494675);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success network_get_invite_reply_status(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3855FB5EB2C5E8B2);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_handle_from_player(void* gamer_handle_, u32 player_, i32 gamer_handle_size_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x388EB2B86C73B6B3);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(gamer_handle_size_);
    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_trigger_damage_event_for_zero_weapon_hash(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x38B7C51AB1EDC7D8);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_does_network_id_exist(bool* native_return, i32 net_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x38CE16C96BD11344);
    ctx->Reset();

    ctx->Push(net_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_presence_invite_handle(bool* native_return, void* p1_, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x38D5B0FEBB086F75);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_mark_as_waiting_async(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x39917E1B4CB0F911);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_get_content_hash(u32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3A17A27D75C74887);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success network_send_text_message(bool* native_return, void* gamer_handle_, const CStringPtr& message_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3A214F2EC889B100);
    ctx->Reset();

    ctx->Push(message_.ptr);
    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success cloud_did_request_succeed(bool* native_return, i32 request_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3A3D5568AF297CD5);
    ctx->Reset();

    ctx->Push(request_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_access_tunable_int_modification_detection_registration_hash(bool* native_return, i32* value_, u32 context_hash_, u32 name_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3A8B55FDA4C8DDEF);
    ctx->Reset();

    ctx->Push(context_hash_);
    ctx->Push(name_hash_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_do_transition_to_freemode(bool* native_return, void* p0_, i32 p1_, bool p2_, i32 players_, bool p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3AAD8B2FCA1E289F);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(players_);
    ctx->Push(p4_);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_player_tutorial_session_instance(i32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3B39236746714134);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_set_mission_finished() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3B3D11CD9FFCDFC9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_set_override_tutorial_session_chat(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3C5C1E2C2FF814B1);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_query_respawn_results(i32* native_return, void* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3C891A251567DFCE);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_is_player_a_participant(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3CA58F6CB7CBD784);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_current_chat_option(i32 new_chat_option_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3DAD00265FBF356B);
    ctx->Reset();

    ctx->Push(new_chat_option_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_presence_invite_from_admin(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3DBF2DF0AEB7D289);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_rich_presence_string(i32 p0_, const CStringPtr& text_label_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3E200C2BCF4164EB);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(text_label_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_register_host_broadcast_variables(i32* unk_vars_, i32 num_vars_, const CStringPtr& debug_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3E9B2F01C50DF595);
    ctx->Reset();

    ctx->Push(num_vars_);
    ctx->Push(debug_name_.ptr);
    ctx->Push(unk_vars_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_do_transition_to_game(bool* native_return, bool p0_, i32 max_players_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3E9BB38102A589B0);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(max_players_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_set_matchmaking_property_id(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3F52E880AAF6C8CA);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_has_transition_invite_been_acked(bool* native_return, void* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3F9990BF5F22759C);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_network_id_pass_control_in_tutorial(i32 net_id_, bool state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3FA36981311FA4FF);
    ctx->Reset();

    ctx->Push(net_id_);
    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_player_has_headset(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3FB99A8B08D18FD6);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_no_longer_needed(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3FC795691834481D);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_disable_proximity_migration(i32 net_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x407091CF6037118E);
    ctx->Reset();

    ctx->Push(net_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_get_cached_description(CStringPtr& native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x40F7E66472DF3E5C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_access_tunable_int_hash(bool* native_return, i32* value_, u32 tunable_context_, u32 tunable_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x40FCE03E50E8DBE8);
    ctx->Reset();

    ctx->Push(tunable_context_);
    ctx->Push(tunable_name_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_friend_display_name(CStringPtr& native_return, i32 friend_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4164F227D052E293);
    ctx->Reset();

    ctx->Push(friend_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success fade_out_local_player(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x416DBD4CD6ED8DD2);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_set_in_spectator_mode_extended(bool toggle_, u32 player_ped_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x419594E137637120);
    ctx->Reset();

    ctx->Push(toggle_);
    ctx->Push(player_ped_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_can_receive_local_invite(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x421E34C55F125964);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_have_ros_leaderboard_write_priv(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x422D396F80A96547);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_entity_fading(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x422F32CC7E56ABAD);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_was_game_suspended(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4237E822315D8BA9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_in_spectator_mode(bool toggle_, u32 player_ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x423DE3854BB50894);
    ctx->Reset();

    ctx->Push(toggle_);
    ctx->Push(player_ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_friend_online(bool* native_return, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x425A44533437B64D);
    ctx->Reset();

    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success reserve_local_network_mission_vehicles(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x42613035157E4208);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_gamertag_from_handle(CStringPtr& native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x426141162EBE5CDB);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_get_entity_killer_of_player(u32* native_return, u32* weapon_hash_, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x42B2DAA6B596F5F8);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success network_override_clock_rate(i32 ms_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x42BF1D2E723B6D7E);
    ctx->Reset();

    ctx->Push(ms_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_request_cloud_tunables() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x42FB3B532D526E6C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_set_same_team_as_local_player(bool* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4348BFDA56023A2F);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success facebook_can_post_to_facebook(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x43865688AE10F0D7);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_clear_follow_invite(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x439BFDE3CD0610F6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_close_transition_matchmaking() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x43F4DBA69710E01E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_store_network_game_tracking() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x444C4525ECE0A4B9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_check_data_manager_succeeded_for_handle(bool* native_return, void* gamer_handle_, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x44B37CDCAE765AAE);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_quit_mp_to_desktop() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x45A83257ED02D9BC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_is_modifying(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x45E816772E93A9DB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_add_map_entity_to_synchronised_scene(i32 net_scene_, u32 model_hash_, f32 x_, f32 y_, f32 z_, f32 p5_, const CStringPtr& p6_, f32 p7_, f32 p8_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x45F35C0EDC33B03B);
    ctx->Reset();

    ctx->Push(net_scene_);
    ctx->Push(model_hash_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p5_);
    ctx->Push(p6_.ptr);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_do_transition_to_new_game(bool* native_return, bool p0_, i32 max_players_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4665F51EFED00034);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(max_players_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success has_network_time_started(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x46718ACEEDEAFC84);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success trigger_player_crc_hacker_check(bool* native_return, u32 player_, i32 p1_, u32 script_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x46FB3ED415C7641C);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);
    ctx->Push(script_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success remote_cheater_player_detected(bool* native_return, u32 player_, i32 a_, i32 b_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x472841A026D26D8B);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(a_);
    ctx->Push(b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_attach_synchronised_scene_to_entity(i32 net_scene_, u32 entity_, i32 bone_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x478DCBD2A98B705A);
    ctx->Reset();

    ctx->Push(net_scene_);
    ctx->Push(entity_);
    ctx->Push(bone_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_session_set_unique_crew_limit_transition(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4811BBAC21C5FCD5);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success texture_download_release(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x487EB90B98E9FB19);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_clan_get_membership_valid(bool* native_return, i32* p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x48A59CF88D43DF0E);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_clan_get_membership_desc(bool* native_return, void* member_desc_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x48DE78AF2C8885B8);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(member_desc_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_player_get_userid(CStringPtr& native_return, i32* user_i_d_, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4927FC39CD0869A0);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(user_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_add_entity_area(i32* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x494C8FB299290269);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_get_presence_invite_inviter(CStringPtr& native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4962CC4AA2F345B7);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_session_set_matchmaking_group(i32 matchmaking_group_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x49EC8030F5015F8B);
    ctx->Reset();

    ctx->Push(matchmaking_group_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_entity_area_is_occupied(bool* native_return, i32 area_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4A2D4E8BF4265B0F);
    ctx->Reset();

    ctx->Push(area_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_invite_gamers_to_transition(bool* native_return, void* p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4A595C32F77DFF76);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_presence_session_invites_blocked(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4A9FDE3A5A6D0437);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_check_data_manager_for_handle(bool* native_return, void* gamer_handle_, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4AD490AE1536933B);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_entity_ghosted_for_ghost_players(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4BA166079D658ED4);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_start_respawn_search_in_angled_area_for_player(bool* native_return, u32 player_, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 width_, f32 p8_, f32 p9_, f32 p10_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4BA92A18502BCA61);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(width_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(p10_);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_ignore_remote_waypoints() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4C2A9FDC22377075);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cloud_has_request_completed(bool* native_return, i32 request_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4C61B39930D045DA);
    ctx->Reset();

    ctx->Push(request_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_game_mode(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4C9034162368E206);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_get_assisted_damage_of_entity(bool* native_return, i32* p2_, u32 player_, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4CACA84440FA26F6);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(entity_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_did_query_creators_succeed(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4D02279C83BE69FE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_has_control_of_network_id(bool* native_return, i32 net_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4D36070FE0215186);
    ctx->Reset();

    ctx->Push(net_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_has_invited_gamer(bool* native_return, void* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4D86CD31E8976ECE);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_entity_area_have_all_replied(bool* native_return, i32 area_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4DF7CFFF471A7FB1);
    ctx->Reset();

    ctx->Push(area_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_get_content_rating_negative_count(i32* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4E548C0D7AE39FF9);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success reserve_network_mission_objects(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4E5C93BD0C32FBF8);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_can_session_end(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4EEBC3694E49C572);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success cloud_check_availability() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4F18196C8D38768D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_transition_busy(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x520F3282A53D26B7);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_apply_transition_parameter(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x521638ADA1BA0D18);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_set_local_player_sync_look_at(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x524FF0AEFF9C3973);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_highest_reliable_resend_count(i32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x52C1EADAF7B10302);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success ugc_get_top_rated_content(bool* native_return, void* p2_, void* p3_, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5324A0E3E4CE3570);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_get_private_slots(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x53AFD64C6758F2F9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_need_to_start_new_game_but_blocked(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x53C10C8BD774F2C9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_transition_started(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x53FA83401D9C07FE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_player_is_rockstar_dev(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x544ABDDA3B409B6D);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_set_unique_crew_only_crews_transition(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5539C3EBF104A53A);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_permissions_has_gamer_record(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x559EBF901A8C68E0);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_get_content_id(CStringPtr& native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x55AA95F481D694D2);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_is_thread_a_network_script(bool* native_return, i32 thread_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x560B423D73015E77);
    ctx->Reset();

    ctx->Push(thread_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_report_code_tamper() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5626D9D6810730D5);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_player_index_is_cheater(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x565E430DB3B05BEC);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_get_matchmaking_group_free(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x56CE820830EF040B);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_is_friend_in_multiplayer(bool* native_return, const CStringPtr& friend_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x57005C18827F3A28);
    ctx->Reset();

    ctx->Push(friend_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_mark_transition_gamer_as_fully_joined(bool* native_return, void* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5728BB6D63E3FF1D);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success texture_download_has_failed(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5776ED562C134687);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_clan_service_is_valid(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x579CCED0265D4896);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success participant_id_to_int(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x57A3BDDAD8E5AA0A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_is_player_blocked_by_me(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x57AF1F8E27483721);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_override_send_restrictions_all(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x57B192B4D4AD23D5);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_script_status(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x57D158647A6BFABF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_are_handles_the_same(bool* native_return, void* gamer_handle1_, void* gamer_handle2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x57DBA049E110F217);
    ctx->Reset();

    ctx->Push(gamer_handle1_);
    ctx->Push(gamer_handle2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_can_bail(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x580CE4438479CC61);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_clan_get_emblem_txd_name(bool* native_return, void* net_handle_, CStringPtr& txd_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5835D9CD92E83184);
    ctx->Reset();

    ctx->Push(net_handle_);
    char* alt_txd_name_ = save_c_string(""); // creating new empty string because txd_name_ is nullptr
ctx->Push(alt_txd_name_);


    Success result = native->Invoke(ctx);
    if (result) {
        txd_name_.ptr = alt_txd_name_;
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_get_content_creator_gamer_handle(bool* native_return, void* p1_, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x584770794D758C18);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_hash_from_gamer_handle(u32* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x58575AC3CF2CA8EC);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success open_commerce_store(const CStringPtr& p0_, const CStringPtr& p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x58C21165F6545892);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    ctx->Push(p1_.ptr);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_displaynames_from_handles(i32* native_return, i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x58CC181719256197);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_user_old_enough_to_access_store(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x59328EB08C5CEB2B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_has_ros_privilege_played_last_gen(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x593570C289A77688);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success shutdown_and_launch_single_player_game() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x593850C16A36B692);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_check_user_content_privileges(bool* native_return, i32 p0_, i32 p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x595F028698072DD9);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_get_creator_num(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x597F8DBA9B206FC7);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_get_random_int(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x599E4FA1F87EB5FF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_session_set_num_bosses(i32 num_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x59D421683D31835A);
    ctx->Reset();

    ctx->Push(num_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_join_previously_failed_session(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x59DF79317F85A7E0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_get_modify_result(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5A0A3D1A186A5508);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success ugc_release_cached_description(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5A34CD9C3C5BEC44);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_transition_private(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5A6AA44FF8E931E6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_start_respawn_search_for_player(bool* native_return, u32 player_, f32 x_, f32 y_, f32 z_, f32 radius_, f32 p5_, f32 p6_, f32 p7_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5A6FFA2433E2F14C);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_did_get_gamer_status_succeed(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5AE17C6B0134B7F1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_primary_clan_data_success(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5B4F04F19376A0BA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_voice_set_timeout(i32 timeout_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5B8ED3DB018927B1);
    ctx->Reset();

    ctx->Push(timeout_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_clan_download_membership_pending(bool* native_return, void* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5B9E023DC6EBEDC0);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_has_control_of_pickup(bool* native_return, i32 pickup_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5BC9495F0B3B6FA6);
    ctx->Reset();

    ctx->Push(pickup_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_show_psn_ugc_restriction() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5C497525F803486B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_set_antagonistic_to_player(bool toggle_, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5C707A667DF8B9FA);
    ctx->Reset();

    ctx->Push(toggle_);
    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_load_offline_query(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5CAE833B0EE0C500);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_has_received_host_broadcast_data(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5D10B3795F3FC886);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_transition_solo(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5DC577201723960A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_request_cached_description(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5E0165278F6339EE);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success ugc_has_create_finished(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5E24341A7F92A74B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_enable_voice_bandwidth_restriction(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5E3AA4CA2B6FB0EE);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_have_platform_subscription(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5EA784D197556507);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_timeout_time(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5ED0356A0CE3A34F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_have_ros_multiplayer_priv(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5F91D5D0B36AA310);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_text_chat_is_typing(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5FCF4D7069B09026);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_local_player_as_ghost(bool toggle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5FFE9B4144F9712F);
    ctx->Reset();

    ctx->Push(toggle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_session_set_gamemode(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x600F8CB31C7AAB6E);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_have_ros_social_club_priv(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x606E4D3E3CCCF3EB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_check_ros_link_wentdown_not_net(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x60EDD13EB3AC1FF3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_num_transition_non_async_gamers(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x617F49C2668E6155);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success ugc_clear_offline_query() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x61A885D3F7CFEE9A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_network_vehicle_as_ghost(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6274C4712850841E);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_request_invite_confirmed_event(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x62A0296C1BB1CEB3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success facebook_has_post_completed(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x62B9FEC9A11F10EF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_player_fading(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x631DC5DFF4B110E3);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_instance_id_of_this_script(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x638A3A81733086DB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success ugc_has_query_creators_finished(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x63B406D7884BFA95);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_player_in_mp_cutscene(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x63F9EE203C3619F2);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_last_entity_pos_received_over_network(Vector3Wrapper& native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x64D779659BC37B19);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success network_is_privilege_check_in_progress(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x64E5C4CC82847B73);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_finish_broadcasting_data() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x64F62AFB081E260D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_transition_host(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x65042B9774C4435E);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_transition_closed_friends(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6512765E3BE78C50);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_player_is_cheater(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x655B91F1495A9090);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ghost_alpha(i32 alpha_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x658500AE6D723A7E);
    ctx->Reset();

    ctx->Push(alpha_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_skip_radio_warning(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x659CF2EF7F550C4F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_commerce_item_id(CStringPtr& native_return, i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x662635855957C411);
    ctx->Reset();

    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_have_scs_private_msg_priv(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x66B59CFFD78467AF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success are_cutscene_entities_networked(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x66D6A5E9C511214A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_invite_on_call_for_invite_menu(void* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x66F010A4B031A331);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_get_get_by_category(bool* native_return, void* p4_, i32 p0_, i32 p1_, i32 p2_, const CStringPtr& p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x678BB03C1A3BD51E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_.ptr);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_voice_leave(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6793E42BE02B575D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_has_social_club_account(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x67A5589628E0CFF6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_is_live_area_launch_with_content(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x67FC09BC554A75E5);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_in_transition(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x68049AEFF83D8F0A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_release_all_cached_descriptions() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x68103E2247887242);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_set_can_receive_rs_invites(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x68980414688F7F9D);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_query_by_category(bool* native_return, i32 p0_, i32 p1_, i32 p2_, const CStringPtr& p3_, i32 p4_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x692D58DF40657E8C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_.ptr);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success can_register_mission_entities(bool* native_return, i32 ped_amt_, i32 vehicle_amt_, i32 object_amt_, i32 pickup_amt_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x69778E7564BADE6D);
    ctx->Reset();

    ctx->Push(ped_amt_);
    ctx->Push(vehicle_amt_);
    ctx->Push(object_amt_);
    ctx->Push(pickup_amt_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_access_tunable_bool_modification_detection_registration_hash(bool* native_return, bool* value_, u32 context_hash_, u32 name_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x697F508861875B42);
    ctx->Reset();

    ctx->Push(context_hash_);
    ctx->Push(name_hash_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_ignore_spectator_chat_limits_same_team(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6A5D89D7769A40D8);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_allow_invite_process_in_player_switch(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6B07B9CE4D390375);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_transition_host_from_handle(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6B5C83BA3EFE6A10);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_show_chat_restriction_msc(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6BFF5F84102DF80A);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_player_index_from_ped(u32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6C0E2E0125610278);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success network_get_respawn_result_flags(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6C34F1208B8923FD);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_is_in_mp_cutscene(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6CC27C9FA2040220);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_clear_queued_join_request() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6CE50E47F5543D0C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_global_multiplayer_clock(i32* hours_, i32* minutes_, i32* seconds_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6D03BFBD643B2A02);
    ctx->Reset();

    ctx->Push(hours_);
    ctx->Push(minutes_);
    ctx->Push(seconds_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_clear_found_gamers() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6D14CCEE1B40381A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_query_most_recently_created_content(bool* native_return, i32 offset_, i32 count_, const CStringPtr& content_type_name_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6D4CB481FAC835E8);
    ctx->Reset();

    ctx->Push(offset_);
    ctx->Push(count_);
    ctx->Push(content_type_name_.ptr);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_damage_tracker_active_on_network_id(bool* native_return, i32 net_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6E192E33AD436366);
    ctx->Reset();

    ctx->Push(net_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_adding_friend(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6EA101606F6E4D81);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_host(bool* native_return, i32 p0_, i32 max_players_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6F3D4ED9BEE4E61D);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(max_players_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_commerce_item_cat(CStringPtr& native_return, i32 index_, i32 index2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6F44CBF56D79FAC0);
    ctx->Reset();

    ctx->Push(index_);
    ctx->Push(index2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_override_team_restrictions(i32 team_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6F697A66CE78674E);
    ctx->Reset();

    ctx->Push(team_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_handle_valid(bool* native_return, void* gamer_handle_, i32 gamer_handle_size_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6F79B93B0A8E4133);
    ctx->Reset();

    ctx->Push(gamer_handle_size_);
    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_title_update_required(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6FB7BB3607D27FA2);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_net_statistics_info(void* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6FD992C4A1C1B986);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_participant_active(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6FF8FF40B6357D45);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_set_crew_limit_max_members_transition(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x702BC4D605522539);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_get_content_user_name(CStringPtr& native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x703F12425ECA8BF5);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_set_override_spectator_mode(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x70DA3BF8DACD3210);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_get_content_has_player_record(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x70EA8DA57840F9BE);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_entity_concealed(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x71302EC70689052A);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success remove_all_sticky_bombs_from_entity(u32 entity_, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x715135F4B82AC90D);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success fillout_pm_player_list_with_names(bool* native_return, void* p0_, void* p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x716B6DB9D1886106);
    ctx->Reset();

    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_gamer_talking(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x71C33B22606CD88A);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_has_made_invite_decision(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x71DC455F5CD1C2B1);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_do_transition_quickmatch(bool* native_return, i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x71FB0EBCD4915D56);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_currently_selected_gamer_handle_from_invite_menu(bool* native_return, void* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7206F674F2A3B1BB);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_commerce_item_texturename(CStringPtr& native_return, i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x722F5D28B61C5EA8);
    ctx->Reset();

    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_is_network_id_remotely_controlled(bool* native_return, i32 net_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7242F8B741CE1086);
    ctx->Reset();

    ctx->Push(net_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_reset_body_tracker() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x72433699B4E6DD64);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_remove_all_transition_invite() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x726E0375C7A26368);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success can_register_mission_vehicles(bool* native_return, i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7277F1F2E085EE74);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_has_invited_gamer_to_transition(bool* native_return, void* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7284A47B3540E6CF);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_presence_invite_playlist_current(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x728C4CC7920CD102);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_clan_crewinfo_get_string_value(bool* native_return, const CStringPtr& anim_dict_, const CStringPtr& anim_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x729E3401F0430686);
    ctx->Reset();

    ctx->Push(anim_dict_.ptr);
    ctx->Push(anim_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success release_all_commerce_item_images() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x72D0706CD6CCDB58);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_have_user_content_privileges(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x72D918C99BCACC54);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_unregister_networked_entity(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7368E683BB9038D6);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_transition_members(i32* native_return, void* data_, i32 data_count_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x73B000F7FBC55829);
    ctx->Reset();

    ctx->Push(data_count_);
    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_get_activity_player_num(i32* native_return, bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x73E2B500410DA5A2);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_request_to_be_host_of_this_script() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x741A3D8380319A81);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_add_ped_to_synchronised_scene(u32 ped_, i32 net_scene_, const CStringPtr& anim_dict_, const CStringPtr& animn_name_, f32 speed_, f32 speed_multiplier_, i32 duration_, i32 flag_, f32 playback_rate_, i32 p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x742A637471BCECD9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(net_scene_);
    ctx->Push(anim_dict_.ptr);
    ctx->Push(animn_name_.ptr);
    ctx->Push(speed_);
    ctx->Push(speed_multiplier_);
    ctx->Push(duration_);
    ctx->Push(flag_);
    ctx->Push(playback_rate_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_presence_invite_index_by_id(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x742B58F723233ED9);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_is_offline_invite_pending(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x74698374C45701D2);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_is_closed_crew(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x74732C6CA90DA2B4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_currently_selected_gamer_handle_from_invite_menu(bool* native_return, void* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x74881E6BCAE2327C);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_np_unavailable_reason(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x74FB3E29E6D10FA9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_set_activity_spectator(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x75138790B4359A74);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_remove_transition_invite(void* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7524B431B2E6F7EE);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_clan_is_rockstar_clan(bool* native_return, void* clan_desc_, i32 buffer_size_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7543BB439F63792B);
    ctx->Reset();

    ctx->Push(buffer_size_);
    ctx->Push(clan_desc_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_user_premium_access(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x754615490A029508);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success ugc_get_content_rating_count(i32* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x759299C5BB31D2A9);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_local_player_visible_locally(bool b_include_players_vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7619364C82D3BF14);
    ctx->Reset();

    ctx->Push(b_include_players_vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_get_content_total(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x769951E2455E2EB5);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success reserve_network_mission_vehicles(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x76B02E21ED27A469);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_network_id_visible_in_cutscene_remain_hack(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x76B3F29D3F967692);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_has_social_networking_sharing_priv(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x76BF03FADBF154F5);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_has_follow_invite(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x76D9B976C4C09FDE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_player_get_name(CStringPtr& native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7718D2E2060837D2);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success use_player_colour_instead_of_team_colour(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x77758139EC9B66C7);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_showing_system_ui_or_recently_requested_upsell(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7788DFE15016A182);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_conneted_to_np_presence(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7808619F31FF22DB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_check_online_privileges(bool* native_return, i32 p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x78321BEA235FD8CD);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_remove_invalid_object_model(u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x791EDB5803B2F468);
    ctx->Reset();

    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_did_modify_succeed(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x793FF272D5B365F4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_current_data_manager_handle(bool* native_return, void* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x796A87B3B68D1F3D);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success reserve_local_network_mission_objects(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x797F9C5E661D920E);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_destroyer_of_network_id(u32* native_return, u32* weapon_hash_, i32 net_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7A1ADEEF01740A24);
    ctx->Reset();

    ctx->Push(net_id_);
    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_network_time(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7A5487FE9FAA6B48);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_set_script_ready_for_events(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7AC752103856FB20);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_create_synchronised_scene(i32* native_return, f32 x_, f32 y_, f32 z_, f32 x_rot_, f32 y_rot_, f32 z_rot_, i32 rotation_order_, bool use_occlusion_portal_, bool looped_, f32 p9_, f32 anim_time_, f32 p11_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7CD6BC4C2BBDD526);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(x_rot_);
    ctx->Push(y_rot_);
    ctx->Push(z_rot_);
    ctx->Push(rotation_order_);
    ctx->Push(use_occlusion_portal_);
    ctx->Push(looped_);
    ctx->Push(p9_);
    ctx->Push(anim_time_);
    ctx->Push(p11_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success ugc_get_content_description_hash(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7CF0448787B23758);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_set_look_at_talkers(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7D395EA61622E116);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_bone_id_of_fatal_hit(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7DB53B37A2F211A0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_is_inactive_profile(bool* native_return, void* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7E58745504313A2E);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_can_enter_multiplayer(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7E782A910C362C25);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_entity_in_ghost_collision(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7EF7649B64D7FF10);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_add_invalid_object_model(u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7F562DBC212E81F9);
    ctx->Reset();

    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_session_voice_respond_to_request(bool p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7F8413B7FC2AA6B9);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_get_content_has_hi_res_photo(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7FCC39C46C3C03BD);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_request_content_data_from_params(i32* native_return, const CStringPtr& content_type_name_, const CStringPtr& content_id_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7FD2990AF016795E);
    ctx->Reset();

    ctx->Push(content_type_name_.ptr);
    ctx->Push(content_id_.ptr);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success can_register_mission_objects(bool* native_return, i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x800DD4721A8B008B);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_have_ros_banned_priv(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8020A73847E0CA7D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_cloud_background_script_request_pending(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8132C0EB8B2B3293);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_get_get_by_content_id(bool* native_return, const CStringPtr& content_id_, const CStringPtr& content_type_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x815E5E3073DA1D67);
    ctx->Reset();

    ctx->Push(content_id_.ptr);
    ctx->Push(content_type_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_entity_get_object_id(i32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x815F18AD865F057F);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_get_player_owns_waypoint(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x82377B65E943F72D);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_host_player_index(u32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8251FB94DC4FDFC8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success network_should_show_strict_nat_warning(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x82A2B386716608F1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_assisted_kill_of_entity(bool* native_return, i32* p2_, u32 player_, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x83660B734994124D);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(entity_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_network_enable_high_speed_edge_fall_detection(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x838DA0936A24ED4D);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_host_of_this_script(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x83CD99A1E6061AB5);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_check_communication_privileges(bool* native_return, i32 p0_, i32 p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x83F28CE49FBBFFBA);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_show_account_upgrade_ui() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x83FE8D7229593017);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_talker_proximity(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x84F0F13120B4E098);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success network_has_valid_ros_credentials(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x85443FF4C328F53B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_is_in_voice_session(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x855BC38818F6F684);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_show_profile_ui(void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x859ED1CEA343FCA8);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_queue_gamer_for_status(bool* native_return, void* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x85A0EF54A500882C);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_does_tunable_exist(bool* native_return, const CStringPtr& tunable_context_, const CStringPtr& tunable_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x85E5F8B9B898B20A);
    ctx->Reset();

    ctx->Push(tunable_context_.ptr);
    ctx->Push(tunable_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_clear_get_gamer_status() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x86E0660E4F5C956D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_request_control_of_door(bool* native_return, i32 door_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x870DDFD5A4A796E4);
    ctx->Reset();

    ctx->Push(door_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_get_content_rating_positive_count(i32* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x87E5C46C187FE0AE);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_is_friend_handle_online(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x87EB7A3FFCB314DB);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_am_i_blocked_by_player(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x87F395D957D4353D);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_presence_invite_is_tournament(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8806CEBFABD3CE05);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_store_available_to_user(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x883D79C4071E18B3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_is_launch_from_live_area(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x88B588B41FF7868E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_network_time_accurate(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x89023FBBF9200E9F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_trigger_damage_event_for_zero_damage(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x890E2C5ABED7236D);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_local_player_invincible(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8A8694B48715B000);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_content_to_load_type(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8B0C2964BA471961);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_transition_start(bool* native_return, i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8B4FFC790CA131EF);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_set_matchmaking_group_max(i32 player_type_, i32 player_count_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8B6A4DD0AF9CE215);
    ctx->Reset();

    ctx->Push(player_type_);
    ctx->Push(player_count_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_status_of_texture_download(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8BD6C6DEA20E82C6);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_access_tunable_int(bool* native_return, i32* value_, const CStringPtr& tunable_context_, const CStringPtr& tunable_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8BE1146DFD5D4468);
    ctx->Reset();

    ctx->Push(tunable_context_.ptr);
    ctx->Push(tunable_name_.ptr);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_vehicle_driven_in_test_drive(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8C70252FC40F320B);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_player_muted_by_me(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8C71288AE68EDE39);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_get_content_created_by_local_player(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8C8D2739BA44AF0F);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_refreshing_ros_credentials(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8D11E61A4ABF49CC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_host(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8DB296B814EDDA07);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_chatting_in_platform_party(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8DE9945BCC9AEC52);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_add_friend(bool* native_return, void* gamer_handle_, const CStringPtr& message_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8E02D73914064223);
    ctx->Reset();

    ctx->Push(message_.ptr);
    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_spectator_to_non_spectator_text_chat(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8EF52ACAECC51D9C);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_can_communicate_with_gamer(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8F5D1AD832AEB06C);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_using_online_promotion(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x906CA41A4B74ECA4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success participant_id(u32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x90986E8876CE0A83);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success network_is_player_concealed(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x919B3C98ED8292F9);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_has_ros_privilege_special_edition_content(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x91B87C55093DE351);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_request_cloud_background_scripts(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x924426BFFD82E915);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_remove_entity_area(bool* native_return, i32 area_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x93CF869BAA0C4874);
    ctx->Reset();

    ctx->Push(area_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_player_connected(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x93DC1BE4E1ABE9D1);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_did_get_succeed(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x941E5306BCD7C2C7);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_minimum_rank_for_mission(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x94538037EE44F5CF);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_skip_radio_reset_next_close() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9465E683B12D3F6B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_getting_gamer_status(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x94A8394D150B013A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_do_crew_matchmaking(bool* native_return, i32 crew_id_, i32 p1_, i32 p2_, i32 max_players_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x94BC51E9449D917F);
    ctx->Reset();

    ctx->Push(crew_id_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(max_players_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_bail(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x95914459A87EBA28);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_entity_use_high_precision_rotation(i32 net_id_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x95BAF97C82464629);
    ctx->Reset();

    ctx->Push(net_id_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_age_group(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9614B71F8ADB982B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_remote_player_visible_in_cutscene(u32 player_, bool locally_visible_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x96320E6549DAE7B4);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(locally_visible_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_store_enabled(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9641A9FF718E9C5E);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_service_event_arguments() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x966DD84FB6A46017);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_access_tunable_float_hash(bool* native_return, f32* value_, u32 tunable_context_, u32 tunable_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x972BC203BBC4C4D5);
    ctx->Reset();

    ctx->Push(tunable_context_);
    ctx->Push(tunable_name_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_transition_block_join_requests(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x973D76AA760A6CB6);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_multiplayer_disabled(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9747292807126EDA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_leave_ped_behind_before_warp(u32 player_, f32 x_, f32 y_, f32 z_, bool p4_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9769F811D1785B03);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_get_most_recently_played_content(bool* native_return, void* p2_, void* p3_, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x97A770BEEF227E2B);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_override_send_restrictions(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x97DD4C5944CC2E6A);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_get_content_has_player_bookmarked(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x993CBE59D350D225);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_apply_cached_player_head_blend_data(bool* native_return, u32 ped_, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x99B72C7ABDE5C910);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success obj_to_net(i32* native_return, u32 object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x99BFDC94A603E541);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_start_synchronised_scene(i32 net_scene_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9A1B3FCDB36C8697);
    ctx->Reset();

    ctx->Push(net_scene_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_cloud_available(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9A4CF4F48AD77302);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_cloud_time_as_int(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9A73240B49945C76);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_get_primary_clan_data_clear(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9AA46BADAD0E27ED);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_has_player_started_transition(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9AC9CCBFA8C29795);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_query_my_content(bool* native_return, void* p2_, i32 p0_, i32 p1_, i32 p3_, i32 p4_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9BF438815F5D96EA);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_voice_host(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9C1556705F864230);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_do_transition_quickmatch_with_group(bool* native_return, void* p4_, i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p5_, i32 p6_, i32 p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9C4AB58491FDC98A);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_in_mp_cutscene(bool p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9CA5DE655269FEC4);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_join_transition(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D060B08CD63321A);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_activity_spectator_max(i32 max_spectators_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D277B76D1D12222);
    ctx->Reset();

    ctx->Push(max_spectators_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_script_active(bool* native_return, const CStringPtr& script_name_, i32 instance_id_, bool p2_, i32 position_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D40DF90FAD26098);
    ctx->Reset();

    ctx->Push(script_name_.ptr);
    ctx->Push(instance_id_);
    ctx->Push(p2_);
    ctx->Push(position_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_am_i_muted_by_player(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D6981DFC91A8604);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_network_id_can_be_reassigned(i32 net_id_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D724B400A7E8FFC);
    ctx->Reset();

    ctx->Push(net_id_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_transition_to_game(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D7696D8F4FA6CB7);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_proximity_affects_team(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D7AFCBF21C51712);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_invite_gamers(bool* native_return, void* p0_, void* p2_, i32 p1_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D80CD1D0E6327DE);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(p3_);
    ctx->Push(p0_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_found_gamer(bool* native_return, void* p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9DCFF2AFB68B3476);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_disable_invincible_flashing(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9DD368BF06983221);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_session_started(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9DE624D2FC4B603F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_are_players_in_same_tutorial_session(bool* native_return, u32 player_, i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9DE986FC9A87C474);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_time_as_string(CStringPtr& native_return, i32 time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9E23B1777A927DAD);
    ctx->Reset();

    ctx->Push(time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_do_transition_to_new_freemode(bool* native_return, void* p0_, i32 p1_, i32 players_, bool p3_, bool p4_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9E80A5BA8109F974);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(players_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success shutdown_and_load_most_recent_save(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9ECA15ADFE141431);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_gamertag_from_handle_start(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9F0C0A981D73FA56);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_get_crew_content(bool* native_return, void* p4_, i32 p0_, i32 p1_, i32 p2_, const CStringPtr& p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9F6E2821885CAEE2);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_.ptr);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_clan_join(bool* native_return, i32 clan_desc_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9FAAA4F4FC71F87F);
    ctx->Reset();

    ctx->Push(clan_desc_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_is_creating(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9FEDF86898F100E9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_end(bool* native_return, bool p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA02E59562D711006);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_join_group_activity(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA06509A691D12BE4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_suppress_invite(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA0682D67EF1FBA3D);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_do_transition_quickmatch_async(bool* native_return, i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA091A5E44F0072E5);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_have_ros_create_ticket_priv(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA0AD7E2AF5349F61);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_logged_in_to_psn(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA0FA4EC6A05DA44E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_handle_from_member_id(void* gamer_handle_, const CStringPtr& member_id_, i32 gamer_handle_size_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA0FD21BED61E5C4C);
    ctx->Reset();

    ctx->Push(member_id_.ptr);
    ctx->Push(gamer_handle_size_);
    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_network_id_from_entity(i32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA11700682F3AD45C);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success trigger_tuning_crc_hacker_check(bool* native_return, u32 player_, const CStringPtr& p1_, const CStringPtr& p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA12D3A5A3753CC23);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_.ptr);
    ctx->Push(p2_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_clan_is_emblem_ready(bool* native_return, void* p1_, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA134777FF7F33331);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_can_text_chat_with_gamer(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA150A4F065806B1F);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_network_id_owned_by_participant(bool* native_return, i32 net_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA1607996431332DF);
    ctx->Reset();

    ctx->Push(net_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_num_found_gamers(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA1B043EE79A916FB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success ugc_clear_modify_result() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA1E5E0204A6FCC70);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_session_force_cancel_invite() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA29177F7703B5644);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_network_vehicle_max_position_delta_multiplier(u32 vehicle_, f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA2A707979FE754DC);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_time_difference(i32* native_return, i32 time_a_, i32 time_b_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA2C6FC031D46FFF0);
    ctx->Reset();

    ctx->Push(time_a_);
    ctx->Push(time_b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_set_do_not_launch_from_join_as_migrated_host(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA2E9C1AB8A92E8CD);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_commerce_item_image(bool* native_return, i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA2F952104FC6DD4B);
    ctx->Reset();

    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_num_connected_players(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA4A79DD2D9600654);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_add_ped_to_synchronised_scene_with_ik(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_, i32 p6_, i32 p7_, i32 p8_, i32 p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA5EAFE473E45C442);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_host_transition(bool* native_return, i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, bool p5_, bool p6_, i32 p7_, i32 p8_, i32 p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA60BB5CE242BB254);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_request_control_of_network_id(bool* native_return, i32 net_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA670B3662FAFFBD0);
    ctx->Reset();

    ctx->Push(net_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_network_id_visible_in_cutscene(i32 net_id_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA6928482543022B4);
    ctx->Reset();

    ctx->Push(net_id_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_has_ros_privilege(bool* native_return, i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA699957E60D80214);
    ctx->Reset();

    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_max_num_participants(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA6C90FBC38E395EE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_set_custom_arena_ball_params(i32 net_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA6FCECCF4721D679);
    ctx->Reset();

    ctx->Push(net_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_max_num_network_pickups(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA72835064DD63E4C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_session_block_join_requests(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA73667484D7037C3);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success facebook_did_post_succeed(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA75E2B6733DA5142);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_get_most_recently_created_content(bool* native_return, void* p2_, void* p3_, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA7862BC5ED1DFD7E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_get_content_category(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA7BAB11E7C9C6C5A);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_remote_player_as_ghost(u32 player_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA7C511FA1C5BDA38);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_override_coords_and_heading(u32 entity_, f32 x_, f32 y_, f32 z_, f32 heading_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA7E30DE9272B6D49);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(heading_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_network_id_always_exists_for_player(i32 net_id_, u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA8A024587329F36A);
    ctx->Reset();

    ctx->Push(net_id_);
    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_platform_subscription_check_pending(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA8ACB6459542A8C8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_get_content_is_verified(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA9240A96C74CCA13);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_clan_download_membership(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA989044E70010ABE);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_predicted_velocity(Vector3Wrapper& native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA5FAFCD2C5F5E47);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success network_access_tunable_bool(bool* native_return, const CStringPtr& tunable_context_, const CStringPtr& tunable_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA6A47A573ABB75A);
    ctx->Reset();

    ctx->Push(tunable_context_.ptr);
    ctx->Push(tunable_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_current_spawn_location_option(u32 mp_setting_spawn_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA6D5451DC3448B6);
    ctx->Reset();

    ctx->Push(mp_setting_spawn_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_num_reserved_mission_objects(i32* native_return, bool p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA81B5F10BC43AC2);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_network_cutscene_entities(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAAA553E7DD28A457);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_clan_get_membership_count(i32* native_return, i32* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAAB11F6C4ADBC2C1);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_session_voice_connect_to_player(void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xABD5E88B8A2D3DB2);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_has_pending_invite(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAC8C7B9B88C4A668);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success convert_posix_time(void* time_structure_, i32 posix_time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAC97AF97FA68E5D5);
    ctx->Reset();

    ctx->Push(posix_time_);
    ctx->Push(time_structure_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_player_on_blocklist(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAD4326FCA30D62F8);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_in_tutorial_session(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xADA24309FE08DACF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_mute_count_for_player(f32* p1_, f32* p2_, u32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xADB57E5B663CCA8B);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_get_content_is_using_sc_nickname(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAEAB987727C5A8A4);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_dump_net_if_config() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAEDF1BC1C133D6E3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_have_communication_privileges(bool* native_return, i32 p0_, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAEEF48CDF5B6CE7C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_can_access_multiplayer(bool* native_return, i32* loading_state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAF50DA1A3F8B1BA4);
    ctx->Reset();

    ctx->Push(loading_state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_override_transition_chat(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAF66059A131AA269);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_max_friends(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAFEBB0D5D8F687D2);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_gamertag_from_handle_pending(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB071E27958EF4CF0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_has_entity_been_registered_with_this_thread(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB07D3185E11657A5);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_clan_player_is_active(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB124B57F571D8F18);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_retain_activity_group() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB13E88E655E5A3BC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_damage_tracker_active_on_player(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB2092A1EAA7FD45F);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_script_automuted(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB309EBEA797E001F);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_waiting_pop_clear_tutorial_session(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB37E4E6A2388CA7B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_clan_any_download_membership_pending(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB3F64A6A91432477);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_commerce_item_name(CStringPtr& native_return, i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB4271092CA7EDF48);
    ctx->Reset();

    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_session_change_slots(i32 slots_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB4AB419E0D86ACAE);
    ctx->Reset();

    ctx->Push(slots_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success veh_to_net(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB4C94523F023419C);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_get_primary_clan_data_pending(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB5074DB804E28CE7);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_can_view_gamer_user_content(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB57A49545BA53CE7);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_is_voice_session_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB5D3453C98456528);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success trigger_commerce_data_fetch(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB606E6CC59664972);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reserve_network_mission_peds(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB60FEBA45333D36F);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_request_control_of_entity(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB69317BF5E782347);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_get_creators_by_user_id(bool* native_return, void* p0_, void* p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB746D20B17F2A229);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_force_local_player_scar_sync() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB7C7F6AD6424304B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_get_get_by_content_ids(bool* native_return, void* data_, i32 data_count_, const CStringPtr& content_type_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB8322EEB38BE7C26);
    ctx->Reset();

    ctx->Push(data_count_);
    ctx->Push(content_type_name_.ptr);
    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_player_active(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB8DFD30D6973E135);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_leave(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB9351A07A0D458B1);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_host_friends_only(bool* native_return, i32 p0_, i32 max_players_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB9CFD27A5D578D83);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(max_players_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_is_visible(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA416D68C631496A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_object_scope_distance(u32 object_, f32 range_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA7F0B77D80A4EB7);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(range_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_clear_query_results() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA96394A0EECFA65);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_are_social_club_policies_current(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA9775570DB788CF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_voice_active(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBABEC9E69A91C57B);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_friend_index_online(bool* native_return, i32 friend_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBAD8F2A42B844821);
    ctx->Reset();

    ctx->Push(friend_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_get_content_path(CStringPtr& native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBAF6BABF9E7CCC13);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_clan_remote_memberships_are_in_cache(bool* native_return, i32* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBB6E6FEE99D866B2);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_conceal_player(u32 player_, bool toggle_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBBDF066252829606);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_hash_from_player_handle(u32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBC1D768F2F5D6C05);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success can_register_mission_peds(bool* native_return, i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBCBF4FEF9FA5D781);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_cache_local_player_head_blend_data() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBD0BE0BFC927EAC1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_np_available(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBD545D44CCE70597);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_is_displaying_invite_confirmation(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBDB6F89C729CF388);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_to_ped(u32* native_return, i32 net_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBDCD95FC216A8B3E);
    ctx->Reset();

    ctx->Push(net_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success network_session_do_activity_quickmatch(bool* native_return, i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBE3E347A87ACEB82);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success activate_damage_tracker_on_player(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBEC0816FF5ACBCDA);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_get_content_name(CStringPtr& native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBF09786A7FCAB582);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_leave_ped_behind_before_cutscene(u32 player_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBF22E0F32968E967);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success net_to_ent(u32* native_return, i32 net_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBFFEAB45A9A9094A);
    ctx->Reset();

    ctx->Push(net_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success ugc_get_root_content_id(CStringPtr& native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC0173D6BFF4E0348);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_is_door_networked(bool* native_return, u32 door_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC01E93FAC20C3346);
    ctx->Reset();

    ctx->Push(door_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_primary_clan_data_new(bool* native_return, void* p0_, void* p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC080FF658B2E41DA);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_push_to_talk_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC0D2AF00BCC234CA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_send_transition_invite_via_presence(bool* native_return, void* gamer_handle_, const CStringPtr& p1_, i32 data_count_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC116FF9B4D488291);
    ctx->Reset();

    ctx->Push(p1_.ptr);
    ctx->Push(data_count_);
    ctx->Push(p3_);
    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_ugc_nav(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC1447451DDB512F0);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_session_validate_join(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC19F6C8E7865A6FF);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_has_ros_privilege_end_date(bool* native_return, i32* ban_type_, void* time_data_, i32 privilege_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC22912B1D85F26B1);
    ctx->Reset();

    ctx->Push(privilege_);
    ctx->Push(ban_type_);
    ctx->Push(time_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_stop_synchronised_scene(i32 net_scene_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC254481A4574CB2F);
    ctx->Reset();

    ctx->Push(net_scene_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_clear_property_id() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC2B82527CA77053E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_clan_has_crewinfo_metadata_been_received(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC32EA7A2F6CA7557);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_transition_add_stage(bool* native_return, u32 hash_, i32 p1_, i32 p2_, i32 state_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC3BFED92026A2AAD);
    ctx->Reset();

    ctx->Push(hash_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(state_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_send_invite_via_presence(bool* native_return, void* gamer_handle_, const CStringPtr& p1_, i32 data_count_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC3C7A6AFDB244624);
    ctx->Reset();

    ctx->Push(p1_.ptr);
    ctx->Push(data_count_);
    ctx->Push(p3_);
    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_has_confirmed_invite(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC42DD763159F3461);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_destroyer_of_entity(u32* native_return, u32* weapon_hash_, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC434133D9BA52777);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success network_disable_leave_remote_ped_behind(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC505036A35AFD01B);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_get_create_content_id(CStringPtr& native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC55A0B40FFB1ED23);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_is_transition_leave_postponed(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC571D0E77D8BBC29);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success cloud_delete_member_file(i32* native_return, const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC64DED7EF0D2FE37);
    ctx->Reset();

    ctx->Push(p0_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_session_join_invite() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC6F8AB8A4189CF3A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_set_task_cutscene_inscope_multipler(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC6FCEE21C6FCEE21);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_query_by_content_ids(bool* native_return, void* data_, i32 count_, bool latest_version_, const CStringPtr& content_type_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC7397A83F7A2A462);
    ctx->Reset();

    ctx->Push(count_);
    ctx->Push(latest_version_);
    ctx->Push(content_type_name_.ptr);
    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_try_access_tunable_bool_hash(bool* native_return, u32 tunable_context_, u32 tunable_name_, bool default_value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC7420099936CE286);
    ctx->Reset();

    ctx->Push(tunable_context_);
    ctx->Push(tunable_name_);
    ctx->Push(default_value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_host_single_player(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC74C33FCA52856D5);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_entity_is_networked(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC7827959479DCC78);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success cloud_is_checking_availability(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC7ABAC5DE675EE3B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_host_of_this_script(u32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC7B4D79B01FA7A5C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_max_num_network_objects(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC7BE335216B5EC7C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_member_id_from_gamer_handle(CStringPtr& native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC82630132081BB6F);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success ugc_was_query_force_cancelled(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC87E740D9F3872CC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_action_follow_invite(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC88156EBB786F8D5);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_clan_get_membership(bool* native_return, i32* p0_, void* clan_membership_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC8BC2011F67B3411);
    ctx->Reset();

    ctx->Push(p2_);
    ctx->Push(p0_);
    ctx->Push(clan_membership_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_can_set_waypoint(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC927EC229934AF60);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_force_local_use_of_synced_scene_camera(i32 net_scene_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC9B43A33D09CADA7);
    ctx->Reset();

    ctx->Push(net_scene_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_set_gamer_invited_to_transition(void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCA2C8073411ECDB6);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_disable_voice_bandwidth_restriction(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCA575C391FEA25CC);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_skip_radio_reset_next_open() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCA59CCAE5D01E4CE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_commerce_product_price(CStringPtr& native_return, i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCA94551B50B4932C);
    ctx->Reset();

    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_is_in_session(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCA97246103B63917);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_add_active_matchmaking_group(i32 group_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCAE55F48D3D7875C);
    ctx->Reset();

    ctx->Push(group_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_num_created_mission_peds(i32* native_return, bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCB215C4B56A7FAE7);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_time_less_than(bool* native_return, i32 time_a_, i32 time_b_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCB2CF5148012C8D0);
    ctx->Reset();

    ctx->Push(time_a_);
    ctx->Push(time_b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_has_control_of_door(bool* native_return, u32 door_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCB3C68ADB06195DF);
    ctx->Reset();

    ctx->Push(door_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success fillout_pm_player_list(bool* native_return, void* gamer_handle_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCBBD7C4991B64809);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_talker_proximity(f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCBF12D65F95AD686);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_has_view_gamer_user_content_result(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCCA4318E1AB03F1F);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_get_content_user_id(CStringPtr& native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCD67AD041A394C9C);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_use_logarithmic_blending_this_frame(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCD71A4ECAB22709E);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_entity_from_network_id(u32* native_return, i32 net_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCE4E5D9B0A4FF560);
    ctx->Reset();

    ctx->Push(net_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success network_get_player_from_gamer_handle(u32* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCE5F689CF5A0A49D);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success network_is_gamer_muted_by_me(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCE60DE011B6C7978);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_primary_clan_data_start(bool* native_return, void* p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCE86D8191B762107);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_is_private(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCEF70AA5B3F89BA1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_num_presence_invites(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCEFA968912D0F78D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_num_reserved_mission_vehicles(i32* native_return, bool p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCF3A965906452031);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_get_total_num_players(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCF61D4B4702EE9EB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_add_synchronised_scene_camera(i32 net_scene_, const CStringPtr& anim_dict_, const CStringPtr& anim_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCF8BD3B0BD6D42D7);
    ctx->Reset();

    ctx->Push(net_scene_);
    ctx->Push(anim_dict_.ptr);
    ctx->Push(anim_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_get_content_updated_date(void* p1_, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCFD115B373C0DF63);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_remain_in_game_chat(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCFEB46DCD7D8D5EB);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_block_join_queue_invites(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCFEB8AF24FC1D0BB);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_set_deleted(bool* native_return, void* p0_, bool p1_, const CStringPtr& p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD05D1A6C74DA3498);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(p2_.ptr);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_transition_visibility_locked(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD0A484CB2F829FBE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_end_tutorial_session() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD0AFAFF5A51D72F7);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_local_player_visible_in_cutscene(bool p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD1065D68947E7B6E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_try_to_set_this_script_is_network_script(bool* native_return, i32 p0_, bool p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD1110739EEADB592);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_leave_transition(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD23A1A815D21DB19);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_is_awaiting_invite_response(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD313DE83394AF134);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_number_body_tracker_hits(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD38C4A6D047C019D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_get_presence_invite_playlist_length(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD39B3FFF8FFDD5BF);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_get_average_latency(f32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD414BE129BB81B32);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success activate_damage_tracker_on_network_id(i32 net_i_d_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD45B1FFCCD52FF19);
    ctx->Reset();

    ctx->Push(net_i_d_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_handle_from_friend(void* gamer_handle_, i32 friend_index_, i32 gamer_handle_size_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD45CB817D7E177D2);
    ctx->Reset();

    ctx->Push(friend_index_);
    ctx->Push(gamer_handle_size_);
    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_is_getting(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD53ACDBEF24A46E8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_get_bookmarked_content(bool* native_return, void* p3_, i32 p0_, i32 p1_, const CStringPtr& p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD5A4B59980401588);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_.ptr);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_team_only_chat(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD5B4883AC32F24C3);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_displaynames_from_handles_start(i32* native_return, void* p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD66C9E72B3CC4982);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_session_get_kick_vote(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD6D09A6F32F49EF1);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_register_high_frequency_player_broadcast_variables(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD6D7478CA62B8D41);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_invert_ghosting(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD7B6C73CAD419BCF);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_clock_time_overridden(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD7C95D322FF57522);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_sphere_visible_to_another_machine(bool* native_return, f32 p0_, f32 p1_, f32 p2_, f32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD82CF8E64C8729D8);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_entity_can_blend(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD830567D88A1E873);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_session_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD83C2B94E7508980);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success net_to_obj(u32* native_return, i32 net_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD8515F5FEA14CB3F);
    ctx->Reset();

    ctx->Push(net_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success network_clear_clock_time_override() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD972DF67326F966E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_script_active_by_hash(bool* native_return, u32 script_hash_, i32 p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDA7DE67F5FE5EE13);
    ctx->Reset();

    ctx->Push(script_hash_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_player_account_id(i32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDB663CC9FF3407A9);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_apply_voice_proximity_override(f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDBD2056652689917);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_sphere_visible_to_player(bool* native_return, i32 p0_, f32 p1_, f32 p2_, f32 p3_, f32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDC3A310219E5DA62);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success facebook_post_create_character(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDC48473142545431);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_handle_from_user_id(void* gamer_handle_, const CStringPtr& user_id_, i32 gamer_handle_size_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDCD51DD8F87AEC5C);
    ctx->Reset();

    ctx->Push(user_id_.ptr);
    ctx->Push(gamer_handle_size_);
    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_network_vehicle_running_respot_timer(bool* native_return, i32 network_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDD7CEF5B3A4DA8A6);
    ctx->Reset();

    ctx->Push(network_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_finding_gamers(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDDDF64C91BFCF0AA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_override_receive_restrictions(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDDF73E2B1FEC5AB4);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_time_more_than(bool* native_return, i32 time_a_, i32 time_b_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDE350F8651E4346C);
    ctx->Reset();

    ctx->Push(time_a_);
    ctx->Push(time_b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_fade_out_entity(u32 entity_, bool normal_, bool slow_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDE564951F95E09ED);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(normal_);
    ctx->Push(slow_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_resolve_privilege_user_content(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDE9225854F37BF72);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_start_user_content_permissions_check(i32* native_return, void* net_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDEB2B99A1AF1A2A6);
    ctx->Reset();

    ctx->Push(net_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_am_i_muted_by_gamer(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDF02A2C93F1F26DA);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_presence_invite_id(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDFF09646E12EC386);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_session_get_host_aim_preference(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDFFA5BE8381C3314);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_entity_visible_in_cutscene(i32 p0_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE0031D3C8F36AB82);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_clear_voice_channel() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE036A705F989E049);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_network_id_exists_on_all_machines(i32 net_id_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE05E81A888FA63C8);
    ctx->Reset();

    ctx->Push(net_id_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_get_content_num(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE0A6138401BCB837);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_get_friend_name(CStringPtr& native_return, i32 friend_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE11EBBB2A783FE8B);
    ctx->Reset();

    ctx->Push(friend_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success set_entity_locally_invisible(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE135A9FF3F5D05D8);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success can_register_mission_doors(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE16AA70CE9BEEDC3);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success refresh_player_list_stats(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE26CCFF8094D8C74);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_random_int_ranged(i32* native_return, i32 range_start_, i32 range_end_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE30CF56F1EFA5F43);
    ctx->Reset();

    ctx->Push(range_start_);
    ctx->Push(range_end_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_reserved_mission_entities_in_area(void* out1_, void* out2_, void* out3_, f32 x_, f32 y_, f32 z_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE42D626EEC94E5D9);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p3_);
    ctx->Push(out1_);
    ctx->Push(out2_);
    ctx->Push(out3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_does_tunable_exist_hash(bool* native_return, u32 tunable_context_, u32 tunable_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE4E53E1419D81127);
    ctx->Reset();

    ctx->Push(tunable_context_);
    ctx->Push(tunable_name_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_find_gamers_in_crew(bool* native_return, i32 crew_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE532D6811B3A4D2A);
    ctx->Reset();

    ctx->Push(crew_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_access_tunable_float(bool* native_return, f32* value_, const CStringPtr& tunable_context_, const CStringPtr& tunable_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE5608CA7BC163A5F);
    ctx->Reset();

    ctx->Push(tunable_context_.ptr);
    ctx->Push(tunable_name_.ptr);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_get_inviter(void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE57397B4A3429DD0);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_local_player_invisible_locally(bool b_include_players_vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE5F773C1A1D9D168);
    ctx->Reset();

    ctx->Push(b_include_players_vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_entity_area_does_exist(bool* native_return, i32 area_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE64A3CA08DFA37A9);
    ctx->Reset();

    ctx->Push(area_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_apply_ped_scar_data(u32 ped_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE66C690248F11150);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_enable_extra_vehicle_orientation_blend_checks(i32 net_id_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE6717E652B8C8D8A);
    ctx->Reset();

    ctx->Push(net_id_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_override_clock_time(i32 hours_, i32 minutes_, i32 seconds_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE679E3E06E363892);
    ctx->Reset();

    ctx->Push(hours_);
    ctx->Push(minutes_);
    ctx->Push(seconds_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_player_in_cutscene(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE73092F4157CD126);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_get_local_handle(void* gamer_handle_, i32 gamer_handle_size_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE86051786B66CD8E);
    ctx->Reset();

    ctx->Push(gamer_handle_size_);
    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_has_headset(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE870F9F1F7B4F1FA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_gamer_blocked_by_me(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE944C4F5AF1B5883);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_cancel_query() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE9B99B6853181409);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_commerce_data_valid(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEA14EEF5B7CD2C30);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_access_tunable_bool_hash(bool* native_return, u32 tunable_context_, u32 tunable_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEA16B69D93D71A45);
    ctx->Reset();

    ctx->Push(tunable_context_);
    ctx->Push(tunable_name_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_resurrect_local_player(f32 x_, f32 y_, f32 z_, f32 heading_, bool p4_, bool changetime_, bool p6_, i32 p7_, i32 p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEA23C49EAA83ACFB);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(heading_);
    ctx->Push(p4_);
    ctx->Push(changetime_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_register_high_frequency_host_broadcast_variables(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEA8C0DDB10E2822A);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_bail_transition(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEAA572036990CD1B);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_np_pending(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEBCAB9E5048434F4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_apply_transition_parameter_string(i32 p0_, const CStringPtr& string_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEBEFC2E77084F599);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(string_.ptr);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_remove_and_cancel_all_invites() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEBF8284D8CADEB53);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_has_description_request_finished(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEBFA8D50ADDC54C4);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_network_vehicle_respot_timer(i32 net_id_, i32 time_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEC51713AB6EC36E8);
    ctx->Reset();

    ctx->Push(net_id_);
    ctx->Push(time_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success bad_sport_player_left_detected(bool* native_return, void* gamer_handle_, i32 event_, i32 amount_received_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEC5E3AF5289DCA81);
    ctx->Reset();

    ctx->Push(event_);
    ctx->Push(amount_received_);
    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_host_closed(bool* native_return, i32 p0_, i32 max_players_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xED34C0C02C098BB7);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(max_players_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_get_query_result(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEDF7F927136C224B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_clan_player_get_desc(bool* native_return, void* clan_desc_, void* gamer_handle_, i32 buffer_size_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEEE6EACBE8874FBA);
    ctx->Reset();

    ctx->Push(buffer_size_);
    ctx->Push(clan_desc_);
    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_change_transition_slots(i32 p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEEEDA5E6D7080987);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_session_is_voice_session_busy(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEF0912DDF7C4CB4B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_transition_creator_handle(void* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEF26739BCD9907D5);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_set_voice_channel(i32 channel_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEF6212C2EFEF1A23);
    ctx->Reset();

    ctx->Push(channel_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_cable_connected(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEFFB25453D8600F9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_remove_presence_invite(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF0210268DB0974B1);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_clear_voice_proximity_override() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF03755696450470C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_remove_and_cancel_all_transition_invites() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF083835B70BA9BFE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_patch_post_cutscene_hs4f_tun_ent(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF0BC9BCD24A511D5);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_cloud_time_as_string(CStringPtr& native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF12E6CD06C73D69E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_seed_random_number_generator(i32 seed_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF1B84178F8674195);
    ctx->Reset();

    ctx->Push(seed_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_set_entity_only_exists_for_participants(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF1CA12B18AEF5298);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_session_set_matchmaking_mental_state(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF1EEA2DDA9FFA69D);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_add_entity_to_synchronised_scene(u32 entity_, i32 net_scene_, const CStringPtr& anim_dict_, const CStringPtr& anim_name_, f32 speed_, f32 speed_mulitiplier_, i32 flag_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF2404D68CBC855FA);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(net_scene_);
    ctx->Push(anim_dict_.ptr);
    ctx->Push(anim_name_.ptr);
    ctx->Push(speed_);
    ctx->Push(speed_mulitiplier_);
    ctx->Push(flag_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success trigger_file_crc_hacker_check(bool* native_return, u32 player_, const CStringPtr& p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF287F506767CC8A9);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_num_commerce_items(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF2EAC213D5EA0623);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_gamer_has_headset(bool* native_return, void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF2FD55CB574BCC55);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_session_is_solo(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF3929C2379B60CCE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_is_session_busy(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF4435D66A8E2905E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_clan_get_ui_formatted_tag(void* clan_desc_, CStringPtr& formatted_tag_, i32 buffer_size_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF45352426FF3A4F0);
    ctx->Reset();

    ctx->Push(buffer_size_);
    ctx->Push(clan_desc_);
    char* alt_formatted_tag_ = save_c_string(""); // creating new empty string because formatted_tag_ is nullptr
ctx->Push(alt_formatted_tag_);


    Success result = native->Invoke(ctx);
    if (result) {
        formatted_tag_.ptr = alt_formatted_tag_;
        /* VOID native_return */
    }
    return result;
}
Success network_set_no_spectator_chat(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF46A1E03E8755980);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_session_set_unique_crew_limit(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF49ABC20D8552257);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_is_language_supported(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF53E48461B71EECB);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_time_equal_to(bool* native_return, i32 time_a_, i32 time_b_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF5BC95857BD6D512);
    ctx->Reset();

    ctx->Push(time_a_);
    ctx->Push(time_b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_transition_set_activity_island(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF6F4383B7C92F11A);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_find_matched_gamers(bool* native_return, i32 attribute_, f32 fallback_limit_, f32 lower_limit_, f32 upper_limit_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF7B2CFDE5C9F700D);
    ctx->Reset();

    ctx->Push(attribute_);
    ctx->Push(fallback_limit_);
    ctx->Push(lower_limit_);
    ctx->Push(upper_limit_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_friendly_fire_option(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF808475FA571D823);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_store_invite_through_restart() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF814FEC6A19FD6E0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_set_query_data_from_offline(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF98DDE0A8ED09323);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_did_find_gamers_succeed(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF9B83B77929D8863);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_get_friend_content(bool* native_return, void* p3_, i32 p0_, i32 p1_, const CStringPtr& p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF9E1CCAE8BA4C281);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_.ptr);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_send_queued_join_request() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFA2888E3833C8E96);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_session_kick_player(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFA8904DC5F304220);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_accept_presence_invite(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFA91550DF9318B22);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_player_visible_locally(u32 player_, bool b_include_players_vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFAA10F1FAFB11AF2);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(b_include_players_vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_hide_projectile_in_cutscene() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFAC18E7356BD3210);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_last_viewed_shop_item(u32 p0_, i32 p1_, u32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFAE628F1E9ADB239);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_access_tunable_modification_detection_clear(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFAFC23AEE23868DB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_find_largest_bunch_of_players(bool* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFB1F9381E80FA13F);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_clear_transition_creator_handle() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFB3272229A82C759);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_allow_gang_to_join_tutorial_session(i32 team_id_, i32 instance_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFB680D403909DC70);
    ctx->Reset();

    ctx->Push(team_id_);
    ctx->Push(instance_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_cancel_respawn_search() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFB8F2A6F3DF08CBE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ugc_get_create_result(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFBC5E768C7A77A6A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_session_is_closed_friends(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFBCFA2EA2E206890);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_set_in_free_cam_mode(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFC18DB55AE19E046);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_online_version(CStringPtr& native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFCA9373EF340AC0A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success network_gamertag_from_handle_succeeded(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFD00798DBA7523DD);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success ugc_set_using_offline_content(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFD75DABC0957BF33);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_is_in_platform_party_chat(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFD8B834A8BA05048);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_block_proxy_migration_between_tutorial_sessions(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFEA7A352DDB34D52);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_get_num_unacked_reliables(i32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFF8FCF9FFC458A1C);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success network_join_previously_failed_transition(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFFE1E5B792D92B34);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success play_object_auto_start_anim(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x006E4B040ED37EC3);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_player_entirely_inside_garage(bool* native_return, u32 garage_hash_, u32 player_, f32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x024A60DEB0EA69F0);
    ctx->Reset();

    ctx->Push(garage_hash_);
    ctx->Push(player_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_object_a_portable_pickup(bool* native_return, u32 object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0378C08504160D0D);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success door_system_set_automatic_rate(u32 door_hash_, f32 rate_, bool request_door_, bool force_update_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x03C27E13B42A0E82);
    ctx->Reset();

    ctx->Push(door_hash_);
    ctx->Push(rate_);
    ctx->Push(request_door_);
    ctx->Push(force_update_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_money_pickups(f32 x_, f32 y_, f32 z_, i32 value_, i32 amount_, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0589B5E791CE9B2B);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(value_);
    ctx->Push(amount_);
    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_pickup_glow_offset(i32 pickup_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0596843B34B95CE5);
    ctx->Reset();

    ctx->Push(pickup_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_weapon_type_from_pickup_type(u32* native_return, u32 pickup_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x08F96CA6C551AD51);
    ctx->Reset();

    ctx->Push(pickup_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_max_num_portable_pickups_carried_by_player(u32 model_hash_, i32 number_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0BF3B3BD47D79C08);
    ctx->Reset();

    ctx->Push(model_hash_);
    ctx->Push(number_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_pickup_weapon_object_valid(bool* native_return, u32 object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x11D1E53A726891FE);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success create_non_networked_portable_pickup(u32* native_return, u32 pickup_hash_, f32 x_, f32 y_, f32 z_, bool place_on_ground_, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x125494B98A21AAF7);
    ctx->Reset();

    ctx->Push(pickup_hash_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(place_on_ground_);
    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success door_system_get_door_state(i32* native_return, u32 door_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x160AA1B32F6139B8);
    ctx->Reset();

    ctx->Push(door_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_offset_from_coord_and_heading_in_world_coords(Vector3Wrapper& native_return, f32 x_pos_, f32 y_pos_, f32 z_pos_, f32 heading_, f32 x_offset_, f32 y_offset_, f32 z_offset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x163E252DE035A133);
    ctx->Reset();

    ctx->Push(x_pos_);
    ctx->Push(y_pos_);
    ctx->Push(z_pos_);
    ctx->Push(heading_);
    ctx->Push(x_offset_);
    ctx->Push(y_offset_);
    ctx->Push(z_offset_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success get_coords_and_rotation_of_closest_object_of_type(bool* native_return, Vector3Wrapper& out_position_, Vector3Wrapper& out_rotation_, f32 x_, f32 y_, f32 z_, f32 radius_, u32 model_hash_, i32 rotation_order_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x163F8B586BC95F2A);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(model_hash_);
    ctx->Push(rotation_order_);
    alt::INative::Vector3 alt_out_position_ { out_position_.x, 0, out_position_.y, 0, out_position_.z };
ctx->Push(&alt_out_position_);

    alt::INative::Vector3 alt_out_rotation_ { out_rotation_.x, 0, out_rotation_.y, 0, out_rotation_.z };
ctx->Push(&alt_out_rotation_);


    Success result = native->Invoke(ctx);
    if (result) {
        out_position_.x = alt_out_position_.x;
out_position_.y = alt_out_position_.y;
out_position_.z = alt_out_position_.z;

    out_rotation_.x = alt_out_rotation_.x;
out_rotation_.y = alt_out_rotation_.y;
out_rotation_.z = alt_out_rotation_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_player_partially_inside_garage(bool* native_return, u32 garage_hash_, u32 player_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1761DC5D8471CBAA);
    ctx->Reset();

    ctx->Push(garage_hash_);
    ctx->Push(player_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_objects_inside_garage(u32 garage_hash_, bool vehicles_, bool peds_, bool objects_, bool is_network_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x190428512B240692);
    ctx->Reset();

    ctx->Push(garage_hash_);
    ctx->Push(vehicles_);
    ctx->Push(peds_);
    ctx->Push(objects_);
    ctx->Push(is_network_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_weapon_impacts_apply_greater_force(u32 object_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1A6CBB06E2D0D79D);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_pickup_uncollectable(i32 pickup_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1C1B69FAE509BA97);
    ctx->Reset();

    ctx->Push(pickup_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_is_object_articulated(u32 object_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1C57C94A6446492A);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success block_players_for_ambient_pickup(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1E3F1B1B891A2AAA);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_pickup_coords(Vector3Wrapper& native_return, i32 pickup_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x225B8B35C88029B3);
    ctx->Reset();

    ctx->Push(pickup_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success get_has_object_been_completely_destroyed(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2542269291C6AC84);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_rayfire_map_object_anim_phase(f32* native_return, u32 object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x260EE4FDBDF4DB01);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_pickup_object_glow_when_uncollectable(i32 pickup_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x27F248C3FEBFAAD3);
    ctx->Reset();

    ctx->Push(pickup_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_all_pickups_of_type(u32 pickup_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x27F9D613092159CF);
    ctx->Reset();

    ctx->Push(pickup_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_point_in_angled_area(bool* native_return, f32 x_pos_, f32 y_pos_, f32 z_pos_, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 width_, bool debug_, bool include_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2A70BAE8883E4C81);
    ctx->Reset();

    ctx->Push(x_pos_);
    ctx->Push(y_pos_);
    ctx->Push(z_pos_);
    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(width_);
    ctx->Push(debug_);
    ctx->Push(include_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success create_portable_pickup(u32* native_return, u32 pickup_hash_, f32 x_, f32 y_, f32 z_, bool place_on_ground_, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2EAF1FDB2FB55698);
    ctx->Reset();

    ctx->Push(pickup_hash_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(place_on_ground_);
    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success slide_object(bool* native_return, u32 object_, f32 to_x_, f32 to_y_, f32 to_z_, f32 speed_x_, f32 speed_y_, f32 speed_z_, bool collision_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2FDFF4107B8C1147);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(to_x_);
    ctx->Push(to_y_);
    ctx->Push(to_z_);
    ctx->Push(speed_x_);
    ctx->Push(speed_y_);
    ctx->Push(speed_z_);
    ctx->Push(collision_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_prop_tint_index(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x31574B1B41268673);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_pickup_generation_range_multiplier(f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x318516E02DE3ECE2);
    ctx->Reset();

    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_only_allow_ammo_collection_when_low(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x31F924B53EADDF65);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_pickup(i32 pickup_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3288D8ACAECD2AB2);
    ctx->Reset();

    ctx->Push(pickup_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success render_fake_pickup_glow(f32 x_, f32 y_, f32 z_, i32 color_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3430676B11CDF21D);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(color_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_object_entirely_inside_garage(bool* native_return, u32 garage_hash_, u32 entity_, f32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x372EF6699146A1E4);
    ctx->Reset();

    ctx->Push(garage_hash_);
    ctx->Push(entity_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success force_pickup_rotate_face_up() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x394CD08E31313C28);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_any_object_near_point(bool* native_return, f32 x_, f32 y_, f32 z_, f32 range_, bool p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x397DC58FF00298D1);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(range_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_pickup_object_arrow_marker(i32 pickup_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x39A5FB7EAF150840);
    ctx->Reset();

    ctx->Push(pickup_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_object_is_visible_in_mirrors(u32 object_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3B2FD68DB5F8331C);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_is_articulated_joint_at_max_angle(bool* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3BD770D281982DB5);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_pickup_hidden_when_uncollectable(i32 pickup_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3ED2B83AB2E82799);
    ctx->Reset();

    ctx->Push(pickup_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_activate_object_physics_as_soon_as_it_is_unfrozen(u32 object_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x406137F8EF90EAF5);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_is_articulated_joint_at_min_angle(bool* native_return, u32 object_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x43C677F1E1158005);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success has_closest_object_of_type_been_completely_destroyed(bool* native_return, f32 x_, f32 y_, f32 z_, f32 radius_, u32 model_hash_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x46494A2475701343);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(model_hash_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success remove_door_from_system(u32 door_hash_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x464D8E1427156FE4);
    ctx->Reset();

    ctx->Push(door_hash_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_portable_pickup_persist(i32 pickup_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x46F3ADD1E2D5BAF2);
    ctx->Reset();

    ctx->Push(pickup_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_object_high_detail_model(u32 object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4A39DB43E47CF3AA);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success door_system_get_door_pending_state(i32* native_return, u32 door_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4BC2854478F3A749);
    ctx->Reset();

    ctx->Push(door_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success force_activate_physics_on_unfixed_pickup(i32 pickup_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4C134B4DF76025D0);
    ctx->Reset();

    ctx->Push(pickup_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_object_allow_low_lod_buoyancy(u32 object_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4D89D607CB3DD1D2);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_pickup_object(u32* native_return, i32 pickup_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5099BC55630B25AE);
    ctx->Reset();

    ctx->Push(pickup_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success create_object(u32* native_return, u32 model_hash_, f32 x_, f32 y_, f32 z_, bool is_network_, bool b_script_host_obj_, bool dynamic_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x509D5878EB39E842);
    ctx->Reset();

    ctx->Push(model_hash_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(is_network_);
    ctx->Push(b_script_host_obj_);
    ctx->Push(dynamic_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success does_rayfire_map_object_exist(bool* native_return, u32 object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x52AF537A0C5B8AAD);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success delete_object(u32* object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x539E0AE3E6634B9F);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_team_pickup_object(u32 object_, i32 p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x53E0DF1A2A3CF0CA);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success door_system_find_existing_door(bool* native_return, u32* out_door_hash_, f32 x_, f32 y_, f32 z_, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x589F80B325CC82C5);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(model_hash_);
    ctx->Push(out_door_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success place_object_on_ground_properly(bool* native_return, u32 object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x58A850EAEE20FAA3);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_state_of_rayfire_map_object(u32 object_, i32 state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5C29F698D404C5E1);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_portable_pickup_last_accessible_position_setting(u32 object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5CE2E45A5CE2E45A);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success convert_old_pickup_type_to_new(u32* native_return, u32 pickup_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5EAAD83F8CFB4575);
    ctx->Reset();

    ctx->Push(pickup_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_prop_light_color(bool* native_return, u32 object_, bool p1_, i32 r_, i32 g_, i32 b_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5F048334B4A4E774);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(p1_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_player_permitted_to_collect_pickups_of_type(u32 player_, u32 pickup_hash_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x616093EC6B139DD9);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(pickup_hash_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_object_glow_in_same_team(i32 pickup_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x62454A641B41F3C5);
    ctx->Reset();

    ctx->Push(pickup_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_projectiles_should_explode_on_contact(u32 entity_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x63ECF581BC70E363);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success allow_portable_pickup_to_migrate_to_non_participants(i32 pickup_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x641F272B52E2F0F8);
    ctx->Reset();

    ctx->Push(pickup_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success door_system_get_open_ratio(f32* native_return, u32 door_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x65499865FCA6E5EC);
    ctx->Reset();

    ctx->Push(door_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success disable_tidying_up_in_garage(i32 id_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x659F9D71F52843F8);
    ctx->Reset();

    ctx->Push(id_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success close_safehouse_garages() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x66A49D021870FE88);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_ambient_pickup(u32* native_return, u32 pickup_hash_, f32 pos_x_, f32 pos_y_, f32 pos_z_, i32 flags_, i32 value_, u32 model_hash_, bool p7_, bool p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x673966A0C0FD7171);
    ctx->Reset();

    ctx->Push(pickup_hash_);
    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(flags_);
    ctx->Push(value_);
    ctx->Push(model_hash_);
    ctx->Push(p7_);
    ctx->Push(p8_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success is_any_entity_entirely_inside_garage(bool* native_return, u32 garage_hash_, bool p1_, bool p2_, bool p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x673ED815D6E323B7);
    ctx->Reset();

    ctx->Push(garage_hash_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success door_system_set_door_state(u32 door_hash_, i32 state_, bool request_door_, bool force_update_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6BAB9442830C7F53);
    ctx->Reset();

    ctx->Push(door_hash_);
    ctx->Push(state_);
    ctx->Push(request_door_);
    ctx->Push(force_update_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_safe_pickup_coords(Vector3Wrapper& native_return, f32 x_, f32 y_, f32 z_, f32 p3_, f32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6E16BC2503FF1FF0);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success add_door_to_system(u32 door_hash_, u32 model_hash_, f32 x_, f32 y_, f32 z_, bool p5_, bool script_door_, bool is_local_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6F8838D03D1DC226);
    ctx->Reset();

    ctx->Push(door_hash_);
    ctx->Push(model_hash_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p5_);
    ctx->Push(script_door_);
    ctx->Push(is_local_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success close_all_barriers_for_race() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x701FDA1E82076BA4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_object_is_a_pressure_plate(u32 object_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x734E1714D077DA9A);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_pickup_regenerate(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x758A5C1B3B1E1990);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_closest_object_of_type_been_broken(bool* native_return, f32 p0_, f32 p1_, f32 p2_, f32 p3_, u32 model_hash_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x761B0E69AC4D007E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(model_hash_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_pickup_reward_type_suppression(i32 reward_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x762DB2D380B48D04);
    ctx->Reset();

    ctx->Push(reward_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_object_force_vehicles_to_avoid(u32 object_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x77F33F2CCF64B3AA);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_pickup_regeneration_time(i32 pickup_, i32 duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x78015C9B4B3ECC9D);
    ctx->Reset();

    ctx->Push(pickup_);
    ctx->Push(duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_pickup_object_collectable_in_vehicle(i32 pickup_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7813E8B8C4AE4799);
    ctx->Reset();

    ctx->Push(pickup_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_local_player_can_collect_portable_pickups(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x78857FC65CADB909);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_pickup_been_collected(bool* native_return, i32 pickup_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x80EC48E6679313F9);
    ctx->Reset();

    ctx->Push(pickup_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_custom_pickup_weapon_hash(u32 pickup_hash_, i32 pickup_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x826D1EE4D1CAFC78);
    ctx->Reset();

    ctx->Push(pickup_hash_);
    ctx->Push(pickup_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success allow_pickup_arrow_marker_when_uncollectable(i32 pickup_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x834344A414C7C85D);
    ctx->Reset();

    ctx->Push(pickup_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_pickup_transparent_when_uncollectable(i32 pickup_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x858EC9FD25DE04AA);
    ctx->Reset();

    ctx->Push(pickup_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success are_entities_entirely_inside_garage(bool* native_return, u32 garage_hash_, bool p1_, bool p2_, bool p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x85B6C850546FDDE2);
    ctx->Reset();

    ctx->Push(garage_hash_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success hide_portable_pickup_when_detached(u32 pickup_object_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x867458251D47CCB2);
    ctx->Reset();

    ctx->Push(pickup_object_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_pickup_object_transparent_when_uncollectable(i32 pickup_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8881C98A31117998);
    ctx->Reset();

    ctx->Push(pickup_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_local_player_permitted_to_collect_pickups_with_model(u32 model_hash_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x88EAEC617CD26926);
    ctx->Reset();

    ctx->Push(model_hash_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_pickup_rotate(i32* native_return, u32 pickup_hash_, f32 pos_x_, f32 pos_y_, f32 pos_z_, f32 rot_x_, f32 rot_y_, f32 rot_z_, i32 flag_, i32 amount_, i32 p9_, bool p10_, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x891804727E0A98B7);
    ctx->Reset();

    ctx->Push(pickup_hash_);
    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);
    ctx->Push(flag_);
    ctx->Push(amount_);
    ctx->Push(p9_);
    ctx->Push(p10_);
    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_state_of_rayfire_map_object(i32* native_return, u32 object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x899BA936634A322E);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_object_targettable(u32 object_, bool targettable_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8A7391690F5AFD81);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(targettable_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_object_been_broken(bool* native_return, u32 object_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8ABFB70C49CC43E2);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_object_visible(bool* native_return, u32 object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8B32ACE6326A7546);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_object_near_point(bool* native_return, u32 object_hash_, f32 x_, f32 y_, f32 z_, f32 range_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8C90FE4B381BA60A);
    ctx->Reset();

    ctx->Push(object_hash_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(range_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_disable_collisions_between_cars_and_car_parachute(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8CAAB2BD3EA58BD4);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_pickup_object_alpha_when_transparent(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8CFF648FBD7330F1);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success attach_portable_pickup_to_ped(u32 pickup_object_, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8DC39368BDD57755);
    ctx->Reset();

    ctx->Push(pickup_object_);
    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success suppress_pickup_sound_for_pickup(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8DCA505A5C196F05);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_garage_empty(bool* native_return, u32 garage_hash_, bool p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x90E47239EA1980B8);
    ctx->Reset();

    ctx->Push(garage_hash_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_drive_articulated_joint(u32 object_, bool toggle_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x911024442F4898F0);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(toggle_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success prevent_collection_of_portable_pickup(u32 object_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x92AEFB5F6E294023);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_object_speed_boost_amount(u32 object_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x96EE0EBA0163DF80);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_object_tint_index(u32 object_, i32 texture_variation_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x971DA0055324D033);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(texture_variation_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_object_no_offset(u32* native_return, u32 model_hash_, f32 x_, f32 y_, f32 z_, bool is_network_, bool b_script_host_obj_, bool dynamic_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9A294B2138ABB884);
    ctx->Reset();

    ctx->Push(model_hash_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(is_network_);
    ctx->Push(b_script_host_obj_);
    ctx->Push(dynamic_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_locked_unstreamed_in_door_of_type(u32 model_hash_, f32 x_, f32 y_, f32 z_, bool locked_, f32 x_rot_mult_, f32 y_rot_mult_, f32 z_rot_mult_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9B12F9A24FABEDB0);
    ctx->Reset();

    ctx->Push(model_hash_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(locked_);
    ctx->Push(x_rot_mult_);
    ctx->Push(y_rot_mult_);
    ctx->Push(z_rot_mult_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success door_system_set_automatic_distance(u32 door_hash_, f32 distance_, bool request_door_, bool force_update_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9BA001CB45CBF627);
    ctx->Reset();

    ctx->Push(door_hash_);
    ctx->Push(distance_);
    ctx->Push(request_door_);
    ctx->Push(force_update_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_non_networked_ambient_pickup(u32* native_return, u32 pickup_hash_, f32 pos_x_, f32 pos_y_, f32 pos_z_, i32 flags_, i32 value_, u32 model_hash_, bool p7_, bool p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9C93764223E29C50);
    ctx->Reset();

    ctx->Push(pickup_hash_);
    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(flags_);
    ctx->Push(value_);
    ctx->Push(model_hash_);
    ctx->Push(p7_);
    ctx->Push(p8_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_pickup_object_glow_offset(i32 pickup_, f32 p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA08FE5E49BDC39DD);
    ctx->Reset();

    ctx->Push(pickup_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_all_pickup_reward_type_suppression() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA2C1F5E92AFE49ED);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success door_system_set_door_open_for_races(u32 door_hash_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA85A21582451E951);
    ctx->Reset();

    ctx->Push(door_hash_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success allow_pickup_by_none_participant(i32 pickup_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA059C615DE9DD03);
    ctx->Reset();

    ctx->Push(pickup_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success allow_damage_events_for_non_networked_objects(bool value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xABDABF4E1EDECBFA);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success only_clean_up_object_when_out_of_range(u32 object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xADBE4809F19F927A);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_prop_light_overriden(bool* native_return, u32 object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xADF084FB8F075D06);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success does_pickup_exist(bool* native_return, i32 pickup_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAFC1CA75AD4074D1);
    ctx->Reset();

    ctx->Push(pickup_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success rotate_object(bool* native_return, u32 object_, f32 p1_, f32 p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAFE24E4D29249E4A);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_drive_articulated_joint_with_inflictor(u32 object_, bool toggle_, i32 p2_, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB20834A7DD3D8896);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(toggle_);
    ctx->Push(p2_);
    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success track_object_visibility(u32 object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB252BC036B525623);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_flag_render_small_shadow(u32 object_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB2D0BDE54F0E8E5A);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_pickup_generation_range_multiplier(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB3ECA65C7317F174);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_rayfire_map_object(u32* native_return, f32 x_, f32 y_, f32 z_, f32 radius_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB48FCED898292E52);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_is_object_ball(u32 object_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB5B7742424BD4445);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success door_system_set_open_ratio(u32 door_hash_, f32 ajar_, bool request_door_, bool force_update_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB6E6FBA95C7324AC);
    ctx->Reset();

    ctx->Push(door_hash_);
    ctx->Push(ajar_);
    ctx->Push(request_door_);
    ctx->Push(force_update_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_object_fragment_damage_health(f32* native_return, i32 p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB6FBFD079B8D0596);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success clear_extended_pickup_probe_areas() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB7C6D80FB371659A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cutscenes_weapon_flashlight_on_this_frame(u32 object_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBCE595371A5FBAAF);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_object_of_type_exist_at_coords(bool* native_return, f32 x_, f32 y_, f32 z_, f32 radius_, u32 hash_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBFA48E2FF417213F);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(hash_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_pickup_track_damage_events(i32 pickup_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBFFE53AE7E67FCDC);
    ctx->Reset();

    ctx->Push(pickup_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_door_registered_with_system(bool* native_return, u32 door_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC153C43EA202C8C1);
    ctx->Reset();

    ctx->Push(door_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success door_system_set_spring_removed(u32 door_hash_, bool removed_, bool request_door_, bool force_update_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC485E07E4F0B7958);
    ctx->Reset();

    ctx->Push(door_hash_);
    ctx->Push(removed_);
    ctx->Push(request_door_);
    ctx->Push(force_update_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_door_closed(bool* native_return, u32 door_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC531EE8A1145A149);
    ctx->Reset();

    ctx->Push(door_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_object_is_special_golfball(u32 object_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC6033D32241F6FB5);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success open_all_barriers_for_race(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC7F29CA00F46350E);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success detach_portable_pickup_from_ped(u32 pickup_object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCF463D1E9A0AECB1);
    ctx->Reset();

    ctx->Push(pickup_object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_entity_flag_suppress_shadow(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD05A3241B9A86F19);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_extended_pickup_probe_area(f32 x_, f32 y_, f32 z_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD4A7A435B3710D05);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_pickup_type_from_weapon_hash(u32* native_return, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD6429A016084F1A5);
    ctx->Reset();

    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success place_object_on_ground_or_object_properly(bool* native_return, u32 object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD76EEEF746057FD6);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success door_system_set_hold_open(u32 door_hash_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD9B71952F78A2640);
    ctx->Reset();

    ctx->Push(door_hash_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_pickup_object_exist(bool* native_return, u32 pickup_object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD9EFB6DBF7DAAEA3);
    ctx->Reset();

    ctx->Push(pickup_object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_garage(u32 garage_hash_, bool is_network_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDA05194260CDCDF9);
    ctx->Reset();

    ctx->Push(garage_hash_);
    ctx->Push(is_network_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_default_ammo_for_weapon_pickup(i32* native_return, u32 pickup_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDB41D07A45A6D4B7);
    ctx->Reset();

    ctx->Push(pickup_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_object_speed_boost_duration(u32 object_, f32 duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDF6CA0330F2E737B);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success door_system_get_is_physics_loaded(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDF97CDD4FC08FD34);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success damage_object_fragment_child(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE05F6AEEFEB0BB02);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_closest_object_of_type(u32* native_return, f32 x_, f32 y_, f32 z_, f32 radius_, u32 model_hash_, bool is_mission_, bool p6_, bool p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE143FA2249364369);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(model_hash_);
    ctx->Push(is_mission_);
    ctx->Push(p6_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success break_object_fragment_child(u32 p0_, i32 p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE7E4C198B0185900);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_object_tint_index(i32* native_return, u32 object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE84EB93729C5F36A);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success door_system_get_automatic_distance(f32* native_return, u32 door_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE851471AEFC3374F);
    ctx->Reset();

    ctx->Push(door_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_object_takes_damage_from_colliding_with_buildings(i32 p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEB6F1A9B5510A5D2);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_state_of_closest_door_of_type(bool* locked_, f32* heading_, u32 type_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEDC1A5B84AEF33FF);
    ctx->Reset();

    ctx->Push(type_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(locked_);
    ctx->Push(heading_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_object_partially_inside_garage(bool* native_return, u32 garage_hash_, u32 entity_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF0EED5A6BC7B237A);
    ctx->Reset();

    ctx->Push(garage_hash_);
    ctx->Push(entity_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_tint_index_closest_building_of_type(bool* native_return, f32 x_, f32 y_, f32 z_, f32 radius_, u32 model_hash_, i32 texture_variation_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF12E33034D887F66);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(model_hash_);
    ctx->Push(texture_variation_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success enable_saving_in_garage(u32 garage_hash_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF2E1A7133DD356A6);
    ctx->Reset();

    ctx->Push(garage_hash_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_force_object_this_frame(f32 x_, f32 y_, f32 z_, f32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF538081986E49E9D);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_object_physics_params(u32 object_, f32 weight_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, f32 gravity_, f32 p7_, f32 p8_, f32 p9_, f32 p10_, f32 buoyancy_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF6DF6E90DE7DF90F);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(weight_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(gravity_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(p10_);
    ctx->Push(buoyancy_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_state_of_closest_door_of_type(u32 type_, f32 x_, f32 y_, f32 z_, bool locked_, f32 heading_, bool p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF82D8F1926A02C3D);
    ctx->Reset();

    ctx->Push(type_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(locked_);
    ctx->Push(heading_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success suppress_pickup_reward_type(i32 reward_type_, bool suppress_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF92099527DB8E2A7);
    ctx->Reset();

    ctx->Push(reward_type_);
    ctx->Push(suppress_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success fix_object_fragment(u32 object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF9C1681347C8BD15);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_pickup_of_type_exist_in_area(bool* native_return, u32 pickup_hash_, f32 x_, f32 y_, f32 z_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF9C36251F6E48E33);
    ctx->Reset();

    ctx->Push(pickup_hash_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success create_pickup(i32* native_return, u32 pickup_hash_, f32 pos_x_, f32 pos_y_, f32 pos_z_, i32 p4_, i32 value_, bool p6_, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFBA08C503DD5FA58);
    ctx->Reset();

    ctx->Push(pickup_hash_);
    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(p4_);
    ctx->Push(value_);
    ctx->Push(p6_);
    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_object_a_pickup(bool* native_return, u32 object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFC481C641EBBD27D);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success allow_all_players_to_collect_pickups_of_type(u32 pickup_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFDC07C58E8AAB715);
    ctx->Reset();

    ctx->Push(pickup_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_control_instructional_buttons_string(CStringPtr& native_return, i32 control_, i32 action_, bool allow_x_o_swap_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0499D7B09FC9B407);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(action_);
    ctx->Push(allow_x_o_swap_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success get_is_using_alternate_driveby(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0F70731BACCFBB96);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_disabled_control_normal(f32* native_return, i32 control_, i32 action_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x11E65974A982637C);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(action_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success is_using_cursor(bool* native_return, i32 control_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x13337B38DB572509);
    ctx->Reset();

    ctx->Push(control_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_control_trigger_shake(i32 control_, i32 left_duration_, i32 left_frequency_, i32 right_duration_, i32 right_frequency_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x14D29BB12D47F68C);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(left_duration_);
    ctx->Push(left_frequency_);
    ctx->Push(right_duration_);
    ctx->Push(right_frequency_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_control_enabled(bool* native_return, i32 control_, i32 action_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1CEA6BFDF248E5D9);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(action_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_using_remote_play(bool* native_return, i32 control_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x23F09EADC01449D6);
    ctx->Reset();

    ctx->Push(control_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_is_using_alternate_handbrake(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x25AAA32BDC98F2A3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_disabled_control_just_released(bool* native_return, i32 control_, i32 action_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x305C8DCD79DA8B0F);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(action_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success enable_control_action(i32 control_, i32 action_, bool enable_related_actions_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x351220255D64C155);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(action_);
    ctx->Push(enable_related_actions_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_control_shake(i32 control_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x38C16A305E8CDC8D);
    ctx->Reset();

    ctx->Push(control_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success init_pc_scripted_controls(bool* native_return, const CStringPtr& scheme_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3D42B92563939375);
    ctx->Reset();

    ctx->Push(scheme_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success switch_pc_scripted_controls(bool* native_return, const CStringPtr& scheme_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4683149ED1DDE7A1);
    ctx->Reset();

    ctx->Push(scheme_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_control_shake(i32 control_, i32 duration_, i32 frequency_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x48B3886C1358D0D5);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(duration_);
    ctx->Push(frequency_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_disabled_control_unbound_normal(f32* native_return, i32 control_, i32 action_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4F8A26A890FD62FB);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(action_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success is_control_just_released(bool* native_return, i32 control_, i32 action_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x50F940259D3841E6);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(action_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_control_just_pressed(bool* native_return, i32 control_, i32 action_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x580417101DDB492F);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(action_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_local_player_gamepad_aim_state(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x59B9A7AF4C95133C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_use_adjusted_mouse_coords(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5B73C77D9EB66E24);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_control_unbound_normal(f32* native_return, i32 control_, i32 action_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5B84D09CEC5209C5);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(action_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success disable_all_control_actions(i32 control_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5F4B6931816E599B);
    ctx->Reset();

    ctx->Push(control_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success shutdown_pc_scripted_controls() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x643ED62D5EA3BEBD);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_control_released(bool* native_return, i32 control_, i32 action_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x648EE3E7F38877DD);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(action_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success have_controls_changed(bool* native_return, i32 control_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6CD79468A1E595C6);
    ctx->Reset();

    ctx->Push(control_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_look_inverted(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x77B612531280010D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_playerpad_shakes_when_controller_disabled(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x798FDEB5B1575088);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success allow_alternative_script_controls_layout(i32 control_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7F4724035FDCA1DD);
    ctx->Reset();

    ctx->Push(control_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_control_group_instructional_buttons_string(CStringPtr& native_return, i32 control_, i32 control_group_, bool allow_x_o_swap_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x80C2FD58D720C801);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(control_group_);
    ctx->Push(allow_x_o_swap_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success set_control_light_effect_color(i32 control_, i32 red_, i32 green_, i32 blue_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8290252FFF36ACB5);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(red_);
    ctx->Push(green_);
    ctx->Push(blue_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_disabled_control_just_pressed(bool* native_return, i32 control_, i32 action_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x91AEF906BCA88877);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(action_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_control_shake_suppressed_id(i32 control_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA0CEFCEA390AAB9B);
    ctx->Reset();

    ctx->Push(control_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_using_keyboard_and_mouse(bool* native_return, i32 control_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA571D46727E2B718);
    ctx->Reset();

    ctx->Push(control_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success enable_all_control_actions(i32 control_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA5FFE9B05F199DE7);
    ctx->Reset();

    ctx->Push(control_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_local_player_aim_state(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBB41AFBBBC0A0287);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success clear_control_light_effect(i32 control_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCB0360EFEFB2580D);
    ctx->Reset();

    ctx->Push(control_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_control_how_long_ago(i32* native_return, i32 control_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD7D22F5592AED8BA);
    ctx->Reset();

    ctx->Push(control_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_control_value(i32* native_return, i32 control_, i32 action_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD95E79E8686D2C27);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(action_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_mouse_look_inverted(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE1615EC03B3BB4FD);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_disabled_control_pressed(bool* native_return, i32 control_, i32 action_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE2587F8CBBD87B1D);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(action_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_control_value_next_frame(bool* native_return, i32 control_, i32 action_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE8A25867FBA3B05E);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(action_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_control_normal(f32* native_return, i32 control_, i32 action_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEC3C9B8D5327B563);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(action_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_input_exclusive(i32 control_, i32 action_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEDE476E5EE29EDB1);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(action_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_control_shake_suppressed_id(i32 control_, i32 unique_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF239400E16C23E08);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(unique_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_control_pressed(bool* native_return, i32 control_, i32 action_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF3A21BCD95725A4A);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(action_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_disabled_control_released(bool* native_return, i32 control_, i32 action_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFB6C4072E9A32E92);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(action_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_cursor_position(bool* native_return, f32 x_, f32 y_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFC695459D4D0E219);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_allow_movement_while_zoomed(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFC859E2374407556);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success disable_control_action(i32 control_, i32 action_, bool disable_related_actions_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFE99B66D079CF6BC);
    ctx->Reset();

    ctx->Push(control_);
    ctx->Push(action_);
    ctx->Push(disable_related_actions_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_roads_back_to_original_in_angled_area(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 width_, i32 p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0027501B9F3B407E);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(width_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_num_navmeshes_existing_in_area(i32* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x01708E8DD3FF8C65);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_vehicle_node_properties(bool* native_return, i32* density_, i32* flags_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0568566ACBB5DEDC);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(density_);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success request_path_nodes_in_area_this_frame(bool* native_return, f32 x1_, f32 y1_, f32 x2_, f32 y2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x07FB139B592FA687);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(x2_);
    ctx->Push(y2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ambient_ped_range_multiplier_this_frame(f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0B919E1FB47CC4E0);
    ctx->Reset();

    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_navmesh_blocking_object_exist(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0EAEB0DB4B132399);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success update_navmesh_blocking_object(i32 p0_, f32 p1_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, f32 p6_, f32 p7_, i32 p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x109E99373F290687);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_point_on_road(bool* native_return, f32 x_, f32 y_, f32 z_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x125BF4ABFC536B09);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_closest_road(bool* native_return, Vector3Wrapper& p5_, Vector3Wrapper& p6_, void* p7_, void* p8_, f32* p9_, f32 x_, f32 y_, f32 z_, f32 p3_, i32 p4_, bool p10_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x132F52BBA570FE92);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p10_);
    alt::INative::Vector3 alt_p5_ { p5_.x, 0, p5_.y, 0, p5_.z };
ctx->Push(&alt_p5_);

    alt::INative::Vector3 alt_p6_ { p6_.x, 0, p6_.y, 0, p6_.z };
ctx->Push(&alt_p6_);

    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        p5_.x = alt_p5_.x;
p5_.y = alt_p5_.y;
p5_.z = alt_p5_.z;

    p6_.x = alt_p6_.x;
p6_.y = alt_p6_.y;
p6_.z = alt_p6_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_position_by_side_of_road(bool* native_return, Vector3Wrapper& out_position_, f32 x_, f32 y_, f32 z_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x16F46FB18C8009E4);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p3_);
    alt::INative::Vector3 alt_out_position_ { out_position_.x, 0, out_position_.y, 0, out_position_.z };
ctx->Push(&alt_out_position_);


    Success result = native->Invoke(ctx);
    if (result) {
        out_position_.x = alt_out_position_.x;
out_position_.y = alt_out_position_.y;
out_position_.z = alt_out_position_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_roads_in_angled_area(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 width_, bool unknown1_, bool unknown2_, bool unknown3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1A5AA1208AF5DB59);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(width_);
    ctx->Push(unknown1_);
    ctx->Push(unknown2_);
    ctx->Push(unknown3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_node_id_valid(bool* native_return, i32 vehicle_node_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1EAF30FCFBF5AF74);
    ctx->Reset();

    ctx->Push(vehicle_node_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_roads_back_to_original(f32 p0_, f32 p1_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1EE7063B80FFC77C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ignore_no_gps_flag_until_first_normal_node(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1FC289A0C3FF470F);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_allow_stream_prologue_nodes(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x228E5C6AD4D74BFD);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_nth_closest_vehicle_node_id(i32* native_return, f32 x_, f32 y_, f32 z_, i32 nth_, i32 node_flags_, f32 p5_, f32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x22D7275A79FE8215);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(nth_);
    ctx->Push(node_flags_);
    ctx->Push(p5_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_closest_vehicle_node(bool* native_return, Vector3Wrapper& out_position_, f32 x_, f32 y_, f32 z_, i32 node_flags_, f32 p5_, f32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x240A18690AE96513);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(node_flags_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    alt::INative::Vector3 alt_out_position_ { out_position_.x, 0, out_position_.y, 0, out_position_.z };
ctx->Push(&alt_out_position_);


    Success result = native->Invoke(ctx);
    if (result) {
        out_position_.x = alt_out_position_.x;
out_position_.y = alt_out_position_.y;
out_position_.z = alt_out_position_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_gps_disabled_zone_at_index(i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2801D0012266DF07);
    ctx->Reset();

    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_approx_height_for_point(f32* native_return, f32 x_, f32 y_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x29C24BFBED8AB8FB);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_closest_major_vehicle_node(bool* native_return, Vector3Wrapper& out_position_, f32 x_, f32 y_, f32 z_, f32 unknown1_, f32 unknown2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2EABE3B06F58C1BE);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(unknown1_);
    ctx->Push(unknown2_);
    alt::INative::Vector3 alt_out_position_ { out_position_.x, 0, out_position_.y, 0, out_position_.z };
ctx->Push(&alt_out_position_);


    Success result = native->Invoke(ctx);
    if (result) {
        out_position_.x = alt_out_position_.x;
out_position_.y = alt_out_position_.y;
out_position_.z = alt_out_position_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_street_name_at_coord(u32* street_name_, u32* crossing_road_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2EB41072B4C1E4C0);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(street_name_);
    ctx->Push(crossing_road_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_approx_floor_for_point(f32* native_return, f32 x_, f32 y_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x336511A34F2E5185);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_ped_paths_in_area(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, bool p6_, i32 p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x34F060F4BF92E018);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(p6_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_approx_floor_for_area(f32* native_return, f32 x1_, f32 y1_, f32 x2_, f32 y2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3599D741C9AC6310);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(x2_);
    ctx->Push(y2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success add_navmesh_required_region(f32 x_, f32 y_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x387EAD7EE42F6685);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_nth_closest_vehicle_node_favour_direction(bool* native_return, Vector3Wrapper& out_position_, f32* out_heading_, f32 x_, f32 y_, f32 z_, f32 desired_x_, f32 desired_y_, f32 desired_z_, i32 nth_closest_, i32 node_flags_, f32 p10_, f32 p11_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x45905BE8654AE067);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(desired_x_);
    ctx->Push(desired_y_);
    ctx->Push(desired_z_);
    ctx->Push(nth_closest_);
    ctx->Push(node_flags_);
    ctx->Push(p10_);
    ctx->Push(p11_);
    alt::INative::Vector3 alt_out_position_ { out_position_.x, 0, out_position_.y, 0, out_position_.z };
ctx->Push(&alt_out_position_);

    ctx->Push(out_heading_);

    Success result = native->Invoke(ctx);
    if (result) {
        out_position_.x = alt_out_position_.x;
out_position_.y = alt_out_position_.y;
out_position_.z = alt_out_position_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success remove_navmesh_blocking_object(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x46399A7895957C0E);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_navmesh_in_area(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4C8872D8CDBE1B8B);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_node_is_switched_off(bool* native_return, i32 node_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4F5070AA58F69279);
    ctx->Reset();

    ctx->Push(node_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_nth_closest_vehicle_node_id_with_heading(i32* native_return, Vector3Wrapper& out_position_, f32* out_heading_, f32 x_, f32 y_, f32 z_, i32 nth_closest_, i32 node_flags_, f32 p7_, f32 p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6448050E9C2A7207);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(nth_closest_);
    ctx->Push(node_flags_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    alt::INative::Vector3 alt_out_position_ { out_position_.x, 0, out_position_.y, 0, out_position_.z };
ctx->Push(&alt_out_position_);

    ctx->Push(out_heading_);

    Success result = native->Invoke(ctx);
    if (result) {
        out_position_.x = alt_out_position_.x;
out_position_.y = alt_out_position_.y;
out_position_.z = alt_out_position_.z;

        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_vehicle_node_position(Vector3Wrapper& out_position_, i32 node_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x703123E5E7D429C2);
    ctx->Reset();

    ctx->Push(node_id_);
    alt::INative::Vector3 alt_out_position_ { out_position_.x, 0, out_position_.y, 0, out_position_.z };
ctx->Push(&alt_out_position_);


    Success result = native->Invoke(ctx);
    if (result) {
        out_position_.x = alt_out_position_.x;
out_position_.y = alt_out_position_.y;
out_position_.z = alt_out_position_.z;

        /* VOID native_return */
    }
    return result;
}
Success is_navmesh_required_region_in_use(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x705A844002B39DC0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ignore_no_gps_flag(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x72751156E7678833);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_nth_closest_vehicle_node_with_heading(bool* native_return, Vector3Wrapper& out_position_, f32* out_heading_, i32* out_num_lanes_, f32 x_, f32 y_, f32 z_, i32 nth_closest_, i32 node_flags_, f32 unknown3_, f32 unknown4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x80CA6A8B6C094CC4);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(nth_closest_);
    ctx->Push(node_flags_);
    ctx->Push(unknown3_);
    ctx->Push(unknown4_);
    alt::INative::Vector3 alt_out_position_ { out_position_.x, 0, out_position_.y, 0, out_position_.z };
ctx->Push(&alt_out_position_);

    ctx->Push(out_heading_);
    ctx->Push(out_num_lanes_);

    Success result = native->Invoke(ctx);
    if (result) {
        out_position_.x = alt_out_position_.x;
out_position_.y = alt_out_position_.y;
out_position_.z = alt_out_position_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success are_all_navmesh_regions_loaded(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8415D95B194A3AEA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_gps_blip_route_found(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x869DAACBBE9FA006);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_approx_height_for_area(f32* native_return, f32 x1_, f32 y1_, f32 x2_, f32 y2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8ABE8608576D9CE3);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(x2_);
    ctx->Push(y2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success remove_navmesh_required_regions() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x916F0A3CDEC3445E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_random_vehicle_node(bool* native_return, Vector3Wrapper& out_position_, i32* node_id_, f32 x_, f32 y_, f32 z_, f32 radius_, bool p4_, bool p5_, bool p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x93E0DB8440B73A7D);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    alt::INative::Vector3 alt_out_position_ { out_position_.x, 0, out_position_.y, 0, out_position_.z };
ctx->Push(&alt_out_position_);

    ctx->Push(node_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        out_position_.x = alt_out_position_.x;
out_position_.y = alt_out_position_.y;
out_position_.z = alt_out_position_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_road_boundary_using_heading(bool* native_return, Vector3Wrapper& out_position_, f32 x_, f32 y_, f32 z_, f32 heading_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA0F8A7517A273C05);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(heading_);
    alt::INative::Vector3 alt_out_position_ { out_position_.x, 0, out_position_.y, 0, out_position_.z };
ctx->Push(&alt_out_position_);


    Success result = native->Invoke(ctx);
    if (result) {
        out_position_.x = alt_out_position_.x;
out_position_.y = alt_out_position_.y;
out_position_.z = alt_out_position_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_vehicle_node_is_gps_allowed(bool* native_return, i32 node_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA2AE5C478B96E3B6);
    ctx->Reset();

    ctx->Push(node_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success adjust_ambient_ped_spawn_densities_this_frame(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA76052DDA9BFC3E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success calculate_travel_distance_between_points(f32* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xADD95C7005C4A197);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_safe_coord_for_ped(bool* native_return, Vector3Wrapper& out_position_, f32 x_, f32 y_, f32 z_, bool on_ground_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB61C8E878A4199CA);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(on_ground_);
    ctx->Push(flags_);
    alt::INative::Vector3 alt_out_position_ { out_position_.x, 0, out_position_.y, 0, out_position_.z };
ctx->Push(&alt_out_position_);


    Success result = native->Invoke(ctx);
    if (result) {
        out_position_.x = alt_out_position_.x;
out_position_.y = alt_out_position_.y;
out_position_.z = alt_out_position_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_gps_blip_route_length(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBBB45C3CF5C8AA85);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_roads_in_area(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, bool node_enabled_, bool unknown2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBF1A602B5BA52FEE);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(node_enabled_);
    ctx->Push(unknown2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success load_all_path_nodes(bool* native_return, bool set_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC2AB6BFE34E92F8B);
    ctx->Reset();

    ctx->Push(set_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_gps_disabled_zone_at_index(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD0BC1C6FB18EE154);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_next_gps_disabled_zone_index(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD3A6A0EF48823A8C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_gps_disabled_zone(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDC20483CD3DD5201);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_paths_back_to_original(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE04B48F2CC926253);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_nth_closest_vehicle_node(bool* native_return, Vector3Wrapper& out_position_, f32 x_, f32 y_, f32 z_, i32 nth_closest_, i32 node_flags_, f32 unknown1_, f32 unknown2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE50E52416CCF948B);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(nth_closest_);
    ctx->Push(node_flags_);
    ctx->Push(unknown1_);
    ctx->Push(unknown2_);
    alt::INative::Vector3 alt_out_position_ { out_position_.x, 0, out_position_.y, 0, out_position_.z };
ctx->Push(&alt_out_position_);


    Success result = native->Invoke(ctx);
    if (result) {
        out_position_.x = alt_out_position_.x;
out_position_.y = alt_out_position_.y;
out_position_.z = alt_out_position_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_pos_along_gps_type_route(bool* native_return, Vector3Wrapper& result_, bool p1_, f32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF3162836C28F9DA5);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    alt::INative::Vector3 alt_result_ { result_.x, 0, result_.y, 0, result_.z };
ctx->Push(&alt_result_);


    Success result = native->Invoke(ctx);
    if (result) {
        result_.x = alt_result_.x;
result_.y = alt_result_.y;
result_.z = alt_result_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_allow_stream_heist_island_nodes(i32 type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF74B1FFA4A15FBEA);
    ctx->Reset();

    ctx->Push(type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success are_nodes_loaded_for_area(bool* native_return, f32 x1_, f32 y1_, f32 x2_, f32 y2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF7B79A50B905A30D);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(x2_);
    ctx->Push(y2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_navmesh_loaded_in_area(bool* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF813C7E63F9062A5);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success generate_directions_to_coord(i32* native_return, i32* direction_, f32* p5_, f32* dist_to_nx_junction_, f32 x_, f32 y_, f32 z_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF90125F1F79ECDF8);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p3_);
    ctx->Push(direction_);
    ctx->Push(p5_);
    ctx->Push(dist_to_nx_junction_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success add_navmesh_blocking_object(i32* native_return, f32 p0_, f32 p1_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, f32 p6_, bool p7_, i32 p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFCD5C8E06E502F5A);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_closest_vehicle_node_with_heading(bool* native_return, Vector3Wrapper& out_position_, f32* out_heading_, f32 x_, f32 y_, f32 z_, i32 node_type_, f32 p6_, f32 p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFF071FB798B803B0);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(node_type_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    alt::INative::Vector3 alt_out_position_ { out_position_.x, 0, out_position_.y, 0, out_position_.z };
ctx->Push(&alt_out_position_);

    ctx->Push(out_heading_);

    Success result = native->Invoke(ctx);
    if (result) {
        out_position_.x = alt_out_position_.x;
out_position_.y = alt_out_position_.y;
out_position_.z = alt_out_position_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success reset_facial_idle_anim(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x007FDE5A7897E426);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_using_action_mode(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x00E73468D085F745);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_makeup_tint_color(i32* out_r_, i32* out_g_, i32* out_b_, i32 makeup_color_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x013E5CFC38CD5387);
    ctx->Reset();

    ctx->Push(makeup_color_index_);
    ctx->Push(out_r_);
    ctx->Push(out_g_);
    ctx->Push(out_b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_min_move_blend_ratio(u32 ped_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x01A898D26E2333DD);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_ragdoll_force_fall(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x01F6594B923B9251);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_on_foot(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x01FEE67DB37F59B2);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_as_enemy(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x02A0C9720B854BFA);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_ducking(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x030983CA930B692D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_can_ped_be_grabbed_by_script(bool* native_return, u32 ped_, bool p1_, bool p2_, bool p3_, bool p4_, bool p5_, bool p6_, bool p7_, i32 p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x03EA03AF85A85CB7);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_texture_variation(i32* native_return, u32 ped_, i32 component_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x04A355E041E004E6);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(component_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_ped_lipstick_tint_for_barber(bool* native_return, i32 color_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0525A2C2562F3CD4);
    ctx->Reset();

    ctx->Push(color_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_target_ped_in_perception_area(bool* native_return, u32 ped_, u32 target_ped_, f32 p2_, f32 p3_, f32 p4_, f32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x06087579E7AA85A9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(target_ped_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_allow_lockon_to_ped_if_friendly(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x061CB768363D6424);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_target_loss_response(u32 ped_, i32 response_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0703B9079823DA4A);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(response_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_any_ped_near_point(bool* native_return, f32 x_, f32 y_, f32 z_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x083961498679DC9F);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_move_rate_override(u32 ped_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x085BF80FA50A39D1);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_ped_prop(u32 ped_, i32 prop_id_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0943E5B8E078E76E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(prop_id_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_blush_facepaint_tint_for_barber(bool* native_return, i32 color_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x09E7ECA981D9B210);
    ctx->Reset();

    ctx->Push(color_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_motion_blur(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A986918B102B448);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_move_rate_in_water_override(u32 ped_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0B3E35AC043707D9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_in_any_police_vehicle(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0BD04E29640C9C12);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_group_member_passenger_index(u32 ped_, i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0BDDB8D9EC6BCF3C);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_ped_decorations(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0E5173C163976E38);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_can_play_ambient_base_anims(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0EB0585D15254740);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_treated_as_friendly(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0F62619393661D6E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_create_random_cops(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x102E68B2024D536D);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_enveff_cpv_add(u32 ped_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x110F526AB784111F);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_to_inform_respected_friends(u32 ped_, f32 radius_, i32 max_friends_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x112942C6E708F70B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(radius_);
    ctx->Push(max_friends_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_vaulting(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x117C70D1F5730B5E);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success was_ped_skeleton_updated(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x11B499C1E0FF8559);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success request_ragdoll_bounds_update(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1216E0BFA72CC703);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_a_player(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x12534C348C6CB68B);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_ped_parachute_pack_variation(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1280804F7CFD2D6C);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success can_ped_ragdoll(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x128F79EDCECE4FD5);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_force_footstep_update(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x129466ED55140F8D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_blend_from_parents(u32 ped_, i32 p1_, i32 p2_, f32 p3_, f32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x137BBD05230DB22D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_action_mode_asset(const CStringPtr& asset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x13E940F88470FA51);
    ctx->Reset();

    ctx->Push(asset_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_taking_off_helmet(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x14590DDBEDB1EC85);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_emissive_scale(f32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1461B28A06717D68);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success clone_ped_to_target_alt(u32 ped_, u32 target_ped_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x148B08C2D2ACB884);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(target_ped_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_scenario_peds_to_be_returned_by_next_command(bool value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x14F19A8782C8071E);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_steers_around_objects(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1509C089ADC208BF);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_ped_to_open_parachute(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x16E42E800B472221);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_cop_ped_in_area3d(bool* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x16EC4839969F9F5E);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_cause_of_death(u32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x16FFE42AB2D2DC59);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_ped_bone_coords(Vector3Wrapper& native_return, u32 ped_, i32 bone_id_, f32 offset_x_, f32 offset_y_, f32 offset_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x17C07FC640E86B4E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(bone_id_);
    ctx->Push(offset_x_);
    ctx->Push(offset_y_);
    ctx->Push(offset_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success get_melee_target_for_ped(u32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x18A3E9EE1297FD39);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_ped_config_flag(u32 ped_, i32 flag_id_, bool value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1913FE4CBF41C463);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(flag_id_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ladder_climb_input_state(u32 ped_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1A330D297AAC6BC1);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ai_weapon_damage_modifier(f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1B1E2A40A65B8521);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_scenario_blocking_area(i32* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, bool p6_, bool p7_, bool p8_, bool p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1B5C85C612E5256E);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_ped_using_scenario(bool* native_return, u32 ped_, const CStringPtr& scenario_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1BF094736DD62C2E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(scenario_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ped_hanging_on_to_vehicle(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1C86D8AEF8254B78);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_can_smash_glass(u32 ped_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1CCE141467FF42A2);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_group_formation_spacing(i32 group_id_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1D9D45004C28C916);
    ctx->Reset();

    ctx->Push(group_id_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_fm_male_shop_ped_apparel_item_index(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1E77FA7A62EE6C4C);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_ped_time_of_death(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1E98817B311AE98A);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_steers_around_dead_bodies(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2016C603D6B8987C);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_ped_strafe_clipset(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x20510814175EA477);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_ragdoll_bone_index(i32* native_return, u32 ped_, i32 bone_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2057EF813397A772);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(bone_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success force_ped_ai_and_animation_update(u32 ped_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2208438012482A1A);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_ped_in_vehicle_context(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x22EF8FF8778030EB);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_nearby_peds(i32* native_return, void* size_and_peds_, u32 ped_, i32 ignore_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x23F8F5FC7E8C4A6B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(ignore_);
    ctx->Push(size_and_peds_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_ped_reloading(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x24B100C68C645951);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success trigger_ped_scenario_panicexittoflee(bool* native_return, i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x25361A96E0F7E419);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_synchronized_scene_running(bool* native_return, i32 scene_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x25D39B935A038A26);
    ctx->Reset();

    ctx->Push(scene_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_weapon_movement_clipset(u32 ped_, const CStringPtr& clip_set_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2622E35B77D3ACA2);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(clip_set_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_component_variation(u32 ped_, i32 component_id_, i32 drawable_id_, i32 texture_id_, i32 palette_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x262B14F48D29DE80);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(component_id_);
    ctx->Push(drawable_id_);
    ctx->Push(texture_id_);
    ctx->Push(palette_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ragdoll_blocking_flags(u32 ped_, i32 blocking_flag_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x26695EC767728D84);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(blocking_flag_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_opening_door(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x26AF0E8E30BD2A2C);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_helmet_prop_index(u32 ped_, i32 prop_index_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x26D83693ED99291C);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(prop_index_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success attach_synchronized_scene_to_entity(i32 scene_i_d_, u32 entity_, i32 bone_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x272E4723B56A3B96);
    ctx->Reset();

    ctx->Push(scene_i_d_);
    ctx->Push(entity_);
    ctx->Push(bone_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_corpse_ragdoll_friction(u32 ped_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2735233A786B1BEF);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_head_blend_data(bool* native_return, void* head_blend_data_, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2746BD9D88C5C5D0);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(head_blend_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_number_of_ped_drawable_variations(i32* native_return, u32 ped_, i32 component_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x27561561732A7842);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(component_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_sweat(u32 ped_, f32 sweat_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x27B0405F59637D1F);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(sweat_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success spawnpoints_get_search_result(f32* x_, f32* y_, f32* z_, i32 random_int_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x280C7E3AC7F56E90);
    ctx->Reset();

    ctx->Push(random_int_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_scenario_peds_spawn_in_sphere_area(f32 x_, f32 y_, f32 z_, f32 range_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x28157D43CF600981);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(range_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_steer_bias(u32 ped_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x288DF530C92DAD6F);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_action_mode_asset(const CStringPtr& asset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x290E2780BB7AA598);
    ctx->Reset();

    ctx->Push(asset_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_in_any_heli(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x298B91AE825E5705);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_strafe_clipset(u32 ped_, const CStringPtr& clip_set_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x29A28F3F8CF6D854);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(clip_set_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_stealth_mode_asset(const CStringPtr& asset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2A0A62FCDEE16D4F);
    ctx->Reset();

    ctx->Push(asset_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_dies_in_vehicle(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2A30922C90C9B42C);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_as_group_leader(u32 ped_, i32 group_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2A7819605465FBCE);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(group_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_running_mobile_phone_task(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2AFE52F782F25775);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_preload_prop_data(i32* native_return, u32 ped_, i32 component_id_, i32 drawable_id_, i32 texture_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B16A3BFF1FBCE49);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(component_id_);
    ctx->Push(drawable_id_);
    ctx->Push(texture_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_ao_blob_rendering(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B5AA717A181FB4C);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success mark_ped_decorations_as_cloned_from_local_player(u32 ped_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B694AFCF64E6994);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_ped_vehicle_visibility_tracking(u32 ped_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2BC338A7B21F4608);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success explode_ped_head(u32 ped_, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2D05CED3A38D0F3A);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_visual_field_min_angle(u32 ped_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2DB492222FB21E26);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success spawnpoints_start_search(f32 p0_, f32 p1_, f32 p2_, f32 p3_, f32 p4_, i32 interior_flags_, f32 scale_, i32 duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2DF9038C90AD5264);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(interior_flags_);
    ctx->Push(scale_);
    ctx->Push(duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success can_ped_shuffle_to_or_from_extra_seat(bool* native_return, i32* p1_, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2DFC81C9B9608549);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_ped_non_creation_area() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2E05208086BA0651);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_in_any_boat(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2E0E1C2B4F6CB339);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_can_teleport_to_group_leader(u32 ped_handle_, i32 group_handle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2E2F4240B3F24647);
    ctx->Reset();

    ctx->Push(ped_handle_);
    ctx->Push(group_handle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cop_perception_overrides(f32 seeing_range_, f32 seeing_range_peripheral_, f32 hearing_range_, f32 visual_field_min_azimuth_angle_, f32 visual_field_max_azimuth_angle_, f32 field_of_gaze_max_angle_, f32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2F074C904D85129E);
    ctx->Reset();

    ctx->Push(seeing_range_);
    ctx->Push(seeing_range_peripheral_);
    ctx->Push(hearing_range_);
    ctx->Push(visual_field_min_azimuth_angle_);
    ctx->Push(visual_field_max_azimuth_angle_);
    ctx->Push(field_of_gaze_max_angle_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success register_target(u32 ped_, u32 target_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2F25D9AEFA34FBA2);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(target_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_treat_as_ambient_ped_for_driver_lockon(u32 ped_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2F3C3D9F50681DE4);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_scenario_blocking_area(i32 p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x31D16B74C6E29D66);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_target_from_combat_ped(u32* native_return, u32 ped_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x32C27A11307B01CC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success apply_ped_blood_by_zone(u32 ped_, i32 p1_, f32 p2_, f32 p3_, const CStringPtr& p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3311E47B91EDCBBC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_dead_or_dying(bool* native_return, u32 ped_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3317DEDB88C95038);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_to_load_cover(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x332B562EEDA62399);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_parachute_tint_index(u32 ped_, i32 tint_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x333FC8DB079B7186);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(tint_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success count_peds_in_combat_with_target_within_radius(i32* native_return, u32 ped_, f32 x_, f32 y_, f32 z_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x336B3D200AB007CB);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_is_ignored_by_auto_open_doors(u32 ped_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x33A60D8BDD6E508C);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_hearing_range(u32 ped_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x33A8F7F7D5F7F33C);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_shooting(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x34616828CD07F1A1);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_capsule(u32 ped_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x364DF566EC833DE2);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_time_ped_damaged_by_weapon(i32* native_return, u32 ped_, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x36B77BB84687C318);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_scuba_gear_variation(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x36C6984C3ED0C911);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_switching_weapon(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3795688A307E1EB6);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_accuracy(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x37F4AD56ECBC0CD6);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_synchronized_scene_hold_last_frame(i32 scene_i_d_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x394B9CD12435C981);
    ctx->Reset();

    ctx->Push(scene_i_d_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success apply_ped_damage_decal(u32 ped_, i32 damage_zone_, f32 x_offset_, f32 y_offset_, f32 heading_, f32 scale_, f32 alpha_, i32 unk_variation_, bool fade_in_, const CStringPtr& decal_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x397C38AA7B4A5F83);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(damage_zone_);
    ctx->Push(x_offset_);
    ctx->Push(y_offset_);
    ctx->Push(heading_);
    ctx->Push(scale_);
    ctx->Push(alpha_);
    ctx->Push(unk_variation_);
    ctx->Push(fade_in_);
    ctx->Push(decal_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_aiming_from_cover(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3998B1276A3300E5);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_preload_variation_data(i32* native_return, u32 ped_, i32 slot_, i32 drawable_id_, i32 texture_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x39D55A620FCB6A3A);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(slot_);
    ctx->Push(drawable_id_);
    ctx->Push(texture_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success reset_ped_visible_damage(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3AC1F7B898F30C05);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_visual_field_center_angle(u32 ped_, f32 angle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3B6405E8AB34A907);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(angle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_allow_vehicles_override(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3C028C636A414ED9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_defensive_area_position(Vector3Wrapper& native_return, u32 ped_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3C06B8786DD94CD1);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success set_ped_combat_range(u32 ped_, i32 combat_range_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3C606747B23E497B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(combat_range_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success spawnpoints_is_search_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3C67506996001F5E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_never_leaves_group(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3DBFC55D5C9BB447);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_lipstick_tint_for_creator(bool* native_return, i32 color_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3E802F11FBE27674);
    ctx->Reset();

    ctx->Push(color_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success can_create_random_ped(bool* native_return, bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3E8349C08E4B82E4);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_will_only_attack_wanted_player(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3E9679C1DFCF422C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_bone_index(i32* native_return, u32 ped_, i32 bone_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3F428D08BE5AAE31);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(bone_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_ped_money(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3F69145BBA87BAE7);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_helmet_visor_prop_indices(u32 ped_, bool p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3F7325574E41B44D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_group_separation_range(i32 group_handle_, f32 separation_range_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4102C7858CFEE4E4);
    ctx->Reset();

    ctx->Push(group_handle_);
    ctx->Push(separation_range_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_landing(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x412F1364FA066CFB);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_defensive_area_direction(u32 ped_, f32 p1_, f32 p2_, f32 p3_, bool p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x413C6C763A4AFFAD);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_evasive_diving(bool* native_return, u32* evading_entity_, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x414641C26E105898);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(evading_entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success create_nm_message(bool start_immediately_, i32 message_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x418EF2A1BCE56685);
    ctx->Reset();

    ctx->Push(start_immediately_);
    ctx->Push(message_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_should_ignore_scenario_exit_collision_checks(u32 ped_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x425AECF167663F48);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_relationship_group_default_hash(u32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x42FDD0F017B1E38E);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_ped_can_be_targeted_without_los(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4328652AE5769C71);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_max_move_blend_ratio(u32 ped_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x433083750C5E064A);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_jumping_out_of_vehicle(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x433DDFFE2044B636);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_max_time_in_water(u32 ped_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x43C851690662113D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_create_random_cops_on_scenarios(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x444CB7D7DBE6973D);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success register_pedheadshot(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4462658788425076);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_wetness_height(u32 ped_, f32 height_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x44CB6447D2571AA0);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(height_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_trying_to_enter_a_locked_vehicle(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x44D28D5DDFE5F68C);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_helmet_stored_hat_prop_index(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x451294E859ECC018);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_ped_doing_a_beast_jump(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x451D05012CCEC234);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success knock_ped_off_vehicle(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x45BBCBA77C29A841);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_default_component_variation(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x45EEE61580806D63);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_on_mount(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x460BC76A0E10655E);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success finalize_head_blend(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4668D80430D6C299);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ped_has_sexiness_flag_set(bool* native_return, u32 ped_, i32 sexiness_flag_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x46B05BCAE43856B0);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(sexiness_flag_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success apply_ped_damage_pack(u32 ped_, const CStringPtr& damage_pack_, f32 damage_, f32 mult_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x46DF918788CB093F);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(damage_pack_.ptr);
    ctx->Push(damage_);
    ctx->Push(mult_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_ai_melee_weapon_damage_modifier() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x46E56A7CD1D63C3F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_steers_around_peds(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x46F2193B3AD1D891);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_max_health(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4700A416E8324EF3);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success instantly_fill_ped_population() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4759CC730F947C81);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_ragdoll(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x47E4E977581C5B55);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_hair_tint_color(i32* out_r_, i32* out_g_, i32* out_b_, i32 hair_color_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4852FC386E2E1BB5);
    ctx->Reset();

    ctx->Push(hair_color_index_);
    ctx->Push(out_r_);
    ctx->Push(out_g_);
    ctx->Push(out_b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_in_combat(bool* native_return, u32 ped_, u32 target_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4859F1FC66A6278E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(target_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_head_overlay(u32 ped_, i32 overlay_i_d_, i32 index_, f32 opacity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x48F44967FA05CC1E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(overlay_i_d_);
    ctx->Push(index_);
    ctx->Push(opacity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_head_overlay_tint(u32 ped_, i32 overlay_i_d_, i32 color_type_, i32 color_i_d_, i32 second_color_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x497BF74A7B9CB952);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(overlay_i_d_);
    ctx->Push(color_type_);
    ctx->Push(color_i_d_);
    ctx->Push(second_color_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_allow_minor_reactions_as_mission_ped(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x49E50BDB8BA4DAB2);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_jacking(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4AE4FF911DFB61DA);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_ped_drive_by_clipset_override(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4AFE3690D7E0B5AC);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_anim_initial_offset_rotation(Vector3Wrapper& native_return, const CStringPtr& anim_dict_, const CStringPtr& anim_name_, f32 x_, f32 y_, f32 z_, f32 x_rot_, f32 y_rot_, f32 z_rot_, f32 p8_, i32 p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4B805E6046EE9E47);
    ctx->Reset();

    ctx->Push(anim_dict_.ptr);
    ctx->Push(anim_name_.ptr);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(x_rot_);
    ctx->Push(y_rot_);
    ctx->Push(z_rot_);
    ctx->Push(p8_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success is_ped_tracked(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4C5E1F087CD10BB7);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_hair_tint(u32 ped_, i32 color_i_d_, i32 highlight_color_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4CFFC65454C93A49);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(color_i_d_);
    ctx->Push(highlight_color_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_combat_movement(u32 ped_, i32 combat_movement_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4D9CA1009AFBD057);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(combat_movement_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_in_melee_combat(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4E209B2C1EAD5159);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_emissive_scale(u32 ped_, f32 intensity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4E90D746056E273D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(intensity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_defensive_area_attached_to_ped(u32 ped_, u32 attach_ped_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, f32 p6_, f32 p7_, f32 p8_, bool p9_, bool p10_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4EF47FE21698A8B6);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(attach_ped_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(p10_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_bounds_orientation(u32 ped_, f32 p1_, f32 p2_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4F5F651ACCC9C4CF);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_being_stunned(bool* native_return, u32 ped_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4FBACCE3B4138EE8);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_scripted_conversion_coord_this_frame(f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5086C7843552CF85);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_head_blend_eye_color(u32 ped_, i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x50B56988B170AFDF);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_tracked_ped_pixelcount(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x511F1A683387C7E2);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_ped_as_group_member(u32* native_return, i32 group_i_d_, i32 member_number_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x51455483CF23ED97);
    ctx->Reset();

    ctx->Push(group_i_d_);
    ctx->Push(member_number_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success can_knock_ped_off_vehicle(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x51AC07A44D4F5B8A);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_ped_damage_decal_by_zone(u32 ped_, i32 p1_, const CStringPtr& p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x523C79AEEFCC4A2A);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(p2_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_highly_perceptive(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x52D59AB61DDC05DD);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_combat_float(f32* native_return, u32 ped_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x52DFF8A10508090A);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_ped_in_vehicle_context(u32 ped_, u32 context_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x530071295899A8C6);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(context_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_stopped(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x530944F6F4B8A214);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ped_climbing(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x53E8CB4F48BFE623);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success count_peds_in_combat_with_target(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5407B7288D0478B7);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_jack_target(u32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5486A79D9FBD342D);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success give_ped_helmet(u32 ped_, bool cannot_remove_, i32 helmet_flag_, i32 texture_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x54C7C4A94367717E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(cannot_remove_);
    ctx->Push(helmet_flag_);
    ctx->Push(texture_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_diving(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5527B8246FEF9B11);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_helmet(u32 ped_, bool can_wear_helmet_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x560A43136EB58105);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(can_wear_helmet_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_relationship_group_affects_wanted_level(u32 group_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5615E0C5EB2BC6E2);
    ctx->Reset();

    ctx->Push(group_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_ped_decoration_from_hashes_in_corona(u32 ped_, u32 collection_, u32 overlay_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5619BFA07CFD7833);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(collection_);
    ctx->Push(overlay_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_facial_clipset(u32 ped_, const CStringPtr& anim_dict_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5687C7F05B39E401);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(anim_dict_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_dies_in_water(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x56CEF0AC79073BDE);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_ped_blood_damage_by_zone(u32 ped_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x56E3B78C5408D9F4);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_increased_avoidance_radius(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x570389D1C3DE3C6B);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_blocks_pathing_when_dead(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x576594E8D64375E2);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_using_any_scenario(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x57AB4A3080F85143);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ped_in_group(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5891CAC5D4ACFF74);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_scripted_anim_seat_offset(u32 ped_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5917BBA32D06C230);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_hurt(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5983BB449D7FDB12);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success suppress_ambient_ped_aggressive_cleanup_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5A7F62FDA59759BD);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success release_ped_preload_variation_data(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5AAB586FFEC0FD96);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_should_ignore_scenario_nav_checks(i32 p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5B6010B3CBC29095);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_armour_to_ped(u32 ped_, i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5BA652A0CD14DF2F);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_dies_when_injured(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5BA7919BED300023);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_as_group_leader(u32* native_return, i32 group_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5CCE68DBD5FE93EC);
    ctx->Reset();

    ctx->Push(group_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success is_ped_headtracking_ped(bool* native_return, u32 ped1_, u32 ped2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5CD3CB88A7F8850D);
    ctx->Reset();

    ctx->Push(ped1_);
    ctx->Push(ped2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success release_pedheadshot_img_upload(i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5D517B27CF6ECD04);
    ctx->Reset();

    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_relationship_between_groups(i32 relationship_, u32 group1_, u32 group2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5E29243FB56FC6D4);
    ctx->Reset();

    ctx->Push(relationship_);
    ctx->Push(group1_);
    ctx->Push(group2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success can_create_random_cops(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5EE2CAFF7F17770D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_head_blend_num_heads(i32* native_return, i32 type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5EF37013A6539C9D);
    ctx->Reset();

    ctx->Push(type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success add_ped_decoration_from_hashes(u32 ped_, u32 collection_, u32 overlay_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5F5D1665E352A839);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(collection_);
    ctx->Push(overlay_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_number_of_ped_prop_drawable_variations(i32* native_return, u32 ped_, i32 prop_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5FAF9754E789FB47);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(prop_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_ped_in_any_plane(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5FFF4CFC74D8FB80);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success disable_ped_heatscale_override(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x600048C60D5C2C51);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_blush_tint_for_barber(bool* native_return, i32 color_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x604E810189EE3A59);
    ctx->Reset();

    ctx->Push(color_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_vehicle_ped_is_using(u32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6094AD011A2EA87D);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success is_ped_in_cover(bool* native_return, u32 ped_, bool except_use_weapon_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x60DFD0691A170B88);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(except_use_weapon_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_shoot_rate(u32 ped_, i32 shoot_rate_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x614DA022990752DC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(shoot_rate_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success was_ped_knocked_out(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x61767F73EACEED21);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_synchronized_scene_looped(bool* native_return, i32 scene_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x62522002E0C391BA);
    ctx->Reset();

    ctx->Push(scene_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ped_responding_to_event(bool* native_return, u32 ped_, i32 event_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x625B774D75C87068);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(event_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success hide_ped_blood_damage_by_zone(u32 ped_, i32 p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x62AB793144DE75DC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_synchronized_scene_at_map_object(i32* native_return, f32 x_, f32 y_, f32 z_, f32 radius_, u32 object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x62EC273D00187DCA);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_can_play_ambient_anims(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6373D1349925A70E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_cover_point_for_ped(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x637822DC2AFEEBF8);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_can_be_targeted_when_injured(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x638C03B0F9878F57);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_group_formation_default_spacing(i32 group_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x63DAB4CCB3273205);
    ctx->Reset();

    ctx->Push(group_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_can_be_targetted(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x63F58F7C80513AAD);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_ped_head_blend_finished(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x654CD0A825161131);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_dies_in_water(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x65671A4FB8218930);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_ped_env_dirt(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6585D955A68452A5);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ai_melee_weapon_damage_modifier(f32 modifier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x66460DEDDD417254);
    ctx->Reset();

    ctx->Push(modifier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_can_torso_vehicle_ik(u32 ped_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6647C5F6F5792496);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_ped_preload_variation_data_finished(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x66680A92700F43DF);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clone_ped_alt(u32* native_return, u32 ped_, bool is_network_, bool b_script_host_ped_, bool copy_head_blend_flag_, bool p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x668FD40BCBA5DE48);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(is_network_);
    ctx->Push(b_script_host_ped_);
    ctx->Push(copy_head_blend_flag_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_ped_can_be_targetted_by_player(u32 ped_, u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x66B57B72E0836A76);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_on_vehicle(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x67722AEB798E5FAB);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_drawable_variation(i32* native_return, u32 ped_, i32 component_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x67F3780DD425D4FC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(component_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_any_hostile_ped_near_point(bool* native_return, u32 ped_, f32 x_, f32 y_, f32 z_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x68772DB2B2526F9F);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_ped_stored_hat_prop(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x687C0B594907D2E8);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_head_blend_first_index(i32* native_return, i32 type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x68D353AB88B97E0C);
    ctx->Reset();

    ctx->Push(type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success apply_damage_to_ped(u32 ped_, i32 damage_amount_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x697157CED63F18D4);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(damage_amount_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_in_high_cover(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6A03BF943D767C93);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_player_ped_is_following(u32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6A3975DEA89F9A17);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_synchronized_scene_origin(i32 scene_i_d_, f32 x_, f32 y_, f32 z_, f32 roll_, f32 pitch_, f32 yaw_, bool p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6ACF6B7225801CD7);
    ctx->Reset();

    ctx->Push(scene_i_d_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(roll_);
    ctx->Push(pitch_);
    ctx->Push(yaw_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ambient_peds_drop_money(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6B0E6172C9A4D902);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_can_evasive_dive(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6B7A646C242A7059);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_max_time_underwater(u32 ped_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6BA428C528D9E522);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_can_arm_ik(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6C3B4D6D13B4C841);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_alternate_walk_anim(u32 ped_, const CStringPtr& anim_dict_, const CStringPtr& anim_name_, f32 p3_, bool p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6C60394CB4F75E9A);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(anim_dict_.ptr);
    ctx->Push(anim_name_.ptr);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success can_ped_see_hated_ped(bool* native_return, u32 ped1_, u32 ped2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6CD5A433374D4CFB);
    ctx->Reset();

    ctx->Push(ped1_);
    ctx->Push(ped2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success detach_synchronized_scene(i32 scene_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6D38F1F04CBB37EA);
    ctx->Reset();

    ctx->Push(scene_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_male(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6D9F5FAA7488BA46);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ped_in_any_taxi(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6E575D6A898AB852);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_scripted_scenario_ped_using_conditional_anim(bool* native_return, u32 ped_, const CStringPtr& anim_dict_, const CStringPtr& anim_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6EC47A344923E1ED);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(anim_dict_.ptr);
    ctx->Push(anim_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_seat_ped_is_trying_to_enter(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6F4C85ACD641BCD2);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_ped_in_any_train(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6F972C1AB75A1ED0);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success knock_off_ped_prop(u32 ped_, bool p1_, bool p2_, bool p3_, bool p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6FD7816A36615F48);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_visual_field_max_angle(u32 ped_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x70793BDCA1E854D4);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_pedheadshot_ready(bool* native_return, i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7085228842B13A67);
    ctx->Reset();

    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_flee_attributes(u32 ped_, i32 attribute_flags_, bool enable_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x70A2D1137C8ED7C9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(attribute_flags_);
    ctx->Push(enable_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_disable_high_fall_death(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x711794453CFD692B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_micro_morph(u32 ped_, i32 index_, f32 scale_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x71A5C1DBA060049E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(index_);
    ctx->Push(scale_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success resurrect_ped(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x71BC8E838B9C6035);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_decorations_state(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x71EAB450D86954A1);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success update_ped_head_blend_data(u32 ped_, f32 shape_mix_, f32 skin_mix_, f32 third_mix_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x723538F61C647C5A);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(shape_mix_);
    ctx->Push(skin_mix_);
    ctx->Push(third_mix_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_facial_idle_anim_override(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x726256CC1EEB182F);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_ped_injured_on_ground_behaviour(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x733C87D4CE22BEA2);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_synchronized_scene_phase(i32 scene_i_d_, f32 phase_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x734292F4F0ABF6D0);
    ctx->Reset();

    ctx->Push(scene_i_d_);
    ctx->Push(phase_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success have_all_streaming_requests_completed(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7350823473013C02);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_can_leg_ik(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x73518ECE2485412B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_ped_defensive_area(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x74D4E028107450A9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_ped_use_small_bbox_visibility_tracking(u32 ped_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x75BA1CB3B7D40CAF);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_head_blend_eye_color(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x76BBA2CEE66D47E9);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_movement_mode_override(u32 ped_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x781DE8FA214E87D2);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_ped_preload_prop_data_finished(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x784002A632822099);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_cloth_pin_frames(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x78C4E9961DB3EB5B);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_visual_field_max_elevation_angle(u32 ped_, f32 angle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x78D0B67629D75856);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(angle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_in_model(bool* native_return, u32 ped_, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x796D90EFB19AA332);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_parachute_state(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x79CFD9827CC979B6);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_visual_field_min_elevation_angle(u32 ped_, f32 angle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7A276EB2C224D70F);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(angle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_scenario_ped_density_multiplier_this_frame(f32 p0_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7A556143A1C03898);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_can_be_knocked_off_vehicle(u32 ped_, i32 state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7A6535691B477C48);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_accuracy(u32 ped_, i32 accuracy_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7AEFB85C1D49DEB6);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(accuracy_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_stealth_movement(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7C2AC9CA66575FBF);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success does_group_exist(bool* native_return, i32 group_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7C6B0C22F9F40BBE);
    ctx->Reset();

    ctx->Push(group_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success request_ped_visibility_tracking(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7D7A2E43E74E2EB8);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_relationship_group_hash(u32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7DBDD04862D95F04);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success is_ped_in_parachute_free_fall(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7DCE8BDA0F1C1200);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success create_ped_inside_vehicle(u32* native_return, u32 vehicle_, i32 ped_type_, u32 model_hash_, i32 seat_, bool is_network_, bool b_script_host_ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7DD959874C1FD534);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(ped_type_);
    ctx->Push(model_hash_);
    ctx->Push(seat_);
    ctx->Push(is_network_);
    ctx->Push(b_script_host_ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success is_ped_shooting_in_area(bool* native_return, u32 ped_, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, bool p7_, bool p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7E9DFE24AC1E58EF);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(p7_);
    ctx->Push(p8_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_config_flag(bool* native_return, u32 ped_, i32 flag_id_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7EE53118C892B513);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(flag_id_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success was_ped_killed_by_takedown(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7F08E26039C7347C);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_synchronized_scene_hold_last_frame(bool* native_return, i32 scene_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7F2F4F13AC5257EF);
    ctx->Reset();

    ctx->Push(scene_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_generates_dead_body_events(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7FB17BA2E7DECA5B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_ped_fall_upper_body_clipset_override(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x80054D7FCC70EEC6);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_headtracking_entity(bool* native_return, u32 ped_, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x813A0A7C9D2E831F);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_vehicle_ped_is_trying_to_enter(u32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x814FA8BE5449445D);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success apply_ped_blood_damage_by_zone(u32 ped_, i32 p1_, f32 p2_, f32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x816F6981C60BF53B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_shader_ready(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x81AA517FBBA05D39);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_can_play_in_car_idles(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x820E9892A77E97CD);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_sitting_in_any_vehicle(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x826AA586EDB9FEF8);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_cloth_package_index(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x82A3D6D9CC2CB8E3);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_phone_palette_idx(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x83A169EABCDB10A2);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success apply_ped_blood(u32 ped_, i32 bone_index_, f32 x_rot_, f32 y_rot_, f32 z_rot_, const CStringPtr& wound_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x83F7E01C7B769A26);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(bone_index_);
    ctx->Push(x_rot_);
    ctx->Push(y_rot_);
    ctx->Push(z_rot_);
    ctx->Push(wound_type_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_preferred_cover_set(u32 ped_, i32 item_set_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8421EB4DA7E391B9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(item_set_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_in_cover_facing_left(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x845333B3150583AB);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ped_injured(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x84A2DD9AC37C35C1);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success has_ped_received_event(bool* native_return, u32 ped_, i32 event_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8507BCB710FA6DC0);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(event_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ped_being_stealth_killed(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x863B23EFDE9C5DF2);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_coords_no_gang(u32 ped_, f32 pos_x_, f32 pos_y_, f32 pos_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x87052FE446E07247);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_random_ped_at_coord(u32* native_return, f32 x_, f32 y_, f32 z_, f32 x_radius_, f32 y_radius_, f32 z_radius_, i32 ped_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x876046A8E3A4B71C);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(x_radius_);
    ctx->Push(y_radius_);
    ctx->Push(z_radius_);
    ctx->Push(ped_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success has_pedheadshot_img_upload_failed(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x876928DDDFCCC9CD);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ambient_law_ped_accuracy_modifier(f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x87DDEB611B329A9C);
    ctx->Reset();

    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_mp_light_enabled(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x88274C11CF0D866D);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_ped_alternate_walk_anim(u32 ped_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8844BBFCE30AA9E9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_stealth_movement(u32 ped_, bool p1_, const CStringPtr& action_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x88CBB5CEB96B7BD2);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(action_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_prop_index(i32* native_return, u32 ped_, i32 component_id_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x898CC20EA75BACD8);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(component_id_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success does_scenario_blocking_area_exists(bool* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8A24B067D175A7BD);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_create_random_cops_not_on_scenarios(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8A4986851C4EF6E7);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_parachute_landing_type(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8B9F1FC6AE8166C0);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success create_synchronized_scene(i32* native_return, f32 x_, f32 y_, f32 z_, f32 roll_, f32 pitch_, f32 yaw_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8C18E0F9080ADD73);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(roll_);
    ctx->Push(pitch_);
    ctx->Push(yaw_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success create_parachute_bag_object(u32* native_return, u32 ped_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8C4F3BF23B6237DB);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success revive_injured_ped(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8D8ACD8388CD99CE);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_group_size(void* p1_, i32* size_in_members_, i32 group_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8DE69FE35CA09A45);
    ctx->Reset();

    ctx->Push(group_i_d_);
    ctx->Push(p1_);
    ctx->Push(size_in_members_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_group(i32 group_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8EB2F69076AF7053);
    ctx->Reset();

    ctx->Push(group_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_ped_last_damage_bone(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8EF6B7AC68E2F01B);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_number_of_ped_texture_variations(i32* native_return, u32 ped_, i32 component_id_, i32 drawable_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8F7156A3142A6BAD);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(component_id_);
    ctx->Push(drawable_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success clear_ped_blood_damage(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8FE22675A5A45817);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_group(i32* native_return, i32 unused_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x90370EBE0FEE1A3D);
    ctx->Reset();

    ctx->Push(unused_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_alternate_movement_anim(u32 ped_, i32 stance_, const CStringPtr& anim_dictionary_, const CStringPtr& animation_name_, f32 p4_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x90A43CC281FFAB46);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(stance_);
    ctx->Push(anim_dictionary_.ptr);
    ctx->Push(animation_name_.ptr);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_in_flying_vehicle(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9134873537FA419C);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_tracked_ped_visible(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x91C8E617F64188AC);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success remove_stealth_mode_asset(const CStringPtr& asset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9219857D21F0E842);
    ctx->Reset();

    ctx->Push(asset_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success register_hated_targets_around_ped(u32 ped_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9222F300BF8354FE);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_prop_index(u32 ped_, i32 component_id_, i32 drawable_id_, i32 texture_id_, bool attach_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x93376B65A266EB5F);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(component_id_);
    ctx->Push(drawable_id_);
    ctx->Push(texture_id_);
    ctx->Push(attach_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_source_of_death(u32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x93C8B64DEB84728C);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_ped_head_blend_data(u32 ped_, i32 shape_first_i_d_, i32 shape_second_i_d_, i32 shape_third_i_d_, i32 skin_first_i_d_, i32 skin_second_i_d_, i32 skin_third_i_d_, f32 shape_mix_, f32 skin_mix_, f32 third_mix_, bool is_parent_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9414E18B9434C2FE);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(shape_first_i_d_);
    ctx->Push(shape_second_i_d_);
    ctx->Push(shape_third_i_d_);
    ctx->Push(skin_first_i_d_);
    ctx->Push(skin_second_i_d_);
    ctx->Push(skin_third_i_d_);
    ctx->Push(shape_mix_);
    ctx->Push(skin_mix_);
    ctx->Push(third_mix_);
    ctx->Push(is_parent_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_on_any_bike(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x94495889E22C6479);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_armour(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9483AF821605B1D8);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_plays_head_on_horn_anim_when_dies_in_vehicle(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x94D94BF1A75AED3D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_vehicle_forced_seat_usage(u32 ped_, u32 vehicle_, i32 seat_index_, i32 flags_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x952F06BEECD775CC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(vehicle_);
    ctx->Push(seat_index_);
    ctx->Push(flags_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success register_pedheadshot_transparent(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x953563CE563143AF);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_density_multiplier_this_frame(f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x95E3D6257B166CF2);
    ctx->Reset();

    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success delete_ped(u32* ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9614299DCB53E54B);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_shoots_at_coord(u32 ped_, f32 x_, f32 y_, f32 z_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x96A05E4FB321B1BA);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success unregister_pedheadshot(i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x96B1361D9B24C2FF);
    ctx->Reset();

    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_keep_task(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x971D38760FBC02EF);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_enable_weapon_blocking(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x97A790315D3831FD);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_ped_weapon_movement_clipset(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x97B0DB5B4AA74E77);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_name_debug(u32 ped_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x98EFA132A4117BE1);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blocking_of_non_temporary_events_for_ambient_peds_this_frame(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9911F4A24485F653);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_in_any_vehicle(bool* native_return, u32 ped_, bool at_get_in_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x997ABD671D25CA0B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(at_get_in_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ped_being_jacked(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9A497FE2DF198913);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success toggle_scenario_ped_cower_in_place(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9A77DFD295E29B09);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_ped_is_in(u32* native_return, u32 ped_, bool include_entering_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9A9112A0FE9A4713);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(include_entering_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_ped_firing_pattern(u32 ped_, u32 pattern_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9AC577F5A12AD8A9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(pattern_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_coords_keep_vehicle(u32 ped_, f32 pos_x_, f32 pos_y_, f32 pos_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9AFEFF481A85AB2E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_peds_jacker(u32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9B128DC36C1E04CF);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success create_random_ped_as_driver(u32* native_return, u32 vehicle_, bool return_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9B62392B474F44A0);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(return_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success is_ped_group_member(bool* native_return, u32 ped_, i32 group_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9BB01E3834671191);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(group_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_enveff_scale(f32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9C14D30395A51A3C);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success can_ped_shuffle_to_or_from_turret_seat(bool* native_return, i32* p1_, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9C6A6C19B6C0C496);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_ped_wetness(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9C720776DAA43E7E);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_visual_field_peripheral_range(u32 ped_, f32 range_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9C74B0BC831B753A);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(range_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_sphere_defensive_area(u32 ped_, f32 x_, f32 y_, f32 z_, f32 radius_, bool p5_, bool p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D3151A373974804);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(p5_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_helmet_stored_hat_tex_index(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D728C1E12BF5518);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_motion_in_cover_clipset_override(u32 ped_, const CStringPtr& p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9DBA107B4937F809);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_swimming(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9DE327631295B4C2);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_mp_outfit_data_from_metadata(bool* native_return, void* p0_, void* p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9E30E91FB03A2CAF);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_relationship_between_groups(i32* native_return, u32 group1_, u32 group2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9E6B70061662AE5C);
    ctx->Reset();

    ctx->Push(group1_);
    ctx->Push(group2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_move_anims_blend_out(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9E8C908F41584ECD);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_as_group_member(u32 ped_, i32 group_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9F3480FE65DB31B5);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(group_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_going_into_cover(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9F65DBC537E59AD5);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_combat_attributes(u32 ped_, i32 attribute_id_, bool enabled_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9F7794730795E019);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(attribute_id_);
    ctx->Push(enabled_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_blocking_of_non_temporary_events(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9F8AA94D6D97DBF4);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_ped_ragdoll_timer(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9FA4664CF62E47E8);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_decoration_zone_from_hashes(i32* native_return, u32 collection_, u32 overlay_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9FD452BFBE7A7A8B);
    ctx->Reset();

    ctx->Push(collection_);
    ctx->Push(overlay_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_gravity(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9FF447B6B6AD960A);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_pedheadshot_valid(bool* native_return, i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA0A9668F158129A2);
    ctx->Reset();

    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_any_ped_shooting_in_area(bool* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, bool p6_, bool p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA0D3D71EA1086C55);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(p6_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success disable_head_blend_palette_color(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA21C118553BBDF02);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_should_play_normal_scenario_exit(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA3A9299C4F2ADB98);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_in_vehicle(bool* native_return, u32 ped_, u32 vehicle_, bool at_get_in_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA3EE4A07279BB9DB);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(vehicle_);
    ctx->Push(at_get_in_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_mobile_phone_to_ped_ear(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA3F3564A5B3646C0);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_no_time_delay_before_shot(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA52D5247A4227E14);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_cower_hash(u32 ped_, const CStringPtr& p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA549131166868ED3);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success spawnpoints_is_search_complete(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA586FBEB32A53DBB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_head_overlay(i32* native_return, u32 ped_, i32 overlay_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA60EF3B6461A4D43);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(overlay_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success spawnpoints_get_num_search_results(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA635C11B8C44AFC2);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_cloth_prone(i32 p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA660FAF550EB37E5);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_number_of_ped_prop_texture_variations(i32* native_return, u32 ped_, i32 prop_id_, i32 drawable_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA6E7F1CEB523E171);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(prop_id_);
    ctx->Push(drawable_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_driver_aggressiveness(u32 driver_, f32 aggressiveness_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA731F608CA104E3C);
    ctx->Reset();

    ctx->Push(driver_);
    ctx->Push(aggressiveness_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_ped_helmet(u32 ped_, bool instantly_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA7B2458D0AD6DED8);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(instantly_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_sitting_in_vehicle(bool* native_return, u32 ped_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA808AA1D79230FC2);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_is_avoided_by_others(i32 p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA9B61A329BFDCBEA);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_money(u32 ped_, i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA9C8960E8684C1B5);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_desired_heading(u32 ped_, f32 heading_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA5A7ECE2AA8FE70);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(heading_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_ped_movement_clipset(u32 ped_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA74EC0CB0AAEA2C);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_default_secondary_tint_for_barber(i32* native_return, i32 color_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAAA6A3698A69E048);
    ctx->Reset();

    ctx->Push(color_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_pinned_down(bool* native_return, u32 ped_, bool pinned_, i32 i_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAAD6D1ACF08F4612);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(pinned_);
    ctx->Push(i_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_wetness(u32 ped_, f32 wet_level_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAC0BB4D87777CAE2);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(wet_level_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_ped_elegantly(u32* ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAC6D445B994DF95E);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success tell_group_peds_in_area_to_attack(u32 ped_, i32 p1_, f32 p2_, u32 hash_, i32 p4_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAD27D957598E49E9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(hash_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_relationship_group_default_hash(u32 ped_, u32 hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xADB3F206518799E8);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_to_ragdoll(bool* native_return, u32 ped_, i32 time1_, i32 time2_, i32 ragdoll_type_, bool p4_, bool p5_, bool p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAE99FB955581844A);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(time1_);
    ctx->Push(time2_);
    ctx->Push(ragdoll_type_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_movement_clipset(u32 ped_, const CStringPtr& clip_set_, f32 transition_speed_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAF8A94EDE7712BEF);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(clip_set_.ptr);
    ctx->Push(transition_speed_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_reset_flag(bool* native_return, u32 ped_, i32 flag_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAF9E59B1B1FBF2A0);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(flag_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_upper_body_damage_only(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAFC976FD0580C7B3);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success drop_ambient_prop(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAFF4710E2A0A6C12);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_can_ragdoll(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB128377056A54E2A);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success give_ped_nm_message(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB158DFCCC56E5C5B);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_driver_ability(u32 driver_, f32 ability_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB195FFA8042FC5C3);
    ctx->Reset();

    ctx->Push(driver_);
    ctx->Push(ability_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_can_be_knocked_off_bike(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB282749D5E028163);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success spawnpoints_start_search_in_angled_area(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 width_, i32 interior_flags_, f32 scale_, i32 duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB2AFF10216DEFA2F);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(width_);
    ctx->Push(interior_flags_);
    ctx->Push(scale_);
    ctx->Push(duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_doing_driveby(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB2C086CC1BF8F2BF);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_health_pending_last_damage_event_override_flag(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB3352E018D6F89DF);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_can_attack_friendly(u32 ped_, bool toggle_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB3B1CB349FF9C75D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_any_ped_model_being_suppressed() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB47BD05FA66B40CF);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_random_ped(u32* native_return, f32 pos_x_, f32 pos_y_, f32 pos_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB4AC7D0CF06BFE8F);
    ctx->Reset();

    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success clear_ped_scuba_gear_variation(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB50EB4CCB29704AC);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_wetness_enabled_this_frame(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB5485E4907B53019);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_relationship_group(u32 group_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB6BA2444AB393DA2);
    ctx->Reset();

    ctx->Push(group_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_synchronized_scene_rate(i32 scene_i_d_, f32 rate_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB6C49F8A5E295A5D);
    ctx->Reset();

    ctx->Push(scene_i_d_);
    ctx->Push(rate_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success spawnpoints_get_search_result_flags(i32* p1_, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB782F8238512BAD5);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_sheltered(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB8B52E498014F5B0);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success can_create_random_driver(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB8EB95E5B4E56978);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ped_helmet_visor_up(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB9496CE47546DB2C);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ped_human(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB980061DA992779D);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ped_defensive_area_active(bool* native_return, u32 ped_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA63D9FE45412247);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_pos_from_fired_event(bool* native_return, void* out_data_, u32 ped_, i32 event_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA656A3BB01BDEA3);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(event_type_);
    ctx->Push(out_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success register_pedheadshot_hires(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA8805A1108A2515);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_can_play_gesture_anims(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBAF20C5432058024);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_as_cop(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBB03C38DD3FB7FFD);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_getting_into_a_vehicle(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBB062B2B5722478E);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success reset_ped_last_vehicle(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBB8DE8CF6A8DD8BB);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_fleeing(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBBCCE00B381F8482);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_get_out_upside_down_vehicle(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBC0ED94165A48BC2);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_anim_initial_offset_position(Vector3Wrapper& native_return, const CStringPtr& anim_dict_, const CStringPtr& anim_name_, f32 x_, f32 y_, f32 z_, f32 x_rot_, f32 y_rot_, f32 z_rot_, f32 p8_, i32 p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBE22B26DD764C040);
    ctx->Reset();

    ctx->Push(anim_dict_.ptr);
    ctx->Push(anim_name_.ptr);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(x_rot_);
    ctx->Push(y_rot_);
    ctx->Push(z_rot_);
    ctx->Push(p8_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success set_ped_can_be_targetted_by_team(u32 ped_, i32 team_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBF1CA77833E58F2C);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(team_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_relationship_between_groups(i32 relationship_, u32 group1_, u32 group2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBF25EB89375A37AD);
    ctx->Reset();

    ctx->Push(relationship_);
    ctx->Push(group1_);
    ctx->Push(group2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_enveff_scale(u32 ped_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBF29516833893561);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_swimming_under_water(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC024869A53992F34);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_helmet_flag(u32 ped_, i32 helmet_flag_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC0E78D5C2CE3EB25);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(helmet_flag_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_can_head_ik(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC11C18092C5530DC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_ped_weapon_firing_when_dropped(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC158D28142A34608);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_can_be_dragged_out(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC1670E958EEE24E5);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_reset_flag(u32 ped_, i32 flag_id_, bool do_reset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC1E8A365BF3B29F2);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(flag_id_);
    ctx->Push(do_reset_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_heatscale_override(u32 ped_, f32 heat_scale_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC1F6EBF9A3D55538);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(heat_scale_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success trigger_idle_animation_on_ped(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC2EE020F5FB4DB53);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_gesturing(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC30BDAEE47256C13);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ik_target(u32 ped_, i32 ik_index_, u32 entity_look_at_, i32 bone_look_at_, f32 offset_x_, f32 offset_y_, f32 offset_z_, i32 p7_, i32 blend_in_duration_, i32 blend_out_duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC32779C16FCEECD9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(ik_index_);
    ctx->Push(entity_look_at_);
    ctx->Push(bone_look_at_);
    ctx->Push(offset_x_);
    ctx->Push(offset_y_);
    ctx->Push(offset_z_);
    ctx->Push(p7_);
    ctx->Push(blend_in_duration_);
    ctx->Push(blend_out_duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_closest_ped(bool* native_return, u32* out_ped_, f32 x_, f32 y_, f32 z_, f32 radius_, bool p4_, bool p5_, bool p7_, bool p8_, i32 ped_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC33AB876A77F8164);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(ped_type_);
    ctx->Push(out_ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_leg_ik_mode(u32 ped_, i32 mode_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC396F5B86FF9FEBD);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(mode_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_random_props(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC44AA05345C992C6);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_can_peek_in_cover(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC514825C507E3736);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_enable_bound_ankles(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC52E0F855C58FC2E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_tint_index_for_last_gen_hair_texture(i32* native_return, u32 model_hash_, i32 drawable_id_, i32 texture_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC56FBF2F228E1DAC);
    ctx->Reset();

    ctx->Push(model_hash_);
    ctx->Push(drawable_id_);
    ctx->Push(texture_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_ped_planting_bomb(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC70B5FAE151982D8);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_combat_ability(u32 ped_, i32 ability_level_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC7622C0D36B2FDA8);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(ability_level_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_ped_motion_in_cover_clipset_override(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC79196DCB36F6121);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_can_be_shot_in_vehicle(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC7EF1BA83230BA07);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_angled_defensive_area(u32 ped_, f32 p1_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, f32 p6_, f32 p7_, bool p8_, bool p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC7F76DF27A5045A1);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_relationship_group_hash(u32 ped_, u32 hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC80A74AC829DDD92);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_random_component_variation(u32 ped_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC8A9481A01E63C28);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_model(bool* native_return, u32 ped_, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC9D55B1A358A5BF7);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_can_cower_in_cover(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCB7553CDCEF4A735);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_force_step_type(u32 ped_, bool p1_, i32 type_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCB968B53FC7F916D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(type_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_relationship_group_exist(bool* native_return, u32 group_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCC6E3B6BB69501F1);
    ctx->Reset();

    ctx->Push(group_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_head_blend_palette_color(u32 ped_, i32 r_, i32 g_, i32 b_, i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCC9682B8951C5229);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);
    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_ped_restricted_vehicle_visibility_tracking(u32 ped_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCD018C591F94CB43);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_primary_lookat(u32 ped_, u32 look_at_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCD17B554996A8D9E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(look_at_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_dead_ped_pickup_coords(Vector3Wrapper& native_return, u32 ped_, f32 p1_, f32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCD5003B097200F36);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success clear_all_ped_props(u32 ped_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCD8A7537A9B52F06);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success take_ownership_of_synchronized_scene(i32 scene_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCD9CC7E200A52A6F);
    ctx->Reset();

    ctx->Push(scene_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_group_formation(i32 group_id_, i32 formation_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCE2F5FC3AF7E8C1E);
    ctx->Reset();

    ctx->Push(group_id_);
    ctx->Push(formation_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_armour(u32 ped_, i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCEA04D83135264CC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_should_probe_for_scenario_exits_in_one_frame(i32 p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCEDA60A74219D064);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_jumping(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCEDABC5900A0BF97);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_head_overlay_num(i32* native_return, i32 overlay_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCF1CE768BB43480E);
    ctx->Reset();

    ctx->Push(overlay_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_ped_nearby_vehicles(i32* native_return, void* size_and_vehs_, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCFF869CBFA210D82);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(size_and_vehs_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_ped_ducking(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD125AE748725C6BC);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ped_running_melee_task(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD1871251F3B5ACD7);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_num_ped_makeup_tints(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD1F7CA1535D22818);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_enable_ped_enveff_scale(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD2C5AA0C0E8D0F1E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_zero_mass_in_collisions(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD33DAA36272177C4);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_scenario_blocking_areas() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD37401D78A929A49);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_ped(u32* native_return, i32 ped_type_, u32 model_hash_, f32 x_, f32 y_, f32 z_, f32 heading_, bool is_network_, bool b_script_host_ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD49F9B0955C367DE);
    ctx->Reset();

    ctx->Push(ped_type_);
    ctx->Push(model_hash_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(heading_);
    ctx->Push(is_network_);
    ctx->Push(b_script_host_ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_ped_enveff_color_modulator(u32 ped_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD69411AA0CEBF9E9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_prone(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD6A86331A537A7B9);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ped_facing_ped(bool* native_return, u32 ped_, u32 other_ped_, f32 angle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD71649DB0A545AA3);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(other_ped_);
    ctx->Push(angle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_dies_in_sinking_vehicle(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD718A22995E2B4BC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_last_damage_bone(bool* native_return, i32* out_bone_, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD75960F6BD9EA49C);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(out_bone_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_using_action_mode(u32 ped_, bool p1_, i32 p2_, const CStringPtr& action_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD75ACCF5E0FB5367);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(action_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_to_ragdoll_with_fall(bool* native_return, u32 ped_, i32 time_, i32 p2_, i32 ragdoll_type_, f32 x_, f32 y_, f32 z_, f32 velocity_, f32 p8_, f32 p9_, f32 p10_, f32 p11_, f32 p12_, f32 p13_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD76632D99E4966C8);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(time_);
    ctx->Push(p2_);
    ctx->Push(ragdoll_type_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(velocity_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(p10_);
    ctx->Push(p11_);
    ctx->Push(p12_);
    ctx->Push(p13_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_synchronized_scene_rate(f32* native_return, i32 scene_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD80932D577274D40);
    ctx->Reset();

    ctx->Push(scene_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success is_ped_fatally_injured(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD839450756ED5A80);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_ragdoll_blocking_flags(u32 ped_, i32 blocking_flag_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD86D101FCFD00A4B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(blocking_flag_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_pop_control_sphere_this_frame(f32 x_, f32 y_, f32 z_, f32 min_, f32 max_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD8C3BE3EE94CAF2D);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(min_);
    ctx->Push(max_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_ped_alternate_movement_anim(u32 ped_, i32 stance_, f32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD8D19675ED5FBDCE);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(stance_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_synchronized_scene_looped(i32 scene_i_d_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD9A897A4C6C2974F);
    ctx->Reset();

    ctx->Push(scene_i_d_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_allowed_to_duck(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDA1F1B7BE1A8766F);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_pedheadshot_txd_string(CStringPtr& native_return, i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDB4EACD4AD0A5D6B);
    ctx->Reset();

    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success set_ped_alertness(u32 ped_, i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDBA71115ED9941A6);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_lod_multiplier(u32 ped_, f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDC2C5C242AAC342B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_performing_melee_action(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDCCA191DF9980FD7);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_gesture_group(u32 ped_, const CStringPtr& anim_group_gesture_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDDF803377F94AAA8);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(anim_group_gesture_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_combat_movement(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDEA92412FCAEB3F5);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_driver_racing_modifier(u32 driver_, f32 modifier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDED5AF5A0EA4B297);
    ctx->Reset();

    ctx->Push(driver_);
    ctx->Push(modifier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_enable_handcuffs(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDF1AF8B5D56542FA);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_can_ragdoll_from_player_impact(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDF993EE5E90ABA25);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_disable_ped_map_collision(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDFE68C4B787E1BFB);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_conversation_ped_dead(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE0A0AEC214B1FABA);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_extracted_displacement(Vector3Wrapper& native_return, u32 ped_, bool world_space_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE0AF41401ADF87E3);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(world_space_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success is_ped_hair_tint_for_barber(bool* native_return, i32 color_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE0D36E5D9E99CC21);
    ctx->Reset();

    ctx->Push(color_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_prop_texture_index(i32* native_return, u32 ped_, i32 component_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE131A28626F81AB2);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(component_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_model_is_suppressed(u32 model_hash_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE163A4BCE4DE6F11);
    ctx->Reset();

    ctx->Push(model_hash_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_facial_anim(u32 ped_, const CStringPtr& anim_name_, const CStringPtr& anim_dict_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE1E65CA8AC9C00ED);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(anim_name_.ptr);
    ctx->Push(anim_dict_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_ped_decorations_leave_scars(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE3B27E70CEAB9F0C);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_running_ragdoll_task(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE3B6097CC25AA69E);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_palette_variation(i32* native_return, u32 ped_, i32 component_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE3DD5F2A84B42281);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(component_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success block_ped_from_generating_dead_body_events_when_dead(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE43A13C9E4CCCBCF);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_defensive_sphere_attached_to_vehicle(u32 ped_, u32 target_, f32 x_offset_, f32 y_offset_, f32 z_offset_, f32 radius_, bool p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE4723DB6E736CCFF);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(target_);
    ctx->Push(x_offset_);
    ctx->Push(y_offset_);
    ctx->Push(z_offset_);
    ctx->Push(radius_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_synchronized_scene_phase(f32* native_return, i32 scene_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE4A310B1D7FA73CC);
    ctx->Reset();

    ctx->Push(scene_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success has_action_mode_asset_loaded(bool* native_return, const CStringPtr& asset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE4B5F4BF2CB24E65);
    ctx->Reset();

    ctx->Push(asset_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_num_ped_hair_tints(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE5C0CF872C2AD150);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success clear_all_ped_vehicle_forced_seat_usage(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE6CA85E7259CE16B);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_mount(u32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE7E11B8DCBED1058);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success is_ped_component_variation_valid(bool* native_return, u32 ped_, i32 component_id_, i32 drawable_id_, i32 texture_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE825F6B6CEA7671D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(component_id_);
    ctx->Push(drawable_id_);
    ctx->Push(texture_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_can_lose_props_on_damage(u32 ped_, bool toggle_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE861D0B05C7662B8);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_reserve_parachute_tint_index(u32 ped_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE88DA0751C22A2AD);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_pedheadshot_img_upload_succeeded(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE8A169E666CBC541);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_enable_crew_emblem(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE906EC930F5FE7C8);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clone_ped_to_target(u32 ped_, u32 target_ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE952D6431689AD9A);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(target_ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_stealth_mode_asset_loaded(bool* native_return, const CStringPtr& asset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE977FC5B08AF3441);
    ctx->Reset();

    ctx->Push(asset_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success reset_ai_weapon_damage_modifier() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEA16670E7BA4743C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_default_secondary_tint_for_creator(i32* native_return, i32 color_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEA9960D07DADCF10);
    ctx->Reset();

    ctx->Push(color_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success can_create_random_bike_rider(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEACEEDA81751915C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success can_ped_in_combat_see_target(bool* native_return, u32 ped_, u32 target_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEAD42DE3610D0721);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(target_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_parachute_tint_index(i32* out_tint_index_, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEAF5F7E5AE7C6C9D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(out_tint_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_steers_around_vehicles(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEB6FB9D48DDE23EC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_relationship_between_peds(i32* native_return, u32 ped1_, u32 ped2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEBA5AD3A0EAF7121);
    ctx->Reset();

    ctx->Push(ped1_);
    ctx->Push(ped2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_pedheadshot_img_upload_available(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEBB376779A760AA8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ped_performing_a_counter_attack(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEBD0EDBA5BE957CF);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_suffers_critical_hits(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEBD76F2359F190AC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_can_use_auto_conversation_lookat(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEC4686EC06434678);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_injured_on_ground_behaviour(u32 ped_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEC4B4B3B9908052A);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_on_specific_vehicle(bool* native_return, u32 ped_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEC5F66E459AF3BB2);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_should_play_directed_normal_scenario_exit(bool* native_return, i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEC6935EBE0847B90);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_drive_by_clipset_override(u32 ped_, const CStringPtr& clipset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xED34AB6C5CB36520);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(clipset_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_instant_leg_ik_setup(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xED3C76ADFA6D07C4);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_hair_tint_for_creator(bool* native_return, i32 color_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xED6D8E27A43B8CDE);
    ctx->Reset();

    ctx->Push(color_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success remove_ped_from_group(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xED74007FFB146BC2);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_can_switch_weapon(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xED7F7EFE9FABF340);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_stay_in_vehicle_when_jacked(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEDF4079F9D54C9A1);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_non_creation_area(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEE01041D559983EA);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success enable_mp_light(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEE2476B9EE4A094F);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_dies_instantly_in_water(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEEB64139BA29A7CF);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_should_play_flee_scenario_exit(bool* native_return, u32 ped_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEEED8FAFEC331A70);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success apply_ped_blood_specific(u32 ped_, i32 p1_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, i32 p6_, f32 p7_, const CStringPtr& p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEF0D582CBF2D9B0F);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clone_ped(u32* native_return, u32 ped_, bool is_network_, bool b_script_host_ped_, bool copy_head_blend_flag_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEF29A16337FACADB);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(is_network_);
    ctx->Push(b_script_host_ped_);
    ctx->Push(copy_head_blend_flag_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_ped_visual_field_center_angle(f32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEF2C71A32CAD5FBD);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_fm_female_shop_ped_apparel_item_index(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF033419D1B81FAE8);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_ragdoll_on_collision(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF0A4F1BBF4FA7497);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_pedheadshot_img_upload(bool* native_return, i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF0DAEF2F545BEE25);
    ctx->Reset();

    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_id_range(u32 ped_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF107E836A70DCE05);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_helmet_texture_index(u32 ped_, i32 texture_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF1550C4BD22582E2);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(texture_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_group_index(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF162E133B4E7A675);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_should_play_immediate_scenario_exit(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF1C03A5352243A30);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_current_head_prop_a_helmet(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF2385935BFFD4D92);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success force_ped_motion_state(bool* native_return, u32 ped_, u32 motion_state_hash_, bool p2_, i32 p3_, bool p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF28965D04F570DCA);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(motion_state_hash_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_seeing_range(u32 ped_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF29CF591C4BF6CEE);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_can_torso_ik(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF2B7106D37947CE0);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_allow_hurt_combat_for_all_mission_peds(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF2BEBCDFAFDAA19E);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_wearing_helmet(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF33BDFE19B309B19);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success add_relationship_group(bool* native_return, u32* group_hash_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF372BC22FCB88606);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(group_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ped_blush_tint_for_creator(bool* native_return, i32 color_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF41B5D290C99A3D6);
    ctx->Reset();

    ctx->Push(color_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success spawnpoints_is_search_failed(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF445DE8DA80A1792);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_can_torso_react_ik(u32 ped_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF5846EDB26A98A24);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_max_health(u32 ped_, i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF5F6378C4F3419D3);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_current_move_blend_ratio(bool* native_return, f32* speed_x_, f32* speed_y_, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF60165E1D2C5370B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(speed_x_);
    ctx->Push(speed_y_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_alertness(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF6AA118530443FD2);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_into_vehicle(u32 ped_, u32 vehicle_, i32 seat_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF75B0D629E1C063D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(vehicle_);
    ctx->Push(seat_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success release_ped_preload_prop_data(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF79F9DEF0AADE61A);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_can_play_viseme_anims(u32 ped_, bool toggle_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF833DDBA3B104D43);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_ped_is_entering(u32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF92691AED837A5FC);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success was_ped_killed_by_stealth(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF9800AA1A771B000);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_enable_scuba(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF99F62004024D506);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success special_function_do_not_use(u32 ped_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF9ACF4A08098EA25);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_defensive_sphere_attached_to_ped(u32 ped_, u32 target_, f32 x_offset_, f32 y_offset_, f32 z_offset_, f32 radius_, bool p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF9B8F91AAD3B953E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(target_);
    ctx->Push(x_offset_);
    ctx->Push(y_offset_);
    ctx->Push(z_offset_);
    ctx->Push(radius_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_combat_range(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF9D9F7F2DB8E2FA0);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_min_ground_time_for_stungun(u32 ped_, i32 ms_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFA0675AB151073FA);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(ms_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_allow_stunt_jump_camera(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFAB944D4D481ACCB);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_falling(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFB92A102F1C4DFA3);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ped_in_any_sub(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFBFC01CCFB35D99E);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ped_heading_towards_position(bool* native_return, u32 ped_, f32 x_, f32 y_, f32 z_, f32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFCF37A457CB96DC0);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_use_camera_heading_for_desired_direction_lock_on_test(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFD325494792302D7);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_performing_stealth_kill(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFD4CCDBCC59941B7);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success remove_ped_preferred_cover_set(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFDDB234CF74073D9);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_panic_exit_scenario(bool* native_return, i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFE07FF6495D52E2A);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_using_ped_scuba_gear_variation(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFEC9A3B1820F3331);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success spawnpoints_cancel_search() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFEE4A5459472A9F8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_type(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFF059E1E4C01E63C);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success force_all_heading_values_to_align(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFF287323B0E2C69A);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_combat_float(u32 ped_, i32 combat_type_, f32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFF41B4B141ED981C);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(combat_type_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_health_snacks_carried_by_all_new_peds(f32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFF4803BC019852D9);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_facial_idle_anim_override(u32 ped_, const CStringPtr& anim_name_, const CStringPtr& anim_dict_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFFC24B988B938B38);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(anim_name_.ptr);
    ctx->Push(anim_dict_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_disable_frag_damage(u32 object_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x01BA3AED21C16CFB);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_is_entity_a_frag(bool* native_return, u32 object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0C112765300C7E1E);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success start_rope_winding(i32 rope_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1461C72C889E343E);
    ctx->Reset();

    ctx->Push(rope_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_use_kinematic_physics(u32 entity_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x15F944730C832252);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_rope_last_vertex_coord(Vector3Wrapper& native_return, i32 rope_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x21BB0FBD3E217C2D);
    ctx->Reset();

    ctx->Push(rope_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success does_script_own_rope(bool* native_return, i32 rope_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x271C9D3ACA5D6409);
    ctx->Reset();

    ctx->Push(rope_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success pin_rope_vertex(i32 rope_id_, i32 vertex_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B320CF14146B69A);
    ctx->Reset();

    ctx->Push(rope_id_);
    ctx->Push(vertex_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success break_entity_glass(u32 entity_, f32 p1_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, f32 p6_, f32 p7_, f32 p8_, i32 p9_, bool p10_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2E648D16F6E308F3);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(p10_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_rope_vertex_count(i32* native_return, i32 rope_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3655F544CD30F0B5);
    ctx->Reset();

    ctx->Push(rope_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success rope_set_smooth_reelin(i32 rope_id_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x36CCB9BE67B970FD);
    ctx->Reset();

    ctx->Push(rope_id_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success attach_entities_to_rope(void* p12_, void* p13_, i32 rope_id_, u32 ent1_, u32 ent2_, f32 ent1_x_, f32 ent1_y_, f32 ent1_z_, f32 ent2_x_, f32 ent2_y_, f32 ent2_z_, f32 length_, bool p10_, bool p11_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3D95EC8B6D940AC3);
    ctx->Reset();

    ctx->Push(rope_id_);
    ctx->Push(ent1_);
    ctx->Push(ent2_);
    ctx->Push(ent1_x_);
    ctx->Push(ent1_y_);
    ctx->Push(ent1_z_);
    ctx->Push(ent2_x_);
    ctx->Push(ent2_y_);
    ctx->Push(ent2_z_);
    ctx->Push(length_);
    ctx->Push(p10_);
    ctx->Push(p11_);
    ctx->Push(p12_);
    ctx->Push(p13_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success attach_rope_to_entity(i32 rope_id_, u32 entity_, f32 x_, f32 y_, f32 z_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4B490A6832559A65);
    ctx->Reset();

    ctx->Push(rope_id_);
    ctx->Push(entity_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success unpin_rope_vertex(i32 rope_id_, i32 vertex_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4B5AE2EEE4A8F180);
    ctx->Reset();

    ctx->Push(rope_id_);
    ctx->Push(vertex_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success delete_rope(i32* rope_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x52B4829281364649);
    ctx->Reset();

    ctx->Push(rope_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success rope_convert_to_simple(i32 rope_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5389D48EFA2F079A);
    ctx->Reset();

    ctx->Push(rope_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_rope_unwinding_front(i32 rope_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x538D1179EC1AA9A9);
    ctx->Reset();

    ctx->Push(rope_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_disable_breaking(u32 object_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5CEC1A84620E7D5B);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success rope_unload_textures() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6CE36C35C1AC8163);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success activate_physics(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x710311ADF0E20730);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success rope_get_distance_between_ends(f32* native_return, i32 rope_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x73040398DFF9A4A6);
    ctx->Reset();

    ctx->Push(rope_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_cgoffset(Vector3Wrapper& native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8214A4B5A7A33612);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success is_rope_attached_at_both_ends(bool* native_return, i32* rope_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x84DE3B5FB3E666F0);
    ctx->Reset();

    ctx->Push(rope_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success rope_load_textures() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9B9039DBF2D258C1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_in_stunt_mode(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9EBD751E5787BAF2);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success rope_draw_enabled(i32* rope_id_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA1AE736541B0FCA3);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(rope_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success delete_child_rope(i32 rope_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA5D6B1888E4DB20);
    ctx->Reset();

    ctx->Push(rope_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_in_arena_mode(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA6A6098851C396F);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success rope_change_script_owner(i32 p0_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB1B6216CA2E7B55E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success rope_set_refframevelocity_colliderorder(i32 rope_id_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB743F735C03D7810);
    ctx->Reset();

    ctx->Push(rope_id_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success rope_attach_virtual_bound_geom(i32 rope_id_, i32 p1_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, f32 p6_, f32 p7_, f32 p8_, f32 p9_, f32 p10_, f32 p11_, f32 p12_, f32 p13_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBC0CE682D4D05650);
    ctx->Reset();

    ctx->Push(rope_id_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(p10_);
    ctx->Push(p11_);
    ctx->Push(p12_);
    ctx->Push(p13_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success detach_rope_from_entity(i32 rope_id_, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBCF3026912A8647D);
    ctx->Reset();

    ctx->Push(rope_id_);
    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cg_at_boundcenter(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBE520D9761FF811F);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success rope_reset_length(i32 rope_id_, f32 length_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC16DE94D9BEA14A0);
    ctx->Reset();

    ctx->Push(rope_id_);
    ctx->Push(length_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success rope_set_update_pinverts(i32 rope_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC8D667EE52114ABA);
    ctx->Reset();

    ctx->Push(rope_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_rope_winding(i32 rope_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCB2D4AB84A19AA7C);
    ctx->Reset();

    ctx->Push(rope_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success load_rope_data(i32 rope_id_, const CStringPtr& rope_preset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCBB203C04D1ABD27);
    ctx->Reset();

    ctx->Push(rope_id_);
    ctx->Push(rope_preset_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_disable_breaking(u32 object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCC6E963682533882);
    ctx->Reset();

    ctx->Push(object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success rope_force_length(i32 rope_id_, f32 length_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD009F759A723DB1B);
    ctx->Reset();

    ctx->Push(rope_id_);
    ctx->Push(length_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cgoffset(u32 entity_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD8FA3908D7B86904);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success rope_set_update_order(i32 rope_id_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDC57A637A20006ED);
    ctx->Reset();

    ctx->Push(rope_id_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success apply_impulse_to_cloth(f32 pos_x_, f32 pos_y_, f32 pos_z_, f32 vec_x_, f32 vec_y_, f32 vec_z_, f32 impulse_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE37F721824571784);
    ctx->Reset();

    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(vec_x_);
    ctx->Push(vec_y_);
    ctx->Push(vec_z_);
    ctx->Push(impulse_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_rope(i32* native_return, void* unk_ptr_, f32 x_, f32 y_, f32 z_, f32 rot_x_, f32 rot_y_, f32 rot_z_, f32 length_, i32 rope_type_, f32 max_length_, f32 min_length_, f32 winding_speed_, bool p11_, bool p12_, bool rigid_, f32 p14_, bool break_when_shot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE832D760399EB220);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);
    ctx->Push(length_);
    ctx->Push(rope_type_);
    ctx->Push(max_length_);
    ctx->Push(min_length_);
    ctx->Push(winding_speed_);
    ctx->Push(p11_);
    ctx->Push(p12_);
    ctx->Push(rigid_);
    ctx->Push(p14_);
    ctx->Push(break_when_shot_);
    ctx->Push(unk_ptr_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_rope_vertex_coord(Vector3Wrapper& native_return, i32 rope_id_, i32 vertex_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEA61CA8E80F09E4D);
    ctx->Reset();

    ctx->Push(rope_id_);
    ctx->Push(vertex_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success set_damping(u32 entity_, i32 vertex_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEEA3B200A6FEB65B);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(vertex_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success rope_draw_shadow_enabled(i32* rope_id_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF159A63806BB5BA8);
    ctx->Reset();

    ctx->Push(toggle_);
    ctx->Push(rope_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success rope_are_textures_loaded(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF2D0E6A75CC05597);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success does_rope_exist(bool* native_return, i32* rope_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFD5448BE3111ED96);
    ctx->Reset();

    ctx->Push(rope_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stop_rope_unwinding_front(i32 rope_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFFF3A50779EFBBB3);
    ctx->Reset();

    ctx->Push(rope_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_law_response_delay_override() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0032A6DBA562C518);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_model(u32 player_, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x00A1CADD00108836);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_wanted_level_multiplier(f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x020E5F00CDA207BA);
    ctx->Reset();

    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_team(u32 player_, i32 team_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0299FA38396A4940);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(team_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_player_teleport_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x02B15662D7F8886F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success change_player_ped(u32 player_, u32 ped_, bool p2_, bool reset_damage_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x048189FAC643DEEE);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(ped_);
    ctx->Push(p2_);
    ctx->Push(reset_damage_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_all_random_peds_flee(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x056E0FE8534C2949);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_special_ability_meter_full(bool* native_return, u32 player_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x05A1FE504B7F2587);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_player_reserve_parachute_model_override(u32 player_, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0764486AEDE748DB);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_wanted_level_radius(f32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x085DEB493BE80812);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success are_player_stars_greyed_out(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A6EB355EE14A2DB);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_player_wanted_centre_position(Vector3Wrapper& native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0C92BA89F1AF26F8);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success get_player_group(i32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0D127585F77030AF);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success clear_player_parachute_variation_override(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0F4CC924CF8C7B21);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_forced_aim(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0FEE4F80AC44A726);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_player_parachute_pack_model_override(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x10C54E4389C12B42);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_phone_palette_idx(u32 player_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x11D5F725F0E780E0);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_target_entity(bool* native_return, u32* entity_, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x13EDE1A5DBF797C9);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_player_cloth_lock_counter(i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x14D913B777DFF5DA);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success special_ability_deactivate_mp(u32 player_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x17F7471EACA78290);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success enable_special_ability(u32 player_, bool toggle_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x181EC197DAEFE121);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_sprint_time_remaining(f32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1885BC9B108B4C99);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success reset_player_input_gait(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x19531C47A2ABD691);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_achievement_progress(i32* native_return, i32 achievement_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1C186837D0619335);
    ctx->Reset();

    ctx->Push(achievement_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success special_ability_deplete_meter(u32 player_, bool p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1D506DBBBC51E64B);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success player_detach_virtual_bound() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1DD5897E2FA6E7C9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_may_not_enter_any_vehicle(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1DE37BBF9E9CC14A);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_number_of_players_in_team(i32* native_return, i32 team_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1FC200409F10E6F1);
    ctx->Reset();

    ctx->Push(team_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success has_player_damaged_at_least_one_ped(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x20CE80B0C2BF4ACC);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_player_vehicle_weapon_to_non_homing(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x237440E46D918649);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_apply_waypoint_of_player(u32 player_, i32 hud_color_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2382AB11450AE7BA);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(hud_color_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_player_wanted_level_greater(bool* native_return, u32 player_, i32 wanted_level_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x238DB2A2C23EE9EF);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(wanted_level_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_player_invincible(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x239528EACDC3E7DE);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_player_reserve_parachute_model_override(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x290D248E25815AE8);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_player_is_free_aiming_at(bool* native_return, u32* entity_, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2975C866E6713290);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_player_lockon_range_override(u32 player_, f32 range_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x29961D490E5814FD);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(range_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_player_arrest_state(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2D03E13C460760D6);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_weapon_defense_modifier(u32 player_, f32 modifier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2D83BC011CA14A3C);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(modifier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_player_free_aiming(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2E397FD2ECD37C87);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success special_ability_charge_small(u32 player_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2E7B9B683481687D);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_disable_ambient_melee_move(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2E8AABFA40A84F8C);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_current_stealth_noise(f32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2F395D61F3A1F877);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success allow_evasion_hud_if_disabling_hidden_evasion_this_frame(u32 player_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2F41A3BAE005E5FA);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_spectated_vehicle_radio_override(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2F7CEB6520288061);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_weapon_takedown_defense_modifier(u32 player_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x31E90B8873A4CD3B);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_police_ignore_player(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x32C62AA929C2DA6A);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_wanted_level_no_drop(u32 player_, i32 wanted_level_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x340E61DE7F471565);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(wanted_level_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success suppress_witnesses_calling_police_this_frame(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x36F1B38855F2A8DF);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_team(i32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x37039302F4E0A008);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success special_ability_reset(u32 player_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x375F0E738F861A94);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_reserve_parachute_model_override(u32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x37FAAA68DCA9D08D);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success is_player_being_arrested(bool* native_return, u32 player_, bool at_arresting_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x388A47C51ABDAC8E);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(at_arresting_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_player_battle_aware(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x38D28DA81E4E9BF9);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_player_wanted_level(u32 player_, i32 wanted_level_, bool disable_no_mission_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x39FF19C64EF7DA5B);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(wanted_level_);
    ctx->Push(disable_no_mission_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_player_free_aiming_at_entity(bool* native_return, u32 player_, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3C06B5C839B38F7B);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success give_player_ragdoll_control(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3C49C870E66F0A28);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success special_ability_fill_meter(u32 player_, bool p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3DACA8DDC6FD4980);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_special_ability_active(bool* native_return, u32 player_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3E5F7FC85D854E15);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_player_sprint_stamina_remaining(f32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3F9F16F8E65A7ED7);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_number_of_players(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x407C7F91DDB46C16);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success int_to_playerindex(u32* native_return, i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x41BD2A6B006AF756);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success is_player_dead(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x424D4687FA1E5652);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_police_radar_blips(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x43286D561B72B8BF);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_ped(u32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x43A66C31C68491C0);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_max_wanted_level(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x462E0DB9B137DC5F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success suppress_losing_wanted_level_if_hidden_this_frame(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4669B3ED80F24B4E);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_all_random_peds_flee_this_frame(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x471D2FF42A94B4F2);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success simulate_player_input_gait(u32 player_, f32 amount_, i32 gait_type_, f32 speed_, bool p4_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x477D5D63E63ECA5D);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(amount_);
    ctx->Push(gait_type_);
    ctx->Push(speed_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_wanted_level_hidden_escape_time(u32 player_, i32 wanted_level_, i32 loss_time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x49B856B1360C47C7);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(wanted_level_);
    ctx->Push(loss_time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_player_control_on(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x49C32D60007AFA47);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_player_melee_weapon_damage_modifier(u32 player_, f32 modifier_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4A3DC7ECCC321032);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(modifier_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_player_has_damaged_at_least_one_non_animal_ped(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4AACB96203D11A31);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_vehicle_defense_modifier(u32 player_, f32 modifier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4C60E6EFDAFF2462);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(modifier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_cleanup_for_all_threads_with_this_name(const CStringPtr& name_, i32 cleanup_flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4C68DDDDF0097317);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(cleanup_flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_stealth_perception_modifier(u32 player_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4E9021C1FCDD507A);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_player_riding_train(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4EC12697209F2196);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success player_id(u32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4F8644AF03D0E0D6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success extend_world_boundary_for_player(f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5006D96C995A5827);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_time_since_last_arrest(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5063F92F07C2A316);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_player_ped_script_index(u32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x50FAC3A3E030A6E1);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_player_wanted_centre_position(Vector3Wrapper& position_, u32 player_, bool p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x520E541A97A13354);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    alt::INative::Vector3 alt_position_ { position_.x, 0, position_.y, 0, position_.z };
ctx->Push(&alt_position_);


    Success result = native->Invoke(ctx);
    if (result) {
        position_.x = alt_position_.x;
position_.y = alt_position_.y;
position_.z = alt_position_.z;

        /* VOID native_return */
    }
    return result;
}
Success disable_camera_view_mode_cycle(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5501B7A5CDB79D37);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_can_damage_player(u32 player1_, u32 player2_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x55FCC0C390620314);
    ctx->Reset();

    ctx->Push(player1_);
    ctx->Push(player2_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_fake_wanted_level(i32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x56105E599CAB0EFA);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_player_target_level(i32 target_level_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5702B917B99DB1CD);
    ctx->Reset();

    ctx->Push(target_level_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ignore_low_priority_shocking_events(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x596976B02B6B5700);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_lockon(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5C8B2F450EE4328E);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_time_since_player_hit_vehicle(i32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5D35ECF3A81A0EE0);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_system_ui_being_displayed(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5D511E3867C87139);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_player_health_recharge_multiplier(u32 player_, f32 regen_rate_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5DB660B38DD98A31);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(regen_rate_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_bluetooth_state(u32 player_, bool state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5DC40A8869C22141);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_has_reserve_parachute(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5DDFE2FF727F3CA3);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success disable_player_firing(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5E6CC07646BBEAB8);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_player_playing(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5E9564D8246B909A);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_is_player_driving_on_highway(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5FC472C501CCADB3);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_player_bluetooth_enable(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x65FAEE425DE637B0);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_remote_player_in_non_cloned_vehicle(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x690A61A6D13583F6);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success special_ability_lock(u32 player_model_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6A09D0D590A47D13);
    ctx->Reset();

    ctx->Push(player_model_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_invincible_but_has_reactions(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6BC97F4F4BB3C04B);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_name(CStringPtr& native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6D0DE6A7B5DA71F8);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success set_run_sprint_multiplier_for_player(u32 player_, f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6DB47AA77FD94E09);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_player_vehicle_weapon_toggled_to_non_homing(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6E4361FF3E8CD7CA);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_player_can_do_drive_by(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6E8834B52EC20C77);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_parachute_pack_tint_index(i32* tint_index_, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6E9C742F340CE5A2);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(tint_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_script_fire_position(f32 coord_x_, f32 coord_y_, f32 coord_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x70A382ADEC069DD3);
    ctx->Reset();

    ctx->Push(coord_x_);
    ctx->Push(coord_y_);
    ctx->Push(coord_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_script_fire_position() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7148E0F43D11F0D9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_player_logging_in_np(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x74556E1420867ECA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_player_cloth_pin_frames(u32 player_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x749FADDF97DFE930);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_parachute_tint_index(i32* tint_index_, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x75D3F7A1B0D9B145);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(tint_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_forced_zoom(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x75E7D505F2B15902);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_force_skip_aim_intro(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7651BC64AE59E128);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_max_armour(u32 player_, i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x77DFCCF5948B8C71);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_player_targetting_anything(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x78CFE51896B6B8A4);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_player_targetting_entity(bool* native_return, u32 player_, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7912F7FC4F6264B6);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_player_previous_variation_data(u32 player_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7BAE68775557AE0B);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_are_camera_controls_disabled(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7C814D2FB49F40C0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_player_has_reserve_parachute(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7DDAB28D31FAC363);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_wanted_and_has_been_seen_by_cops(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7E07C78925D5FD96);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_player_may_only_enter_this_vehicle(u32 player_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8026FF78F208978A);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_parachute_smoke_trail_color(u32 player_, i32 r_, i32 g_, i32 b_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8217FD371A4625CF);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success special_ability_activate(u32 player_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x821FDC827D6F4090);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_wanted_level_hidden_escape_time(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x823EC8E82BA45986);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success assisted_movement_flush_route() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8621390F0CDCFE1F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_achievement_been_passed(bool* native_return, i32 achievement_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x867365E111A3B6EB);
    ctx->Reset();

    ctx->Push(achievement_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_player_parachute_model_override(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8753997EB5F6EE3F);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_player_script_control_on(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8A876A65283DD7D7);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_player_health_recharge_max_percent(f32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8BC515BAE4AAF8FF);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_player_control(u32 player_, bool b_has_control_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8D32347D6D4C40A2);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(b_has_control_);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_max_explosive_damage(u32 player_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8D768602ADEF2245);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_everyone_ignore_player(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8EEDA153AD141BA4);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_player_ready_for_cutscene(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x908CBECC2CAA3690);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success add_player_targetable_entity(u32 player_, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9097EB6D4BB9A12A);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_max_armour(i32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x92659B4CE1863CB3);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_player_parachute_pack_tint_index(u32 player_, i32 tint_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x93B0FB27C9A04060);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(tint_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success display_system_signin_ui(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x94DD7888C10A979E);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_player_climbing(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x95E8F73DC65EFB9C);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_player_parachute_model_override(u32 player_, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x977DB4641F6FC3DB);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_cause_of_most_recent_force_cleanup(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9A41CF4674A12272);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success suppress_crime_this_frame(u32 player_, i32 crime_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9A987297ED8BD838);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(crime_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_wanted_level_difficulty(u32 player_, f32 difficulty_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9B0BB33B04405E7A);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(difficulty_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success special_ability_deactivate_fast(u32 player_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9CB5CE07A3968D5A);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success int_to_participantindex(i32* native_return, i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9EC6603812C24710);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success increase_player_jump_suppression_range(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9EDD76E87D5D51BA);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_player_targetable_entity(u32 player_, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9F260BFB59ADBCA3);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_auto_give_parachute_when_enter_plane(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9F343285A00B4BB6);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_cloth_package_index(i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9F7BBA2EA6372500);
    ctx->Reset();

    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_sprint(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA01B8075D8B92DF4);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success special_ability_charge_normalized(u32 player_, f32 normalized_value_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA0696A65F009EE18);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(normalized_value_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_underwater_breath_percent_remaining(f32* native_return, u32 player_, f32 time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA0D3E4F7AAFB7E78);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_player_underwater_time_remaining(f32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA1FCF8E6AF40B731);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success restore_player_stamina(u32 player_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA352C1B864CAFD33);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_parachute_tint_index(u32 player_, i32 tint_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA3D0E54541D9A5E5);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(tint_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_special_ability_multiplier(f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA49C426ED0CA4AB7);
    ctx->Reset();

    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_vehicle_damage_modifier(u32 player_, f32 modifier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA50E117CDDF82F0C);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(modifier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_index(u32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA5EDC40EF369B48D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success reset_player_stamina(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA6F312FCCE9C1DFE);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_wanted_level_time_to_escape(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA72200F51875FEA4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_swim_multiplier_for_player(u32 player_, f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA91C6F0FF7D16A13);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_max_wanted_level(i32 max_wanted_level_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA5F02DB48D704B9);
    ctx->Reset();

    ctx->Push(max_wanted_level_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_player_teleport(u32 player_, f32 x_, f32 y_, f32 z_, f32 heading_, bool p5_, bool find_collision_land_, bool p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAD15F075A4DA0FDE);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(heading_);
    ctx->Push(p5_);
    ctx->Push(find_collision_land_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_start_hidden_evasion(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAD73CE5A09E42D12);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_melee_weapon_defense_modifier(u32 player_, f32 modifier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAE540335B4ABC4E2);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(modifier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success assisted_movement_close_route() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAEBF081FFC0A0E5E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_reserve_parachute_tint_index(u32 player_, i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAF04C87F5DC1DF38);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success are_player_flashing_stars_about_to_drop(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAFAF86043E5874E9);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_player_targeting_mode(i32 target_mode_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB1906895227793F3);
    ctx->Reset();

    ctx->Push(target_mode_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_special_ability_enabled(bool* native_return, u32 player_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB1D200FE26AEF3CB);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_special_ability_mp(u32 player_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB214D570EAD7F81A);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_sneaking_noise_multiplier(u32 player_, f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB2C1A29588A9F47C);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_player_wanted_level(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB302540597885499);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_law_response_delay_override(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB45EFF719D8427A6);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_players_last_vehicle(u32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB6997A7EB3F5C8C0);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_player_invincible(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB721981B2B939E07);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success special_ability_charge_absolute(u32 player_, i32 p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB7B0870EB531D08D);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_player_throw_grenade_while_using_gun() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB885852C39CC265D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_is_using_fps_third_person_cover(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB9CF1F793A9F1BF1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success reset_wanted_level_difficulty(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB9D0DD990DC141DD);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_received_battle_event_recently(bool* native_return, u32 player_, i32 p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBC0753C9CA14B506);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success force_cleanup(i32 cleanup_flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBC8983F38F78ED51);
    ctx->Reset();

    ctx->Push(cleanup_flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success update_wanted_position_this_frame(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBC9490CA15AEA8FB);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_player_health_recharge(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBCB06442F7E52666);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_weapon_minigun_defense_modifier(u32 player_, f32 modifier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBCFDE9EDE4CF27DC);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(modifier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success give_achievement_to_player(bool* native_return, i32 achievement_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBEC7076D64130195);
    ctx->Reset();

    ctx->Push(achievement_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success start_firing_amnesty(i32 duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBF9BD71691857E48);
    ctx->Reset();

    ctx->Push(duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_player_vehicle_rewards(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC142BE3BB9CE125F);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_parachute_model_override(u32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC219887CA3E65C41);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_achievement_progress(bool* native_return, i32 achievement_id_, i32 progress_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC2AFFFDABBDC2C5C);
    ctx->Reset();

    ctx->Push(achievement_id_);
    ctx->Push(progress_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_all_neutral_random_peds_flee_this_frame(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC3376F42B1FACCC6);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_health_recharge_max_percent(u32 player_, f32 limit_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC388A0F065F5BC34);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(limit_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_player_teleport() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC449EDED9D73009C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_simulate_aiming(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC54C95DA968EC5B5);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_special_ability_unlocked(bool* native_return, u32 player_model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC6017F6A6CDFA694);
    ctx->Reset();

    ctx->Push(player_model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_time_since_last_death(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC7034807558DDFCA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success has_force_cleanup_occurred(bool* native_return, i32 cleanup_flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC968670BFACE42D9);
    ctx->Reset();

    ctx->Push(cleanup_flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success special_ability_charge_on_mission_failed(u32 player_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC9A763D8FE87436A);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_air_drag_multiplier_for_players_vehicle(u32 player_, f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCA7DC8329F0A1E9E);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_can_collect_dropped_money(u32 player_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCAC57395B151135F);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_is_using_hood_camera(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCB645E85E97EA48B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_player_weapon_damage_modifier(u32 player_, f32 modifier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCE07B9F7817AADA3);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(modifier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_auto_give_scuba_gear_when_exit_vehicle(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD2B315B6689D537D);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_can_use_cover(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD465A8599DFF6814);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_time_since_player_drove_on_pavement(i32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD559D2BE9E37853B);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success has_player_left_the_world(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD55DDFB47991A294);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_player_reserve_parachute_tint_index(i32* index_, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD5A016BC3C09CF40);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_can_be_hassled_by_gangs(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD5E460AD7020A246);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success special_ability_deactivate(u32 player_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD6A953C6D1492057);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_player_been_spotted_in_stolen_vehicle(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD705740BB0A1CF4C);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success player_ped_id(u32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD80958FC74E988A6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_player_explosive_damage_modifier(u32 player_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD821056B9ACF8052);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_parachute_variation_override(u32 player_, i32 p1_, i32 p2_, i32 p3_, bool p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD9284A8C0D48352C);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_world_boundary_for_player() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDA1DF03D5A315F4E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_dispatch_cops_for_player(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDB172424876553F4);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_time_since_player_drove_against_traffic(i32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDB89591E290D9182);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_player_noise_multiplier(u32 player_, f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDB89EF50FF25FCE9);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success report_police_spotted_player(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDC64D2C53493ED12);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_parachute_pack_model_override(u32 player_, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDC80A4C2F18A2B64);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_debug_invincible(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDCC07526B8EC45AF);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_player_free_for_ambient_task(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDCCFD3F106C36AB4);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_is_mopping_area_free_in_front_of_player(bool* native_return, u32 player_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDD2620B7B9D16FF1);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_all_neutral_random_peds_flee(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDE45D1A1EF45EE61);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success can_player_start_mission(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDE7465A27D403C06);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_player_wanted_level_now(u32 player_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE0A7D1E497FFCD6F);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success update_player_teleport(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE23D5873C2394C61);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_player_wanted_level(i32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE28E54788CE8F12D);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_time_since_player_hit_ped(i32* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE36A25322DC35F42);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success has_player_damaged_at_least_one_non_animal_ped(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE4B90F367BD81752);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_player_rgb_colour(i32* r_, i32* g_, i32* b_, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE902EF951DCE178F);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success report_crime(u32 player_, i32 crime_type_, i32 wanted_lvl_thresh_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE9B09589827545E7);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(crime_type_);
    ctx->Push(wanted_lvl_thresh_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success special_ability_charge_continuous(u32 player_, u32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xED481732DFF7E997);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success player_attach_virtual_bound(f32 p0_, f32 p1_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, f32 p6_, f32 p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xED51733DC73AED51);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_homing_disabled_for_all_vehicle_weapons(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEE4EBDD2593BA844);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_player_id_to_int(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEE68096F9F37341E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_player_parachute_smoke_trail_color(i32* r_, i32* g_, i32* b_, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEF56DBABD3CD4887);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_fall_distance_to_trigger_ragdoll_override(u32 player_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEFD79FA81DFBA9CB);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_player_has_damaged_at_least_one_ped(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF0B67A4DE6AB5F98);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_is_player_driving_wreckless(bool* native_return, u32 player_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF10B44FD479D69F3);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success special_ability_charge_medium(u32 player_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF113E3AA9BC54613);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success special_ability_unlock(u32 player_model_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF145F3BE2EFA9A3B);
    ctx->Reset();

    ctx->Push(player_model_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_player_online(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF25D331DC2627BBC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success can_ped_hear_player(bool* native_return, u32 player_, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF297383AA91DCA29);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success remove_player_helmet(u32 player_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF3AC26D3CC576528);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_can_leave_parachute_smoke_trail(u32 player_, bool enabled_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF401B182DBA8AF53);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(enabled_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success special_ability_charge_large(u32 player_, bool p1_, bool p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF733F45FA4497D93);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_cleanup_for_thread_with_this_id(i32 id_, i32 cleanup_flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF745B37630DF176B);
    ctx->Reset();

    ctx->Push(id_);
    ctx->Push(cleanup_flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_player_pressing_horn(bool* native_return, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFA1E2BF8B10598F9);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_law_peds_can_attack_non_wanted_player_this_frame(u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFAC75988A7D078D3);
    ctx->Reset();

    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_wanted_level_threshold(i32* native_return, i32 wanted_level_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFDD179EAF45B556C);
    ctx->Reset();

    ctx->Push(wanted_level_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_player_leave_ped_behind(u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFF300C7649724A0B);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success update_special_ability_from_stat(u32 player_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFFEE8FA29AB9A18E);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_replay_recording() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x071A5197D6AFC8B3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success replay_cancel_event() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x13B350B8AD0EEE10);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_replay_recording(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1897CA71995A90B4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success replay_check_for_event_this_frame(const CStringPtr& mission_name_label_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x208784099002BC30);
    ctx->Reset();

    ctx->Push(mission_name_label_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success replay_record_back_for_time(f32 p0_, f32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x293220DA1B46CEBC);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_replay_record_space_available(bool* native_return, bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x33D47E85B476ABCD);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_replay_available(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4282E08174868BE3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success replay_start_event(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x48621C9FCA3EBD28);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success save_replay_recording(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x644546EC5287471B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success record_greatest_moment(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x66972397E0757E7A);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success replay_stop_event() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x81CBAE94390F9F89);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success cancel_replay_recording() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x88BB3507ED41A240);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success replay_disable_camera_movement_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAF66DCEE6609B148);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_replay_recording(i32 mode_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC3AC2FFF9612AC81);
    ctx->Reset();

    ctx->Push(mode_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_replay_initialized(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDF4B952F7D381B95);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success replay_prevent_recording_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEB2D525B57F42B40);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success replay_reset_event_info() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF854439EFBB3B583);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success replay_control_shutdown() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3353D13F09307691);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success activate_rockstar_editor(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x49DA8145672B2725);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_scripts_have_cleaned_up_for_replay_system() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5AD3932DAEB1E5D3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success register_effect_for_replay_editor(const CStringPtr& p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7E2BD3EF6C205F09);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success replay_system_has_requested_a_script_cleanup(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x95AB8B5C992C7B58);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_replay_system_paused_for_save(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE058175F8EAFE79A);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success savemigration_mp_get_status(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x690B76BD2763E068);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success savemigration_mp_num_accounts(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x77A16200E18E0C55);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success savemigration_is_mp_enabled(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x84B418E93894AC1C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success savemigration_mp_request_accounts(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x85F41F9225D08C72);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success savemigration_mp_get_accounts_status(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC8CB5999919EA2CA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success savemigration_mp_request_status(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE5E9746A66359F9D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success savemigration_mp_get_account(bool* native_return, void* p1_, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFCE2747EEF1D05FC);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_name_of_script_with_this_id(CStringPtr& native_return, i32 thread_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x05A42BA9FC8DA96B);
    ctx->Reset();

    ctx->Push(thread_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success shutdown_loading_screen() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x078EBE9809CCD637);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success bg_does_launch_param_exist(bool* native_return, i32 script_index_, const CStringPtr& p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0F6F1EBBC4E1D5E6);
    ctx->Reset();

    ctx->Push(script_index_);
    ctx->Push(p1_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success bg_end_context_hash(u32 context_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x107E5CC7CA942BC1);
    ctx->Reset();

    ctx->Push(context_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success terminate_this_thread() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1090044AD1DA76FA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_no_loading_screen(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x18C1270EA7F199BC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success bg_get_launch_param_value(i32* native_return, i32 script_index_, const CStringPtr& p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x22E21FBCFC88C149);
    ctx->Reset();

    ctx->Push(script_index_);
    ctx->Push(p1_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_event_data(bool* native_return, void* event_data_, i32 event_group_, i32 event_index_, i32 event_data_size_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2902843FCD2B2D79);
    ctx->Reset();

    ctx->Push(event_group_);
    ctx->Push(event_index_);
    ctx->Push(event_data_size_);
    ctx->Push(event_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_number_of_threads_running_the_script_with_this_hash(i32* native_return, u32 script_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2C83A9DA6BFFC4F9);
    ctx->Reset();

    ctx->Push(script_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success script_thread_iterator_get_next_thread_id(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x30B4FA1C82DD4B9F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_this_script_name(CStringPtr& native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x442E0A7EDE4A738A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success is_thread_active(bool* native_return, i32 thread_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x46E9AE36D8FA6417);
    ctx->Reset();

    ctx->Push(thread_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_no_loading_screen(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5262CC1995D07E09);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success trigger_script_event(void* event_data_, i32 event_group_, i32 event_data_size_, i32 player_bits_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5AE99C571D5BBE5D);
    ctx->Reset();

    ctx->Push(event_group_);
    ctx->Push(event_data_size_);
    ctx->Push(player_bits_);
    ctx->Push(event_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_script_with_name_hash_loaded(bool* native_return, u32 script_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5F0F0C783EB16C04);
    ctx->Reset();

    ctx->Push(script_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_number_of_events(i32* native_return, i32 event_group_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5F92A689A06620AA);
    ctx->Reset();

    ctx->Push(event_group_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success request_script(const CStringPtr& script_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6EB5F71AA68F2E8E);
    ctx->Reset();

    ctx->Push(script_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success bg_start_context_hash(u32 context_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x75B18E49607874C7);
    ctx->Reset();

    ctx->Push(context_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success bg_set_exitflag_response() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x760910B49D2B98EA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success bg_get_script_id_from_name_hash(i32* native_return, u32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x829CD22E043A2577);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success bg_is_exitflag_set(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x836B62713E0534CA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_hash_of_this_script_name(u32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8A1C8B1738FFE87E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_event_exists(bool* native_return, i32 event_group_, i32 event_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x936E6168A9BCEDB5);
    ctx->Reset();

    ctx->Push(event_group_);
    ctx->Push(event_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success bg_start_context(const CStringPtr& context_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D5A25BADB742ACD);
    ctx->Reset();

    ctx->Push(context_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success send_tu_script_event(void* event_data_, i32 event_group_, i32 event_data_size_, i32 player_bits_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA40CC53DF8E50837);
    ctx->Reset();

    ctx->Push(event_group_);
    ctx->Push(event_data_size_);
    ctx->Push(player_bits_);
    ctx->Push(event_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success commit_to_loadingscreen_selction() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB1577667C3708F9B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_id_of_this_thread(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC30338E8088E2E21);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_script_with_name_hash_as_no_longer_needed(u32 script_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC5BC038960E9DB27);
    ctx->Reset();

    ctx->Push(script_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success terminate_thread(i32 thread_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC8B189ED9138BCD4);
    ctx->Reset();

    ctx->Push(thread_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_script_as_no_longer_needed(const CStringPtr& script_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC90D2DCACD56184C);
    ctx->Reset();

    ctx->Push(script_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_script_with_name_hash(u32 script_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD62A67D26D9653E6);
    ctx->Reset();

    ctx->Push(script_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_event_at_index(i32* native_return, i32 event_group_, i32 event_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD8F66A3A60C62153);
    ctx->Reset();

    ctx->Push(event_group_);
    ctx->Push(event_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success script_thread_iterator_reset() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDADFADA5A20143A8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success bg_end_context(const CStringPtr& context_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDC2BACD920D0A0DD);
    ctx->Reset();

    ctx->Push(context_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_script_loaded(bool* native_return, const CStringPtr& script_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE6CC9F3BA0FB9EF1);
    ctx->Reset();

    ctx->Push(script_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success does_script_with_name_hash_exist(bool* native_return, u32 script_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF86AA3C56BA31381);
    ctx->Reset();

    ctx->Push(script_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success does_script_exist(bool* native_return, const CStringPtr& script_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFC04745FBE67C19A);
    ctx->Reset();

    ctx->Push(script_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success unregister_script_variable(void* unk_variable_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x340A36A700E99699);
    ctx->Reset();

    ctx->Push(unk_variable_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success register_script_variable(void* unk_variable_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x40EB1EFD921822BC);
    ctx->Reset();

    ctx->Push(unk_variable_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_check_script_variables() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8E580AB902917360);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_shape_test_bounding_box(i32* native_return, u32 entity_, i32 flags1_, i32 flags2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x052837721A854EC7);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(flags1_);
    ctx->Push(flags2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success start_shape_test_capsule(i32* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 radius_, i32 flags_, u32 entity_, i32 p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x28579D1B8F8AAC80);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(radius_);
    ctx->Push(flags_);
    ctx->Push(entity_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success release_script_guid_from_entity(u32 entity_hit_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B3334BCA57CD799);
    ctx->Reset();

    ctx->Push(entity_hit_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_shape_test_bound(i32* native_return, u32 entity_, i32 flags1_, i32 flags2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x37181417CE7C8900);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(flags1_);
    ctx->Push(flags2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success start_expensive_synchronous_shape_test_los_probe(i32* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, i32 flags_, u32 entity_, i32 p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x377906D8A31E5586);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(flags_);
    ctx->Push(entity_);
    ctx->Push(p8_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_shape_test_result(i32* native_return, bool* hit_, Vector3Wrapper& end_coords_, Vector3Wrapper& surface_normal_, u32* entity_hit_, i32 shape_test_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3D87450E15D98694);
    ctx->Reset();

    ctx->Push(shape_test_handle_);
    ctx->Push(hit_);
    alt::INative::Vector3 alt_end_coords_ { end_coords_.x, 0, end_coords_.y, 0, end_coords_.z };
ctx->Push(&alt_end_coords_);

    alt::INative::Vector3 alt_surface_normal_ { surface_normal_.x, 0, surface_normal_.y, 0, surface_normal_.z };
ctx->Push(&alt_surface_normal_);

    ctx->Push(entity_hit_);

    Success result = native->Invoke(ctx);
    if (result) {
        end_coords_.x = alt_end_coords_.x;
end_coords_.y = alt_end_coords_.y;
end_coords_.z = alt_end_coords_.z;

    surface_normal_.x = alt_surface_normal_.x;
surface_normal_.y = alt_surface_normal_.y;
surface_normal_.z = alt_surface_normal_.z;

        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_shape_test_result_including_material(i32* native_return, bool* hit_, Vector3Wrapper& end_coords_, Vector3Wrapper& surface_normal_, u32* material_hash_, u32* entity_hit_, i32 shape_test_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x65287525D951F6BE);
    ctx->Reset();

    ctx->Push(shape_test_handle_);
    ctx->Push(hit_);
    alt::INative::Vector3 alt_end_coords_ { end_coords_.x, 0, end_coords_.y, 0, end_coords_.z };
ctx->Push(&alt_end_coords_);

    alt::INative::Vector3 alt_surface_normal_ { surface_normal_.x, 0, surface_normal_.y, 0, surface_normal_.z };
ctx->Push(&alt_surface_normal_);

    ctx->Push(material_hash_);
    ctx->Push(entity_hit_);

    Success result = native->Invoke(ctx);
    if (result) {
        end_coords_.x = alt_end_coords_.x;
end_coords_.y = alt_end_coords_.y;
end_coords_.z = alt_end_coords_.z;

    surface_normal_.x = alt_surface_normal_.x;
surface_normal_.y = alt_surface_normal_.y;
surface_normal_.z = alt_surface_normal_.z;

        *native_return = ctx->ResultInt();
    }
    return result;
}
Success start_shape_test_los_probe(i32* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, i32 flags_, u32 entity_, i32 p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7EE9F5D83DD4F90E);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(flags_);
    ctx->Push(entity_);
    ctx->Push(p8_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success start_shape_test_swept_sphere(i32* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 radius_, i32 flags_, u32 entity_, i32 p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE6AC6C45FBE83004);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(radius_);
    ctx->Push(flags_);
    ctx->Push(entity_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success start_shape_test_box(i32* native_return, f32 x_, f32 y_, f32 z_, f32 dim_x_, f32 dim_y_, f32 dim_z_, f32 rot_x_, f32 rot_y_, f32 rot_z_, i32 p9_, i32 flags_, u32 entity_, i32 p12_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFE466162C4401D18);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(dim_x_);
    ctx->Push(dim_y_);
    ctx->Push(dim_z_);
    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);
    ctx->Push(p9_);
    ctx->Push(flags_);
    ctx->Push(entity_);
    ctx->Push(p12_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success start_shape_test_mouse_cursor_los_probe(i32* native_return, Vector3Wrapper& p_vec1_, Vector3Wrapper& p_vec2_, i32 flag_, u32 entity_, i32 flag2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFF6BE494C7987F34);
    ctx->Reset();

    ctx->Push(flag_);
    ctx->Push(entity_);
    ctx->Push(flag2_);
    alt::INative::Vector3 alt_p_vec1_ { p_vec1_.x, 0, p_vec1_.y, 0, p_vec1_.z };
ctx->Push(&alt_p_vec1_);

    alt::INative::Vector3 alt_p_vec2_ { p_vec2_.x, 0, p_vec2_.y, 0, p_vec2_.z };
ctx->Push(&alt_p_vec2_);


    Success result = native->Invoke(ctx);
    if (result) {
        p_vec1_.x = alt_p_vec1_.x;
p_vec1_.y = alt_p_vec1_.y;
p_vec1_.z = alt_p_vec1_.z;

    p_vec2_.x = alt_p_vec2_.x;
p_vec2_.y = alt_p_vec2_.y;
p_vec2_.z = alt_p_vec2_.z;

        *native_return = ctx->ResultInt();
    }
    return result;
}
Success sc_inbox_get_total_num_messages(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x03A93FF1A2CA0864);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success sc_email_retrieve_emails(i32 offset_, i32 limit_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x040ADDCBAFA1018A);
    ctx->Reset();

    ctx->Push(offset_);
    ctx->Push(limit_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success sc_licenseplate_get_add_is_pending(bool* native_return, i32 token_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x07C61676E5BB52CD);
    ctx->Reset();

    ctx->Push(token_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_email_set_current_email_tag(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x07DBD622D9533857);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_licenseplate_isvalid(bool* native_return, i32* token_, const CStringPtr& plate_text_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0F73393BAC7E6730);
    ctx->Reset();

    ctx->Push(plate_text_.ptr);
    ctx->Push(token_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_email_send_email(const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x116FB94DC4B79F17);
    ctx->Reset();

    ctx->Push(p0_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success sc_email_get_retrieval_status(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x16DA8172459434AA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success sc_profanity_get_check_is_valid(bool* native_return, i32 token_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1753344C770358AE);
    ctx->Reset();

    ctx->Push(token_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_community_event_get_display_name_by_id(bool* native_return, CStringPtr& p1_, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x19853B5B17D77BCA);
    ctx->Reset();

    ctx->Push(p0_);
    char* alt_p1_ = save_c_string(""); // creating new empty string because p1_ is nullptr
ctx->Push(alt_p1_);


    Success result = native->Invoke(ctx);
    if (result) {
        p1_.ptr = alt_p1_;
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_licenseplate_add(bool* native_return, void* plate_data_, i32* token_, const CStringPtr& plate_text_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1989C6E6F67E76A8);
    ctx->Reset();

    ctx->Push(plate_text_.ptr);
    ctx->Push(plate_data_);
    ctx->Push(token_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_account_info_get_nickname(CStringPtr& native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x198D161F458ECC7F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success sc_community_event_get_extra_data_string_for_type(bool* native_return, CStringPtr& p1_, const CStringPtr& p0_, const CStringPtr& p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1D12A56FC95BE92E);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    ctx->Push(p2_.ptr);
    char* alt_p1_ = save_c_string(""); // creating new empty string because p1_ is nullptr
ctx->Push(alt_p1_);


    Success result = native->Invoke(ctx);
    if (result) {
        p1_.ptr = alt_p1_;
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_licenseplate_get_plate(CStringPtr& native_return, i32 token_, i32 plate_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1D4446A62D35B0D0);
    ctx->Reset();

    ctx->Push(token_);
    ctx->Push(plate_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success sc_presence_attr_set_int(bool* native_return, u32 attr_hash_, i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1F1E9682483697C7);
    ctx->Reset();

    ctx->Push(attr_hash_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_achievement_info_status(bool* native_return, i32* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x225798743970412B);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_email_message_push_gamer_to_recip_list(void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2330C12A7A605D16);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success sc_community_event_get_extra_data_float_for_type(bool* native_return, f32* p1_, const CStringPtr& p0_, const CStringPtr& p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2570E26BE63964E3);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    ctx->Push(p2_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_presence_attr_set_string(bool* native_return, u32 attr_hash_, const CStringPtr& value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x287F1F75D2803595);
    ctx->Reset();

    ctx->Push(attr_hash_);
    ctx->Push(value_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_inbox_set_message_as_read_at_index(bool* native_return, i32 msg_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2C015348CF19CA1D);
    ctx->Reset();

    ctx->Push(msg_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_gamerdata_get_active_xp_bonus(bool* native_return, f32* value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2D874D4AE612A65F);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_licenseplate_get_plate_data(CStringPtr& native_return, i32 token_, i32 plate_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2E89990DDFF670C3);
    ctx->Reset();

    ctx->Push(token_);
    ctx->Push(plate_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success sc_transition_news_has_extra_data_tu(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3001BEF2FECA3680);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_community_event_get_display_name_for_type(bool* native_return, CStringPtr& p0_, const CStringPtr& p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x33DF47CC0642061B);
    ctx->Reset();

    ctx->Push(p1_.ptr);
    char* alt_p0_ = save_c_string(""); // creating new empty string because p0_ is nullptr
ctx->Push(alt_p0_);


    Success result = native->Invoke(ctx);
    if (result) {
        p0_.ptr = alt_p0_;
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_has_achievement_been_passed(bool* native_return, i32 achievement_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x418DC16FAE452C1C);
    ctx->Reset();

    ctx->Push(achievement_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_email_delete_emails(void* p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x44ACA259D67651DB);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success sc_community_event_is_active_for_type(bool* native_return, const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x450819D8CF90C416);
    ctx->Reset();

    ctx->Push(p0_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_email_get_email_at_index(bool* native_return, void* p1_, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4737980E8A283806);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_presence_set_activity_rating(bool* native_return, i32 p0_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x487912FD248EFDDF);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_community_event_get_event_id_for_type(i32* native_return, const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4A7D6E727F941747);
    ctx->Reset();

    ctx->Push(p0_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success sc_community_event_get_event_id(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4ED9C8D6DA297639);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success sc_community_event_get_extra_data_float(bool* native_return, f32* p1_, const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x50A8A36201DBF83E);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_email_message_clear_recip_list() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x55DF6DB45179236E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success sc_licenseplate_get_isvalid_status(i32* native_return, i32 token_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5C4EBFFA98BDB41C);
    ctx->Reset();

    ctx->Push(token_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success sc_transition_news_end() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x675721C9F644D161);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success sc_community_event_get_extra_data_string_by_id(bool* native_return, CStringPtr& p2_, i32 p0_, const CStringPtr& p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x699E4A5C8C893A18);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_.ptr);
    char* alt_p2_ = save_c_string(""); // creating new empty string because p2_ is nullptr
ctx->Push(alt_p2_);


    Success result = native->Invoke(ctx);
    if (result) {
        p2_.ptr = alt_p2_;
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_inbox_message_get_ugcdata(bool* native_return, void* p1_, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x69D82604A1A5A254);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_inbox_send_bounty_to_recip_list(bool* native_return, void* data_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6AFD2CD753FEEF83);
    ctx->Reset();

    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_transition_news_show(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6BFB12CE158E3DD4);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_licenseplate_get_count(i32* native_return, i32 token_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x700569DBA175A77C);
    ctx->Reset();

    ctx->Push(token_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success sc_community_event_get_extra_data_int(bool* native_return, i32* p1_, const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x710BCDA8071EDED1);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_profanity_check_string(bool* native_return, i32* token_, const CStringPtr& string_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x75632C5ECD7ED843);
    ctx->Reset();

    ctx->Push(string_.ptr);
    ctx->Push(token_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_inbox_message_get_data_string(bool* native_return, CStringPtr& out_, i32 p0_, const CStringPtr& context_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7572EF42FC6A9B6D);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(context_.ptr);
    char* alt_out_ = save_c_string(""); // creating new empty string because out_ is nullptr
ctx->Push(alt_out_);


    Success result = native->Invoke(ctx);
    if (result) {
        out_.ptr = alt_out_;
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_email_get_num_retrieved_emails(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7DB18CA8CAD5B098);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success sc_gamerdata_get_string(bool* native_return, CStringPtr& value_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7FFCBFEE44ECFABF);
    ctx->Reset();

    ctx->Push(name_.ptr);
    char* alt_value_ = save_c_string(""); // creating new empty string because value_ is nullptr
ctx->Push(alt_value_);


    Success result = native->Invoke(ctx);
    if (result) {
        value_.ptr = alt_value_;
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_licenseplate_get_add_status(i32* native_return, i32 token_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8147FFF6A718E1AD);
    ctx->Reset();

    ctx->Push(token_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success sc_profanity_get_check_is_pending(bool* native_return, i32 token_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x82E4A58BABC15AE7);
    ctx->Reset();

    ctx->Push(token_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_gamerdata_get_bool(bool* native_return, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8416FE4E4629D7D7);
    ctx->Reset();

    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_profanity_get_string_passed(bool* native_return, i32 token_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x85535ACF97FC0969);
    ctx->Reset();

    ctx->Push(token_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_inbox_get_bounty_data_at_index(bool* native_return, void* out_data_, i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x87E0052F08BD64E6);
    ctx->Reset();

    ctx->Push(index_);
    ctx->Push(out_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_pause_news_get_pending_story(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8A4416C0DB05FA66);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_community_event_get_extra_data_int_by_id(bool* native_return, i32* p2_, i32 p0_, const CStringPtr& p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8CC469AB4D349B7C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_.ptr);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_licenseplate_get_check_is_pending(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9237E334F6E43156);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_transition_news_get_extra_data_int_tu(bool* native_return, i32* p1_, const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x92DA6E70EF249BD1);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_inbox_get_message_is_read_at_index(bool* native_return, i32 msg_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x93028F1DB42BFD08);
    ctx->Reset();

    ctx->Push(msg_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_profanity_get_string_status(i32* native_return, i32 token_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x930DE22F07B1CCE3);
    ctx->Reset();

    ctx->Push(token_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success sc_inbox_message_do_apply(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9A2C8064B6C1E41A);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_community_event_get_extra_data_string(bool* native_return, CStringPtr& p1_, const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9DE5D2F723575ED0);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    char* alt_p1_ = save_c_string(""); // creating new empty string because p1_ is nullptr
ctx->Push(alt_p1_);


    Success result = native->Invoke(ctx);
    if (result) {
        p1_.ptr = alt_p1_;
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_inbox_message_get_data_int(bool* native_return, i32* out_, i32 p0_, const CStringPtr& context_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA00EFE4082C4056E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(context_.ptr);
    ctx->Push(out_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_community_event_is_active_by_id(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA468E0BE12B12C70);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_inbox_send_ugcstatupdate_to_recip_list(void* data_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA68D3D229F4F3B06);
    ctx->Reset();

    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success sc_gamerdata_get_float(bool* native_return, f32* value_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA770C8EEC6FB2AC5);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_inbox_get_message_type_at_index(u32* native_return, i32 msg_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBB8EA16ECBC976C4);
    ctx->Reset();

    ctx->Push(msg_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success sc_has_new_rockstar_msg(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBC1CC91205EC8D6E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_cache_new_rockstar_msgs(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBFA0A56A817C6C7D);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success sc_community_event_get_display_name(bool* native_return, CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC2C97EA97711D1AE);
    ctx->Reset();

    char* alt_p0_ = save_c_string(""); // creating new empty string because p0_ is nullptr
ctx->Push(alt_p0_);


    Success result = native->Invoke(ctx);
    if (result) {
        p0_.ptr = alt_p0_;
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_presence_attr_set_float(bool* native_return, u32 attr_hash_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC4C4575F62534A24);
    ctx->Reset();

    ctx->Push(attr_hash_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_community_event_get_extra_data_float_by_id(bool* native_return, f32* p2_, i32 p0_, const CStringPtr& p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC5A35C73B68F3C49);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_.ptr);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_gamerdata_get_int(bool* native_return, i32* value_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC85A7127E7AD02AA);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_licenseplate_set_plate_data(bool* native_return, void* plate_data_, const CStringPtr& old_plate_text_, const CStringPtr& new_plate_text_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD0EE05FE193646EA);
    ctx->Reset();

    ctx->Push(old_plate_text_.ptr);
    ctx->Push(new_plate_text_.ptr);
    ctx->Push(plate_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_licenseplate_get_isvalid_is_pending(bool* native_return, i32 token_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD302E99EDF0449CF);
    ctx->Reset();

    ctx->Push(token_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_transition_news_show_next_item(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD8122C407663B995);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_inbox_message_push_gamer_t0_recip_list(void* gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDA024BDBD600F44A);
    ctx->Reset();

    ctx->Push(gamer_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success sc_get_new_rockstar_msg(CStringPtr& native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDF649C4E9AFDD788);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success sc_pause_news_init_starter_pack(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE4F6E8D07A2F0F51);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_community_event_get_extra_data_int_for_type(bool* native_return, i32* p1_, const CStringPtr& p0_, const CStringPtr& p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE75A4A2E5E316D86);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    ctx->Push(p2_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_pause_news_shutdown() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEA95C0853A27888E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success sc_profanity_check_string_ugc(bool* native_return, i32* token_, const CStringPtr& string_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEB2BF817463DFA28);
    ctx->Reset();

    ctx->Push(string_.ptr);
    ctx->Push(token_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_licenseplate_get_check_is_valid(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF22CA0FD74B80E7A);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_inbox_message_get_raw_type_at_index(CStringPtr& native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF3E31D16CBDCB304);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success sc_licenseplate_check_string(bool* native_return, i32* p1_, const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF6BAAAF762E1BF40);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_transition_news_show_timed(bool* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFE4C1D0D3B9CC17E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_community_event_is_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFF8F3A92B75ED67A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success sc_inbox_message_get_data_bool(bool* native_return, i32 p0_, const CStringPtr& p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFFE5C16F402D851D);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_npc_phone(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_, i32 p6_, i32 p7_, i32 p8_, i32 p9_, i32 p10_, i32 p11_, i32 p12_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0077F15613D36993);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(p10_);
    ctx->Push(p11_);
    ctx->Push(p12_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success send_metric_punish_bodyguard(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x015B03EE1C43E6EC);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_mc_formation_ends(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x03C2EEBB04B3FB72);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_set_cheat_is_active() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x047CBED6F6F8B63C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_casino_inside_track(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x049F059625058A86);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_recover_contraband_mission(void* data_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x04D90BA8207ADA2D);
    ctx->Reset();

    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_bc_smash_and_grab(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x06EAF70AE066441E);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_started_session_in_offlinemode() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x098760C7461724CD);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_casino_chip(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0999F3F090EC5012);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_switch_mc_emblem(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A50D2604E05CB94);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_fm_event_deaddrop(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A9C7F36E5D7B683);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_change_mc_role(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 role_, i32 p5_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0B565B0AAE56A0E8);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(role_);
    ctx->Push(p5_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_get_vehicle_bail_distance(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0B8B7F74BF061C6D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success playstats_dar_checkpoint(void* data_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0BC254FF3A911501);
    ctx->Reset();

    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_packed_stat_int_code(i32* native_return, i32 index_, i32 character_slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0BC900A6FE73770C);
    ctx->Reset();

    ctx->Push(index_);
    ctx->Push(character_slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success leaderboards_write_add_column(i32 p0_, i32 p1_, f32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0BCA1D2C47B0D269);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_casino_lucky_seven(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0C432C1435F5E4FA);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_freemode_prologue_done(i32 p0_, i32 character_slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0D01D20616FC73FB);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(character_slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_slot_is_loaded(bool* native_return, i32 stat_slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0D0A9F0E7BD91E3C);
    ctx->Reset();

    ctx->Push(stat_slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_gunrunning_mission_ended(void* data_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0EACDF8487D5155A);
    ctx->Reset();

    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_friend_activity(i32 p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0F71DE29AB2258F1);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success leaderboards_get_number_of_columns(i32* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x117B45156D7EFF2E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success playstats_carclub_challenge(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1187CB58D7F3BED7);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_get_bool(bool* native_return, bool* out_value_, u32 stat_hash_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x11B5E6D2AE73F48E);
    ctx->Reset();

    ctx->Push(stat_hash_);
    ctx->Push(p2_);
    ctx->Push(out_value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success presence_event_updatestat_int(u32 stat_hash_, i32 value_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x11FF1C80276097ED);
    ctx->Reset();

    ctx->Push(stat_hash_);
    ctx->Push(value_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_ros_bet(i32 amount_, i32 act_, u32 player_, f32 cm_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x121FB4DDDC2D5291);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(act_);
    ctx->Push(player_);
    ctx->Push(cm_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_job_lts_round_end(void* p0_, void* p1_, void* p2_, void* p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x14E0B2D1AD1044E0);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_bc_protection_racket(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x14EDA9EE27BD1626);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_packed_stat_int_code(i32 index_, i32 value_, i32 character_slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1581503AE529CD2E);
    ctx->Reset();

    ctx->Push(index_);
    ctx->Push(value_);
    ctx->Push(character_slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_fm_event_kingofthecastle(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x164C5FF663790845);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_shop_item(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x176852ACAAC173D1);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_set_gxt_label(bool* native_return, u32 stat_name_, const CStringPtr& value_, bool save_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x17695002FD8B2AE0);
    ctx->Reset();

    ctx->Push(stat_name_);
    ctx->Push(value_.ptr);
    ctx->Push(save_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_freemode_casino_mission_ended(void* data_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1A0D4A6C336B7BC5);
    ctx->Reset();

    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_robbery_prep(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1A67DFBF1F5C3835);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_fm_event_pennedin(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1A7CE7CD3E653485);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_get_flying_altitude(bool* native_return, f32* out_value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1A8EA222F9C67DBB);
    ctx->Reset();

    ctx->Push(out_value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_crate_drop_mission_done(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_, i32 p6_, i32 p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1CAE5D2E3F9A07F0);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_instanced_heist_ended(void* data_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1E1497D0D2108115);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_pimenu_hide_options(void* data_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x203B381133817079);
    ctx->Reset();

    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_get_user_id(CStringPtr& native_return, u32 stat_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2365C388E393BBE2);
    ctx->Reset();

    ctx->Push(stat_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success playstats_casino_inside_track_light(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x23A3CBCD50D54E47);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_defend_contraband_mission(void* data_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2605663BD4F23B5D);
    ctx->Reset();

    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_reset_all_online_character_stats(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x26D7399B9587FE89);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_rival_behavior(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_, i32 p6_, i32 p7_, i32 p8_, i32 p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x27AA1C973CACFE63);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_hub_entry(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2818FF6638CB09DE);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_bw_fragile_goods(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x282B6739644F4347);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_change_mc_outfit(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x28ECB8AC2F607DB2);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_packed_ng_int_stat_key(u32* native_return, i32 index_, bool sp_stat_, bool char_stat_, i32 character_, const CStringPtr& section_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B4CDCA6F07FF3DA);
    ctx->Reset();

    ctx->Push(index_);
    ctx->Push(sp_stat_);
    ctx->Push(char_stat_);
    ctx->Push(character_);
    ctx->Push(section_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success playstats_import_export_mission_done(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B69F5074C894811);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_set_date(bool* native_return, void* value_, u32 stat_name_, i32 num_fields_, bool save_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2C29BFB64F4FCBE4);
    ctx->Reset();

    ctx->Push(stat_name_);
    ctx->Push(num_fields_);
    ctx->Push(save_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_fm_event_huntbeast(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2CD90358F67D0AA8);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_get_number_of_seconds(i32* native_return, u32 stat_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2CE056FF3723F00B);
    ctx->Reset();

    ctx->Push(stat_name_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success playstats_warehouse_mission_ended(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2D7A9B577E72385E);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_heist3_finale(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2E0259BABC27A327);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success leaderboards_write_add_column_long(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2E65248609523599);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_heist4_hack(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2FA3173480008493);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success leaderboards_read_successful(bool* native_return, i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2FB19228983E832C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success presence_event_updatestat_float(u32 stat_hash_, f32 value_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x30A6614C1F7799B8);
    ctx->Reset();

    ctx->Push(stat_hash_);
    ctx->Push(value_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_business_battle_ended(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x316DB59CD14C1774);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_smuggler_mission_ended(void* data_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x320C35147D5B5DDD);
    ctx->Reset();

    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_save_migration_consume_content(bool* native_return, u32 content_id_, const CStringPtr& src_platform_, const CStringPtr& src_gamer_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3270F67EED31FBC1);
    ctx->Reset();

    ctx->Push(content_id_);
    ctx->Push(src_platform_.ptr);
    ctx->Push(src_gamer_handle_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stat_get_current_driving_reverse_distance(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x32CAC93C9DE73D32);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success stat_start_record_stat(bool* native_return, i32 stat_type_, i32 value_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x33D72899E24C3365);
    ctx->Reset();

    ctx->Push(stat_type_);
    ctx->Push(value_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success leaderboards2_read_get_row_data_info(bool* native_return, void* p1_, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x34770B9CE0E03B91);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_cloth_change(u32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x34B973047A2268B9);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_get_pos(bool* native_return, f32* out_x_, f32* out_y_, f32* out_z_, u32 stat_name_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x350F82CCB186AA1B);
    ctx->Reset();

    ctx->Push(stat_name_);
    ctx->Push(p4_);
    ctx->Push(out_x_);
    ctx->Push(out_y_);
    ctx->Push(out_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_stone_hatchet_ended(void* data_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x35E39E5570358630);
    ctx->Reset();

    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_switch_passive_mode(bool p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x35EEC6C2BC821A71);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success leaderboards2_read_get_row_data_float(f32* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x38491439B6BA7F7D);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_profile_setting_creator_dm_done(i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x38BAAA5DD4C9D19F);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_fm_event_checkpointcollection(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3DE3AA516FB126A4);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_casino_blackjack(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3EAE97309727E7AD);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_being_boss(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3EBEAC6C3F81F6BD);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_fm_event_passtheparcel(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x419615486BBF1956);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_network_increment_on_suicide(i32 p0_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x428EAF89E24F6C36);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success change_goon_looking_for_work(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x44919CC079BB60BF);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_append_director_metric(void* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x46326E13DA4E0546);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_fm_mission_end(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x46A70777BE6CEAB9);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_award_xp(i32 amount_, u32 type_, u32 category_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x46F917F6B4128FE4);
    ctx->Reset();

    ctx->Push(amount_);
    ctx->Push(type_);
    ctx->Push(category_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_award_bad_sport(i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x47B32F5611E6E483);
    ctx->Reset();

    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_set_float(bool* native_return, u32 stat_name_, f32 value_, bool save_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4851997F37FE9B3C);
    ctx->Reset();

    ctx->Push(stat_name_);
    ctx->Push(value_);
    ctx->Push(save_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_player_style(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x48FAC5DC7AC6EA99);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_delete_slot(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x49A49BED12794D70);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_kill_yourself() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4AFF7E02E485E92B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_set_bool(bool* native_return, u32 stat_name_, bool value_, bool save_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4B33C4243DE0C432);
    ctx->Reset();

    ctx->Push(stat_name_);
    ctx->Push(value_);
    ctx->Push(save_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stat_migrate_check_already_done(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4C89FE2BDEB3F169);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_fast_trvl(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_, i32 p6_, i32 p7_, i32 p8_, i32 p9_, i32 p10_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4DC416F246A41FC8);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(p10_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_arcade_love_match(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4FCDBD3F0A813C25);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_save_migration_cancel_pending_operation(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4FEF53183C3C6414);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_background_script_action(const CStringPtr& action_, i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5009DFD741329729);
    ctx->Reset();

    ctx->Push(action_.ptr);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_earned_mc_points(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x501478855A6074CE);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_ban_alert(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x516FC96EB88EEFE5);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_arcade_game(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x533A7D1EA58DF958);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_heist3_prep(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x53C31853EC9531FF);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_bc_cashing(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x53CAE13E9B426993);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_get_license_plate(CStringPtr& native_return, u32 stat_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5473D4195058B2E4);
    ctx->Reset();

    ctx->Push(stat_name_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success set_profile_setting_creator_ctf_done(i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x55384438FC55AD8E);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_get_current_speed(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x55A8BECAF28A4EB7);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success stat_get_cancel_save_migration_status(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x567384DFA67029E6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success stat_set_open_savetype_in_job(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5688585E6D563CD8);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success leaderboards_get_cache_number_of_rows(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x58A651CD201D89AD);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success playstats_hub_exit(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5A46ACE5C4661132);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_community_start_synch(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5A556B229A169402);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stat_migrate_check_get_is_platform_available(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5BD5F255321C4AAF);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success playstats_quit_mode(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5BF29846C6527C54);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_njvs_vote(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5CDAED54B34B0ED0);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success leaderboards2_read_by_radius(bool* native_return, void* p0_, void* p2_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5CE587FB5A42C8C4);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(p0_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_idle_kick(i32 ms_stood_idle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5DA3A8DE8CB6226F);
    ctx->Reset();

    ctx->Push(ms_stood_idle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_has_driven_all_vehicles(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5EAD2BF6484852E4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_bw_head_hunter(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5FF2C33B13A02A11);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_cheat_applied(const CStringPtr& cheat_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6058665D72302D3F);
    ctx->Reset();

    ctx->Push(cheat_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_hit_contraband_destroy_limit(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x60EEDC12AF66E846);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_packed_int_stat_key(u32* native_return, i32 index_, bool sp_stat_, bool char_stat_, i32 character_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x61E111E323419E07);
    ctx->Reset();

    ctx->Push(index_);
    ctx->Push(sp_stat_);
    ctx->Push(char_stat_);
    ctx->Push(character_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success stat_disable_stats_tracking() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x629526ABA383BCAA);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success presence_event_updatestat_int_with_string(u32 stat_hash_, i32 value_, i32 p2_, const CStringPtr& string_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6483C25849031C4F);
    ctx->Reset();

    ctx->Push(stat_hash_);
    ctx->Push(value_);
    ctx->Push(p2_);
    ctx->Push(string_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_get_masked_int(bool* native_return, i32* out_value_, u32 stat_hash_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x655185A06D9EEAAB);
    ctx->Reset();

    ctx->Push(stat_hash_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(out_value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_fm_event_competitiveurbanwarfare(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6551B1F7F6CD46EA);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_casino_roulette_light(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6572ABA3DE1197FC);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_drone_usage(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x66C7BB2416ED3FCE);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_spin_wheel(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6731DE84A38BFAD0);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_bw_assault(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x678F86D8FC040BDB);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_set_profile_setting_value(i32 profile_setting_, i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x68F01422BE1D838F);
    ctx->Reset();

    ctx->Push(profile_setting_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_carclub_prize(i32 p0_, u32 vehicle_model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x69C922B677621428);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(vehicle_model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_oddjob_done(i32 total_time_ms_, i32 p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x69DEA3E9DB727B4C);
    ctx->Reset();

    ctx->Push(total_time_ms_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_set_license_plate(bool* native_return, u32 stat_name_, const CStringPtr& str_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x69FF13266D7296DA);
    ctx->Reset();

    ctx->Push(stat_name_);
    ctx->Push(str_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_fm_event_challenges(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6A60E43998228229);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_get_block_saves(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6A7F19756F1A9016);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_boss_goon_uuid(i32 character_slot_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6BC0ACD0673ACEBE);
    ctx->Reset();

    ctx->Push(character_slot_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success end_being_goon(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6BCCF9948492FD85);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_create_match_history_id2(bool* native_return, i32* player_account_id_, i32* posix_time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6DEE77AFF8C21BD1);
    ctx->Reset();

    ctx->Push(player_account_id_);
    ctx->Push(posix_time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stat_get_challenge_flying_dist(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6E0A5253375C4584);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success force_cloud_mp_stats_download_and_overwrite_local_save() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6F361B8889A792A3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_arena_wars_spectator(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6F4F599753F8200A);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success send_metric_ghosting_to_player(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7033EEFD9B28088E);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_award_nav(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x70F52471E758EBAE);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_random_mission_done(const CStringPtr& name_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x71862B1D855F32E1);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success leaderboards2_read_get_row_data_end() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x71B008056E5692D6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_job_activity_id_started(i32 p0_, i32 character_slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x723C1CE13FBFDB67);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(character_slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_bc_point_to_point(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x73001E34F85137F8);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_get_number_of_minutes(i32* native_return, u32 stat_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7583B4BE4C5A41B5);
    ctx->Reset();

    ctx->Push(stat_name_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success stat_get_int(bool* native_return, i32* out_value_, u32 stat_hash_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x767FBC2AC802EF3D);
    ctx->Reset();

    ctx->Push(stat_hash_);
    ctx->Push(p2_);
    ctx->Push(out_value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success hired_limo(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x792271AB35C356A4);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_acquired_hidden_package(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x79AB33F0FBFAC40C);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_freemode_strand_progression_status(i32 profile_setting_, i32 setting_value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x79D310A861697CC9);
    ctx->Reset();

    ctx->Push(profile_setting_);
    ctx->Push(setting_value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_bc_car_jacking(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7B18DA61F6BAE9D5);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_set_masked_int(bool* native_return, u32 stat_name_, i32 p1_, i32 p2_, i32 p3_, bool save_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7BBB1B54583ED410);
    ctx->Reset();

    ctx->Push(stat_name_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(save_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_mission_over(const CStringPtr& p0_, i32 p1_, i32 p2_, bool p3_, bool p4_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7C4BB33A8CED7324);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success leaderboards_read_clear(i32* native_return, i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7CCE5C737A665701);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success playstats_bc_salvage(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7D36291161859389);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_save_pending(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7D3A583856F2C5AC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_impexp_mission_ended(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7D8BA05688AD64C7);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_cloud_slot_save_failed(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7E6946F68A38B74F);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success leaderboards2_read_by_score_int(bool* native_return, void* p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7EEC7E4F6984A16A);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stat_cloud_slot_load_failed(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7F2C4CDF2E82DF4C);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_master_control(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x810B5FCC52EC7FF0);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_nightclub_mission_ended(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x830C3A44EB3F2CF9);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_dupe_detected(void* data_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x848B66100EE33B05);
    ctx->Reset();

    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_get_current_front_wheel_distance(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x84A810B375E69C0E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success playstats_fm_event_hotproperty(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x84DFC579C2FC214C);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_enter_session_pack(void* data_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x878FF156D36E9956);
    ctx->Reset();

    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_bw_hunt_the_boss(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x88087EE1F28024AE);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success leaderboards2_read_get_row_data_int(i32* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x88578F6EC36B4A3A);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success stat_get_save_migration_status(i32* native_return, void* data_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x886913BBEACA68C1);
    ctx->Reset();

    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success playstats_inventory(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x887DAD63CF5B7908);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_mc_clubhouse_activity(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_, i32 p6_, i32 p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8989CBD7B4E82534);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_acid_mission_end(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8A23D1324F6B2BAC);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_stop_tracking_stunts() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8A800DACCC0DA55D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_get_date(bool* native_return, void* out_value_, u32 stat_hash_, i32 num_fields_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8B0FACEFC36C824B);
    ctx->Reset();

    ctx->Push(stat_hash_);
    ctx->Push(num_fields_);
    ctx->Push(p3_);
    ctx->Push(out_value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stat_is_recording_stat(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8B9CDBD6C566C38C);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_fm_event_urbanwarfare(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8C9D11605E59D955);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_set_user_id(bool* native_return, u32 stat_name_, const CStringPtr& value_, bool save_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8CDDF1E452BABE11);
    ctx->Reset();

    ctx->Push(stat_name_);
    ctx->Push(value_.ptr);
    ctx->Push(save_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_bw_bossonbossdeathmatch(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8D8ADB562F09A245);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success leaderboards_clear_cache_data_id(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8EC74CEB042E7CFF);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_quickfix_tool(i32 element_, const CStringPtr& item_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x90D0622866E80445);
    ctx->Reset();

    ctx->Push(element_);
    ctx->Push(item_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success leaderboards_get_cache_data_row(bool* native_return, void* p2_, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9120E8DBA3D69273);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success leaderboards2_read_friends_by_row(bool* native_return, void* p0_, void* p1_, i32 p2_, bool p3_, i32 p4_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x918B101666F9CB83);
    ctx->Reset();

    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_start_tracking_stunts() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x928DBFB892638EF3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_heist3_hack(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x92FC0EEDFAC04A14);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_npc_invite(const CStringPtr& p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x93054C88E6AA7C44);
    ctx->Reset();

    ctx->Push(p0_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_bc_most_wanted(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x930F504203F561C9);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success packed_stat_get_int_stat_index(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x94F12ABF9C79E339);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success playstats_casino_roulette(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x95101C443A84E7F1);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_pegasus_as_personal_aircraft(u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9572BD4DD6B72122);
    ctx->Reset();

    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_being_goon(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x96E6D5150DBF1C09);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_enable_stats_tracking() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x98E2BC1CA26287C3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_migrate_savegame_get_status(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9A62EC95AE10E011);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success stat_clear_dirty_read_detected() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9B4BD21D69B1E609);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_increment(u32 stat_name_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9B5A68C6489E9909);
    ctx->Reset();

    ctx->Push(stat_name_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_race_checkpoint(u32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9C375C315099DDE4);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success leaderboards_get_cache_exists(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9C51349BE6CDFE2C);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stat_get_current_jump_distance(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9EC8858184CD253A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success playstats_activity_done(i32 p0_, i32 activity_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA071E0ED98F91286);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(activity_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success leaderboards2_read_get_row_data_start(bool* native_return, void* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA0F93D5465B3094D);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stat_load_pending(bool* native_return, i32 stat_slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA1750FFAFA181661);
    ctx->Reset();

    ctx->Push(stat_slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success leaderboards_read_any_pending(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA31FD15197B192BD);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success leaderboards_read_clear_all(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA34CB6E6F0DF4A0B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success end_being_boss(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA3C53804BDB68ED2);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_migrate_savegame_start(bool* native_return, const CStringPtr& platform_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA5C80D8E768A9E66);
    ctx->Reset();

    ctx->Push(platform_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stat_load(bool* native_return, i32 stat_slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA651443F437B1CE6);
    ctx->Reset();

    ctx->Push(stat_slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_bw_belly_of_the_beast(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA6F54BB2FFCA35EA);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_job_lts_end(void* p0_, void* p1_, void* p2_, void* p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA736CF7FB7C5BFF4);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_stop_record_stat(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA761D4AC6115623D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stat_local_reset_all_online_character_stats(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA78B8FA58200DA56);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_clear_pending_saves(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA8733668D1047B51);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_set_string(bool* native_return, u32 stat_name_, const CStringPtr& value_, bool save_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA87B2335D12531D7);
    ctx->Reset();

    ctx->Push(stat_name_);
    ctx->Push(value_.ptr);
    ctx->Push(save_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stat_get_current_rear_wheel_distance(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA943FD1722E11EFD);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success leaderboards2_read_by_row(bool* native_return, void* p0_, void* p1_, void* p3_, void* p5_, i32 p2_, i32 p4_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA9CDB1E3F0A49883);
    ctx->Reset();

    ctx->Push(p2_);
    ctx->Push(p4_);
    ctx->Push(p6_);
    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p3_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success send_metric_vip_poach(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA525DFF66BB82F5);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success leaderboards_read_pending(bool* native_return, i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAC392C8483342AC2);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_race_to_point_mission_done(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xADDD1C754E2E2914);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success leaderboards2_write_data(bool* native_return, void* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAE2206545888AE49);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_crate_created(f32 p0_, f32 p1_, f32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAFC7E5E075A96F46);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_get_current_skydiving_distance(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAFF47709F1D5DCCE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success stat_community_synch_is_pending(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB1D2BB1E1631F5B1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_dj_usage(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB26F670685631727);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_set_int(bool* native_return, u32 stat_name_, i32 value_, bool save_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB3271D7AB655B441);
    ctx->Reset();

    ctx->Push(stat_name_);
    ctx->Push(value_);
    ctx->Push(save_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stat_rollback_save_migration(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB3DA2606774A8E2D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_profile_setting_prologue_complete() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB475F27C6A994D65);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_arena_wars_ended(void* data_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB479D9F0D48A1BC5);
    ctx->Reset();

    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_copy_rank_into_new_slot(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB7257BA2550EA10A);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success leaderboards_cache_data_row(bool* native_return, void* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB9BB18E2C40142ED);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success leaderboards2_read_by_rank(bool* native_return, void* p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA2C7DB0C129449A);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_prop_change(u32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA739D6D5A05D6E7);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_get_current_drive_nocrash_distance(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA9749CC94C1FD85);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success playstats_fm_event_atob(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBAA2F0490E146BE8);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_robbery_finale(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBBA55BE9AAAABF44);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_save_pending_or_requested(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBBB6AD006F1BBEA3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_match_started(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBC80E22DED931E3D);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_is_stats_tracking_enabled(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBE3DB208333D9844);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_spent_pi_custom_loadout(i32 amount_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBE509B0A3693DE8B);
    ctx->Reset();

    ctx->Push(amount_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_community_get_history(bool* native_return, f32* out_value_, u32 stat_name_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBED9F5693F34ED17);
    ctx->Reset();

    ctx->Push(stat_name_);
    ctx->Push(p1_);
    ctx->Push(out_value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_mission_ended(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBF371CD2B64212FD);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success leaderboards_get_column_type(i32* native_return, i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBF4FEF46DB7894D3);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success playstats_fm_event_vehicletarget(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBFAFDB5FAAA5C5AB);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stats_completed_character_creation(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC01D2470F22CDE5A);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_mission_vote(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC03FAB2C2F92289B);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_get_load_safe_to_progress_to_mp_from_sp(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC0E0D686DDFC6EAE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_has_posted_all_vehicles_driven() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC141B8917E0017EC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_minigame_usage(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC14BD9F5337219B2);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_mission_started(const CStringPtr& p0_, i32 p1_, i32 p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC19A2925C34D2231);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_heist4_finale(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC1E963C58664B556);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_set_current_posix_time(bool* native_return, u32 stat_name_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC2F84B7F9C4D0C61);
    ctx->Reset();

    ctx->Push(stat_name_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success leaderboards2_read_by_handle(bool* native_return, void* p0_, void* p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC30713A383BFBF0E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success leaderboards2_read_rank_prediction(bool* native_return, void* p0_, void* p1_, void* p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC38DC1E90D22547C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success leaderboards_get_column_id(i32* native_return, i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC4B5467A1886EA7E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success playstats_leave_job_chain(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC5BE134EC7BA96A0);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_profile_setting_sp_chop_mission_complete() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC67E2DA1CBE759E2);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_migrate_check_start(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC6E0E2616A7576BB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_sell_contraband_mission(void* data_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC729991A9065376E);
    ctx->Reset();

    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_rank_up(i32 rank_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC7F2DE41D102BFB4);
    ctx->Reset();

    ctx->Push(rank_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_migrate_clear_for_restart() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC847B43F369AC0B5);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_casino_three_card_poker_light(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC9001364B4388F22);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_mission_checkpoint(const CStringPtr& p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC900596A63978C1D);
    ctx->Reset();

    ctx->Push(p0_.ptr);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success leaderboards2_write_data_for_event_type(bool* native_return, void* p0_, void* p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC980E62E33DF1D5C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_hold_up_mission_done(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCB00196B31C39EB1);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_mc_request_bike(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCC25A4553DFBF9EA);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_collectible_picked_up(i32 p0_, u32 object_hash_, i32 p2_, i32 p3_, i32 money_amount_, i32 rp_amount_, i32 chips_amount_, i32 p7_, i32 p8_, i32 p9_, i32 p10_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCD0A8A9338681CF2);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(object_hash_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(money_amount_);
    ctx->Push(rp_amount_);
    ctx->Push(chips_amount_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(p10_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_get_save_migration_consume_content_status(i32* native_return, i32* p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCE5AA445ABA8DEE0);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success order_boss_vehicle(i32 p0_, i32 p1_, u32 vehicle_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCEA553E35C2246E1);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(vehicle_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_acid_rnd(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCEACCF0550FDC5BA);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_set_join_type(i32 join_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD1032E482629049E);
    ctx->Reset();

    ctx->Push(join_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_packed_tu_int_stat_key(u32* native_return, i32 index_, bool sp_stat_, bool char_stat_, i32 character_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD16C2AD6B8E32854);
    ctx->Reset();

    ctx->Push(index_);
    ctx->Push(sp_stat_);
    ctx->Push(char_stat_);
    ctx->Push(character_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success playstats_bw_yatchattack(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD1A1EE3B4FA8E760);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success change_uniform(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD1C9B92BDD3F151D);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_sub_weap(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD4367D310F079DB0);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success leaderboards_clear_cache_data() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD4B02A6B476E1FDC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_casino_blackjack_light(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD5451C7BF151EB6F);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_abandoned_mc(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD558BEC0BBA7E8D2);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_buy_contraband_mission(void* data_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD6781E42755531F7);
    ctx->Reset();

    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_dj_mission_ended(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD6CA58B3B53A0F22);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_get_float(bool* native_return, f32* out_value_, u32 stat_hash_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD7AE6C9C9C6AC54C);
    ctx->Reset();

    ctx->Push(stat_hash_);
    ctx->Push(p2_);
    ctx->Push(out_value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_fm_heist_prep_ended(void* data_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD8AFB345A9C5CCBB);
    ctx->Reset();

    ctx->Push(data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_packed_stat_bool_code(bool* native_return, i32 index_, i32 character_slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDA7EBFC49AE3F1B0);
    ctx->Reset();

    ctx->Push(index_);
    ctx->Push(character_slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_has_specialedition_content(i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDAC073C7901F9E15);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_gunrunning_rnd(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDAF80797FC534BEC);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_set_pos(bool* native_return, u32 stat_name_, f32 x_, f32 y_, f32 z_, bool save_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDB283FDE680FE72E);
    ctx->Reset();

    ctx->Push(stat_name_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(save_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_packed_stat_bool_code(i32 index_, bool value_, i32 character_slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDB8A58AEAA67CD07);
    ctx->Reset();

    ctx->Push(index_);
    ctx->Push(value_);
    ctx->Push(character_slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_website_visited(u32 scaleform_hash_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDDF24D535060F811);
    ctx->Reset();

    ctx->Push(scaleform_hash_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_migrate_check_get_platform_status(i32* native_return, void* p1_, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDEAAF77EB3687E97);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success playstats_heist3_drone(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDFBD93BF2943E29B);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_heist4_prep(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDFCDB14317A9B361);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_save(bool* native_return, i32 p0_, bool p1_, i32 p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE07BCA305B82D2FD);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stat_get_number_of_days(i32* native_return, u32 stat_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE0E854F5280FB769);
    ctx->Reset();

    ctx->Push(stat_name_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success playstats_bc_finders_keepers(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE3261D791EB44ACB);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_cloud_slot_load_failed_code(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE496A53BA5F50A56);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success stat_get_string(CStringPtr& native_return, u32 stat_hash_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE50384ACC2C3DB74);
    ctx->Reset();

    ctx->Push(stat_hash_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success playstats_casino_slot_machine_light(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE60054A0FAE8227F);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success leaderboards2_read_by_score_float(bool* native_return, void* p0_, f32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE662C8B759D08F3C);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stat_get_current_near_miss_nocrash_precise(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE8853FBCE7D8D0D6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success playstats_weapon_mode_change(u32 weapon_hash_, u32 component_hash_to_, u32 component_hash_from_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE95C8A1875A02CA4);
    ctx->Reset();

    ctx->Push(weapon_hash_);
    ctx->Push(component_hash_to_);
    ctx->Push(component_hash_from_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_clear_slot_for_reload(bool* native_return, i32 stat_slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEB0A72181D4AA4AD);
    ctx->Reset();

    ctx->Push(stat_slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_idle(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEC9553A178E8F1D1);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_load_dirty_read_detected(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xECB41AC6AB754401);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_fm_event_criminaldamage(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEDBF6C9B0D2C65C8);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_casino_slot_machine(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEF5EC67D392B830A);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success leaderboards_get_cache_time(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF04C1C27DA35F6C8);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success playstats_bw_air_freight(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF06A6F41CB445443);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_get_recorded_value(bool* native_return, f32* value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF11F01D98113536A);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_profile_setting_creator_races_done(i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF1A1803D3476F215);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success leaderboards2_read_by_plaform(bool* native_return, void* p0_, const CStringPtr& gamer_handle_csv_, const CStringPtr& platform_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF1AE5DCDBFCA2721);
    ctx->Reset();

    ctx->Push(gamer_handle_csv_.ptr);
    ctx->Push(platform_name_.ptr);
    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stat_get_number_of_hours(i32* native_return, u32 stat_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF2D4B2FE415AAFC3);
    ctx->Reset();

    ctx->Push(stat_name_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success stat_set_block_saves(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF434A10BA01C37D0);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_heist_save_cheat(u32 hash_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF4FF020A08BC8863);
    ctx->Reset();

    ctx->Push(hash_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_mc_killed_rival_mc_member(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF534D94DFA2EAD26);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_job_bend(void* p0_, void* p1_, void* p2_, void* p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF5BB8DAC426A52C0);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_save_migration_transaction_id_warning(i32 transaction_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF6792800AC95350D);
    ctx->Reset();

    ctx->Push(transaction_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_casino_three_card_poker(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF740FB339D471C35);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_job_activity_end(void* p0_, void* p1_, void* p2_, void* p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF8C54A461C3E11DC);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_arcade_cabinet(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF9096193DF1F99D4);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_shopmenu_nav(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF96E9EA876D9DC92);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stat_is_player_vehicle_above_ocean(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF9F2922717B819EC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success playstats_extra_event(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFA5B74BAB8A7EF99);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_bw_sightseer(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFCC228E07217FCAC);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_casino_story_mission_ended(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFCCCAC2BD3C1F180);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_inst_mission_end(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFEA3F7E83C0610FA);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success playstats_carclub_points(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFF14D6FEEC507BBE);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_new_load_scene_loaded(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x01B8247A7A8B9AD1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success remove_clip_set(const CStringPtr& clip_set_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x01F73A131C18CD94);
    ctx->Reset();

    ctx->Push(clip_set_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_allow_time_based_fading_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x03F1A106BDA7DD3E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_collision_at_coord(f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x07503F7948F491A7);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success streamvol_is_valid(bool* native_return, i32 unused_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x07C313F94746702C);
    ctx->Reset();

    ctx->Push(unused_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_restore_focus_entity(u32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0811381EF5062FEC);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_switch_interp_out_duration(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x08C2D6C52A3104BB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success end_srl() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A41540E63C9EE17);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success streamvol_create_line(i32* native_return, f32 p0_, f32 p1_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0AD9710CEE2F590F);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success add_model_to_creator_budget(bool* native_return, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0BC3144DEB678666);
    ctx->Reset();

    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_lodscale(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0C15B0E443B2349D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_player_switch_establishing_shot(const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0FDE9DBFC0A6BC65);
    ctx->Reset();

    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_anim_set(const CStringPtr& anim_set_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x16350528F93024B3);
    ctx->Reset();

    ctx->Push(anim_set_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_focus_entity(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x198F77705FA0931D);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_model_a_vehicle(bool* native_return, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x19AAC8F07BFEC53E);
    ctx->Reset();

    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_scene_streaming_tracks_cam_pos_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1E9057A74FD73E23);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success streamvol_delete(i32 unused_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1EE7D8DF4425F053);
    ctx->Reset();

    ctx->Push(unused_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success streamvol_create_frustum(i32* native_return, f32 p0_, f32 p1_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, f32 p6_, i32 p7_, i32 p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1F3F018BC3AFA77C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_srl_long_jump_mode(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x20C6C7E4EB082A7F);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_short_switch_state(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x20F898A5D9782800);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success new_load_scene_start(bool* native_return, f32 pos_x_, f32 pos_y_, f32 pos_z_, f32 offset_x_, f32 offset_y_, f32 offset_z_, f32 radius_, i32 p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x212A8D0D2BABFAC2);
    ctx->Reset();

    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(offset_x_);
    ctx->Push(offset_y_);
    ctx->Push(offset_z_);
    ctx->Push(radius_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success streamvol_create_sphere(i32* native_return, f32 x_, f32 y_, f32 z_, f32 rad_, i32 p4_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x219C7B8D53E429FD);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(rad_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success has_collision_for_model_loaded(bool* native_return, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x22CCA434E368F03A);
    ctx->Reset();

    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success does_anim_dict_exist(bool* native_return, const CStringPtr& anim_dict_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2DA49C3B79856961);
    ctx->Reset();

    ctx->Push(anim_dict_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_entity_focus(bool* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2DDFF3FB9075D747);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success has_clip_set_loaded(bool* native_return, const CStringPtr& clip_set_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x318234F4F3738AF3);
    ctx->Reset();

    ctx->Push(clip_set_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_focus() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x31B73D1EA9F01DA2);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_model_in_cdimage(bool* native_return, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x35B9E0803292B641);
    ctx->Reset();

    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success prefetch_srl(const CStringPtr& srl_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3D245789CE12982C);
    ctx->Reset();

    ctx->Push(srl_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_used_creator_budget(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3D3D8B3BE5A83D35);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_number_of_streaming_requests(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4060057271CEBC89);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_render_hd_only(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x40AEFD1A244741F2);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_ipl(const CStringPtr& ipl_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x41B4893843BBDB74);
    ctx->Reset();

    ctx->Push(ipl_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_network_loading_scene(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x41CA5A33160EA4AB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ditch_police_models(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x42CBE54462D92634);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success allow_player_switch_pan() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x43D1680C6D19A8E9);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success load_scene(f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4448EB75B4904BDB);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_switch_state(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x470555300D10B2A5);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success suppress_hd_map_streaming_this_frame() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x472397322E92A856);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_all_mapdata_culled(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4E52E752C76E7E7A);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ipl_group_swap_is_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5068F488DDB54DD8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_player_switch_interp_out_current_time(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5B48A06DD0E792A5);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_switch_skipping_descent(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5B74EA8CFD5E3E7E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_player_short_switch_style(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5F2013F8BC24EE69);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_named_ptfx_asset(const CStringPtr& fx_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5F61EBBE1A00F96D);
    ctx->Reset();

    ctx->Push(fx_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ipl_group_swap_cancel() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x63EB2B972A218CAC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_streaming(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6E0C692677008888);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_anim_set(const CStringPtr& anim_set_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6EA47DAE7FAD0EED);
    ctx->Reset();

    ctx->Push(anim_set_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_game_pauses_for_streaming(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x717CD6E6FAEBBEDC);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_safe_to_start_player_switch(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x71E7B2E657449AAD);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success allow_player_switch_outro() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x74DE2E8739086740);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_model_a_ped(bool* native_return, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x75816577FEA6DAD5);
    ctx->Reset();

    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_reduce_ped_model_budget(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x77B5F9A36BF96710);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_switch_jump_cut_index(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x78C0D93253149435);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success streamvol_has_loaded(bool* native_return, i32 unused_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7D41E9D2D17C5B2D);
    ctx->Reset();

    ctx->Push(unused_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success load_global_water_file(i32 water_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7E3F55ED251B76D3);
    ctx->Reset();

    ctx->Push(water_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_reduce_vehicle_model_budget(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x80C527893080CCF3);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_named_ptfx_asset_loaded(bool* native_return, const CStringPtr& fx_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8702416E512EC454);
    ctx->Reset();

    ctx->Push(fx_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ipl_active(bool* native_return, const CStringPtr& ipl_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x88A741E44A2B3495);
    ctx->Reset();

    ctx->Push(ipl_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success remove_ptfx_asset() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x88C6814073DD4A73);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_models_in_room(i32 interior_, const CStringPtr& room_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8A7A40100EDFEC58);
    ctx->Reset();

    ctx->Push(interior_);
    ctx->Push(room_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_population_budget(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8C95333CFC3340F3);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success allow_player_switch_ascent() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8E2A065ABDAE6994);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_collision_for_model(u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x923CB32A3B874FCB);
    ctx->Reset();

    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_switch_to_multi_firstpart_finished(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x933BBEEB8C61B5F4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success request_ptfx_asset() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x944955FB2A3935C8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ipl_group_swap_start(const CStringPtr& ipl_name1_, const CStringPtr& ipl_name2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x95A7DABDDBB78AE7);
    ctx->Reset();

    ctx->Push(ipl_name1_.ptr);
    ctx->Push(ipl_name2_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_player_switch() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x95C0A5BBDC189AA1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_model(u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x963D27A58DF860AC);
    ctx->Reset();

    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_model_loaded(bool* native_return, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x98A4EB5D89A0C952);
    ctx->Reset();

    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_island_enabled(const CStringPtr& name_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9A9D1BA639675CF1);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success begin_srl() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9BADDC94EF83B823);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_menu_ped_model(u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA0261AEF7ACFC51E);
    ctx->Reset();

    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_new_load_scene_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA41A05B6CB741B85);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_srl_time(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA74A541C6884E7B8);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success override_lodscale_this_frame(f32 scaling_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA76359FC80B2438E);
    ctx->Reset();

    ctx->Push(scaling_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success switch_to_multi_firstpart(u32 ped_, i32 flags_, i32 switch_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAAB3200ED59016BC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(flags_);
    ctx->Push(switch_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success new_load_scene_start_sphere(bool* native_return, f32 x_, f32 y_, f32 z_, f32 radius_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xACCFB4ACF53551B0);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success allow_player_switch_descent() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAD5FDF34B81BFE79);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_mapdatacullbox_enabled(const CStringPtr& name_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAF12610C644A35C9);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_player_switch_type(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB3C94A90D9FC9E62);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success init_creator_budget() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB5A4DB34FE89B88A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ideal_player_switch_type(i32* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB5D7B26B45720E05);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success request_named_ptfx_asset(const CStringPtr& fx_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB80D8756B4668AB6);
    ctx->Reset();

    ctx->Push(fx_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_hd_area(f32 x_, f32 y_, f32 z_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB85F26619073E775);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_focus_pos_and_vel(f32 x_, f32 y_, f32 z_, f32 offset_x_, f32 offset_y_, f32 offset_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBB7454BAFF08FE25);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(offset_x_);
    ctx->Push(offset_y_);
    ctx->Push(offset_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_streamvol_active(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBC9823AB80A3DCAC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success disable_switch_outro_fx() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBD605B8E0E18B3BB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success load_all_objects_now() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBD6E84632DD4CB3F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_srl_readahead_times(i32 p0_, i32 p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBEB2D9A1D9A8F55A);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remap_lodscale_range_this_frame(f32 p0_, f32 p1_, f32 p2_, f32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBED8CA5FF5E04113);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_model_valid(bool* native_return, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC0296A2EDF545E92);
    ctx->Reset();

    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success new_load_scene_stop() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC197616D221FF4A4);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_switch_outro(f32 camera_coord_x_, f32 camera_coord_y_, f32 camera_coord_z_, f32 cam_rotation_x_, f32 cam_rotation_y_, f32 cam_rotation_z_, f32 cam_fov_, f32 cam_far_clip_, i32 rotation_order_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC208B673CE446B61);
    ctx->Reset();

    ctx->Push(camera_coord_x_);
    ctx->Push(camera_coord_y_);
    ctx->Push(camera_coord_z_);
    ctx->Push(cam_rotation_x_);
    ctx->Push(cam_rotation_y_);
    ctx->Push(cam_rotation_z_);
    ctx->Push(cam_fov_);
    ctx->Push(cam_far_clip_);
    ctx->Push(rotation_order_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_update_load_scene(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC4582015556D1C46);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success has_anim_set_loaded(bool* native_return, const CStringPtr& anim_set_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC4EA073D86FB29B0);
    ctx->Reset();

    ctx->Push(anim_set_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success request_additional_collision_at_coord(f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC9156DC11411A9EA);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_ptfx_asset_loaded(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCA7D9B86ECA7481B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_population_budget(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCB9E1EB3BE2AF4E9);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success shutdown_creator_budget() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCCE26000E9A6FAD7);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_hd_area() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCE58B1CFB9290813);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_srl_loaded(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD0263801A4C5B0BB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success has_anim_dict_loaded(bool* native_return, const CStringPtr& anim_dict_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD031A9162D01088C);
    ctx->Reset();

    ctx->Push(anim_dict_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success request_clip_set(const CStringPtr& clip_set_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD2A71E1A77418A49);
    ctx->Reset();

    ctx->Push(clip_set_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_anim_dict(const CStringPtr& anim_dict_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD3BD40951412FEF6);
    ctx->Reset();

    ctx->Push(anim_dict_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success enable_switch_pause_before_descent() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD4793DFF3AF2ABCD);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success switch_to_multi_secondpart(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD8295AF639FD9CB8);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_player_switch_in_progress(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD9D2CFFF49FAB35F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_switch_ready_for_descent(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDFA80CB25D0A19B3);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_interior_active(i32 interior_i_d_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE37B76C387BE28ED);
    ctx->Reset();

    ctx->Push(interior_i_d_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_model_as_no_longer_needed(u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE532F5D78798DAAB);
    ctx->Reset();

    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_ipl(const CStringPtr& ipl_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEE6C5AD3ECE0A82D);
    ctx->Reset();

    ctx->Push(ipl_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_srl_post_cutscene_camera(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEF39EE20C537E98C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_model_from_creator_budget(u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF086AD9354FAC3A3);
    ctx->Reset();

    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ipl_group_swap_finish() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF4A0DADB70F57FA6);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_anim_dict(const CStringPtr& anim_dict_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF66A602F829E2A06);
    ctx->Reset();

    ctx->Push(anim_dict_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_global_water_file(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF741BD853611592D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_srl_force_prestream(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF8155A7F03DDFC8E);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_player_switch(u32 from_, u32 to_, i32 flags_, i32 switch_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFAA23F2CBA159D67);
    ctx->Reset();

    ctx->Push(from_);
    ctx->Push(to_);
    ctx->Push(flags_);
    ctx->Push(switch_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ipl_group_swap_is_ready(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFB199266061F820A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success timestep(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0000000050597EE2);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success sin(f32* native_return, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0BADBFA3B172435F);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success ceil(i32* native_return, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x11E019C8F43ACC8A);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success vdist(f32* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2A488C176D52CCA5);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_this_thread_priority(i32 priority_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x42B65DEEF2EDF2A1);
    ctx->Reset();

    ctx->Push(priority_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success wait(i32 ms_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4EDE34FBADD967A6);
    ctx->Reset();

    ctx->Push(ms_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success settimerb(i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5AE11BC36633DE4E);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success vmag(f32* native_return, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x652D2EEEF1D3E62C);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success sqrt(f32* native_return, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x71D93B57D07F9804);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success timera(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x83666F9FB8FEBD4B);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success shift_right(i32* native_return, i32 value_, i32 bit_shift_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x97EF1E5BCE9DC075);
    ctx->Reset();

    ctx->Push(value_);
    ctx->Push(bit_shift_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success vmag2(f32* native_return, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA8CEACB4F35AE058);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success vdist2(f32* native_return, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB7A628320EFF8E47);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success start_new_script_with_args(i32* native_return, void* args_, const CStringPtr& script_name_, i32 arg_count_, i32 stack_size_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB8BA7F44DF1575E1);
    ctx->Reset();

    ctx->Push(script_name_.ptr);
    ctx->Push(arg_count_);
    ctx->Push(stack_size_);
    ctx->Push(args_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success to_float(f32* native_return, i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBBDA792448DB5A89);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success settimera(i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC1B1E9A034A63A62);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_new_script_with_name_hash_and_args(i32* native_return, void* args_, u32 script_hash_, i32 arg_count_, i32 stack_size_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC4BB298BD441BE78);
    ctx->Reset();

    ctx->Push(script_hash_);
    ctx->Push(arg_count_);
    ctx->Push(stack_size_);
    ctx->Push(args_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success timerb(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC9D9444186B5A374);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success cos(f32* native_return, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD0FFB162F40A139C);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success pow(f32* native_return, f32 base_, f32 exponent_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE3621CC40F31FE2E);
    ctx->Reset();

    ctx->Push(base_);
    ctx->Push(exponent_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success start_new_script(i32* native_return, const CStringPtr& script_name_, i32 stack_size_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE81651AD79516E48);
    ctx->Reset();

    ctx->Push(script_name_.ptr);
    ctx->Push(stack_size_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success log10(f32* native_return, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE816E655DE37FE20);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success start_new_script_with_name_hash(i32* native_return, u32 script_hash_, i32 stack_size_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEB1C67C3A5333A92);
    ctx->Reset();

    ctx->Push(script_hash_);
    ctx->Push(stack_size_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success shift_left(i32* native_return, i32 value_, i32 bit_shift_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEDD95A39E5544DE8);
    ctx->Reset();

    ctx->Push(value_);
    ctx->Push(bit_shift_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success round(i32* native_return, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF2DB717A73826179);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success floor(i32* native_return, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF34EE736CF047844);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success waypoint_recording_get_speed_at_point(f32* native_return, const CStringPtr& name_, i32 point_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x005622AEBC33ACA9);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(point_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_sequence_progress(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x00A9010CFE1E3533);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_scenario_group_enabled(const CStringPtr& scenario_group_, bool enabled_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x02C8E5B49848664E);
    ctx->Reset();

    ctx->Push(scenario_group_.ptr);
    ctx->Push(enabled_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_anim_rate(u32 entity_, f32 rate_, i32 priority_, bool secondary_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x032D49C5E359C847);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(rate_);
    ctx->Push(priority_);
    ctx->Push(secondary_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_go_to_entity_while_aiming_at_coord(u32 ped_, u32 entity_, f32 aim_x_, f32 aim_y_, f32 aim_z_, f32 move_blend_ratio_, bool shoot_, f32 target_radius_, f32 slow_distance_, bool use_nav_mesh_, bool instant_blend_to_aim_, u32 firing_pattern_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x04701832B739DCE5);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(entity_);
    ctx->Push(aim_x_);
    ctx->Push(aim_y_);
    ctx->Push(aim_z_);
    ctx->Push(move_blend_ratio_);
    ctx->Push(shoot_);
    ctx->Push(target_radius_);
    ctx->Push(slow_distance_);
    ctx->Push(use_nav_mesh_);
    ctx->Push(instant_blend_to_aim_);
    ctx->Push(firing_pattern_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success waypoint_playback_start_shooting_at_coord(u32 ped_, f32 x_, f32 y_, f32 z_, bool p4_, u32 firing_pattern_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x057A25CFCC9DB671);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p4_);
    ctx->Push(firing_pattern_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_parachute_task_thrust(u32 ped_, f32 thrust_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0729BAC1B8C64317);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(thrust_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_follow_waypoint_recording(u32 ped_, const CStringPtr& name_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0759591819534F7B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(name_.ptr);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_shoot_at_entity(u32 entity_, u32 target_, i32 duration_, u32 firing_pattern_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x08DA95E8298AE772);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(target_);
    ctx->Push(duration_);
    ctx->Push(firing_pattern_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_rappel_from_heli(u32 ped_, f32 min_height_above_ground_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x09693B0312F91649);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(min_height_above_ground_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_scenario_of_type_exist_in_area(bool* native_return, f32 x_, f32 y_, f32 z_, const CStringPtr& scenario_name_, f32 radius_, bool must_be_free_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A9D0C2A3BBC86C1);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(scenario_name_.ptr);
    ctx->Push(radius_);
    ctx->Push(must_be_free_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success task_jump(u32 ped_, bool use_player_launch_force_, bool do_super_jump_, bool use_full_super_jump_force_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0AE4086104E067B1);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(use_player_launch_force_);
    ctx->Push(do_super_jump_);
    ctx->Push(use_full_super_jump_force_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_scenario_types_enabled() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0D40EE2A7F2B2D6D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success waypoint_playback_pause(i32 p0_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0F342546AA06FED5);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_vehicle_park(u32 ped_, u32 vehicle_, f32 x_, f32 y_, f32 z_, f32 heading_, i32 mode_, f32 radius_, bool keep_engine_on_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0F3E34E968EA374E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(vehicle_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(heading_);
    ctx->Push(mode_);
    ctx->Push(radius_);
    ctx->Push(keep_engine_on_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_clear_look_at(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0F804F1DB19B9689);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_vehicle_escort(u32 ped_, u32 vehicle_, u32 target_vehicle_, i32 mode_, f32 speed_, i32 driving_style_, f32 min_distance_, i32 min_height_above_terrain_, f32 no_roads_distance_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0FA6E4B75F302400);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(vehicle_);
    ctx->Push(target_vehicle_);
    ctx->Push(mode_);
    ctx->Push(speed_);
    ctx->Push(driving_style_);
    ctx->Push(min_distance_);
    ctx->Push(min_height_above_terrain_);
    ctx->Push(no_roads_distance_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_task_move_network_enable_collision_on_network_clone_when_fixed(bool* native_return, u32 ped_, bool enable_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0FFB3C758E8C07B9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(enable_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success task_vehicle_shoot_at_ped(u32 ped_, u32 target_, f32 fire_tolerance_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x10AB107B887214D8);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(target_);
    ctx->Push(fire_tolerance_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_go_to_coord_while_aiming_at_coord(u32 ped_, f32 x_, f32 y_, f32 z_, f32 aim_at_x_, f32 aim_at_y_, f32 aim_at_z_, f32 move_blend_ratio_, bool shoot_, f32 target_radius_, f32 slow_distance_, bool use_nav_mesh_, i32 nav_flags_, bool instant_blend_to_aim_, u32 firing_pattern_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x11315AB3385B8AC0);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(aim_at_x_);
    ctx->Push(aim_at_y_);
    ctx->Push(aim_at_z_);
    ctx->Push(move_blend_ratio_);
    ctx->Push(shoot_);
    ctx->Push(target_radius_);
    ctx->Push(slow_distance_);
    ctx->Push(use_nav_mesh_);
    ctx->Push(nav_flags_);
    ctx->Push(instant_blend_to_aim_);
    ctx->Push(firing_pattern_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success vehicle_waypoint_playback_override_speed(u32 vehicle_, f32 speed_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x121F0593E0A431D7);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(speed_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_scripted_animation(i32* priority_low_data_, i32* priority_mid_data_, i32* priority_high_data_, u32 ped_, f32 blend_in_delta_, f32 blend_out_delta_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x126EF75F1E17ABE5);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(blend_in_delta_);
    ctx->Push(blend_out_delta_);
    ctx->Push(priority_low_data_);
    ctx->Push(priority_mid_data_);
    ctx->Push(priority_high_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success assisted_movement_override_load_distance_this_frame(f32 dist_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x13945951E16EF912);
    ctx->Reset();

    ctx->Push(dist_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_start_scenario_in_place(u32 ped_, const CStringPtr& scenario_name_, i32 unk_delay_, bool play_enter_anim_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x142A02425FF02BD9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(scenario_name_.ptr);
    ctx->Push(unk_delay_);
    ctx->Push(play_enter_anim_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_vehicle_drive_to_coord_longrange(u32 ped_, u32 vehicle_, f32 x_, f32 y_, f32 z_, f32 speed_, i32 drive_mode_, f32 stop_range_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x158BB33F920D360C);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(vehicle_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(speed_);
    ctx->Push(drive_mode_);
    ctx->Push(stop_range_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_boat_mission(u32 ped_driver_, u32 vehicle_, u32 target_vehicle_, u32 target_ped_, f32 x_, f32 y_, f32 z_, i32 mission_, f32 max_speed_, i32 driving_style_, f32 target_reached_, i32 boat_flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x15C86013127CE63F);
    ctx->Reset();

    ctx->Push(ped_driver_);
    ctx->Push(vehicle_);
    ctx->Push(target_vehicle_);
    ctx->Push(target_ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(mission_);
    ctx->Push(max_speed_);
    ctx->Push(driving_style_);
    ctx->Push(target_reached_);
    ctx->Push(boat_flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_follow_nav_mesh_to_coord(u32 ped_, f32 x_, f32 y_, f32 z_, f32 move_blend_ratio_, i32 time_, f32 target_radius_, i32 flags_, f32 target_heading_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x15D3A79D4E44B913);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(move_blend_ratio_);
    ctx->Push(time_);
    ctx->Push(target_radius_);
    ctx->Push(flags_);
    ctx->Push(target_heading_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_ped_secondary_task(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x176CECF6F920D707);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_follow_nav_mesh_to_coord_advanced(u32 ped_, f32 x_, f32 y_, f32 z_, f32 move_blend_ratio_, i32 time_, f32 target_radius_, i32 flags_, f32 slide_to_coord_heading_, f32 max_slope_navigable_, f32 clamp_max_search_distance_, f32 target_heading_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x17F58B88D085DBAC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(move_blend_ratio_);
    ctx->Push(time_);
    ctx->Push(target_radius_);
    ctx->Push(flags_);
    ctx->Push(slide_to_coord_heading_);
    ctx->Push(max_slope_navigable_);
    ctx->Push(clamp_max_search_distance_);
    ctx->Push(target_heading_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_vehicle_goto_navmesh(u32 ped_, u32 vehicle_, f32 x_, f32 y_, f32 z_, f32 speed_, i32 behavior_flag_, f32 stopping_range_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x195AEEB13CEFE2EE);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(vehicle_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(speed_);
    ctx->Push(behavior_flag_);
    ctx->Push(stopping_range_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_agitated_action_confront_response(u32 ped_, u32 ped2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x19D1B791CB3670FE);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(ped2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_put_ped_directly_into_melee(u32 ped_, u32 melee_target_, f32 blend_in_duration_, f32 time_in_melee_, f32 strafe_phase_sync_, i32 ai_combat_flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1C6CD14A876FFE39);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(melee_target_);
    ctx->Push(blend_in_duration_);
    ctx->Push(time_in_melee_);
    ctx->Push(strafe_phase_sync_);
    ctx->Push(ai_combat_flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_go_to_coord_any_means_extra_params(u32 ped_, f32 x_, f32 y_, f32 z_, f32 move_blend_ratio_, u32 vehicle_, bool use_long_range_vehicle_pathing_, i32 driving_flags_, f32 max_range_to_shoot_targets_, f32 extra_veh_to_target_dist_to_prefer_vehicle_, f32 drive_straight_line_distance_, i32 extra_flags_, f32 warp_timer_m_s_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1DD45F9ECFDB1BC9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(move_blend_ratio_);
    ctx->Push(vehicle_);
    ctx->Push(use_long_range_vehicle_pathing_);
    ctx->Push(driving_flags_);
    ctx->Push(max_range_to_shoot_targets_);
    ctx->Push(extra_veh_to_target_dist_to_prefer_vehicle_);
    ctx->Push(drive_straight_line_distance_);
    ctx->Push(extra_flags_);
    ctx->Push(warp_timer_m_s_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_turn_ped_to_face_coord(u32 ped_, f32 x_, f32 y_, f32 z_, i32 duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1DDA930A0AC38571);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_vehicle_heli_protect(u32 pilot_, u32 vehicle_, u32 entity_to_follow_, f32 target_speed_, i32 driving_flags_, f32 radius_, i32 altitude_, i32 heli_flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1E09C32048FEFD1C);
    ctx->Reset();

    ctx->Push(pilot_);
    ctx->Push(vehicle_);
    ctx->Push(entity_to_follow_);
    ctx->Push(target_speed_);
    ctx->Push(driving_flags_);
    ctx->Push(radius_);
    ctx->Push(altitude_);
    ctx->Push(heli_flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_extend_route(f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1E7889778264843A);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_desired_move_blend_ratio(u32 ped_, f32 new_move_blend_ratio_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1E982AC8716912C5);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(new_move_blend_ratio_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_phone_gesture_anim_total_time(f32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1EE0F68A7C25DEC6);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success remove_specific_cover_blocking_areas(f32 start_x_, f32 start_y_, f32 start_z_, f32 end_x_, f32 end_y_, f32 end_z_, bool block_objects_, bool block_vehicles_, bool block_map_, bool block_player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1F351CF1C6475734);
    ctx->Reset();

    ctx->Push(start_x_);
    ctx->Push(start_y_);
    ctx->Push(start_z_);
    ctx->Push(end_x_);
    ctx->Push(end_y_);
    ctx->Push(end_z_);
    ctx->Push(block_objects_);
    ctx->Push(block_vehicles_);
    ctx->Push(block_map_);
    ctx->Push(block_player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_sweep_aim_entity(u32 ped_, const CStringPtr& anim_dict_, const CStringPtr& low_anim_name_, const CStringPtr& med_anim_name_, const CStringPtr& hi_anim_name_, i32 runtime_, u32 target_entity_, f32 turn_rate_, f32 blend_in_duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2047C02158D6405A);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(anim_dict_.ptr);
    ctx->Push(low_anim_name_.ptr);
    ctx->Push(med_anim_name_.ptr);
    ctx->Push(hi_anim_name_.ptr);
    ctx->Push(runtime_);
    ctx->Push(target_entity_);
    ctx->Push(turn_rate_);
    ctx->Push(blend_in_duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_anim_weight(u32 entity_, f32 weight_, i32 priority_, i32 index_, bool secondary_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x207F1A47C0342F48);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(weight_);
    ctx->Push(priority_);
    ctx->Push(index_);
    ctx->Push(secondary_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success waypoint_playback_start_aiming_at_ped(u32 ped_, u32 target_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x20E330937C399D29);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(target_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_smart_flee_ped(u32 ped_, u32 flee_target_, f32 safe_distance_, i32 flee_time_, bool prefer_pavements_, bool update_to_nearest_hated_ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x22B0D0E37CCB840D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(flee_target_);
    ctx->Push(safe_distance_);
    ctx->Push(flee_time_);
    ctx->Push(prefer_pavements_);
    ctx->Push(update_to_nearest_hated_ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_patrol_route_link(i32 node_id1_, i32 node_id2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x23083260DEC3A551);
    ctx->Reset();

    ctx->Push(node_id1_);
    ctx->Push(node_id2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_plane_mission(u32 pilot_, u32 aircraft_, u32 target_vehicle_, u32 target_ped_, f32 destination_x_, f32 destination_y_, f32 destination_z_, i32 mission_flag_, f32 angular_drag_, f32 target_reached_, f32 target_heading_, f32 max_z_, f32 min_z_, bool precise_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x23703CD154E83B88);
    ctx->Reset();

    ctx->Push(pilot_);
    ctx->Push(aircraft_);
    ctx->Push(target_vehicle_);
    ctx->Push(target_ped_);
    ctx->Push(destination_x_);
    ctx->Push(destination_y_);
    ctx->Push(destination_z_);
    ctx->Push(mission_flag_);
    ctx->Push(angular_drag_);
    ctx->Push(target_reached_);
    ctx->Push(target_heading_);
    ctx->Push(max_z_);
    ctx->Push(min_z_);
    ctx->Push(precise_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success waypoint_playback_resume(i32 p0_, bool p1_, i32 p2_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x244F70C84C547D2D);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_move_blend_ratio_sprinting(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x24A2AD74FA9814E2);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_waypoint_progress(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2720AAA75001E094);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success task_use_nearest_scenario_to_coord(u32 ped_, f32 x_, f32 y_, f32 z_, f32 distance_, i32 duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x277F471BA9DB000B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(distance_);
    ctx->Push(duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_scripted_cover_area(f32 x_, f32 y_, f32 z_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x28B7B9BFDAF274AA);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success ped_has_use_scenario_task(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x295E3CCEC879CCD7);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success task_move_network_advanced_by_name_with_init_params(i32* initial_parameters_, u32 ped_, const CStringPtr& network_, f32 x_, f32 y_, f32 z_, f32 rot_x_, f32 rot_y_, f32 rot_z_, i32 rot_order_, f32 blend_duration_, bool allow_override_clone_update_, const CStringPtr& dictionary_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x29682E2CCF21E9B5);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(network_.ptr);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);
    ctx->Push(rot_order_);
    ctx->Push(blend_duration_);
    ctx->Push(allow_override_clone_update_);
    ctx->Push(dictionary_.ptr);
    ctx->Push(flags_);
    ctx->Push(initial_parameters_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_getting_up(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2A74E1D5F2F00EEC);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success task_combat_hated_targets_around_ped_timed(u32 ped_, f32 radius_, i32 time_, i32 combat_flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2BBA30B854534A0C);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(radius_);
    ctx->Push(time_);
    ctx->Push(combat_flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_plane_chase(u32 pilot_, u32 entity_to_follow_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2D2386F273FF7A25);
    ctx->Reset();

    ctx->Push(pilot_);
    ctx->Push(entity_to_follow_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_move_network_by_name(u32 ped_, const CStringPtr& task_, f32 multiplier_, bool allow_override_clone_update_, const CStringPtr& anim_dict_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2D537BA194896636);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(task_.ptr);
    ctx->Push(multiplier_);
    ctx->Push(allow_override_clone_update_);
    ctx->Push(anim_dict_.ptr);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_drive_by(u32 driver_ped_, u32 target_ped_, u32 target_vehicle_, f32 target_x_, f32 target_y_, f32 target_z_, f32 distance_to_shoot_, i32 ped_accuracy_, bool push_underneath_driving_task_if_driving_, u32 firing_pattern_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2F8AF0E82773A171);
    ctx->Reset();

    ctx->Push(driver_ped_);
    ctx->Push(target_ped_);
    ctx->Push(target_vehicle_);
    ctx->Push(target_x_);
    ctx->Push(target_y_);
    ctx->Push(target_z_);
    ctx->Push(distance_to_shoot_);
    ctx->Push(ped_accuracy_);
    ctx->Push(push_underneath_driving_task_if_driving_);
    ctx->Push(firing_pattern_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success waypoint_recording_get_coord(bool* native_return, Vector3Wrapper& coord_, const CStringPtr& name_, i32 point_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2FB897405C90B361);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(point_);
    alt::INative::Vector3 alt_coord_ { coord_.x, 0, coord_.y, 0, coord_.z };
ctx->Push(&alt_coord_);


    Success result = native->Invoke(ctx);
    if (result) {
        coord_.x = alt_coord_.x;
coord_.y = alt_coord_.y;
coord_.z = alt_coord_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success task_follow_to_offset_of_entity(u32 ped_, u32 entity_, f32 offset_x_, f32 offset_y_, f32 offset_z_, f32 movement_speed_, i32 timeout_, f32 stopping_range_, bool persist_following_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x304AE42E357B8C7E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(entity_);
    ctx->Push(offset_x_);
    ctx->Push(offset_y_);
    ctx->Push(offset_z_);
    ctx->Push(movement_speed_);
    ctx->Push(timeout_);
    ctx->Push(stopping_range_);
    ctx->Push(persist_following_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_task_move_network_ready_for_transition(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x30ED88D5E0C56A37);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success task_vehicle_follow_waypoint_recording(u32 ped_, u32 vehicle_, const CStringPtr& w_p_recording_, i32 p3_, i32 p4_, i32 p5_, i32 p6_, f32 p7_, bool p8_, f32 p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3123FAA6DB1CF7ED);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(vehicle_);
    ctx->Push(w_p_recording_.ptr);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_goto_entity_offset_xy(u32 ped_, u32 entity_, i32 duration_, f32 target_radius_, f32 offset_x_, f32 offset_y_, f32 move_blend_ratio_, i32 goto_entity_offset_flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x338E7EF52B6095A9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(entity_);
    ctx->Push(duration_);
    ctx->Push(target_radius_);
    ctx->Push(offset_x_);
    ctx->Push(offset_y_);
    ctx->Push(move_blend_ratio_);
    ctx->Push(goto_entity_offset_flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_move_blend_ratio_still(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x349CE7B56DAFD95C);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success assisted_movement_remove_route(const CStringPtr& route_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3548536485DD792B);
    ctx->Reset();

    ctx->Push(route_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_scenario_group_enabled(bool* native_return, const CStringPtr& scenario_group_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x367A09DED4E05B99);
    ctx->Reset();

    ctx->Push(scenario_group_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_task_move_network_signal_local_float(u32 ped_, const CStringPtr& signal_name_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x373EF409B82697A3);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(signal_name_.ptr);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_sequence_task(i32* task_sequence_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3841422E9C488D8C);
    ctx->Reset();

    ctx->Push(task_sequence_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_path_prefer_to_avoid_water(u32 ped_, bool avoid_water_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x38FE1EC73743793C);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(avoid_water_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_seek_cover_to_coords(u32 ped_, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, i32 timeout_, bool short_route_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x39246A6958EF072C);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(timeout_);
    ctx->Push(short_route_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success close_sequence_task(i32 task_sequence_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x39E72BC99E6360CB);
    ctx->Reset();

    ctx->Push(task_sequence_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_scenario_type_enabled(bool* native_return, const CStringPtr& scenario_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3A815DB3EA088722);
    ctx->Reset();

    ctx->Push(scenario_type_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_clip_set_for_scripted_gun_task(CStringPtr& native_return, i32 gun_task_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3A8CADC7D37AACC5);
    ctx->Reset();

    ctx->Push(gun_task_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success task_vehicle_chase(u32 driver_, u32 target_ent_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3C08A8E30363B353);
    ctx->Reset();

    ctx->Push(driver_);
    ctx->Push(target_ent_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_move_network_by_name_with_init_params(i32* initial_parameters_, u32 ped_, const CStringPtr& network_, f32 blend_duration_, bool allow_override_clone_update_, const CStringPtr& anim_dict_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3D45B0B355C5E0C9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(network_.ptr);
    ctx->Push(blend_duration_);
    ctx->Push(allow_override_clone_update_);
    ctx->Push(anim_dict_.ptr);
    ctx->Push(flags_);
    ctx->Push(initial_parameters_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_running_arrest_task(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3DC52677769B4AE0);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_controlled_vehicle_unable_to_get_to_road(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3E38E28A1D80DDF6);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success task_cower(u32 ped_, i32 duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3EB1FE9E8E908E15);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_stop_phone_gesture_animation(u32 ped_, f32 blend_out_override_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3FA00D4F4641BFAE);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(blend_out_override_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_drive_task_max_cruise_speed(u32 ped_, f32 speed_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x404A5AA9B9F0B746);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(speed_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_waypoint_target_point(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x416B62AC8B9E5BBD);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success task_put_ped_directly_into_cover(u32 ped_, f32 x_, f32 y_, f32 z_, i32 time_, bool allow_peeking_and_firing_, f32 blend_in_duration_, bool force_initial_facing_direction_, bool force_face_left_, i32 identifier_, bool do_entry_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4172393E6BE1FECE);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(time_);
    ctx->Push(allow_peeking_and_firing_);
    ctx->Push(blend_in_duration_);
    ctx->Push(force_initial_facing_direction_);
    ctx->Push(force_face_left_);
    ctx->Push(identifier_);
    ctx->Push(do_entry_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_exclusive_scenario_group() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4202BBCB8684563D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_path_avoid_fire(u32 ped_, bool avoid_fire_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4455517B28441E60);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(avoid_fire_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_vehicle_aim_at_coord(u32 ped_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x447C1E9EF844BC0F);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_task_move_network_signal_float(f32* native_return, u32 ped_, const CStringPtr& signal_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x44AB0B3AFECCE242);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(signal_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success task_shocking_event_react(u32 ped_, i32 event_handle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x452419CBD838065B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(event_handle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_cover_blocking_area(f32 start_x_, f32 start_y_, f32 start_z_, f32 end_x_, f32 end_y_, f32 end_z_, bool block_objects_, bool block_vehicles_, bool block_map_, bool block_player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x45C597097DD7CB81);
    ctx->Reset();

    ctx->Push(start_x_);
    ctx->Push(start_y_);
    ctx->Push(start_z_);
    ctx->Push(end_x_);
    ctx->Push(end_y_);
    ctx->Push(end_z_);
    ctx->Push(block_objects_);
    ctx->Push(block_vehicles_);
    ctx->Push(block_map_);
    ctx->Push(block_player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_shoot_at_coord(u32 ped_, f32 x_, f32 y_, f32 z_, i32 duration_, u32 firing_pattern_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x46A6CC01E0826106);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(duration_);
    ctx->Push(firing_pattern_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_phone_gesture_anim_current_time(f32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x47619ABE8B268C60);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success waypoint_playback_stop_aiming_or_shooting(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x47EFA040EBB8E2EA);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_vehicle_drive_wander(u32 ped_, u32 vehicle_, f32 speed_, i32 driving_style_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x480142959D337D00);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(vehicle_);
    ctx->Push(speed_);
    ctx->Push(driving_style_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_guard_current_position(u32 ped_, f32 max_patrol_proximity_, f32 defensive_area_radius_, bool set_defensive_area_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4A58A47A72E3FCB4);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(max_patrol_proximity_);
    ctx->Push(defensive_area_radius_);
    ctx->Push(set_defensive_area_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_combat_hated_targets_in_area(u32 ped_, f32 x_, f32 y_, f32 z_, f32 radius_, i32 combat_flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4CF5F55DAC3280A0);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(combat_flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_force_motion_state(u32 ped_, u32 state_, bool force_restart_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4F056E1AFFEF17AB);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(state_);
    ctx->Push(force_restart_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_leave_any_vehicle(u32 ped_, i32 delay_time_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x504D54DF3F6F2247);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(delay_time_);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_vehicle_shoot_at_coord(u32 ped_, f32 x_, f32 y_, f32 z_, f32 fire_tolerance_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5190796ED39C9B6D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(fire_tolerance_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_patrol_task_info(bool* native_return, i32* time_left_at_node_, i32* node_id_, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x52F734CEBE20DFBA);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(time_left_at_node_);
    ctx->Push(node_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success waypoint_recording_get_num_points(bool* native_return, i32* points_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5343532C01A07234);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(points_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_active_vehicle_mission_type(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x534AEBA6E5ED4CAB);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_exclusive_scenario_group(const CStringPtr& scenario_group_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x535E97E1F7FC0C6A);
    ctx->Reset();

    ctx->Push(scenario_group_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_vehicle_crash_task(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x53DDC75BC3AC0A90);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_sprinting(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x57E457CD2C0FC168);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_sequence_to_repeat(i32 task_sequence_id_, bool repeat_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x58C70CF3A41E4AE7);
    ctx->Reset();

    ctx->Push(task_sequence_id_);
    ctx->Push(repeat_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_use_nearest_scenario_to_coord_warp(u32 ped_, f32 x_, f32 y_, f32 z_, f32 radius_, i32 time_to_leave_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x58E2E0F23F6B76C3);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(time_to_leave_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_scripted_cover_point_coords(Vector3Wrapper& native_return, u32 coverpoint_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x594A1028FC2A3E85);
    ctx->Reset();

    ctx->Push(coverpoint_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success task_follow_point_route(u32 ped_, f32 speed_, i32 mode_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x595583281858626E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(speed_);
    ctx->Push(mode_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success use_waypoint_recording_as_assisted_movement_route(const CStringPtr& name_, bool p1_, f32 p2_, f32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5A353B8E6B1095B5);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_ped_slide_to_coord_hdg_rate(u32 ped_, f32 x_, f32 y_, f32 z_, f32 heading_, f32 speed_, f32 heading_change_rate_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5A4A6A6D3DC64F52);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(heading_);
    ctx->Push(speed_);
    ctx->Push(heading_change_rate_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_scenario_exist_in_area(bool* native_return, f32 x_, f32 y_, f32 z_, f32 radius_, bool must_be_free_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5A59271FFADD33C1);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(must_be_free_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success task_perform_sequence(u32 ped_, i32 task_sequence_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5ABA3986D90D8A3B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(task_sequence_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_turn_ped_to_face_entity(u32 ped_, u32 entity_, i32 duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5AD23D40115353AC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(entity_);
    ctx->Push(duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_go_to_coord_any_means(u32 ped_, f32 x_, f32 y_, f32 z_, f32 move_blend_ratio_, u32 vehicle_, bool use_long_range_vehicle_pathing_, i32 driving_flags_, f32 max_range_to_shoot_targets_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5BC448CB78FA3E88);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(move_blend_ratio_);
    ctx->Push(vehicle_);
    ctx->Push(use_long_range_vehicle_pathing_);
    ctx->Push(driving_flags_);
    ctx->Push(max_range_to_shoot_targets_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_drive_task_cruise_speed(u32 driver_, f32 cruise_speed_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5C9B84BD7D31D908);
    ctx->Reset();

    ctx->Push(driver_);
    ctx->Push(cruise_speed_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success vehicle_waypoint_playback_use_default_speed(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5CEB25A7D2848963);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_vehicle_subtask_attack_coord(u32 ped_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5CF0D8F9BBA0DD75);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_use_mobile_phone_timed(u32 ped_, i32 duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5EE02954A14C69DB);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_sky_dive(u32 ped_, bool instant_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x601736CFE536B0A0);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(instant_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success assisted_movement_is_route_loaded(bool* native_return, const CStringPtr& route_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x60F9A4393A21F741);
    ctx->Reset();

    ctx->Push(route_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_default_primary_task(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6100B3CEFD43452E);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_go_straight_to_coord_relative_to_entity(u32 ped_, u32 entity_, f32 x_, f32 y_, f32 z_, f32 move_blend_ratio_, i32 time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x61E360B7E040D12E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(entity_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(move_blend_ratio_);
    ctx->Push(time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_playing_base_clip_in_scenario(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x621C6E4729388E41);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success task_reload_weapon(u32 ped_, bool draw_weapon_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x62D2916F56B9CD2D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(draw_weapon_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_navmesh_route_result(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x632E831F382A0FA8);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_task_vehicle_chase_ideal_pursuit_distance(u32 ped_, f32 distance_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x639B642FACBE4EDD);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(distance_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_vehicle_mission(u32 driver_, u32 vehicle_, u32 vehicle_target_, i32 mission_type_, f32 cruise_speed_, i32 driving_style_, f32 target_reached_, f32 straight_line_distance_, bool drive_against_traffic_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x659427E0EF36BCDE);
    ctx->Reset();

    ctx->Push(driver_);
    ctx->Push(vehicle_);
    ctx->Push(vehicle_target_);
    ctx->Push(mission_type_);
    ctx->Push(cruise_speed_);
    ctx->Push(driving_style_);
    ctx->Push(target_reached_);
    ctx->Push(straight_line_distance_);
    ctx->Push(drive_against_traffic_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success waypoint_playback_use_default_speed(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6599D834B12D0800);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_aim_gun_at_coord(u32 ped_, f32 x_, f32 y_, f32 z_, i32 time_, bool instant_blend_to_aim_, bool play_anim_intro_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6671F3EEC681BDA1);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(time_);
    ctx->Push(instant_blend_to_aim_);
    ctx->Push(play_anim_intro_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success uncuff_ped(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x67406F2C8F87FC4F);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_wander_specific(u32 ped_, const CStringPtr& conditional_anim_group_str_, const CStringPtr& conditional_anim_str_, f32 heading_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6919A2F136426098);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(conditional_anim_group_str_.ptr);
    ctx->Push(conditional_anim_str_.ptr);
    ctx->Push(heading_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_look_at_entity(u32 ped_, u32 look_at_, i32 duration_, i32 flags_, i32 priority_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x69F4BE8C8CC4796C);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(look_at_);
    ctx->Push(duration_);
    ctx->Push(flags_);
    ctx->Push(priority_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_vehicle_play_anim(u32 vehicle_, const CStringPtr& animation_set_, const CStringPtr& animation_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x69F5C3BD0F3EBD89);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(animation_set_.ptr);
    ctx->Push(animation_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_go_to_entity(u32 entity_, u32 target_, i32 duration_, f32 distance_, f32 move_blend_ratio_, f32 slow_down_distance_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6A071245EB0D1882);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(target_);
    ctx->Push(duration_);
    ctx->Push(distance_);
    ctx->Push(move_blend_ratio_);
    ctx->Push(slow_down_distance_);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_global_min_bird_flight_height(f32 height_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6C6B148586F934F7);
    ctx->Reset();

    ctx->Push(height_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_warp_ped_directly_into_cover(u32 ped_, i32 time_, bool allow_peeking_and_firing_, bool force_initial_facing_direction_, bool force_face_left_, i32 identifier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6E01E9E8D89F8276);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(time_);
    ctx->Push(allow_peeking_and_firing_);
    ctx->Push(force_initial_facing_direction_);
    ctx->Push(force_face_left_);
    ctx->Push(identifier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_look_at_coord(u32 entity_, f32 x_, f32 y_, f32 z_, i32 duration_, i32 flags_, i32 priority_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6FA46612594F7973);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(duration_);
    ctx->Push(flags_);
    ctx->Push(priority_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_anim_looped(u32 entity_, bool looped_, i32 priority_, bool secondary_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x70033C3CC29A1FF4);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(looped_);
    ctx->Push(priority_);
    ctx->Push(secondary_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success waypoint_playback_get_is_paused(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x701375A7D43F01CB);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_task_move_network_state(CStringPtr& native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x717E4D1F2048376D);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success task_throw_projectile(u32 ped_, f32 x_, f32 y_, f32 z_, i32 ignore_collision_entity_index_, bool create_invincible_projectile_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7285951DBF6B5A51);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(ignore_collision_entity_index_);
    ctx->Push(create_invincible_projectile_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_react_and_flee_ped(u32 ped_, u32 flee_target_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x72C896464915D1B1);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(flee_target_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_anim_on_running_scenario(u32 ped_, const CStringPtr& anim_dict_, const CStringPtr& anim_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x748040460F8DF5DC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(anim_dict_.ptr);
    ctx->Push(anim_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_cuffed(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x74E559B3BC910685);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success task_seek_cover_from_pos(u32 ped_, f32 x_, f32 y_, f32 z_, i32 duration_, bool allow_peeking_and_firing_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x75AC2B60386D89F2);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(duration_);
    ctx->Push(allow_peeking_and_firing_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success delete_patrol_route(const CStringPtr& patrol_route_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7767DD9D65E91319);
    ctx->Reset();

    ctx->Push(patrol_route_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success play_entity_scripted_anim(i32* priority_low_data_, i32* priority_mid_data_, i32* priority_high_data_, u32 entity_, f32 blend_in_delta_, f32 blend_out_delta_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x77A1EEC547E7FCF1);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(blend_in_delta_);
    ctx->Push(blend_out_delta_);
    ctx->Push(priority_low_data_);
    ctx->Push(priority_mid_data_);
    ctx->Push(priority_high_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_path_can_use_ladders(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x77A5B103C87F476E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_script_task_status(i32* native_return, u32 ped_, u32 task_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x77F1BEB8863288D5);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(task_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_scenario_occupied(bool* native_return, f32 x_, f32 y_, f32 z_, f32 max_range_, bool only_users_actually_at_scenario_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x788756D73AC2E07C);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(max_range_);
    ctx->Push(only_users_actually_at_scenario_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success task_exit_cover(u32 ped_, i32 exit_type_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x79B258E397854D29);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(exit_type_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_aim_gun_scripted(u32 ped_, u32 script_task_, bool disable_blocking_clip_, bool instant_blend_to_aim_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7A192BE16D373D00);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(script_task_);
    ctx->Push(disable_blocking_clip_);
    ctx->Push(instant_blend_to_aim_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_shuffle_to_next_vehicle_seat(u32 ped_, u32 vehicle_, bool use_alternate_shuffle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7AA80209BDA643EB);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(vehicle_);
    ctx->Push(use_alternate_shuffle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_sweep_aim_position(u32 ped_, const CStringPtr& anim_dict_, const CStringPtr& low_anim_name_, const CStringPtr& med_anim_name_, const CStringPtr& hi_anim_name_, i32 runtime_, f32 x_, f32 y_, f32 z_, f32 turn_rate_, f32 blend_in_duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7AFE8FDC10BC07D2);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(anim_dict_.ptr);
    ctx->Push(low_anim_name_.ptr);
    ctx->Push(med_anim_name_.ptr);
    ctx->Push(hi_anim_name_.ptr);
    ctx->Push(runtime_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(turn_rate_);
    ctx->Push(blend_in_duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_combat_hated_targets_around_ped(u32 ped_, f32 radius_, i32 combat_flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7BF835BB9E2698C8);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(radius_);
    ctx->Push(combat_flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success waypoint_playback_override_speed(i32 p0_, f32 p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7D7D2B47FA788E85);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_everyone_leave_vehicle(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7F93691AB4B92272);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success assisted_movement_request_route(const CStringPtr& route_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x817268968605947A);
    ctx->Reset();

    ctx->Push(route_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_play_anim_advanced(u32 ped_, const CStringPtr& anim_dict_, const CStringPtr& anim_name_, f32 pos_x_, f32 pos_y_, f32 pos_z_, f32 rot_x_, f32 rot_y_, f32 rot_z_, f32 anim_enter_speed_, f32 anim_exit_speed_, i32 duration_, i32 flag_, f32 anim_time_, i32 rot_order_, i32 ik_flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x83CDB10EA29B370B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(anim_dict_.ptr);
    ctx->Push(anim_name_.ptr);
    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);
    ctx->Push(anim_enter_speed_);
    ctx->Push(anim_exit_speed_);
    ctx->Push(duration_);
    ctx->Push(flag_);
    ctx->Push(anim_time_);
    ctx->Push(rot_order_);
    ctx->Push(ik_flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_flush_route() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x841142A1376E9006);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_task_move_network_anim_set(u32 ped_, u32 clip_set_, u32 unk_variable_clip_set_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8423541E8B3A1589);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(clip_set_);
    ctx->Push(unk_variable_clip_set_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_seek_cover_from_ped(u32 ped_, u32 target_, i32 duration_, bool allow_peeking_and_firing_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x84D32B3BEC531324);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(target_);
    ctx->Push(duration_);
    ctx->Push(allow_peeking_and_firing_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_desired_move_blend_ratio(f32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8517D4A6CA8513ED);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success add_vehicle_subtask_attack_ped(u32 ped_, u32 target_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x85F462BADC7DA47F);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(target_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_aim_gun_scripted_with_target(u32 ped_, u32 target_, f32 x_, f32 y_, f32 z_, i32 gun_task_type_, bool disable_blocking_clip_, bool force_aim_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8605AF0DE8B3A5AC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(target_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(gun_task_type_);
    ctx->Push(disable_blocking_clip_);
    ctx->Push(force_aim_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_task_move_network_signal_float_lerp_rate(u32 ped_, const CStringPtr& signal_name_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8634CEF2522D987B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(signal_name_.ptr);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_driveby_task_underneath_driving_task(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8785E6E40C7A8818);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_path_climb_cost_modifier(u32 ped_, f32 modifier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x88E32DB8C1A4AA4B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(modifier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_perform_sequence_from_progress(u32 ped_, i32 task_index_, i32 progress1_, i32 progress2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x89221B16730234F0);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(task_index_);
    ctx->Push(progress1_);
    ctx->Push(progress2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success waypoint_playback_start_aiming_at_coord(u32 ped_, f32 x_, f32 y_, f32 z_, bool p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8968400D900ED8B3);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_climb(u32 ped_, bool use_player_launch_force_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x89D9FCC2435112F1);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(use_player_launch_force_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success vehicle_waypoint_playback_pause(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8A4E6AC373666BC5);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_perform_sequence_locally(u32 ped_, i32 task_sequence_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8C33220C8D78CA0D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(task_sequence_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_chat_to_ped(u32 ped_, u32 target_, i32 flags_, f32 go_to_location_x_, f32 go_to_location_y_, f32 go_to_location_z_, f32 heading_degs_, f32 idle_time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8C338E0263E4FD19);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(target_);
    ctx->Push(flags_);
    ctx->Push(go_to_location_x_);
    ctx->Push(go_to_location_y_);
    ctx->Push(go_to_location_z_);
    ctx->Push(heading_degs_);
    ctx->Push(idle_time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_high_fall_task(u32 ped_, i32 min_time_, i32 max_time_, i32 entry_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8C825BDC7741D37C);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(min_time_);
    ctx->Push(max_time_);
    ctx->Push(entry_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_path_can_use_climbovers(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8E06A6FE76C9EFF4);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_patrol_route_node(i32 node_id_, const CStringPtr& node_type_, f32 pos_x_, f32 pos_y_, f32 pos_z_, f32 heading_x_, f32 heading_y_, f32 heading_z_, i32 duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8EDF950167586B7C);
    ctx->Reset();

    ctx->Push(node_id_);
    ctx->Push(node_type_.ptr);
    ctx->Push(pos_x_);
    ctx->Push(pos_y_);
    ctx->Push(pos_z_);
    ctx->Push(heading_x_);
    ctx->Push(heading_y_);
    ctx->Push(heading_z_);
    ctx->Push(duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_play_phone_gesture_animation(u32 ped_, const CStringPtr& anim_dict_, const CStringPtr& animation_, const CStringPtr& bone_mask_type_, f32 blend_in_duration_, f32 blend_out_duration_, bool is_looping_, bool hold_last_frame_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8FBB6758B3B3E9EC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(anim_dict_.ptr);
    ctx->Push(animation_.ptr);
    ctx->Push(bone_mask_type_.ptr);
    ctx->Push(blend_in_duration_);
    ctx->Push(blend_out_duration_);
    ctx->Push(is_looping_);
    ctx->Push(hold_last_frame_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_can_play_ambient_idles(u32 ped_, bool block_idle_clips_, bool remove_idle_clip_if_playing_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8FD89A6240813FD0);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(block_idle_clips_);
    ctx->Push(remove_idle_clip_if_playing_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_being_arrested(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x90A09F3A45FED688);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success task_set_blocking_of_non_temporary_events(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x90D2156198831D69);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_stand_still(u32 ped_, i32 time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x919BE13EED931959);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_task_move_network_active(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x921CE12C489C4C41);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success task_plane_taxi(u32 pilot_, u32 aircraft_, f32 x_, f32 y_, f32 z_, f32 cruise_speed_, f32 target_reached_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x92C360B5F15D2302);
    ctx->Reset();

    ctx->Push(pilot_);
    ctx->Push(aircraft_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(cruise_speed_);
    ctx->Push(target_reached_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_set_sphere_defensive_area(u32 ped_, f32 x_, f32 y_, f32 z_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x933C06518B52A9A4);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_achieve_heading(u32 ped_, f32 heading_, i32 timeout_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x93B93A37987F1F3D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(heading_);
    ctx->Push(timeout_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_combat_ped_timed(u32 ped_, u32 target_, i32 time_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x944F30DCB7096BDE);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(target_);
    ctx->Push(time_);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_vehicle_mission_ped_target(u32 ped_, u32 vehicle_, u32 ped_target_, i32 mission_type_, f32 max_speed_, i32 driving_style_, f32 min_distance_, f32 straight_line_distance_, bool drive_against_traffic_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9454528DF15D657A);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(vehicle_);
    ctx->Push(ped_target_);
    ctx->Push(mission_type_);
    ctx->Push(max_speed_);
    ctx->Push(driving_style_);
    ctx->Push(min_distance_);
    ctx->Push(straight_line_distance_);
    ctx->Push(drive_against_traffic_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_smart_flee_coord(u32 ped_, f32 x_, f32 y_, f32 z_, f32 distance_, i32 time_, bool prefer_pavements_, bool quit_if_out_of_range_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x94587F17E9C365D5);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(distance_);
    ctx->Push(time_);
    ctx->Push(prefer_pavements_);
    ctx->Push(quit_if_out_of_range_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_clear_defensive_area(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x95A6C46A31D1917D);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_open_vehicle_door(u32 ped_, u32 vehicle_, i32 time_out_, i32 seat_, f32 speed_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x965791A9A488A062);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(vehicle_);
    ctx->Push(time_out_);
    ctx->Push(seat_);
    ctx->Push(speed_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_plant_bomb(u32 ped_, f32 x_, f32 y_, f32 z_, f32 heading_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x965FEC691D55E9BF);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(heading_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success update_task_aim_gun_scripted_target(u32 ped_, u32 target_, f32 x_, f32 y_, f32 z_, bool disable_blocking_clip_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9724FB59A3E72AD0);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(target_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(disable_blocking_clip_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_go_to_entity_while_aiming_at_entity(u32 ped_, u32 entity_to_walk_to_, u32 entity_to_aim_at_, f32 speed_, bool shootat_entity_, f32 target_radius_, f32 slow_distance_, bool use_nav_mesh_, bool instant_blend_to_aim_, u32 firing_pattern_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x97465886D35210E9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(entity_to_walk_to_);
    ctx->Push(entity_to_aim_at_);
    ctx->Push(speed_);
    ctx->Push(shootat_entity_);
    ctx->Push(target_radius_);
    ctx->Push(slow_distance_);
    ctx->Push(use_nav_mesh_);
    ctx->Push(instant_blend_to_aim_);
    ctx->Push(firing_pattern_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_use_nearest_scenario_chain_to_coord_warp(u32 ped_, f32 x_, f32 y_, f32 z_, f32 radius_, i32 time_to_leave_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x97A28E63F0BA5631);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(time_to_leave_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_anim_task(u32 entity_, const CStringPtr& anim_dictionary_, const CStringPtr& animation_name_, f32 blend_delta_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x97FF36A1D40EA00A);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(anim_dictionary_.ptr);
    ctx->Push(animation_name_.ptr);
    ctx->Push(blend_delta_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_waypoint_progress(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9824CFF8FC66E159);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success task_warp_ped_into_vehicle(u32 ped_, u32 vehicle_, i32 seat_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9A7D091411C5F684);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(vehicle_);
    ctx->Push(seat_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_aim_gun_at_entity(u32 ped_, u32 entity_, i32 duration_, bool instant_blend_to_aim_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9B53BB6E8943AF53);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(entity_);
    ctx->Push(duration_);
    ctx->Push(instant_blend_to_aim_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_get_off_boat(u32 ped_, u32 boat_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9C00E77AF14B2DFF);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(boat_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_task_rappel_down_wall_state(i32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D252648778160DF);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success request_waypoint_recording(const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9EEFB62EB27B5792);
    ctx->Reset();

    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_use_nearest_scenario_chain_to_coord(u32 ped_, f32 x_, f32 y_, f32 z_, f32 max_range_, i32 time_to_leave_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9FDA1B3D7E7028B3);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(max_range_);
    ctx->Push(time_to_leave_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_swap_weapon(u32 ped_, bool draw_weapon_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA21C51255B205245);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(draw_weapon_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_mounted_weapon_task_underneath_driving_task(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA320EF046186FA3B);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success open_patrol_route(const CStringPtr& patrol_route_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA36BFB5EE89F3D82);
    ctx->Reset();

    ctx->Push(patrol_route_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_go_to_coord_and_aim_at_hated_entities_near_coord(u32 ped_handle_, f32 go_to_location_x_, f32 go_to_location_y_, f32 go_to_location_z_, f32 focus_location_x_, f32 focus_location_y_, f32 focus_location_z_, f32 speed_, bool shoot_at_enemies_, f32 distance_to_stop_at_, f32 no_roads_distance_, bool use_nav_mesh_, i32 nav_flags_, i32 task_flags_, u32 firing_pattern_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA55547801EB331FC);
    ctx->Reset();

    ctx->Push(ped_handle_);
    ctx->Push(go_to_location_x_);
    ctx->Push(go_to_location_y_);
    ctx->Push(go_to_location_z_);
    ctx->Push(focus_location_x_);
    ctx->Push(focus_location_y_);
    ctx->Push(focus_location_z_);
    ctx->Push(speed_);
    ctx->Push(shoot_at_enemies_);
    ctx->Push(distance_to_stop_at_);
    ctx->Push(no_roads_distance_);
    ctx->Push(use_nav_mesh_);
    ctx->Push(nav_flags_);
    ctx->Push(task_flags_);
    ctx->Push(firing_pattern_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_waypoint_distance_along_route(f32* native_return, const CStringPtr& name_, i32 point_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA5B769058763E497);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(point_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_task_move_network_signal_bool(bool* native_return, u32 ped_, const CStringPtr& signal_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA7FFBA498E4AAF67);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(signal_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success does_scripted_cover_point_exist_at_coords(bool* native_return, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA98B8E3C088E5A31);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success update_task_hands_up_duration(u32 ped_, i32 duration_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA98FCAFD7893C834);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(duration_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_goto_entity_aiming(u32 ped_, u32 target_, f32 distance_to_stop_at_, f32 start_aiming_dist_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA9DA48FAB8A76C12);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(target_);
    ctx->Push(distance_to_stop_at_);
    ctx->Push(start_aiming_dist_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_active_in_scenario(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA135F9482C82CC3);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success task_stealth_kill(u32 killer_, u32 target_, u32 stealth_kill_action_result_hash_, f32 desired_move_blend_ratio_, i32 stealth_flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA5DC05579D60BD9);
    ctx->Reset();

    ctx->Push(killer_);
    ctx->Push(target_);
    ctx->Push(stealth_kill_action_result_hash_);
    ctx->Push(desired_move_blend_ratio_);
    ctx->Push(stealth_flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_ped_tasks_immediately(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAAA34F8A7CB32098);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_expected_clone_next_task_move_network_state(bool* native_return, u32 ped_, const CStringPtr& state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAB13A5565480B6D9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(state_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ped_still(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAC29253EEF8F0180);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success task_heli_chase(u32 pilot_, u32 entity_to_follow_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAC83B1DB38D0ADA0);
    ctx->Reset();

    ctx->Push(pilot_);
    ctx->Push(entity_to_follow_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_toggle_duck(u32 ped_, i32 toggle_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAC96609B9995EDF8);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_stand_guard(u32 ped_, f32 x_, f32 y_, f32 z_, f32 heading_, const CStringPtr& scenario_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAE032F8BBA959E90);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(heading_);
    ctx->Push(scenario_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_cover_point(u32 coverpoint_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAE287C923D891715);
    ctx->Reset();

    ctx->Push(coverpoint_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_patrol_route() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAF8A443CCC8018DC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success close_patrol_route() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB043ECA801B8CBC1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_is_task_active(bool* native_return, u32 ped_, i32 task_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB0760331C7AA4155);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(task_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_task_move_network_signal_bool(u32 ped_, const CStringPtr& signal_name_, bool value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB0A6CFD2C69C1088);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(signal_name_.ptr);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_go_to_coord_while_aiming_at_entity(u32 ped_, f32 x_, f32 y_, f32 z_, u32 aim_at_i_d_, f32 move_blend_ratio_, bool shoot_, f32 target_radius_, f32 slow_distance_, bool use_nav_mesh_, i32 nav_flags_, bool instant_blend_to_aim_, u32 firing_pattern_, i32 time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB2A16444EAD9AE47);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(aim_at_i_d_);
    ctx->Push(move_blend_ratio_);
    ctx->Push(shoot_);
    ctx->Push(target_radius_);
    ctx->Push(slow_distance_);
    ctx->Push(use_nav_mesh_);
    ctx->Push(nav_flags_);
    ctx->Push(instant_blend_to_aim_);
    ctx->Push(firing_pattern_);
    ctx->Push(time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_parachute_to_target(u32 ped_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB33E291AFA6BD03A);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_heli_escort_heli(u32 pilot_, u32 heli1_, u32 heli2_, f32 offset_x_, f32 offset_y_, f32 offset_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB385523325077210);
    ctx->Reset();

    ctx->Push(pilot_);
    ctx->Push(heli1_);
    ctx->Push(heli2_);
    ctx->Push(offset_x_);
    ctx->Push(offset_y_);
    ctx->Push(offset_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_task_move_network_event(bool* native_return, u32 ped_, const CStringPtr& event_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB4F47213DF45A64C);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(event_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success waypoint_recording_get_closest_waypoint(bool* native_return, i32* point_, const CStringPtr& name_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB629A298081F876F);
    ctx->Reset();

    ctx->Push(name_.ptr);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(point_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success task_climb_ladder(u32 ped_, bool fast_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB6C987F9285A3814);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(fast_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_playing_phone_gesture_anim(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB8EBB1E9D3588C10);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success task_go_to_coord_any_means_extra_params_with_cruise_speed(u32 ped_, f32 x_, f32 y_, f32 z_, f32 move_blend_ratio_, u32 vehicle_, bool use_long_range_vehicle_pathing_, i32 driving_flags_, f32 max_range_to_shoot_targets_, f32 extra_veh_to_target_dist_to_prefer_vehicle_, f32 drive_straight_line_distance_, i32 extra_flags_, f32 cruise_speed_, f32 target_arrive_dist_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB8ECD61F531A7B02);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(move_blend_ratio_);
    ctx->Push(vehicle_);
    ctx->Push(use_long_range_vehicle_pathing_);
    ctx->Push(driving_flags_);
    ctx->Push(max_range_to_shoot_targets_);
    ctx->Push(extra_veh_to_target_dist_to_prefer_vehicle_);
    ctx->Push(drive_straight_line_distance_);
    ctx->Push(extra_flags_);
    ctx->Push(cruise_speed_);
    ctx->Push(target_arrive_dist_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success update_task_sweep_aim_position(u32 ped_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBB106883F5201FC4);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_wander_standard(u32 ped_, f32 heading_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBB9CE077274F6A1B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(heading_);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_use_mobile_phone(u32 ped_, bool use_phone_, i32 desired_phone_mode_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBD2A8EC3AF4DE7DB);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(use_phone_);
    ctx->Push(desired_phone_mode_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_patrol(u32 ped_, const CStringPtr& patrol_route_name_, i32 alert_state_, bool can_chat_to_peds_, bool use_head_look_at_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBDA5DF49D080FE4E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(patrol_route_name_.ptr);
    ctx->Push(alert_state_);
    ctx->Push(can_chat_to_peds_);
    ctx->Push(use_head_look_at_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_plane_land(u32 pilot_, u32 plane_, f32 runway_start_x_, f32 runway_start_y_, f32 runway_start_z_, f32 runway_end_x_, f32 runway_end_y_, f32 runway_end_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBF19721FA34D32C0);
    ctx->Reset();

    ctx->Push(pilot_);
    ctx->Push(plane_);
    ctx->Push(runway_start_x_);
    ctx->Push(runway_start_y_);
    ctx->Push(runway_start_z_);
    ctx->Push(runway_end_x_);
    ctx->Push(runway_end_y_);
    ctx->Push(runway_end_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_enter_vehicle(u32 ped_, u32 vehicle_, i32 timeout_, i32 seat_, f32 speed_, i32 flag_, const CStringPtr& override_entry_clipset_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC20E50AA46D09CA8);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(vehicle_);
    ctx->Push(timeout_);
    ctx->Push(seat_);
    ctx->Push(speed_);
    ctx->Push(flag_);
    ctx->Push(override_entry_clipset_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_submarine_goto_and_stop(u32 ped_, u32 submarine_, f32 x_, f32 y_, f32 z_, bool autopilot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC22B40579A498CA4);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(submarine_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(autopilot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_parachute_task_target(u32 ped_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC313379AF0FCEDA7);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_driveby_task_underneath_driving_task(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC35B5CDB2824CF69);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_vehicle_temp_action(u32 driver_, u32 vehicle_, i32 action_, i32 time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC429DCEEB339E129);
    ctx->Reset();

    ctx->Push(driver_);
    ctx->Push(vehicle_);
    ctx->Push(action_);
    ctx->Push(time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_running(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC5286FFC176F28A2);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_navmesh_route_distance_remaining(i32* native_return, f32* distance_remaining_, bool* is_path_ready_, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC6F5C0BCDC74D62D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(distance_remaining_);
    ctx->Push(is_path_ready_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success task_guard_sphere_defensive_area(u32 ped_, f32 defend_position_x_, f32 defend_position_y_, f32 defend_position_z_, f32 heading_, f32 max_patrol_proximity_, i32 time_, f32 x_, f32 y_, f32 z_, f32 defensive_area_radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC946FE14BE0EB5E2);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(defend_position_x_);
    ctx->Push(defend_position_y_);
    ctx->Push(defend_position_z_);
    ctx->Push(heading_);
    ctx->Push(max_patrol_proximity_);
    ctx->Push(time_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(defensive_area_radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_is_waypoint_recording_loaded(bool* native_return, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCB4E8BE8A0063C5D);
    ctx->Reset();

    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_task_vehicle_chase_behavior_flag(u32 ped_, i32 flag_, bool set_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCC665AAC360D31E7);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(flag_);
    ctx->Push(set_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_mounted_weapon_target(u32 shooting_ped_, u32 target_ped_, u32 target_vehicle_, f32 x_, f32 y_, f32 z_, i32 task_mode_, bool ignore_target_veh_dead_check_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCCD892192C6D2BB9);
    ctx->Reset();

    ctx->Push(shooting_ped_);
    ctx->Push(target_ped_);
    ctx->Push(target_vehicle_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(task_mode_);
    ctx->Push(ignore_target_veh_dead_check_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_writhe(u32 ped_, u32 target_, i32 min_fire_loops_, i32 start_state_, bool force_shoot_on_ground_, i32 shoot_from_ground_timer_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCDDC2B77CE54AC6E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(target_);
    ctx->Push(min_fire_loops_);
    ctx->Push(start_state_);
    ctx->Push(force_shoot_on_ground_);
    ctx->Push(shoot_from_ground_timer_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_task_move_network_state_transition(bool* native_return, u32 ped_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD01015C7316AE176);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success task_ped_slide_to_coord(u32 ped_, f32 x_, f32 y_, f32 z_, f32 heading_, f32 speed_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD04FE6765D990A06);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(heading_);
    ctx->Push(speed_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_guard_assigned_defensive_area(u32 ped_, f32 x_, f32 y_, f32 z_, f32 heading_, f32 max_patrol_proximity_, i32 timer_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD2A207EEBDF9889B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(heading_);
    ctx->Push(max_patrol_proximity_);
    ctx->Push(timer_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_parachute(u32 ped_, bool give_parachute_item_, bool instant_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD2F1C53C97EE81AB);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(give_parachute_item_);
    ctx->Push(instant_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_leave_vehicle(u32 ped_, u32 vehicle_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD3DBCE61A490BE02);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(vehicle_);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_seek_cover_to_cover_point(u32 ped_, u32 coverpoint_, f32 x_, f32 y_, f32 z_, i32 time_, bool allow_peeking_and_firing_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD43D95C7A869447F);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(coverpoint_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(time_);
    ctx->Push(allow_peeking_and_firing_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_move_blend_ratio_running(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD4D8636C0199A939);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success assisted_movement_set_route_properties(const CStringPtr& route_, i32 props_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD5002D78B7162E1B);
    ctx->Reset();

    ctx->Push(route_.ptr);
    ctx->Push(props_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_move_network_advanced_by_name(u32 ped_, const CStringPtr& network_, f32 x_, f32 y_, f32 z_, f32 rot_x_, f32 rot_y_, f32 rot_z_, i32 rot_order_, f32 blend_duration_, bool allow_override_clone_update_, const CStringPtr& anim_dict_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD5B35BEA41919ACB);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(network_.ptr);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);
    ctx->Push(rot_order_);
    ctx->Push(blend_duration_);
    ctx->Push(allow_override_clone_update_);
    ctx->Push(anim_dict_.ptr);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_task_move_network_signal_float(u32 ped_, const CStringPtr& signal_name_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD5BB4025AE449A4E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(signal_name_.ptr);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_cover_point(u32* native_return, f32 x_, f32 y_, f32 z_, f32 direction_, i32 usage_, i32 height_, i32 arc_, bool is_priority_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD5C12A75C7B9497F);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(direction_);
    ctx->Push(usage_);
    ctx->Push(height_);
    ctx->Push(arc_);
    ctx->Push(is_priority_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success task_go_straight_to_coord(u32 ped_, f32 x_, f32 y_, f32 z_, f32 speed_, i32 timeout_, f32 target_heading_, f32 distance_to_slide_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD76B57B44F1E6F8B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(speed_);
    ctx->Push(timeout_);
    ctx->Push(target_heading_);
    ctx->Push(distance_to_slide_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_drive_task_driving_style(u32 ped_, i32 driving_style_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDACE1BE37D88AF67);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(driving_style_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_heli_mission(u32 pilot_, u32 aircraft_, u32 target_vehicle_, u32 target_ped_, f32 destination_x_, f32 destination_y_, f32 destination_z_, i32 mission_flag_, f32 max_speed_, f32 radius_, f32 target_heading_, i32 max_height_, i32 min_height_, f32 slow_down_distance_, i32 behavior_flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDAD029E187A2BEB4);
    ctx->Reset();

    ctx->Push(pilot_);
    ctx->Push(aircraft_);
    ctx->Push(target_vehicle_);
    ctx->Push(target_ped_);
    ctx->Push(destination_x_);
    ctx->Push(destination_y_);
    ctx->Push(destination_z_);
    ctx->Push(mission_flag_);
    ctx->Push(max_speed_);
    ctx->Push(radius_);
    ctx->Push(target_heading_);
    ctx->Push(max_height_);
    ctx->Push(min_height_);
    ctx->Push(slow_down_distance_);
    ctx->Push(behavior_flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_all_cover_blocking_areas() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDB6708C0B46F56D8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_primary_vehicle_task(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDBBC7A2432524127);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success vehicle_waypoint_playback_resume(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDC04FCAA7839D492);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success control_mounted_weapon(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDCFE42068FE0135A);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success reset_scenario_groups_enabled() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDD902D0349AFAD3A);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_anim_phase(u32 entity_, f32 phase_, i32 priority_, bool secondary_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDDF3CB5A0A4C0B49);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(phase_);
    ctx->Push(priority_);
    ctx->Push(secondary_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_walking(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDE4C184B2B9B071A);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ped_in_writhe(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDEB6D52126E7D640);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_waypoint_playback_going_on_for_ped(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE03B3F2D3DC59B64);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success task_wander_in_area(u32 ped_, f32 x_, f32 y_, f32 z_, f32 radius_, f32 minimal_length_, f32 time_between_walks_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE054346CA3A0F315);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(minimal_length_);
    ctx->Push(time_between_walks_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_ped_tasks(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE1EF3C1216AFF2CD);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_vehicle_drive_to_coord(u32 ped_, u32 vehicle_, f32 x_, f32 y_, f32 z_, f32 speed_, i32 p6_, u32 vehicle_model_, i32 driving_mode_, f32 stop_range_, f32 straight_line_distance_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE2A2AA2F659D77A7);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(vehicle_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(speed_);
    ctx->Push(p6_);
    ctx->Push(vehicle_model_);
    ctx->Push(driving_mode_);
    ctx->Push(stop_range_);
    ctx->Push(straight_line_distance_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_path_can_drop_from_height(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE361C5C71C431A4F);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_goto_entity_offset(u32 ped_, u32 entity_, i32 time_, f32 seek_radius_, f32 seek_angle_deg_, f32 move_blend_ratio_, i32 goto_entity_offset_flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE39B4FF4FDEBDE27);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(entity_);
    ctx->Push(time_);
    ctx->Push(seek_radius_);
    ctx->Push(seek_angle_deg_);
    ctx->Push(move_blend_ratio_);
    ctx->Push(goto_entity_offset_flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_vehicle_aim_at_ped(u32 ped_, u32 target_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE41885592B08B097);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(target_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_strafing(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE45B7F222DE47E09);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success update_task_sweep_aim_entity(u32 ped_, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE4973DBDBE6E44B3);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_driveby_task_target(u32 shooting_ped_, u32 target_ped_, u32 target_vehicle_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE5B302114D8162EE);
    ctx->Reset();

    ctx->Push(shooting_ped_);
    ctx->Push(target_ped_);
    ctx->Push(target_vehicle_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_stay_in_cover(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE5DA8615A6180789);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_waypoint_distance(f32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE6A877C64CAF1BC5);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success waypoint_playback_start_shooting_at_ped(u32 ped_, u32 ped2_, bool p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE70BA7B90F8390DC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(ped2_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_pause(u32 ped_, i32 ms_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE73A266DB0CA9042);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(ms_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success open_sequence_task(i32* task_sequence_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE8854A4326B9E12B);
    ctx->Reset();

    ctx->Push(task_sequence_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_play_anim(u32 ped_, const CStringPtr& anim_dictionary_, const CStringPtr& animation_name_, f32 blend_in_speed_, f32 blend_out_speed_, i32 duration_, i32 flag_, f32 playback_rate_, bool lock_x_, bool lock_y_, bool lock_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEA47FE3719165B94);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(anim_dictionary_.ptr);
    ctx->Push(animation_name_.ptr);
    ctx->Push(blend_in_speed_);
    ctx->Push(blend_out_speed_);
    ctx->Push(duration_);
    ctx->Push(flag_);
    ctx->Push(playback_rate_);
    ctx->Push(lock_x_);
    ctx->Push(lock_y_);
    ctx->Push(lock_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_rappel_down_wall_using_clipset_override(u32 ped_, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, f32 min_z_, i32 rope_handle_, const CStringPtr& clip_set_, i32 p10_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEAF66ACDDC794793);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(min_z_);
    ctx->Push(rope_handle_);
    ctx->Push(clip_set_.ptr);
    ctx->Push(p10_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_scenario_type_enabled(const CStringPtr& scenario_type_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEB47EC4E34FB7EE1);
    ctx->Reset();

    ctx->Push(scenario_type_.ptr);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_set_decision_maker(u32 ped_, u32 decision_maker_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEB8517DDA73720DA);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(decision_maker_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_waypoint_route_offset(bool* native_return, u32 ped_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xED98E10B0AFCE4B4);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success stop_anim_playback(u32 entity_, i32 priority_, bool secondary_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEE08C992D238C5D1);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(priority_);
    ctx->Push(secondary_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_synchronized_scene(u32 ped_, i32 scene_, const CStringPtr& anim_dictionary_, const CStringPtr& animation_name_, f32 blend_in_, f32 blend_out_, i32 flags_, i32 ragdoll_blocking_flags_, f32 mover_blend_delta_, i32 ik_flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEEA929141F699854);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(scene_);
    ctx->Push(anim_dictionary_.ptr);
    ctx->Push(animation_name_.ptr);
    ctx->Push(blend_in_);
    ctx->Push(blend_out_);
    ctx->Push(flags_);
    ctx->Push(ragdoll_blocking_flags_);
    ctx->Push(mover_blend_delta_);
    ctx->Push(ik_flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_vehicle_mission_coors_target(u32 ped_, u32 vehicle_, f32 x_, f32 y_, f32 z_, i32 mission_, f32 cruise_speed_, i32 driving_style_, f32 target_reached_, f32 straight_line_distance_, bool drive_against_traffic_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF0AF20AA7731F8C3);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(vehicle_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(mission_);
    ctx->Push(cruise_speed_);
    ctx->Push(driving_style_);
    ctx->Push(target_reached_);
    ctx->Push(straight_line_distance_);
    ctx->Push(drive_against_traffic_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_move_blend_ratio_walking(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF133BBBE91E1691F);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success task_combat_ped(u32 ped_, u32 target_ped_, i32 combat_flags_, i32 threat_response_flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF166E48407BAC484);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(target_ped_);
    ctx->Push(combat_flags_);
    ctx->Push(threat_response_flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_next_desired_move_state(f32 next_move_state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF1B9F16E89E2C93A);
    ctx->Reset();

    ctx->Push(next_move_state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_hands_up(u32 ped_, i32 duration_, u32 facing_ped_, i32 time_to_face_ped_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF2EAB31979A7F910);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(duration_);
    ctx->Push(facing_ped_);
    ctx->Push(time_to_face_ped_);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_path_may_enter_water(u32 ped_, bool may_enter_water_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF35425A4204367EC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(may_enter_water_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_arrest_ped(u32 ped_, u32 target_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF3B9A78A178572B1);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(target_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_waypoint_playback_going_on_for_vehicle(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF5134943EA29868C);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success task_plane_goto_precise_vtol(u32 ped_, u32 vehicle_, f32 x_, f32 y_, f32 z_, i32 flight_height_, i32 min_height_above_terrain_, bool use_desired_orientation_, f32 desired_orientation_, bool autopilot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF7F9DCCA89E7505B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(vehicle_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(flight_height_);
    ctx->Push(min_height_above_terrain_);
    ctx->Push(use_desired_orientation_);
    ctx->Push(desired_orientation_);
    ctx->Push(autopilot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_scenario_group_exist(bool* native_return, const CStringPtr& scenario_group_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF9034C136C9E00D3);
    ctx->Reset();

    ctx->Push(scenario_group_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success task_start_scenario_at_position(u32 ped_, const CStringPtr& scenario_name_, f32 x_, f32 y_, f32 z_, f32 heading_, i32 duration_, bool sitting_scenario_, bool teleport_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFA4EFC79F69D4F07);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(scenario_name_.ptr);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(heading_);
    ctx->Push(duration_);
    ctx->Push(sitting_scenario_);
    ctx->Push(teleport_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_cover_blocking_areas_at_position(f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFA83CA6776038F64);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success task_vehicle_follow(u32 driver_, u32 vehicle_, u32 target_entity_, f32 speed_, i32 driving_style_, i32 min_distance_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFC545A9F0626E3B6);
    ctx->Reset();

    ctx->Push(driver_);
    ctx->Push(vehicle_);
    ctx->Push(target_entity_);
    ctx->Push(speed_);
    ctx->Push(driving_style_);
    ctx->Push(min_distance_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_waypoint_recording(const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFF1B8B4AA1C25DC8);
    ctx->Reset();

    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_vehicle_high_detail_model(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x00689CDE5F7C6787);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_mod_gen9_exclusive(bool* native_return, u32 vehicle_, i32 mod_type_, i32 mod_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x00834EAC4A96E010);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(mod_type_);
    ctx->Push(mod_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_vehicle_class_estimated_max_speed(f32* native_return, i32 vehicle_class_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x00C09F246ABEDD82);
    ctx->Reset();

    ctx->Push(vehicle_class_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_tyre_wear_rate(u32 vehicle_, i32 wheel_index_, f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x01894E2EDE923CA2);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(wheel_index_);
    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_arrive_distance_override_for_vehicle_persuit_attack(u32 vehicle_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0205F5365292D2EB);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_has_been_driven_flag(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x02398B627547189C);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success vehicle_set_override_extenable_side_ratio(i32* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0419B167EE128F33);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_last_shunt_vehicle(u32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x04F2FA6E234162F7);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_is_vehicle_disabled_by_emp(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0506ED94363AD905);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_random_vehicle_model_in_memory(u32* model_hash_, i32* success_indicator_, bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x055BF0AC0C34F4FD);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(model_hash_);
    ctx->Push(success_indicator_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_turret_target(u32 vehicle_, bool p1_, f32 x_, f32 y_, f32 z_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0581730AB9380412);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_should_lerp_from_ai_to_full_recording(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x063AE2B2CC273588);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_inactive_during_playback(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x06582AFF74894C75);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_can_eject_passengers_if_locked(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x065D03A9D6B2C6B5);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_drops_money_when_blown_up(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x068F64F2470F9656);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_preload_mods_finished(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x06F43E5175EB6D96);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_is_racing(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x07116E24E9D1929D);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_train_carriage(u32* native_return, u32 train_, i32 trailer_number_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x08AAFD0814722BC3);
    ctx->Reset();

    ctx->Push(train_);
    ctx->Push(trailer_number_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_submarine_number_of_air_leaks(i32* native_return, u32 submarine_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x093D6DDCA5B8FBAE);
    ctx->Reset();

    ctx->Push(submarine_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_vehicle_rudder_broken(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x09606148B6C71DEF);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_heli_combat_offset(u32 vehicle_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A3F820A9A9A9AC5);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_vehicle_generator_area_of_interest() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A436B8643716D14);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_boat_disable_avoidance(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A6A279F3AA4FD70);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_influences_wanted_level(i32 p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0AD9E8F87FF7C16F);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_hydraulic_suspension_raise_factor(f32* native_return, u32 vehicle_, i32 wheel_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0BB5CBDDD0F25AE3);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(wheel_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_plane_section_damage_scale(u32 vehicle_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0BBB9A7A8FFE931B);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success vehicle_start_parachuting(u32 vehicle_, bool active_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0BFFB028B3DD0A97);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(active_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_can_deform_wheels(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0CDDA42F9E360CA6);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cargobob_pickup_rope_type(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0D5F65A8F4EBDAB5);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success detach_vehicle_from_cargobob(u32 vehicle_, u32 cargobob_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0E21D3DF1051399D);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(cargobob_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_total_duration_of_vehicle_recording(f32* native_return, i32 recording_, const CStringPtr& script_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0E48D1C262390950);
    ctx->Reset();

    ctx->Push(recording_);
    ctx->Push(script_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_vehicle_window_tint(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0EE21293DAD47C95);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success allow_boat_boom_to_animate(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0F3B4D4E43177236);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_all_garage_activity() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0F87E938BDF29D66);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_model_is_suppressed(u32 model_, bool suppressed_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0FC2D89AC25A5814);
    ctx->Reset();

    ctx->Push(model_);
    ctx->Push(suppressed_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_total_duration_of_vehicle_recording_id(f32* native_return, i32 id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x102D125411A7B6E6);
    ctx->Reset();

    ctx->Push(id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success remove_road_node_speed_zone(bool* native_return, i32 speedzone_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1033371FC8E842A7);
    ctx->Reset();

    ctx->Push(speedzone_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_handling_override(u32 vehicle_, u32 hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x10655FAB9915623D);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_short_slowdown_for_landing(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x107A473D7A6647A9);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_dont_process_vehicle_glass(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1087BC8EC540DAEB);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_turret_speed_this_frame(u32 vehicle_, f32 speed_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1093408B4B9D1146);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(speed_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_fixed(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x115722B1B9C14C1C);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success are_all_vehicle_windows_intact(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x11D862A3E977A9EF);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_can_use_hydraulics(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1201E8A3290A3B98);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_extra_exist(bool* native_return, u32 vehicle_, i32 extra_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1262D55792428154);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(extra_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_vehicle_in_burnout(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1297A88E081430EB);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_wheelie_enabled(u32 vehicle_, bool enabled_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1312DDD8385AEE4E);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(enabled_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_disable_vehicle_explosions_damage(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x143921E45EC44D62);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_attached_to_tow_truck(bool* native_return, u32 tow_truck_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x146DF9EC4C4B9FD4);
    ctx->Reset();

    ctx->Push(tow_truck_);
    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_searchlight(u32 heli_, bool toggle_, bool can_be_used_by_a_i_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x14E85C5EE7A4D542);
    ctx->Reset();

    ctx->Push(heli_);
    ctx->Push(toggle_);
    ctx->Push(can_be_used_by_a_i_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_train_cruise_speed(u32 train_, f32 speed_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x16469284DB8C62B5);
    ctx->Reset();

    ctx->Push(train_);
    ctx->Push(speed_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success attach_vehicle_on_to_trailer(u32 vehicle_, u32 trailer_, f32 offset_x_, f32 offset_y_, f32 offset_z_, f32 coords_x_, f32 coords_y_, f32 coords_z_, f32 rotation_x_, f32 rotation_y_, f32 rotation_z_, f32 disable_collisions_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x16B5E274BDE402F8);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(trailer_);
    ctx->Push(offset_x_);
    ctx->Push(offset_y_);
    ctx->Push(offset_z_);
    ctx->Push(coords_x_);
    ctx->Push(coords_y_);
    ctx->Push(coords_z_);
    ctx->Push(rotation_x_);
    ctx->Push(rotation_y_);
    ctx->Push(rotation_z_);
    ctx->Push(disable_collisions_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_cargobob_have_pick_up_rope(bool* native_return, u32 cargobob_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1821D91AD4B56108);
    ctx->Reset();

    ctx->Push(cargobob_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_custom_path_node_streaming_radius(u32 vehicle_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x182F266C2D9E2BEB);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_friction_override(u32 vehicle_, f32 friction_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1837AF7C627009BA);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(friction_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_can_leak_petrol(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x192547247864DFDD);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_convertible_roof_latch_state(u32 vehicle_, bool state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1A78AD3D8240536F);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_has_unbreakable_lights(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1AA8A837D2169D94);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_open_rear_doors_on_explosion(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1B212B26DD3C04DF);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success vehicle_set_enable_ramp_car_side_impulse(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1BBAC99C0BC53656);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_vehicle_asset_loaded(bool* native_return, i32 vehicle_asset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1BBE0523B8DB9A21);
    ctx->Reset();

    ctx->Push(vehicle_asset_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_playback_going_on_for_vehicle(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1C8A4C2C19E68EEC);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_vehicle_trailer_vehicle(bool* native_return, u32* trailer_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1CDD6BADC297830D);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(trailer_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_stays_frozen_when_cleaned_up(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1CF38D529D7441D9);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_use_alternate_handling(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1D97D1E3A70A649F);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_is_wheels_retracted(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1DA0DA9CB3F0C8BF);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_allow_homing_missle_lockon_synced(u32 vehicle_, bool can_be_locked_on_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1DDA078D12879EEE);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(can_be_locked_on_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_high_detail(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1F25887F3C104278);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_mod_kit(u32 vehicle_, i32 mod_kit_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1F2AA07F00B3217A);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(mod_kit_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_playback_recorded_vehicle_update(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1F2E4E06DEA8992B);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cargobob_exclude_from_pickup_entity(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1F34B0626C594380);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_act_as_if_high_speed_for_frag_smashing(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1F9FB66F3A3842D2);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_headlight_shadows(u32 vehicle_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1FD09E7390A74D54);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_extra_colours(u32 vehicle_, i32 pearlescent_color_, i32 wheel_color_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2036F561ADD12E33);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(pearlescent_color_);
    ctx->Push(wheel_color_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_doors_locked_for_all_teams(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x203B527D1B77904C);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_rotation_of_vehicle_recording_at_time(Vector3Wrapper& native_return, i32 recording_, f32 time_, const CStringPtr& script_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2058206FBE79A8AD);
    ctx->Reset();

    ctx->Push(recording_);
    ctx->Push(time_);
    ctx->Push(script_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success set_vehicle_can_engine_missfire(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x206BC5DC9D1AC70A);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_active_for_ped_navigation(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x21115BCD6E44656A);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_disable_weapon_blade_forces(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x211E95CE9903940C);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_recording_id(i32* native_return, i32 recording_, const CStringPtr& script_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x21543C612379DB3C);
    ctx->Reset();

    ctx->Push(recording_);
    ctx->Push(script_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_ped_using_vehicle_door(u32* native_return, u32 vehicle_, i32 doord_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x218297BF0CFD853B);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(doord_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_train_track_spawn_frequency(i32 track_index_, i32 frequency_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x21973BBF8D17EDFA);
    ctx->Reset();

    ctx->Push(track_index_);
    ctx->Push(frequency_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_vehicle_wheels(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x21D2E5662C1F6FED);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success delete_script_vehicle_generator(i32 vehicle_generator_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x22102C9ABFCF125D);
    ctx->Reset();

    ctx->Push(vehicle_generator_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_reduce_grip(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x222FF6A823D122E2);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_seat_free(bool* native_return, u32 vehicle_, i32 seat_index_, bool is_task_running_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x22AC59A870E6A669);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(seat_index_);
    ctx->Push(is_task_running_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success allow_train_to_be_removed_by_population(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2310A8F9421EBF43);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_respects_locks_when_has_driver(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2311DD7159F00582);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_plane_aileron(u32 vehicle_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x23428FC53C60919C);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_density_multiplier_this_frame(f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x245A6883D966D537);
    ctx->Reset();

    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_engine_on(u32 vehicle_, bool value_, bool instantly_, bool disable_auto_start_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2497C4717C8B881E);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(value_);
    ctx->Push(instantly_);
    ctx->Push(disable_auto_start_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_number_of_passengers(i32* native_return, u32 vehicle_, bool include_driver_, bool include_dead_occupants_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x24CB2137731FFE89);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(include_driver_);
    ctx->Push(include_dead_occupants_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success can_anchor_boat_here_ignore_players(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x24F4121D07579880);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_disable_pretend_occupants(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x25367DE49D64CF16);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_door_lock_status(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x25BC98A59C2EA962);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success does_vehicle_have_weapons(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x25ECB9F8017D98E0);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success bring_vehicle_to_halt(u32 vehicle_, f32 distance_, i32 duration_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x260BE8F09E326A20);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(distance_);
    ctx->Push(duration_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_far_draw_vehicles(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x26324F33423F3CC3);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success can_anchor_boat_here(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x26C10ECBDA5D043B);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_disable_bmx_extra_trick_forces(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x26D99D5A82FD18E8);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_disable_explode_from_body_damage_on_collision(u32 vehicle_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x26E13D440E7F6064);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_generates_engine_shocking_events(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x279D50DE5652D935);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_bumper_bouncing(bool* native_return, u32 vehicle_, bool front_bumper_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x27B926779DEB502D);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(front_bumper_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_hydraulics_control(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x28B18377EB6E25F6);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success vehicle_set_ramp_and_ramming_cars_take_damage(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x28D034A93FE31BF5);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_layout_hash(u32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x28D37D4F71AC5C58);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success is_any_ped_rappelling_from_heli(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x291E373D483E7EE7);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_vehicle_class(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x29439776AAA00A62);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_vehicle_stopped_at_traffic_lights(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2959F696AE390A99);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_increase_wheel_crush_damage(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2970EAA18FD5E42F);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success attach_vehicle_to_tow_truck(u32 tow_truck_, u32 vehicle_, bool rear_, f32 hook_offset_x_, f32 hook_offset_y_, f32 hook_offset_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x29A16F8D621C4508);
    ctx->Reset();

    ctx->Push(tow_truck_);
    ctx->Push(vehicle_);
    ctx->Push(rear_);
    ctx->Push(hook_offset_x_);
    ctx->Push(hook_offset_y_);
    ctx->Push(hook_offset_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_wheels_can_break(u32 vehicle_, bool enabled_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x29B18B4FD460CA8F);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(enabled_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_playback_recorded_vehicle_using_ai(u32 vehicle_, i32 recording_, const CStringPtr& script_, f32 speed_, i32 driving_style_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x29DE5FA52D00428C);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(recording_);
    ctx->Push(script_.ptr);
    ctx->Push(speed_);
    ctx->Push(driving_style_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success toggle_vehicle_mod(u32 vehicle_, i32 mod_type_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2A1F4F37F95BAD08);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(mod_type_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success transform_to_car(u32 vehicle_, bool no_animation_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2A69FFD1B42BFF9E);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(no_animation_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_plane_engine_health(u32 vehicle_, f32 health_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2A86A0475B6A1434);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(health_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_trailer_inverse_mass_scale(u32 vehicle_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2A8F319B392E7B3F);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_neon_enabled(u32 vehicle_, i32 index_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2AA720E4287BF269);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(index_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_model_number_of_seats(i32* native_return, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2AD93716F184EDA4);
    ctx->Reset();

    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_garbage_trucks(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2AFD795EEAC8D30D);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_has_been_owned_by_player(u32 vehicle_, bool owned_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B5F9D2AF1F1722D);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(owned_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_disable_towing(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B6747FAA9DB9D6B);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_livery(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2BB9230590DA5E8A);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success can_cargobob_pick_up_entity(bool* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2C1D8B3B19E517CC);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_will_tell_others_to_hurry(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2C4A1590ABF43E8B);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_num_of_broken_loosen_parts(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2C8CBFE1EA5FC631);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success add_road_node_speed_zone(i32* native_return, f32 x_, f32 y_, f32 z_, f32 radius_, f32 speed_, bool p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2CE544C68FB812A0);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(speed_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success are_any_vehicle_seats_free(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2D34FC3BC4ADB780);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_disable_hover_mode_flight(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2D55FE374D5FDB91);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_position_in_recording(f32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2DACD605FC681475);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_vehicle_timed_explosion(u32 vehicle_, u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2E0A74E1002380B1);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_drift_tyres_set(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2F5A72430E78C8D3);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_vehicle_class_max_acceleration(f32* native_return, i32 vehicle_class_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2F83E7E45D9EA7AE);
    ctx->Reset();

    ctx->Push(vehicle_class_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_door_allowed_to_be_broken_off(u32 vehicle_, i32 door_id_, bool is_breakable_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2FA133A4A9D37ED8);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(door_id_);
    ctx->Push(is_breakable_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_trailer_attachment_enabled(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2FA2494B47FDD009);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_vehicle_stuck_check_with_warp(i32 p0_, f32 p1_, i32 p2_, bool p3_, bool p4_, bool p5_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2FA9923062DD396C);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_can_be_used_by_fleeing_peds(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x300504B23BD3B711);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_vehicle_recording_been_loaded(bool* native_return, i32 recording_, const CStringPtr& script_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x300D614A4C785FC4);
    ctx->Reset();

    ctx->Push(recording_);
    ctx->Push(script_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success can_shuffle_seat(bool* native_return, u32 vehicle_, i32 seat_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x30785D90C956BF35);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(seat_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_flight_nozzle_position(u32 vehicle_, f32 angle_ratio_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x30D779DE7C4F6DD3);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(angle_ratio_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_render_train_as_derailed(u32 train_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x317B11A312DF5534);
    ctx->Reset();

    ctx->Push(train_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_is_considered_by_player(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x31B927BBC44156CD);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_vehicle_turret_movement_this_frame(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x32CAEDF24A583345);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_submarine_surface_mode(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x33506883545AC0DF);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_colour_combination(u32 vehicle_, i32 color_combination_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x33E8CD3322E2FE31);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(color_combination_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_num_mod_kits(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x33F2E3FE70EAAE1D);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_allow_vehicle_explodes_on_contact(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3441CAD2F2231923);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_all_vehicle_generators_active() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x34AD89078831A4BC);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_lights(u32 vehicle_, i32 state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x34E710FF01247C5A);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success close_bomb_bay_doors(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3556041742A0DC74);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_occupants_take_explosive_damage(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x35BB21DE06784373);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ambient_vehicle_neon_enabled(bool p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x35E0654F4BAD7971);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_current_time_in_slip_stream(f32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x36492C2F0D134C56);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_vehicle_custom_secondary_colour(u32 vehicle_, i32 r_, i32 g_, i32 b_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x36CED73BFED89754);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_has_rocket_boost(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x36D782F68B309BDA);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_combat_mode(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x36DE109527A2C0C4);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stabilise_entity_attached_to_heli(u32 vehicle_, u32 entity_, f32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x374706271354CB18);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(entity_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_can_be_targetted(u32 vehicle_, bool state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3750146A28097A82);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success find_handler_vehicle_container_is_attached_to(u32* native_return, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x375E7FC44F21C8AB);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_disable_vehicle_petrol_tank_damage(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x37C8252A7C92D017);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_forklift_fork_height(u32 vehicle_, f32 height_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x37EBBF3117BD6A25);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(height_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_random_vehicle_in_sphere(u32* native_return, f32 x_, f32 y_, f32 z_, f32 radius_, u32 model_hash_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x386F6CE5BAF6091C);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(model_hash_);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_tyre_wear_rate_scale(u32 vehicle_, i32 wheel_index_, f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x392183BB9EA57697);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(wheel_index_);
    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_this_model_a_quadbike(bool* native_return, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x39DAC362EE65FA28);
    ctx->Reset();

    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_reduced_suspension_force(u32 vehicle_, bool enable_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3A375167F5782A65);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(enable_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_outriggers_deployed(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3A9128352EAC9E85);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_enveff_scale(u32 vehicle_, f32 fade_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3AFDC536C3D01674);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(fade_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_door_auto_lock(u32 vehicle_, i32 door_id_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3B458DDB57038F08);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(door_id_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_number_of_vehicle_colours(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3B963160CD65D41E);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_vehicle_extra_colours(i32* pearlescent_color_, i32* wheel_color_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3BC4245933A166F7);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(pearlescent_color_);
    ctx->Push(wheel_color_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success attach_vehicle_to_trailer(u32 vehicle_, u32 trailer_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3C7D42D58F770B54);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(trailer_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_rocket_boost_active(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3D34E80EED4AE3BE);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_vehicle_parachute_deployed(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3DE51E9C80B116CF);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_vehicle_xenon_light_color_index(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3DFF319A831E0CDB);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_submarine_is_under_design_depth(bool* native_return, u32 submarine_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3E71D0B300B7AA79);
    ctx->Reset();

    ctx->Push(submarine_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_strong(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3E8C8727991A8A0B);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_door_fully_open(bool* native_return, u32 vehicle_, i32 door_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3E933CFF7B111C22);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(door_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_heli_tail_boom_can_break_off(bool* native_return, u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3EC8BF18AA453FE9);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success start_playback_recorded_vehicle(u32 vehicle_, i32 recording_, const CStringPtr& script_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3F878F92B3A7A071);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(recording_);
    ctx->Push(script_.ptr);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_heli_main_rotor_health(u32 vehicle_, f32 health_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4056EA1105F5ABD7);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(health_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_homing_lockedonto_state(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x407DC5E97DB1A4D3);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_ai_can_use_exclusive_seats(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x41062318F23ED854);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success attach_vehicle_to_cargobob(u32 vehicle_, u32 cargobob_, i32 p2_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4127F1D84E347769);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(cargobob_);
    ctx->Push(p2_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_use_boost_button_for_wheel_retract(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x41290B40FA63E6DA);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_plane_landing_gear_intact(bool* native_return, u32 plane_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4198AB0022B15F87);
    ctx->Reset();

    ctx->Push(plane_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_transform_to_submarine_uses_alternate_input(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x41B9FB92EDED32A6);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_model(bool* native_return, u32 vehicle_, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x423E8DE37D934D89);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_formation_leader(u32 vehicle_, f32 x_, f32 y_, f32 z_, f32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x428AD3E26C8D9EB0);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_can_save_in_garage(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x428BACCDF5E26EAD);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_num_of_broken_off_parts(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x42A4BEB35D372407);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_vehicle_steer_bias(u32 vehicle_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x42A8EC77D5150CBE);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_current_playback_for_vehicle(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x42BC05C27A946054);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ground_effect_reduces_drag(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x430A7631A84C9BE7);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_alarm_activated(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4319E335B71FFF34);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_special_flight_mode_target_ratio(u32 vehicle_, f32 target_ratio_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x438B3D7CA026FE91);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(target_ratio_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_mod_color1(u32 vehicle_, i32 paint_type_, i32 color_, i32 pearlescent_color_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x43FEB945EE7F85B8);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(paint_type_);
    ctx->Push(color_);
    ctx->Push(pearlescent_color_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_vehicle_petroltank_fire_culprit(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4419966C9936071A);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success release_preload_mods(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x445D79F995508307);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_weapon_restricted_ammo(u32 vehicle_, i32 weapon_index_, i32 capacity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x44CD1F493DB2A0A6);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(weapon_index_);
    ctx->Push(capacity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_mod_identifier_hash(u32* native_return, u32 vehicle_, i32 mod_type_, i32 mod_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4593CF82AA179706);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(mod_type_);
    ctx->Push(mod_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_vehicle_weapon_damage_scale(bool* native_return, u32 vehicle_, f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x45A561A9421AB6AD);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_this_model_a_boat(bool* native_return, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x45A9187928F4B9E3);
    ctx->Reset();

    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_engine_health(u32 vehicle_, f32 health_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x45F6D8EEF34ABEF1);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(health_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_disable_vehicle_petrol_tank_fires(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x465BF26AB9684352);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_bumper_broken_off(bool* native_return, u32 vehicle_, bool front_bumper_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x468056A6BB6F3846);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(front_bumper_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success remove_vehicles_from_generators_in_area(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x46A1E1A299EC4BBA);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_window_intact(bool* native_return, u32 vehicle_, i32 window_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x46E571A0E20D01F1);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(window_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_wheel_type(u32 vehicle_, i32 wheel_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x487EB21CC7295BA1);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(wheel_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success instantly_fill_vehicle_population() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x48ADC8A773564670);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_producing_slip_stream(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x48C633E94A8142A7);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_vehicle_mod_color2_name(CStringPtr& native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4967A516ED23A5A1);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success set_vehicle_on_ground_properly(bool* native_return, u32 vehicle_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x49733E92263139D1);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_transform_rate_for_animation(u32 vehicle_, f32 transform_rate_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x498218259FB7C72D);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(transform_rate_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_disable_wanted_cones_response(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4AD280EB48B2D8E6);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_stolen(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4AF9BD80EEBEB453);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_vehicle_class_max_braking(f32* native_return, i32 vehicle_class_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4BF54C16EC8FEC03);
    ctx->Reset();

    ctx->Push(vehicle_class_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success is_vehicle_driveable(bool* native_return, u32 vehicle_, bool is_on_fire_check_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4C241E39B23DF959);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(is_on_fire_check_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_number_of_vehicle_number_plates(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4C4D6B2644F458CB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_vehicle_can_be_visibly_damaged(u32 vehicle_, bool state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4C7028F78FFD3681);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_plane_propeller_health(bool* native_return, u32 plane_, f32 health_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4C815EB175086F84);
    ctx->Reset();

    ctx->Push(plane_);
    ctx->Push(health_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_vehicle_siren_on(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4C9BF537BE2634B2);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success vehicle_set_parachute_model_override(u32 vehicle_, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4D610C6B56031351);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_force_vehicle_engine_damage_by_bullet(i32 p0_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4D9D109F63FEE1D4);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_damage_scale(bool* native_return, u32 vehicle_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4E20D2A627011E8E);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success does_vehicle_allow_rappel(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4E417C547182C84D);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_police_focus_will_track_vehicle(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4E74E62E0A97E901);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_deformation_at_pos(Vector3Wrapper& native_return, u32 vehicle_, f32 offset_x_, f32 offset_y_, f32 offset_z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4EC6CFBC7B2E9536);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(offset_x_);
    ctx->Push(offset_y_);
    ctx->Push(offset_z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success set_vehicle_colours(u32 vehicle_, i32 color_primary_, i32 color_secondary_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4F1D4BE3A7F24601);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(color_primary_);
    ctx->Push(color_secondary_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_class_max_agility(f32* native_return, i32 vehicle_class_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4F930AD022D6DE3B);
    ctx->Reset();

    ctx->Push(vehicle_class_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success disable_individual_plane_propeller(u32 vehicle_, i32 propeller_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x500873A45724C863);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(propeller_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_has_kers(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x50634E348C8D44EF);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_doors_locked_for_player(u32 vehicle_, u32 player_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x517AAF684BB50CD1);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(player_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_can_leak_oil(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x51BB2D88D31A914B);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_enable_empty_crowding_vehicles_removal(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x51DB102F4A3BA5E0);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_mod_slot_name(CStringPtr& native_return, u32 vehicle_, i32 mod_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x51F0FEB9F6AE98C0);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(mod_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success get_can_vehicle_be_placed_here(bool* native_return, u32 vehicle_, f32 x_, f32 y_, f32 z_, f32 rot_x_, f32 rot_y_, f32 rot_z_, i32 p7_, i32 p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x51F30DB60626A20E);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(rot_x_);
    ctx->Push(rot_y_);
    ctx->Push(rot_z_);
    ctx->Push(p7_);
    ctx->Push(p8_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_can_respray_vehicle(u32 vehicle_, bool state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x52BBA29D5EC69356);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_a_convertible(bool* native_return, u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x52F357A30698BCCE);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_wheels_retracted_instantly(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5335BE58C083E74E);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_model_acceleration_max_mods(f32* native_return, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x53409B5163D5B846);
    ctx->Reset();

    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success is_extra_broken_off(bool* native_return, u32 vehicle_, i32 extra_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x534E36D4DB9ECC5D);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(extra_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_fake_suspension_lowering_amount(f32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x53952FD2BAA19F17);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_vehicle_model_max_traction(f32* native_return, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x539DE94D44FDFD0D);
    ctx->Reset();

    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_vehicle_estimated_max_speed(f32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x53AF99BAA671CA47);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_glider_active(u32 vehicle_, bool state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x544996C0081ABDEB);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_playback_recorded_vehicle(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x54833611C17ABDEA);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_vehicle_combat_angled_avoidance_area(i32* native_return, f32 p0_, f32 p1_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, f32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x54B0F614960F4A5F);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success clear_vehicle_custom_primary_colour(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x55E1D2758F34E437);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_tyre_health(f32* native_return, u32 vehicle_, i32 wheel_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x55EAB010FAEE9380);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(wheel_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success is_vehicle_weapon_disabled(bool* native_return, u32 weapon_hash_, u32 vehicle_, u32 owner_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x563B65A643ED072E);
    ctx->Reset();

    ctx->Push(weapon_hash_);
    ctx->Push(vehicle_);
    ctx->Push(owner_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_tank_turret_position(u32 vehicle_, f32 position_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x56B94C6D7127DFBA);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(position_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cargobob_pickup_magnet_ensure_pickup_entity_upright(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x56EB5E94318D3FB6);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cargobob_force_dont_detach_vehicle(u32 cargobob_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x571FEB383F629926);
    ctx->Reset();

    ctx->Push(cargobob_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_stopped(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5721B434AD84D57A);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_time_position_in_recording(f32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5746F3A7AB7FE544);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success is_entity_attached_to_handler_frame(bool* native_return, u32 vehicle_, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x57715966069157AD);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_window_tint(u32 vehicle_, i32 tint_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x57C51E6BAD752696);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(tint_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_vehicle_have_stuck_vehicle_check(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x57E4C39DE5EE8470);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_tail_lights(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5815BD2763178DF4);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_additional_rotation_for_recorded_vehicle_playback(u32 vehicle_, f32 x_, f32 y_, f32 z_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5845066D8A1EA7F7);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_model_value(i32* native_return, u32 vehicle_model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5873C14A52D74236);
    ctx->Reset();

    ctx->Push(vehicle_model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_mission_train_coords(u32 train_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x591CA673AA6AB736);
    ctx->Reset();

    ctx->Push(train_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_taxi_lights(u32 vehicle_, bool state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x598803E85E8448D9);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success are_wings_of_plane_intact(bool* native_return, u32 plane_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5991A01434CE9677);
    ctx->Reset();

    ctx->Push(plane_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_can_break(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x59BF8C3D52C92F66);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_peds_can_fall_off_this_vehicle_from_large_fall_damage(u32 vehicle_, bool toggle_, f32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x59C3757B3B7408E8);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_boat_vehicle_model_agility(f32* native_return, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5AA3F878A178C4FC);
    ctx->Reset();

    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_drift_tyres(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5AC79C98C5C17F05);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_provides_cover(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5AFEEDD9BB2899D7);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success delete_mission_train(u32* train_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5B76B14AE875C795);
    ctx->Reset();

    ctx->Push(train_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_invert_vehicle_controls(u32 vehicle_, bool state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5B91B229243351A8);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_vehicle_petroltank_set_on_fire_by_entity(bool* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5BA68A0840D546AC);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_use_double_click_for_car_jump(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5BBCF35BF6E456F7);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_allow_no_passengers_lockon(u32 veh_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5D14D4154BFE7B2C);
    ctx->Reset();

    ctx->Push(veh_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_acceleration(f32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5DD35C8D074E57AE);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_vehicle_no_explosion_damage_from_driver(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5E569EC46EC21CAE);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_livery2_count(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5ECB40269053C0D4);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success override_plane_damage_threhsold(u32 vehicle_, f32 health_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5EE5632F47AE9695);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(health_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_is_left_vehicle_headlight_damaged(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5EF77C9ADD3B11A3);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success clear_vehicle_custom_secondary_colour(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5FFBDEEC3E8E2009);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_livery2(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x60190048C0764A26);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success roll_up_window(u32 vehicle_, i32 window_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x602E548F46E24D59);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(window_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_all_low_priority_vehicle_generators_active(bool active_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x608207E7A8FB787C);
    ctx->Reset();

    ctx->Push(active_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_extra_colour6(u32 vehicle_, i32 color_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6089CDF6A57F326C);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(color_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_livery(u32 vehicle_, i32 livery_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x60BF608F1B8CD1B6);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(livery_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_any_vehicle_near_point(bool* native_return, f32 x_, f32 y_, f32 z_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x61E1DD6125A3EEE6);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_any_entity_attached_to_handler_frame(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x62CA17B74C435651);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_vehicle_mod_kit(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6325D1A044AE510D);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success pause_playback_recorded_vehicle(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x632A689BF42301B1);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_this_model_an_amphibious_car(bool* native_return, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x633F6F44A537EBB6);
    ctx->Reset();

    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_heli_landing_area_blocked(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x634148744F385576);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_entry_point_for_seat_clear(bool* native_return, u32 ped_, u32 vehicle_, i32 seat_index_, bool side_, bool on_enter_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x639431E895B9AA57);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(vehicle_);
    ctx->Push(seat_index_);
    ctx->Push(side_);
    ctx->Push(on_enter_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success create_mission_train(u32* native_return, i32 unk_variation_, f32 x_, f32 y_, f32 z_, bool direction_, i32 p5_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x63C6CCA8E68AE8C8);
    ctx->Reset();

    ctx->Push(unk_variation_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(direction_);
    ctx->Push(p5_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success track_vehicle_visibility(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x64473AEFDCF47DCA);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_is_door_valid(bool* native_return, u32 vehicle_, i32 door_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x645F4B6E8499F632);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(door_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_forward_speed_xy(u32 vehicle_, f32 speed_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6501129C9E0FFA05);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(speed_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_slow_down_effect_disabled(bool disabled_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x65B080555EA48149);
    ctx->Reset();

    ctx->Push(disabled_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_boat_boom_position_ratio(f32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6636C535F6CC2725);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_playback_speed(u32 vehicle_, f32 speed_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6683AB880E427778);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(speed_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cargobob_pickup_magnet_reduced_strength(u32 cargobob_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x66979ACF5102FD2F);
    ctx->Reset();

    ctx->Push(cargobob_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_override_vehicle_door_torque(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x66E3AAFACE2D1EB8);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_tyres_can_burst(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x678B9BB8C3F58FEB);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_vehicle_stuck_timer_up(bool* native_return, u32 vehicle_, i32 p1_, i32 ms_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x679BE1DAF71DA874);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);
    ctx->Push(ms_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_is_stolen(u32 vehicle_, bool is_stolen_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x67B2C79AA7FF5738);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(is_stolen_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_handbrake(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x684785568EF26A22);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cargobob_pickup_magnet_pull_rope_length(u32 vehicle_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x685D5561680D088B);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_colour_combination(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6A842D197F845D56);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_vehicle_impatience_timer(u32 vehicle_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6A973569BA094650);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success attach_container_to_handler_frame_when_lined_up(u32 vehicle_, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6A98C2ECF57FA5D4);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_vehicle_phone_explosive_device(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6ADAABD3068C5235);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_mod(u32 vehicle_, i32 mod_type_, i32 mod_index_, bool custom_tires_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6AF0636DDEDCB6DD);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(mod_type_);
    ctx->Push(mod_index_);
    ctx->Push(custom_tires_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success pop_out_vehicle_windscreen(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6D645D59FB5F5AD3);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_vehicle_route_history(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6D6AF961B72728AE);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cargobob_pickup_magnet_reduced_falloff(u32 cargobob_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6D8EAC07506291FB);
    ctx->Reset();

    ctx->Push(cargobob_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_reduce_grip_level(u32 vehicle_, i32 val_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6DEE944E1EE90CFB);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(val_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_heli_control_lagging_rate_scalar(u32 helicopter_, f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6E0859B530A365CC);
    ctx->Reset();

    ctx->Push(helicopter_);
    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_cargobob_have_pickup_magnet(bool* native_return, u32 cargobob_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6E08BF5B3722BAC9);
    ctx->Reset();

    ctx->Push(cargobob_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_tyre_fixed(u32 vehicle_, i32 tyre_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6E13FC662B882D1D);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(tyre_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_tyre_wear_rate(f32* native_return, u32 vehicle_, i32 wheel_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6E387895952F4F71);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(wheel_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_playback_to_use_ai_try_to_revert_back_later(u32 vehicle_, i32 time_, i32 driving_style_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6E63860BBB190730);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(time_);
    ctx->Push(driving_style_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_homing_lockedonto_state(i32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6EAAEFC76ACC311F);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_vehicle_stop_instantly_when_player_inactive(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6EBFB22D646FFC18);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_hover_mode_wing_ratio(u32 vehicle_, f32 ratio_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x70A252F60A3E036B);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(ratio_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_petrol_tank_health(u32 vehicle_, f32 health_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x70DB57649FA8D0D8);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(health_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_custom_primary_colour(u32 vehicle_, i32 r_, i32 g_, i32 b_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7141766F91D15BEA);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_does_vehicle_have_tombstone(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x71AFB258CCED3A27);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_explodes_on_high_explosion_damage(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x71B0892EC081D60A);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cargobob_exta_pickup_range(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x72BECCF4B829522E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_bike_easy_to_land(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x73561D4425A021A2);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success delete_all_trains() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x736A718577F39C7D);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_tank_stationary(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x737E398138550FFF);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_tyre_health(u32 vehicle_, i32 wheel_index_, f32 health_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x74C68EF97645E79D);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(wheel_index_);
    ctx->Push(health_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_shoot_at_target(u32 driver_, u32 entity_, f32 x_target_, f32 y_target_, f32 z_target_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x74CD9A9327A282EA);
    ctx->Reset();

    ctx->Push(driver_);
    ctx->Push(entity_);
    ctx->Push(x_target_);
    ctx->Push(y_target_);
    ctx->Push(z_target_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_taxi_light_on(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7504C0F113AB50FC);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success are_plane_propellers_intact(bool* native_return, u32 plane_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x755D6D5267CBBD7E);
    ctx->Reset();

    ctx->Push(plane_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_disable_map_collision(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x75627043C6AA90AD);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success vehicle_set_enable_normalise_ramp_car_vertical_veloctiy(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x756AE6E962168A04);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success preload_vehicle_mod(u32 vehicle_, i32 mod_type_, i32 mod_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x758F49C24925568A);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(mod_type_);
    ctx->Push(mod_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_boat_anchor(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x75DBEC174AEEAD10);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_neon_colour(i32* r_, i32* g_, i32* b_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7619EEE8C886757F);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_dont_terminate_task_when_achieved(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x76D26A22750E849E);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success fix_vehicle_window(u32 vehicle_, i32 window_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x772282EBEB95E682);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(window_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_mod(i32* native_return, u32 vehicle_, i32 mod_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x772960298DA26FDB);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(mod_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_vehicle_doors_shut(u32 vehicle_, bool close_instantly_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x781B3D62BB013EF5);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(close_instantly_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success explode_vehicle_in_cutscene(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x786A4EB67B01BF0B);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_should_reset_turret_in_scripted_cameras(u32 vehicle_, bool should_reset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x78CEEE41F49F421F);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(should_reset_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_position_offset_for_recorded_vehicle_playback(u32 vehicle_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x796A877E459B99EA);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_dirt_level(u32 vehicle_, f32 dirt_level_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x79D3B596FE44EE8B);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(dirt_level_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_extended_removal_range(u32 vehicle_, i32 range_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x79DF7E806202CE01);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(range_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success roll_down_window(u32 vehicle_, i32 window_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7AD9E6CE657D69E3);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(window_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_speed_boost_effect_disabled(bool disabled_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7BBE7FF626A591FE);
    ctx->Reset();

    ctx->Push(disabled_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_pick_up_rope_for_cargobob(u32 cargobob_, i32 state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7BEB0C7A235F6F3B);
    ctx->Reset();

    ctx->Push(cargobob_);
    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success detach_container_from_handler_frame(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7C0043FDFF6436BC);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success stop_bringing_vehicle_to_halt(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7C06330BFDDA182E);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_door_open(u32 vehicle_, i32 door_id_, bool loose_, bool open_instantly_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7C65DAC73C35C862);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(door_id_);
    ctx->Push(loose_);
    ctx->Push(open_instantly_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_number_plate_text(CStringPtr& native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7CE1CCB9B293020E);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success get_vehicle_extra_colour5(i32* color_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7D1464D472D32136);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(color_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_petrol_tank_health(f32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7D5DABE888D2D074);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_vehicle_allow_homing_missle_lockon(u32 vehicle_, bool toggle_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7D6F9A3EF26136A0);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_playback_recorded_vehicle_with_flags(u32 vehicle_, i32 recording_, const CStringPtr& script_, i32 flags_, i32 time_, i32 driving_style_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7D80FD645D4DA346);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(recording_);
    ctx->Push(script_.ptr);
    ctx->Push(flags_);
    ctx->Push(time_);
    ctx->Push(driving_style_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_extra(u32 vehicle_, i32 extra_id_, bool disable_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7EE3A3C5E4A40CC9);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(extra_id_);
    ctx->Push(disable_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_cop_vehicle_in_area3d(bool* native_return, f32 x1_, f32 x2_, f32 y1_, f32 y2_, f32 z1_, f32 z2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7EEF65D5F153E26A);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(x2_);
    ctx->Push(y1_);
    ctx->Push(y2_);
    ctx->Push(z1_);
    ctx->Push(z2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_this_model_a_car(bool* native_return, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7F6DB52EEFC96DF8);
    ctx->Reset();

    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_heli_resist_to_explosion(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8074CC1886802912);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_trailer_parent_vehicle(u32* native_return, u32 trailer_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x80D9D32636369C92);
    ctx->Reset();

    ctx->Push(trailer_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_random_trains(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x80D9F74197EA47D9);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_allow_ramming_soop_or_ramp(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x80E3357FDEF45C21);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_mod_color2(i32* paint_type_, i32* color_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x81592BE4E3878728);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(paint_type_);
    ctx->Push(color_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_mod_color2(u32 vehicle_, i32 paint_type_, i32 color_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x816562BADFDEC83E);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(paint_type_);
    ctx->Push(color_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_weapon_restricted_ammo(i32* native_return, u32 vehicle_, i32 weapon_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8181CE2F25CB9BB7);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(weapon_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success request_vehicle_asset(u32 vehicle_hash_, i32 vehicle_asset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x81A15811460FAB3A);
    ctx->Reset();

    ctx->Push(vehicle_hash_);
    ctx->Push(vehicle_asset_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_rocket_boost_active(u32 vehicle_, bool active_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x81E1552E35DC3839);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(active_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_disable_ped_stand_on_top(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8235F1BEAD557629);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_detonation_mode(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x82E0AC411E41A5B4);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_vehicle_stuck_check(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8386BFB614D06749);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_custom_secondary_colour(i32* r_, i32* g_, i32* b_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8389CD56CA8072DC);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success suppress_neons_on_vehicle(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x83F813570FF519DE);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_last_ped_in_vehicle_seat(u32* native_return, u32 vehicle_, i32 seat_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x83F969AA1EE2A664);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(seat_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_random_boats(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x84436EC293B1415F);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_toggle_mod_on(bool* native_return, u32 vehicle_, i32 mod_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x84B233A8C8FC8AE7);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(mod_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_hydraulic_suspension_raise_factor(u32 vehicle_, i32 wheel_id_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x84EA99C62CB3EF0C);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(wheel_id_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_car_high_speed_bump_severity_multiplier(f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x84FD40F56075E816);
    ctx->Reset();

    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_is_dummy(bool* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8533CAFDE1F0F336);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success roll_down_windows(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x85796B0549DDE156);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_bounds_affect_water_probes(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x85FC953F6C6CBDE1);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ignore_planes_small_pitch_change(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8664170EF165C4A6);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_weapon_can_target_objects(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x86B4B6212CB8B627);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_bobblehead_velocity(f32 x_, f32 y_, f32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x870B8B7A766615C8);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_attached_to_cargobob(u32* native_return, u32 cargobob_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x873B82D42AC2B9E5);
    ctx->Reset();

    ctx->Push(cargobob_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_pickup_rope_length_for_cargobob(u32 cargobob_, f32 length1_, f32 length2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x877C1EAEAC531023);
    ctx->Reset();

    ctx->Push(cargobob_);
    ctx->Push(length1_);
    ctx->Push(length2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_trailer_legs_lowered(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x878C75C09FBDB942);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_livery_count(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x87B63E25A529D526);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success open_bomb_bay_doors(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x87E7F24270732CB1);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_force_interiorlight(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8821196D91FA2DE5);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success unpause_playback_recorded_vehicle(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8879EE09268305D5);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_force_fix_link_matrices(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x887FA38787DE8C72);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_use_more_restrictive_spawn_checks(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x88BC673CA9E0AE99);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_mod_text_label(CStringPtr& native_return, u32 vehicle_, i32 mod_type_, i32 mod_value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8935624F8C5592CC);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(mod_type_);
    ctx->Push(mod_value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success is_handler_frame_lined_up_with_container(bool* native_return, u32 vehicle_, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x89D630CF5EA96D23);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_gravity(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x89F149B6131E57DA);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_disable_height_map_avoidance(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8AA9180DE2FEDD45);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_undriveable(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8ABA6AF54B942B95);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_vehicle_have_roof(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8AC862B0B32C5B80);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_fullbeam(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8B7FD87F0DDB421E);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_automatically_attaches(u32* native_return, u32 vehicle_, bool p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8BA6F76BC53A1493);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_vehicle_model_acceleration(f32* native_return, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8C044C5C84505B6A);
    ctx->Reset();

    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_vehicle_neon_enabled(bool* native_return, u32 vehicle_, i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8C4B92553E4766A5);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_vehicle_sprayable(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8D474C8FAEFF6CDE);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success find_spawn_coordinates_for_heli(Vector3Wrapper& native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8DC9675797123522);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success set_vehicle_neon_colour(u32 vehicle_, i32 r_, i32 g_, i32 b_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8E0A582209A62695);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_hydraulic_vehicle_state(u32 vehicle_, i32 state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8EA86DF356801C7D);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_disable_retracting_weapon_blades(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8F0D5BA1C2CC91D7);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_dirt_level(f32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8F17BC8BA08DA62B);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_vehicle_lock_on_target(bool* native_return, u32* entity_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8F5EBAB1F260CFCE);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success raise_convertible_roof(u32 vehicle_, bool instantly_raise_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8F5FB35D7E88FC70);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(instantly_raise_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_boat_sinks_when_wrecked(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8F719973E1445BA2);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_steering_bias_scalar(i32 p0_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9007A2F21DC108D4);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success detach_vehicle_from_trailer(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x90532EDF0D2BDD86);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_car_has_jump(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9078C0C5EF8C19E9);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_number_plate_text_index(u32 vehicle_, i32 plate_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9088EB5A43FFB0A1);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(plate_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_mod_modifier_value(i32* native_return, u32 vehicle_, i32 mod_type_, i32 mod_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x90A38E9838E0A8C1);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(mod_type_);
    ctx->Push(mod_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ambient_vehicle_range_multiplier_this_frame(f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x90B6DA738A9A25DA);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_is_vehicle_secondary_colour_custom(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x910A32E7AAD2656C);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_disable_vehicle_engine_fires(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x91A0BD635321F145);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_instant_fill_vehicle_population_finished(bool* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x91D6DD290888CBAB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success lower_forklift_forks(u32 forklift_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x923A293361DF44E5);
    ctx->Reset();

    ctx->Push(forklift_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_position_of_vehicle_recording_id_at_time(Vector3Wrapper& native_return, i32 id_, f32 time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x92523B76657A517D);
    ctx->Reset();

    ctx->Push(id_);
    ctx->Push(time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success get_number_of_vehicle_doors(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x92922A607497B14D);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_vehicle_brake_lights(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x92B35082E0B42F66);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_vehicle_mod(u32 vehicle_, i32 mod_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x92D619E420858204);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(mod_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_has_strong_axles(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x92F0CF722BC4202F);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success modify_vehicle_top_speed(u32 vehicle_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x93A3996368C94158);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_lod_multiplier(u32 vehicle_, f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x93AE6A61BE015BF1);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_door_shut(u32 vehicle_, i32 door_id_, bool close_instantly_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x93D9BD300D7789E5);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(door_id_);
    ctx->Push(close_instantly_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success skip_time_in_playback_recorded_vehicle(u32 vehicle_, f32 time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9438F7AD68771A20);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_heli_can_pickup_entity_that_has_pick_up_disabled(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x94A68DA412C4007D);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_this_model_a_jetski(bool* native_return, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9537097412CF75FE);
    ctx->Reset();

    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_deformation_fixed(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x953DA1E1B12C0491);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_vehicle_exist_with_decorator(u32* native_return, const CStringPtr& decorator_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x956B409B984D9BF7);
    ctx->Reset();

    ctx->Push(decorator_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_vehicle_number_plate_text(u32 vehicle_, const CStringPtr& plate_text_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x95A88F0B409CDA47);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(plate_text_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_trailer_legs_raised(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x95CF53B3D687F9FA);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_damage_scales(u32 vehicle_, i32 p1_, i32 p2_, i32 p3_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9640E30A7F395E4B);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_doors_locked_for_non_script_players(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9737A37136F07E75);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_pick_up_rope_for_cargobob(u32 cargobob_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9768CF648F54C804);
    ctx->Reset();

    ctx->Push(cargobob_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_disable_automatic_crash_task(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x97841634EF7DF1D6);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_force_hd_vehicle(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x97CE68CB032583F0);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_engine_can_degrade(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x983765856F2564F9);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_causes_swerving(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9849DE24FCF23CCC);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_vehicle_have_searchlight(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x99015ED7DBEA5113);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_entity_attached_to_cargobob(u32* native_return, i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x99093F60746708CA);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_vehicle_shunt_on_stick(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x99A05839C46CE316);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_vehicle_phone_explosive_device(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x99AD4CCCB128CBC9);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_kers_allowed(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x99C82F8A139F3E4E);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_sub_throttle_for_time(u32 vehicle_, f32 p1_, f32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x99CAD8E7AFDB60FA);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cargobob_pickup_magnet_active(u32 cargobob_, bool is_active_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9A665550F8DA349B);
    ctx->Reset();

    ctx->Push(cargobob_);
    ctx->Push(is_active_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_generator_area_of_interest(f32 x_, f32 y_, f32 z_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9A75585FB2E54FAD);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success have_vehicle_mods_streamed_in(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9A83F5F9963775EF);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_flight_nozzle_position_immediate(u32 vehicle_, f32 angle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9AA47FFF660CB932);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(angle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_landing_gear_state(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9B0F3DCA3DB0F4CD);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_all_vehicles(i32* native_return, void* vehs_struct_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9B8E1BF04B51F2E8);
    ctx->Reset();

    ctx->Push(vehs_struct_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_vehicle_countermeasure_ammo(u32 vehicle_, i32 counter_measure_count_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9BDA23BF666F0855);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(counter_measure_count_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cargobob_pickup_magnet_set_ambient_mode(u32 vehicle_, bool p1_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9BDDC73CC6A115D4);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_act_as_if_has_siren_on(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9BECD4B9FEF3F8A6);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_vehicle_horn(u32 vehicle_, i32 duration_, u32 mode_, bool forever_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9C8C6504B5B63D2C);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(duration_);
    ctx->Push(mode_);
    ctx->Push(forever_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_plate_type(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9CCC9525BF2408E0);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_bike_on_stand(u32 vehicle_, f32 x_, f32 y_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9CFA4896C3A53CBB);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(x_);
    ctx->Push(y_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_num_vehicle_window_tints(i32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D1224004B3A6707);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success vehicle_set_jet_wash_force_enabled(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D30687C57BAA0BB);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_in_car_mod_shop(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9D44FCCE98450843);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_script_vehicle_generator(i32* native_return, f32 x_, f32 y_, f32 z_, f32 heading_, f32 p4_, f32 p5_, u32 model_hash_, i32 p7_, i32 p8_, i32 p9_, i32 p10_, bool p11_, bool p12_, bool p13_, bool p14_, bool p15_, i32 p16_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9DEF883114668116);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(heading_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(model_hash_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);
    ctx->Push(p10_);
    ctx->Push(p11_);
    ctx->Push(p12_);
    ctx->Push(p13_);
    ctx->Push(p14_);
    ctx->Push(p15_);
    ctx->Push(p16_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success smash_vehicle_window(u32 vehicle_, i32 window_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9E5B5E4D2CCD2259);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(window_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_big_vehicle(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9F243D3919F442FE);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_blip_throttle_randomly(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9F3F689B814F2599);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_in_vehicle_clipset_hash_for_seat(u32* native_return, u32 vehicle_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA01BC64DD4BFBBAC);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success is_this_model_a_plane(bool* native_return, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA0948AB42D7BA0DE);
    ctx->Reset();

    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_vehicle_max_traction(f32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA132FB5370554DB0);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_heli_blades_full_speed(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA178472EBB8AE60D);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cargobob_pickup_magnet_falloff(u32 cargobob_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA17BAD153B51547E);
    ctx->Reset();

    ctx->Push(cargobob_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_colours(i32* color_primary_, i32* color_secondary_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA19435F193E081AC);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(color_primary_);
    ctx->Push(color_secondary_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_this_model_an_amphibious_quadbike(bool* native_return, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA1A9FC1C76A6730D);
    ctx->Reset();

    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_damage(u32 vehicle_, f32 x_offset_, f32 y_offset_, f32 z_offset_, f32 damage_, f32 radius_, bool focus_on_model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA1DD317EA8FD4F29);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(x_offset_);
    ctx->Push(y_offset_);
    ctx->Push(z_offset_);
    ctx->Push(damage_);
    ctx->Push(radius_);
    ctx->Push(focus_on_model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success attach_entity_to_cargobob(i32 p0_, i32 p1_, i32 p2_, i32 p3_, i32 p4_, i32 p5_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA1DD82F3CCF9A01E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_is_vehicle_shunting(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA2459F72C14E2E8D);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_fleeing_vehicles_use_switched_off_nodes(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA247F9EF01D8082E);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_doors_locked_for_all_players(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA2F80B8D040727CC);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_wheels_can_break_off_when_blow_up(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA37B9A517B133349);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_ceiling_height(u32 vehicle_, f32 height_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA46413066687A328);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(height_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success generate_vehicle_creation_pos_from_paths(bool* native_return, Vector3Wrapper& out_vec_, Vector3Wrapper& out_vec1_, i32 p1_, i32 p3_, i32 p4_, i32 p5_, i32 p6_, i32 p7_, i32 p8_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA4822F1CF23F4810);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    alt::INative::Vector3 alt_out_vec_ { out_vec_.x, 0, out_vec_.y, 0, out_vec_.z };
ctx->Push(&alt_out_vec_);

    alt::INative::Vector3 alt_out_vec1_ { out_vec1_.x, 0, out_vec1_.y, 0, out_vec1_.z };
ctx->Push(&alt_out_vec1_);


    Success result = native->Invoke(ctx);
    if (result) {
        out_vec_.x = alt_out_vec_.x;
out_vec_.y = alt_out_vec_.y;
out_vec_.z = alt_out_vec_.z;

    out_vec1_.x = alt_out_vec1_.x;
out_vec1_.y = alt_out_vec1_.y;
out_vec1_.z = alt_out_vec1_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success network_cap_empty_crowding_vehicles_removal(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA4A9A4C40E615885);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_playback_to_use_ai(u32 vehicle_, i32 driving_style_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA549C3B37EA28131);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(driving_style_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_num_mod_colors(i32* native_return, i32 paint_type_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA551BE18C11A476D);
    ctx->Reset();

    ctx->Push(paint_type_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_vehicle_door_latched(u32 vehicle_, i32 door_id_, bool p2_, bool p3_, bool p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA5A9653A8D2CAF48);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(door_id_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_livery2(u32 vehicle_, i32 livery_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA6D3A8750DC73270);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(livery_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_vehicle_high_detail_model(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA6E9FDCB2C76785E);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_vehicle_window(u32 vehicle_, i32 window_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA711568EEDB43069);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(window_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success vehicle_set_parachute_model_tint_index(u32 vehicle_, i32 texture_variation_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA74AD2439468C883);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(texture_variation_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_in_submarine_mode(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA77DC70BD689A1E5);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_vehicle_max_number_of_passengers(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA7C4F2C6E744A550);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_can_adjust_ground_clearance(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA7DCDF4DED40A8F4);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_is_right_vehicle_headlight_damaged(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA7ECB73355EB2F20);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_vehicle_enveff_scale(f32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA82819CAC9C4C403);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_vehicle_can_deploy_parachute(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA916396DF4154EE3);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_vehicle_visible(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA0A52D24FB98293);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_train_speed(u32 train_, f32 speed_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA0BC91BE0B796E3);
    ctx->Reset();

    ctx->Push(train_);
    ctx->Push(speed_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_vehicle_phone_explosive_device() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA3F739ABDDCF21F);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_dip_straight_down_when_crashing_plane(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA653AE61924B0A0);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_not_stealable_ambiently(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAB04325045427AAE);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_goon_boss_vehicle(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAB31EF4DE6800CE9);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_forward_speed(u32 vehicle_, f32 speed_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAB54A438726D25D5);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(speed_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success skip_to_end_and_stop_playback_recorded_vehicle(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAB8E2EDA0C0A5883);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_this_model_a_train(bool* native_return, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAB935175B22E822B);
    ctx->Reset();

    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_heli_tail_boom_health(f32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAC51915D27E4A5F7);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success remove_vehicle_asset(i32 vehicle_asset_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xACE699C71AB9DEB5);
    ctx->Reset();

    ctx->Push(vehicle_asset_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_last_driven_vehicle(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xACFB2463CC22BED2);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_plane_turbulence_multiplier(u32 vehicle_, f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAD2D28A1AFDFF131);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_mission_train(bool* native_return, u32 train_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAD464F2E18836BFC);
    ctx->Reset();

    ctx->Push(train_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_vehicle_max_braking(f32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAD7E85FC227197C4);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success detach_vehicle_from_any_cargobob(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xADF7BE450512C12F);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_is_vehicle_engine_running(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAE31E7DF9B5B132E);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success hide_tombstone(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAE71FB656C600587);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_heli_tail_rotor_health(f32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAE8CE82A4219AC8C);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success is_playback_using_ai_going_on_for_vehicle(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAEA8FD591FAD4106);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success are_folding_wings_deployed(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAEF12960FA943792);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success detach_entity_from_cargobob(bool* native_return, u32 cargobob_, u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAF03011701811146);
    ctx->Reset();

    ctx->Push(cargobob_);
    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success create_vehicle(u32* native_return, u32 model_hash_, f32 x_, f32 y_, f32 z_, f32 heading_, bool is_network_, bool b_script_host_veh_, bool p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAF35D0D2583051B0);
    ctx->Reset();

    ctx->Push(model_hash_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(heading_);
    ctx->Push(is_network_);
    ctx->Push(b_script_host_veh_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success request_vehicle_recording(i32 recording_, const CStringPtr& script_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAF514CABE74CBF15);
    ctx->Reset();

    ctx->Push(recording_);
    ctx->Push(script_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_disable_collision_upon_creation(u32 vehicle_, bool disable_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAF60E6A2936F982A);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(disable_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_force_afterburner(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB055A34527CB8FD7);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_disable_superdummy(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB088E9A47AE6EDD5);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_exclusive_driver_of_vehicle(bool* native_return, i32* out_index_, u32 ped_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB09D25E77C33EB3F);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(vehicle_);
    ctx->Push(out_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_boat_anchored(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB0AD1238A709B1A2);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_vehicle_on_all_wheels(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB104CD1BABF302E2);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_display_name_from_vehicle_model(CStringPtr& native_return, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB215AAC32D25D019);
    ctx->Reset();

    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success set_deploy_folding_wings(u32 vehicle_, bool deploy_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB251E0B33E58B424);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(deploy_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success allow_ambient_vehicles_to_avoid_adverse_conditions(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB264C4D2F2B0A78B);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_force_low_lod_anchor_mode(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB28B1FE5BFADD7F5);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_last_driven_vehicle(u32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB2D06FAEDE65B577);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_clear_freeze_waiting_on_collision_once_player_enters(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB2E0C0D6922D31F2);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_light_multiplier(u32 vehicle_, f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB385454F8791F57C);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_mod_variation(i32* native_return, u32 vehicle_, i32 mod_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB3924ECD70E095DC);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(mod_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_random_vehicle_density_multiplier_this_frame(f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB3B3359379FE77D3);
    ctx->Reset();

    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_wheel_type(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB3ED1BFB4BE636DC);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_vehicle_mod_color1_name(CStringPtr& native_return, u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB45085B721EFD38C);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success is_vehicle_stuck_on_roof(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB497F06B288DCFDF);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_livery_name(CStringPtr& native_return, u32 vehicle_, i32 livery_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB4C7A93837C91A1F);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(livery_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success get_random_vehicle_back_bumper_in_sphere(u32* native_return, f32 p0_, f32 p1_, f32 p2_, f32 p3_, i32 p4_, i32 p5_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB50807EABE20A8DC);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success is_this_model_a_bike(bool* native_return, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB50C0B0CEDC6CE84);
    ctx->Reset();

    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_cheat_power_increase(u32 vehicle_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB59E4BD37AE292DB);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_tyre_smoke_color(u32 vehicle_, i32 r_, i32 g_, i32 b_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB5BA80F839791C0F);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_exclusive_driver(u32 vehicle_, u32 ped_, i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB5C51B5502E85E83);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(ped_);
    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_siren_audio_on(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB5CC40FBCB586380);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_indicator_lights(u32 vehicle_, i32 turn_signal_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB5D45264751B7DF0);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(turn_signal_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_tyre_smoke_color(i32* r_, i32* g_, i32* b_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB635392A4938B3C3);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_custom_primary_colour(i32* r_, i32* g_, i32* b_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB64CF2CCA9D95F52);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_doors_locked(u32 vehicle_, i32 door_lock_status_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB664292EAECF7FA6);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(door_lock_status_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_use_desired_z_cruise_speed_for_landing(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB68CFAF83A02768D);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success add_vehicle_upsidedown_check(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB72E26D81006005B);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_extra_colour6(i32* color_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB7635E80A5C31BFF);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(color_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_body_health(u32 vehicle_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB77D05AC8C78AADB);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_doors_locked_for_team(u32 vehicle_, i32 team_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB81F6D4A8F5EEBA8);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(team_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_task_vehicle_goto_plane_min_height_above_terrain(u32 plane_, i32 height_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB893215D8D4C015B);
    ctx->Reset();

    ctx->Push(plane_);
    ctx->Push(height_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_door_damaged(bool* native_return, u32 veh_, i32 door_i_d_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB8E181E559464527);
    ctx->Reset();

    ctx->Push(veh_);
    ctx->Push(door_i_d_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_vehicle_health_percentage(f32* native_return, u32 vehicle_, f32 max_engine_health_, f32 max_petrol_tank_health_, f32 max_body_health_, f32 max_main_rotor_health_, f32 max_tail_rotor_health_, f32 max_unk_health_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB8EF61207C2393A9);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(max_engine_health_);
    ctx->Push(max_petrol_tank_health_);
    ctx->Push(max_body_health_);
    ctx->Push(max_main_rotor_health_);
    ctx->Push(max_tail_rotor_health_);
    ctx->Push(max_unk_health_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_vehicle_keep_engine_on_when_abandoned(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB8FBC8B1330CA9B4);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success start_vehicle_alarm(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB8FF7AB45305C345);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_lights_state(bool* native_return, bool* lights_on_, bool* highbeams_on_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB91B4C20085BD12F);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(lights_on_);
    ctx->Push(highbeams_on_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_neon_index_colour(u32 vehicle_, i32 index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB93B2867F7B479D1);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_carjack_mission_removal_parameters(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB9562064627FF9DB);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_tyre_burst(bool* native_return, u32 vehicle_, i32 wheel_i_d_, bool completely_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA291848A0815CA9);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(wheel_i_d_);
    ctx->Push(completely_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success explode_vehicle(u32 vehicle_, bool is_audible_, bool is_invisible_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA71116ADF5B514C);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(is_audible_);
    ctx->Push(is_invisible_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_is_boat_capsized(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA91D045575699AD);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_max_speed(u32 vehicle_, f32 speed_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBAA045B4E42F3C06);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(speed_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_uses_mp_player_damage_multiplier(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBB2333BB87DDD87F);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_in_vehicle_seat(u32* native_return, u32 vehicle_, i32 seat_index_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBB40DD2270B65366);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(seat_index_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_mission_train_as_no_longer_needed(u32* train_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBBE7648349B49BE8);
    ctx->Reset();

    ctx->Push(p1_);
    ctx->Push(train_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_interiorlight(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBC2042F090AF6AD3);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_lights_cutoff_distance_tweak(f32 distance_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBC3CCA5844452B06);
    ctx->Reset();

    ctx->Push(distance_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_heli_part_broken(bool* native_return, u32 vehicle_, bool p1_, bool p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBC74B4BE25EB6C8A);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_vehicle_has_parachute(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBC9CFF381338CB4F);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_cargobob_pickup_magnet_strength(u32 cargobob_, f32 strength_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBCBFCD9D1DAC19E2);
    ctx->Reset();

    ctx->Push(cargobob_);
    ctx->Push(strength_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_does_vehicle_have_damage_decals(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBCDC5017D3CE1E9E);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_players_last_vehicle(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBCDF8BAF56C87B6A);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_boat_wrecked(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBD32E46AA95C1DD2);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success transform_to_submarine(bool* native_return, u32 vehicle_, bool no_animation_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBE4C854FFDB6EEBE);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(no_animation_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_will_force_other_vehicles_to_stop(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBE5C1255A1830FF5);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_individual_doors_locked(u32 vehicle_, i32 door_id_, i32 door_lock_status_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBE70724027F85BCD);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(door_id_);
    ctx->Push(door_lock_status_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_this_model_a_bicycle(bool* native_return, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBF94DD42F63BDED2);
    ctx->Reset();

    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_vehicle_model_max_braking_max_mods(f32* native_return, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBFBA3BA79CFF7EBF);
    ctx->Reset();

    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_vehicle_name_debug(u32 vehicle_, const CStringPtr& name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBFDF984E2C22B94F);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entry_point_position(Vector3Wrapper& native_return, u32 vehicle_, i32 door_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC0572928C0ABFDA3);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(door_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success set_pickup_rope_length_without_creating_rope_for_cargobob(i32 p0_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC0ED6438E6D39BA8);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_searchlight_on(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC0F97FCE55094987);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_all_vehicle_generators_active_in_area(f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, bool toggle_, bool p7_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC12321827687FE4D);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(toggle_);
    ctx->Push(p7_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success swing_boat_boom_freely(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC1F981A6F74F0C23);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_hydraulic_wheel_state(u32 vehicle_, i32 wheel_id_, i32 state_, f32 value_, i32 p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC24075310A8B9CD1);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(wheel_id_);
    ctx->Push(state_);
    ctx->Push(value_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success detach_vehicle_from_tow_truck(u32 tow_truck_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC2DB6B6708350ED8);
    ctx->Reset();

    ctx->Push(tow_truck_);
    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_broken_parts_dont_affect_ai_handling(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC361AA040D6637A8);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_use_player_light_settings(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC45C27EF50F36ADC);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_engine_health(f32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC45D23BAF168AAB8);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_vehicle_remove_aggressive_carjack_mission(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC4B3347BD68BD609);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_limit_speed_when_player_inactive(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC50CE861B55EAB8B);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_vehicle_upsidedown_check(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC53EB42A499A7E90);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_random_vehicle_front_bumper_in_sphere(u32* native_return, f32 p0_, f32 p1_, f32 p2_, f32 p3_, i32 p4_, i32 p5_, i32 p6_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC5574E0AEB86BA68);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_submarine_crush_depths(u32 vehicle_, bool p1_, f32 depth1_, f32 depth2_, f32 depth3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC59872A5134879C7);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);
    ctx->Push(depth1_);
    ctx->Push(depth2_);
    ctx->Push(depth3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_turret_hidden(u32 vehicle_, i32 index_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC60060EB0D8AC7B1);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(index_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success force_submarine_neurtal_buoyancy(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC67DB108A9ADE3BE);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_being_brought_to_halt(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC69BB1D832A710EF);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_flying_vehicle_model_agility(f32* native_return, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC6AD107DDC9054CC);
    ctx->Reset();

    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_override_nitrous_level(u32 vehicle_, bool toggle_, f32 level_, f32 power_, f32 recharge_time_, bool disable_sound_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC8E9B6B71B8E660D);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);
    ctx->Push(level_);
    ctx->Push(power_);
    ctx->Push(recharge_time_);
    ctx->Push(disable_sound_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_tyre_maximum_grip_difference_due_to_wear_rate(u32 vehicle_, i32 wheel_index_, f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC970D0E0FC31D768);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(wheel_index_);
    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_individual_door_lock_status(i32* native_return, u32 vehicle_, i32 door_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCA4AC3EAAE46EC7B);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(door_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_number_of_parked_vehicles(i32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCAA15F13EBD417FF);
    ctx->Reset();

    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_uses_large_rear_ramp(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCAC66558B944DA67);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_attached_pick_up_hook_position(Vector3Wrapper& native_return, u32 cargobob_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCBDB9B923CACC92D);
    ctx->Reset();

    ctx->Push(cargobob_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success set_vehicle_alarm(u32 vehicle_, bool state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCDE5E70C1DDB954C);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_disable_vertical_flight_mode_transition(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCE2B43770B655F8F);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_in_garage_area(bool* native_return, const CStringPtr& garage_name_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCEE4490CD57BB3C2);
    ctx->Reset();

    ctx->Push(garage_name_.ptr);
    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_cargobob_pickup_rope_damping_multiplier(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCF1182F682F65307);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_ready_for_cleanup(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCF9159024555488C);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success control_landing_gear(u32 vehicle_, i32 state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCFC8BE9A5E1FE575);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success lock_doors_when_no_longer_needed(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCFD778E7904C255E);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_are_bomb_bay_doors_open(bool* native_return, u32 aircraft_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD0917A423314BBA8);
    ctx->Reset();

    ctx->Push(aircraft_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success detach_vehicle_from_any_tow_truck(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD0E9CE05A1E68CD8);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_special_flight_mode_ratio(u32 vehicle_, f32 ratio_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD138FA15C9776837);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(ratio_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_position_of_vehicle_recording_at_time(Vector3Wrapper& native_return, i32 recording_, f32 time_, const CStringPtr& script_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD242728AA6F0FBA2);
    ctx->Reset();

    ctx->Push(recording_);
    ctx->Push(time_);
    ctx->Push(script_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success is_vehicle_extra_turned_on(bool* native_return, u32 vehicle_, i32 extra_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD2E6822DBFD6C8BD);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(extra_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_avoid_player_vehicle_riot_van_mission(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD3301660A57C9272);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success vehicle_set_override_side_ratio(i32* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD3E51C0AB8C26EEE);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_vehicle_attached_to_cargobob(bool* native_return, u32 cargobob_, u32 vehicle_attached_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD40148F22E81A1D9);
    ctx->Reset();

    ctx->Push(cargobob_);
    ctx->Push(vehicle_attached_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_disable_damage_with_picked_up_entity(bool* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD4196117AF7BB974);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_disable_random_trains_this_frame(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD4B8E3D1917BC86B);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_is_mercenary(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD4C4642CB7F50B5D);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_door_broken(u32 vehicle_, i32 door_id_, bool delete_door_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD4D4F6A4AB575A33);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(door_id_);
    ctx->Push(delete_door_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_explodes_on_explosion_damage_at_zero_body_health(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD565F438137F0E10);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_vehicle_stuck_timer(u32 vehicle_, i32 null_attributes_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD7591B0065AFAA7A);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(null_attributes_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_has_muted_sirens(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD8050E0EB60CF274);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_script_vehicle_generator(i32 vehicle_generator_, bool enabled_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD9D620E0AC6DC4B0);
    ctx->Reset();

    ctx->Push(vehicle_generator_);
    ctx->Push(enabled_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_random_boats_mp(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDA5E12F728DB30CA);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_flight_nozzle_position(f32* native_return, u32 plane_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDA62027C8BDB326E);
    ctx->Reset();

    ctx->Push(plane_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success request_vehicle_dial(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDBA3C090E3D74690);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_dont_allow_player_to_enter_vehicle_if_locked_for_player(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDBC631F109350B8C);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_class_max_traction(f32* native_return, i32 vehicle_class_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDBC86D85C5059461);
    ctx->Reset();

    ctx->Push(vehicle_class_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_vehicle_model_max_braking(f32* native_return, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDC53FD41B4ED944C);
    ctx->Reset();

    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_has_retractable_wheels(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDCA174A42133F08C);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_this_model_a_heli(bool* native_return, u32 model_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDCE4334788AF94EA);
    ctx->Reset();

    ctx->Push(model_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_steer_for_buildings(u32 vehicle_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDCE97BDF8A0EABC8);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success lower_convertible_roof(u32 vehicle_, bool instantly_lower_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDED51F703D0FA83D);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(instantly_lower_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_class_from_name(i32* native_return, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDEDF1C8BD47C2200);
    ctx->Reset();

    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_vehicle_size(Vector3Wrapper& out1_, Vector3Wrapper& out2_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDF7E3EEB29642C38);
    ctx->Reset();

    ctx->Push(vehicle_);
    alt::INative::Vector3 alt_out1_ { out1_.x, 0, out1_.y, 0, out1_.z };
ctx->Push(&alt_out1_);

    alt::INative::Vector3 alt_out2_ { out2_.x, 0, out2_.y, 0, out2_.z };
ctx->Push(&alt_out2_);


    Success result = native->Invoke(ctx);
    if (result) {
        out1_.x = alt_out1_.x;
out1_.y = alt_out1_.y;
out1_.z = alt_out1_.z;

    out2_.x = alt_out2_.x;
out2_.y = alt_out2_.y;
out2_.z = alt_out2_.z;

        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_active_during_playback(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDFFCEF48E511DB48);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_script_rocket_boost_recharge_time(u32 vehicle_, f32 seconds_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE00F2AB100B76E89);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(seconds_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_last_driven_vehicle() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE01903C47C7AC89E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_use_cutscene_wheel_compression(bool* native_return, u32 p0_, bool p1_, bool p2_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE023E8AC4EF7C117);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_used_for_pilot_school(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE05DD0E9707003A3);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_plane_resist_to_explosion(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE16142B94664DEFD);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_formation_leader() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE2F53F172B45EDE1);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cargobob_pickup_magnet_set_targeted_mode(u32 vehicle_, u32 cargobob_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE301BD63E9E13CF0);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(cargobob_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_vehicle_combat_avoidance_area(i32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE30524E1871F481D);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_turret_seat(bool* native_return, u32 vehicle_, i32 seat_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE33FFA906CE74880);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(seat_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success pop_off_vehicle_roof_with_impulse(u32 vehicle_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE38CB9D7D39FDBCC);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_num_vehicle_mods(i32* native_return, u32 vehicle_, i32 mod_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE38E9162A2500646);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(mod_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_boat_remains_anchored_while_player_is_driver(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE3EBAAE484798530);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_xenon_light_color_index(u32 vehicle_, i32 color_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE41033B25D003A07);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(color_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_has_landing_gear(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE43701C36CAFF1A4);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success copy_vehicle_damages(u32 source_vehicle_, u32 target_vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE44A982368A4AF23);
    ctx->Reset();

    ctx->Push(source_vehicle_);
    ctx->Push(target_vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_cause_of_destruction(u32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE495D1EF4C91FD20);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_heli_main_rotor_health(f32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE4CB7541F413D2C5);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_vehicle_brake(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE4E2FD323574965C);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_aircraft_pilot_skill_noise_scalar(u32 vehicle_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE5810AC70602F2F5);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_disable_turret_movement(u32 vehicle_, i32 turret_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE615BB7A7752C76A);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(turret_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_homing_lockon_state(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE6B0E8CFC3633BF0);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_enable_vehicle_slipstreaming(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE6C0C80B8C867537);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_heli_turbulence_scalar(u32 vehicle_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE6F13851780394DA);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_vehicle_attached_to_trailer(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE7CF3C4F9F489F0C);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_boat_low_lod_anchor_distance(u32 vehicle_, f32 value_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE842A9398079BD82);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(value_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_may_be_used_by_goto_point_any_means(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE851E480B814D4BA);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_has_vehicle_been_hit_by_shunt(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE8718FAF591FD224);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_vehicle_mod_color1(i32* paint_type_, i32* color_, i32* pearlescent_color_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE8D65CA700C9A693);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(paint_type_);
    ctx->Push(color_);
    ctx->Push(pearlescent_color_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_bomb_ammo(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEA12BD130D7569A1);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success delete_vehicle(u32* vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEA386986E786A54F);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_parked_vehicle_density_multiplier_this_frame(f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEAE6DCC7EEE3DB1D);
    ctx->Reset();

    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_tyres_can_burst(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEB9DC3C7D8596C46);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success network_use_high_precision_train_blending(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEC0C1D4922AF9754);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_both_vehicle_headlights_damaged(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEC69ADF931AAE0C3);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_vehicle_tyre_burst(u32 vehicle_, i32 index_, bool on_rim_, f32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEC6A202EE4960385);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(index_);
    ctx->Push(on_rim_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_boat_ignore_land_probes(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xED5EDE9E676643C9);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_cargobob_pickup_magnet_pull_strength(u32 cargobob_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xED8286F71A819BAA);
    ctx->Reset();

    ctx->Push(cargobob_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_disable_heli_explode_from_body_damage(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEDBC8405B3895CC9);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_colours_which_can_be_set(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEEBFC7A7EFDC35B4);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success detonate_vehicle_phone_explosive_device() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEF49CF0270307CBE);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_check_for_enough_room_for_ped(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEF9D388F8D377F44);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_script_ramp_impulse_scale(u32 vehicle_, f32 impulse_scale_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEFC13B1CE30D755D);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(impulse_scale_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_entity_attached_to_tow_truck(u32* native_return, u32 tow_truck_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEFEA18DCF10F8F75);
    ctx->Reset();

    ctx->Push(tow_truck_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_vehicle_slipstreaming_should_time_out(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF051D9BFB6BA39C0);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_use_higher_car_jump(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF06A16CA55D138D8);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_is_vehicle_primary_colour_custom(bool* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF095C0405307B21B);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success disable_vehcile_dynamic_ambient_scales(u32 vehicle_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF0E4BA16D1DB546C);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_rotation_of_vehicle_recording_id_at_time(Vector3Wrapper& native_return, i32 id_, f32 time_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF0F2103EFAF8CBA7);
    ctx->Reset();

    ctx->Push(id_);
    ctx->Push(time_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        alt::INative::Vector3 alt_native_return = ctx->ResultVector3();
native_return.x = alt_native_return.x;
native_return.y = alt_native_return.y;
native_return.z = alt_native_return.z;

    }
    return result;
}
Success remove_vehicle_recording(i32 recording_, const CStringPtr& script_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF1160ACCF98A3FC8);
    ctx->Reset();

    ctx->Push(recording_);
    ctx->Push(script_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_number_plate_text_index(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF11BC2DD9A3E7195);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_special_flight_mode_allowed(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF1211889DF15A763);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_out_of_control(u32 vehicle_, bool kill_driver_, bool explode_on_impact_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF19D095E42D430CC);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(kill_driver_);
    ctx->Push(explode_on_impact_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_vehicle_explosion_break_off_parts() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF25E02CB9C5818F8);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_body_health(f32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF271147EB7B40F12);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_vehicle_door_control(u32 vehicle_, i32 door_id_, i32 speed_, f32 angle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF2BFA0430F0A0FCB);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(door_id_);
    ctx->Push(speed_);
    ctx->Push(angle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_convertible_roof(u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF39C4F538B5124C2);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success vehicle_set_extenable_side_target_ratio(i32* native_return, i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF3B0E0AED097A3F5);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_vehicle_color(i32* r_, i32* g_, i32* b_, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF3CC740D36221548);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(r_);
    ctx->Push(g_);
    ctx->Push(b_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_extra_colour5(u32 vehicle_, i32 color_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF40DD601A65F7F19);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(color_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_model_estimated_max_speed(f32* native_return, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF417C2502FFFED43);
    ctx->Reset();

    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success swing_boat_boom_to_ratio(u32 vehicle_, f32 ratio_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF488C566413B4232);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(ratio_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_siren(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF4924635A19EB37D);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_bomb_ammo(u32 vehicle_, i32 bomb_count_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF4B2ED59DEB5D774);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(bomb_count_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success disable_vehicle_weapon(bool disabled_, u32 weapon_hash_, u32 vehicle_, u32 owner_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF4FC6A6F67D8D856);
    ctx->Reset();

    ctx->Push(disabled_);
    ctx->Push(weapon_hash_);
    ctx->Push(vehicle_);
    ctx->Push(owner_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success does_script_vehicle_generator_exist(bool* native_return, i32 vehicle_generator_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF6086BC836400876);
    ctx->Reset();

    ctx->Push(vehicle_generator_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_wheels_extended_instantly(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF660602546D27BA8);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_doors_locked_for_player(bool* native_return, u32 vehicle_, u32 player_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF6AF6CB341349015);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(player_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_closest_vehicle(u32* native_return, f32 x_, f32 y_, f32 z_, f32 radius_, u32 model_hash_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF73EB622C4F1689B);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(model_hash_);
    ctx->Push(flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success are_plane_control_panels_intact(bool* native_return, u32 vehicle_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF78F94D60248C737);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_distant_cars_enabled(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF796359A959DF65D);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_make_name_from_vehicle_model(CStringPtr& native_return, u32 model_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF7AF4F159FF99F97);
    ctx->Reset();

    ctx->Push(model_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
Success set_vehicle_is_wanted(u32 vehicle_, bool state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF7EC25A3EBEEC726);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_seat_warp_only(bool* native_return, u32 vehicle_, i32 seat_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF7F203E31F96F6A1);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(seat_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_vehicle_countermeasure_ammo(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF846AA63DF56B804);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success enable_vehicle_dynamic_ambient_scales(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF87D9F2301F7D206);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_aircraft_ignore_hightmap_optimisation(u32 vehicle_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF8B49F5BA7F850E7);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_convertible_roof_state(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF8C397922FC03F41);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_vehicle_bulldozer_arm_position(u32 vehicle_, f32 position_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF8EBCCC96ADB9FB7);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(position_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_global_position_offset_for_recorded_vehicle_playback(u32 vehicle_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFAF2A78061FD9EF4);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_burnout(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFB8794444A7D60FB);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_vehicle_needs_to_be_hotwired(u32 vehicle_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFBA550EA44404EE6);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_mod_kit_type(i32* native_return, u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFC058F5121E54C32);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_car_boot_open(u32 vehicle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFC40CBF7B90CA77C);
    ctx->Reset();

    ctx->Push(vehicle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_heli_blades_speed(u32 vehicle_, f32 speed_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFD280B4D7F3ABC4D);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(speed_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success switch_train_track(i32 track_id_, bool state_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFD813BB7DB977F20);
    ctx->Reset();

    ctx->Push(track_id_);
    ctx->Push(state_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_heli_tail_rotor_health(u32 vehicle_, f32 health_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFE205F38AAA58E5B);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(health_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_vehicle_door_angle_ratio(f32* native_return, u32 vehicle_, i32 door_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFE3F9C29F7B32BD5);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(door_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_vehicle_tow_truck_arm_position(u32 vehicle_, f32 position_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFE54B92A344583CA);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(position_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_rocket_boost_fill(u32 vehicle_, f32 percentage_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFEB2DDED3509562E);
    ctx->Reset();

    ctx->Push(vehicle_);
    ctx->Push(percentage_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_deep_ocean_scaler(f32* native_return) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B2A2CC86778B619);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success test_vertical_probe_against_all_water(i32* native_return, f32* water_height_, f32 x_, f32 y_, f32 z_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B3451FA1E3142E2);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(flags_);
    ctx->Push(water_height_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_calmed_wave_height_scaler(f32 height_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x547237AA71AB44DE);
    ctx->Reset();

    ctx->Push(height_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success reset_deep_ocean_scaler() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5E5E99285AE812DB);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success test_probe_against_all_water(i32* native_return, f32* water_height_, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_, i32 flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8974647ED222EA5F);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    ctx->Push(flags_);
    ctx->Push(water_height_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_water_height_no_waves(bool* native_return, f32* height_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8EE6B53CE13A9794);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(height_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success remove_extra_calming_quad(i32 calming_quad_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB1252E3E59A82AAF);
    ctx->Reset();

    ctx->Push(calming_quad_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_deep_ocean_scaler(f32 intensity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB96B00E976BE977F);
    ctx->Reset();

    ctx->Push(intensity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success modify_water(f32 x_, f32 y_, f32 radius_, f32 height_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC443FD757C3BA637);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(radius_);
    ctx->Push(height_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_water_height(bool* native_return, f32* height_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF6829842C06AE524);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(height_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success add_extra_calming_quad(i32* native_return, f32 x_low_, f32 y_low_, f32 x_high_, f32 y_high_, f32 height_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFDBF4CDBC07E1706);
    ctx->Reset();

    ctx->Push(x_low_);
    ctx->Push(y_low_);
    ctx->Push(x_high_);
    ctx->Push(y_high_);
    ctx->Push(height_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success test_probe_against_water(bool* native_return, Vector3Wrapper& result_, f32 x1_, f32 y1_, f32 z1_, f32 x2_, f32 y2_, f32 z2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFFA5D878809819DB);
    ctx->Reset();

    ctx->Push(x1_);
    ctx->Push(y1_);
    ctx->Push(z1_);
    ctx->Push(x2_);
    ctx->Push(y2_);
    ctx->Push(z2_);
    alt::INative::Vector3 alt_result_ { result_.x, 0, result_.y, 0, result_.z };
ctx->Push(&alt_result_);


    Success result = native->Invoke(ctx);
    if (result) {
        result_.x = alt_result_.x;
result_.y = alt_result_.y;
result_.z = alt_result_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ammo_in_ped_weapon(i32* native_return, u32 ped_, u32 weaponhash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x015A522136D7F951);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weaponhash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_weapon_time_between_shots(f32* native_return, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x065D2AACAD8CF7A4);
    ctx->Reset();

    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_ped_current_weapon_visible(u32 ped_, bool visible_, bool deselect_weapon_, bool p3_, bool p4_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0725A4CCFDED9A70);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(visible_);
    ctx->Push(deselect_weapon_);
    ctx->Push(p3_);
    ctx->Push(p4_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_selected_ped_weapon(u32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0A6DB4965674D243);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success remove_air_defence_sphere(bool* native_return, i32 zone_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0ABF535877897560);
    ctx->Reset();

    ctx->Push(zone_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success is_ped_weapon_component_active(bool* native_return, u32 ped_, u32 weapon_hash_, u32 component_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0D78DE0572D3969E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(component_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_weapon_component_type_model(u32* native_return, u32 component_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0DB57B41EC1DB083);
    ctx->Reset();

    ctx->Push(component_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success clear_ped_last_weapon_damage(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x0E98F88A24C5F4B8);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_current_ped_vehicle_weapon(bool* native_return, u32* weapon_hash_, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1017582BCD3832DC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_weapon_animation_override(u32 ped_, u32 anim_style_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1055AC3A667F09D9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(anim_style_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_entity_been_damaged_by_weapon(bool* native_return, u32 entity_, u32 weapon_hash_, i32 weapon_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x131D401334815E94);
    ctx->Reset();

    ctx->Push(entity_);
    ctx->Push(weapon_hash_);
    ctx->Push(weapon_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_ammo(u32 ped_, u32 weapon_hash_, i32 ammo_, bool p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x14E56BC5B5DB6A19);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(ammo_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_infinite_ammo_clip(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x183DADC6AA953186);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_all_air_defence_spheres() {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1E45B34ADEBEE48E);
    ctx->Reset();

    

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_weapon_component_from_ped(u32 ped_, u32 weapon_hash_, u32 component_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x1E8BE90C74FB4C09);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(component_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_drops_inventory_weapon(u32 ped_, u32 weapon_hash_, f32 x_offset_, f32 y_offset_, f32 z_offset_, i32 ammo_count_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x208A1888007FC0E6);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(x_offset_);
    ctx->Push(y_offset_);
    ctx->Push(z_offset_);
    ctx->Push(ammo_count_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success make_ped_reload(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x20AE33F3AC9C0033);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success add_ped_ammo_by_type(u32 ped_, u32 ammo_type_hash_, i32 ammo_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2472622CE1F2D45F);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(ammo_type_hash_);
    ctx->Push(ammo_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_stun_gun_finite_ammo(i32 p0_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x24C024BA8379A70A);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_weapon_tint_index(i32* native_return, u32 ped_, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2B9EEDC07BD06B9F);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success has_ped_been_damaged_by_weapon(bool* native_return, u32 ped_, u32 weapon_hash_, i32 weapon_type_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2D343D2219CD027A);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(weapon_type_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ammo_in_clip(bool* native_return, i32* ammo_, u32 ped_, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x2E1202248937775C);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(ammo_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_weapon_damage(f32* native_return, u32 weapon_hash_, u32 component_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3133B907D8B32053);
    ctx->Reset();

    ctx->Push(weapon_hash_);
    ctx->Push(component_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success give_weapon_component_to_weapon_object(u32 weapon_object_, u32 component_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x33E179436C0B31DB);
    ctx->Reset();

    ctx->Push(weapon_object_);
    ctx->Push(component_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_weapon_asset_loaded(bool* native_return, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x36E353271F0E90EE);
    ctx->Reset();

    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_ped_ammo_by_type(i32* native_return, u32 ped_, u32 ammo_type_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x39D22031557946C1);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(ammo_type_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_current_ped_weapon(bool* native_return, u32* weapon_hash_, u32 ped_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3A87E44BB9A01D54);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p2_);
    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_current_ped_weapon_entity_index(u32* native_return, u32 ped_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3B390A939AF0B5FC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_weapon_damage_type(i32* native_return, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3BE0BB12D25FB305);
    ctx->Reset();

    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_infinite_ammo(u32 ped_, bool toggle_, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3EDCB0505123623B);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);
    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_weapontype_slot(u32* native_return, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4215460B9B8B7FA0);
    ctx->Reset();

    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success fire_air_defence_sphere_weapon_at_position(i32 zone_id_, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x44F1012B69313374);
    ctx->Reset();

    ctx->Push(zone_id_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_ped_armed(bool* native_return, u32 ped_, i32 type_flags_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x475768A975D5AD17);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(type_flags_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_weapon_damage_modifier(u32 weapon_hash_, f32 damage_multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4757F00BC6323CFE);
    ctx->Reset();

    ctx->Push(weapon_hash_);
    ctx->Push(damage_multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_drops_weapons_when_dead(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x476AE72C1D19D1A8);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_weapon_high_detail_model(u32 weapon_object_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x48164DBB970AC3F0);
    ctx->Reset();

    ctx->Push(weapon_object_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_weapon_from_ped(u32 ped_, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4899CB088EDF59B8);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_weapon_aoe_modifier(u32 weapon_hash_, f32 multiplier_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4AE5AC8B852D642C);
    ctx->Reset();

    ctx->Push(weapon_hash_);
    ctx->Push(multiplier_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_flash_light_on(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4B7620C47217126C);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_weapon_component_variant_extra_model(u32* native_return, u32 component_hash_, i32 extra_component_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4D1CB8DC40208A17);
    ctx->Reset();

    ctx->Push(component_hash_);
    ctx->Push(extra_component_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_ped_cycle_vehicle_weapons_only(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x50276EF8172F5F12);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_weapon_tint_index(u32 ped_, u32 weapon_hash_, i32 tint_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x50969B9B89ED5738);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(tint_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success request_weapon_asset(u32 weapon_hash_, i32 p1_, i32 p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5443438F033E29C3);
    ctx->Reset();

    ctx->Push(weapon_hash_);
    ctx->Push(p1_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_weapon_clip_size(i32* native_return, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x583BE370B1EC6EB4);
    ctx->Reset();

    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_max_ammo_by_type(bool* native_return, i32* ammo_, u32 ped_, u32 ammo_type_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x585847C5E4E11709);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(ammo_type_hash_);
    ctx->Push(ammo_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success does_weapon_take_weapon_component(bool* native_return, u32 weapon_hash_, u32 component_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5CEE3DF569CECAB0);
    ctx->Reset();

    ctx->Push(weapon_hash_);
    ctx->Push(component_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_weapon_object_component_tint_index(u32 weapon_object_, u32 camo_component_hash_, i32 color_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5DA825A85D0EA6E6);
    ctx->Reset();

    ctx->Push(weapon_object_);
    ctx->Push(camo_component_hash_);
    ctx->Push(color_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_weapon_tint_count(i32* native_return, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5DCF6C5CAB2E9BF7);
    ctx->Reset();

    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_ammo_by_type(u32 ped_, u32 ammo_type_hash_, i32 ammo_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5FD1E1F011E76D7E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(ammo_type_hash_);
    ctx->Push(ammo_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_weapon_component_variant_extra_count(i32* native_return, u32 component_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6558AC7C17BFEF58);
    ctx->Reset();

    ctx->Push(component_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_ped_current_weapon_silenced(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x65F0C5AE05943EC7);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success give_loadout_to_ped(u32 ped_, u32 loadout_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x68F8BE6AF5CDF8A6);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(loadout_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_drops_weapon(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6B7513D9966FBEC0);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_last_weapon_impact_coord(bool* native_return, Vector3Wrapper& coords_, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6C4D0409BA1A2BC2);
    ctx->Reset();

    ctx->Push(ped_);
    alt::INative::Vector3 alt_coords_ { coords_.x, 0, coords_.y, 0, coords_.z };
ctx->Push(&alt_coords_);


    Success result = native->Invoke(ctx);
    if (result) {
        coords_.x = alt_coords_.x;
coords_.y = alt_coords_.y;
coords_.z = alt_coords_.z;

        *native_return = ctx->ResultBool();
    }
    return result;
}
Success hide_ped_weapon_for_scripted_cutscene(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x6F6981D2253C208F);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success has_vehicle_got_projectile_attached(bool* native_return, u32 driver_, u32 vehicle_, u32 weapon_hash_, i32 p3_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x717C8481234E3B88);
    ctx->Reset();

    ctx->Push(driver_);
    ctx->Push(vehicle_);
    ctx->Push(weapon_hash_);
    ctx->Push(p3_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_current_ped_vehicle_weapon(bool* native_return, u32 ped_, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x75C55983C2C39DAA);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success has_weapon_got_weapon_component(bool* native_return, u32 weapon_, u32 component_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x76A18844E743BF91);
    ctx->Reset();

    ctx->Push(weapon_);
    ctx->Push(component_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success add_ammo_to_ped(u32 ped_, u32 weapon_hash_, i32 ammo_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x78F0424C34306220);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(ammo_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_ammo_type_from_weapon(u32* native_return, u32 ped_, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7FEAD38B326B9F74);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_max_range_of_current_ped_weapon(f32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x814C9D19DFD69679);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success set_ped_chance_of_firing_blanks(u32 ped_, f32 x_bias_, f32 y_bias_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8378627201D5497D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(x_bias_);
    ctx->Push(y_bias_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_lockon_distance_of_current_ped_weapon(f32* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x840F03E9041E2C9C);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultFloat();
    }
    return result;
}
Success get_best_ped_weapon(u32* native_return, u32 ped_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8483E98E8B888AE2);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success refill_ammo_instantly(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8C0D57EA686FAD87);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success has_ped_got_weapon(bool* native_return, u32 ped_, u32 weapon_hash_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x8DECB02F88F428BC);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success create_air_defence_sphere(i32* native_return, f32 x_, f32 y_, f32 z_, f32 radius_, f32 p4_, f32 p5_, f32 p6_, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x91EF34584710BE99);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success is_weapon_valid(bool* native_return, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x937C71165CF334B3);
    ctx->Reset();

    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success create_weapon_object(u32* native_return, u32 weapon_hash_, i32 ammo_count_, f32 x_, f32 y_, f32 z_, bool show_world_model_, f32 scale_, i32 p7_, i32 p8_, i32 p9_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9541D3CF0D398F36);
    ctx->Reset();

    ctx->Push(weapon_hash_);
    ctx->Push(ammo_count_);
    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(show_world_model_);
    ctx->Push(scale_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(p9_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success set_weapon_object_camo_index(u32 weapon_object_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x977CA98939E82E4B);
    ctx->Reset();

    ctx->Push(weapon_object_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_flash_light_active_history(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x988DB6FE9B3AC000);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success create_air_defence_angled_area(i32* native_return, f32 p0_, f32 p1_, f32 p2_, f32 p3_, f32 p4_, f32 p5_, f32 p6_, f32 p7_, f32 p8_, f32 radius_, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9DA58CDBF6BDBC08);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);
    ctx->Push(p2_);
    ctx->Push(p3_);
    ctx->Push(p4_);
    ctx->Push(p5_);
    ctx->Push(p6_);
    ctx->Push(p7_);
    ctx->Push(p8_);
    ctx->Push(radius_);
    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_weapon_component_tint_index(u32 ped_, u32 weapon_hash_, u32 camo_component_hash_, i32 color_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x9FE5633880ECD8ED);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(camo_component_hash_);
    ctx->Push(color_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_weapon_camo_index(i32* native_return, u32 ped_, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA2C9AC24B4061285);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_max_ammo_in_clip(i32* native_return, u32 ped_, u32 weapon_hash_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA38DCFFCEA8962FA);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_ped_ammo_to_drop(u32 ped_, i32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xA4EFEF9440A5B0EF);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_weapon_asset(u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAA08EF13F341C8FC);
    ctx->Reset();

    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success clear_entity_last_weapon_damage(u32 entity_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xAC678E40BE7C74D2);
    ctx->Reset();

    ctx->Push(entity_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_current_ped_weapon(u32 ped_, u32 weapon_hash_, bool b_force_in_hand_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xADF692B254977C0C);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(b_force_in_hand_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success give_weapon_object_to_ped(u32 weapon_object_, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB1FA61371AF7C4B7);
    ctx->Reset();

    ctx->Push(weapon_object_);
    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success give_delayed_weapon_to_ped(u32 ped_, u32 weapon_hash_, i32 ammo_count_, bool b_force_in_hand_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB282DC6EBD803C75);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(ammo_count_);
    ctx->Push(b_force_in_hand_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_weapon_component_hud_stats(bool* native_return, void* out_data_, u32 component_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB3CAF387AE12E9F8);
    ctx->Reset();

    ctx->Push(component_hash_);
    ctx->Push(out_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_weapon_object_component_tint_index(i32* native_return, u32 weapon_object_, u32 camo_component_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB3EA4FEABF41464B);
    ctx->Reset();

    ctx->Push(weapon_object_);
    ctx->Push(camo_component_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_can_ped_select_inventory_weapon(u32 ped_, u32 weapon_hash_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB4771B9AAF4E68E4);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_ped_shoot_ordnance_weapon(u32* native_return, u32 ped_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB4C8D77C80C0421E);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success is_ped_weapon_ready_to_shoot(bool* native_return, u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xB80CA294F2F26749);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success can_use_weapon_on_parachute(bool* native_return, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBC7BE5ABC0879F74);
    ctx->Reset();

    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success give_weapon_to_ped(u32 ped_, u32 weapon_hash_, i32 ammo_count_, bool is_hidden_, bool b_force_in_hand_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBF0FD6E56C964FCB);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(ammo_count_);
    ctx->Push(is_hidden_);
    ctx->Push(b_force_in_hand_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_weapontype_group(u32* native_return, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC3287EE3050FB74C);
    ctx->Reset();

    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success has_ped_got_weapon_component(bool* native_return, u32 ped_, u32 weapon_hash_, u32 component_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC593212475FAE340);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(component_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success enable_laser_sight_rendering(bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xC8B46D7727D864AA);
    ctx->Reset();

    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_weapon_object_from_ped(u32* native_return, u32 ped_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCAE1DC9A0E22A16D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_weapon_object_tint_index(i32* native_return, u32 weapon_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCD183314F7CD2E57);
    ctx->Reset();

    ctx->Push(weapon_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success does_air_defence_sphere_exist(bool* native_return, i32 zone_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCD79A550999D7D4F);
    ctx->Reset();

    ctx->Push(zone_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_flash_light_fade_distance(bool* native_return, f32 distance_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCEA66DAD478CD39B);
    ctx->Reset();

    ctx->Push(distance_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ped_gadget(u32 ped_, u32 gadget_hash_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD0D7B1E680ED4A1A);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(gadget_hash_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_weapon_hud_stats(bool* native_return, void* out_data_, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD92C739EE34C9EBA);
    ctx->Reset();

    ctx->Push(weapon_hash_);
    ctx->Push(out_data_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success give_weapon_component_to_ped(u32 ped_, u32 weapon_hash_, u32 component_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xD966D51AA5B28BB9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(component_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success is_air_defence_sphere_in_area(bool* native_return, i32* out_zone_id_, f32 x_, f32 y_, f32 z_, f32 radius_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDAB963831DBFD3F4);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);
    ctx->Push(radius_);
    ctx->Push(out_zone_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success get_max_ammo(bool* native_return, i32* ammo_, u32 ped_, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDC16122C7A20C933);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(ammo_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_ammo_in_clip(bool* native_return, u32 ped_, u32 weapon_hash_, i32 ammo_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xDCD2A934D65CB497);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(ammo_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success set_eqipped_weapon_start_spinning_at_full_speed(u32 ped_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE4DCEC7FD5B739A5);
    ctx->Reset();

    ctx->Push(ped_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_pickup_ammo_amount_scaler(f32 p0_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE620FD3512A04F18);
    ctx->Reset();

    ctx->Push(p0_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_weapon_effect_duration_modifier(u32 p0_, f32 p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xE6D2CEDD370FF98E);
    ctx->Reset();

    ctx->Push(p0_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_player_targettable_for_air_defence_sphere(u32 player_, i32 zone_id_, bool enable_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xECDC202B25E5CF48);
    ctx->Reset();

    ctx->Push(player_);
    ctx->Push(zone_id_);
    ctx->Push(enable_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_can_ped_select_all_weapons(u32 ped_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEFF296097FF1E509);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_ped_weapontype_in_slot(u32* native_return, u32 ped_, u32 weapon_slot_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xEFFED78E9011134D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_slot_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_ped_weapon_component_tint_index(i32* native_return, u32 ped_, u32 weapon_hash_, u32 camo_component_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF0A60040BE558F2D);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(camo_component_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success remove_all_ped_weapons(u32 ped_, bool p1_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF25DF915FA38C5F3);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(p1_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_weapontype_model(u32* native_return, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF46CDC33180FDA94);
    ctx->Reset();

    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_ped_original_ammo_type_from_weapon(u32* native_return, u32 ped_, u32 weapon_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF489B44DD5AF4BD9);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_is_ped_gadget_equipped(bool* native_return, u32 ped_, u32 gadget_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF731332072F5156C);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(gadget_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultBool();
    }
    return result;
}
Success remove_weapon_component_from_weapon_object(u32 object_, u32 component_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF7D82B0D66777611);
    ctx->Reset();

    ctx->Push(object_);
    ctx->Push(component_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success set_weapon_object_tint_index(u32 weapon_, i32 tint_index_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xF827589017D4E4A9);
    ctx->Reset();

    ctx->Push(weapon_);
    ctx->Push(tint_index_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success explode_projectiles(u32 ped_, u32 weapon_hash_, bool p2_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFC4BD125DE7611E4);
    ctx->Reset();

    ctx->Push(ped_);
    ctx->Push(weapon_hash_);
    ctx->Push(p2_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success remove_all_projectiles_of_type(u32 weapon_hash_, bool explode_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xFC52E0F37E446528);
    ctx->Reset();

    ctx->Push(weapon_hash_);
    ctx->Push(explode_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_zone_at_coords(i32* native_return, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x27040C25DE6CB2F4);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success get_zone_popschedule(i32* native_return, i32 zone_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x4334BC40AA0CB4BB);
    ctx->Reset();

    ctx->Push(zone_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success clear_popschedule_override_vehicle_model(i32 schedule_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5C0DE367AA0D911C);
    ctx->Reset();

    ctx->Push(schedule_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_zone_scumminess(i32* native_return, i32 zone_id_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5F7B268D15BA0739);
    ctx->Reset();

    ctx->Push(zone_id_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success override_popschedule_vehicle_model(i32 schedule_id_, u32 vehicle_hash_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x5F7D596BAC2E7777);
    ctx->Reset();

    ctx->Push(schedule_id_);
    ctx->Push(vehicle_hash_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_hash_of_map_area_at_coords(u32* native_return, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x7EE64D51E8498728);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultUint();
    }
    return result;
}
Success get_zone_from_name_id(i32* native_return, const CStringPtr& zone_name_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x98CD1D2934B76CC1);
    ctx->Reset();

    ctx->Push(zone_name_.ptr);

    Success result = native->Invoke(ctx);
    if (result) {
        
        *native_return = ctx->ResultInt();
    }
    return result;
}
Success set_zone_enabled(i32 zone_id_, bool toggle_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xBA5ECEEA120E5611);
    ctx->Reset();

    ctx->Push(zone_id_);
    ctx->Push(toggle_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        /* VOID native_return */
    }
    return result;
}
Success get_name_of_zone(CStringPtr& native_return, f32 x_, f32 y_, f32 z_) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0xCD90657D4C30E1CA);
    ctx->Reset();

    ctx->Push(x_);
    ctx->Push(y_);
    ctx->Push(z_);

    Success result = native->Invoke(ctx);
    if (result) {
        
        native_return.ptr = clone_c_string(ctx->ResultString());
    }
    return result;
}
}