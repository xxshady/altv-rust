#![allow(unused_mut)]
use std::cell::RefCell;
use altv_wasm_shared::natives_result::*;
use altv_sdk::ffi as sdk;
use autocxx::prelude::*;
use memory_buffer::MemoryBufferManager;

mod memory_buffer;

pub struct WasmNatives {
    pub memory_buffers: RefCell<MemoryBufferManager>,
}

impl WasmNatives {
    pub fn new() -> Self {
        Self {
            memory_buffers: RefCell::new(MemoryBufferManager::new()),
        }
    }
}

impl wasm_host::gen::imports::extra_interfaces::WasmNatives for WasmNatives {
    fn native_app_get_float(&self, property_: Option<String>) -> ResultOfAppGetFloat {
    unsafe {
        let mut native_return = Default::default();
let mut property_ = sdk_helpers::create_c_string_ptr(property_);
        let success = sdk::natives::app_get_float(
            &mut native_return,
property_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfAppGetFloat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_app_set_float(&self, property_: Option<String>,
value_: f32) -> ResultOfAppSetFloat {
    unsafe {
        let mut property_ = sdk_helpers::create_c_string_ptr(property_);
let mut value_ = value_;
        let success = sdk::natives::app_set_float(
            property_.as_ref().unwrap(),
value_,
        );
        
        
        ResultOfAppSetFloat {
            success,
            ret: (),
            
        }
    }
}

    fn native_app_set_block(&self, block_name_: Option<String>) -> ResultOfAppSetBlock {
    unsafe {
        let mut block_name_ = sdk_helpers::create_c_string_ptr(block_name_);
        let success = sdk::natives::app_set_block(
            block_name_.as_ref().unwrap(),
        );
        
        
        ResultOfAppSetBlock {
            success,
            ret: (),
            
        }
    }
}

    fn native_app_set_string(&self, property_: Option<String>,
value_: Option<String>) -> ResultOfAppSetString {
    unsafe {
        let mut property_ = sdk_helpers::create_c_string_ptr(property_);
let mut value_ = sdk_helpers::create_c_string_ptr(value_);
        let success = sdk::natives::app_set_string(
            property_.as_ref().unwrap(),
value_.as_ref().unwrap(),
        );
        
        
        ResultOfAppSetString {
            success,
            ret: (),
            
        }
    }
}

    fn native_app_delete_app_data(&self, app_name_: Option<String>) -> ResultOfAppDeleteAppData {
    unsafe {
        let mut native_return = Default::default();
let mut app_name_ = sdk_helpers::create_c_string_ptr(app_name_);
        let success = sdk::natives::app_delete_app_data(
            &mut native_return,
app_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfAppDeleteAppData {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_app_clear_block(&self, ) -> ResultOfAppClearBlock {
    unsafe {
        
        let success = sdk::natives::app_clear_block(
            
        );
        
        
        ResultOfAppClearBlock {
            success,
            ret: (),
            
        }
    }
}

    fn native_app_set_int(&self, property_: Option<String>,
value_: i32) -> ResultOfAppSetInt {
    unsafe {
        let mut property_ = sdk_helpers::create_c_string_ptr(property_);
let mut value_ = value_;
        let success = sdk::natives::app_set_int(
            property_.as_ref().unwrap(),
value_,
        );
        
        
        ResultOfAppSetInt {
            success,
            ret: (),
            
        }
    }
}

    fn native_app_has_linked_social_club_account(&self, ) -> ResultOfAppHasLinkedSocialClubAccount {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::app_has_linked_social_club_account(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfAppHasLinkedSocialClubAccount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_app_get_string(&self, property_: Option<String>) -> ResultOfAppGetString {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut property_ = sdk_helpers::create_c_string_ptr(property_);
        let success = sdk::natives::app_get_string(
            native_return.pin_mut(),
property_.as_ref().unwrap(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfAppGetString {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_app_data_valid(&self, ) -> ResultOfAppDataValid {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::app_data_valid(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfAppDataValid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_app_save_data(&self, ) -> ResultOfAppSaveData {
    unsafe {
        
        let success = sdk::natives::app_save_data(
            
        );
        
        
        ResultOfAppSaveData {
            success,
            ret: (),
            
        }
    }
}

    fn native_app_get_deleted_file_status(&self, ) -> ResultOfAppGetDeletedFileStatus {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::app_get_deleted_file_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfAppGetDeletedFileStatus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_app_has_synced_data(&self, app_name_: Option<String>) -> ResultOfAppHasSyncedData {
    unsafe {
        let mut native_return = Default::default();
let mut app_name_ = sdk_helpers::create_c_string_ptr(app_name_);
        let success = sdk::natives::app_has_synced_data(
            &mut native_return,
app_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfAppHasSyncedData {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_app_set_app(&self, app_name_: Option<String>) -> ResultOfAppSetApp {
    unsafe {
        let mut app_name_ = sdk_helpers::create_c_string_ptr(app_name_);
        let success = sdk::natives::app_set_app(
            app_name_.as_ref().unwrap(),
        );
        
        
        ResultOfAppSetApp {
            success,
            ret: (),
            
        }
    }
}

    fn native_app_get_int(&self, property_: Option<String>) -> ResultOfAppGetInt {
    unsafe {
        let mut native_return = Default::default();
let mut property_ = sdk_helpers::create_c_string_ptr(property_);
        let success = sdk::natives::app_get_int(
            &mut native_return,
property_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfAppGetInt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_app_close_app(&self, ) -> ResultOfAppCloseApp {
    unsafe {
        
        let success = sdk::natives::app_close_app(
            
        );
        
        
        ResultOfAppCloseApp {
            success,
            ret: (),
            
        }
    }
}

    fn native_app_close_block(&self, ) -> ResultOfAppCloseBlock {
    unsafe {
        
        let success = sdk::natives::app_close_block(
            
        );
        
        
        ResultOfAppCloseBlock {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_audio_scene(&self, scene_: Option<String>) -> ResultOfStartAudioScene {
    unsafe {
        let mut native_return = Default::default();
let mut scene_ = sdk_helpers::create_c_string_ptr(scene_);
        let success = sdk::natives::start_audio_scene(
            &mut native_return,
scene_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfStartAudioScene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_unrequest_tennis_banks(&self, ) -> ResultOfUnrequestTennisBanks {
    unsafe {
        
        let success = sdk::natives::unrequest_tennis_banks(
            
        );
        
        
        ResultOfUnrequestTennisBanks {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_audio_body_damage_factor(&self, vehicle_: u32,
intensity_: f32) -> ResultOfSetVehicleAudioBodyDamageFactor {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut intensity_ = intensity_;
        let success = sdk::natives::set_vehicle_audio_body_damage_factor(
            vehicle_,
intensity_,
        );
        
        
        ResultOfSetVehicleAudioBodyDamageFactor {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ambient_zone_enabled(&self, ambient_zone_: Option<String>) -> ResultOfIsAmbientZoneEnabled {
    unsafe {
        let mut native_return = Default::default();
let mut ambient_zone_ = sdk_helpers::create_c_string_ptr(ambient_zone_);
        let success = sdk::natives::is_ambient_zone_enabled(
            &mut native_return,
ambient_zone_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfIsAmbientZoneEnabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_default_horn(&self, vehicle_: u32) -> ResultOfGetVehicleDefaultHorn {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_default_horn(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleDefaultHorn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_prepare_synchronized_audio_event_for_scene(&self, scene_i_d_: i32,
audio_event_: Option<String>) -> ResultOfPrepareSynchronizedAudioEventForScene {
    unsafe {
        let mut native_return = Default::default();
let mut scene_i_d_ = scene_i_d_;
let mut audio_event_ = sdk_helpers::create_c_string_ptr(audio_event_);
        let success = sdk::natives::prepare_synchronized_audio_event_for_scene(
            &mut native_return,
scene_i_d_,
audio_event_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfPrepareSynchronizedAudioEventForScene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_radio_position_audio_mute(&self, p0_: bool) -> ResultOfSetRadioPositionAudioMute {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_radio_position_audio_mute(
            p0_,
        );
        
        
        ResultOfSetRadioPositionAudioMute {
            success,
            ret: (),
            
        }
    }
}

    fn native_unlock_radio_station_track_list(&self, radio_station_: Option<String>,
track_list_name_: Option<String>) -> ResultOfUnlockRadioStationTrackList {
    unsafe {
        let mut radio_station_ = sdk_helpers::create_c_string_ptr(radio_station_);
let mut track_list_name_ = sdk_helpers::create_c_string_ptr(track_list_name_);
        let success = sdk::natives::unlock_radio_station_track_list(
            radio_station_.as_ref().unwrap(),
track_list_name_.as_ref().unwrap(),
        );
        
        
        ResultOfUnlockRadioStationTrackList {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_vehicle_receive_cb_radio(&self, vehicle_: u32) -> ResultOfCanVehicleReceiveCbRadio {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::can_vehicle_receive_cb_radio(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfCanVehicleReceiveCbRadio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_horn_sound_index(&self, vehicle_: u32,
value_: i32) -> ResultOfSetVehicleHornSoundIndex {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut value_ = value_;
        let success = sdk::natives::set_vehicle_horn_sound_index(
            vehicle_,
value_,
        );
        
        
        ResultOfSetVehicleHornSoundIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_alarm(&self, alarm_name_: Option<String>,
p2_: bool) -> ResultOfStartAlarm {
    unsafe {
        let mut alarm_name_ = sdk_helpers::create_c_string_ptr(alarm_name_);
let mut p2_ = p2_;
        let success = sdk::natives::start_alarm(
            alarm_name_.as_ref().unwrap(),
p2_,
        );
        
        
        ResultOfStartAlarm {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_portal_settings_override(&self, p0_: Option<String>,
p1_: Option<String>) -> ResultOfSetPortalSettingsOverride {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::set_portal_settings_override(
            p0_.as_ref().unwrap(),
p1_.as_ref().unwrap(),
        );
        
        
        ResultOfSetPortalSettingsOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_in_current_conversation(&self, ped_: u32) -> ResultOfIsPedInCurrentConversation {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_current_conversation(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedInCurrentConversation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_radio_faded_out(&self, ) -> ResultOfIsRadioFadedOut {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_radio_faded_out(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsRadioFadedOut {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_ped_panic_walla(&self, ) -> ResultOfForcePedPanicWalla {
    unsafe {
        
        let success = sdk::natives::force_ped_panic_walla(
            
        );
        
        
        ResultOfForcePedPanicWalla {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_footsteps_events_enabled(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedFootstepsEventsEnabled {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_footsteps_events_enabled(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedFootstepsEventsEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_script_update_door_audio(&self, door_hash_: u32,
toggle_: bool) -> ResultOfSetScriptUpdateDoorAudio {
    unsafe {
        let mut door_hash_ = door_hash_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_script_update_door_audio(
            door_hash_,
toggle_,
        );
        
        
        ResultOfSetScriptUpdateDoorAudio {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_conversation_audio_controlled_by_anim(&self, p0_: bool) -> ResultOfSetConversationAudioControlledByAnim {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_conversation_audio_controlled_by_anim(
            p0_,
        );
        
        
        ResultOfSetConversationAudioControlledByAnim {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_voice_group_from_race_to_pvg(&self, ped_: u32,
voice_group_hash_: u32) -> ResultOfSetPedVoiceGroupFromRaceToPvg {
    unsafe {
        let mut ped_ = ped_;
let mut voice_group_hash_ = voice_group_hash_;
        let success = sdk::natives::set_ped_voice_group_from_race_to_pvg(
            ped_,
voice_group_hash_,
        );
        
        
        ResultOfSetPedVoiceGroupFromRaceToPvg {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_radio_on(&self, vehicle_: u32) -> ResultOfIsVehicleRadioOn {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_radio_on(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleRadioOn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_release_mission_audio_bank(&self, ) -> ResultOfReleaseMissionAudioBank {
    unsafe {
        
        let success = sdk::natives::release_mission_audio_bank(
            
        );
        
        
        ResultOfReleaseMissionAudioBank {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_player_veh_have_radio(&self, ) -> ResultOfDoesPlayerVehHaveRadio {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::does_player_veh_have_radio(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfDoesPlayerVehHaveRadio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mobile_radio_enabled_during_gameplay(&self, toggle_: bool) -> ResultOfSetMobileRadioEnabledDuringGameplay {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_mobile_radio_enabled_during_gameplay(
            toggle_,
        );
        
        
        ResultOfSetMobileRadioEnabledDuringGameplay {
            success,
            ret: (),
            
        }
    }
}

    fn native_unhint_named_script_audio_bank(&self, audio_bank_: Option<String>) -> ResultOfUnhintNamedScriptAudioBank {
    unsafe {
        let mut audio_bank_ = sdk_helpers::create_c_string_ptr(audio_bank_);
        let success = sdk::natives::unhint_named_script_audio_bank(
            audio_bank_.as_ref().unwrap(),
        );
        
        
        ResultOfUnhintNamedScriptAudioBank {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ambient_zone_list_state(&self, ambient_zone_: Option<String>,
p1_: bool) -> ResultOfClearAmbientZoneListState {
    unsafe {
        let mut ambient_zone_ = sdk_helpers::create_c_string_ptr(ambient_zone_);
let mut p1_ = p1_;
        let success = sdk::natives::clear_ambient_zone_list_state(
            ambient_zone_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOfClearAmbientZoneListState {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_audio_special_effect_mode(&self, mode_: i32) -> ResultOfSetAudioSpecialEffectMode {
    unsafe {
        let mut mode_ = mode_;
        let success = sdk::natives::set_audio_special_effect_mode(
            mode_,
        );
        
        
        ResultOfSetAudioSpecialEffectMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_override_trevor_rage(&self, voice_effect_: Option<String>) -> ResultOfOverrideTrevorRage {
    unsafe {
        let mut voice_effect_ = sdk_helpers::create_c_string_ptr(voice_effect_);
        let success = sdk::natives::override_trevor_rage(
            voice_effect_.as_ref().unwrap(),
        );
        
        
        ResultOfOverrideTrevorRage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_walla_density(&self, p0_: f32,
p1_: f32) -> ResultOfSetPedWallaDensity {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_walla_density(
            p0_,
p1_,
        );
        
        
        ResultOfSetPedWallaDensity {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_entity_to_audio_mix_group(&self, entity_: u32,
group_name_: Option<String>,
p2_: f32) -> ResultOfAddEntityToAudioMixGroup {
    unsafe {
        let mut entity_ = entity_;
let mut group_name_ = sdk_helpers::create_c_string_ptr(group_name_);
let mut p2_ = p2_;
        let success = sdk::natives::add_entity_to_audio_mix_group(
            entity_,
group_name_.as_ref().unwrap(),
p2_,
        );
        
        
        ResultOfAddEntityToAudioMixGroup {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_global_radio_signal_level(&self, p0_: i32) -> ResultOfSetGlobalRadioSignalLevel {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_global_radio_signal_level(
            p0_,
        );
        
        
        ResultOfSetGlobalRadioSignalLevel {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_custom_radio_track_list(&self, radio_station_: Option<String>) -> ResultOfClearCustomRadioTrackList {
    unsafe {
        let mut radio_station_ = sdk_helpers::create_c_string_ptr(radio_station_);
        let success = sdk::natives::clear_custom_radio_track_list(
            radio_station_.as_ref().unwrap(),
        );
        
        
        ResultOfClearCustomRadioTrackList {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_scripted_conversation_ongoing(&self, ) -> ResultOfIsScriptedConversationOngoing {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_scripted_conversation_ongoing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsScriptedConversationOngoing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_entity_from_audio_mix_group(&self, entity_: u32,
p1_: f32) -> ResultOfRemoveEntityFromAudioMixGroup {
    unsafe {
        let mut entity_ = entity_;
let mut p1_ = p1_;
        let success = sdk::natives::remove_entity_from_audio_mix_group(
            entity_,
p1_,
        );
        
        
        ResultOfRemoveEntityFromAudioMixGroup {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_mission_complete_playing(&self, ) -> ResultOfIsMissionCompletePlaying {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_mission_complete_playing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsMissionCompletePlaying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_unhint_ambient_audio_bank(&self, ) -> ResultOfUnhintAmbientAudioBank {
    unsafe {
        
        let success = sdk::natives::unhint_ambient_audio_bank(
            
        );
        
        
        ResultOfUnhintAmbientAudioBank {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_user_radio_control_enabled(&self, toggle_: bool) -> ResultOfSetUserRadioControlEnabled {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_user_radio_control_enabled(
            toggle_,
        );
        
        
        ResultOfSetUserRadioControlEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_race_and_voice_group(&self, ped_: u32,
p1_: i32,
voice_group_: u32) -> ResultOfSetPedRaceAndVoiceGroup {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut voice_group_ = voice_group_;
        let success = sdk::natives::set_ped_race_and_voice_group(
            ped_,
p1_,
voice_group_,
        );
        
        
        ResultOfSetPedRaceAndVoiceGroup {
            success,
            ret: (),
            
        }
    }
}

    fn native_blip_siren(&self, vehicle_: u32) -> ResultOfBlipSiren {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::blip_siren(
            vehicle_,
        );
        
        
        ResultOfBlipSiren {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_veh_radio_station(&self, vehicle_: u32,
radio_station_: Option<String>) -> ResultOfSetVehRadioStation {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut radio_station_ = sdk_helpers::create_c_string_ptr(radio_station_);
        let success = sdk::natives::set_veh_radio_station(
            vehicle_,
radio_station_.as_ref().unwrap(),
        );
        
        
        ResultOfSetVehRadioStation {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_vehicle_fanbelt_damage(&self, vehicle_: u32,
toggle_: bool) -> ResultOfEnableVehicleFanbeltDamage {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::enable_vehicle_fanbelt_damage(
            vehicle_,
toggle_,
        );
        
        
        ResultOfEnableVehicleFanbeltDamage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ambient_zone_state_persistent(&self, ambient_zone_: Option<String>,
p1_: bool,
p2_: bool) -> ResultOfSetAmbientZoneStatePersistent {
    unsafe {
        let mut ambient_zone_ = sdk_helpers::create_c_string_ptr(ambient_zone_);
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_ambient_zone_state_persistent(
            ambient_zone_.as_ref().unwrap(),
p1_,
p2_,
        );
        
        
        ResultOfSetAmbientZoneStatePersistent {
            success,
            ret: (),
            
        }
    }
}

    fn native_prepare_music_event(&self, event_name_: Option<String>) -> ResultOfPrepareMusicEvent {
    unsafe {
        let mut native_return = Default::default();
let mut event_name_ = sdk_helpers::create_c_string_ptr(event_name_);
        let success = sdk::natives::prepare_music_event(
            &mut native_return,
event_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfPrepareMusicEvent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_ringtone_playing(&self, ped_: u32) -> ResultOfIsPedRingtonePlaying {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_ringtone_playing(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedRingtonePlaying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_load_stream(&self, stream_name_: Option<String>,
sound_set_: Option<String>) -> ResultOfLoadStream {
    unsafe {
        let mut native_return = Default::default();
let mut stream_name_ = sdk_helpers::create_c_string_ptr(stream_name_);
let mut sound_set_ = sdk_helpers::create_c_string_ptr(sound_set_);
        let success = sdk::natives::load_stream(
            &mut native_return,
stream_name_.as_ref().unwrap(),
sound_set_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfLoadStream {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_siren_with_no_driver(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetSirenWithNoDriver {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_siren_with_no_driver(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetSirenWithNoDriver {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_stream_from_position(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfPlayStreamFromPosition {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::play_stream_from_position(
            x_,
y_,
z_,
        );
        
        
        ResultOfPlayStreamFromPosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ambient_zone_state(&self, zone_name_: Option<String>,
p1_: bool) -> ResultOfClearAmbientZoneState {
    unsafe {
        let mut zone_name_ = sdk_helpers::create_c_string_ptr(zone_name_);
let mut p1_ = p1_;
        let success = sdk::natives::clear_ambient_zone_state(
            zone_name_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOfClearAmbientZoneState {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_alarm_playing(&self, alarm_name_: Option<String>) -> ResultOfIsAlarmPlaying {
    unsafe {
        let mut native_return = Default::default();
let mut alarm_name_ = sdk_helpers::create_c_string_ptr(alarm_name_);
        let success = sdk::natives::is_alarm_playing(
            &mut native_return,
alarm_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfIsAlarmPlaying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_preloaded_conversation(&self, ) -> ResultOfStartPreloadedConversation {
    unsafe {
        
        let success = sdk::natives::start_preloaded_conversation(
            
        );
        
        
        ResultOfStartPreloadedConversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_script_phone_conversation(&self, p0_: bool,
p1_: bool) -> ResultOfStartScriptPhoneConversation {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::start_script_phone_conversation(
            p0_,
p1_,
        );
        
        
        ResultOfStartScriptPhoneConversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_cloth_events_enabled(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedClothEventsEnabled {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_cloth_events_enabled(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedClothEventsEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_unblock_speech_context_group(&self, p0_: Option<String>) -> ResultOfUnblockSpeechContextGroup {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::unblock_speech_context_group(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOfUnblockSpeechContextGroup {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_radio_station_favourited(&self, radio_station_: Option<String>) -> ResultOfIsRadioStationFavourited {
    unsafe {
        let mut native_return = Default::default();
let mut radio_station_ = sdk_helpers::create_c_string_ptr(radio_station_);
        let success = sdk::natives::is_radio_station_favourited(
            &mut native_return,
radio_station_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfIsRadioStationFavourited {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_enable_vehicle_exhaust_pops(&self, vehicle_: u32,
toggle_: bool) -> ResultOfEnableVehicleExhaustPops {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::enable_vehicle_exhaust_pops(
            vehicle_,
toggle_,
        );
        
        
        ResultOfEnableVehicleExhaustPops {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radio_frontend_fade_time(&self, fade_time_: f32) -> ResultOfSetRadioFrontendFadeTime {
    unsafe {
        let mut fade_time_ = fade_time_;
        let success = sdk::natives::set_radio_frontend_fade_time(
            fade_time_,
        );
        
        
        ResultOfSetRadioFrontendFadeTime {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radio_track_with_start_offset(&self, radio_station_name_: Option<String>,
mix_name_: Option<String>,
p2_: i32) -> ResultOfSetRadioTrackWithStartOffset {
    unsafe {
        let mut radio_station_name_ = sdk_helpers::create_c_string_ptr(radio_station_name_);
let mut mix_name_ = sdk_helpers::create_c_string_ptr(mix_name_);
let mut p2_ = p2_;
        let success = sdk::natives::set_radio_track_with_start_offset(
            radio_station_name_.as_ref().unwrap(),
mix_name_.as_ref().unwrap(),
p2_,
        );
        
        
        ResultOfSetRadioTrackWithStartOffset {
            success,
            ret: (),
            
        }
    }
}

    fn native_audio_is_scripted_music_playing(&self, ) -> ResultOfAudioIsScriptedMusicPlaying {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::audio_is_scripted_music_playing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfAudioIsScriptedMusicPlaying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_network_id_from_sound_id(&self, sound_id_: i32) -> ResultOfGetNetworkIdFromSoundId {
    unsafe {
        let mut native_return = Default::default();
let mut sound_id_ = sound_id_;
        let success = sdk::natives::get_network_id_from_sound_id(
            &mut native_return,
sound_id_,
        );
        let native_return = native_return;
        
        ResultOfGetNetworkIdFromSoundId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_all_alarms(&self, stop_: bool) -> ResultOfStopAllAlarms {
    unsafe {
        let mut stop_ = stop_;
        let success = sdk::natives::stop_all_alarms(
            stop_,
        );
        
        
        ResultOfStopAllAlarms {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_script_audio_bank(&self, audio_bank_: Option<String>,
p1_: bool,
p2_: i32) -> ResultOfRequestScriptAudioBank {
    unsafe {
        let mut native_return = Default::default();
let mut audio_bank_ = sdk_helpers::create_c_string_ptr(audio_bank_);
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::request_script_audio_bank(
            &mut native_return,
audio_bank_.as_ref().unwrap(),
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfRequestScriptAudioBank {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_variable_on_stream(&self, unk_variable_: Option<String>,
p1_: f32) -> ResultOfSetVariableOnStream {
    unsafe {
        let mut unk_variable_ = sdk_helpers::create_c_string_ptr(unk_variable_);
let mut p1_ = p1_;
        let success = sdk::natives::set_variable_on_stream(
            unk_variable_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOfSetVariableOnStream {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_any_positional_speech_playing(&self, ) -> ResultOfIsAnyPositionalSpeechPlaying {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_any_positional_speech_playing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsAnyPositionalSpeechPlaying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_position_for_null_conv_ped(&self, p0_: i32,
p1_: f32,
p2_: f32,
p3_: f32) -> ResultOfSetPositionForNullConvPed {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_position_for_null_conv_ped(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfSetPositionForNullConvPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_freeze_radio_station(&self, radio_station_: Option<String>) -> ResultOfFreezeRadioStation {
    unsafe {
        let mut radio_station_ = sdk_helpers::create_c_string_ptr(radio_station_);
        let success = sdk::natives::freeze_radio_station(
            radio_station_.as_ref().unwrap(),
        );
        
        
        ResultOfFreezeRadioStation {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_current_track_sound_name(&self, radio_station_name_: Option<String>) -> ResultOfGetCurrentTrackSoundName {
    unsafe {
        let mut native_return = Default::default();
let mut radio_station_name_ = sdk_helpers::create_c_string_ptr(radio_station_name_);
        let success = sdk::natives::get_current_track_sound_name(
            &mut native_return,
radio_station_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfGetCurrentTrackSoundName {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_play_ped_ambient_speech_with_voice_native(&self, ped_: u32,
speech_name_: Option<String>,
voice_name_: Option<String>,
speech_param_: Option<String>,
p4_: bool) -> ResultOfPlayPedAmbientSpeechWithVoiceNative {
    unsafe {
        let mut ped_ = ped_;
let mut speech_name_ = sdk_helpers::create_c_string_ptr(speech_name_);
let mut voice_name_ = sdk_helpers::create_c_string_ptr(voice_name_);
let mut speech_param_ = sdk_helpers::create_c_string_ptr(speech_param_);
let mut p4_ = p4_;
        let success = sdk::natives::play_ped_ambient_speech_with_voice_native(
            ped_,
speech_name_.as_ref().unwrap(),
voice_name_.as_ref().unwrap(),
speech_param_.as_ref().unwrap(),
p4_,
        );
        
        
        ResultOfPlayPedAmbientSpeechWithVoiceNative {
            success,
            ret: (),
            
        }
    }
}

    fn native_release_sound_id(&self, sound_id_: i32) -> ResultOfReleaseSoundId {
    unsafe {
        let mut sound_id_ = sound_id_;
        let success = sdk::natives::release_sound_id(
            sound_id_,
        );
        
        
        ResultOfReleaseSoundId {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_aggressive_horns(&self, toggle_: bool) -> ResultOfSetAggressiveHorns {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_aggressive_horns(
            toggle_,
        );
        
        
        ResultOfSetAggressiveHorns {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_static_emitter_enabled(&self, emitter_name_: Option<String>,
toggle_: bool) -> ResultOfSetStaticEmitterEnabled {
    unsafe {
        let mut emitter_name_ = sdk_helpers::create_c_string_ptr(emitter_name_);
let mut toggle_ = toggle_;
        let success = sdk::natives::set_static_emitter_enabled(
            emitter_name_.as_ref().unwrap(),
toggle_,
        );
        
        
        ResultOfSetStaticEmitterEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_music_vol_slider(&self, ) -> ResultOfGetMusicVolSlider {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_music_vol_slider(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetMusicVolSlider {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_play_vehicle_door_open_sound(&self, vehicle_: u32,
door_id_: i32) -> ResultOfPlayVehicleDoorOpenSound {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut door_id_ = door_id_;
        let success = sdk::natives::play_vehicle_door_open_sound(
            vehicle_,
door_id_,
        );
        
        
        ResultOfPlayVehicleDoorOpenSound {
            success,
            ret: (),
            
        }
    }
}

    fn native_preload_script_conversation(&self, p0_: bool,
p1_: bool,
p2_: bool,
p3_: bool) -> ResultOfPreloadScriptConversation {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::preload_script_conversation(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfPreloadScriptConversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cutscene_audio_override(&self, name_: Option<String>) -> ResultOfSetCutsceneAudioOverride {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::set_cutscene_audio_override(
            name_.as_ref().unwrap(),
        );
        
        
        ResultOfSetCutsceneAudioOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_radio_enabled(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleRadioEnabled {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_radio_enabled(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleRadioEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gps_active(&self, active_: bool) -> ResultOfSetGpsActive {
    unsafe {
        let mut active_ = active_;
        let success = sdk::natives::set_gps_active(
            active_,
        );
        
        
        ResultOfSetGpsActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_override_veh_horn(&self, vehicle_: u32,
override_: bool,
horn_hash_: i32) -> ResultOfOverrideVehHorn {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut override_ = override_;
let mut horn_hash_ = horn_hash_;
        let success = sdk::natives::override_veh_horn(
            vehicle_,
override_,
horn_hash_,
        );
        
        
        ResultOfOverrideVehHorn {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_veh_has_normal_radio(&self, vehicle_: u32) -> ResultOfSetVehHasNormalRadio {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_veh_has_normal_radio(
            vehicle_,
        );
        
        
        ResultOfSetVehHasNormalRadio {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_current_track_play_time(&self, radio_station_name_: Option<String>) -> ResultOfGetCurrentTrackPlayTime {
    unsafe {
        let mut native_return = Default::default();
let mut radio_station_name_ = sdk_helpers::create_c_string_ptr(radio_station_name_);
        let success = sdk::natives::get_current_track_play_time(
            &mut native_return,
radio_station_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfGetCurrentTrackPlayTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_hint_mission_audio_bank(&self, audio_bank_: Option<String>,
p1_: bool,
p2_: i32) -> ResultOfHintMissionAudioBank {
    unsafe {
        let mut native_return = Default::default();
let mut audio_bank_ = sdk_helpers::create_c_string_ptr(audio_bank_);
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::hint_mission_audio_bank(
            &mut native_return,
audio_bank_.as_ref().unwrap(),
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfHintMissionAudioBank {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_voice_full(&self, ped_: u32) -> ResultOfSetPedVoiceFull {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_voice_full(
            ped_,
        );
        
        
        ResultOfSetPedVoiceFull {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_sound_id(&self, ) -> ResultOfGetSoundId {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_sound_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetSoundId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_siren_can_be_controlled_by_audio(&self, vehicle_: u32,
p1_: bool) -> ResultOfSetSirenCanBeControlledByAudio {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_siren_can_be_controlled_by_audio(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetSirenCanBeControlledByAudio {
            success,
            ret: (),
            
        }
    }
}

    fn native_lock_radio_station(&self, radio_station_name_: Option<String>,
toggle_: bool) -> ResultOfLockRadioStation {
    unsafe {
        let mut radio_station_name_ = sdk_helpers::create_c_string_ptr(radio_station_name_);
let mut toggle_ = toggle_;
        let success = sdk::natives::lock_radio_station(
            radio_station_name_.as_ref().unwrap(),
toggle_,
        );
        
        
        ResultOfLockRadioStation {
            success,
            ret: (),
            
        }
    }
}

    fn native_update_unlockable_dj_radio_tracks(&self, enable_mixes_: bool) -> ResultOfUpdateUnlockableDjRadioTracks {
    unsafe {
        let mut enable_mixes_ = enable_mixes_;
        let success = sdk::natives::update_unlockable_dj_radio_tracks(
            enable_mixes_,
        );
        
        
        ResultOfUpdateUnlockableDjRadioTracks {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_current_scripted_conversation_line(&self, ) -> ResultOfGetCurrentScriptedConversationLine {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_current_scripted_conversation_line(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetCurrentScriptedConversationLine {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_context_exist_for_this_ped(&self, ped_: u32,
speech_name_: Option<String>,
p2_: bool) -> ResultOfDoesContextExistForThisPed {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut speech_name_ = sdk_helpers::create_c_string_ptr(speech_name_);
let mut p2_ = p2_;
        let success = sdk::natives::does_context_exist_for_this_ped(
            &mut native_return,
ped_,
speech_name_.as_ref().unwrap(),
p2_,
        );
        let native_return = native_return;
        
        ResultOfDoesContextExistForThisPed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_boost_active(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleBoostActive {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_boost_active(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleBoostActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_tennis_banks(&self, ped_: u32) -> ResultOfRequestTennisBanks {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::request_tennis_banks(
            ped_,
        );
        
        
        ResultOfRequestTennisBanks {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radio_station_as_favourite(&self, radio_station_: Option<String>,
toggle_: bool) -> ResultOfSetRadioStationAsFavourite {
    unsafe {
        let mut radio_station_ = sdk_helpers::create_c_string_ptr(radio_station_);
let mut toggle_ = toggle_;
        let success = sdk::natives::set_radio_station_as_favourite(
            radio_station_.as_ref().unwrap(),
toggle_,
        );
        
        
        ResultOfSetRadioStationAsFavourite {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_music_track_list(&self, radio_station_: Option<String>,
track_list_name_: Option<String>,
milliseconds_: i32) -> ResultOfForceMusicTrackList {
    unsafe {
        let mut radio_station_ = sdk_helpers::create_c_string_ptr(radio_station_);
let mut track_list_name_ = sdk_helpers::create_c_string_ptr(track_list_name_);
let mut milliseconds_ = milliseconds_;
        let success = sdk::natives::force_music_track_list(
            radio_station_.as_ref().unwrap(),
track_list_name_.as_ref().unwrap(),
milliseconds_,
        );
        
        
        ResultOfForceMusicTrackList {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_custom_radio_track_list(&self, radio_station_: Option<String>,
track_list_name_: Option<String>,
p2_: bool) -> ResultOfSetCustomRadioTrackList {
    unsafe {
        let mut radio_station_ = sdk_helpers::create_c_string_ptr(radio_station_);
let mut track_list_name_ = sdk_helpers::create_c_string_ptr(track_list_name_);
let mut p2_ = p2_;
        let success = sdk::natives::set_custom_radio_track_list(
            radio_station_.as_ref().unwrap(),
track_list_name_.as_ref().unwrap(),
p2_,
        );
        
        
        ResultOfSetCustomRadioTrackList {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_stream_play_time(&self, ) -> ResultOfGetStreamPlayTime {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_stream_play_time(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetStreamPlayTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_use_audio_game_object(&self, vehicle_: u32,
audio_name_: Option<String>) -> ResultOfForceUseAudioGameObject {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut audio_name_ = sdk_helpers::create_c_string_ptr(audio_name_);
        let success = sdk::natives::force_use_audio_game_object(
            vehicle_,
audio_name_.as_ref().unwrap(),
        );
        
        
        ResultOfForceUseAudioGameObject {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_audible_music_track_text_id(&self, ) -> ResultOfGetAudibleMusicTrackTextId {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_audible_music_track_text_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetAudibleMusicTrackTextId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_loaded_mp_data_set(&self, ) -> ResultOfHasLoadedMpDataSet {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_loaded_mp_data_set(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfHasLoadedMpDataSet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_distant_cop_car_sirens(&self, value_: bool) -> ResultOfDistantCopCarSirens {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::distant_cop_car_sirens(
            value_,
        );
        
        
        ResultOfDistantCopCarSirens {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_next_radio_track(&self, radio_name_: Option<String>,
radio_track_: Option<String>,
p2_: Option<String>,
p3_: Option<String>) -> ResultOfSetNextRadioTrack {
    unsafe {
        let mut radio_name_ = sdk_helpers::create_c_string_ptr(radio_name_);
let mut radio_track_ = sdk_helpers::create_c_string_ptr(radio_track_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut p3_ = sdk_helpers::create_c_string_ptr(p3_);
        let success = sdk::natives::set_next_radio_track(
            radio_name_.as_ref().unwrap(),
radio_track_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
p3_.as_ref().unwrap(),
        );
        
        
        ResultOfSetNextRadioTrack {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_conversations_persist(&self, p0_: bool,
p1_: bool) -> ResultOfSetVehicleConversationsPersist {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_conversations_persist(
            p0_,
p1_,
        );
        
        
        ResultOfSetVehicleConversationsPersist {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_stream_frontend(&self, ) -> ResultOfPlayStreamFrontend {
    unsafe {
        
        let success = sdk::natives::play_stream_frontend(
            
        );
        
        
        ResultOfPlayStreamFrontend {
            success,
            ret: (),
            
        }
    }
}

    fn native_load_stream_with_start_offset(&self, stream_name_: Option<String>,
start_offset_: i32,
sound_set_: Option<String>) -> ResultOfLoadStreamWithStartOffset {
    unsafe {
        let mut native_return = Default::default();
let mut stream_name_ = sdk_helpers::create_c_string_ptr(stream_name_);
let mut start_offset_ = start_offset_;
let mut sound_set_ = sdk_helpers::create_c_string_ptr(sound_set_);
        let success = sdk::natives::load_stream_with_start_offset(
            &mut native_return,
stream_name_.as_ref().unwrap(),
start_offset_,
sound_set_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfLoadStreamWithStartOffset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_audio_engine_damage_factor(&self, vehicle_: u32,
damage_factor_: f32) -> ResultOfSetVehicleAudioEngineDamageFactor {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut damage_factor_ = damage_factor_;
        let success = sdk::natives::set_vehicle_audio_engine_damage_factor(
            vehicle_,
damage_factor_,
        );
        
        
        ResultOfSetVehicleAudioEngineDamageFactor {
            success,
            ret: (),
            
        }
    }
}

    fn native_cancel_music_event(&self, event_name_: Option<String>) -> ResultOfCancelMusicEvent {
    unsafe {
        let mut native_return = Default::default();
let mut event_name_ = sdk_helpers::create_c_string_ptr(event_name_);
        let success = sdk::natives::cancel_music_event(
            &mut native_return,
event_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfCancelMusicEvent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_loaded_sp_data_set(&self, ) -> ResultOfHasLoadedSpDataSet {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_loaded_sp_data_set(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfHasLoadedSpDataSet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_play_sound_from_entity_hash(&self, sound_id_: i32,
model_: u32,
entity_: u32,
sound_set_hash_: u32,
p4_: i32,
p5_: i32) -> ResultOfPlaySoundFromEntityHash {
    unsafe {
        let mut sound_id_ = sound_id_;
let mut model_ = model_;
let mut entity_ = entity_;
let mut sound_set_hash_ = sound_set_hash_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::play_sound_from_entity_hash(
            sound_id_,
model_,
entity_,
sound_set_hash_,
p4_,
p5_,
        );
        
        
        ResultOfPlaySoundFromEntityHash {
            success,
            ret: (),
            
        }
    }
}

    fn native_refresh_closest_ocean_shoreline(&self, ) -> ResultOfRefreshClosestOceanShoreline {
    unsafe {
        
        let success = sdk::natives::refresh_closest_ocean_shoreline(
            
        );
        
        
        ResultOfRefreshClosestOceanShoreline {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_audibly_damaged(&self, vehicle_: u32) -> ResultOfIsVehicleAudiblyDamaged {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_audibly_damaged(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleAudiblyDamaged {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ambient_voice_name_hash(&self, ped_: u32) -> ResultOfGetAmbientVoiceNameHash {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ambient_voice_name_hash(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetAmbientVoiceNameHash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_player_veh_radio_enable(&self, ) -> ResultOfIsPlayerVehRadioEnable {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_player_veh_radio_enable(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerVehRadioEnable {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_preload_script_phone_conversation(&self, p0_: bool,
p1_: bool) -> ResultOfPreloadScriptPhoneConversation {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::preload_script_phone_conversation(
            p0_,
p1_,
        );
        
        
        ResultOfPreloadScriptPhoneConversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_conversation_audio_placeholder(&self, p0_: bool) -> ResultOfSetConversationAudioPlaceholder {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_conversation_audio_placeholder(
            p0_,
        );
        
        
        ResultOfSetConversationAudioPlaceholder {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_vehicle_door_close_sound(&self, vehicle_: u32,
door_id_: i32) -> ResultOfPlayVehicleDoorCloseSound {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut door_id_ = door_id_;
        let success = sdk::natives::play_vehicle_door_close_sound(
            vehicle_,
door_id_,
        );
        
        
        ResultOfPlayVehicleDoorCloseSound {
            success,
            ret: (),
            
        }
    }
}

    fn native_link_static_emitter_to_entity(&self, emitter_name_: Option<String>,
entity_: u32) -> ResultOfLinkStaticEmitterToEntity {
    unsafe {
        let mut emitter_name_ = sdk_helpers::create_c_string_ptr(emitter_name_);
let mut entity_ = entity_;
        let success = sdk::natives::link_static_emitter_to_entity(
            emitter_name_.as_ref().unwrap(),
entity_,
        );
        
        
        ResultOfLinkStaticEmitterToEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_release_ambient_audio_bank(&self, ) -> ResultOfReleaseAmbientAudioBank {
    unsafe {
        
        let success = sdk::natives::release_ambient_audio_bank(
            
        );
        
        
        ResultOfReleaseAmbientAudioBank {
            success,
            ret: (),
            
        }
    }
}

    fn native_trigger_siren_audio(&self, vehicle_: u32) -> ResultOfTriggerSirenAudio {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::trigger_siren_audio(
            vehicle_,
        );
        
        
        ResultOfTriggerSirenAudio {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_mission_news_story_unlocked(&self, news_story_: i32) -> ResultOfIsMissionNewsStoryUnlocked {
    unsafe {
        let mut native_return = Default::default();
let mut news_story_ = news_story_;
        let success = sdk::natives::is_mission_news_story_unlocked(
            &mut native_return,
news_story_,
        );
        let native_return = native_return;
        
        ResultOfIsMissionNewsStoryUnlocked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_play_sound_frontend(&self, sound_id_: i32,
audio_name_: Option<String>,
audio_ref_: Option<String>,
p3_: bool) -> ResultOfPlaySoundFrontend {
    unsafe {
        let mut sound_id_ = sound_id_;
let mut audio_name_ = sdk_helpers::create_c_string_ptr(audio_name_);
let mut audio_ref_ = sdk_helpers::create_c_string_ptr(audio_ref_);
let mut p3_ = p3_;
        let success = sdk::natives::play_sound_frontend(
            sound_id_,
audio_name_.as_ref().unwrap(),
audio_ref_.as_ref().unwrap(),
p3_,
        );
        
        
        ResultOfPlaySoundFrontend {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_script_conversation(&self, p0_: bool,
p1_: bool,
p2_: bool,
p3_: bool) -> ResultOfStartScriptConversation {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::start_script_conversation(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfStartScriptConversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_ped_ringtone(&self, ped_: u32) -> ResultOfStopPedRingtone {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::stop_ped_ringtone(
            ped_,
        );
        
        
        ResultOfStopPedRingtone {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ambient_voice_name(&self, ped_: u32,
name_: Option<String>) -> ResultOfSetAmbientVoiceName {
    unsafe {
        let mut ped_ = ped_;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::set_ambient_voice_name(
            ped_,
name_.as_ref().unwrap(),
        );
        
        
        ResultOfSetAmbientVoiceName {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_game_in_control_of_music(&self, ) -> ResultOfIsGameInControlOfMusic {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_game_in_control_of_music(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsGameInControlOfMusic {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_skip_radio_forward(&self, ) -> ResultOfSkipRadioForward {
    unsafe {
        
        let success = sdk::natives::skip_radio_forward(
            
        );
        
        
        ResultOfSkipRadioForward {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_mission_complete_ready_for_ui(&self, ) -> ResultOfIsMissionCompleteReadyForUi {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_mission_complete_ready_for_ui(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsMissionCompleteReadyForUi {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_vehicle_alarm_audio_active(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetPlayerVehicleAlarmAudioActive {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_vehicle_alarm_audio_active(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetPlayerVehicleAlarmAudioActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_trigger_music_event(&self, event_name_: Option<String>) -> ResultOfTriggerMusicEvent {
    unsafe {
        let mut native_return = Default::default();
let mut event_name_ = sdk_helpers::create_c_string_ptr(event_name_);
        let success = sdk::natives::trigger_music_event(
            &mut native_return,
event_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfTriggerMusicEvent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_script_overrides_wind_elevation(&self, p0_: bool,
p1_: i32) -> ResultOfScriptOverridesWindElevation {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::script_overrides_wind_elevation(
            p0_,
p1_,
        );
        
        
        ResultOfScriptOverridesWindElevation {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_any_speech_playing(&self, ped_: u32) -> ResultOfIsAnySpeechPlaying {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_any_speech_playing(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsAnySpeechPlaying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_variable_on_under_water_stream(&self, unk_variable_name_: Option<String>,
value_: f32) -> ResultOfSetVariableOnUnderWaterStream {
    unsafe {
        let mut unk_variable_name_ = sdk_helpers::create_c_string_ptr(unk_variable_name_);
let mut value_ = value_;
        let success = sdk::natives::set_variable_on_under_water_stream(
            unk_variable_name_.as_ref().unwrap(),
value_,
        );
        
        
        ResultOfSetVariableOnUnderWaterStream {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_mission_audio_bank(&self, audio_bank_: Option<String>,
p1_: bool,
p2_: i32) -> ResultOfRequestMissionAudioBank {
    unsafe {
        let mut native_return = Default::default();
let mut audio_bank_ = sdk_helpers::create_c_string_ptr(audio_bank_);
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::request_mission_audio_bank(
            &mut native_return,
audio_bank_.as_ref().unwrap(),
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfRequestMissionAudioBank {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_mobile_phone_call_ongoing(&self, ) -> ResultOfIsMobilePhoneCallOngoing {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_mobile_phone_call_ongoing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsMobilePhoneCallOngoing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_sound_id_from_network_id(&self, net_id_: i32) -> ResultOfGetSoundIdFromNetworkId {
    unsafe {
        let mut native_return = Default::default();
let mut net_id_ = net_id_;
        let success = sdk::natives::get_sound_id_from_network_id(
            &mut native_return,
net_id_,
        );
        let native_return = native_return;
        
        ResultOfGetSoundIdFromNetworkId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_override_microphone_settings(&self, hash_: u32,
toggle_: bool) -> ResultOfOverrideMicrophoneSettings {
    unsafe {
        let mut hash_ = hash_;
let mut toggle_ = toggle_;
        let success = sdk::natives::override_microphone_settings(
            hash_,
toggle_,
        );
        
        
        ResultOfOverrideMicrophoneSettings {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_horn_enabled(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetHornEnabled {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_horn_enabled(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetHornEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radio_station_music_only(&self, radio_station_: Option<String>,
toggle_: bool) -> ResultOfSetRadioStationMusicOnly {
    unsafe {
        let mut radio_station_ = sdk_helpers::create_c_string_ptr(radio_station_);
let mut toggle_ = toggle_;
        let success = sdk::natives::set_radio_station_music_only(
            radio_station_.as_ref().unwrap(),
toggle_,
        );
        
        
        ResultOfSetRadioStationMusicOnly {
            success,
            ret: (),
            
        }
    }
}

    fn native_release_named_script_audio_bank(&self, audio_bank_: Option<String>) -> ResultOfReleaseNamedScriptAudioBank {
    unsafe {
        let mut audio_bank_ = sdk_helpers::create_c_string_ptr(audio_bank_);
        let success = sdk::natives::release_named_script_audio_bank(
            audio_bank_.as_ref().unwrap(),
        );
        
        
        ResultOfReleaseNamedScriptAudioBank {
            success,
            ret: (),
            
        }
    }
}

    fn native_release_script_audio_bank(&self, ) -> ResultOfReleaseScriptAudioBank {
    unsafe {
        
        let success = sdk::natives::release_script_audio_bank(
            
        );
        
        
        ResultOfReleaseScriptAudioBank {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_current_playing_speech(&self, ped_: u32) -> ResultOfStopCurrentPlayingSpeech {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::stop_current_playing_speech(
            ped_,
        );
        
        
        ResultOfStopCurrentPlayingSpeech {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_voice_group(&self, ped_: u32,
voice_group_hash_: u32) -> ResultOfSetPedVoiceGroup {
    unsafe {
        let mut ped_ = ped_;
let mut voice_group_hash_ = voice_group_hash_;
        let success = sdk::natives::set_ped_voice_group(
            ped_,
voice_group_hash_,
        );
        
        
        ResultOfSetPedVoiceGroup {
            success,
            ret: (),
            
        }
    }
}

    fn native_update_sound_coord(&self, sound_id_: i32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfUpdateSoundCoord {
    unsafe {
        let mut sound_id_ = sound_id_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::update_sound_coord(
            sound_id_,
x_,
y_,
z_,
        );
        
        
        ResultOfUpdateSoundCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_sound(&self, sound_id_: i32,
audio_name_: Option<String>,
audio_ref_: Option<String>,
p3_: bool,
p4_: i32,
p5_: bool) -> ResultOfPlaySound {
    unsafe {
        let mut sound_id_ = sound_id_;
let mut audio_name_ = sdk_helpers::create_c_string_ptr(audio_name_);
let mut audio_ref_ = sdk_helpers::create_c_string_ptr(audio_ref_);
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::play_sound(
            sound_id_,
audio_name_.as_ref().unwrap(),
audio_ref_.as_ref().unwrap(),
p3_,
p4_,
p5_,
        );
        
        
        ResultOfPlaySound {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_cutscene_audio(&self, ) -> ResultOfStopCutsceneAudio {
    unsafe {
        
        let success = sdk::natives::stop_cutscene_audio(
            
        );
        
        
        ResultOfStopCutsceneAudio {
            success,
            ret: (),
            
        }
    }
}

    fn native_audio_is_music_playing(&self, ) -> ResultOfAudioIsMusicPlaying {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::audio_is_music_playing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfAudioIsMusicPlaying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pause_scripted_conversation(&self, p0_: bool) -> ResultOfPauseScriptedConversation {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::pause_scripted_conversation(
            p0_,
        );
        
        
        ResultOfPauseScriptedConversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_initial_player_station(&self, radio_station_: Option<String>) -> ResultOfSetInitialPlayerStation {
    unsafe {
        let mut radio_station_ = sdk_helpers::create_c_string_ptr(radio_station_);
        let success = sdk::natives::set_initial_player_station(
            radio_station_.as_ref().unwrap(),
        );
        
        
        ResultOfSetInitialPlayerStation {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_stream_from_ped(&self, ped_: u32) -> ResultOfPlayStreamFromPed {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::play_stream_from_ped(
            ped_,
        );
        
        
        ResultOfPlayStreamFromPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_for_null_conv_ped(&self, p0_: i32,
entity_: u32) -> ResultOfSetEntityForNullConvPed {
    unsafe {
        let mut p0_ = p0_;
let mut entity_ = entity_;
        let success = sdk::natives::set_entity_for_null_conv_ped(
            p0_,
entity_,
        );
        
        
        ResultOfSetEntityForNullConvPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_interrupt_conversation_and_pause(&self, ped_: u32,
p1_: Option<String>,
speaker_: Option<String>) -> ResultOfInterruptConversationAndPause {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut speaker_ = sdk_helpers::create_c_string_ptr(speaker_);
        let success = sdk::natives::interrupt_conversation_and_pause(
            ped_,
p1_.as_ref().unwrap(),
speaker_.as_ref().unwrap(),
        );
        
        
        ResultOfInterruptConversationAndPause {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_synchronized_audio_event(&self, scene_i_d_: i32) -> ResultOfPlaySynchronizedAudioEvent {
    unsafe {
        let mut native_return = Default::default();
let mut scene_i_d_ = scene_i_d_;
        let success = sdk::natives::play_synchronized_audio_event(
            &mut native_return,
scene_i_d_,
        );
        let native_return = native_return;
        
        ResultOfPlaySynchronizedAudioEvent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_interior_walla_density(&self, p0_: f32,
p1_: f32) -> ResultOfSetPedInteriorWallaDensity {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_interior_walla_density(
            p0_,
p1_,
        );
        
        
        ResultOfSetPedInteriorWallaDensity {
            success,
            ret: (),
            
        }
    }
}

    fn native_find_radio_station_index(&self, station_name_hash_: u32) -> ResultOfFindRadioStationIndex {
    unsafe {
        let mut native_return = Default::default();
let mut station_name_hash_ = station_name_hash_;
        let success = sdk::natives::find_radio_station_index(
            &mut native_return,
station_name_hash_,
        );
        let native_return = native_return;
        
        ResultOfFindRadioStationIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_play_sound_from_coord(&self, sound_id_: i32,
audio_name_: Option<String>,
x_: f32,
y_: f32,
z_: f32,
audio_ref_: Option<String>,
is_network_: bool,
range_: i32,
p8_: bool) -> ResultOfPlaySoundFromCoord {
    unsafe {
        let mut sound_id_ = sound_id_;
let mut audio_name_ = sdk_helpers::create_c_string_ptr(audio_name_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut audio_ref_ = sdk_helpers::create_c_string_ptr(audio_ref_);
let mut is_network_ = is_network_;
let mut range_ = range_;
let mut p8_ = p8_;
        let success = sdk::natives::play_sound_from_coord(
            sound_id_,
audio_name_.as_ref().unwrap(),
x_,
y_,
z_,
audio_ref_.as_ref().unwrap(),
is_network_,
range_,
p8_,
        );
        
        
        ResultOfPlaySoundFromCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_ped_ambient_speech_native(&self, ped_: u32,
speech_name_: Option<String>,
speech_param_: Option<String>,
p3_: i32) -> ResultOfPlayPedAmbientSpeechNative {
    unsafe {
        let mut ped_ = ped_;
let mut speech_name_ = sdk_helpers::create_c_string_ptr(speech_name_);
let mut speech_param_ = sdk_helpers::create_c_string_ptr(speech_param_);
let mut p3_ = p3_;
        let success = sdk::natives::play_ped_ambient_speech_native(
            ped_,
speech_name_.as_ref().unwrap(),
speech_param_.as_ref().unwrap(),
p3_,
        );
        
        
        ResultOfPlayPedAmbientSpeechNative {
            success,
            ret: (),
            
        }
    }
}

    fn native_hint_ambient_audio_bank(&self, audio_bank_: Option<String>,
p1_: bool,
p2_: i32) -> ResultOfHintAmbientAudioBank {
    unsafe {
        let mut native_return = Default::default();
let mut audio_bank_ = sdk_helpers::create_c_string_ptr(audio_bank_);
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::hint_ambient_audio_bank(
            &mut native_return,
audio_bank_.as_ref().unwrap(),
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfHintAmbientAudioBank {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ambient_speech_playing(&self, ped_: u32) -> ResultOfIsAmbientSpeechPlaying {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ambient_speech_playing(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsAmbientSpeechPlaying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_synchronized_audio_event(&self, scene_i_d_: i32) -> ResultOfStopSynchronizedAudioEvent {
    unsafe {
        let mut native_return = Default::default();
let mut scene_i_d_ = scene_i_d_;
        let success = sdk::natives::stop_synchronized_audio_event(
            &mut native_return,
scene_i_d_,
        );
        let native_return = native_return;
        
        ResultOfStopSynchronizedAudioEvent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ambient_speech_disabled(&self, ped_: u32) -> ResultOfIsAmbientSpeechDisabled {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ambient_speech_disabled(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsAmbientSpeechDisabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_init_synch_scene_audio_with_entity(&self, audio_event_: Option<String>,
entity_: u32) -> ResultOfInitSynchSceneAudioWithEntity {
    unsafe {
        let mut audio_event_ = sdk_helpers::create_c_string_ptr(audio_event_);
let mut entity_ = entity_;
        let success = sdk::natives::init_synch_scene_audio_with_entity(
            audio_event_.as_ref().unwrap(),
entity_,
        );
        
        
        ResultOfInitSynchSceneAudioWithEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_is_drunk(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedIsDrunk {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_is_drunk(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedIsDrunk {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_ped_to_conversation(&self, index_: i32,
ped_: u32,
p2_: Option<String>) -> ResultOfAddPedToConversation {
    unsafe {
        let mut index_ = index_;
let mut ped_ = ped_;
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
        let success = sdk::natives::add_ped_to_conversation(
            index_,
ped_,
p2_.as_ref().unwrap(),
        );
        
        
        ResultOfAddPedToConversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_skip_to_next_scripted_conversation_line(&self, ) -> ResultOfSkipToNextScriptedConversationLine {
    unsafe {
        
        let success = sdk::natives::skip_to_next_scripted_conversation_line(
            
        );
        
        
        ResultOfSkipToNextScriptedConversationLine {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ambient_zone_list_state(&self, ambient_zone_: Option<String>,
p1_: bool,
p2_: bool) -> ResultOfSetAmbientZoneListState {
    unsafe {
        let mut ambient_zone_ = sdk_helpers::create_c_string_ptr(ambient_zone_);
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_ambient_zone_list_state(
            ambient_zone_.as_ref().unwrap(),
p1_,
p2_,
        );
        
        
        ResultOfSetAmbientZoneListState {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_force_reverse_warning(&self, p0_: i32,
p1_: i32) -> ResultOfSetVehicleForceReverseWarning {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_force_reverse_warning(
            p0_,
p1_,
        );
        
        
        ResultOfSetVehicleForceReverseWarning {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ambient_voice_name_hash(&self, ped_: u32,
hash_: u32) -> ResultOfSetAmbientVoiceNameHash {
    unsafe {
        let mut ped_ = ped_;
let mut hash_ = hash_;
        let success = sdk::natives::set_ambient_voice_name_hash(
            ped_,
hash_,
        );
        
        
        ResultOfSetAmbientVoiceNameHash {
            success,
            ret: (),
            
        }
    }
}

    fn native_unhint_script_audio_bank(&self, ) -> ResultOfUnhintScriptAudioBank {
    unsafe {
        
        let success = sdk::natives::unhint_script_audio_bank(
            
        );
        
        
        ResultOfUnhintScriptAudioBank {
            success,
            ret: (),
            
        }
    }
}

    fn native_restart_scripted_conversation(&self, ) -> ResultOfRestartScriptedConversation {
    unsafe {
        
        let success = sdk::natives::restart_scripted_conversation(
            
        );
        
        
        ResultOfRestartScriptedConversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_conversations_persist_new(&self, p0_: bool,
p1_: bool,
p2_: bool) -> ResultOfSetVehicleConversationsPersistNew {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_vehicle_conversations_persist_new(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfSetVehicleConversationsPersistNew {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_horn_permanently_on(&self, vehicle_: u32) -> ResultOfSetHornPermanentlyOn {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_horn_permanently_on(
            vehicle_,
        );
        
        
        ResultOfSetHornPermanentlyOn {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_horn_permanently_on_time(&self, vehicle_: u32,
time_: f32) -> ResultOfSetHornPermanentlyOnTime {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut time_ = time_;
        let success = sdk::natives::set_horn_permanently_on_time(
            vehicle_,
time_,
        );
        
        
        ResultOfSetHornPermanentlyOnTime {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_ped_speaking(&self, ped_: u32,
shaking_: bool) -> ResultOfStopPedSpeaking {
    unsafe {
        let mut ped_ = ped_;
let mut shaking_ = shaking_;
        let success = sdk::natives::stop_ped_speaking(
            ped_,
shaking_,
        );
        
        
        ResultOfStopPedSpeaking {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_horn_active(&self, vehicle_: u32) -> ResultOfIsHornActive {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_horn_active(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsHornActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_prepare_alarm(&self, alarm_name_: Option<String>) -> ResultOfPrepareAlarm {
    unsafe {
        let mut native_return = Default::default();
let mut alarm_name_ = sdk_helpers::create_c_string_ptr(alarm_name_);
        let success = sdk::natives::prepare_alarm(
            &mut native_return,
alarm_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfPrepareAlarm {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_interrupt_conversation(&self, ped_: u32,
voiceline_: Option<String>,
speaker_: Option<String>) -> ResultOfInterruptConversation {
    unsafe {
        let mut ped_ = ped_;
let mut voiceline_ = sdk_helpers::create_c_string_ptr(voiceline_);
let mut speaker_ = sdk_helpers::create_c_string_ptr(speaker_);
        let success = sdk::natives::interrupt_conversation(
            ped_,
voiceline_.as_ref().unwrap(),
speaker_.as_ref().unwrap(),
        );
        
        
        ResultOfInterruptConversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_music_oneshot_playing(&self, ) -> ResultOfIsMusicOneshotPlaying {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_music_oneshot_playing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsMusicOneshotPlaying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_radio_retuning(&self, ) -> ResultOfIsRadioRetuning {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_radio_retuning(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsRadioRetuning {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_alarm(&self, alarm_name_: Option<String>,
toggle_: bool) -> ResultOfStopAlarm {
    unsafe {
        let mut alarm_name_ = sdk_helpers::create_c_string_ptr(alarm_name_);
let mut toggle_ = toggle_;
        let success = sdk::natives::stop_alarm(
            alarm_name_.as_ref().unwrap(),
toggle_,
        );
        
        
        ResultOfStopAlarm {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_sound(&self, sound_id_: i32) -> ResultOfStopSound {
    unsafe {
        let mut sound_id_ = sound_id_;
        let success = sdk::natives::stop_sound(
            sound_id_,
        );
        
        
        ResultOfStopSound {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_stream(&self, ) -> ResultOfStopStream {
    unsafe {
        
        let success = sdk::natives::stop_stream(
            
        );
        
        
        ResultOfStopStream {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_gender(&self, ped_: u32,
p1_: bool) -> ResultOfSetPedGender {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_gender(
            ped_,
p1_,
        );
        
        
        ResultOfSetPedGender {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_radio_station_genre(&self, ) -> ResultOfGetPlayerRadioStationGenre {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_player_radio_station_genre(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerRadioStationGenre {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_audio_script_cleanup_time(&self, time_: i32) -> ResultOfSetAudioScriptCleanupTime {
    unsafe {
        let mut time_ = time_;
        let success = sdk::natives::set_audio_script_cleanup_time(
            time_,
        );
        
        
        ResultOfSetAudioScriptCleanupTime {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radio_to_station_index(&self, radio_station_: i32) -> ResultOfSetRadioToStationIndex {
    unsafe {
        let mut radio_station_ = radio_station_;
        let success = sdk::natives::set_radio_to_station_index(
            radio_station_,
        );
        
        
        ResultOfSetRadioToStationIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_unregister_script_with_audio(&self, ) -> ResultOfUnregisterScriptWithAudio {
    unsafe {
        
        let success = sdk::natives::unregister_script_with_audio(
            
        );
        
        
        ResultOfUnregisterScriptWithAudio {
            success,
            ret: (),
            
        }
    }
}

    fn native_block_speech_context_group(&self, p0_: Option<String>,
p1_: i32) -> ResultOfBlockSpeechContextGroup {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
        let success = sdk::natives::block_speech_context_group(
            p0_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOfBlockSpeechContextGroup {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_ped_pain_audio(&self, ped_: u32,
toggle_: bool) -> ResultOfDisablePedPainAudio {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::disable_ped_pain_audio(
            ped_,
toggle_,
        );
        
        
        ResultOfDisablePedPainAudio {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_variation_chosen_for_scripted_line(&self, p0_: shared::MemoryBufferId) -> ResultOfGetVariationChosenForScriptedLine {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
        let success = sdk::natives::get_variation_chosen_for_scripted_line(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfGetVariationChosenForScriptedLine {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_stop_ped_speaking_synced(&self, ped_: u32,
p1_: bool) -> ResultOfStopPedSpeakingSynced {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::stop_ped_speaking_synced(
            ped_,
p1_,
        );
        
        
        ResultOfStopPedSpeakingSynced {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_default_horn_ignore_mods(&self, vehicle_: u32) -> ResultOfGetVehicleDefaultHornIgnoreMods {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_default_horn_ignore_mods(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleDefaultHornIgnoreMods {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_emitter_radio_station(&self, emitter_name_: Option<String>,
radio_station_: Option<String>,
p2_: i32) -> ResultOfSetEmitterRadioStation {
    unsafe {
        let mut emitter_name_ = sdk_helpers::create_c_string_ptr(emitter_name_);
let mut radio_station_ = sdk_helpers::create_c_string_ptr(radio_station_);
let mut p2_ = p2_;
        let success = sdk::natives::set_emitter_radio_station(
            emitter_name_.as_ref().unwrap(),
radio_station_.as_ref().unwrap(),
p2_,
        );
        
        
        ResultOfSetEmitterRadioStation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_variable_on_sound(&self, sound_id_: i32,
unk_variable_: Option<String>,
p2_: f32) -> ResultOfSetVariableOnSound {
    unsafe {
        let mut sound_id_ = sound_id_;
let mut unk_variable_ = sdk_helpers::create_c_string_ptr(unk_variable_);
let mut p2_ = p2_;
        let success = sdk::natives::set_variable_on_sound(
            sound_id_,
unk_variable_.as_ref().unwrap(),
p2_,
        );
        
        
        ResultOfSetVariableOnSound {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_mission_complete_audio(&self, audio_name_: Option<String>) -> ResultOfPlayMissionCompleteAudio {
    unsafe {
        let mut audio_name_ = sdk_helpers::create_c_string_ptr(audio_name_);
        let success = sdk::natives::play_mission_complete_audio(
            audio_name_.as_ref().unwrap(),
        );
        
        
        ResultOfPlayMissionCompleteAudio {
            success,
            ret: (),
            
        }
    }
}

    fn native_unlock_mission_news_story(&self, news_story_: i32) -> ResultOfUnlockMissionNewsStory {
    unsafe {
        let mut news_story_ = news_story_;
        let success = sdk::natives::unlock_mission_news_story(
            news_story_,
        );
        
        
        ResultOfUnlockMissionNewsStory {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_radio_station_name(&self, radio_station_: i32) -> ResultOfGetRadioStationName {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut radio_station_ = radio_station_;
        let success = sdk::natives::get_radio_station_name(
            native_return.pin_mut(),
radio_station_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetRadioStationName {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_all_broken_glass(&self, ) -> ResultOfClearAllBrokenGlass {
    unsafe {
        
        let success = sdk::natives::clear_all_broken_glass(
            
        );
        
        
        ResultOfClearAllBrokenGlass {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_mobile_phone_radio_active(&self, ) -> ResultOfIsMobilePhoneRadioActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_mobile_phone_radio_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsMobilePhoneRadioActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_radio_track(&self, radio_station_: Option<String>,
radio_track_: Option<String>) -> ResultOfSetRadioTrack {
    unsafe {
        let mut radio_station_ = sdk_helpers::create_c_string_ptr(radio_station_);
let mut radio_track_ = sdk_helpers::create_c_string_ptr(radio_track_);
        let success = sdk::natives::set_radio_track(
            radio_station_.as_ref().unwrap(),
radio_track_.as_ref().unwrap(),
        );
        
        
        ResultOfSetRadioTrack {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_portal_settings_override(&self, p0_: Option<String>) -> ResultOfRemovePortalSettingsOverride {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::remove_portal_settings_override(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOfRemovePortalSettingsOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_cancel_all_police_reports(&self, ) -> ResultOfCancelAllPoliceReports {
    unsafe {
        
        let success = sdk::natives::cancel_all_police_reports(
            
        );
        
        
        ResultOfCancelAllPoliceReports {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_no_ducking_for_conversation(&self, p0_: bool) -> ResultOfSetNoDuckingForConversation {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_no_ducking_for_conversation(
            p0_,
        );
        
        
        ResultOfSetNoDuckingForConversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_audio_scene_active(&self, scene_: Option<String>) -> ResultOfIsAudioSceneActive {
    unsafe {
        let mut native_return = Default::default();
let mut scene_ = sdk_helpers::create_c_string_ptr(scene_);
        let success = sdk::natives::is_audio_scene_active(
            &mut native_return,
scene_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfIsAudioSceneActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_microphone_position(&self, toggle_: bool,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
x3_: f32,
y3_: f32,
z3_: f32) -> ResultOfSetMicrophonePosition {
    unsafe {
        let mut toggle_ = toggle_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut x3_ = x3_;
let mut y3_ = y3_;
let mut z3_ = z3_;
        let success = sdk::natives::set_microphone_position(
            toggle_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
x3_,
y3_,
z3_,
        );
        
        
        ResultOfSetMicrophonePosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_stream_from_vehicle(&self, vehicle_: u32) -> ResultOfPlayStreamFromVehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::play_stream_from_vehicle(
            vehicle_,
        );
        
        
        ResultOfPlayStreamFromVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_stunt_jump_audio(&self, ) -> ResultOfEnableStuntJumpAudio {
    unsafe {
        
        let success = sdk::natives::enable_stunt_jump_audio(
            
        );
        
        
        ResultOfEnableStuntJumpAudio {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_current_playing_ambient_speech(&self, ped_: u32) -> ResultOfStopCurrentPlayingAmbientSpeech {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::stop_current_playing_ambient_speech(
            ped_,
        );
        
        
        ResultOfStopCurrentPlayingAmbientSpeech {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_audio_flag(&self, flag_name_: Option<String>,
toggle_: bool) -> ResultOfSetAudioFlag {
    unsafe {
        let mut flag_name_ = sdk_helpers::create_c_string_ptr(flag_name_);
let mut toggle_ = toggle_;
        let success = sdk::natives::set_audio_flag(
            flag_name_.as_ref().unwrap(),
toggle_,
        );
        
        
        ResultOfSetAudioFlag {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_audio_scenes(&self, ) -> ResultOfStopAudioScenes {
    unsafe {
        
        let success = sdk::natives::stop_audio_scenes(
            
        );
        
        
        ResultOfStopAudioScenes {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_radio_loud(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleRadioLoud {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_radio_loud(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleRadioLoud {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_pain(&self, ped_: u32,
pain_i_d_: i32,
p1_: i32,
p3_: i32) -> ResultOfPlayPain {
    unsafe {
        let mut ped_ = ped_;
let mut pain_i_d_ = pain_i_d_;
let mut p1_ = p1_;
let mut p3_ = p3_;
        let success = sdk::natives::play_pain(
            ped_,
pain_i_d_,
p1_,
p3_,
        );
        
        
        ResultOfPlayPain {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_variable_on_synch_scene_audio(&self, unk_variable_name_: Option<String>,
value_: f32) -> ResultOfSetVariableOnSynchSceneAudio {
    unsafe {
        let mut unk_variable_name_ = sdk_helpers::create_c_string_ptr(unk_variable_name_);
let mut value_ = value_;
        let success = sdk::natives::set_variable_on_synch_scene_audio(
            unk_variable_name_.as_ref().unwrap(),
value_,
        );
        
        
        ResultOfSetVariableOnSynchSceneAudio {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ambient_zone_state(&self, zone_name_: Option<String>,
p1_: bool,
p2_: bool) -> ResultOfSetAmbientZoneState {
    unsafe {
        let mut zone_name_ = sdk_helpers::create_c_string_ptr(zone_name_);
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_ambient_zone_state(
            zone_name_.as_ref().unwrap(),
p1_,
p2_,
        );
        
        
        ResultOfSetAmbientZoneState {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_skip_minigun_spin_up_audio(&self, p0_: bool) -> ResultOfSetSkipMinigunSpinUpAudio {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_skip_minigun_spin_up_audio(
            p0_,
        );
        
        
        ResultOfSetSkipMinigunSpinUpAudio {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mobile_phone_radio_state(&self, state_: bool) -> ResultOfSetMobilePhoneRadioState {
    unsafe {
        let mut state_ = state_;
        let success = sdk::natives::set_mobile_phone_radio_state(
            state_,
        );
        
        
        ResultOfSetMobilePhoneRadioState {
            success,
            ret: (),
            
        }
    }
}

    fn native_use_footstep_script_sweeteners(&self, ped_: u32,
p1_: bool,
hash_: u32) -> ResultOfUseFootstepScriptSweeteners {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut hash_ = hash_;
        let success = sdk::natives::use_footstep_script_sweeteners(
            ped_,
p1_,
hash_,
        );
        
        
        ResultOfUseFootstepScriptSweeteners {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_stall_warning_sounds(&self, vehicle_: u32,
toggle_: bool) -> ResultOfEnableStallWarningSounds {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::enable_stall_warning_sounds(
            vehicle_,
toggle_,
        );
        
        
        ResultOfEnableStallWarningSounds {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_veh_forced_radio_this_frame(&self, vehicle_: u32) -> ResultOfSetVehForcedRadioThisFrame {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_veh_forced_radio_this_frame(
            vehicle_,
        );
        
        
        ResultOfSetVehForcedRadioThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radio_auto_unfreeze(&self, toggle_: bool) -> ResultOfSetRadioAutoUnfreeze {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_radio_auto_unfreeze(
            toggle_,
        );
        
        
        ResultOfSetRadioAutoUnfreeze {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_animal_vocalization_playing(&self, ped_handle_: u32) -> ResultOfIsAnimalVocalizationPlaying {
    unsafe {
        let mut native_return = Default::default();
let mut ped_handle_ = ped_handle_;
        let success = sdk::natives::is_animal_vocalization_playing(
            &mut native_return,
ped_handle_,
        );
        let native_return = native_return;
        
        ResultOfIsAnimalVocalizationPlaying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_line_to_conversation(&self, index_: i32,
p1_: Option<String>,
p2_: Option<String>,
p3_: i32,
p4_: i32,
p5_: bool,
p6_: bool,
p7_: bool,
p8_: bool,
p9_: i32,
p10_: bool,
p11_: bool,
p12_: bool) -> ResultOfAddLineToConversation {
    unsafe {
        let mut index_ = index_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
let mut p12_ = p12_;
        let success = sdk::natives::add_line_to_conversation(
            index_,
p1_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
p11_,
p12_,
        );
        
        
        ResultOfAddLineToConversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_next_audible_beat(&self, out1_: f32,
out2_: f32,
out3_: i32) -> ResultOfGetNextAudibleBeat {
    unsafe {
        let mut native_return = Default::default();
let mut out1_ = out1_;
let mut out2_ = out2_;
let mut out3_ = out3_;
        let success = sdk::natives::get_next_audible_beat(
            &mut native_return,
&mut out1_,
&mut out2_,
&mut out3_,
        );
        let native_return = native_return;
let out1_ = out1_;
let out2_ = out2_;
let out3_ = out3_;
        
        ResultOfGetNextAudibleBeat {
            success,
            ret: native_return,
            out1_,
out2_,
out3_
        }
    }
}

    fn native_play_ped_ambient_speech_and_clone_native(&self, ped_: u32,
speech_name_: Option<String>,
speech_param_: Option<String>,
p3_: i32) -> ResultOfPlayPedAmbientSpeechAndCloneNative {
    unsafe {
        let mut ped_ = ped_;
let mut speech_name_ = sdk_helpers::create_c_string_ptr(speech_name_);
let mut speech_param_ = sdk_helpers::create_c_string_ptr(speech_param_);
let mut p3_ = p3_;
        let success = sdk::natives::play_ped_ambient_speech_and_clone_native(
            ped_,
speech_name_.as_ref().unwrap(),
speech_param_.as_ref().unwrap(),
p3_,
        );
        
        
        ResultOfPlayPedAmbientSpeechAndCloneNative {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radio_to_station_name(&self, station_name_: Option<String>) -> ResultOfSetRadioToStationName {
    unsafe {
        let mut station_name_ = sdk_helpers::create_c_string_ptr(station_name_);
        let success = sdk::natives::set_radio_to_station_name(
            station_name_.as_ref().unwrap(),
        );
        
        
        ResultOfSetRadioToStationName {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_script_with_audio(&self, p0_: i32) -> ResultOfRegisterScriptWithAudio {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::register_script_with_audio(
            p0_,
        );
        
        
        ResultOfRegisterScriptWithAudio {
            success,
            ret: (),
            
        }
    }
}

    fn native_prepare_synchronized_audio_event(&self, audio_event_: Option<String>,
p1_: i32) -> ResultOfPrepareSynchronizedAudioEvent {
    unsafe {
        let mut native_return = Default::default();
let mut audio_event_ = sdk_helpers::create_c_string_ptr(audio_event_);
let mut p1_ = p1_;
        let success = sdk::natives::prepare_synchronized_audio_event(
            &mut native_return,
audio_event_.as_ref().unwrap(),
p1_,
        );
        let native_return = native_return;
        
        ResultOfPrepareSynchronizedAudioEvent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_mobile_interference_active(&self, ) -> ResultOfIsMobileInterferenceActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_mobile_interference_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsMobileInterferenceActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_init_synch_scene_audio_with_position(&self, audio_event_: Option<String>,
x_: f32,
y_: f32,
z_: f32) -> ResultOfInitSynchSceneAudioWithPosition {
    unsafe {
        let mut audio_event_ = sdk_helpers::create_c_string_ptr(audio_event_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::init_synch_scene_audio_with_position(
            audio_event_.as_ref().unwrap(),
x_,
y_,
z_,
        );
        
        
        ResultOfInitSynchSceneAudioWithPosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_preload_vehicle_audio_bank(&self, vehicle_model_: u32) -> ResultOfPreloadVehicleAudioBank {
    unsafe {
        let mut vehicle_model_ = vehicle_model_;
        let success = sdk::natives::preload_vehicle_audio_bank(
            vehicle_model_,
        );
        
        
        ResultOfPreloadVehicleAudioBank {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_deferred_sound_frontend(&self, sound_name_: Option<String>,
soundset_name_: Option<String>) -> ResultOfPlayDeferredSoundFrontend {
    unsafe {
        let mut sound_name_ = sdk_helpers::create_c_string_ptr(sound_name_);
let mut soundset_name_ = sdk_helpers::create_c_string_ptr(soundset_name_);
        let success = sdk::natives::play_deferred_sound_frontend(
            sound_name_.as_ref().unwrap(),
soundset_name_.as_ref().unwrap(),
        );
        
        
        ResultOfPlayDeferredSoundFrontend {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_animal_mood(&self, animal_: u32,
mood_: i32) -> ResultOfSetAnimalMood {
    unsafe {
        let mut animal_ = animal_;
let mut mood_ = mood_;
        let success = sdk::natives::set_animal_mood(
            animal_,
mood_,
        );
        
        
        ResultOfSetAnimalMood {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_scripted_speech_playing(&self, p0_: u32) -> ResultOfIsScriptedSpeechPlaying {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::is_scripted_speech_playing(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfIsScriptedSpeechPlaying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_play_end_credits_music(&self, play_: bool) -> ResultOfPlayEndCreditsMusic {
    unsafe {
        let mut play_ = play_;
        let success = sdk::natives::play_end_credits_music(
            play_,
        );
        
        
        ResultOfPlayEndCreditsMusic {
            success,
            ret: (),
            
        }
    }
}

    fn native_release_weapon_audio(&self, ) -> ResultOfReleaseWeaponAudio {
    unsafe {
        
        let success = sdk::natives::release_weapon_audio(
            
        );
        
        
        ResultOfReleaseWeaponAudio {
            success,
            ret: (),
            
        }
    }
}

    fn native_activate_audio_slowmo_mode(&self, mode_: Option<String>) -> ResultOfActivateAudioSlowmoMode {
    unsafe {
        let mut mode_ = sdk_helpers::create_c_string_ptr(mode_);
        let success = sdk::natives::activate_audio_slowmo_mode(
            mode_.as_ref().unwrap(),
        );
        
        
        ResultOfActivateAudioSlowmoMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_stream_playing(&self, ) -> ResultOfIsStreamPlaying {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_stream_playing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsStreamPlaying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_new_scripted_conversation(&self, ) -> ResultOfCreateNewScriptedConversation {
    unsafe {
        
        let success = sdk::natives::create_new_scripted_conversation(
            
        );
        
        
        ResultOfCreateNewScriptedConversation {
            success,
            ret: (),
            
        }
    }
}

    fn native_override_player_ground_material(&self, hash_: u32,
toggle_: bool) -> ResultOfOverridePlayerGroundMaterial {
    unsafe {
        let mut hash_ = hash_;
let mut toggle_ = toggle_;
        let success = sdk::natives::override_player_ground_material(
            hash_,
toggle_,
        );
        
        
        ResultOfOverridePlayerGroundMaterial {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_vehicle_startup_rev_sound(&self, vehicle_: u32) -> ResultOfResetVehicleStartupRevSound {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::reset_vehicle_startup_rev_sound(
            vehicle_,
        );
        
        
        ResultOfResetVehicleStartupRevSound {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_horn_sound_index(&self, vehicle_: u32) -> ResultOfGetVehicleHornSoundIndex {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_horn_sound_index(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleHornSoundIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_freeze_microphone(&self, ) -> ResultOfFreezeMicrophone {
    unsafe {
        
        let success = sdk::natives::freeze_microphone(
            
        );
        
        
        ResultOfFreezeMicrophone {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_scripted_conversation(&self, p0_: bool) -> ResultOfStopScriptedConversation {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::stop_scripted_conversation(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfStopScriptedConversation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_positioned_player_vehicle_radio_emitter_enabled(&self, p0_: i32) -> ResultOfSetPositionedPlayerVehicleRadioEmitterEnabled {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_positioned_player_vehicle_radio_emitter_enabled(
            p0_,
        );
        
        
        ResultOfSetPositionedPlayerVehicleRadioEmitterEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radio_retune_down(&self, ) -> ResultOfSetRadioRetuneDown {
    unsafe {
        
        let success = sdk::natives::set_radio_retune_down(
            
        );
        
        
        ResultOfSetRadioRetuneDown {
            success,
            ret: (),
            
        }
    }
}

    fn native_deactivate_audio_slowmo_mode(&self, mode_: Option<String>) -> ResultOfDeactivateAudioSlowmoMode {
    unsafe {
        let mut mode_ = sdk_helpers::create_c_string_ptr(mode_);
        let success = sdk::natives::deactivate_audio_slowmo_mode(
            mode_.as_ref().unwrap(),
        );
        
        
        ResultOfDeactivateAudioSlowmoMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_scripted_conversation_loaded(&self, ) -> ResultOfIsScriptedConversationLoaded {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_scripted_conversation_loaded(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsScriptedConversationLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_audio_scene(&self, scene_: Option<String>) -> ResultOfStopAudioScene {
    unsafe {
        let mut scene_ = sdk_helpers::create_c_string_ptr(scene_);
        let success = sdk::natives::stop_audio_scene(
            scene_.as_ref().unwrap(),
        );
        
        
        ResultOfStopAudioScene {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_police_report(&self, name_: Option<String>,
p1_: f32) -> ResultOfPlayPoliceReport {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut p1_ = p1_;
        let success = sdk::natives::play_police_report(
            &mut native_return,
name_.as_ref().unwrap(),
p1_,
        );
        let native_return = native_return;
        
        ResultOfPlayPoliceReport {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_smoke_grenade_explosion_sounds(&self, ) -> ResultOfStopSmokeGrenadeExplosionSounds {
    unsafe {
        
        let success = sdk::natives::stop_smoke_grenade_explosion_sounds(
            
        );
        
        
        ResultOfStopSmokeGrenadeExplosionSounds {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_audio_vehicle_priority(&self, vehicle_: u32,
p1_: i32) -> ResultOfSetAudioVehiclePriority {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_audio_vehicle_priority(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetAudioVehiclePriority {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_sound_from_entity(&self, sound_id_: i32,
audio_name_: Option<String>,
entity_: u32,
audio_ref_: Option<String>,
is_network_: bool,
p5_: i32) -> ResultOfPlaySoundFromEntity {
    unsafe {
        let mut sound_id_ = sound_id_;
let mut audio_name_ = sdk_helpers::create_c_string_ptr(audio_name_);
let mut entity_ = entity_;
let mut audio_ref_ = sdk_helpers::create_c_string_ptr(audio_ref_);
let mut is_network_ = is_network_;
let mut p5_ = p5_;
        let success = sdk::natives::play_sound_from_entity(
            sound_id_,
audio_name_.as_ref().unwrap(),
entity_,
audio_ref_.as_ref().unwrap(),
is_network_,
p5_,
        );
        
        
        ResultOfPlaySoundFromEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_preloaded_conversation_ready(&self, ) -> ResultOfGetIsPreloadedConversationReady {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_preloaded_conversation_ready(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetIsPreloadedConversationReady {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_trevor_rage(&self, ) -> ResultOfResetTrevorRage {
    unsafe {
        
        let success = sdk::natives::reset_trevor_rage(
            
        );
        
        
        ResultOfResetTrevorRage {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_music_playtime(&self, ) -> ResultOfGetMusicPlaytime {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_music_playtime(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetMusicPlaytime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_radio_station_index(&self, ) -> ResultOfGetPlayerRadioStationIndex {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_player_radio_station_index(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerRadioStationIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_angry(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPlayerAngry {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_angry(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPlayerAngry {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_stream_from_object(&self, object_: u32) -> ResultOfPlayStreamFromObject {
    unsafe {
        let mut object_ = object_;
        let success = sdk::natives::play_stream_from_object(
            object_,
        );
        
        
        ResultOfPlayStreamFromObject {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_ambient_speech_from_position_native(&self, speech_name_: Option<String>,
voice_name_: Option<String>,
x_: f32,
y_: f32,
z_: f32,
speech_param_: Option<String>) -> ResultOfPlayAmbientSpeechFromPositionNative {
    unsafe {
        let mut speech_name_ = sdk_helpers::create_c_string_ptr(speech_name_);
let mut voice_name_ = sdk_helpers::create_c_string_ptr(voice_name_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut speech_param_ = sdk_helpers::create_c_string_ptr(speech_param_);
        let success = sdk::natives::play_ambient_speech_from_position_native(
            speech_name_.as_ref().unwrap(),
voice_name_.as_ref().unwrap(),
x_,
y_,
z_,
speech_param_.as_ref().unwrap(),
        );
        
        
        ResultOfPlayAmbientSpeechFromPositionNative {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_animal_vocalization(&self, ped_handle_: u32,
p1_: i32,
speech_name_: Option<String>) -> ResultOfPlayAnimalVocalization {
    unsafe {
        let mut ped_handle_ = ped_handle_;
let mut p1_ = p1_;
let mut speech_name_ = sdk_helpers::create_c_string_ptr(speech_name_);
        let success = sdk::natives::play_animal_vocalization(
            ped_handle_,
p1_,
speech_name_.as_ref().unwrap(),
        );
        
        
        ResultOfPlayAnimalVocalization {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_audio_scene_variable(&self, scene_: Option<String>,
unk_variable_: Option<String>,
value_: f32) -> ResultOfSetAudioSceneVariable {
    unsafe {
        let mut scene_ = sdk_helpers::create_c_string_ptr(scene_);
let mut unk_variable_ = sdk_helpers::create_c_string_ptr(unk_variable_);
let mut value_ = value_;
        let success = sdk::natives::set_audio_scene_variable(
            scene_.as_ref().unwrap(),
unk_variable_.as_ref().unwrap(),
value_,
        );
        
        
        ResultOfSetAudioSceneVariable {
            success,
            ret: (),
            
        }
    }
}

    fn native_block_death_jingle(&self, toggle_: bool) -> ResultOfBlockDeathJingle {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::block_death_jingle(
            toggle_,
        );
        
        
        ResultOfBlockDeathJingle {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_num_unlocked_radio_stations(&self, ) -> ResultOfGetNumUnlockedRadioStations {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_num_unlocked_radio_stations(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetNumUnlockedRadioStations {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_startup_rev_sound(&self, vehicle_: u32,
p1_: Option<String>,
p2_: Option<String>) -> ResultOfSetVehicleStartupRevSound {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
        let success = sdk::natives::set_vehicle_startup_rev_sound(
            vehicle_,
p1_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
        );
        
        
        ResultOfSetVehicleStartupRevSound {
            success,
            ret: (),
            
        }
    }
}

    fn native_override_underwater_stream(&self, p0_: Option<String>,
p1_: bool) -> ResultOfOverrideUnderwaterStream {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
        let success = sdk::natives::override_underwater_stream(
            p0_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOfOverrideUnderwaterStream {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_missile_warning_enabled(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleMissileWarningEnabled {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_missile_warning_enabled(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleMissileWarningEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ambient_zone_list_state_persistent(&self, ambient_zone_: Option<String>,
p1_: bool,
p2_: bool) -> ResultOfSetAmbientZoneListStatePersistent {
    unsafe {
        let mut ambient_zone_ = sdk_helpers::create_c_string_ptr(ambient_zone_);
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_ambient_zone_list_state_persistent(
            ambient_zone_.as_ref().unwrap(),
p1_,
p2_,
        );
        
        
        ResultOfSetAmbientZoneListStatePersistent {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_ped_audio_flags(&self, ped_: u32) -> ResultOfResetPedAudioFlags {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::reset_ped_audio_flags(
            ped_,
        );
        
        
        ResultOfResetPedAudioFlags {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_siren_bypass_mp_driver_check(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetSirenBypassMpDriverCheck {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_siren_bypass_mp_driver_check(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetSirenBypassMpDriverCheck {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_radio_station_name(&self, ) -> ResultOfGetPlayerRadioStationName {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
        let success = sdk::natives::get_player_radio_station_name(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetPlayerRadioStationName {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_frontend_radio_active(&self, active_: bool) -> ResultOfSetFrontendRadioActive {
    unsafe {
        let mut active_ = active_;
        let success = sdk::natives::set_frontend_radio_active(
            active_,
        );
        
        
        ResultOfSetFrontendRadioActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_block_all_speech_from_ped(&self, ped_: u32,
p1_: bool,
p2_: bool) -> ResultOfBlockAllSpeechFromPed {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::block_all_speech_from_ped(
            ped_,
p1_,
p2_,
        );
        
        
        ResultOfBlockAllSpeechFromPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_ped_ringtone(&self, ringtone_name_: Option<String>,
ped_: u32,
p2_: bool) -> ResultOfPlayPedRingtone {
    unsafe {
        let mut ringtone_name_ = sdk_helpers::create_c_string_ptr(ringtone_name_);
let mut ped_ = ped_;
let mut p2_ = p2_;
        let success = sdk::natives::play_ped_ringtone(
            ringtone_name_.as_ref().unwrap(),
ped_,
p2_,
        );
        
        
        ResultOfPlayPedRingtone {
            success,
            ret: (),
            
        }
    }
}

    fn native_use_siren_as_horn(&self, vehicle_: u32,
toggle_: bool) -> ResultOfUseSirenAsHorn {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::use_siren_as_horn(
            vehicle_,
toggle_,
        );
        
        
        ResultOfUseSirenAsHorn {
            success,
            ret: (),
            
        }
    }
}

    fn native_hint_script_audio_bank(&self, audio_bank_: Option<String>,
p1_: bool,
p2_: i32) -> ResultOfHintScriptAudioBank {
    unsafe {
        let mut native_return = Default::default();
let mut audio_bank_ = sdk_helpers::create_c_string_ptr(audio_bank_);
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::hint_script_audio_bank(
            &mut native_return,
audio_bank_.as_ref().unwrap(),
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfHintScriptAudioBank {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_record_broken_glass(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOfRecordBrokenGlass {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::record_broken_glass(
            x_,
y_,
z_,
radius_,
        );
        
        
        ResultOfRecordBrokenGlass {
            success,
            ret: (),
            
        }
    }
}

    fn native_unfreeze_radio_station(&self, radio_station_: Option<String>) -> ResultOfUnfreezeRadioStation {
    unsafe {
        let mut radio_station_ = sdk_helpers::create_c_string_ptr(radio_station_);
        let success = sdk::natives::unfreeze_radio_station(
            radio_station_.as_ref().unwrap(),
        );
        
        
        ResultOfUnfreezeRadioStation {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_sound_finished(&self, sound_id_: i32) -> ResultOfHasSoundFinished {
    unsafe {
        let mut native_return = Default::default();
let mut sound_id_ = sound_id_;
        let success = sdk::natives::has_sound_finished(
            &mut native_return,
sound_id_,
        );
        let native_return = native_return;
        
        ResultOfHasSoundFinished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_ambient_audio_bank(&self, audio_bank_: Option<String>,
p1_: bool,
p2_: i32) -> ResultOfRequestAmbientAudioBank {
    unsafe {
        let mut native_return = Default::default();
let mut audio_bank_ = sdk_helpers::create_c_string_ptr(audio_bank_);
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::request_ambient_audio_bank(
            &mut native_return,
audio_bank_.as_ref().unwrap(),
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfRequestAmbientAudioBank {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_radio_retune_up(&self, ) -> ResultOfSetRadioRetuneUp {
    unsafe {
        
        let success = sdk::natives::set_radio_retune_up(
            
        );
        
        
        ResultOfSetRadioRetuneUp {
            success,
            ret: (),
            
        }
    }
}

    fn native_lock_radio_station_track_list(&self, radio_station_: Option<String>,
track_list_name_: Option<String>) -> ResultOfLockRadioStationTrackList {
    unsafe {
        let mut radio_station_ = sdk_helpers::create_c_string_ptr(radio_station_);
let mut track_list_name_ = sdk_helpers::create_c_string_ptr(track_list_name_);
        let success = sdk::natives::lock_radio_station_track_list(
            radio_station_.as_ref().unwrap(),
track_list_name_.as_ref().unwrap(),
        );
        
        
        ResultOfLockRadioStationTrackList {
            success,
            ret: (),
            
        }
    }
}

    fn native_reactivate_all_world_brains_that_are_waiting_till_out_of_range(&self, ) -> ResultOfReactivateAllWorldBrainsThatAreWaitingTillOutOfRange {
    unsafe {
        
        let success = sdk::natives::reactivate_all_world_brains_that_are_waiting_till_out_of_range(
            
        );
        
        
        ResultOfReactivateAllWorldBrainsThatAreWaitingTillOutOfRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_object_script_brain(&self, script_name_: Option<String>,
model_hash_: u32,
p2_: i32,
activation_range_: f32,
p4_: i32,
p5_: i32) -> ResultOfRegisterObjectScriptBrain {
    unsafe {
        let mut script_name_ = sdk_helpers::create_c_string_ptr(script_name_);
let mut model_hash_ = model_hash_;
let mut p2_ = p2_;
let mut activation_range_ = activation_range_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::register_object_script_brain(
            script_name_.as_ref().unwrap(),
model_hash_,
p2_,
activation_range_,
p4_,
p5_,
        );
        
        
        ResultOfRegisterObjectScriptBrain {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_script_brain_set(&self, brain_set_: i32) -> ResultOfDisableScriptBrainSet {
    unsafe {
        let mut brain_set_ = brain_set_;
        let success = sdk::natives::disable_script_brain_set(
            brain_set_,
        );
        
        
        ResultOfDisableScriptBrainSet {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_world_point_script_brain(&self, script_name_: Option<String>,
activation_range_: f32,
p2_: i32) -> ResultOfRegisterWorldPointScriptBrain {
    unsafe {
        let mut script_name_ = sdk_helpers::create_c_string_ptr(script_name_);
let mut activation_range_ = activation_range_;
let mut p2_ = p2_;
        let success = sdk::natives::register_world_point_script_brain(
            script_name_.as_ref().unwrap(),
activation_range_,
p2_,
        );
        
        
        ResultOfRegisterWorldPointScriptBrain {
            success,
            ret: (),
            
        }
    }
}

    fn native_reactivate_all_object_brains_that_are_waiting_till_out_of_range(&self, ) -> ResultOfReactivateAllObjectBrainsThatAreWaitingTillOutOfRange {
    unsafe {
        
        let success = sdk::natives::reactivate_all_object_brains_that_are_waiting_till_out_of_range(
            
        );
        
        
        ResultOfReactivateAllObjectBrainsThatAreWaitingTillOutOfRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_script_to_random_ped(&self, name_: Option<String>,
model_: u32,
p2_: f32,
p3_: f32) -> ResultOfAddScriptToRandomPed {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut model_ = model_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::add_script_to_random_ped(
            name_.as_ref().unwrap(),
model_,
p2_,
p3_,
        );
        
        
        ResultOfAddScriptToRandomPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_script_brain_set(&self, brain_set_: i32) -> ResultOfEnableScriptBrainSet {
    unsafe {
        let mut brain_set_ = brain_set_;
        let success = sdk::natives::enable_script_brain_set(
            brain_set_,
        );
        
        
        ResultOfEnableScriptBrainSet {
            success,
            ret: (),
            
        }
    }
}

    fn native_reactivate_named_world_brains_waiting_till_out_of_range(&self, script_name_: Option<String>) -> ResultOfReactivateNamedWorldBrainsWaitingTillOutOfRange {
    unsafe {
        let mut script_name_ = sdk_helpers::create_c_string_ptr(script_name_);
        let success = sdk::natives::reactivate_named_world_brains_waiting_till_out_of_range(
            script_name_.as_ref().unwrap(),
        );
        
        
        ResultOfReactivateNamedWorldBrainsWaitingTillOutOfRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_reactivate_named_object_brains_waiting_till_out_of_range(&self, script_name_: Option<String>) -> ResultOfReactivateNamedObjectBrainsWaitingTillOutOfRange {
    unsafe {
        let mut script_name_ = sdk_helpers::create_c_string_ptr(script_name_);
        let success = sdk::natives::reactivate_named_object_brains_waiting_till_out_of_range(
            script_name_.as_ref().unwrap(),
        );
        
        
        ResultOfReactivateNamedObjectBrainsWaitingTillOutOfRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_world_point_within_brain_activation_range(&self, ) -> ResultOfIsWorldPointWithinBrainActivationRange {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_world_point_within_brain_activation_range(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsWorldPointWithinBrainActivationRange {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_object_within_brain_activation_range(&self, object_: u32) -> ResultOfIsObjectWithinBrainActivationRange {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::is_object_within_brain_activation_range(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOfIsObjectWithinBrainActivationRange {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_gameplay_cam_shaking(&self, ) -> ResultOfIsGameplayCamShaking {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_gameplay_cam_shaking(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsGameplayCamShaking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gameplay_cam_max_motion_blur_strength_this_update(&self, p0_: f32) -> ResultOfSetGameplayCamMaxMotionBlurStrengthThisUpdate {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_gameplay_cam_max_motion_blur_strength_this_update(
            p0_,
        );
        
        
        ResultOfSetGameplayCamMaxMotionBlurStrengthThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_active(&self, cam_: i32,
active_: bool) -> ResultOfSetCamActive {
    unsafe {
        let mut cam_ = cam_;
let mut active_ = active_;
        let success = sdk::natives::set_cam_active(
            cam_,
active_,
        );
        
        
        ResultOfSetCamActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_cam_spline_paused(&self, cam_: i32) -> ResultOfIsCamSplinePaused {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::is_cam_spline_paused(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOfIsCamSplinePaused {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_cam_rendering(&self, cam_: i32) -> ResultOfIsCamRendering {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::is_cam_rendering(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOfIsCamRendering {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_cam_interpolating(&self, cam_: i32) -> ResultOfIsCamInterpolating {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::is_cam_interpolating(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOfIsCamInterpolating {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cam_dof_strength(&self, cam_: i32) -> ResultOfGetCamDofStrength {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::get_cam_dof_strength(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOfGetCamDofStrength {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_render_script_cams(&self, render_: bool,
ease_: bool,
ease_time_: i32,
p3_: bool,
p4_: bool,
p5_: i32) -> ResultOfRenderScriptCams {
    unsafe {
        let mut render_ = render_;
let mut ease_ = ease_;
let mut ease_time_ = ease_time_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::render_script_cams(
            render_,
ease_,
ease_time_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOfRenderScriptCams {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_cam_spline_node_using_camera_frame(&self, cam_: i32,
cam2_: i32,
length_: i32,
p3_: i32) -> ResultOfAddCamSplineNodeUsingCameraFrame {
    unsafe {
        let mut cam_ = cam_;
let mut cam2_ = cam2_;
let mut length_ = length_;
let mut p3_ = p3_;
        let success = sdk::natives::add_cam_spline_node_using_camera_frame(
            cam_,
cam2_,
length_,
p3_,
        );
        
        
        ResultOfAddCamSplineNodeUsingCameraFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_vehicle_cam_stunt_settings_this_update(&self, ) -> ResultOfForceVehicleCamStuntSettingsThisUpdate {
    unsafe {
        
        let success = sdk::natives::force_vehicle_cam_stunt_settings_this_update(
            
        );
        
        
        ResultOfForceVehicleCamStuntSettingsThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_first_person_aim_cam_near_clip_this_update(&self, p0_: f32) -> ResultOfSetFirstPersonAimCamNearClipThisUpdate {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_first_person_aim_cam_near_clip_this_update(
            p0_,
        );
        
        
        ResultOfSetFirstPersonAimCamNearClipThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_gameplay_cam_shaking(&self, p0_: bool) -> ResultOfStopGameplayCamShaking {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stop_gameplay_cam_shaking(
            p0_,
        );
        
        
        ResultOfStopGameplayCamShaking {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_cam_spline_node_using_camera(&self, cam_: i32,
cam2_: i32,
length_: i32,
p3_: i32) -> ResultOfAddCamSplineNodeUsingCamera {
    unsafe {
        let mut cam_ = cam_;
let mut cam2_ = cam2_;
let mut length_ = length_;
let mut p3_ = p3_;
        let success = sdk::natives::add_cam_spline_node_using_camera(
            cam_,
cam2_,
length_,
p3_,
        );
        
        
        ResultOfAddCamSplineNodeUsingCamera {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_first_person_shooter_camera_heading(&self, yaw_: f32) -> ResultOfSetFirstPersonShooterCameraHeading {
    unsafe {
        let mut yaw_ = yaw_;
        let success = sdk::natives::set_first_person_shooter_camera_heading(
            yaw_,
        );
        
        
        ResultOfSetFirstPersonShooterCameraHeading {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_first_person_flash_effect_vehicle_model_hash(&self, vehicle_model_: u32) -> ResultOfSetFirstPersonFlashEffectVehicleModelHash {
    unsafe {
        let mut vehicle_model_ = vehicle_model_;
        let success = sdk::natives::set_first_person_flash_effect_vehicle_model_hash(
            vehicle_model_,
        );
        
        
        ResultOfSetFirstPersonFlashEffectVehicleModelHash {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cutscene_cam_far_clip_this_update(&self, p0_: f32) -> ResultOfSetCutsceneCamFarClipThisUpdate {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_cutscene_cam_far_clip_this_update(
            p0_,
        );
        
        
        ResultOfSetCutsceneCamFarClipThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_spline_duration(&self, cam_: i32,
time_duration_: i32) -> ResultOfSetCamSplineDuration {
    unsafe {
        let mut cam_ = cam_;
let mut time_duration_ = time_duration_;
        let success = sdk::natives::set_cam_spline_duration(
            cam_,
time_duration_,
        );
        
        
        ResultOfSetCamSplineDuration {
            success,
            ret: (),
            
        }
    }
}

    fn native_hard_attach_cam_to_ped_bone(&self, cam_: i32,
ped_: u32,
bone_index_: i32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: f32,
p8_: f32,
p9_: bool) -> ResultOfHardAttachCamToPedBone {
    unsafe {
        let mut cam_ = cam_;
let mut ped_ = ped_;
let mut bone_index_ = bone_index_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::hard_attach_cam_to_ped_bone(
            cam_,
ped_,
bone_index_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
        );
        
        
        ResultOfHardAttachCamToPedBone {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_gameplay_cam_coord(&self, ) -> ResultOfGetGameplayCamCoord {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
        let success = sdk::natives::get_gameplay_cam_coord(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetGameplayCamCoord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_final_rendered_cam_motion_blur_strength(&self, ) -> ResultOfGetFinalRenderedCamMotionBlurStrength {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_final_rendered_cam_motion_blur_strength(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetFinalRenderedCamMotionBlurStrength {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_use_shallow_dof_mode(&self, cam_: i32,
toggle_: bool) -> ResultOfSetCamUseShallowDofMode {
    unsafe {
        let mut cam_ = cam_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_cam_use_shallow_dof_mode(
            cam_,
toggle_,
        );
        
        
        ResultOfSetCamUseShallowDofMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_cinematic_slow_mo_this_update(&self, ) -> ResultOfDisableCinematicSlowMoThisUpdate {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::disable_cinematic_slow_mo_this_update(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfDisableCinematicSlowMoThisUpdate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gameplay_entity_hint(&self, entity_: u32,
x_offset_: f32,
y_offset_: f32,
z_offset_: f32,
p4_: bool,
time_: i32,
ease_in_time_: i32,
ease_out_time_: i32,
p8_: i32) -> ResultOfSetGameplayEntityHint {
    unsafe {
        let mut entity_ = entity_;
let mut x_offset_ = x_offset_;
let mut y_offset_ = y_offset_;
let mut z_offset_ = z_offset_;
let mut p4_ = p4_;
let mut time_ = time_;
let mut ease_in_time_ = ease_in_time_;
let mut ease_out_time_ = ease_out_time_;
let mut p8_ = p8_;
        let success = sdk::natives::set_gameplay_entity_hint(
            entity_,
x_offset_,
y_offset_,
z_offset_,
p4_,
time_,
ease_in_time_,
ease_out_time_,
p8_,
        );
        
        
        ResultOfSetGameplayEntityHint {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_follow_vehicle_cam_zoom_level(&self, zoom_level_: i32) -> ResultOfSetFollowVehicleCamZoomLevel {
    unsafe {
        let mut zoom_level_ = zoom_level_;
        let success = sdk::natives::set_follow_vehicle_cam_zoom_level(
            zoom_level_,
        );
        
        
        ResultOfSetFollowVehicleCamZoomLevel {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cam_active_view_mode_context(&self, ) -> ResultOfGetCamActiveViewModeContext {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_cam_active_view_mode_context(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetCamActiveViewModeContext {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_aim_cam_this_update(&self, ) -> ResultOfDisableAimCamThisUpdate {
    unsafe {
        
        let success = sdk::natives::disable_aim_cam_this_update(
            
        );
        
        
        ResultOfDisableAimCamThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_debug_name(&self, camera_: i32,
name_: Option<String>) -> ResultOfSetCamDebugName {
    unsafe {
        let mut camera_ = camera_;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::set_cam_debug_name(
            camera_,
name_.as_ref().unwrap(),
        );
        
        
        ResultOfSetCamDebugName {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_script_global_shaking(&self, p0_: bool) -> ResultOfStopScriptGlobalShaking {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stop_script_global_shaking(
            p0_,
        );
        
        
        ResultOfStopScriptGlobalShaking {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_in_vehicle_mobile_phone_camera_rendering(&self, ) -> ResultOfIsInVehicleMobilePhoneCameraRendering {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_in_vehicle_mobile_phone_camera_rendering(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsInVehicleMobilePhoneCameraRendering {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_hard_attach_cam_to_entity(&self, cam_: i32,
entity_: u32,
x_rot_: f32,
y_rot_: f32,
z_rot_: f32,
x_offset_: f32,
y_offset_: f32,
z_offset_: f32,
is_relative_: bool) -> ResultOfHardAttachCamToEntity {
    unsafe {
        let mut cam_ = cam_;
let mut entity_ = entity_;
let mut x_rot_ = x_rot_;
let mut y_rot_ = y_rot_;
let mut z_rot_ = z_rot_;
let mut x_offset_ = x_offset_;
let mut y_offset_ = y_offset_;
let mut z_offset_ = z_offset_;
let mut is_relative_ = is_relative_;
        let success = sdk::natives::hard_attach_cam_to_entity(
            cam_,
entity_,
x_rot_,
y_rot_,
z_rot_,
x_offset_,
y_offset_,
z_offset_,
is_relative_,
        );
        
        
        ResultOfHardAttachCamToEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_first_person_flash_effect_vehicle_model_name(&self, vehicle_name_: Option<String>) -> ResultOfSetFirstPersonFlashEffectVehicleModelName {
    unsafe {
        let mut vehicle_name_ = sdk_helpers::create_c_string_ptr(vehicle_name_);
        let success = sdk::natives::set_first_person_flash_effect_vehicle_model_name(
            vehicle_name_.as_ref().unwrap(),
        );
        
        
        ResultOfSetFirstPersonFlashEffectVehicleModelName {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_cinematic_cam_shaking(&self, p0_: bool) -> ResultOfStopCinematicCamShaking {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stop_cinematic_cam_shaking(
            p0_,
        );
        
        
        ResultOfStopCinematicCamShaking {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_spline_phase(&self, cam_: i32,
p1_: f32) -> ResultOfSetCamSplinePhase {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cam_spline_phase(
            cam_,
p1_,
        );
        
        
        ResultOfSetCamSplinePhase {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_code_gameplay_hint(&self, p0_: bool) -> ResultOfStopCodeGameplayHint {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stop_code_gameplay_hint(
            p0_,
        );
        
        
        ResultOfStopCodeGameplayHint {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cam_far_dof(&self, cam_: i32) -> ResultOfGetCamFarDof {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::get_cam_far_dof(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOfGetCamFarDof {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_final_rendered_remote_player_cam_rot(&self, player_: u32,
rotation_order_: i32) -> ResultOfGetFinalRenderedRemotePlayerCamRot {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut player_ = player_;
let mut rotation_order_ = rotation_order_;
        let success = sdk::natives::get_final_rendered_remote_player_cam_rot(
            native_return.pin_mut(),
player_,
rotation_order_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetFinalRenderedRemotePlayerCamRot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_allow_motion_blur_decay(&self, p0_: i32,
p1_: bool) -> ResultOfAllowMotionBlurDecay {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::allow_motion_blur_decay(
            p0_,
p1_,
        );
        
        
        ResultOfAllowMotionBlurDecay {
            success,
            ret: (),
            
        }
    }
}

    fn native_use_script_cam_for_ambient_population_origin_this_frame(&self, p0_: bool,
p1_: bool) -> ResultOfUseScriptCamForAmbientPopulationOriginThisFrame {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::use_script_cam_for_ambient_population_origin_this_frame(
            p0_,
p1_,
        );
        
        
        ResultOfUseScriptCamForAmbientPopulationOriginThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_bonnet_camera_relative_heading_and_pitch(&self, p0_: f32,
p1_: f32) -> ResultOfForceBonnetCameraRelativeHeadingAndPitch {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::force_bonnet_camera_relative_heading_and_pitch(
            p0_,
p1_,
        );
        
        
        ResultOfForceBonnetCameraRelativeHeadingAndPitch {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_view_mode_for_context(&self, context_: i32,
view_mode_: i32) -> ResultOfSetCamViewModeForContext {
    unsafe {
        let mut context_ = context_;
let mut view_mode_ = view_mode_;
        let success = sdk::natives::set_cam_view_mode_for_context(
            context_,
view_mode_,
        );
        
        
        ResultOfSetCamViewModeForContext {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gameplay_cam_ignore_entity_collision_this_update(&self, entity_: u32) -> ResultOfSetGameplayCamIgnoreEntityCollisionThisUpdate {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::set_gameplay_cam_ignore_entity_collision_this_update(
            entity_,
        );
        
        
        ResultOfSetGameplayCamIgnoreEntityCollisionThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gameplay_ped_hint(&self, ped_: u32,
x1_: f32,
y1_: f32,
z1_: f32,
p4_: bool,
duration_: i32,
blend_out_duration_: i32,
blend_in_duration_: i32) -> ResultOfSetGameplayPedHint {
    unsafe {
        let mut ped_ = ped_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut p4_ = p4_;
let mut duration_ = duration_;
let mut blend_out_duration_ = blend_out_duration_;
let mut blend_in_duration_ = blend_in_duration_;
        let success = sdk::natives::set_gameplay_ped_hint(
            ped_,
x1_,
y1_,
z1_,
p4_,
duration_,
blend_out_duration_,
blend_in_duration_,
        );
        
        
        ResultOfSetGameplayPedHint {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_dof_max_near_in_focus_distance_blend_level(&self, camera_: i32,
p1_: f32) -> ResultOfSetCamDofMaxNearInFocusDistanceBlendLevel {
    unsafe {
        let mut camera_ = camera_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cam_dof_max_near_in_focus_distance_blend_level(
            camera_,
p1_,
        );
        
        
        ResultOfSetCamDofMaxNearInFocusDistanceBlendLevel {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_first_person_aim_cam_relative_heading_limits_this_update(&self, p0_: f32,
p1_: f32) -> ResultOfSetFirstPersonAimCamRelativeHeadingLimitsThisUpdate {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_first_person_aim_cam_relative_heading_limits_this_update(
            p0_,
p1_,
        );
        
        
        ResultOfSetFirstPersonAimCamRelativeHeadingLimitsThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_interpolating_from_script_cams(&self, ) -> ResultOfIsInterpolatingFromScriptCams {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_interpolating_from_script_cams(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsInterpolatingFromScriptCams {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_cutscene_cam_shaking(&self, p0_: i32) -> ResultOfStopCutsceneCamShaking {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stop_cutscene_cam_shaking(
            p0_,
        );
        
        
        ResultOfStopCutsceneCamShaking {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_follow_ped_cam_zoom_level(&self, ) -> ResultOfGetFollowPedCamZoomLevel {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_follow_ped_cam_zoom_level(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetFollowPedCamZoomLevel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_tightspace_custom_framing_this_update(&self, ) -> ResultOfForceTightspaceCustomFramingThisUpdate {
    unsafe {
        
        let success = sdk::natives::force_tightspace_custom_framing_this_update(
            
        );
        
        
        ResultOfForceTightspaceCustomFramingThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_gameplay_cam_rendering(&self, ) -> ResultOfIsGameplayCamRendering {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_gameplay_cam_rendering(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsGameplayCamRendering {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_gameplay_cam_relative_pitch(&self, ) -> ResultOfGetGameplayCamRelativePitch {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_gameplay_cam_relative_pitch(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetGameplayCamRelativePitch {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_dof_planes(&self, cam_: i32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32) -> ResultOfSetCamDofPlanes {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::set_cam_dof_planes(
            cam_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfSetCamDofPlanes {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_near_dof(&self, cam_: i32,
near_d_o_f_: f32) -> ResultOfSetCamNearDof {
    unsafe {
        let mut cam_ = cam_;
let mut near_d_o_f_ = near_d_o_f_;
        let success = sdk::natives::set_cam_near_dof(
            cam_,
near_d_o_f_,
        );
        
        
        ResultOfSetCamNearDof {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_allow_custom_vehicle_drive_by_cam_this_update(&self, p0_: bool) -> ResultOfSetAllowCustomVehicleDriveByCamThisUpdate {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_allow_custom_vehicle_drive_by_cam_this_update(
            p0_,
        );
        
        
        ResultOfSetAllowCustomVehicleDriveByCamThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_override_cam_spline_velocity(&self, cam_: i32,
p1_: i32,
p2_: f32,
p3_: f32) -> ResultOfOverrideCamSplineVelocity {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::override_cam_spline_velocity(
            cam_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfOverrideCamSplineVelocity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_anim_current_phase(&self, cam_: i32,
phase_: f32) -> ResultOfSetCamAnimCurrentPhase {
    unsafe {
        let mut cam_ = cam_;
let mut phase_ = phase_;
        let success = sdk::natives::set_cam_anim_current_phase(
            cam_,
phase_,
        );
        
        
        ResultOfSetCamAnimCurrentPhase {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_third_person_aim_cam_near_clip_this_update(&self, p0_: f32) -> ResultOfSetThirdPersonAimCamNearClipThisUpdate {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_third_person_aim_cam_near_clip_this_update(
            p0_,
        );
        
        
        ResultOfSetThirdPersonAimCamNearClipThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_use_dedicated_stunt_camera_this_update(&self, cam_name_: Option<String>) -> ResultOfUseDedicatedStuntCameraThisUpdate {
    unsafe {
        let mut cam_name_ = sdk_helpers::create_c_string_ptr(cam_name_);
        let success = sdk::natives::use_dedicated_stunt_camera_this_update(
            cam_name_.as_ref().unwrap(),
        );
        
        
        ResultOfUseDedicatedStuntCameraThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_follow_ped_cam_this_update(&self, cam_name_: Option<String>,
p1_: i32) -> ResultOfSetFollowPedCamThisUpdate {
    unsafe {
        let mut native_return = Default::default();
let mut cam_name_ = sdk_helpers::create_c_string_ptr(cam_name_);
let mut p1_ = p1_;
        let success = sdk::natives::set_follow_ped_cam_this_update(
            &mut native_return,
cam_name_.as_ref().unwrap(),
p1_,
        );
        let native_return = native_return;
        
        ResultOfSetFollowPedCamThisUpdate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_inherit_roll_vehicle(&self, cam_: i32,
p1_: bool) -> ResultOfSetCamInheritRollVehicle {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cam_inherit_roll_vehicle(
            cam_,
p1_,
        );
        
        
        ResultOfSetCamInheritRollVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_scripted_camera_is_first_person_this_frame(&self, p0_: bool) -> ResultOfSetScriptedCameraIsFirstPersonThisFrame {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_scripted_camera_is_first_person_this_frame(
            p0_,
        );
        
        
        ResultOfSetScriptedCameraIsFirstPersonThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_dof_focal_length_multiplier(&self, camera_: i32,
multiplier_: f32) -> ResultOfSetCamDofFocalLengthMultiplier {
    unsafe {
        let mut camera_ = camera_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_cam_dof_focal_length_multiplier(
            camera_,
multiplier_,
        );
        
        
        ResultOfSetCamDofFocalLengthMultiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_camera_relative_heading_and_pitch(&self, roll_: f32,
pitch_: f32,
yaw_: f32) -> ResultOfForceCameraRelativeHeadingAndPitch {
    unsafe {
        let mut roll_ = roll_;
let mut pitch_ = pitch_;
let mut yaw_ = yaw_;
        let success = sdk::natives::force_camera_relative_heading_and_pitch(
            roll_,
pitch_,
yaw_,
        );
        
        
        ResultOfForceCameraRelativeHeadingAndPitch {
            success,
            ret: (),
            
        }
    }
}

    fn native_are_widescreen_borders_active(&self, ) -> ResultOfAreWidescreenBordersActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::are_widescreen_borders_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfAreWidescreenBordersActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gameplay_cam_motion_blur_scaling_this_update(&self, p0_: f32) -> ResultOfSetGameplayCamMotionBlurScalingThisUpdate {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_gameplay_cam_motion_blur_scaling_this_update(
            p0_,
        );
        
        
        ResultOfSetGameplayCamMotionBlurScalingThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_cam_collision_for_object(&self, entity_: u32) -> ResultOfDisableCamCollisionForObject {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::disable_cam_collision_for_object(
            entity_,
        );
        
        
        ResultOfDisableCamCollisionForObject {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_coord(&self, cam_: i32,
pos_x_: f32,
pos_y_: f32,
pos_z_: f32) -> ResultOfSetCamCoord {
    unsafe {
        let mut cam_ = cam_;
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
        let success = sdk::natives::set_cam_coord(
            cam_,
pos_x_,
pos_y_,
pos_z_,
        );
        
        
        ResultOfSetCamCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_cinematic_first_person_vehicle_interior_cam_rendering(&self, ) -> ResultOfIsCinematicFirstPersonVehicleInteriorCamRendering {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_cinematic_first_person_vehicle_interior_cam_rendering(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsCinematicFirstPersonVehicleInteriorCamRendering {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_fly_cam_horizontal_response(&self, cam_: i32,
p1_: f32,
p2_: f32,
p3_: f32) -> ResultOfSetFlyCamHorizontalResponse {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_fly_cam_horizontal_response(
            cam_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfSetFlyCamHorizontalResponse {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gameplay_hint_fov(&self, f_o_v_: f32) -> ResultOfSetGameplayHintFov {
    unsafe {
        let mut f_o_v_ = f_o_v_;
        let success = sdk::natives::set_gameplay_hint_fov(
            f_o_v_,
        );
        
        
        ResultOfSetGameplayHintFov {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cinematic_button_active(&self, p0_: bool) -> ResultOfSetCinematicButtonActive {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_cinematic_button_active(
            p0_,
        );
        
        
        ResultOfSetCinematicButtonActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_rendering_cam(&self, ) -> ResultOfGetRenderingCam {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_rendering_cam(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetRenderingCam {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_point_cam_at_entity(&self, cam_: i32,
entity_: u32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: bool) -> ResultOfPointCamAtEntity {
    unsafe {
        let mut cam_ = cam_;
let mut entity_ = entity_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::point_cam_at_entity(
            cam_,
entity_,
p2_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOfPointCamAtEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_first_person_flash_effect_this_update(&self, ) -> ResultOfDisableFirstPersonFlashEffectThisUpdate {
    unsafe {
        
        let success = sdk::natives::disable_first_person_flash_effect_this_update(
            
        );
        
        
        ResultOfDisableFirstPersonFlashEffectThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_near_clip_scan_this_update(&self, ) -> ResultOfDisableNearClipScanThisUpdate {
    unsafe {
        
        let success = sdk::natives::disable_near_clip_scan_this_update(
            
        );
        
        
        ResultOfDisableNearClipScanThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_follow_ped_cam_view_mode(&self, view_mode_: i32) -> ResultOfSetFollowPedCamViewMode {
    unsafe {
        let mut view_mode_ = view_mode_;
        let success = sdk::natives::set_follow_ped_cam_view_mode(
            view_mode_,
        );
        
        
        ResultOfSetFollowPedCamViewMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_screen_faded_in(&self, ) -> ResultOfIsScreenFadedIn {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_screen_faded_in(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsScreenFadedIn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_final_rendered_cam_rot(&self, rotation_order_: i32) -> ResultOfGetFinalRenderedCamRot {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut rotation_order_ = rotation_order_;
        let success = sdk::natives::get_final_rendered_cam_rot(
            native_return.pin_mut(),
rotation_order_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetFinalRenderedCamRot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_first_person_flash_effect_type(&self, p0_: i32) -> ResultOfSetFirstPersonFlashEffectType {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_first_person_flash_effect_type(
            p0_,
        );
        
        
        ResultOfSetFirstPersonFlashEffectType {
            success,
            ret: (),
            
        }
    }
}

    fn native_was_fly_cam_constrained_on_previous_udpate(&self, cam_: i32) -> ResultOfWasFlyCamConstrainedOnPreviousUdpate {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::was_fly_cam_constrained_on_previous_udpate(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOfWasFlyCamConstrainedOnPreviousUdpate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_screen_fading_in(&self, ) -> ResultOfIsScreenFadingIn {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_screen_fading_in(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsScreenFadingIn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_follow_vehicle_cam_seat_this_update(&self, seat_index_: i32) -> ResultOfSetFollowVehicleCamSeatThisUpdate {
    unsafe {
        let mut seat_index_ = seat_index_;
        let success = sdk::natives::set_follow_vehicle_cam_seat_this_update(
            seat_index_,
        );
        
        
        ResultOfSetFollowVehicleCamSeatThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gameplay_hint_camera_relative_side_offset(&self, x_offset_: f32) -> ResultOfSetGameplayHintCameraRelativeSideOffset {
    unsafe {
        let mut x_offset_ = x_offset_;
        let success = sdk::natives::set_gameplay_hint_camera_relative_side_offset(
            x_offset_,
        );
        
        
        ResultOfSetGameplayHintCameraRelativeSideOffset {
            success,
            ret: (),
            
        }
    }
}

    fn native_trigger_vehicle_part_broken_camera_shake(&self, vehicle_: u32,
p1_: i32,
p2_: f32) -> ResultOfTriggerVehiclePartBrokenCameraShake {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::trigger_vehicle_part_broken_camera_shake(
            vehicle_,
p1_,
p2_,
        );
        
        
        ResultOfTriggerVehiclePartBrokenCameraShake {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_first_person_aim_cam_active(&self, ) -> ResultOfIsFirstPersonAimCamActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_first_person_aim_cam_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsFirstPersonAimCamActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_camera(&self, cam_hash_: u32,
p1_: bool) -> ResultOfCreateCamera {
    unsafe {
        let mut native_return = Default::default();
let mut cam_hash_ = cam_hash_;
let mut p1_ = p1_;
        let success = sdk::natives::create_camera(
            &mut native_return,
cam_hash_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfCreateCamera {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_dof_strength(&self, cam_: i32,
dof_strength_: f32) -> ResultOfSetCamDofStrength {
    unsafe {
        let mut cam_ = cam_;
let mut dof_strength_ = dof_strength_;
        let success = sdk::natives::set_cam_dof_strength(
            cam_,
dof_strength_,
        );
        
        
        ResultOfSetCamDofStrength {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_final_rendered_remote_player_cam_fov(&self, player_: u32) -> ResultOfGetFinalRenderedRemotePlayerCamFov {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_final_rendered_remote_player_cam_fov(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetFinalRenderedRemotePlayerCamFov {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_cam_spline_node_using_gameplay_frame(&self, cam_: i32,
length_: i32,
p2_: i32) -> ResultOfAddCamSplineNodeUsingGameplayFrame {
    unsafe {
        let mut cam_ = cam_;
let mut length_ = length_;
let mut p2_ = p2_;
        let success = sdk::natives::add_cam_spline_node_using_gameplay_frame(
            cam_,
length_,
p2_,
        );
        
        
        ResultOfAddCamSplineNodeUsingGameplayFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_cam_to_ped_bone(&self, cam_: i32,
ped_: u32,
bone_index_: i32,
x_: f32,
y_: f32,
z_: f32,
heading_: bool) -> ResultOfAttachCamToPedBone {
    unsafe {
        let mut cam_ = cam_;
let mut ped_ = ped_;
let mut bone_index_ = bone_index_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
        let success = sdk::natives::attach_cam_to_ped_bone(
            cam_,
ped_,
bone_index_,
x_,
y_,
z_,
heading_,
        );
        
        
        ResultOfAttachCamToPedBone {
            success,
            ret: (),
            
        }
    }
}

    fn native_camera_prevent_collision_settings_for_triplehead_in_interiors_this_update(&self, ) -> ResultOfCameraPreventCollisionSettingsForTripleheadInInteriorsThisUpdate {
    unsafe {
        
        let success = sdk::natives::camera_prevent_collision_settings_for_triplehead_in_interiors_this_update(
            
        );
        
        
        ResultOfCameraPreventCollisionSettingsForTripleheadInInteriorsThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_cinematic_vehicle_idle_mode_this_update(&self, ) -> ResultOfDisableCinematicVehicleIdleModeThisUpdate {
    unsafe {
        
        let success = sdk::natives::disable_cinematic_vehicle_idle_mode_this_update(
            
        );
        
        
        ResultOfDisableCinematicVehicleIdleModeThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_use_vehicle_cam_stunt_settings_this_update(&self, ) -> ResultOfUseVehicleCamStuntSettingsThisUpdate {
    unsafe {
        
        let success = sdk::natives::use_vehicle_cam_stunt_settings_this_update(
            
        );
        
        
        ResultOfUseVehicleCamStuntSettingsThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_gameplay_cam_fov(&self, ) -> ResultOfGetGameplayCamFov {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_gameplay_cam_fov(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetGameplayCamFov {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_controls_mini_map_heading(&self, cam_: i32,
toggle_: bool) -> ResultOfSetCamControlsMiniMapHeading {
    unsafe {
        let mut cam_ = cam_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_cam_controls_mini_map_heading(
            cam_,
toggle_,
        );
        
        
        ResultOfSetCamControlsMiniMapHeading {
            success,
            ret: (),
            
        }
    }
}

    fn native_point_cam_at_ped_bone(&self, cam_: i32,
ped_: u32,
bone_index_: i32,
x_: f32,
y_: f32,
z_: f32,
p6_: bool) -> ResultOfPointCamAtPedBone {
    unsafe {
        let mut cam_ = cam_;
let mut ped_ = ped_;
let mut bone_index_ = bone_index_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p6_ = p6_;
        let success = sdk::natives::point_cam_at_ped_bone(
            cam_,
ped_,
bone_index_,
x_,
y_,
z_,
p6_,
        );
        
        
        ResultOfPointCamAtPedBone {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_aim_cam_active(&self, ) -> ResultOfIsAimCamActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_aim_cam_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsAimCamActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_shake_cam(&self, cam_: i32,
type_: Option<String>,
amplitude_: f32) -> ResultOfShakeCam {
    unsafe {
        let mut cam_ = cam_;
let mut type_ = sdk_helpers::create_c_string_ptr(type_);
let mut amplitude_ = amplitude_;
        let success = sdk::natives::shake_cam(
            cam_,
type_.as_ref().unwrap(),
amplitude_,
        );
        
        
        ResultOfShakeCam {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_camera_with_params(&self, cam_hash_: u32,
pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
rot_x_: f32,
rot_y_: f32,
rot_z_: f32,
fov_: f32,
p8_: bool,
p9_: i32) -> ResultOfCreateCameraWithParams {
    unsafe {
        let mut native_return = Default::default();
let mut cam_hash_ = cam_hash_;
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
let mut fov_ = fov_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::create_camera_with_params(
            &mut native_return,
cam_hash_,
pos_x_,
pos_y_,
pos_z_,
rot_x_,
rot_y_,
rot_z_,
fov_,
p8_,
p9_,
        );
        let native_return = native_return;
        
        ResultOfCreateCameraWithParams {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_cam_shaking(&self, cam_: i32) -> ResultOfIsCamShaking {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::is_cam_shaking(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOfIsCamShaking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gameplay_cam_relative_pitch(&self, angle_: f32,
scaling_factor_: f32) -> ResultOfSetGameplayCamRelativePitch {
    unsafe {
        let mut angle_ = angle_;
let mut scaling_factor_ = scaling_factor_;
        let success = sdk::natives::set_gameplay_cam_relative_pitch(
            angle_,
scaling_factor_,
        );
        
        
        ResultOfSetGameplayCamRelativePitch {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_motion_blur_strength(&self, cam_: i32,
strength_: f32) -> ResultOfSetCamMotionBlurStrength {
    unsafe {
        let mut cam_ = cam_;
let mut strength_ = strength_;
        let success = sdk::natives::set_cam_motion_blur_strength(
            cam_,
strength_,
        );
        
        
        ResultOfSetCamMotionBlurStrength {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_interpolating_to_script_cams(&self, ) -> ResultOfIsInterpolatingToScriptCams {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_interpolating_to_script_cams(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsInterpolatingToScriptCams {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_first_person_aim_cam_zoom_factor(&self, zoom_factor_: f32) -> ResultOfSetFirstPersonAimCamZoomFactor {
    unsafe {
        let mut zoom_factor_ = zoom_factor_;
        let success = sdk::natives::set_first_person_aim_cam_zoom_factor(
            zoom_factor_,
        );
        
        
        ResultOfSetFirstPersonAimCamZoomFactor {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_gameplay_cam_looking_behind(&self, ) -> ResultOfIsGameplayCamLookingBehind {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_gameplay_cam_looking_behind(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsGameplayCamLookingBehind {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_gameplay_cam_full_attach_parent_transform_timer(&self, ) -> ResultOfResetGameplayCamFullAttachParentTransformTimer {
    unsafe {
        
        let success = sdk::natives::reset_gameplay_cam_full_attach_parent_transform_timer(
            
        );
        
        
        ResultOfResetGameplayCamFullAttachParentTransformTimer {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_use_hi_dof_on_synced_scene_this_update(&self, ) -> ResultOfSetUseHiDofOnSyncedSceneThisUpdate {
    unsafe {
        
        let success = sdk::natives::set_use_hi_dof_on_synced_scene_this_update(
            
        );
        
        
        ResultOfSetUseHiDofOnSyncedSceneThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_cinematic_shot(&self, p0_: u32,
time_: i32,
p2_: bool,
entity_: u32) -> ResultOfCreateCinematicShot {
    unsafe {
        let mut p0_ = p0_;
let mut time_ = time_;
let mut p2_ = p2_;
let mut entity_ = entity_;
        let success = sdk::natives::create_cinematic_shot(
            p0_,
time_,
p2_,
entity_,
        );
        
        
        ResultOfCreateCinematicShot {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_gameplay_cam_relative_heading(&self, ) -> ResultOfGetGameplayCamRelativeHeading {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_gameplay_cam_relative_heading(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetGameplayCamRelativeHeading {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_aim_cam_active_in_accurate_mode(&self, ) -> ResultOfIsAimCamActiveInAccurateMode {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_aim_cam_active_in_accurate_mode(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsAimCamActiveInAccurateMode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_first_person_shooter_camera_pitch(&self, pitch_: f32) -> ResultOfSetFirstPersonShooterCameraPitch {
    unsafe {
        let mut pitch_ = pitch_;
        let success = sdk::natives::set_first_person_shooter_camera_pitch(
            pitch_,
        );
        
        
        ResultOfSetFirstPersonShooterCameraPitch {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_cinematic_shot(&self, p0_: u32) -> ResultOfStopCinematicShot {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stop_cinematic_shot(
            p0_,
        );
        
        
        ResultOfStopCinematicShot {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_debug_cam(&self, ) -> ResultOfGetDebugCam {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_debug_cam(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetDebugCam {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_screen_fading_out(&self, ) -> ResultOfIsScreenFadingOut {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_screen_fading_out(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsScreenFadingOut {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_table_games_camera_this_update(&self, hash_: u32) -> ResultOfSetTableGamesCameraThisUpdate {
    unsafe {
        let mut native_return = Default::default();
let mut hash_ = hash_;
        let success = sdk::natives::set_table_games_camera_this_update(
            &mut native_return,
hash_,
        );
        let native_return = native_return;
        
        ResultOfSetTableGamesCameraThisUpdate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ignore_menu_preference_for_bonnet_camera_this_update(&self, ) -> ResultOfIgnoreMenuPreferenceForBonnetCameraThisUpdate {
    unsafe {
        
        let success = sdk::natives::ignore_menu_preference_for_bonnet_camera_this_update(
            
        );
        
        
        ResultOfIgnoreMenuPreferenceForBonnetCameraThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_spline_node_extra_flags(&self, cam_: i32,
p1_: i32,
flags_: i32) -> ResultOfSetCamSplineNodeExtraFlags {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = p1_;
let mut flags_ = flags_;
        let success = sdk::natives::set_cam_spline_node_extra_flags(
            cam_,
p1_,
flags_,
        );
        
        
        ResultOfSetCamSplineNodeExtraFlags {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cam_rot(&self, cam_: i32,
rotation_order_: i32) -> ResultOfGetCamRot {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut cam_ = cam_;
let mut rotation_order_ = rotation_order_;
        let success = sdk::natives::get_cam_rot(
            native_return.pin_mut(),
cam_,
rotation_order_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetCamRot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_override_cam_spline_motion_blur(&self, cam_: i32,
p1_: i32,
p2_: f32,
p3_: f32) -> ResultOfOverrideCamSplineMotionBlur {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::override_cam_spline_motion_blur(
            cam_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfOverrideCamSplineMotionBlur {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_dof_fnumber_of_lens(&self, camera_: i32,
p1_: f32) -> ResultOfSetCamDofFnumberOfLens {
    unsafe {
        let mut camera_ = camera_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cam_dof_fnumber_of_lens(
            camera_,
p1_,
        );
        
        
        ResultOfSetCamDofFnumberOfLens {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_first_person_aim_cam_zoom_factor(&self, ) -> ResultOfGetFirstPersonAimCamZoomFactor {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_first_person_aim_cam_zoom_factor(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetFirstPersonAimCamZoomFactor {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_death_fail_effect_state(&self, p0_: i32) -> ResultOfSetCamDeathFailEffectState {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_cam_death_fail_effect_state(
            p0_,
        );
        
        
        ResultOfSetCamDeathFailEffectState {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_final_rendered_cam_fov(&self, ) -> ResultOfGetFinalRenderedCamFov {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_final_rendered_cam_fov(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetFinalRenderedCamFov {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_gameplay_cam_rot(&self, rotation_order_: i32) -> ResultOfGetGameplayCamRot {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut rotation_order_ = rotation_order_;
        let success = sdk::natives::get_gameplay_cam_rot(
            native_return.pin_mut(),
rotation_order_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetGameplayCamRot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_spline_node_ease(&self, cam_: i32,
easing_function_: i32,
p2_: i32,
p3_: f32) -> ResultOfSetCamSplineNodeEase {
    unsafe {
        let mut cam_ = cam_;
let mut easing_function_ = easing_function_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_cam_spline_node_ease(
            cam_,
easing_function_,
p2_,
p3_,
        );
        
        
        ResultOfSetCamSplineNodeEase {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gameplay_object_hint(&self, object_: u32,
x_offset_: f32,
y_offset_: f32,
z_offset_: f32,
p4_: bool,
time_: i32,
ease_in_time_: i32,
ease_out_time_: i32) -> ResultOfSetGameplayObjectHint {
    unsafe {
        let mut object_ = object_;
let mut x_offset_ = x_offset_;
let mut y_offset_ = y_offset_;
let mut z_offset_ = z_offset_;
let mut p4_ = p4_;
let mut time_ = time_;
let mut ease_in_time_ = ease_in_time_;
let mut ease_out_time_ = ease_out_time_;
        let success = sdk::natives::set_gameplay_object_hint(
            object_,
x_offset_,
y_offset_,
z_offset_,
p4_,
time_,
ease_in_time_,
ease_out_time_,
        );
        
        
        ResultOfSetGameplayObjectHint {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_rot(&self, cam_: i32,
rot_x_: f32,
rot_y_: f32,
rot_z_: f32,
rotation_order_: i32) -> ResultOfSetCamRot {
    unsafe {
        let mut cam_ = cam_;
let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
let mut rotation_order_ = rotation_order_;
        let success = sdk::natives::set_cam_rot(
            cam_,
rot_x_,
rot_y_,
rot_z_,
rotation_order_,
        );
        
        
        ResultOfSetCamRot {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_cam_spline_node(&self, camera_: i32,
x_: f32,
y_: f32,
z_: f32,
x_rot_: f32,
y_rot_: f32,
z_rot_: f32,
length_: i32,
smoothing_style_: i32,
rotation_order_: i32) -> ResultOfAddCamSplineNode {
    unsafe {
        let mut camera_ = camera_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut x_rot_ = x_rot_;
let mut y_rot_ = y_rot_;
let mut z_rot_ = z_rot_;
let mut length_ = length_;
let mut smoothing_style_ = smoothing_style_;
let mut rotation_order_ = rotation_order_;
        let success = sdk::natives::add_cam_spline_node(
            camera_,
x_,
y_,
z_,
x_rot_,
y_rot_,
z_rot_,
length_,
smoothing_style_,
rotation_order_,
        );
        
        
        ResultOfAddCamSplineNode {
            success,
            ret: (),
            
        }
    }
}

    fn native_destroy_cam(&self, cam_: i32,
b_script_host_cam_: bool) -> ResultOfDestroyCam {
    unsafe {
        let mut cam_ = cam_;
let mut b_script_host_cam_ = b_script_host_cam_;
        let success = sdk::natives::destroy_cam(
            cam_,
b_script_host_cam_,
        );
        
        
        ResultOfDestroyCam {
            success,
            ret: (),
            
        }
    }
}

    fn native_do_screen_fade_out(&self, duration_: i32) -> ResultOfDoScreenFadeOut {
    unsafe {
        let mut duration_ = duration_;
        let success = sdk::natives::do_screen_fade_out(
            duration_,
        );
        
        
        ResultOfDoScreenFadeOut {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_focus_ped_on_screen(&self, p0_: f32,
p1_: i32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: i32,
p8_: i32) -> ResultOfGetFocusPedOnScreen {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::get_focus_ped_on_screen(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
        );
        let native_return = native_return;
        
        ResultOfGetFocusPedOnScreen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gameplay_cam_follow_ped_this_update(&self, ped_: u32) -> ResultOfSetGameplayCamFollowPedThisUpdate {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_gameplay_cam_follow_ped_this_update(
            ped_,
        );
        
        
        ResultOfSetGameplayCamFollowPedThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_replay_get_max_distance_allowed_from_player(&self, ) -> ResultOfReplayGetMaxDistanceAllowedFromPlayer {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::replay_get_max_distance_allowed_from_player(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfReplayGetMaxDistanceAllowedFromPlayer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_affects_aiming(&self, cam_: i32,
toggle_: bool) -> ResultOfSetCamAffectsAiming {
    unsafe {
        let mut cam_ = cam_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_cam_affects_aiming(
            cam_,
toggle_,
        );
        
        
        ResultOfSetCamAffectsAiming {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_follow_ped_cam_view_mode(&self, ) -> ResultOfGetFollowPedCamViewMode {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_follow_ped_cam_view_mode(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetFollowPedCamViewMode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_attach_cam_to_vehicle_bone(&self, cam_: i32,
vehicle_: u32,
bone_index_: i32,
relative_rotation_: bool,
rot_x_: f32,
rot_y_: f32,
rot_z_: f32,
offset_x_: f32,
offset_y_: f32,
offset_z_: f32,
fixed_direction_: bool) -> ResultOfAttachCamToVehicleBone {
    unsafe {
        let mut cam_ = cam_;
let mut vehicle_ = vehicle_;
let mut bone_index_ = bone_index_;
let mut relative_rotation_ = relative_rotation_;
let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
let mut offset_x_ = offset_x_;
let mut offset_y_ = offset_y_;
let mut offset_z_ = offset_z_;
let mut fixed_direction_ = fixed_direction_;
        let success = sdk::natives::attach_cam_to_vehicle_bone(
            cam_,
vehicle_,
bone_index_,
relative_rotation_,
rot_x_,
rot_y_,
rot_z_,
offset_x_,
offset_y_,
offset_z_,
fixed_direction_,
        );
        
        
        ResultOfAttachCamToVehicleBone {
            success,
            ret: (),
            
        }
    }
}

    fn native_destroy_all_cams(&self, b_script_host_cam_: bool) -> ResultOfDestroyAllCams {
    unsafe {
        let mut b_script_host_cam_ = b_script_host_cam_;
        let success = sdk::natives::destroy_all_cams(
            b_script_host_cam_,
        );
        
        
        ResultOfDestroyAllCams {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_third_person_cam_relative_heading_limits_this_update(&self, minimum_: f32,
maximum_: f32) -> ResultOfSetThirdPersonCamRelativeHeadingLimitsThisUpdate {
    unsafe {
        let mut minimum_ = minimum_;
let mut maximum_ = maximum_;
        let success = sdk::natives::set_third_person_cam_relative_heading_limits_this_update(
            minimum_,
maximum_,
        );
        
        
        ResultOfSetThirdPersonCamRelativeHeadingLimitsThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_follow_vehicle_cam_high_angle_mode_this_update(&self, p0_: bool) -> ResultOfSetFollowVehicleCamHighAngleModeThisUpdate {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_follow_vehicle_cam_high_angle_mode_this_update(
            p0_,
        );
        
        
        ResultOfSetFollowVehicleCamHighAngleModeThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_final_rendered_cam_far_dof(&self, ) -> ResultOfGetFinalRenderedCamFarDof {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_final_rendered_cam_far_dof(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetFinalRenderedCamFarDof {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_play_cam_anim(&self, cam_: i32,
anim_name_: Option<String>,
anim_dictionary_: Option<String>,
x_: f32,
y_: f32,
z_: f32,
x_rot_: f32,
y_rot_: f32,
z_rot_: f32,
p9_: bool,
p10_: i32) -> ResultOfPlayCamAnim {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
let mut anim_dictionary_ = sdk_helpers::create_c_string_ptr(anim_dictionary_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut x_rot_ = x_rot_;
let mut y_rot_ = y_rot_;
let mut z_rot_ = z_rot_;
let mut p9_ = p9_;
let mut p10_ = p10_;
        let success = sdk::natives::play_cam_anim(
            &mut native_return,
cam_,
anim_name_.as_ref().unwrap(),
anim_dictionary_.as_ref().unwrap(),
x_,
y_,
z_,
x_rot_,
y_rot_,
z_rot_,
p9_,
p10_,
        );
        let native_return = native_return;
        
        ResultOfPlayCamAnim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_follow_vehicle_cam_high_angle_mode_every_update(&self, p0_: bool,
p1_: bool) -> ResultOfSetFollowVehicleCamHighAngleModeEveryUpdate {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_follow_vehicle_cam_high_angle_mode_every_update(
            p0_,
p1_,
        );
        
        
        ResultOfSetFollowVehicleCamHighAngleModeEveryUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_invalidate_cinematic_vehicle_idle_mode(&self, ) -> ResultOfInvalidateCinematicVehicleIdleMode {
    unsafe {
        
        let success = sdk::natives::invalidate_cinematic_vehicle_idle_mode(
            
        );
        
        
        ResultOfInvalidateCinematicVehicleIdleMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_block_first_person_orientation_reset_this_update(&self, ) -> ResultOfBlockFirstPersonOrientationResetThisUpdate {
    unsafe {
        
        let success = sdk::natives::block_first_person_orientation_reset_this_update(
            
        );
        
        
        ResultOfBlockFirstPersonOrientationResetThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_active_with_interp(&self, cam_to_: i32,
cam_from_: i32,
duration_: i32,
ease_location_: i32,
ease_rotation_: i32) -> ResultOfSetCamActiveWithInterp {
    unsafe {
        let mut cam_to_ = cam_to_;
let mut cam_from_ = cam_from_;
let mut duration_ = duration_;
let mut ease_location_ = ease_location_;
let mut ease_rotation_ = ease_rotation_;
        let success = sdk::natives::set_cam_active_with_interp(
            cam_to_,
cam_from_,
duration_,
ease_location_,
ease_rotation_,
        );
        
        
        ResultOfSetCamActiveWithInterp {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_final_rendered_cam_near_dof(&self, ) -> ResultOfGetFinalRenderedCamNearDof {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_final_rendered_cam_near_dof(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetFinalRenderedCamNearDof {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cam_anim_current_phase(&self, cam_: i32) -> ResultOfGetCamAnimCurrentPhase {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::get_cam_anim_current_phase(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOfGetCamAnimCurrentPhase {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_use_hi_dof(&self, ) -> ResultOfSetUseHiDof {
    unsafe {
        
        let success = sdk::natives::set_use_hi_dof(
            
        );
        
        
        ResultOfSetUseHiDof {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_final_rendered_cam_coord(&self, ) -> ResultOfGetFinalRenderedCamCoord {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
        let success = sdk::natives::get_final_rendered_cam_coord(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetFinalRenderedCamCoord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gameplay_vehicle_hint(&self, vehicle_: u32,
offset_x_: f32,
offset_y_: f32,
offset_z_: f32,
p4_: bool,
time_: i32,
ease_in_time_: i32,
ease_out_time_: i32) -> ResultOfSetGameplayVehicleHint {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut offset_x_ = offset_x_;
let mut offset_y_ = offset_y_;
let mut offset_z_ = offset_z_;
let mut p4_ = p4_;
let mut time_ = time_;
let mut ease_in_time_ = ease_in_time_;
let mut ease_out_time_ = ease_out_time_;
        let success = sdk::natives::set_gameplay_vehicle_hint(
            vehicle_,
offset_x_,
offset_y_,
offset_z_,
p4_,
time_,
ease_in_time_,
ease_out_time_,
        );
        
        
        ResultOfSetGameplayVehicleHint {
            success,
            ret: (),
            
        }
    }
}

    fn native_animated_shake_cam(&self, cam_: i32,
p1_: Option<String>,
p2_: Option<String>,
p3_: Option<String>,
amplitude_: f32) -> ResultOfAnimatedShakeCam {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut p3_ = sdk_helpers::create_c_string_ptr(p3_);
let mut amplitude_ = amplitude_;
        let success = sdk::natives::animated_shake_cam(
            cam_,
p1_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
p3_.as_ref().unwrap(),
amplitude_,
        );
        
        
        ResultOfAnimatedShakeCam {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_is_inside_vehicle(&self, cam_: i32,
toggle_: bool) -> ResultOfSetCamIsInsideVehicle {
    unsafe {
        let mut cam_ = cam_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_cam_is_inside_vehicle(
            cam_,
toggle_,
        );
        
        
        ResultOfSetCamIsInsideVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_detach_cam(&self, cam_: i32) -> ResultOfDetachCam {
    unsafe {
        let mut cam_ = cam_;
        let success = sdk::natives::detach_cam(
            cam_,
        );
        
        
        ResultOfDetachCam {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_cinematic_rendering_this_update(&self, toggle_: bool) -> ResultOfForceCinematicRenderingThisUpdate {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::force_cinematic_rendering_this_update(
            toggle_,
        );
        
        
        ResultOfForceCinematicRenderingThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_follow_vehicle_cam_view_mode(&self, ) -> ResultOfGetFollowVehicleCamViewMode {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_follow_vehicle_cam_view_mode(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetFollowVehicleCamViewMode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_third_person_cam_relative_pitch_limits_this_update(&self, minimum_: f32,
maximum_: f32) -> ResultOfSetThirdPersonCamRelativePitchLimitsThisUpdate {
    unsafe {
        let mut minimum_ = minimum_;
let mut maximum_ = maximum_;
        let success = sdk::natives::set_third_person_cam_relative_pitch_limits_this_update(
            minimum_,
maximum_,
        );
        
        
        ResultOfSetThirdPersonCamRelativePitchLimitsThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_spline_node_velocity_scale(&self, cam_: i32,
p1_: i32,
scale_: f32) -> ResultOfSetCamSplineNodeVelocityScale {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = p1_;
let mut scale_ = scale_;
        let success = sdk::natives::set_cam_spline_node_velocity_scale(
            cam_,
p1_,
scale_,
        );
        
        
        ResultOfSetCamSplineNodeVelocityScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_bypass_camera_collision_buoyancy_test_this_update(&self, ) -> ResultOfBypassCameraCollisionBuoyancyTestThisUpdate {
    unsafe {
        
        let success = sdk::natives::bypass_camera_collision_buoyancy_test_this_update(
            
        );
        
        
        ResultOfBypassCameraCollisionBuoyancyTestThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_cam_exist(&self, cam_: i32) -> ResultOfDoesCamExist {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::does_cam_exist(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOfDoesCamExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gameplay_cam_shake_amplitude(&self, amplitude_: f32) -> ResultOfSetGameplayCamShakeAmplitude {
    unsafe {
        let mut amplitude_ = amplitude_;
        let success = sdk::natives::set_gameplay_cam_shake_amplitude(
            amplitude_,
        );
        
        
        ResultOfSetGameplayCamShakeAmplitude {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_cam_far_clip(&self, cam_: i32,
p1_: f32) -> ResultOfForceCamFarClip {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = p1_;
        let success = sdk::natives::force_cam_far_clip(
            cam_,
p1_,
        );
        
        
        ResultOfForceCamFarClip {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_follow_vehicle_cam_view_mode(&self, view_mode_: i32) -> ResultOfSetFollowVehicleCamViewMode {
    unsafe {
        let mut view_mode_ = view_mode_;
        let success = sdk::natives::set_follow_vehicle_cam_view_mode(
            view_mode_,
        );
        
        
        ResultOfSetFollowVehicleCamViewMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_cinematic_bonnet_camera_this_update(&self, ) -> ResultOfDisableCinematicBonnetCameraThisUpdate {
    unsafe {
        
        let success = sdk::natives::disable_cinematic_bonnet_camera_this_update(
            
        );
        
        
        ResultOfDisableCinematicBonnetCameraThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_far_clip(&self, cam_: i32,
far_clip_: f32) -> ResultOfSetCamFarClip {
    unsafe {
        let mut cam_ = cam_;
let mut far_clip_ = far_clip_;
        let success = sdk::natives::set_cam_far_clip(
            cam_,
far_clip_,
        );
        
        
        ResultOfSetCamFarClip {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_first_person_camera_water_clipping_test_this_update(&self, ) -> ResultOfDisableFirstPersonCameraWaterClippingTestThisUpdate {
    unsafe {
        
        let success = sdk::natives::disable_first_person_camera_water_clipping_test_this_update(
            
        );
        
        
        ResultOfDisableFirstPersonCameraWaterClippingTestThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_fov(&self, cam_: i32,
field_of_view_: f32) -> ResultOfSetCamFov {
    unsafe {
        let mut cam_ = cam_;
let mut field_of_view_ = field_of_view_;
        let success = sdk::natives::set_cam_fov(
            cam_,
field_of_view_,
        );
        
        
        ResultOfSetCamFov {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_cinematic_cam_rendering(&self, ) -> ResultOfIsCinematicCamRendering {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_cinematic_cam_rendering(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsCinematicCamRendering {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_screen_faded_out(&self, ) -> ResultOfIsScreenFadedOut {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_screen_faded_out(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsScreenFadedOut {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cam_spline_node_index(&self, cam_: i32) -> ResultOfGetCamSplineNodeIndex {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::get_cam_spline_node_index(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOfGetCamSplineNodeIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gameplay_cam_relative_heading(&self, heading_: f32) -> ResultOfSetGameplayCamRelativeHeading {
    unsafe {
        let mut heading_ = heading_;
        let success = sdk::natives::set_gameplay_cam_relative_heading(
            heading_,
        );
        
        
        ResultOfSetGameplayCamRelativeHeading {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_cam_with_params(&self, cam_name_: Option<String>,
pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
rot_x_: f32,
rot_y_: f32,
rot_z_: f32,
fov_: f32,
p8_: bool,
p9_: i32) -> ResultOfCreateCamWithParams {
    unsafe {
        let mut native_return = Default::default();
let mut cam_name_ = sdk_helpers::create_c_string_ptr(cam_name_);
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
let mut fov_ = fov_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::create_cam_with_params(
            &mut native_return,
cam_name_.as_ref().unwrap(),
pos_x_,
pos_y_,
pos_z_,
rot_x_,
rot_y_,
rot_z_,
fov_,
p8_,
p9_,
        );
        let native_return = native_return;
        
        ResultOfCreateCamWithParams {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cam_spline_phase(&self, cam_: i32) -> ResultOfGetCamSplinePhase {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::get_cam_spline_phase(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOfGetCamSplinePhase {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cam_far_clip(&self, cam_: i32) -> ResultOfGetCamFarClip {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::get_cam_far_clip(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOfGetCamFarClip {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cam_coord(&self, cam_: i32) -> ResultOfGetCamCoord {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut cam_ = cam_;
        let success = sdk::natives::get_cam_coord(
            native_return.pin_mut(),
cam_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetCamCoord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_cinematic_cam_shaking(&self, ) -> ResultOfIsCinematicCamShaking {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_cinematic_cam_shaking(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsCinematicCamShaking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_first_person_aim_cam_relative_pitch_limits_this_update(&self, p0_: f32,
p1_: f32) -> ResultOfSetFirstPersonAimCamRelativePitchLimitsThisUpdate {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_first_person_aim_cam_relative_pitch_limits_this_update(
            p0_,
p1_,
        );
        
        
        ResultOfSetFirstPersonAimCamRelativePitchLimitsThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_cam_shaking(&self, cam_: i32,
p1_: bool) -> ResultOfStopCamShaking {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = p1_;
        let success = sdk::natives::stop_cam_shaking(
            cam_,
p1_,
        );
        
        
        ResultOfStopCamShaking {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_code_gameplay_hint_active(&self, ) -> ResultOfIsCodeGameplayHintActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_code_gameplay_hint_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsCodeGameplayHintActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_params(&self, cam_: i32,
pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
rot_x_: f32,
rot_y_: f32,
rot_z_: f32,
field_of_view_: f32,
p8_: i32,
p9_: i32,
p10_: i32,
p11_: i32) -> ResultOfSetCamParams {
    unsafe {
        let mut cam_ = cam_;
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
let mut field_of_view_ = field_of_view_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
        let success = sdk::natives::set_cam_params(
            cam_,
pos_x_,
pos_y_,
pos_z_,
rot_x_,
rot_y_,
rot_z_,
field_of_view_,
p8_,
p9_,
p10_,
p11_,
        );
        
        
        ResultOfSetCamParams {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cam_near_dof(&self, cam_: i32) -> ResultOfGetCamNearDof {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::get_cam_near_dof(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOfGetCamNearDof {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_animated_shake_script_global(&self, p0_: Option<String>,
p1_: Option<String>,
p2_: Option<String>,
p3_: f32) -> ResultOfAnimatedShakeScriptGlobal {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut p3_ = p3_;
        let success = sdk::natives::animated_shake_script_global(
            p0_.as_ref().unwrap(),
p1_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
p3_,
        );
        
        
        ResultOfAnimatedShakeScriptGlobal {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cam_fov(&self, cam_: i32) -> ResultOfGetCamFov {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::get_cam_fov(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOfGetCamFov {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_dof_max_near_in_focus_distance(&self, camera_: i32,
p1_: f32) -> ResultOfSetCamDofMaxNearInFocusDistance {
    unsafe {
        let mut camera_ = camera_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cam_dof_max_near_in_focus_distance(
            camera_,
p1_,
        );
        
        
        ResultOfSetCamDofMaxNearInFocusDistance {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_cam(&self, cam_name_: Option<String>,
p1_: bool) -> ResultOfCreateCam {
    unsafe {
        let mut native_return = Default::default();
let mut cam_name_ = sdk_helpers::create_c_string_ptr(cam_name_);
let mut p1_ = p1_;
        let success = sdk::natives::create_cam(
            &mut native_return,
cam_name_.as_ref().unwrap(),
p1_,
        );
        let native_return = native_return;
        
        ResultOfCreateCam {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cam_near_clip(&self, cam_: i32) -> ResultOfGetCamNearClip {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::get_cam_near_clip(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOfGetCamNearClip {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_dof_focus_distance_bias(&self, camera_: i32,
p1_: f32) -> ResultOfSetCamDofFocusDistanceBias {
    unsafe {
        let mut camera_ = camera_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cam_dof_focus_distance_bias(
            camera_,
p1_,
        );
        
        
        ResultOfSetCamDofFocusDistanceBias {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_follow_ped_cam_active(&self, ) -> ResultOfIsFollowPedCamActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_follow_ped_cam_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsFollowPedCamActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cinematic_cam_shake_amplitude(&self, p0_: f32) -> ResultOfSetCinematicCamShakeAmplitude {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_cinematic_cam_shake_amplitude(
            p0_,
        );
        
        
        ResultOfSetCinematicCamShakeAmplitude {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_near_clip(&self, cam_: i32,
near_clip_: f32) -> ResultOfSetCamNearClip {
    unsafe {
        let mut cam_ = cam_;
let mut near_clip_ = near_clip_;
        let success = sdk::natives::set_cam_near_clip(
            cam_,
near_clip_,
        );
        
        
        ResultOfSetCamNearClip {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_rendering_script_cams_using_catch_up(&self, render_: bool,
p1_: f32,
p2_: i32,
p3_: i32) -> ResultOfStopRenderingScriptCamsUsingCatchUp {
    unsafe {
        let mut render_ = render_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::stop_rendering_script_cams_using_catch_up(
            render_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfStopRenderingScriptCamsUsingCatchUp {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_follow_ped_cam_ladder_align_this_update(&self, ) -> ResultOfSetFollowPedCamLadderAlignThisUpdate {
    unsafe {
        
        let success = sdk::natives::set_follow_ped_cam_ladder_align_this_update(
            
        );
        
        
        ResultOfSetFollowPedCamLadderAlignThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_fly_cam_vertical_controls_this_update(&self, cam_: i32) -> ResultOfSetFlyCamVerticalControlsThisUpdate {
    unsafe {
        let mut cam_ = cam_;
        let success = sdk::natives::set_fly_cam_vertical_controls_this_update(
            cam_,
        );
        
        
        ResultOfSetFlyCamVerticalControlsThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_cam_playing_anim(&self, cam_: i32,
anim_name_: Option<String>,
anim_dictionary_: Option<String>) -> ResultOfIsCamPlayingAnim {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
let mut anim_dictionary_ = sdk_helpers::create_c_string_ptr(anim_dictionary_);
        let success = sdk::natives::is_cam_playing_anim(
            &mut native_return,
cam_,
anim_name_.as_ref().unwrap(),
anim_dictionary_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfIsCamPlayingAnim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_script_global_shaking(&self, ) -> ResultOfIsScriptGlobalShaking {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_script_global_shaking(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsScriptGlobalShaking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_fly_cam_coord_and_constrain(&self, cam_: i32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfSetFlyCamCoordAndConstrain {
    unsafe {
        let mut cam_ = cam_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_fly_cam_coord_and_constrain(
            cam_,
x_,
y_,
z_,
        );
        
        
        ResultOfSetFlyCamCoordAndConstrain {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gameplay_hint_camera_relative_vertical_offset(&self, y_offset_: f32) -> ResultOfSetGameplayHintCameraRelativeVerticalOffset {
    unsafe {
        let mut y_offset_ = y_offset_;
        let success = sdk::natives::set_gameplay_hint_camera_relative_vertical_offset(
            y_offset_,
        );
        
        
        ResultOfSetGameplayHintCameraRelativeVerticalOffset {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_cinematic_idle_cam_rendering(&self, ) -> ResultOfIsCinematicIdleCamRendering {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_cinematic_idle_cam_rendering(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsCinematicIdleCamRendering {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_follow_vehicle_cam_active(&self, ) -> ResultOfIsFollowVehicleCamActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_follow_vehicle_cam_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsFollowVehicleCamActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_cinematic_shot_active(&self, p0_: u32) -> ResultOfIsCinematicShotActive {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::is_cinematic_shot_active(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfIsCinematicShotActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_gameplay_hint_being_cancelled_this_update(&self, p0_: bool) -> ResultOfStopGameplayHintBeingCancelledThisUpdate {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stop_gameplay_hint_being_cancelled_this_update(
            p0_,
        );
        
        
        ResultOfStopGameplayHintBeingCancelledThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_first_person_aim_cam_zoom_factor_limits_this_update(&self, p0_: f32,
p1_: f32) -> ResultOfSetFirstPersonAimCamZoomFactorLimitsThisUpdate {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_first_person_aim_cam_zoom_factor_limits_this_update(
            p0_,
p1_,
        );
        
        
        ResultOfSetFirstPersonAimCamZoomFactorLimitsThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_final_rendered_cam_near_clip(&self, ) -> ResultOfGetFinalRenderedCamNearClip {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_final_rendered_cam_near_clip(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetFinalRenderedCamNearClip {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_spline_smoothing_style(&self, cam_: i32,
smoothing_style_: i32) -> ResultOfSetCamSplineSmoothingStyle {
    unsafe {
        let mut cam_ = cam_;
let mut smoothing_style_ = smoothing_style_;
        let success = sdk::natives::set_cam_spline_smoothing_style(
            cam_,
smoothing_style_,
        );
        
        
        ResultOfSetCamSplineSmoothingStyle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gameplay_hint_base_orbit_pitch_offset(&self, value_: f32) -> ResultOfSetGameplayHintBaseOrbitPitchOffset {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_gameplay_hint_base_orbit_pitch_offset(
            value_,
        );
        
        
        ResultOfSetGameplayHintBaseOrbitPitchOffset {
            success,
            ret: (),
            
        }
    }
}

    fn native_do_screen_fade_in(&self, duration_: i32) -> ResultOfDoScreenFadeIn {
    unsafe {
        let mut duration_ = duration_;
        let success = sdk::natives::do_screen_fade_in(
            duration_,
        );
        
        
        ResultOfDoScreenFadeIn {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gameplay_coord_hint(&self, x_: f32,
y_: f32,
z_: f32,
duration_: i32,
blend_out_duration_: i32,
blend_in_duration_: i32,
p6_: i32) -> ResultOfSetGameplayCoordHint {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut duration_ = duration_;
let mut blend_out_duration_ = blend_out_duration_;
let mut blend_in_duration_ = blend_in_duration_;
let mut p6_ = p6_;
        let success = sdk::natives::set_gameplay_coord_hint(
            x_,
y_,
z_,
duration_,
blend_out_duration_,
blend_in_duration_,
p6_,
        );
        
        
        ResultOfSetGameplayCoordHint {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_bonnet_cinematic_cam_rendering(&self, ) -> ResultOfIsBonnetCinematicCamRendering {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_bonnet_cinematic_cam_rendering(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsBonnetCinematicCamRendering {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_shake_amplitude(&self, cam_: i32,
amplitude_: f32) -> ResultOfSetCamShakeAmplitude {
    unsafe {
        let mut cam_ = cam_;
let mut amplitude_ = amplitude_;
        let success = sdk::natives::set_cam_shake_amplitude(
            cam_,
amplitude_,
        );
        
        
        ResultOfSetCamShakeAmplitude {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cam_spline_node_phase(&self, cam_: i32) -> ResultOfGetCamSplineNodePhase {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::get_cam_spline_node_phase(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOfGetCamSplineNodePhase {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_bypass_cutscene_cam_rendering_this_update(&self, ) -> ResultOfBypassCutsceneCamRenderingThisUpdate {
    unsafe {
        
        let success = sdk::natives::bypass_cutscene_cam_rendering_this_update(
            
        );
        
        
        ResultOfBypassCutsceneCamRenderingThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gameplay_cam_altitude_fov_scaling_state(&self, p0_: bool) -> ResultOfSetGameplayCamAltitudeFovScalingState {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_gameplay_cam_altitude_fov_scaling_state(
            p0_,
        );
        
        
        ResultOfSetGameplayCamAltitudeFovScalingState {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cinematic_news_channel_active_this_update(&self, ) -> ResultOfSetCinematicNewsChannelActiveThisUpdate {
    unsafe {
        
        let success = sdk::natives::set_cinematic_news_channel_active_this_update(
            
        );
        
        
        ResultOfSetCinematicNewsChannelActiveThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_widescreen_borders(&self, p0_: bool,
p1_: i32) -> ResultOfSetWidescreenBorders {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_widescreen_borders(
            p0_,
p1_,
        );
        
        
        ResultOfSetWidescreenBorders {
            success,
            ret: (),
            
        }
    }
}

    fn native_shake_cinematic_cam(&self, shake_type_: Option<String>,
amount_: f32) -> ResultOfShakeCinematicCam {
    unsafe {
        let mut shake_type_ = sdk_helpers::create_c_string_ptr(shake_type_);
let mut amount_ = amount_;
        let success = sdk::natives::shake_cinematic_cam(
            shake_type_.as_ref().unwrap(),
amount_,
        );
        
        
        ResultOfShakeCinematicCam {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cinematic_mode_active(&self, toggle_: bool) -> ResultOfSetCinematicModeActive {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_cinematic_mode_active(
            toggle_,
        );
        
        
        ResultOfSetCinematicModeActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_follow_cam_ignore_attach_parent_movement_this_update(&self, ) -> ResultOfSetFollowCamIgnoreAttachParentMovementThisUpdate {
    unsafe {
        
        let success = sdk::natives::set_follow_cam_ignore_attach_parent_movement_this_update(
            
        );
        
        
        ResultOfSetFollowCamIgnoreAttachParentMovementThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_on_foot_first_person_view_this_update(&self, ) -> ResultOfDisableOnFootFirstPersonViewThisUpdate {
    unsafe {
        
        let success = sdk::natives::disable_on_foot_first_person_view_this_update(
            
        );
        
        
        ResultOfDisableOnFootFirstPersonViewThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_third_person_cam_orbit_distance_limits_this_update(&self, p0_: f32,
distance_: f32) -> ResultOfSetThirdPersonCamOrbitDistanceLimitsThisUpdate {
    unsafe {
        let mut p0_ = p0_;
let mut distance_ = distance_;
        let success = sdk::natives::set_third_person_cam_orbit_distance_limits_this_update(
            p0_,
distance_,
        );
        
        
        ResultOfSetThirdPersonCamOrbitDistanceLimitsThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_cam_active(&self, cam_: i32) -> ResultOfIsCamActive {
    unsafe {
        let mut native_return = Default::default();
let mut cam_ = cam_;
        let success = sdk::natives::is_cam_active(
            &mut native_return,
cam_,
        );
        let native_return = native_return;
        
        ResultOfIsCamActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_final_rendered_cam_far_clip(&self, ) -> ResultOfGetFinalRenderedCamFarClip {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_final_rendered_cam_far_clip(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetFinalRenderedCamFarClip {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_dof_overridden_focus_distance_blend_level(&self, p0_: i32,
p1_: f32) -> ResultOfSetCamDofOverriddenFocusDistanceBlendLevel {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cam_dof_overridden_focus_distance_blend_level(
            p0_,
p1_,
        );
        
        
        ResultOfSetCamDofOverriddenFocusDistanceBlendLevel {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_synchronized_cam_anim(&self, p0_: i32,
p1_: i32,
anim_name_: Option<String>,
anim_dictionary_: Option<String>) -> ResultOfPlaySynchronizedCamAnim {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
let mut anim_dictionary_ = sdk_helpers::create_c_string_ptr(anim_dictionary_);
        let success = sdk::natives::play_synchronized_cam_anim(
            &mut native_return,
p0_,
p1_,
anim_name_.as_ref().unwrap(),
anim_dictionary_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfPlaySynchronizedCamAnim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_sphere_visible(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOfIsSphereVisible {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::is_sphere_visible(
            &mut native_return,
x_,
y_,
z_,
radius_,
        );
        let native_return = native_return;
        
        ResultOfIsSphereVisible {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gameplay_hint_camera_blend_to_follow_ped_medium_view_mode(&self, toggle_: bool) -> ResultOfSetGameplayHintCameraBlendToFollowPedMediumViewMode {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_gameplay_hint_camera_blend_to_follow_ped_medium_view_mode(
            toggle_,
        );
        
        
        ResultOfSetGameplayHintCameraBlendToFollowPedMediumViewMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_gameplay_hint_active(&self, ) -> ResultOfIsGameplayHintActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_gameplay_hint_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsGameplayHintActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_fly_cam_vertical_response(&self, cam_: i32,
p1_: f32,
p2_: f32,
p3_: f32) -> ResultOfSetFlyCamVerticalResponse {
    unsafe {
        let mut cam_ = cam_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_fly_cam_vertical_response(
            cam_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfSetFlyCamVerticalResponse {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_in_vehicle_cam_state_this_update(&self, p0_: u32,
p1_: i32) -> ResultOfSetInVehicleCamStateThisUpdate {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_in_vehicle_cam_state_this_update(
            p0_,
p1_,
        );
        
        
        ResultOfSetInVehicleCamStateThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_gameplay_cam_altitude_fov_scaling_this_update(&self, ) -> ResultOfDisableGameplayCamAltitudeFovScalingThisUpdate {
    unsafe {
        
        let success = sdk::natives::disable_gameplay_cam_altitude_fov_scaling_this_update(
            
        );
        
        
        ResultOfDisableGameplayCamAltitudeFovScalingThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_allowed_independent_camera_modes(&self, ) -> ResultOfIsAllowedIndependentCameraModes {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_allowed_independent_camera_modes(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsAllowedIndependentCameraModes {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cam_far_dof(&self, cam_: i32,
far_d_o_f_: f32) -> ResultOfSetCamFarDof {
    unsafe {
        let mut cam_ = cam_;
let mut far_d_o_f_ = far_d_o_f_;
        let success = sdk::natives::set_cam_far_dof(
            cam_,
far_d_o_f_,
        );
        
        
        ResultOfSetCamFarDof {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cam_view_mode_for_context(&self, context_: i32) -> ResultOfGetCamViewModeForContext {
    unsafe {
        let mut native_return = Default::default();
let mut context_ = context_;
        let success = sdk::natives::get_cam_view_mode_for_context(
            &mut native_return,
context_,
        );
        let native_return = native_return;
        
        ResultOfGetCamViewModeForContext {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_follow_vehicle_cam_zoom_level(&self, ) -> ResultOfGetFollowVehicleCamZoomLevel {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_follow_vehicle_cam_zoom_level(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetFollowVehicleCamZoomLevel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_cam_pointing(&self, cam_: i32) -> ResultOfStopCamPointing {
    unsafe {
        let mut cam_ = cam_;
        let success = sdk::natives::stop_cam_pointing(
            cam_,
        );
        
        
        ResultOfStopCamPointing {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_gameplay_hint(&self, p0_: bool) -> ResultOfStopGameplayHint {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stop_gameplay_hint(
            p0_,
        );
        
        
        ResultOfStopGameplayHint {
            success,
            ret: (),
            
        }
    }
}

    fn native_shake_script_global(&self, p0_: Option<String>,
p1_: f32) -> ResultOfShakeScriptGlobal {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
        let success = sdk::natives::shake_script_global(
            p0_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOfShakeScriptGlobal {
            success,
            ret: (),
            
        }
    }
}

    fn native_invalidate_idle_cam(&self, ) -> ResultOfInvalidateIdleCam {
    unsafe {
        
        let success = sdk::natives::invalidate_idle_cam(
            
        );
        
        
        ResultOfInvalidateIdleCam {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cam_dof_overridden_focus_distance(&self, camera_: i32,
p1_: f32) -> ResultOfSetCamDofOverriddenFocusDistance {
    unsafe {
        let mut camera_ = camera_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cam_dof_overridden_focus_distance(
            camera_,
p1_,
        );
        
        
        ResultOfSetCamDofOverriddenFocusDistance {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_cinematic_cam_input_active(&self, ) -> ResultOfIsCinematicCamInputActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_cinematic_cam_input_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsCinematicCamInputActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_point_cam_at_coord(&self, cam_: i32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfPointCamAtCoord {
    unsafe {
        let mut cam_ = cam_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::point_cam_at_coord(
            cam_,
x_,
y_,
z_,
        );
        
        
        ResultOfPointCamAtCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gameplay_hint_follow_distance_scalar(&self, value_: f32) -> ResultOfSetGameplayHintFollowDistanceScalar {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_gameplay_hint_follow_distance_scalar(
            value_,
        );
        
        
        ResultOfSetGameplayHintFollowDistanceScalar {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_fly_cam_max_height(&self, cam_: i32,
height_: f32) -> ResultOfSetFlyCamMaxHeight {
    unsafe {
        let mut cam_ = cam_;
let mut height_ = height_;
        let success = sdk::natives::set_fly_cam_max_height(
            cam_,
height_,
        );
        
        
        ResultOfSetFlyCamMaxHeight {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gameplay_cam_entity_to_limit_focus_over_bounding_sphere_this_update(&self, entity_: u32) -> ResultOfSetGameplayCamEntityToLimitFocusOverBoundingSphereThisUpdate {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::set_gameplay_cam_entity_to_limit_focus_over_bounding_sphere_this_update(
            entity_,
        );
        
        
        ResultOfSetGameplayCamEntityToLimitFocusOverBoundingSphereThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_shake_gameplay_cam(&self, shake_name_: Option<String>,
intensity_: f32) -> ResultOfShakeGameplayCam {
    unsafe {
        let mut shake_name_ = sdk_helpers::create_c_string_ptr(shake_name_);
let mut intensity_ = intensity_;
        let success = sdk::natives::shake_gameplay_cam(
            shake_name_.as_ref().unwrap(),
intensity_,
        );
        
        
        ResultOfShakeGameplayCam {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_cam_to_entity(&self, cam_: i32,
entity_: u32,
x_offset_: f32,
y_offset_: f32,
z_offset_: f32,
is_relative_: bool) -> ResultOfAttachCamToEntity {
    unsafe {
        let mut cam_ = cam_;
let mut entity_ = entity_;
let mut x_offset_ = x_offset_;
let mut y_offset_ = y_offset_;
let mut z_offset_ = z_offset_;
let mut is_relative_ = is_relative_;
        let success = sdk::natives::attach_cam_to_entity(
            cam_,
entity_,
x_offset_,
y_offset_,
z_offset_,
is_relative_,
        );
        
        
        ResultOfAttachCamToEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_clock_minutes(&self, ) -> ResultOfGetClockMinutes {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_clock_minutes(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetClockMinutes {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_clock_hours(&self, ) -> ResultOfGetClockHours {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_clock_hours(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetClockHours {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_milliseconds_per_game_minute(&self, ) -> ResultOfGetMillisecondsPerGameMinute {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_milliseconds_per_game_minute(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetMillisecondsPerGameMinute {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_clock_day_of_month(&self, ) -> ResultOfGetClockDayOfMonth {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_clock_day_of_month(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetClockDayOfMonth {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pause_clock(&self, toggle_: bool) -> ResultOfPauseClock {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::pause_clock(
            toggle_,
        );
        
        
        ResultOfPauseClock {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_clock_time(&self, hour_: i32,
minute_: i32,
second_: i32) -> ResultOfSetClockTime {
    unsafe {
        let mut hour_ = hour_;
let mut minute_ = minute_;
let mut second_ = second_;
        let success = sdk::natives::set_clock_time(
            hour_,
minute_,
second_,
        );
        
        
        ResultOfSetClockTime {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_clock_seconds(&self, ) -> ResultOfGetClockSeconds {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_clock_seconds(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetClockSeconds {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_local_time(&self, year_: i32,
month_: i32,
day_: i32,
hour_: i32,
minute_: i32,
second_: i32) -> ResultOfGetLocalTime {
    unsafe {
        let mut year_ = year_;
let mut month_ = month_;
let mut day_ = day_;
let mut hour_ = hour_;
let mut minute_ = minute_;
let mut second_ = second_;
        let success = sdk::natives::get_local_time(
            &mut year_,
&mut month_,
&mut day_,
&mut hour_,
&mut minute_,
&mut second_,
        );
        let year_ = year_;
let month_ = month_;
let day_ = day_;
let hour_ = hour_;
let minute_ = minute_;
let second_ = second_;
        
        ResultOfGetLocalTime {
            success,
            ret: (),
            year_,
month_,
day_,
hour_,
minute_,
second_
        }
    }
}

    fn native_get_utc_time(&self, year_: i32,
month_: i32,
day_: i32,
hour_: i32,
minute_: i32,
second_: i32) -> ResultOfGetUtcTime {
    unsafe {
        let mut year_ = year_;
let mut month_ = month_;
let mut day_ = day_;
let mut hour_ = hour_;
let mut minute_ = minute_;
let mut second_ = second_;
        let success = sdk::natives::get_utc_time(
            &mut year_,
&mut month_,
&mut day_,
&mut hour_,
&mut minute_,
&mut second_,
        );
        let year_ = year_;
let month_ = month_;
let day_ = day_;
let hour_ = hour_;
let minute_ = minute_;
let second_ = second_;
        
        ResultOfGetUtcTime {
            success,
            ret: (),
            year_,
month_,
day_,
hour_,
minute_,
second_
        }
    }
}

    fn native_get_clock_year(&self, ) -> ResultOfGetClockYear {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_clock_year(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetClockYear {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_clock_date(&self, day_: i32,
month_: i32,
year_: i32) -> ResultOfSetClockDate {
    unsafe {
        let mut day_ = day_;
let mut month_ = month_;
let mut year_ = year_;
        let success = sdk::natives::set_clock_date(
            day_,
month_,
year_,
        );
        
        
        ResultOfSetClockDate {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_clock_month(&self, ) -> ResultOfGetClockMonth {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_clock_month(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetClockMonth {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_advance_clock_time_to(&self, hour_: i32,
minute_: i32,
second_: i32) -> ResultOfAdvanceClockTimeTo {
    unsafe {
        let mut hour_ = hour_;
let mut minute_ = minute_;
let mut second_ = second_;
        let success = sdk::natives::advance_clock_time_to(
            hour_,
minute_,
second_,
        );
        
        
        ResultOfAdvanceClockTimeTo {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_to_clock_time(&self, hours_: i32,
minutes_: i32,
seconds_: i32) -> ResultOfAddToClockTime {
    unsafe {
        let mut hours_ = hours_;
let mut minutes_ = minutes_;
let mut seconds_ = seconds_;
        let success = sdk::natives::add_to_clock_time(
            hours_,
minutes_,
seconds_,
        );
        
        
        ResultOfAddToClockTime {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_clock_day_of_week(&self, ) -> ResultOfGetClockDayOfWeek {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_clock_day_of_week(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetClockDayOfWeek {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_posix_time(&self, year_: i32,
month_: i32,
day_: i32,
hour_: i32,
minute_: i32,
second_: i32) -> ResultOfGetPosixTime {
    unsafe {
        let mut year_ = year_;
let mut month_ = month_;
let mut day_ = day_;
let mut hour_ = hour_;
let mut minute_ = minute_;
let mut second_ = second_;
        let success = sdk::natives::get_posix_time(
            &mut year_,
&mut month_,
&mut day_,
&mut hour_,
&mut minute_,
&mut second_,
        );
        let year_ = year_;
let month_ = month_;
let day_ = day_;
let hour_ = hour_;
let minute_ = minute_;
let second_ = second_;
        
        ResultOfGetPosixTime {
            success,
            ret: (),
            year_,
month_,
day_,
hour_,
minute_,
second_
        }
    }
}

    fn native_set_cutscene_origin_and_orientation(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
p6_: i32) -> ResultOfSetCutsceneOriginAndOrientation {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut p6_ = p6_;
        let success = sdk::natives::set_cutscene_origin_and_orientation(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
p6_,
        );
        
        
        ResultOfSetCutsceneOriginAndOrientation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cutscene_ped_prop_variation(&self, cutscene_ent_name_: Option<String>,
component_id_: i32,
drawable_id_: i32,
texture_id_: i32,
model_hash_: u32) -> ResultOfSetCutscenePedPropVariation {
    unsafe {
        let mut cutscene_ent_name_ = sdk_helpers::create_c_string_ptr(cutscene_ent_name_);
let mut component_id_ = component_id_;
let mut drawable_id_ = drawable_id_;
let mut texture_id_ = texture_id_;
let mut model_hash_ = model_hash_;
        let success = sdk::natives::set_cutscene_ped_prop_variation(
            cutscene_ent_name_.as_ref().unwrap(),
component_id_,
drawable_id_,
texture_id_,
model_hash_,
        );
        
        
        ResultOfSetCutscenePedPropVariation {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_cut_file(&self, cutscene_name_: Option<String>) -> ResultOfRequestCutFile {
    unsafe {
        let mut cutscene_name_ = sdk_helpers::create_c_string_ptr(cutscene_name_);
        let success = sdk::natives::request_cut_file(
            cutscene_name_.as_ref().unwrap(),
        );
        
        
        ResultOfRequestCutFile {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cutscene_multihead_fade_manual(&self, p0_: bool) -> ResultOfSetCutsceneMultiheadFadeManual {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_cutscene_multihead_fade_manual(
            p0_,
        );
        
        
        ResultOfSetCutsceneMultiheadFadeManual {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_index_of_cutscene_entity(&self, cutscene_ent_name_: Option<String>,
model_hash_: u32) -> ResultOfGetEntityIndexOfCutsceneEntity {
    unsafe {
        let mut native_return = Default::default();
let mut cutscene_ent_name_ = sdk_helpers::create_c_string_ptr(cutscene_ent_name_);
let mut model_hash_ = model_hash_;
        let success = sdk::natives::get_entity_index_of_cutscene_entity(
            &mut native_return,
cutscene_ent_name_.as_ref().unwrap(),
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityIndexOfCutsceneEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cut_file_concat_count(&self, cutscene_name_: Option<String>) -> ResultOfGetCutFileConcatCount {
    unsafe {
        let mut native_return = Default::default();
let mut cutscene_name_ = sdk_helpers::create_c_string_ptr(cutscene_name_);
        let success = sdk::natives::get_cut_file_concat_count(
            &mut native_return,
cutscene_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfGetCutFileConcatCount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_cutscene(&self, flags_: i32) -> ResultOfStartCutscene {
    unsafe {
        let mut flags_ = flags_;
        let success = sdk::natives::start_cutscene(
            flags_,
        );
        
        
        ResultOfStartCutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_cutscene_at_coords(&self, x_: f32,
y_: f32,
z_: f32,
flags_: i32) -> ResultOfStartCutsceneAtCoords {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut flags_ = flags_;
        let success = sdk::natives::start_cutscene_at_coords(
            x_,
y_,
z_,
flags_,
        );
        
        
        ResultOfStartCutsceneAtCoords {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cutscene_multihead_fade(&self, p0_: bool,
p1_: bool,
p2_: bool,
p3_: bool) -> ResultOfSetCutsceneMultiheadFade {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_cutscene_multihead_fade(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfSetCutsceneMultiheadFade {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_can_display_minimap_during_cutscene_this_update(&self, ) -> ResultOfSetCanDisplayMinimapDuringCutsceneThisUpdate {
    unsafe {
        
        let success = sdk::natives::set_can_display_minimap_during_cutscene_this_update(
            
        );
        
        
        ResultOfSetCanDisplayMinimapDuringCutsceneThisUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_this_cutscene_loaded(&self, cutscene_name_: Option<String>) -> ResultOfHasThisCutsceneLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut cutscene_name_ = sdk_helpers::create_c_string_ptr(cutscene_name_);
        let success = sdk::natives::has_this_cutscene_loaded(
            &mut native_return,
cutscene_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfHasThisCutsceneLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cutscene_ped_component_variation_from_ped(&self, cutscene_ent_name_: Option<String>,
ped_: u32,
model_hash_: u32) -> ResultOfSetCutscenePedComponentVariationFromPed {
    unsafe {
        let mut cutscene_ent_name_ = sdk_helpers::create_c_string_ptr(cutscene_ent_name_);
let mut ped_ = ped_;
let mut model_hash_ = model_hash_;
        let success = sdk::natives::set_cutscene_ped_component_variation_from_ped(
            cutscene_ent_name_.as_ref().unwrap(),
ped_,
model_hash_,
        );
        
        
        ResultOfSetCutscenePedComponentVariationFromPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_mocap_cutscene_can_be_skipped(&self, p0_: bool) -> ResultOfNetworkSetMocapCutsceneCanBeSkipped {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_set_mocap_cutscene_can_be_skipped(
            p0_,
        );
        
        
        ResultOfNetworkSetMocapCutsceneCanBeSkipped {
            success,
            ret: (),
            
        }
    }
}

    fn native_was_cutscene_skipped(&self, ) -> ResultOfWasCutsceneSkipped {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::was_cutscene_skipped(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfWasCutsceneSkipped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cutscene_can_be_skipped(&self, p0_: bool) -> ResultOfSetCutsceneCanBeSkipped {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_cutscene_can_be_skipped(
            p0_,
        );
        
        
        ResultOfSetCutsceneCanBeSkipped {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_cutscene(&self, ) -> ResultOfRemoveCutscene {
    unsafe {
        
        let success = sdk::natives::remove_cutscene(
            
        );
        
        
        ResultOfRemoveCutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cutscene_section_playing(&self, ) -> ResultOfGetCutsceneSectionPlaying {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_cutscene_section_playing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetCutsceneSectionPlaying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_cutscene_entity_exist(&self, cutscene_ent_name_: Option<String>,
model_hash_: u32) -> ResultOfDoesCutsceneEntityExist {
    unsafe {
        let mut native_return = Default::default();
let mut cutscene_ent_name_ = sdk_helpers::create_c_string_ptr(cutscene_ent_name_);
let mut model_hash_ = model_hash_;
        let success = sdk::natives::does_cutscene_entity_exist(
            &mut native_return,
cutscene_ent_name_.as_ref().unwrap(),
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfDoesCutsceneEntityExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cutscene_entity_streaming_flags(&self, cutscene_ent_name_: Option<String>,
p1_: i32,
p2_: i32) -> ResultOfSetCutsceneEntityStreamingFlags {
    unsafe {
        let mut cutscene_ent_name_ = sdk_helpers::create_c_string_ptr(cutscene_ent_name_);
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_cutscene_entity_streaming_flags(
            cutscene_ent_name_.as_ref().unwrap(),
p1_,
p2_,
        );
        
        
        ResultOfSetCutsceneEntityStreamingFlags {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_set_exit_state_for_registered_entity(&self, cutscene_ent_name_: Option<String>,
model_hash_: u32) -> ResultOfCanSetExitStateForRegisteredEntity {
    unsafe {
        let mut native_return = Default::default();
let mut cutscene_ent_name_ = sdk_helpers::create_c_string_ptr(cutscene_ent_name_);
let mut model_hash_ = model_hash_;
        let success = sdk::natives::can_set_exit_state_for_registered_entity(
            &mut native_return,
cutscene_ent_name_.as_ref().unwrap(),
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfCanSetExitStateForRegisteredEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_cutscene_authorized(&self, cutscene_name_: Option<String>) -> ResultOfIsCutsceneAuthorized {
    unsafe {
        let mut native_return = Default::default();
let mut cutscene_name_ = sdk_helpers::create_c_string_ptr(cutscene_name_);
        let success = sdk::natives::is_cutscene_authorized(
            &mut native_return,
cutscene_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfIsCutsceneAuthorized {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_cutscene_handle_exist(&self, cutscene_handle_: i32) -> ResultOfDoesCutsceneHandleExist {
    unsafe {
        let mut native_return = Default::default();
let mut cutscene_handle_ = cutscene_handle_;
        let success = sdk::natives::does_cutscene_handle_exist(
            &mut native_return,
cutscene_handle_,
        );
        let native_return = native_return;
        
        ResultOfDoesCutsceneHandleExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cutscene_concat_section_playing(&self, ) -> ResultOfGetCutsceneConcatSectionPlaying {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_cutscene_concat_section_playing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetCutsceneConcatSectionPlaying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cutscene_play_duration(&self, ) -> ResultOfGetCutscenePlayDuration {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_cutscene_play_duration(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetCutscenePlayDuration {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_use_mobile_phone_during_cutscene(&self, ) -> ResultOfCanUseMobilePhoneDuringCutscene {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::can_use_mobile_phone_during_cutscene(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfCanUseMobilePhoneDuringCutscene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_set_enter_state_for_registered_entity(&self, cutscene_ent_name_: Option<String>,
model_hash_: u32) -> ResultOfCanSetEnterStateForRegisteredEntity {
    unsafe {
        let mut native_return = Default::default();
let mut cutscene_ent_name_ = sdk_helpers::create_c_string_ptr(cutscene_ent_name_);
let mut model_hash_ = model_hash_;
        let success = sdk::natives::can_set_enter_state_for_registered_entity(
            &mut native_return,
cutscene_ent_name_.as_ref().unwrap(),
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfCanSetEnterStateForRegisteredEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_cutscene_cut_this_frame(&self, ) -> ResultOfHasCutsceneCutThisFrame {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_cutscene_cut_this_frame(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfHasCutsceneCutThisFrame {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_cutscene_playback_flag_set(&self, flag_: i32) -> ResultOfIsCutscenePlaybackFlagSet {
    unsafe {
        let mut native_return = Default::default();
let mut flag_ = flag_;
        let success = sdk::natives::is_cutscene_playback_flag_set(
            &mut native_return,
flag_,
        );
        let native_return = native_return;
        
        ResultOfIsCutscenePlaybackFlagSet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_cutscene(&self, cutscene_name_: Option<String>,
flags_: i32) -> ResultOfRequestCutscene {
    unsafe {
        let mut cutscene_name_ = sdk_helpers::create_c_string_ptr(cutscene_name_);
let mut flags_ = flags_;
        let success = sdk::natives::request_cutscene(
            cutscene_name_.as_ref().unwrap(),
flags_,
        );
        
        
        ResultOfRequestCutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_cutscene_finished(&self, ) -> ResultOfHasCutsceneFinished {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_cutscene_finished(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfHasCutsceneFinished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_model_player_will_exit_scene(&self, model_hash_: u32) -> ResultOfSetVehicleModelPlayerWillExitScene {
    unsafe {
        let mut model_hash_ = model_hash_;
        let success = sdk::natives::set_vehicle_model_player_will_exit_scene(
            model_hash_,
        );
        
        
        ResultOfSetVehicleModelPlayerWillExitScene {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cutscene_fade_values(&self, p0_: bool,
p1_: bool,
p2_: bool,
p3_: bool) -> ResultOfSetCutsceneFadeValues {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_cutscene_fade_values(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfSetCutsceneFadeValues {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_script_can_start_cutscene(&self, thread_id_: i32) -> ResultOfSetScriptCanStartCutscene {
    unsafe {
        let mut thread_id_ = thread_id_;
        let success = sdk::natives::set_script_can_start_cutscene(
            thread_id_,
        );
        
        
        ResultOfSetScriptCanStartCutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cutscene_end_time(&self, ) -> ResultOfGetCutsceneEndTime {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_cutscene_end_time(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetCutsceneEndTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cutscene_trigger_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOfSetCutsceneTriggerArea {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::set_cutscene_trigger_area(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        
        
        ResultOfSetCutsceneTriggerArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_cutscene_active(&self, ) -> ResultOfIsCutsceneActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_cutscene_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsCutsceneActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_multihead_fade_up(&self, ) -> ResultOfIsMultiheadFadeUp {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_multihead_fade_up(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsMultiheadFadeUp {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_cut_file_loaded(&self, cutscene_name_: Option<String>) -> ResultOfHasCutFileLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut cutscene_name_ = sdk_helpers::create_c_string_ptr(cutscene_name_);
        let success = sdk::natives::has_cut_file_loaded(
            &mut native_return,
cutscene_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfHasCutFileLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_set_exit_state_for_camera(&self, p0_: bool) -> ResultOfCanSetExitStateForCamera {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::can_set_exit_state_for_camera(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfCanSetExitStateForCamera {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_request_assets_for_cutscene_entity(&self, ) -> ResultOfCanRequestAssetsForCutsceneEntity {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::can_request_assets_for_cutscene_entity(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfCanRequestAssetsForCutsceneEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cutscene_origin(&self, x_: f32,
y_: f32,
z_: f32,
p3_: f32,
p4_: i32) -> ResultOfSetCutsceneOrigin {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::set_cutscene_origin(
            x_,
y_,
z_,
p3_,
p4_,
        );
        
        
        ResultOfSetCutsceneOrigin {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cutscene_ped_component_variation(&self, cutscene_ent_name_: Option<String>,
component_id_: i32,
drawable_id_: i32,
texture_id_: i32,
model_hash_: u32) -> ResultOfSetCutscenePedComponentVariation {
    unsafe {
        let mut cutscene_ent_name_ = sdk_helpers::create_c_string_ptr(cutscene_ent_name_);
let mut component_id_ = component_id_;
let mut drawable_id_ = drawable_id_;
let mut texture_id_ = texture_id_;
let mut model_hash_ = model_hash_;
        let success = sdk::natives::set_cutscene_ped_component_variation(
            cutscene_ent_name_.as_ref().unwrap(),
component_id_,
drawable_id_,
texture_id_,
model_hash_,
        );
        
        
        ResultOfSetCutscenePedComponentVariation {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_index_of_registered_entity(&self, cutscene_ent_name_: Option<String>,
model_hash_: u32) -> ResultOfGetEntityIndexOfRegisteredEntity {
    unsafe {
        let mut native_return = Default::default();
let mut cutscene_ent_name_ = sdk_helpers::create_c_string_ptr(cutscene_ent_name_);
let mut model_hash_ = model_hash_;
        let success = sdk::natives::get_entity_index_of_registered_entity(
            &mut native_return,
cutscene_ent_name_.as_ref().unwrap(),
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityIndexOfRegisteredEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_cutscene_with_playback_list(&self, cutscene_name_: Option<String>,
playback_flags_: i32,
flags_: i32) -> ResultOfRequestCutsceneWithPlaybackList {
    unsafe {
        let mut cutscene_name_ = sdk_helpers::create_c_string_ptr(cutscene_name_);
let mut playback_flags_ = playback_flags_;
let mut flags_ = flags_;
        let success = sdk::natives::request_cutscene_with_playback_list(
            cutscene_name_.as_ref().unwrap(),
playback_flags_,
flags_,
        );
        
        
        ResultOfRequestCutsceneWithPlaybackList {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_cutscene_loaded(&self, ) -> ResultOfHasCutsceneLoaded {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_cutscene_loaded(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfHasCutsceneLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_pad_can_shake_during_cutscene(&self, toggle_: bool) -> ResultOfSetPadCanShakeDuringCutscene {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_pad_can_shake_during_cutscene(
            toggle_,
        );
        
        
        ResultOfSetPadCanShakeDuringCutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_cutscene(&self, p0_: bool) -> ResultOfStopCutscene {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stop_cutscene(
            p0_,
        );
        
        
        ResultOfStopCutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_cut_file(&self, cutscene_name_: Option<String>) -> ResultOfRemoveCutFile {
    unsafe {
        let mut cutscene_name_ = sdk_helpers::create_c_string_ptr(cutscene_name_);
        let success = sdk::natives::remove_cut_file(
            cutscene_name_.as_ref().unwrap(),
        );
        
        
        ResultOfRemoveCutFile {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_cutscene_immediately(&self, ) -> ResultOfStopCutsceneImmediately {
    unsafe {
        
        let success = sdk::natives::stop_cutscene_immediately(
            
        );
        
        
        ResultOfStopCutsceneImmediately {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_cutscene_playing(&self, ) -> ResultOfIsCutscenePlaying {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_cutscene_playing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsCutscenePlaying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_car_generators_can_update_during_cutscene(&self, p0_: bool) -> ResultOfSetCarGeneratorsCanUpdateDuringCutscene {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_car_generators_can_update_during_cutscene(
            p0_,
        );
        
        
        ResultOfSetCarGeneratorsCanUpdateDuringCutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_entity_for_cutscene(&self, cutscene_ped_: u32,
cutscene_ent_name_: Option<String>,
p2_: i32,
model_hash_: u32,
p4_: i32) -> ResultOfRegisterEntityForCutscene {
    unsafe {
        let mut cutscene_ped_ = cutscene_ped_;
let mut cutscene_ent_name_ = sdk_helpers::create_c_string_ptr(cutscene_ent_name_);
let mut p2_ = p2_;
let mut model_hash_ = model_hash_;
let mut p4_ = p4_;
        let success = sdk::natives::register_entity_for_cutscene(
            cutscene_ped_,
cutscene_ent_name_.as_ref().unwrap(),
p2_,
model_hash_,
p4_,
        );
        
        
        ResultOfRegisterEntityForCutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cutscene_time(&self, ) -> ResultOfGetCutsceneTime {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_cutscene_time(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetCutsceneTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cutscene_total_duration(&self, ) -> ResultOfGetCutsceneTotalDuration {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_cutscene_total_duration(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetCutsceneTotalDuration {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datafile_select_creator_stats(&self, p0_: i32,
p1_: i32) -> ResultOfDatafileSelectCreatorStats {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::datafile_select_creator_stats(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfDatafileSelectCreatorStats {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datadict_get_type(&self, object_data_: shared::MemoryBufferId,
key_: Option<String>) -> ResultOfDatadictGetType {
    unsafe {
        let mut native_return = Default::default();
let mut object_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(object_data_) as *mut c_void;
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
        let success = sdk::natives::datadict_get_type(
            &mut native_return,
object_data_,
key_.as_ref().unwrap(),
        );
        let native_return = native_return;
let object_data_ = 0;
        
        ResultOfDatadictGetType {
            success,
            ret: native_return,
            object_data_
        }
    }
}

    fn native_dataarray_get_count(&self, array_data_: shared::MemoryBufferId) -> ResultOfDataarrayGetCount {
    unsafe {
        let mut native_return = Default::default();
let mut array_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(array_data_) as *mut c_void;
        let success = sdk::natives::dataarray_get_count(
            &mut native_return,
array_data_,
        );
        let native_return = native_return;
let array_data_ = 0;
        
        ResultOfDataarrayGetCount {
            success,
            ret: native_return,
            array_data_
        }
    }
}

    fn native_datadict_get_float(&self, object_data_: shared::MemoryBufferId,
key_: Option<String>) -> ResultOfDatadictGetFloat {
    unsafe {
        let mut native_return = Default::default();
let mut object_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(object_data_) as *mut c_void;
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
        let success = sdk::natives::datadict_get_float(
            &mut native_return,
object_data_,
key_.as_ref().unwrap(),
        );
        let native_return = native_return;
let object_data_ = 0;
        
        ResultOfDatadictGetFloat {
            success,
            ret: native_return,
            object_data_
        }
    }
}

    fn native_datadict_get_bool(&self, object_data_: shared::MemoryBufferId,
key_: Option<String>) -> ResultOfDatadictGetBool {
    unsafe {
        let mut native_return = Default::default();
let mut object_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(object_data_) as *mut c_void;
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
        let success = sdk::natives::datadict_get_bool(
            &mut native_return,
object_data_,
key_.as_ref().unwrap(),
        );
        let native_return = native_return;
let object_data_ = 0;
        
        ResultOfDatadictGetBool {
            success,
            ret: native_return,
            object_data_
        }
    }
}

    fn native_datafile_has_loaded_file_data(&self, request_id_: i32) -> ResultOfDatafileHasLoadedFileData {
    unsafe {
        let mut native_return = Default::default();
let mut request_id_ = request_id_;
        let success = sdk::natives::datafile_has_loaded_file_data(
            &mut native_return,
request_id_,
        );
        let native_return = native_return;
        
        ResultOfDatafileHasLoadedFileData {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datafile_select_active_file(&self, request_id_: i32,
p1_: i32) -> ResultOfDatafileSelectActiveFile {
    unsafe {
        let mut native_return = Default::default();
let mut request_id_ = request_id_;
let mut p1_ = p1_;
        let success = sdk::natives::datafile_select_active_file(
            &mut native_return,
request_id_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfDatafileSelectActiveFile {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datafile_store_mission_header(&self, p0_: i32) -> ResultOfDatafileStoreMissionHeader {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::datafile_store_mission_header(
            p0_,
        );
        
        
        ResultOfDatafileStoreMissionHeader {
            success,
            ret: (),
            
        }
    }
}

    fn native_dataarray_add_string(&self, array_data_: shared::MemoryBufferId,
value_: Option<String>) -> ResultOfDataarrayAddString {
    unsafe {
        let mut array_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(array_data_) as *mut c_void;
let mut value_ = sdk_helpers::create_c_string_ptr(value_);
        let success = sdk::natives::dataarray_add_string(
            array_data_,
value_.as_ref().unwrap(),
        );
        let array_data_ = 0;
        
        ResultOfDataarrayAddString {
            success,
            ret: (),
            array_data_
        }
    }
}

    fn native_datadict_set_bool(&self, object_data_: shared::MemoryBufferId,
key_: Option<String>,
value_: bool) -> ResultOfDatadictSetBool {
    unsafe {
        let mut object_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(object_data_) as *mut c_void;
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
let mut value_ = value_;
        let success = sdk::natives::datadict_set_bool(
            object_data_,
key_.as_ref().unwrap(),
value_,
        );
        let object_data_ = 0;
        
        ResultOfDatadictSetBool {
            success,
            ret: (),
            object_data_
        }
    }
}

    fn native_dataarray_get_type(&self, array_data_: shared::MemoryBufferId,
array_index_: i32) -> ResultOfDataarrayGetType {
    unsafe {
        let mut native_return = Default::default();
let mut array_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(array_data_) as *mut c_void;
let mut array_index_ = array_index_;
        let success = sdk::natives::dataarray_get_type(
            &mut native_return,
array_data_,
array_index_,
        );
        let native_return = native_return;
let array_data_ = 0;
        
        ResultOfDataarrayGetType {
            success,
            ret: native_return,
            array_data_
        }
    }
}

    fn native_datadict_get_string(&self, object_data_: shared::MemoryBufferId,
key_: Option<String>) -> ResultOfDatadictGetString {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut object_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(object_data_) as *mut c_void;
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
        let success = sdk::natives::datadict_get_string(
            native_return.pin_mut(),
object_data_,
key_.as_ref().unwrap(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
let object_data_ = 0;
        
        ResultOfDatadictGetString {
            success,
            ret: native_return,
            object_data_
        }
    }
}

    fn native_dataarray_get_int(&self, array_data_: shared::MemoryBufferId,
array_index_: i32) -> ResultOfDataarrayGetInt {
    unsafe {
        let mut native_return = Default::default();
let mut array_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(array_data_) as *mut c_void;
let mut array_index_ = array_index_;
        let success = sdk::natives::dataarray_get_int(
            &mut native_return,
array_data_,
array_index_,
        );
        let native_return = native_return;
let array_data_ = 0;
        
        ResultOfDataarrayGetInt {
            success,
            ret: native_return,
            array_data_
        }
    }
}

    fn native_dataarray_add_vector(&self, array_data_: shared::MemoryBufferId,
value_x_: f32,
value_y_: f32,
value_z_: f32) -> ResultOfDataarrayAddVector {
    unsafe {
        let mut array_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(array_data_) as *mut c_void;
let mut value_x_ = value_x_;
let mut value_y_ = value_y_;
let mut value_z_ = value_z_;
        let success = sdk::natives::dataarray_add_vector(
            array_data_,
value_x_,
value_y_,
value_z_,
        );
        let array_data_ = 0;
        
        ResultOfDataarrayAddVector {
            success,
            ret: (),
            array_data_
        }
    }
}

    fn native_ugc_update_mission(&self, content_id_: Option<String>,
content_name_: Option<String>,
description_: Option<String>,
tags_csv_: Option<String>,
content_type_name_: Option<String>,
p5_: i32) -> ResultOfUgcUpdateMission {
    unsafe {
        let mut native_return = Default::default();
let mut content_id_ = sdk_helpers::create_c_string_ptr(content_id_);
let mut content_name_ = sdk_helpers::create_c_string_ptr(content_name_);
let mut description_ = sdk_helpers::create_c_string_ptr(description_);
let mut tags_csv_ = sdk_helpers::create_c_string_ptr(tags_csv_);
let mut content_type_name_ = sdk_helpers::create_c_string_ptr(content_type_name_);
let mut p5_ = p5_;
        let success = sdk::natives::ugc_update_mission(
            &mut native_return,
content_id_.as_ref().unwrap(),
content_name_.as_ref().unwrap(),
description_.as_ref().unwrap(),
tags_csv_.as_ref().unwrap(),
content_type_name_.as_ref().unwrap(),
p5_,
        );
        let native_return = native_return;
        
        ResultOfUgcUpdateMission {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datadict_get_vector(&self, object_data_: shared::MemoryBufferId,
key_: Option<String>) -> ResultOfDatadictGetVector {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut object_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(object_data_) as *mut c_void;
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
        let success = sdk::natives::datadict_get_vector(
            native_return.pin_mut(),
object_data_,
key_.as_ref().unwrap(),
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
let object_data_ = 0;
        
        ResultOfDatadictGetVector {
            success,
            ret: native_return,
            object_data_
        }
    }
}

    fn native_datadict_set_vector(&self, object_data_: shared::MemoryBufferId,
key_: Option<String>,
value_x_: f32,
value_y_: f32,
value_z_: f32) -> ResultOfDatadictSetVector {
    unsafe {
        let mut object_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(object_data_) as *mut c_void;
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
let mut value_x_ = value_x_;
let mut value_y_ = value_y_;
let mut value_z_ = value_z_;
        let success = sdk::natives::datadict_set_vector(
            object_data_,
key_.as_ref().unwrap(),
value_x_,
value_y_,
value_z_,
        );
        let object_data_ = 0;
        
        ResultOfDatadictSetVector {
            success,
            ret: (),
            object_data_
        }
    }
}

    fn native_datafile_update_save_to_cloud(&self, p0_: bool) -> ResultOfDatafileUpdateSaveToCloud {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::datafile_update_save_to_cloud(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOfDatafileUpdateSaveToCloud {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_dataarray_get_bool(&self, array_data_: shared::MemoryBufferId,
array_index_: i32) -> ResultOfDataarrayGetBool {
    unsafe {
        let mut native_return = Default::default();
let mut array_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(array_data_) as *mut c_void;
let mut array_index_ = array_index_;
        let success = sdk::natives::dataarray_get_bool(
            &mut native_return,
array_data_,
array_index_,
        );
        let native_return = native_return;
let array_data_ = 0;
        
        ResultOfDataarrayGetBool {
            success,
            ret: native_return,
            array_data_
        }
    }
}

    fn native_datafile_select_ugc_player_data(&self, p0_: i32,
p1_: i32) -> ResultOfDatafileSelectUgcPlayerData {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::datafile_select_ugc_player_data(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfDatafileSelectUgcPlayerData {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_dataarray_add_float(&self, array_data_: shared::MemoryBufferId,
value_: f32) -> ResultOfDataarrayAddFloat {
    unsafe {
        let mut array_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(array_data_) as *mut c_void;
let mut value_ = value_;
        let success = sdk::natives::dataarray_add_float(
            array_data_,
value_,
        );
        let array_data_ = 0;
        
        ResultOfDataarrayAddFloat {
            success,
            ret: (),
            array_data_
        }
    }
}

    fn native_datadict_create_array(&self, object_data_: shared::MemoryBufferId,
key_: Option<String>) -> ResultOfDatadictCreateArray {
    unsafe {
        let mut native_return = Default::default();
let mut object_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(object_data_) as *mut c_void;
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
        let success = sdk::natives::datadict_create_array(
            &mut native_return,
object_data_,
key_.as_ref().unwrap(),
        );
        let native_return = native_return;
let object_data_ = 0;
        
        ResultOfDatadictCreateArray {
            success,
            ret: native_return,
            object_data_
        }
    }
}

    fn native_ugc_update_content(&self, content_id_: Option<String>,
data_: shared::MemoryBufferId,
data_count_: i32,
content_name_: Option<String>,
description_: Option<String>,
tags_csv_: Option<String>,
content_type_name_: Option<String>,
p7_: i32) -> ResultOfUgcUpdateContent {
    unsafe {
        let mut native_return = Default::default();
let mut content_id_ = sdk_helpers::create_c_string_ptr(content_id_);
let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
let mut data_count_ = data_count_;
let mut content_name_ = sdk_helpers::create_c_string_ptr(content_name_);
let mut description_ = sdk_helpers::create_c_string_ptr(description_);
let mut tags_csv_ = sdk_helpers::create_c_string_ptr(tags_csv_);
let mut content_type_name_ = sdk_helpers::create_c_string_ptr(content_type_name_);
let mut p7_ = p7_;
        let success = sdk::natives::ugc_update_content(
            &mut native_return,
data_,
content_id_.as_ref().unwrap(),
data_count_,
content_name_.as_ref().unwrap(),
description_.as_ref().unwrap(),
tags_csv_.as_ref().unwrap(),
content_type_name_.as_ref().unwrap(),
p7_,
        );
        let native_return = native_return;
let data_ = 0;
        
        ResultOfUgcUpdateContent {
            success,
            ret: native_return,
            data_
        }
    }
}

    fn native_dataarray_add_dict(&self, array_data_: shared::MemoryBufferId) -> ResultOfDataarrayAddDict {
    unsafe {
        let mut native_return = Default::default();
let mut array_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(array_data_) as *mut c_void;
        let success = sdk::natives::dataarray_add_dict(
            &mut native_return,
array_data_,
        );
        let native_return = native_return;
let array_data_ = 0;
        
        ResultOfDataarrayAddDict {
            success,
            ret: native_return,
            array_data_
        }
    }
}

    fn native_ugc_set_player_data(&self, content_id_: Option<String>,
rating_: f32,
content_type_name_: Option<String>,
p3_: i32) -> ResultOfUgcSetPlayerData {
    unsafe {
        let mut native_return = Default::default();
let mut content_id_ = sdk_helpers::create_c_string_ptr(content_id_);
let mut rating_ = rating_;
let mut content_type_name_ = sdk_helpers::create_c_string_ptr(content_type_name_);
let mut p3_ = p3_;
        let success = sdk::natives::ugc_set_player_data(
            &mut native_return,
content_id_.as_ref().unwrap(),
rating_,
content_type_name_.as_ref().unwrap(),
p3_,
        );
        let native_return = native_return;
        
        ResultOfUgcSetPlayerData {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datafile_delete_for_additional_data_file(&self, p0_: i32) -> ResultOfDatafileDeleteForAdditionalDataFile {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::datafile_delete_for_additional_data_file(
            p0_,
        );
        
        
        ResultOfDatafileDeleteForAdditionalDataFile {
            success,
            ret: (),
            
        }
    }
}

    fn native_datafile_clear_watch_list(&self, ) -> ResultOfDatafileClearWatchList {
    unsafe {
        
        let success = sdk::natives::datafile_clear_watch_list(
            
        );
        
        
        ResultOfDatafileClearWatchList {
            success,
            ret: (),
            
        }
    }
}

    fn native_datadict_get_int(&self, object_data_: shared::MemoryBufferId,
key_: Option<String>) -> ResultOfDatadictGetInt {
    unsafe {
        let mut native_return = Default::default();
let mut object_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(object_data_) as *mut c_void;
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
        let success = sdk::natives::datadict_get_int(
            &mut native_return,
object_data_,
key_.as_ref().unwrap(),
        );
        let native_return = native_return;
let object_data_ = 0;
        
        ResultOfDatadictGetInt {
            success,
            ret: native_return,
            object_data_
        }
    }
}

    fn native_datadict_get_array(&self, object_data_: shared::MemoryBufferId,
key_: Option<String>) -> ResultOfDatadictGetArray {
    unsafe {
        let mut native_return = Default::default();
let mut object_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(object_data_) as *mut c_void;
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
        let success = sdk::natives::datadict_get_array(
            &mut native_return,
object_data_,
key_.as_ref().unwrap(),
        );
        let native_return = native_return;
let object_data_ = 0;
        
        ResultOfDatadictGetArray {
            success,
            ret: native_return,
            object_data_
        }
    }
}

    fn native_datafile_start_save_to_cloud(&self, filename_: Option<String>,
p1_: i32) -> ResultOfDatafileStartSaveToCloud {
    unsafe {
        let mut native_return = Default::default();
let mut filename_ = sdk_helpers::create_c_string_ptr(filename_);
let mut p1_ = p1_;
        let success = sdk::natives::datafile_start_save_to_cloud(
            &mut native_return,
filename_.as_ref().unwrap(),
p1_,
        );
        let native_return = native_return;
        
        ResultOfDatafileStartSaveToCloud {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_dataarray_get_dict(&self, array_data_: shared::MemoryBufferId,
array_index_: i32) -> ResultOfDataarrayGetDict {
    unsafe {
        let mut native_return = Default::default();
let mut array_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(array_data_) as *mut c_void;
let mut array_index_ = array_index_;
        let success = sdk::natives::dataarray_get_dict(
            &mut native_return,
array_data_,
array_index_,
        );
        let native_return = native_return;
let array_data_ = 0;
        
        ResultOfDataarrayGetDict {
            success,
            ret: native_return,
            array_data_
        }
    }
}

    fn native_dataarray_get_vector(&self, array_data_: shared::MemoryBufferId,
array_index_: i32) -> ResultOfDataarrayGetVector {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut array_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(array_data_) as *mut c_void;
let mut array_index_ = array_index_;
        let success = sdk::natives::dataarray_get_vector(
            native_return.pin_mut(),
array_data_,
array_index_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
let array_data_ = 0;
        
        ResultOfDataarrayGetVector {
            success,
            ret: native_return,
            array_data_
        }
    }
}

    fn native_datafile_delete_requested_file(&self, request_id_: i32) -> ResultOfDatafileDeleteRequestedFile {
    unsafe {
        let mut native_return = Default::default();
let mut request_id_ = request_id_;
        let success = sdk::natives::datafile_delete_requested_file(
            &mut native_return,
request_id_,
        );
        let native_return = native_return;
        
        ResultOfDatafileDeleteRequestedFile {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datadict_set_string(&self, object_data_: shared::MemoryBufferId,
key_: Option<String>,
value_: Option<String>) -> ResultOfDatadictSetString {
    unsafe {
        let mut object_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(object_data_) as *mut c_void;
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
let mut value_ = sdk_helpers::create_c_string_ptr(value_);
        let success = sdk::natives::datadict_set_string(
            object_data_,
key_.as_ref().unwrap(),
value_.as_ref().unwrap(),
        );
        let object_data_ = 0;
        
        ResultOfDatadictSetString {
            success,
            ret: (),
            object_data_
        }
    }
}

    fn native_datafile_get_file_dict(&self, p0_: i32) -> ResultOfDatafileGetFileDict {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::datafile_get_file_dict(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfDatafileGetFileDict {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datafile_delete(&self, p0_: i32) -> ResultOfDatafileDelete {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::datafile_delete(
            p0_,
        );
        
        
        ResultOfDatafileDelete {
            success,
            ret: (),
            
        }
    }
}

    fn native_datafile_select_ugc_stats(&self, p0_: i32,
p1_: bool,
p2_: i32) -> ResultOfDatafileSelectUgcStats {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::datafile_select_ugc_stats(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfDatafileSelectUgcStats {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datadict_create_dict(&self, object_data_: shared::MemoryBufferId,
key_: Option<String>) -> ResultOfDatadictCreateDict {
    unsafe {
        let mut native_return = Default::default();
let mut object_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(object_data_) as *mut c_void;
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
        let success = sdk::natives::datadict_create_dict(
            &mut native_return,
object_data_,
key_.as_ref().unwrap(),
        );
        let native_return = native_return;
let object_data_ = 0;
        
        ResultOfDatadictCreateDict {
            success,
            ret: native_return,
            object_data_
        }
    }
}

    fn native_ugc_create_mission(&self, content_name_: Option<String>,
description_: Option<String>,
tags_csv_: Option<String>,
content_type_name_: Option<String>,
publish_: bool,
p5_: i32) -> ResultOfUgcCreateMission {
    unsafe {
        let mut native_return = Default::default();
let mut content_name_ = sdk_helpers::create_c_string_ptr(content_name_);
let mut description_ = sdk_helpers::create_c_string_ptr(description_);
let mut tags_csv_ = sdk_helpers::create_c_string_ptr(tags_csv_);
let mut content_type_name_ = sdk_helpers::create_c_string_ptr(content_type_name_);
let mut publish_ = publish_;
let mut p5_ = p5_;
        let success = sdk::natives::ugc_create_mission(
            &mut native_return,
content_name_.as_ref().unwrap(),
description_.as_ref().unwrap(),
tags_csv_.as_ref().unwrap(),
content_type_name_.as_ref().unwrap(),
publish_,
p5_,
        );
        let native_return = native_return;
        
        ResultOfUgcCreateMission {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datafile_select_ugc_data(&self, p0_: i32,
p1_: i32) -> ResultOfDatafileSelectUgcData {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::datafile_select_ugc_data(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfDatafileSelectUgcData {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datafile_load_offline_ugc_for_additional_data_file(&self, p0_: i32,
p1_: i32) -> ResultOfDatafileLoadOfflineUgcForAdditionalDataFile {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::datafile_load_offline_ugc_for_additional_data_file(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfDatafileLoadOfflineUgcForAdditionalDataFile {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datafile_watch_request_id(&self, request_id_: i32) -> ResultOfDatafileWatchRequestId {
    unsafe {
        let mut request_id_ = request_id_;
        let success = sdk::natives::datafile_watch_request_id(
            request_id_,
        );
        
        
        ResultOfDatafileWatchRequestId {
            success,
            ret: (),
            
        }
    }
}

    fn native_datadict_get_dict(&self, object_data_: shared::MemoryBufferId,
key_: Option<String>) -> ResultOfDatadictGetDict {
    unsafe {
        let mut native_return = Default::default();
let mut object_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(object_data_) as *mut c_void;
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
        let success = sdk::natives::datadict_get_dict(
            &mut native_return,
object_data_,
key_.as_ref().unwrap(),
        );
        let native_return = native_return;
let object_data_ = 0;
        
        ResultOfDatadictGetDict {
            success,
            ret: native_return,
            object_data_
        }
    }
}

    fn native_datafile_is_save_pending(&self, ) -> ResultOfDatafileIsSavePending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::datafile_is_save_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfDatafileIsSavePending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_dataarray_get_float(&self, array_data_: shared::MemoryBufferId,
array_index_: i32) -> ResultOfDataarrayGetFloat {
    unsafe {
        let mut native_return = Default::default();
let mut array_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(array_data_) as *mut c_void;
let mut array_index_ = array_index_;
        let success = sdk::natives::dataarray_get_float(
            &mut native_return,
array_data_,
array_index_,
        );
        let native_return = native_return;
let array_data_ = 0;
        
        ResultOfDataarrayGetFloat {
            success,
            ret: native_return,
            array_data_
        }
    }
}

    fn native_datadict_set_float(&self, object_data_: shared::MemoryBufferId,
key_: Option<String>,
value_: f32) -> ResultOfDatadictSetFloat {
    unsafe {
        let mut object_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(object_data_) as *mut c_void;
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
let mut value_ = value_;
        let success = sdk::natives::datadict_set_float(
            object_data_,
key_.as_ref().unwrap(),
value_,
        );
        let object_data_ = 0;
        
        ResultOfDatadictSetFloat {
            success,
            ret: (),
            object_data_
        }
    }
}

    fn native_datafile_load_offline_ugc(&self, filename_: Option<String>,
p1_: i32) -> ResultOfDatafileLoadOfflineUgc {
    unsafe {
        let mut native_return = Default::default();
let mut filename_ = sdk_helpers::create_c_string_ptr(filename_);
let mut p1_ = p1_;
        let success = sdk::natives::datafile_load_offline_ugc(
            &mut native_return,
filename_.as_ref().unwrap(),
p1_,
        );
        let native_return = native_return;
        
        ResultOfDatafileLoadOfflineUgc {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datafile_flush_mission_header(&self, ) -> ResultOfDatafileFlushMissionHeader {
    unsafe {
        
        let success = sdk::natives::datafile_flush_mission_header(
            
        );
        
        
        ResultOfDatafileFlushMissionHeader {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_create_content(&self, data_: shared::MemoryBufferId,
data_count_: i32,
content_name_: Option<String>,
description_: Option<String>,
tags_csv_: Option<String>,
content_type_name_: Option<String>,
publish_: bool,
p7_: i32) -> ResultOfUgcCreateContent {
    unsafe {
        let mut native_return = Default::default();
let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
let mut data_count_ = data_count_;
let mut content_name_ = sdk_helpers::create_c_string_ptr(content_name_);
let mut description_ = sdk_helpers::create_c_string_ptr(description_);
let mut tags_csv_ = sdk_helpers::create_c_string_ptr(tags_csv_);
let mut content_type_name_ = sdk_helpers::create_c_string_ptr(content_type_name_);
let mut publish_ = publish_;
let mut p7_ = p7_;
        let success = sdk::natives::ugc_create_content(
            &mut native_return,
data_,
data_count_,
content_name_.as_ref().unwrap(),
description_.as_ref().unwrap(),
tags_csv_.as_ref().unwrap(),
content_type_name_.as_ref().unwrap(),
publish_,
p7_,
        );
        let native_return = native_return;
let data_ = 0;
        
        ResultOfUgcCreateContent {
            success,
            ret: native_return,
            data_
        }
    }
}

    fn native_dataarray_add_int(&self, array_data_: shared::MemoryBufferId,
value_: i32) -> ResultOfDataarrayAddInt {
    unsafe {
        let mut array_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(array_data_) as *mut c_void;
let mut value_ = value_;
        let success = sdk::natives::dataarray_add_int(
            array_data_,
value_,
        );
        let array_data_ = 0;
        
        ResultOfDataarrayAddInt {
            success,
            ret: (),
            array_data_
        }
    }
}

    fn native_datafile_create(&self, p0_: i32) -> ResultOfDatafileCreate {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::datafile_create(
            p0_,
        );
        
        
        ResultOfDatafileCreate {
            success,
            ret: (),
            
        }
    }
}

    fn native_dataarray_get_string(&self, array_data_: shared::MemoryBufferId,
array_index_: i32) -> ResultOfDataarrayGetString {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut array_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(array_data_) as *mut c_void;
let mut array_index_ = array_index_;
        let success = sdk::natives::dataarray_get_string(
            native_return.pin_mut(),
array_data_,
array_index_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
let array_data_ = 0;
        
        ResultOfDataarrayGetString {
            success,
            ret: native_return,
            array_data_
        }
    }
}

    fn native_datafile_get_file_dict_for_additional_data_file(&self, p0_: i32) -> ResultOfDatafileGetFileDictForAdditionalDataFile {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::datafile_get_file_dict_for_additional_data_file(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfDatafileGetFileDictForAdditionalDataFile {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datadict_set_int(&self, object_data_: shared::MemoryBufferId,
key_: Option<String>,
value_: i32) -> ResultOfDatadictSetInt {
    unsafe {
        let mut object_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(object_data_) as *mut c_void;
let mut key_ = sdk_helpers::create_c_string_ptr(key_);
let mut value_ = value_;
        let success = sdk::natives::datadict_set_int(
            object_data_,
key_.as_ref().unwrap(),
value_,
        );
        let object_data_ = 0;
        
        ResultOfDatadictSetInt {
            success,
            ret: (),
            object_data_
        }
    }
}

    fn native_dataarray_add_bool(&self, array_data_: shared::MemoryBufferId,
value_: bool) -> ResultOfDataarrayAddBool {
    unsafe {
        let mut array_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(array_data_) as *mut c_void;
let mut value_ = value_;
        let success = sdk::natives::dataarray_add_bool(
            array_data_,
value_,
        );
        let array_data_ = 0;
        
        ResultOfDataarrayAddBool {
            success,
            ret: (),
            array_data_
        }
    }
}

    fn native_datafile_has_valid_file_data(&self, request_id_: i32) -> ResultOfDatafileHasValidFileData {
    unsafe {
        let mut native_return = Default::default();
let mut request_id_ = request_id_;
        let success = sdk::natives::datafile_has_valid_file_data(
            &mut native_return,
request_id_,
        );
        let native_return = native_return;
        
        ResultOfDatafileHasValidFileData {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_datafile_is_valid_request_id(&self, index_: i32) -> ResultOfDatafileIsValidRequestId {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
        let success = sdk::natives::datafile_is_valid_request_id(
            &mut native_return,
index_,
        );
        let native_return = native_return;
        
        ResultOfDatafileIsValidRequestId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_decor_remove(&self, entity_: u32,
property_name_: Option<String>) -> ResultOfDecorRemove {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut property_name_ = sdk_helpers::create_c_string_ptr(property_name_);
        let success = sdk::natives::decor_remove(
            &mut native_return,
entity_,
property_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfDecorRemove {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_decor_exist_on(&self, entity_: u32,
property_name_: Option<String>) -> ResultOfDecorExistOn {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut property_name_ = sdk_helpers::create_c_string_ptr(property_name_);
        let success = sdk::natives::decor_exist_on(
            &mut native_return,
entity_,
property_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfDecorExistOn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_decor_set_int(&self, entity_: u32,
property_name_: Option<String>,
value_: i32) -> ResultOfDecorSetInt {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut property_name_ = sdk_helpers::create_c_string_ptr(property_name_);
let mut value_ = value_;
        let success = sdk::natives::decor_set_int(
            &mut native_return,
entity_,
property_name_.as_ref().unwrap(),
value_,
        );
        let native_return = native_return;
        
        ResultOfDecorSetInt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_decor_set_float(&self, entity_: u32,
property_name_: Option<String>,
value_: f32) -> ResultOfDecorSetFloat {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut property_name_ = sdk_helpers::create_c_string_ptr(property_name_);
let mut value_ = value_;
        let success = sdk::natives::decor_set_float(
            &mut native_return,
entity_,
property_name_.as_ref().unwrap(),
value_,
        );
        let native_return = native_return;
        
        ResultOfDecorSetFloat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_decor_is_registered_as_type(&self, property_name_: Option<String>,
type_: i32) -> ResultOfDecorIsRegisteredAsType {
    unsafe {
        let mut native_return = Default::default();
let mut property_name_ = sdk_helpers::create_c_string_ptr(property_name_);
let mut type_ = type_;
        let success = sdk::natives::decor_is_registered_as_type(
            &mut native_return,
property_name_.as_ref().unwrap(),
type_,
        );
        let native_return = native_return;
        
        ResultOfDecorIsRegisteredAsType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_decor_get_float(&self, entity_: u32,
property_name_: Option<String>) -> ResultOfDecorGetFloat {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut property_name_ = sdk_helpers::create_c_string_ptr(property_name_);
        let success = sdk::natives::decor_get_float(
            &mut native_return,
entity_,
property_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfDecorGetFloat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_decor_set_bool(&self, entity_: u32,
property_name_: Option<String>,
value_: bool) -> ResultOfDecorSetBool {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut property_name_ = sdk_helpers::create_c_string_ptr(property_name_);
let mut value_ = value_;
        let success = sdk::natives::decor_set_bool(
            &mut native_return,
entity_,
property_name_.as_ref().unwrap(),
value_,
        );
        let native_return = native_return;
        
        ResultOfDecorSetBool {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_decor_set_time(&self, entity_: u32,
property_name_: Option<String>,
timestamp_: i32) -> ResultOfDecorSetTime {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut property_name_ = sdk_helpers::create_c_string_ptr(property_name_);
let mut timestamp_ = timestamp_;
        let success = sdk::natives::decor_set_time(
            &mut native_return,
entity_,
property_name_.as_ref().unwrap(),
timestamp_,
        );
        let native_return = native_return;
        
        ResultOfDecorSetTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_decor_register(&self, property_name_: Option<String>,
type_: i32) -> ResultOfDecorRegister {
    unsafe {
        let mut property_name_ = sdk_helpers::create_c_string_ptr(property_name_);
let mut type_ = type_;
        let success = sdk::natives::decor_register(
            property_name_.as_ref().unwrap(),
type_,
        );
        
        
        ResultOfDecorRegister {
            success,
            ret: (),
            
        }
    }
}

    fn native_decor_get_int(&self, entity_: u32,
property_name_: Option<String>) -> ResultOfDecorGetInt {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut property_name_ = sdk_helpers::create_c_string_ptr(property_name_);
        let success = sdk::natives::decor_get_int(
            &mut native_return,
entity_,
property_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfDecorGetInt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_decor_register_lock(&self, ) -> ResultOfDecorRegisterLock {
    unsafe {
        
        let success = sdk::natives::decor_register_lock(
            
        );
        
        
        ResultOfDecorRegisterLock {
            success,
            ret: (),
            
        }
    }
}

    fn native_decor_get_bool(&self, entity_: u32,
property_name_: Option<String>) -> ResultOfDecorGetBool {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut property_name_ = sdk_helpers::create_c_string_ptr(property_name_);
        let success = sdk::natives::decor_get_bool(
            &mut native_return,
entity_,
property_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfDecorGetBool {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_on_enter_mp(&self, ) -> ResultOfOnEnterMp {
    unsafe {
        
        let success = sdk::natives::on_enter_mp(
            
        );
        
        
        ResultOfOnEnterMp {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_loading_screen_active(&self, ) -> ResultOfGetIsLoadingScreenActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_loading_screen_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetIsLoadingScreenActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_are_any_ccs_pending(&self, ) -> ResultOfAreAnyCcsPending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::are_any_ccs_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfAreAnyCcsPending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_cloud_requests_finished(&self, p0_: bool,
unused_: i32) -> ResultOfHasCloudRequestsFinished {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut unused_ = unused_;
        let success = sdk::natives::has_cloud_requests_finished(
            &mut native_return,
&mut p0_,
unused_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOfHasCloudRequestsFinished {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_is_dlc_present(&self, dlc_hash_: u32) -> ResultOfIsDlcPresent {
    unsafe {
        let mut native_return = Default::default();
let mut dlc_hash_ = dlc_hash_;
        let success = sdk::natives::is_dlc_present(
            &mut native_return,
dlc_hash_,
        );
        let native_return = native_return;
        
        ResultOfIsDlcPresent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ever_had_bad_pack_order(&self, ) -> ResultOfGetEverHadBadPackOrder {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_ever_had_bad_pack_order(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetEverHadBadPackOrder {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_extracontent_cloud_result(&self, ) -> ResultOfGetExtracontentCloudResult {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_extracontent_cloud_result(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetExtracontentCloudResult {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_dlc_check_compat_pack_configuration(&self, ) -> ResultOfDlcCheckCompatPackConfiguration {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::dlc_check_compat_pack_configuration(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfDlcCheckCompatPackConfiguration {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_initial_loading_screen_active(&self, ) -> ResultOfGetIsInitialLoadingScreenActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_initial_loading_screen_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetIsInitialLoadingScreenActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_on_enter_sp(&self, ) -> ResultOfOnEnterSp {
    unsafe {
        
        let success = sdk::natives::on_enter_sp(
            
        );
        
        
        ResultOfOnEnterSp {
            success,
            ret: (),
            
        }
    }
}

    fn native_dlc_check_cloud_data_correct(&self, ) -> ResultOfDlcCheckCloudDataCorrect {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::dlc_check_cloud_data_correct(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfDlcCheckCloudDataCorrect {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_entity_clear_los_to_entity_in_front(&self, entity1_: u32,
entity2_: u32) -> ResultOfHasEntityClearLosToEntityInFront {
    unsafe {
        let mut native_return = Default::default();
let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
        let success = sdk::natives::has_entity_clear_los_to_entity_in_front(
            &mut native_return,
entity1_,
entity2_,
        );
        let native_return = native_return;
        
        ResultOfHasEntityClearLosToEntityInFront {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_model_swap(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
original_model_: u32,
new_model_: u32,
p6_: bool) -> ResultOfRemoveModelSwap {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut original_model_ = original_model_;
let mut new_model_ = new_model_;
let mut p6_ = p6_;
        let success = sdk::natives::remove_model_swap(
            x_,
y_,
z_,
radius_,
original_model_,
new_model_,
p6_,
        );
        
        
        ResultOfRemoveModelSwap {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_index_from_entity_index(&self, entity_: u32) -> ResultOfGetPedIndexFromEntityIndex {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_ped_index_from_entity_index(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetPedIndexFromEntityIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_entity_have_drawable(&self, entity_: u32) -> ResultOfDoesEntityHaveDrawable {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::does_entity_have_drawable(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfDoesEntityHaveDrawable {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_coords(&self, entity_: u32,
x_pos_: f32,
y_pos_: f32,
z_pos_: f32,
x_axis_: bool,
y_axis_: bool,
z_axis_: bool,
clear_area_: bool) -> ResultOfSetEntityCoords {
    unsafe {
        let mut entity_ = entity_;
let mut x_pos_ = x_pos_;
let mut y_pos_ = y_pos_;
let mut z_pos_ = z_pos_;
let mut x_axis_ = x_axis_;
let mut y_axis_ = y_axis_;
let mut z_axis_ = z_axis_;
let mut clear_area_ = clear_area_;
        let success = sdk::natives::set_entity_coords(
            entity_,
x_pos_,
y_pos_,
z_pos_,
x_axis_,
y_axis_,
z_axis_,
clear_area_,
        );
        
        
        ResultOfSetEntityCoords {
            success,
            ret: (),
            
        }
    }
}

    fn native_find_anim_event_phase(&self, anim_dictionary_: Option<String>,
anim_name_: Option<String>,
p2_: Option<String>,
p3_: shared::MemoryBufferId,
p4_: shared::MemoryBufferId) -> ResultOfFindAnimEventPhase {
    unsafe {
        let mut native_return = Default::default();
let mut anim_dictionary_ = sdk_helpers::create_c_string_ptr(anim_dictionary_);
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut p3_ = self.memory_buffers.borrow_mut().get_mut_ptr(p3_) as *mut c_void;
let mut p4_ = self.memory_buffers.borrow_mut().get_mut_ptr(p4_) as *mut c_void;
        let success = sdk::natives::find_anim_event_phase(
            &mut native_return,
p3_,
p4_,
anim_dictionary_.as_ref().unwrap(),
anim_name_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p3_ = 0;
let p4_ = 0;
        
        ResultOfFindAnimEventPhase {
            success,
            ret: native_return,
            p3_,
p4_
        }
    }
}

    fn native_set_entity_records_collisions(&self, entity_: u32,
toggle_: bool) -> ResultOfSetEntityRecordsCollisions {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_records_collisions(
            entity_,
toggle_,
        );
        
        
        ResultOfSetEntityRecordsCollisions {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_forward_vector(&self, entity_: u32) -> ResultOfGetEntityForwardVector {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_forward_vector(
            native_return.pin_mut(),
entity_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetEntityForwardVector {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_a_mission_entity(&self, entity_: u32) -> ResultOfIsEntityAmissionEntity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_a_mission_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityAmissionEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_load_collision_flag(&self, entity_: u32,
toggle_: bool,
p2_: i32) -> ResultOfSetEntityLoadCollisionFlag {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
        let success = sdk::natives::set_entity_load_collision_flag(
            entity_,
toggle_,
p2_,
        );
        
        
        ResultOfSetEntityLoadCollisionFlag {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_max_speed(&self, entity_: u32,
speed_: f32) -> ResultOfSetEntityMaxSpeed {
    unsafe {
        let mut entity_ = entity_;
let mut speed_ = speed_;
        let success = sdk::natives::set_entity_max_speed(
            entity_,
speed_,
        );
        
        
        ResultOfSetEntityMaxSpeed {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_entity_touching_model(&self, entity_: u32,
model_hash_: u32) -> ResultOfIsEntityTouchingModel {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut model_hash_ = model_hash_;
        let success = sdk::natives::is_entity_touching_model(
            &mut native_return,
entity_,
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityTouchingModel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_synchronized_map_entity_anim(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: i32,
z2_: f32) -> ResultOfStopSynchronizedMapEntityAnim {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::stop_synchronized_map_entity_anim(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOfStopSynchronizedMapEntityAnim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_static(&self, entity_: u32) -> ResultOfIsEntityStatic {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_static(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityStatic {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_forced_object(&self, x_: f32,
y_: f32,
z_: f32,
p3_: i32,
model_hash_: u32,
p5_: bool) -> ResultOfCreateForcedObject {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut model_hash_ = model_hash_;
let mut p5_ = p5_;
        let success = sdk::natives::create_forced_object(
            x_,
y_,
z_,
p3_,
model_hash_,
p5_,
        );
        
        
        ResultOfCreateForcedObject {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_max_health(&self, entity_: u32) -> ResultOfGetEntityMaxHealth {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_max_health(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityMaxHealth {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_max_health(&self, entity_: u32,
value_: i32) -> ResultOfSetEntityMaxHealth {
    unsafe {
        let mut entity_ = entity_;
let mut value_ = value_;
        let success = sdk::natives::set_entity_max_health(
            entity_,
value_,
        );
        
        
        ResultOfSetEntityMaxHealth {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_dynamic(&self, entity_: u32,
toggle_: bool) -> ResultOfSetEntityDynamic {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_dynamic(
            entity_,
toggle_,
        );
        
        
        ResultOfSetEntityDynamic {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_can_be_damaged(&self, entity_: u32,
toggle_: bool) -> ResultOfSetEntityCanBeDamaged {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_can_be_damaged(
            entity_,
toggle_,
        );
        
        
        ResultOfSetEntityCanBeDamaged {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_entity_touching_entity(&self, entity_: u32,
target_entity_: u32) -> ResultOfIsEntityTouchingEntity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut target_entity_ = target_entity_;
        let success = sdk::natives::is_entity_touching_entity(
            &mut native_return,
entity_,
target_entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityTouchingEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_offset_from_entity_in_world_coords(&self, entity_: u32,
offset_x_: f32,
offset_y_: f32,
offset_z_: f32) -> ResultOfGetOffsetFromEntityInWorldCoords {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
let mut offset_x_ = offset_x_;
let mut offset_y_ = offset_y_;
let mut offset_z_ = offset_z_;
        let success = sdk::natives::get_offset_from_entity_in_world_coords(
            native_return.pin_mut(),
entity_,
offset_x_,
offset_y_,
offset_z_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetOffsetFromEntityInWorldCoords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_apply_force_to_entity_center_of_mass(&self, entity_: u32,
force_type_: i32,
x_: f32,
y_: f32,
z_: f32,
p5_: bool,
is_direction_rel_: bool,
is_force_rel_: bool,
p8_: bool) -> ResultOfApplyForceToEntityCenterOfMass {
    unsafe {
        let mut entity_ = entity_;
let mut force_type_ = force_type_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p5_ = p5_;
let mut is_direction_rel_ = is_direction_rel_;
let mut is_force_rel_ = is_force_rel_;
let mut p8_ = p8_;
        let success = sdk::natives::apply_force_to_entity_center_of_mass(
            entity_,
force_type_,
x_,
y_,
z_,
p5_,
is_direction_rel_,
is_force_rel_,
p8_,
        );
        
        
        ResultOfApplyForceToEntityCenterOfMass {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_use_max_distance_for_water_reflection(&self, entity_: u32,
p1_: bool) -> ResultOfSetEntityUseMaxDistanceForWaterReflection {
    unsafe {
        let mut entity_ = entity_;
let mut p1_ = p1_;
        let success = sdk::natives::set_entity_use_max_distance_for_water_reflection(
            entity_,
p1_,
        );
        
        
        ResultOfSetEntityUseMaxDistanceForWaterReflection {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_collision(&self, entity_: u32,
toggle_: bool,
keep_physics_: bool) -> ResultOfSetEntityCollision {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
let mut keep_physics_ = keep_physics_;
        let success = sdk::natives::set_entity_collision(
            entity_,
toggle_,
keep_physics_,
        );
        
        
        ResultOfSetEntityCollision {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_velocity(&self, entity_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfSetEntityVelocity {
    unsafe {
        let mut entity_ = entity_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_entity_velocity(
            entity_,
x_,
y_,
z_,
        );
        
        
        ResultOfSetEntityVelocity {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_entity_upsidedown(&self, entity_: u32) -> ResultOfIsEntityUpsidedown {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_upsidedown(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityUpsidedown {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_height_above_ground(&self, entity_: u32) -> ResultOfGetEntityHeightAboveGround {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_height_above_ground(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityHeightAboveGround {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_playing_anim(&self, entity_: u32,
anim_dict_: Option<String>,
anim_name_: Option<String>,
task_flag_: i32) -> ResultOfIsEntityPlayingAnim {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
let mut task_flag_ = task_flag_;
        let success = sdk::natives::is_entity_playing_anim(
            &mut native_return,
entity_,
anim_dict_.as_ref().unwrap(),
anim_name_.as_ref().unwrap(),
task_flag_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityPlayingAnim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_of_type_attached_to_entity(&self, entity_: u32,
model_hash_: u32) -> ResultOfGetEntityOfTypeAttachedToEntity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut model_hash_ = model_hash_;
        let success = sdk::natives::get_entity_of_type_attached_to_entity(
            &mut native_return,
entity_,
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityOfTypeAttachedToEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_at_coord(&self, entity_: u32,
x_pos_: f32,
y_pos_: f32,
z_pos_: f32,
x_size_: f32,
y_size_: f32,
z_size_: f32,
p7_: bool,
p8_: bool,
p9_: i32) -> ResultOfIsEntityAtCoord {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut x_pos_ = x_pos_;
let mut y_pos_ = y_pos_;
let mut z_pos_ = z_pos_;
let mut x_size_ = x_size_;
let mut y_size_ = y_size_;
let mut z_size_ = z_size_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::is_entity_at_coord(
            &mut native_return,
entity_,
x_pos_,
y_pos_,
z_pos_,
x_size_,
y_size_,
z_size_,
p7_,
p8_,
p9_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityAtCoord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_entity_anim_finished(&self, entity_: u32,
anim_dict_: Option<String>,
anim_name_: Option<String>,
p3_: i32) -> ResultOfHasEntityAnimFinished {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
let mut p3_ = p3_;
        let success = sdk::natives::has_entity_anim_finished(
            &mut native_return,
entity_,
anim_dict_.as_ref().unwrap(),
anim_name_.as_ref().unwrap(),
p3_,
        );
        let native_return = native_return;
        
        ResultOfHasEntityAnimFinished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_rotation_velocity(&self, entity_: u32) -> ResultOfGetEntityRotationVelocity {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_rotation_velocity(
            native_return.pin_mut(),
entity_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetEntityRotationVelocity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_entity_have_anim_director(&self, entity_: u32) -> ResultOfDoesEntityHaveAnimDirector {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::does_entity_have_anim_director(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfDoesEntityHaveAnimDirector {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_offset_from_entity_given_world_coords(&self, entity_: u32,
pos_x_: f32,
pos_y_: f32,
pos_z_: f32) -> ResultOfGetOffsetFromEntityGivenWorldCoords {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
        let success = sdk::natives::get_offset_from_entity_given_world_coords(
            native_return.pin_mut(),
entity_,
pos_x_,
pos_y_,
pos_z_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetOffsetFromEntityGivenWorldCoords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_coords_no_offset(&self, entity_: u32,
x_pos_: f32,
y_pos_: f32,
z_pos_: f32,
x_axis_: bool,
y_axis_: bool,
z_axis_: bool) -> ResultOfSetEntityCoordsNoOffset {
    unsafe {
        let mut entity_ = entity_;
let mut x_pos_ = x_pos_;
let mut y_pos_ = y_pos_;
let mut z_pos_ = z_pos_;
let mut x_axis_ = x_axis_;
let mut y_axis_ = y_axis_;
let mut z_axis_ = z_axis_;
        let success = sdk::natives::set_entity_coords_no_offset(
            entity_,
x_pos_,
y_pos_,
z_pos_,
x_axis_,
y_axis_,
z_axis_,
        );
        
        
        ResultOfSetEntityCoordsNoOffset {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_as_no_longer_needed(&self, ped_: u32) -> ResultOfSetPedAsNoLongerNeeded {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_as_no_longer_needed(
            &mut ped_,
        );
        let ped_ = ped_;
        
        ResultOfSetPedAsNoLongerNeeded {
            success,
            ret: (),
            ped_
        }
    }
}

    fn native_is_entity_attached_to_any_vehicle(&self, entity_: u32) -> ResultOfIsEntityAttachedToAnyVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_attached_to_any_vehicle(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityAttachedToAnyVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_entity_anim(&self, entity_: u32,
animation_: Option<String>,
anim_group_: Option<String>,
p3_: f32) -> ResultOfStopEntityAnim {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut animation_ = sdk_helpers::create_c_string_ptr(animation_);
let mut anim_group_ = sdk_helpers::create_c_string_ptr(anim_group_);
let mut p3_ = p3_;
        let success = sdk::natives::stop_entity_anim(
            &mut native_return,
entity_,
animation_.as_ref().unwrap(),
anim_group_.as_ref().unwrap(),
p3_,
        );
        let native_return = native_return;
        
        ResultOfStopEntityAnim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_anim_speed(&self, entity_: u32,
anim_dictionary_: Option<String>,
anim_name_: Option<String>,
speed_multiplier_: f32) -> ResultOfSetEntityAnimSpeed {
    unsafe {
        let mut entity_ = entity_;
let mut anim_dictionary_ = sdk_helpers::create_c_string_ptr(anim_dictionary_);
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
let mut speed_multiplier_ = speed_multiplier_;
        let success = sdk::natives::set_entity_anim_speed(
            entity_,
anim_dictionary_.as_ref().unwrap(),
anim_name_.as_ref().unwrap(),
speed_multiplier_,
        );
        
        
        ResultOfSetEntityAnimSpeed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_motion_blur(&self, entity_: u32,
toggle_: bool) -> ResultOfSetEntityMotionBlur {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_motion_blur(
            entity_,
toggle_,
        );
        
        
        ResultOfSetEntityMotionBlur {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_noweapondecals(&self, entity_: u32,
p1_: bool) -> ResultOfSetEntityNoweapondecals {
    unsafe {
        let mut entity_ = entity_;
let mut p1_ = p1_;
        let success = sdk::natives::set_entity_noweapondecals(
            entity_,
p1_,
        );
        
        
        ResultOfSetEntityNoweapondecals {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_anim_current_time(&self, entity_: u32,
anim_dict_: Option<String>,
anim_name_: Option<String>) -> ResultOfGetEntityAnimCurrentTime {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
        let success = sdk::natives::get_entity_anim_current_time(
            &mut native_return,
entity_,
anim_dict_.as_ref().unwrap(),
anim_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfGetEntityAnimCurrentTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_can_only_be_damaged_by_script_participants(&self, entity_: u32,
toggle_: bool) -> ResultOfSetEntityCanOnlyBeDamagedByScriptParticipants {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_can_only_be_damaged_by_script_participants(
            entity_,
toggle_,
        );
        
        
        ResultOfSetEntityCanOnlyBeDamagedByScriptParticipants {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_allow_migrate_to_spectator(&self, entity_: u32,
p1_: i32) -> ResultOfSetAllowMigrateToSpectator {
    unsafe {
        let mut entity_ = entity_;
let mut p1_ = p1_;
        let success = sdk::natives::set_allow_migrate_to_spectator(
            entity_,
p1_,
        );
        
        
        ResultOfSetAllowMigrateToSpectator {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_invincible(&self, entity_: u32,
toggle_: bool) -> ResultOfSetEntityInvincible {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_invincible(
            entity_,
toggle_,
        );
        
        
        ResultOfSetEntityInvincible {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_should_freeze_waiting_on_collision(&self, entity_: u32,
toggle_: bool) -> ResultOfSetEntityShouldFreezeWaitingOnCollision {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_should_freeze_waiting_on_collision(
            entity_,
toggle_,
        );
        
        
        ResultOfSetEntityShouldFreezeWaitingOnCollision {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_entity_clear_los_to_entity_adjust_for_cover(&self, entity1_: u32,
entity2_: u32,
trace_type_: i32) -> ResultOfHasEntityClearLosToEntityAdjustForCover {
    unsafe {
        let mut native_return = Default::default();
let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
let mut trace_type_ = trace_type_;
        let success = sdk::natives::has_entity_clear_los_to_entity_adjust_for_cover(
            &mut native_return,
entity1_,
entity2_,
trace_type_,
        );
        let native_return = native_return;
        
        ResultOfHasEntityClearLosToEntityAdjustForCover {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_model_hide_excluding_script_objects(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
model_hash_: u32,
p5_: bool) -> ResultOfCreateModelHideExcludingScriptObjects {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut model_hash_ = model_hash_;
let mut p5_ = p5_;
        let success = sdk::natives::create_model_hide_excluding_script_objects(
            x_,
y_,
z_,
radius_,
model_hash_,
p5_,
        );
        
        
        ResultOfCreateModelHideExcludingScriptObjects {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_object_as_no_longer_needed(&self, object_: u32) -> ResultOfSetObjectAsNoLongerNeeded {
    unsafe {
        let mut object_ = object_;
        let success = sdk::natives::set_object_as_no_longer_needed(
            &mut object_,
        );
        let object_ = object_;
        
        ResultOfSetObjectAsNoLongerNeeded {
            success,
            ret: (),
            object_
        }
    }
}

    fn native_get_entity_coords(&self, entity_: u32,
alive_: bool) -> ResultOfGetEntityCoords {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
let mut alive_ = alive_;
        let success = sdk::natives::get_entity_coords(
            native_return.pin_mut(),
entity_,
alive_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetEntityCoords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_entity_ai_and_animation_update(&self, entity_: u32) -> ResultOfForceEntityAiAndAnimationUpdate {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::force_entity_ai_and_animation_update(
            entity_,
        );
        
        
        ResultOfForceEntityAiAndAnimationUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_lod_dist(&self, entity_: u32) -> ResultOfGetEntityLodDist {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_lod_dist(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityLodDist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_freeze_entity_position(&self, entity_: u32,
toggle_: bool) -> ResultOfFreezeEntityPosition {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::freeze_entity_position(
            entity_,
toggle_,
        );
        
        
        ResultOfFreezeEntityPosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_synchronized_entity_anim(&self, entity_: u32,
p1_: f32,
p2_: bool) -> ResultOfStopSynchronizedEntityAnim {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::stop_synchronized_entity_anim(
            &mut native_return,
entity_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfStopSynchronizedEntityAnim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_anim_current_time(&self, entity_: u32,
anim_dictionary_: Option<String>,
anim_name_: Option<String>,
time_: f32) -> ResultOfSetEntityAnimCurrentTime {
    unsafe {
        let mut entity_ = entity_;
let mut anim_dictionary_ = sdk_helpers::create_c_string_ptr(anim_dictionary_);
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
let mut time_ = time_;
        let success = sdk::natives::set_entity_anim_current_time(
            entity_,
anim_dictionary_.as_ref().unwrap(),
anim_name_.as_ref().unwrap(),
time_,
        );
        
        
        ResultOfSetEntityAnimCurrentTime {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_alpha(&self, entity_: u32,
alpha_level_: i32,
skin_: bool) -> ResultOfSetEntityAlpha {
    unsafe {
        let mut entity_ = entity_;
let mut alpha_level_ = alpha_level_;
let mut skin_ = skin_;
        let success = sdk::natives::set_entity_alpha(
            entity_,
alpha_level_,
skin_,
        );
        
        
        ResultOfSetEntityAlpha {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_world_position_of_entity_bone(&self, entity_: u32,
bone_index_: i32) -> ResultOfGetWorldPositionOfEntityBone {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
let mut bone_index_ = bone_index_;
        let success = sdk::natives::get_world_position_of_entity_bone(
            native_return.pin_mut(),
entity_,
bone_index_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetWorldPositionOfEntityBone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_bone_postion(&self, entity_: u32,
bone_index_: i32) -> ResultOfGetEntityBonePostion {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
let mut bone_index_ = bone_index_;
        let success = sdk::natives::get_entity_bone_postion(
            native_return.pin_mut(),
entity_,
bone_index_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetEntityBonePostion {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_visible(&self, entity_: u32) -> ResultOfIsEntityVisible {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_visible(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityVisible {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_velocity(&self, entity_: u32) -> ResultOfGetEntityVelocity {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_velocity(
            native_return.pin_mut(),
entity_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetEntityVelocity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_attached_to(&self, entity_: u32) -> ResultOfGetEntityAttachedTo {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_attached_to(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityAttachedTo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_pickup_entity_glow(&self, entity_: u32) -> ResultOfResetPickupEntityGlow {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::reset_pickup_entity_glow(
            entity_,
        );
        
        
        ResultOfResetPickupEntityGlow {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_has_gravity(&self, entity_: u32,
toggle_: bool) -> ResultOfSetEntityHasGravity {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_has_gravity(
            entity_,
toggle_,
        );
        
        
        ResultOfSetEntityHasGravity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_index_from_entity_index(&self, entity_: u32) -> ResultOfGetVehicleIndexFromEntityIndex {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_vehicle_index_from_entity_index(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleIndexFromEntityIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_nearest_player_to_entity_on_team(&self, entity_: u32,
team_: i32) -> ResultOfGetNearestPlayerToEntityOnTeam {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut team_ = team_;
        let success = sdk::natives::get_nearest_player_to_entity_on_team(
            &mut native_return,
entity_,
team_,
        );
        let native_return = native_return;
        
        ResultOfGetNearestPlayerToEntityOnTeam {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_anim_total_time(&self, entity_: u32,
anim_dict_: Option<String>,
anim_name_: Option<String>) -> ResultOfGetEntityAnimTotalTime {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
        let success = sdk::natives::get_entity_anim_total_time(
            &mut native_return,
entity_,
anim_dict_.as_ref().unwrap(),
anim_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfGetEntityAnimTotalTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_in_angled_area(&self, entity_: u32,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32,
debug_: bool,
include_z_: bool,
p10_: i32) -> ResultOfIsEntityInAngledArea {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
let mut debug_ = debug_;
let mut include_z_ = include_z_;
let mut p10_ = p10_;
        let success = sdk::natives::is_entity_in_angled_area(
            &mut native_return,
entity_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
debug_,
include_z_,
p10_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityInAngledArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_a_ped(&self, entity_: u32) -> ResultOfIsEntityAped {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_a_ped(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityAped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_upright(&self, entity_: u32,
angle_: f32) -> ResultOfIsEntityUpright {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut angle_ = angle_;
        let success = sdk::natives::is_entity_upright(
            &mut native_return,
entity_,
angle_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityUpright {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_in_area(&self, entity_: u32,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
p7_: bool,
p8_: bool,
p9_: i32) -> ResultOfIsEntityInArea {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::is_entity_in_area(
            &mut native_return,
entity_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
p7_,
p8_,
p9_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityInArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_trafficlight_override(&self, entity_: u32,
state_: i32) -> ResultOfSetEntityTrafficlightOverride {
    unsafe {
        let mut entity_ = entity_;
let mut state_ = state_;
        let success = sdk::natives::set_entity_trafficlight_override(
            entity_,
state_,
        );
        
        
        ResultOfSetEntityTrafficlightOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_lod_dist(&self, entity_: u32,
value_: i32) -> ResultOfSetEntityLodDist {
    unsafe {
        let mut entity_ = entity_;
let mut value_ = value_;
        let success = sdk::natives::set_entity_lod_dist(
            entity_,
value_,
        );
        
        
        ResultOfSetEntityLodDist {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_alpha(&self, entity_: u32) -> ResultOfGetEntityAlpha {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_alpha(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityAlpha {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_height(&self, entity_: u32,
x_: f32,
y_: f32,
z_: f32,
at_top_: bool,
in_world_coords_: bool) -> ResultOfGetEntityHeight {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut at_top_ = at_top_;
let mut in_world_coords_ = in_world_coords_;
        let success = sdk::natives::get_entity_height(
            &mut native_return,
entity_,
x_,
y_,
z_,
at_top_,
in_world_coords_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityHeight {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_sort_bias(&self, entity_: u32,
p1_: f32) -> ResultOfSetEntitySortBias {
    unsafe {
        let mut entity_ = entity_;
let mut p1_ = p1_;
        let success = sdk::natives::set_entity_sort_bias(
            entity_,
p1_,
        );
        
        
        ResultOfSetEntitySortBias {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_last_material_hit_by_entity(&self, entity_: u32) -> ResultOfGetLastMaterialHitByEntity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_last_material_hit_by_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetLastMaterialHitByEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_attach_entity_bone_to_entity_bone(&self, entity1_: u32,
entity2_: u32,
bone_index1_: i32,
bone_index2_: i32,
p4_: bool,
p5_: bool) -> ResultOfAttachEntityBoneToEntityBone {
    unsafe {
        let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
let mut bone_index1_ = bone_index1_;
let mut bone_index2_ = bone_index2_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::attach_entity_bone_to_entity_bone(
            entity1_,
entity2_,
bone_index1_,
bone_index2_,
p4_,
p5_,
        );
        
        
        ResultOfAttachEntityBoneToEntityBone {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_entity_dead(&self, entity_: u32,
p1_: bool) -> ResultOfIsEntityDead {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut p1_ = p1_;
        let success = sdk::natives::is_entity_dead(
            &mut native_return,
entity_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityDead {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_entity_been_damaged_by_any_ped(&self, entity_: u32) -> ResultOfHasEntityBeenDamagedByAnyPed {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::has_entity_been_damaged_by_any_ped(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfHasEntityBeenDamagedByAnyPed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_forced_object(&self, x_: f32,
y_: f32,
z_: f32,
p3_: f32,
model_hash_: u32) -> ResultOfRemoveForcedObject {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut model_hash_ = model_hash_;
        let success = sdk::natives::remove_forced_object(
            x_,
y_,
z_,
p3_,
model_hash_,
        );
        
        
        ResultOfRemoveForcedObject {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_coords_without_plants_reset(&self, entity_: u32,
x_pos_: f32,
y_pos_: f32,
z_pos_: f32,
alive_: bool,
dead_flag_: bool,
ragdoll_flag_: bool,
clear_area_: bool) -> ResultOfSetEntityCoordsWithoutPlantsReset {
    unsafe {
        let mut entity_ = entity_;
let mut x_pos_ = x_pos_;
let mut y_pos_ = y_pos_;
let mut z_pos_ = z_pos_;
let mut alive_ = alive_;
let mut dead_flag_ = dead_flag_;
let mut ragdoll_flag_ = ragdoll_flag_;
let mut clear_area_ = clear_area_;
        let success = sdk::natives::set_entity_coords_without_plants_reset(
            entity_,
x_pos_,
y_pos_,
z_pos_,
alive_,
dead_flag_,
ragdoll_flag_,
clear_area_,
        );
        
        
        ResultOfSetEntityCoordsWithoutPlantsReset {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_as_no_longer_needed(&self, vehicle_: u32) -> ResultOfSetVehicleAsNoLongerNeeded {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_vehicle_as_no_longer_needed(
            &mut vehicle_,
        );
        let vehicle_ = vehicle_;
        
        ResultOfSetVehicleAsNoLongerNeeded {
            success,
            ret: (),
            vehicle_
        }
    }
}

    fn native_set_entity_cant_cause_collision_damaged_entity(&self, entity1_: u32,
entity2_: u32) -> ResultOfSetEntityCantCauseCollisionDamagedEntity {
    unsafe {
        let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
        let success = sdk::natives::set_entity_cant_cause_collision_damaged_entity(
            entity1_,
entity2_,
        );
        
        
        ResultOfSetEntityCantCauseCollisionDamagedEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_requires_more_expensive_river_check(&self, entity_: u32,
toggle_: bool) -> ResultOfSetEntityRequiresMoreExpensiveRiverCheck {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_requires_more_expensive_river_check(
            entity_,
toggle_,
        );
        
        
        ResultOfSetEntityRequiresMoreExpensiveRiverCheck {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_entity_a_vehicle(&self, entity_: u32) -> ResultOfIsEntityAvehicle {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_a_vehicle(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityAvehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_health(&self, entity_: u32,
health_: i32,
p2_: i32) -> ResultOfSetEntityHealth {
    unsafe {
        let mut entity_ = entity_;
let mut health_ = health_;
let mut p2_ = p2_;
        let success = sdk::natives::set_entity_health(
            entity_,
health_,
p2_,
        );
        
        
        ResultOfSetEntityHealth {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_entity_to_entity(&self, entity1_: u32,
entity2_: u32,
bone_index_: i32,
x_pos_: f32,
y_pos_: f32,
z_pos_: f32,
x_rot_: f32,
y_rot_: f32,
z_rot_: f32,
p9_: bool,
use_soft_pinning_: bool,
collision_: bool,
is_ped_: bool,
vertex_index_: i32,
fixed_rot_: bool,
p15_: i32) -> ResultOfAttachEntityToEntity {
    unsafe {
        let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
let mut bone_index_ = bone_index_;
let mut x_pos_ = x_pos_;
let mut y_pos_ = y_pos_;
let mut z_pos_ = z_pos_;
let mut x_rot_ = x_rot_;
let mut y_rot_ = y_rot_;
let mut z_rot_ = z_rot_;
let mut p9_ = p9_;
let mut use_soft_pinning_ = use_soft_pinning_;
let mut collision_ = collision_;
let mut is_ped_ = is_ped_;
let mut vertex_index_ = vertex_index_;
let mut fixed_rot_ = fixed_rot_;
let mut p15_ = p15_;
        let success = sdk::natives::attach_entity_to_entity(
            entity1_,
entity2_,
bone_index_,
x_pos_,
y_pos_,
z_pos_,
x_rot_,
y_rot_,
z_rot_,
p9_,
use_soft_pinning_,
collision_,
is_ped_,
vertex_index_,
fixed_rot_,
p15_,
        );
        
        
        ResultOfAttachEntityToEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_entity_bullet_collision(&self, entity_: u32) -> ResultOfEnableEntityBulletCollision {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::enable_entity_bullet_collision(
            entity_,
        );
        
        
        ResultOfEnableEntityBulletCollision {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_only_damaged_by_relationship_group(&self, entity_: u32,
p1_: bool,
p2_: i32) -> ResultOfSetEntityOnlyDamagedByRelationshipGroup {
    unsafe {
        let mut entity_ = entity_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_entity_only_damaged_by_relationship_group(
            entity_,
p1_,
p2_,
        );
        
        
        ResultOfSetEntityOnlyDamagedByRelationshipGroup {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_nearest_player_to_entity(&self, entity_: u32) -> ResultOfGetNearestPlayerToEntity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_nearest_player_to_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetNearestPlayerToEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_entity_exist(&self, entity_: u32) -> ResultOfDoesEntityExist {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::does_entity_exist(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfDoesEntityExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_render_scorched(&self, entity_: u32,
toggle_: bool) -> ResultOfSetEntityRenderScorched {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_render_scorched(
            entity_,
toggle_,
        );
        
        
        ResultOfSetEntityRenderScorched {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_an_entity(&self, handle_: u32) -> ResultOfIsAnEntity {
    unsafe {
        let mut native_return = Default::default();
let mut handle_ = handle_;
        let success = sdk::natives::is_an_entity(
            &mut native_return,
handle_,
        );
        let native_return = native_return;
        
        ResultOfIsAnEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_at_entity(&self, entity1_: u32,
entity2_: u32,
x_size_: f32,
y_size_: f32,
z_size_: f32,
p5_: bool,
p6_: bool,
p7_: i32) -> ResultOfIsEntityAtEntity {
    unsafe {
        let mut native_return = Default::default();
let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
let mut x_size_ = x_size_;
let mut y_size_ = y_size_;
let mut z_size_ = z_size_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::is_entity_at_entity(
            &mut native_return,
entity1_,
entity2_,
x_size_,
y_size_,
z_size_,
p5_,
p6_,
p7_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityAtEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_entity_have_skeleton(&self, entity_: u32) -> ResultOfDoesEntityHaveSkeleton {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::does_entity_have_skeleton(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfDoesEntityHaveSkeleton {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_quaternion(&self, entity_: u32,
x_: f32,
y_: f32,
z_: f32,
w_: f32) -> ResultOfSetEntityQuaternion {
    unsafe {
        let mut entity_ = entity_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut w_ = w_;
        let success = sdk::natives::set_entity_quaternion(
            entity_,
x_,
y_,
z_,
w_,
        );
        
        
        ResultOfSetEntityQuaternion {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_is_in_vehicle(&self, entity_: u32) -> ResultOfSetEntityIsInVehicle {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::set_entity_is_in_vehicle(
            entity_,
        );
        
        
        ResultOfSetEntityIsInVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_only_damaged_by_player(&self, entity_: u32,
toggle_: bool) -> ResultOfSetEntityOnlyDamagedByPlayer {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_only_damaged_by_player(
            entity_,
toggle_,
        );
        
        
        ResultOfSetEntityOnlyDamagedByPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_quaternion(&self, entity_: u32,
x_: f32,
y_: f32,
z_: f32,
w_: f32) -> ResultOfGetEntityQuaternion {
    unsafe {
        let mut entity_ = entity_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut w_ = w_;
        let success = sdk::natives::get_entity_quaternion(
            &mut x_,
&mut y_,
&mut z_,
&mut w_,
entity_,
        );
        let x_ = x_;
let y_ = y_;
let z_ = z_;
let w_ = w_;
        
        ResultOfGetEntityQuaternion {
            success,
            ret: (),
            x_,
y_,
z_,
w_
        }
    }
}

    fn native_set_entity_lights(&self, entity_: u32,
toggle_: bool) -> ResultOfSetEntityLights {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_lights(
            entity_,
toggle_,
        );
        
        
        ResultOfSetEntityLights {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_entity_anim(&self, entity_: u32,
anim_name_: Option<String>,
anim_dict_: Option<String>,
p3_: f32,
loop_: bool,
stay_in_anim_: bool,
p6_: bool,
delta_: f32,
bitset_: i32) -> ResultOfPlayEntityAnim {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut p3_ = p3_;
let mut loop_ = loop_;
let mut stay_in_anim_ = stay_in_anim_;
let mut p6_ = p6_;
let mut delta_ = delta_;
let mut bitset_ = bitset_;
        let success = sdk::natives::play_entity_anim(
            &mut native_return,
entity_,
anim_name_.as_ref().unwrap(),
anim_dict_.as_ref().unwrap(),
p3_,
loop_,
stay_in_anim_,
p6_,
delta_,
bitset_,
        );
        let native_return = native_return;
        
        ResultOfPlayEntityAnim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_roll(&self, entity_: u32) -> ResultOfGetEntityRoll {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_roll(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityRoll {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_angular_velocity(&self, entity_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfSetEntityAngularVelocity {
    unsafe {
        let mut entity_ = entity_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_entity_angular_velocity(
            entity_,
x_,
y_,
z_,
        );
        
        
        ResultOfSetEntityAngularVelocity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_heading_from_eulers(&self, entity_: u32) -> ResultOfGetEntityHeadingFromEulers {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_heading_from_eulers(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityHeadingFromEulers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_rotation(&self, entity_: u32,
pitch_: f32,
roll_: f32,
yaw_: f32,
rotation_order_: i32,
p5_: bool) -> ResultOfSetEntityRotation {
    unsafe {
        let mut entity_ = entity_;
let mut pitch_ = pitch_;
let mut roll_ = roll_;
let mut yaw_ = yaw_;
let mut rotation_order_ = rotation_order_;
let mut p5_ = p5_;
        let success = sdk::natives::set_entity_rotation(
            entity_,
pitch_,
roll_,
yaw_,
rotation_order_,
p5_,
        );
        
        
        ResultOfSetEntityRotation {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_forward_y(&self, entity_: u32) -> ResultOfGetEntityForwardY {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_forward_y(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityForwardY {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_in_air(&self, entity_: u32) -> ResultOfIsEntityInAir {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_in_air(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityInAir {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_model_hide(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
model_hash_: u32,
p5_: bool) -> ResultOfCreateModelHide {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut model_hash_ = model_hash_;
let mut p5_ = p5_;
        let success = sdk::natives::create_model_hide(
            x_,
y_,
z_,
radius_,
model_hash_,
p5_,
        );
        
        
        ResultOfCreateModelHide {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_type(&self, entity_: u32) -> ResultOfGetEntityType {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_type(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_entity_collided_with_anything(&self, entity_: u32) -> ResultOfHasEntityCollidedWithAnything {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::has_entity_collided_with_anything(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfHasEntityCollidedWithAnything {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_forward_x(&self, entity_: u32) -> ResultOfGetEntityForwardX {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_forward_x(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityForwardX {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_an_object(&self, entity_: u32) -> ResultOfIsEntityAnObject {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_an_object(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityAnObject {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_heading(&self, entity_: u32,
heading_: f32) -> ResultOfSetEntityHeading {
    unsafe {
        let mut entity_ = entity_;
let mut heading_ = heading_;
        let success = sdk::natives::set_entity_heading(
            entity_,
heading_,
        );
        
        
        ResultOfSetEntityHeading {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_model_swap(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
original_model_: u32,
new_model_: u32,
p6_: bool) -> ResultOfCreateModelSwap {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut original_model_ = original_model_;
let mut new_model_ = new_model_;
let mut p6_ = p6_;
        let success = sdk::natives::create_model_swap(
            x_,
y_,
z_,
radius_,
original_model_,
new_model_,
p6_,
        );
        
        
        ResultOfCreateModelSwap {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_entity_been_damaged_by_any_object(&self, entity_: u32) -> ResultOfHasEntityBeenDamagedByAnyObject {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::has_entity_been_damaged_by_any_object(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfHasEntityBeenDamagedByAnyObject {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_upright_value(&self, entity_: u32) -> ResultOfGetEntityUprightValue {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_upright_value(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityUprightValue {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_detach_entity(&self, entity_: u32,
dynamic_: bool,
collision_: bool) -> ResultOfDetachEntity {
    unsafe {
        let mut entity_ = entity_;
let mut dynamic_ = dynamic_;
let mut collision_ = collision_;
        let success = sdk::natives::detach_entity(
            entity_,
dynamic_,
collision_,
        );
        
        
        ResultOfDetachEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_speed_vector(&self, entity_: u32,
relative_: bool) -> ResultOfGetEntitySpeedVector {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
let mut relative_ = relative_;
        let success = sdk::natives::get_entity_speed_vector(
            native_return.pin_mut(),
entity_,
relative_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetEntitySpeedVector {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_entity_alpha(&self, entity_: u32) -> ResultOfResetEntityAlpha {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::reset_entity_alpha(
            entity_,
        );
        
        
        ResultOfResetEntityAlpha {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_completely_disable_collision(&self, entity_: u32,
toggle_: bool,
keep_physics_: bool) -> ResultOfSetEntityCompletelyDisableCollision {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
let mut keep_physics_ = keep_physics_;
        let success = sdk::natives::set_entity_completely_disable_collision(
            entity_,
toggle_,
keep_physics_,
        );
        
        
        ResultOfSetEntityCompletelyDisableCollision {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_model(&self, entity_: u32) -> ResultOfGetEntityModel {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_model(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityModel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_no_collision_entity(&self, entity1_: u32,
entity2_: u32,
this_frame_only_: bool) -> ResultOfSetEntityNoCollisionEntity {
    unsafe {
        let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
let mut this_frame_only_ = this_frame_only_;
        let success = sdk::natives::set_entity_no_collision_entity(
            entity1_,
entity2_,
this_frame_only_,
        );
        
        
        ResultOfSetEntityNoCollisionEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_script(&self, entity_: u32,
script_: u32) -> ResultOfGetEntityScript {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut entity_ = entity_;
let mut script_ = script_;
        let success = sdk::natives::get_entity_script(
            native_return.pin_mut(),
&mut script_,
entity_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
let script_ = script_;
        
        ResultOfGetEntityScript {
            success,
            ret: native_return,
            script_
        }
    }
}

    fn native_clear_entity_last_damage_entity(&self, entity_: u32) -> ResultOfClearEntityLastDamageEntity {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::clear_entity_last_damage_entity(
            entity_,
        );
        
        
        ResultOfClearEntityLastDamageEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_last_entity_hit_by_entity(&self, entity_: u32) -> ResultOfGetLastEntityHitByEntity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_last_entity_hit_by_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetLastEntityHitByEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_can_climb_on_entity(&self, entity_: u32,
toggle_: bool) -> ResultOfSetCanClimbOnEntity {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_can_climb_on_entity(
            entity_,
toggle_,
        );
        
        
        ResultOfSetCanClimbOnEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_always_prerender(&self, entity_: u32,
toggle_: bool) -> ResultOfSetEntityAlwaysPrerender {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_always_prerender(
            entity_,
toggle_,
        );
        
        
        ResultOfSetEntityAlwaysPrerender {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_as_mission_entity(&self, entity_: u32,
p1_: bool,
p2_: bool) -> ResultOfSetEntityAsMissionEntity {
    unsafe {
        let mut entity_ = entity_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_entity_as_mission_entity(
            entity_,
p1_,
p2_,
        );
        
        
        ResultOfSetEntityAsMissionEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_delete_entity(&self, entity_: u32) -> ResultOfDeleteEntity {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::delete_entity(
            &mut entity_,
        );
        let entity_ = entity_;
        
        ResultOfDeleteEntity {
            success,
            ret: (),
            entity_
        }
    }
}

    fn native_get_entity_rotation(&self, entity_: u32,
rotation_order_: i32) -> ResultOfGetEntityRotation {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
let mut rotation_order_ = rotation_order_;
        let success = sdk::natives::get_entity_rotation(
            native_return.pin_mut(),
entity_,
rotation_order_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetEntityRotation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_attached_to_any_ped(&self, entity_: u32) -> ResultOfIsEntityAttachedToAnyPed {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_attached_to_any_ped(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityAttachedToAnyPed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_can_only_be_damaged_by_entity(&self, entity1_: u32,
entity2_: u32) -> ResultOfSetEntityCanOnlyBeDamagedByEntity {
    unsafe {
        let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
        let success = sdk::natives::set_entity_can_only_be_damaged_by_entity(
            entity1_,
entity2_,
        );
        
        
        ResultOfSetEntityCanOnlyBeDamagedByEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_bone_count(&self, entity_: u32) -> ResultOfGetEntityBoneCount {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_bone_count(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityBoneCount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_attached(&self, entity_: u32) -> ResultOfIsEntityAttached {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_attached(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityAttached {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_in_zone(&self, entity_: u32,
zone_: Option<String>) -> ResultOfIsEntityInZone {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut zone_ = sdk_helpers::create_c_string_ptr(zone_);
        let success = sdk::natives::is_entity_in_zone(
            &mut native_return,
entity_,
zone_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfIsEntityInZone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_as_no_longer_needed(&self, entity_: u32) -> ResultOfSetEntityAsNoLongerNeeded {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::set_entity_as_no_longer_needed(
            &mut entity_,
        );
        let entity_ = entity_;
        
        ResultOfSetEntityAsNoLongerNeeded {
            success,
            ret: (),
            entity_
        }
    }
}

    fn native_play_synchronized_map_entity_anim(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: i32,
z2_: f32,
p6_: Option<String>,
p7_: Option<String>,
p8_: f32,
p9_: f32,
p10_: i32,
p11_: f32) -> ResultOfPlaySynchronizedMapEntityAnim {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut p6_ = sdk_helpers::create_c_string_ptr(p6_);
let mut p7_ = sdk_helpers::create_c_string_ptr(p7_);
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
        let success = sdk::natives::play_synchronized_map_entity_anim(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
p6_.as_ref().unwrap(),
p7_.as_ref().unwrap(),
p8_,
p9_,
p10_,
p11_,
        );
        let native_return = native_return;
        
        ResultOfPlaySynchronizedMapEntityAnim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_bone_object_rotation(&self, entity_: u32,
bone_index_: i32) -> ResultOfGetEntityBoneObjectRotation {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
let mut bone_index_ = bone_index_;
        let success = sdk::natives::get_entity_bone_object_rotation(
            native_return.pin_mut(),
entity_,
bone_index_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetEntityBoneObjectRotation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_proofs(&self, entity_: u32,
bullet_proof_: bool,
fire_proof_: bool,
explosion_proof_: bool,
collision_proof_: bool,
melee_proof_: bool,
steam_proof_: bool,
p7_: bool,
drown_proof_: bool) -> ResultOfGetEntityProofs {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut bullet_proof_ = bullet_proof_;
let mut fire_proof_ = fire_proof_;
let mut explosion_proof_ = explosion_proof_;
let mut collision_proof_ = collision_proof_;
let mut melee_proof_ = melee_proof_;
let mut steam_proof_ = steam_proof_;
let mut p7_ = p7_;
let mut drown_proof_ = drown_proof_;
        let success = sdk::natives::get_entity_proofs(
            &mut native_return,
&mut bullet_proof_,
&mut fire_proof_,
&mut explosion_proof_,
&mut collision_proof_,
&mut melee_proof_,
&mut steam_proof_,
&mut p7_,
&mut drown_proof_,
entity_,
        );
        let native_return = native_return;
let bullet_proof_ = bullet_proof_;
let fire_proof_ = fire_proof_;
let explosion_proof_ = explosion_proof_;
let collision_proof_ = collision_proof_;
let melee_proof_ = melee_proof_;
let steam_proof_ = steam_proof_;
let p7_ = p7_;
let drown_proof_ = drown_proof_;
        
        ResultOfGetEntityProofs {
            success,
            ret: native_return,
            bullet_proof_,
fire_proof_,
explosion_proof_,
collision_proof_,
melee_proof_,
steam_proof_,
p7_,
drown_proof_
        }
    }
}

    fn native_set_entity_water_reflection_flag(&self, entity_: u32,
toggle_: bool) -> ResultOfSetEntityWaterReflectionFlag {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_water_reflection_flag(
            entity_,
toggle_,
        );
        
        
        ResultOfSetEntityWaterReflectionFlag {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_entity_to_entity_physically(&self, entity1_: u32,
entity2_: u32,
bone_index1_: i32,
bone_index2_: i32,
x_pos1_: f32,
y_pos1_: f32,
z_pos1_: f32,
x_pos2_: f32,
y_pos2_: f32,
z_pos2_: f32,
x_rot_: f32,
y_rot_: f32,
z_rot_: f32,
break_force_: f32,
fixed_rot_: bool,
p15_: bool,
collision_: bool,
p17_: bool,
p18_: i32) -> ResultOfAttachEntityToEntityPhysically {
    unsafe {
        let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
let mut bone_index1_ = bone_index1_;
let mut bone_index2_ = bone_index2_;
let mut x_pos1_ = x_pos1_;
let mut y_pos1_ = y_pos1_;
let mut z_pos1_ = z_pos1_;
let mut x_pos2_ = x_pos2_;
let mut y_pos2_ = y_pos2_;
let mut z_pos2_ = z_pos2_;
let mut x_rot_ = x_rot_;
let mut y_rot_ = y_rot_;
let mut z_rot_ = z_rot_;
let mut break_force_ = break_force_;
let mut fixed_rot_ = fixed_rot_;
let mut p15_ = p15_;
let mut collision_ = collision_;
let mut p17_ = p17_;
let mut p18_ = p18_;
        let success = sdk::natives::attach_entity_to_entity_physically(
            entity1_,
entity2_,
bone_index1_,
bone_index2_,
x_pos1_,
y_pos1_,
z_pos1_,
x_pos2_,
y_pos2_,
z_pos2_,
x_rot_,
y_rot_,
z_rot_,
break_force_,
fixed_rot_,
p15_,
collision_,
p17_,
p18_,
        );
        
        
        ResultOfAttachEntityToEntityPhysically {
            success,
            ret: (),
            
        }
    }
}

    fn native_apply_force_to_entity(&self, entity_: u32,
force_flags_: i32,
x_: f32,
y_: f32,
z_: f32,
off_x_: f32,
off_y_: f32,
off_z_: f32,
bone_index_: i32,
is_direction_rel_: bool,
ignore_up_vec_: bool,
is_force_rel_: bool,
p12_: bool,
p13_: bool) -> ResultOfApplyForceToEntity {
    unsafe {
        let mut entity_ = entity_;
let mut force_flags_ = force_flags_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut off_x_ = off_x_;
let mut off_y_ = off_y_;
let mut off_z_ = off_z_;
let mut bone_index_ = bone_index_;
let mut is_direction_rel_ = is_direction_rel_;
let mut ignore_up_vec_ = ignore_up_vec_;
let mut is_force_rel_ = is_force_rel_;
let mut p12_ = p12_;
let mut p13_ = p13_;
        let success = sdk::natives::apply_force_to_entity(
            entity_,
force_flags_,
x_,
y_,
z_,
off_x_,
off_y_,
off_z_,
bone_index_,
is_direction_rel_,
ignore_up_vec_,
is_force_rel_,
p12_,
p13_,
        );
        
        
        ResultOfApplyForceToEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_synchronized_entity_anim(&self, entity_: u32,
synced_scene_: i32,
animation_: Option<String>,
prop_name_: Option<String>,
p4_: f32,
p5_: f32,
p6_: i32,
p7_: f32) -> ResultOfPlaySynchronizedEntityAnim {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut synced_scene_ = synced_scene_;
let mut animation_ = sdk_helpers::create_c_string_ptr(animation_);
let mut prop_name_ = sdk_helpers::create_c_string_ptr(prop_name_);
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::play_synchronized_entity_anim(
            &mut native_return,
entity_,
synced_scene_,
animation_.as_ref().unwrap(),
prop_name_.as_ref().unwrap(),
p4_,
p5_,
p6_,
p7_,
        );
        let native_return = native_return;
        
        ResultOfPlaySynchronizedEntityAnim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_entity_been_damaged_by_entity(&self, entity1_: u32,
entity2_: u32,
p2_: bool) -> ResultOfHasEntityBeenDamagedByEntity {
    unsafe {
        let mut native_return = Default::default();
let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
let mut p2_ = p2_;
        let success = sdk::natives::has_entity_been_damaged_by_entity(
            &mut native_return,
entity1_,
entity2_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfHasEntityBeenDamagedByEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_collision_disabled(&self, entity_: u32) -> ResultOfGetEntityCollisionDisabled {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_collision_disabled(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityCollisionDisabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_bone_rotation(&self, entity_: u32,
bone_index_: i32) -> ResultOfGetEntityBoneRotation {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
let mut bone_index_ = bone_index_;
        let success = sdk::natives::get_entity_bone_rotation(
            native_return.pin_mut(),
entity_,
bone_index_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetEntityBoneRotation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_pickup_collides_with_projectiles(&self, p0_: i32,
p1_: i32) -> ResultOfSetPickupCollidesWithProjectiles {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_pickup_collides_with_projectiles(
            p0_,
p1_,
        );
        
        
        ResultOfSetPickupCollidesWithProjectiles {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_bone_object_postion(&self, entity_: u32,
bone_index_: i32) -> ResultOfGetEntityBoneObjectPostion {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
let mut bone_index_ = bone_index_;
        let success = sdk::natives::get_entity_bone_object_postion(
            native_return.pin_mut(),
entity_,
bone_index_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetEntityBoneObjectPostion {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_attached_to_any_object(&self, entity_: u32) -> ResultOfIsEntityAttachedToAnyObject {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_attached_to_any_object(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityAttachedToAnyObject {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_in_water(&self, entity_: u32) -> ResultOfIsEntityInWater {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_in_water(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityInWater {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_waiting_for_world_collision(&self, entity_: u32) -> ResultOfIsEntityWaitingForWorldCollision {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_waiting_for_world_collision(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityWaitingForWorldCollision {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_can_be_targeted_without_los(&self, entity_: u32,
toggle_: bool) -> ResultOfSetEntityCanBeTargetedWithoutLos {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_can_be_targeted_without_los(
            entity_,
toggle_,
        );
        
        
        ResultOfSetEntityCanBeTargetedWithoutLos {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_pitch(&self, entity_: u32) -> ResultOfGetEntityPitch {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_pitch(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityPitch {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_speed(&self, entity_: u32) -> ResultOfGetEntitySpeed {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_speed(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetEntitySpeed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_visible_to_script(&self, entity_: u32) -> ResultOfIsEntityVisibleToScript {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_visible_to_script(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityVisibleToScript {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_pick_up_by_cargobob_disabled(&self, entity_: u32,
toggle_: bool) -> ResultOfSetPickUpByCargobobDisabled {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_pick_up_by_cargobob_disabled(
            entity_,
toggle_,
        );
        
        
        ResultOfSetPickUpByCargobobDisabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_object_index_from_entity_index(&self, entity_: u32) -> ResultOfGetObjectIndexFromEntityIndex {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_object_index_from_entity_index(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetObjectIndexFromEntityIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_can_be_damaged(&self, entity_: u32) -> ResultOfGetEntityCanBeDamaged {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_can_be_damaged(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityCanBeDamaged {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_model_hide(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
model_hash_: u32,
p5_: bool) -> ResultOfRemoveModelHide {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut model_hash_ = model_hash_;
let mut p5_ = p5_;
        let success = sdk::natives::remove_model_hide(
            x_,
y_,
z_,
radius_,
model_hash_,
p5_,
        );
        
        
        ResultOfRemoveModelHide {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_entity_have_physics(&self, entity_: u32) -> ResultOfDoesEntityHavePhysics {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::does_entity_have_physics(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfDoesEntityHavePhysics {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_wait_for_collisions_before_probe(&self, entity_: u32,
toggle_: bool) -> ResultOfSetWaitForCollisionsBeforeProbe {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_wait_for_collisions_before_probe(
            entity_,
toggle_,
        );
        
        
        ResultOfSetWaitForCollisionsBeforeProbe {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_entity_belong_to_this_script(&self, entity_: u32,
p1_: bool) -> ResultOfDoesEntityBelongToThisScript {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut p1_ = p1_;
        let success = sdk::natives::does_entity_belong_to_this_script(
            &mut native_return,
entity_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfDoesEntityBelongToThisScript {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_entity_been_damaged_by_any_vehicle(&self, entity_: u32) -> ResultOfHasEntityBeenDamagedByAnyVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::has_entity_been_damaged_by_any_vehicle(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfHasEntityBeenDamagedByAnyVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_can_auto_vault_on_entity(&self, entity_: u32,
toggle_: bool) -> ResultOfSetCanAutoVaultOnEntity {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_can_auto_vault_on_entity(
            entity_,
toggle_,
        );
        
        
        ResultOfSetCanAutoVaultOnEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_can_be_damaged_by_relationship_group(&self, entity_: u32,
b_can_be_damaged_: bool,
rel_group_: i32) -> ResultOfSetEntityCanBeDamagedByRelationshipGroup {
    unsafe {
        let mut entity_ = entity_;
let mut b_can_be_damaged_ = b_can_be_damaged_;
let mut rel_group_ = rel_group_;
        let success = sdk::natives::set_entity_can_be_damaged_by_relationship_group(
            entity_,
b_can_be_damaged_,
rel_group_,
        );
        
        
        ResultOfSetEntityCanBeDamagedByRelationshipGroup {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_entity_occluded(&self, entity_: u32) -> ResultOfIsEntityOccluded {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_occluded(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityOccluded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_collision_normal_of_last_hit_for_entity(&self, entity_: u32) -> ResultOfGetCollisionNormalOfLastHitForEntity {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
        let success = sdk::natives::get_collision_normal_of_last_hit_for_entity(
            native_return.pin_mut(),
entity_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetCollisionNormalOfLastHitForEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_on_screen(&self, entity_: u32) -> ResultOfIsEntityOnScreen {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_on_screen(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityOnScreen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_mirror_reflection_flag(&self, entity_: u32,
p1_: bool) -> ResultOfSetEntityMirrorReflectionFlag {
    unsafe {
        let mut entity_ = entity_;
let mut p1_ = p1_;
        let success = sdk::natives::set_entity_mirror_reflection_flag(
            entity_,
p1_,
        );
        
        
        ResultOfSetEntityMirrorReflectionFlag {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_submerged_level(&self, entity_: u32) -> ResultOfGetEntitySubmergedLevel {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_submerged_level(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetEntitySubmergedLevel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_heading(&self, entity_: u32) -> ResultOfGetEntityHeading {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_heading(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityHeading {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_collision_loaded_around_entity(&self, entity_: u32) -> ResultOfHasCollisionLoadedAroundEntity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::has_collision_loaded_around_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfHasCollisionLoadedAroundEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_is_target_priority(&self, entity_: u32,
p1_: bool,
p2_: f32) -> ResultOfSetEntityIsTargetPriority {
    unsafe {
        let mut entity_ = entity_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_entity_is_target_priority(
            entity_,
p1_,
p2_,
        );
        
        
        ResultOfSetEntityIsTargetPriority {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_visible(&self, entity_: u32,
toggle_: bool,
p2_: bool) -> ResultOfSetEntityVisible {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
        let success = sdk::natives::set_entity_visible(
            entity_,
toggle_,
p2_,
        );
        
        
        ResultOfSetEntityVisible {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_anim_event_fired(&self, entity_: u32,
action_hash_: u32) -> ResultOfHasAnimEventFired {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut action_hash_ = action_hash_;
        let success = sdk::natives::has_anim_event_fired(
            &mut native_return,
entity_,
action_hash_,
        );
        let native_return = native_return;
        
        ResultOfHasAnimEventFired {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_matrix(&self, entity_: u32,
forward_vector_: Option<shared::Vector3>,
right_vector_: Option<shared::Vector3>,
up_vector_: Option<shared::Vector3>,
position_: Option<shared::Vector3>) -> ResultOfGetEntityMatrix {
    unsafe {
        let mut entity_ = entity_;
let mut forward_vector_ = sdk_helpers::create_vector3_ptr(forward_vector_);
let mut right_vector_ = sdk_helpers::create_vector3_ptr(right_vector_);
let mut up_vector_ = sdk_helpers::create_vector3_ptr(up_vector_);
let mut position_ = sdk_helpers::create_vector3_ptr(position_);
        let success = sdk::natives::get_entity_matrix(
            forward_vector_.pin_mut(),
right_vector_.pin_mut(),
up_vector_.pin_mut(),
position_.pin_mut(),
entity_,
        );
        let forward_vector_ = sdk_helpers::read_cpp_vector3(forward_vector_);
let right_vector_ = sdk_helpers::read_cpp_vector3(right_vector_);
let up_vector_ = sdk_helpers::read_cpp_vector3(up_vector_);
let position_ = sdk_helpers::read_cpp_vector3(position_);
        
        ResultOfGetEntityMatrix {
            success,
            ret: (),
            forward_vector_,
right_vector_,
up_vector_,
position_
        }
    }
}

    fn native_would_entity_be_occluded(&self, entity_model_hash_: u32,
x_: f32,
y_: f32,
z_: f32,
p4_: bool) -> ResultOfWouldEntityBeOccluded {
    unsafe {
        let mut native_return = Default::default();
let mut entity_model_hash_ = entity_model_hash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p4_ = p4_;
        let success = sdk::natives::would_entity_be_occluded(
            &mut native_return,
entity_model_hash_,
x_,
y_,
z_,
p4_,
        );
        let native_return = native_return;
        
        ResultOfWouldEntityBeOccluded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_health(&self, entity_: u32) -> ResultOfGetEntityHealth {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_health(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityHealth {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_attached_to_entity(&self, from_: u32,
to_: u32) -> ResultOfIsEntityAttachedToEntity {
    unsafe {
        let mut native_return = Default::default();
let mut from_ = from_;
let mut to_ = to_;
        let success = sdk::natives::is_entity_attached_to_entity(
            &mut native_return,
from_,
to_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityAttachedToEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_process_entity_attachments(&self, entity_: u32) -> ResultOfProcessEntityAttachments {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::process_entity_attachments(
            entity_,
        );
        
        
        ResultOfProcessEntityAttachments {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_population_type(&self, entity_: u32) -> ResultOfGetEntityPopulationType {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_population_type(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityPopulationType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_proofs(&self, entity_: u32,
bullet_proof_: bool,
fire_proof_: bool,
explosion_proof_: bool,
collision_proof_: bool,
melee_proof_: bool,
steam_proof_: bool,
p7_: bool,
water_proof_: bool) -> ResultOfSetEntityProofs {
    unsafe {
        let mut entity_ = entity_;
let mut bullet_proof_ = bullet_proof_;
let mut fire_proof_ = fire_proof_;
let mut explosion_proof_ = explosion_proof_;
let mut collision_proof_ = collision_proof_;
let mut melee_proof_ = melee_proof_;
let mut steam_proof_ = steam_proof_;
let mut p7_ = p7_;
let mut water_proof_ = water_proof_;
        let success = sdk::natives::set_entity_proofs(
            entity_,
bullet_proof_,
fire_proof_,
explosion_proof_,
collision_proof_,
melee_proof_,
steam_proof_,
p7_,
water_proof_,
        );
        
        
        ResultOfSetEntityProofs {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_bone_index_by_name(&self, entity_: u32,
bone_name_: Option<String>) -> ResultOfGetEntityBoneIndexByName {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut bone_name_ = sdk_helpers::create_c_string_ptr(bone_name_);
        let success = sdk::natives::get_entity_bone_index_by_name(
            &mut native_return,
entity_,
bone_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfGetEntityBoneIndexByName {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_entity_clear_los_to_entity(&self, entity1_: u32,
entity2_: u32,
trace_type_: i32) -> ResultOfHasEntityClearLosToEntity {
    unsafe {
        let mut native_return = Default::default();
let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
let mut trace_type_ = trace_type_;
        let success = sdk::natives::has_entity_clear_los_to_entity(
            &mut native_return,
entity1_,
entity2_,
trace_type_,
        );
        let native_return = native_return;
        
        ResultOfHasEntityClearLosToEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_attach_entity_bone_to_entity_bone_y_forward(&self, entity1_: u32,
entity2_: u32,
bone_index1_: i32,
bone_index2_: i32,
p4_: bool,
p5_: bool) -> ResultOfAttachEntityBoneToEntityBoneYforward {
    unsafe {
        let mut entity1_ = entity1_;
let mut entity2_ = entity2_;
let mut bone_index1_ = bone_index1_;
let mut bone_index2_ = bone_index2_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::attach_entity_bone_to_entity_bone_y_forward(
            entity1_,
entity2_,
bone_index1_,
bone_index2_,
p4_,
p5_,
        );
        
        
        ResultOfAttachEntityBoneToEntityBoneYforward {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_anim_duration(&self, anim_dict_: Option<String>,
anim_name_: Option<String>) -> ResultOfGetAnimDuration {
    unsafe {
        let mut native_return = Default::default();
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
        let success = sdk::natives::get_anim_duration(
            &mut native_return,
anim_dict_.as_ref().unwrap(),
anim_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfGetAnimDuration {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_shocking_event_in_sphere(&self, event_type_: i32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOfIsShockingEventInSphere {
    unsafe {
        let mut native_return = Default::default();
let mut event_type_ = event_type_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::is_shocking_event_in_sphere(
            &mut native_return,
event_type_,
x_,
y_,
z_,
radius_,
        );
        let native_return = native_return;
        
        ResultOfIsShockingEventInSphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_shocking_event(&self, event_: u32) -> ResultOfRemoveShockingEvent {
    unsafe {
        let mut native_return = Default::default();
let mut event_ = event_;
        let success = sdk::natives::remove_shocking_event(
            &mut native_return,
event_,
        );
        let native_return = native_return;
        
        ResultOfRemoveShockingEvent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_suppress_shocking_events_next_frame(&self, ) -> ResultOfSuppressShockingEventsNextFrame {
    unsafe {
        
        let success = sdk::natives::suppress_shocking_events_next_frame(
            
        );
        
        
        ResultOfSuppressShockingEventsNextFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_shocking_event_spawn_blocking_areas(&self, ) -> ResultOfRemoveShockingEventSpawnBlockingAreas {
    unsafe {
        
        let success = sdk::natives::remove_shocking_event_spawn_blocking_areas(
            
        );
        
        
        ResultOfRemoveShockingEventSpawnBlockingAreas {
            success,
            ret: (),
            
        }
    }
}

    fn native_suppress_shocking_event_type_next_frame(&self, event_type_: i32) -> ResultOfSuppressShockingEventTypeNextFrame {
    unsafe {
        let mut event_type_ = event_type_;
        let success = sdk::natives::suppress_shocking_event_type_next_frame(
            event_type_,
        );
        
        
        ResultOfSuppressShockingEventTypeNextFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_decision_maker_event_response(&self, name_: u32,
event_type_: i32) -> ResultOfClearDecisionMakerEventResponse {
    unsafe {
        let mut name_ = name_;
let mut event_type_ = event_type_;
        let success = sdk::natives::clear_decision_maker_event_response(
            name_,
event_type_,
        );
        
        
        ResultOfClearDecisionMakerEventResponse {
            success,
            ret: (),
            
        }
    }
}

    fn native_suppress_agitation_events_next_frame(&self, ) -> ResultOfSuppressAgitationEventsNextFrame {
    unsafe {
        
        let success = sdk::natives::suppress_agitation_events_next_frame(
            
        );
        
        
        ResultOfSuppressAgitationEventsNextFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_shocking_event_for_entity(&self, event_type_: i32,
entity_: u32,
duration_: f32) -> ResultOfAddShockingEventForEntity {
    unsafe {
        let mut native_return = Default::default();
let mut event_type_ = event_type_;
let mut entity_ = entity_;
let mut duration_ = duration_;
        let success = sdk::natives::add_shocking_event_for_entity(
            &mut native_return,
event_type_,
entity_,
duration_,
        );
        let native_return = native_return;
        
        ResultOfAddShockingEventForEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_decision_maker(&self, ped_: u32,
name_: u32) -> ResultOfSetDecisionMaker {
    unsafe {
        let mut ped_ = ped_;
let mut name_ = name_;
        let success = sdk::natives::set_decision_maker(
            ped_,
name_,
        );
        
        
        ResultOfSetDecisionMaker {
            success,
            ret: (),
            
        }
    }
}

    fn native_unblock_decision_maker_event(&self, name_: u32,
event_type_: i32) -> ResultOfUnblockDecisionMakerEvent {
    unsafe {
        let mut name_ = name_;
let mut event_type_ = event_type_;
        let success = sdk::natives::unblock_decision_maker_event(
            name_,
event_type_,
        );
        
        
        ResultOfUnblockDecisionMakerEvent {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_shocking_event_at_position(&self, event_type_: i32,
x_: f32,
y_: f32,
z_: f32,
duration_: f32) -> ResultOfAddShockingEventAtPosition {
    unsafe {
        let mut native_return = Default::default();
let mut event_type_ = event_type_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut duration_ = duration_;
        let success = sdk::natives::add_shocking_event_at_position(
            &mut native_return,
event_type_,
x_,
y_,
z_,
duration_,
        );
        let native_return = native_return;
        
        ResultOfAddShockingEventAtPosition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_block_decision_maker_event(&self, name_: u32,
event_type_: i32) -> ResultOfBlockDecisionMakerEvent {
    unsafe {
        let mut name_ = name_;
let mut event_type_ = event_type_;
        let success = sdk::natives::block_decision_maker_event(
            name_,
event_type_,
        );
        
        
        ResultOfBlockDecisionMakerEvent {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_all_shocking_events(&self, p0_: bool) -> ResultOfRemoveAllShockingEvents {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::remove_all_shocking_events(
            p0_,
        );
        
        
        ResultOfRemoveAllShockingEvents {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_shop_ped_apparel_forced_prop_count(&self, component_hash_: u32) -> ResultOfGetShopPedApparelForcedPropCount {
    unsafe {
        let mut native_return = Default::default();
let mut component_hash_ = component_hash_;
        let success = sdk::natives::get_shop_ped_apparel_forced_prop_count(
            &mut native_return,
component_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetShopPedApparelForcedPropCount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_hash_name_for_component(&self, entity_: u32,
component_id_: i32,
drawable_variant_: i32,
texture_variant_: i32) -> ResultOfGetHashNameForComponent {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut component_id_ = component_id_;
let mut drawable_variant_ = drawable_variant_;
let mut texture_variant_ = texture_variant_;
        let success = sdk::natives::get_hash_name_for_component(
            &mut native_return,
entity_,
component_id_,
drawable_variant_,
texture_variant_,
        );
        let native_return = native_return;
        
        ResultOfGetHashNameForComponent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_dlc_vehicle_mod(&self, hash_: u32) -> ResultOfIsDlcVehicleMod {
    unsafe {
        let mut native_return = Default::default();
let mut hash_ = hash_;
        let success = sdk::natives::is_dlc_vehicle_mod(
            &mut native_return,
hash_,
        );
        let native_return = native_return;
        
        ResultOfIsDlcVehicleMod {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_shop_ped_outfit_locate(&self, p0_: i32) -> ResultOfGetShopPedOutfitLocate {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_shop_ped_outfit_locate(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfGetShopPedOutfitLocate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_tattoo_shop_dlc_item_index(&self, overlay_hash_: u32,
p1_: i32,
character_: i32) -> ResultOfGetTattooShopDlcItemIndex {
    unsafe {
        let mut native_return = Default::default();
let mut overlay_hash_ = overlay_hash_;
let mut p1_ = p1_;
let mut character_ = character_;
        let success = sdk::natives::get_tattoo_shop_dlc_item_index(
            &mut native_return,
overlay_hash_,
p1_,
character_,
        );
        let native_return = native_return;
        
        ResultOfGetTattooShopDlcItemIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_shop_ped_outfit_component_variant(&self, outfit_hash_: u32,
unk_variant_index_: i32,
out_component_variant_: shared::MemoryBufferId) -> ResultOfGetShopPedOutfitComponentVariant {
    unsafe {
        let mut native_return = Default::default();
let mut outfit_hash_ = outfit_hash_;
let mut unk_variant_index_ = unk_variant_index_;
let mut out_component_variant_ = self.memory_buffers.borrow_mut().get_mut_ptr(out_component_variant_) as *mut c_void;
        let success = sdk::natives::get_shop_ped_outfit_component_variant(
            &mut native_return,
out_component_variant_,
outfit_hash_,
unk_variant_index_,
        );
        let native_return = native_return;
let out_component_variant_ = 0;
        
        ResultOfGetShopPedOutfitComponentVariant {
            success,
            ret: native_return,
            out_component_variant_
        }
    }
}

    fn native_init_shop_ped_component(&self, out_component_: shared::MemoryBufferId) -> ResultOfInitShopPedComponent {
    unsafe {
        let mut out_component_ = self.memory_buffers.borrow_mut().get_mut_ptr(out_component_) as *mut c_void;
        let success = sdk::natives::init_shop_ped_component(
            out_component_,
        );
        let out_component_ = 0;
        
        ResultOfInitShopPedComponent {
            success,
            ret: (),
            out_component_
        }
    }
}

    fn native_get_shop_ped_query_component(&self, component_id_: i32,
out_component_: shared::MemoryBufferId) -> ResultOfGetShopPedQueryComponent {
    unsafe {
        let mut component_id_ = component_id_;
let mut out_component_ = self.memory_buffers.borrow_mut().get_mut_ptr(out_component_) as *mut c_void;
        let success = sdk::natives::get_shop_ped_query_component(
            out_component_,
component_id_,
        );
        let out_component_ = 0;
        
        ResultOfGetShopPedQueryComponent {
            success,
            ret: (),
            out_component_
        }
    }
}

    fn native_get_num_tattoo_shop_dlc_items(&self, character_: i32) -> ResultOfGetNumTattooShopDlcItems {
    unsafe {
        let mut native_return = Default::default();
let mut character_ = character_;
        let success = sdk::natives::get_num_tattoo_shop_dlc_items(
            &mut native_return,
character_,
        );
        let native_return = native_return;
        
        ResultOfGetNumTattooShopDlcItems {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_dlc_weapon_data_sp(&self, dlc_weapon_index_: i32,
out_data_: shared::MemoryBufferId) -> ResultOfGetDlcWeaponDataSp {
    unsafe {
        let mut native_return = Default::default();
let mut dlc_weapon_index_ = dlc_weapon_index_;
let mut out_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(out_data_) as *mut c_void;
        let success = sdk::natives::get_dlc_weapon_data_sp(
            &mut native_return,
out_data_,
dlc_weapon_index_,
        );
        let native_return = native_return;
let out_data_ = 0;
        
        ResultOfGetDlcWeaponDataSp {
            success,
            ret: native_return,
            out_data_
        }
    }
}

    fn native_get_dlc_weapon_component_data_sp(&self, dlc_weapon_index_: i32,
dlc_weap_comp_index_: i32,
component_data_ptr_: shared::MemoryBufferId) -> ResultOfGetDlcWeaponComponentDataSp {
    unsafe {
        let mut native_return = Default::default();
let mut dlc_weapon_index_ = dlc_weapon_index_;
let mut dlc_weap_comp_index_ = dlc_weap_comp_index_;
let mut component_data_ptr_ = self.memory_buffers.borrow_mut().get_mut_ptr(component_data_ptr_) as *mut c_void;
        let success = sdk::natives::get_dlc_weapon_component_data_sp(
            &mut native_return,
component_data_ptr_,
dlc_weapon_index_,
dlc_weap_comp_index_,
        );
        let native_return = native_return;
let component_data_ptr_ = 0;
        
        ResultOfGetDlcWeaponComponentDataSp {
            success,
            ret: native_return,
            component_data_ptr_
        }
    }
}

    fn native_get_dlc_vehicle_data(&self, dlc_vehicle_index_: i32,
out_data_: shared::MemoryBufferId) -> ResultOfGetDlcVehicleData {
    unsafe {
        let mut native_return = Default::default();
let mut dlc_vehicle_index_ = dlc_vehicle_index_;
let mut out_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(out_data_) as *mut c_void;
        let success = sdk::natives::get_dlc_vehicle_data(
            &mut native_return,
out_data_,
dlc_vehicle_index_,
        );
        let native_return = native_return;
let out_data_ = 0;
        
        ResultOfGetDlcVehicleData {
            success,
            ret: native_return,
            out_data_
        }
    }
}

    fn native_does_shop_ped_apparel_have_restriction_tag(&self, component_hash_: u32,
restriction_tag_hash_: u32,
component_id_: i32) -> ResultOfDoesShopPedApparelHaveRestrictionTag {
    unsafe {
        let mut native_return = Default::default();
let mut component_hash_ = component_hash_;
let mut restriction_tag_hash_ = restriction_tag_hash_;
let mut component_id_ = component_id_;
        let success = sdk::natives::does_shop_ped_apparel_have_restriction_tag(
            &mut native_return,
component_hash_,
restriction_tag_hash_,
component_id_,
        );
        let native_return = native_return;
        
        ResultOfDoesShopPedApparelHaveRestrictionTag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_revert_content_changeset_group_for_all(&self, hash_: u32) -> ResultOfRevertContentChangesetGroupForAll {
    unsafe {
        let mut hash_ = hash_;
        let success = sdk::natives::revert_content_changeset_group_for_all(
            hash_,
        );
        
        
        ResultOfRevertContentChangesetGroupForAll {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_num_dlc_weapon_components(&self, dlc_weapon_index_: i32) -> ResultOfGetNumDlcWeaponComponents {
    unsafe {
        let mut native_return = Default::default();
let mut dlc_weapon_index_ = dlc_weapon_index_;
        let success = sdk::natives::get_num_dlc_weapon_components(
            &mut native_return,
dlc_weapon_index_,
        );
        let native_return = native_return;
        
        ResultOfGetNumDlcWeaponComponents {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_num_dlc_weapons_sp(&self, ) -> ResultOfGetNumDlcWeaponsSp {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_num_dlc_weapons_sp(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetNumDlcWeaponsSp {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_setup_shop_ped_apparel_query(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfSetupShopPedApparelQuery {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::setup_shop_ped_apparel_query(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOfSetupShopPedApparelQuery {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_dlc_vehicle_flags(&self, dlc_vehicle_index_: i32) -> ResultOfGetDlcVehicleFlags {
    unsafe {
        let mut native_return = Default::default();
let mut dlc_vehicle_index_ = dlc_vehicle_index_;
        let success = sdk::natives::get_dlc_vehicle_flags(
            &mut native_return,
dlc_vehicle_index_,
        );
        let native_return = native_return;
        
        ResultOfGetDlcVehicleFlags {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_shop_ped_prop(&self, component_hash_: u32,
out_prop_: shared::MemoryBufferId) -> ResultOfGetShopPedProp {
    unsafe {
        let mut component_hash_ = component_hash_;
let mut out_prop_ = self.memory_buffers.borrow_mut().get_mut_ptr(out_prop_) as *mut c_void;
        let success = sdk::natives::get_shop_ped_prop(
            out_prop_,
component_hash_,
        );
        let out_prop_ = 0;
        
        ResultOfGetShopPedProp {
            success,
            ret: (),
            out_prop_
        }
    }
}

    fn native_get_hash_name_for_prop(&self, entity_: u32,
component_id_: i32,
prop_index_: i32,
prop_texture_index_: i32) -> ResultOfGetHashNameForProp {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut component_id_ = component_id_;
let mut prop_index_ = prop_index_;
let mut prop_texture_index_ = prop_texture_index_;
        let success = sdk::natives::get_hash_name_for_prop(
            &mut native_return,
entity_,
component_id_,
prop_index_,
prop_texture_index_,
        );
        let native_return = native_return;
        
        ResultOfGetHashNameForProp {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_execute_content_changeset_group_for_all(&self, hash_: u32) -> ResultOfExecuteContentChangesetGroupForAll {
    unsafe {
        let mut hash_ = hash_;
        let success = sdk::natives::execute_content_changeset_group_for_all(
            hash_,
        );
        
        
        ResultOfExecuteContentChangesetGroupForAll {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_forced_component(&self, component_hash_: u32,
forced_component_index_: i32,
name_hash_: u32,
enum_value_: i32,
component_type_: i32) -> ResultOfGetForcedComponent {
    unsafe {
        let mut component_hash_ = component_hash_;
let mut forced_component_index_ = forced_component_index_;
let mut name_hash_ = name_hash_;
let mut enum_value_ = enum_value_;
let mut component_type_ = component_type_;
        let success = sdk::natives::get_forced_component(
            &mut name_hash_,
&mut enum_value_,
&mut component_type_,
component_hash_,
forced_component_index_,
        );
        let name_hash_ = name_hash_;
let enum_value_ = enum_value_;
let component_type_ = component_type_;
        
        ResultOfGetForcedComponent {
            success,
            ret: (),
            name_hash_,
enum_value_,
component_type_
        }
    }
}

    fn native_get_shop_ped_query_prop_index(&self, component_hash_: u32) -> ResultOfGetShopPedQueryPropIndex {
    unsafe {
        let mut native_return = Default::default();
let mut component_hash_ = component_hash_;
        let success = sdk::natives::get_shop_ped_query_prop_index(
            &mut native_return,
component_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetShopPedQueryPropIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_dlc_weapon_component_data(&self, dlc_weapon_index_: i32,
dlc_weap_comp_index_: i32,
component_data_ptr_: shared::MemoryBufferId) -> ResultOfGetDlcWeaponComponentData {
    unsafe {
        let mut native_return = Default::default();
let mut dlc_weapon_index_ = dlc_weapon_index_;
let mut dlc_weap_comp_index_ = dlc_weap_comp_index_;
let mut component_data_ptr_ = self.memory_buffers.borrow_mut().get_mut_ptr(component_data_ptr_) as *mut c_void;
        let success = sdk::natives::get_dlc_weapon_component_data(
            &mut native_return,
component_data_ptr_,
dlc_weapon_index_,
dlc_weap_comp_index_,
        );
        let native_return = native_return;
let component_data_ptr_ = 0;
        
        ResultOfGetDlcWeaponComponentData {
            success,
            ret: native_return,
            component_data_ptr_
        }
    }
}

    fn native_get_shop_ped_query_outfit(&self, outfit_index_: i32,
outfit_: shared::MemoryBufferId) -> ResultOfGetShopPedQueryOutfit {
    unsafe {
        let mut outfit_index_ = outfit_index_;
let mut outfit_ = self.memory_buffers.borrow_mut().get_mut_ptr(outfit_) as *mut c_void;
        let success = sdk::natives::get_shop_ped_query_outfit(
            outfit_,
outfit_index_,
        );
        let outfit_ = 0;
        
        ResultOfGetShopPedQueryOutfit {
            success,
            ret: (),
            outfit_
        }
    }
}

    fn native_get_variant_component(&self, component_hash_: u32,
unk_variant_component_index_: i32,
name_hash_: u32,
enum_value_: i32,
component_type_: i32) -> ResultOfGetVariantComponent {
    unsafe {
        let mut component_hash_ = component_hash_;
let mut unk_variant_component_index_ = unk_variant_component_index_;
let mut name_hash_ = name_hash_;
let mut enum_value_ = enum_value_;
let mut component_type_ = component_type_;
        let success = sdk::natives::get_variant_component(
            &mut name_hash_,
&mut enum_value_,
&mut component_type_,
component_hash_,
unk_variant_component_index_,
        );
        let name_hash_ = name_hash_;
let enum_value_ = enum_value_;
let component_type_ = component_type_;
        
        ResultOfGetVariantComponent {
            success,
            ret: (),
            name_hash_,
enum_value_,
component_type_
        }
    }
}

    fn native_get_shop_ped_component(&self, component_hash_: u32,
out_component_: shared::MemoryBufferId) -> ResultOfGetShopPedComponent {
    unsafe {
        let mut component_hash_ = component_hash_;
let mut out_component_ = self.memory_buffers.borrow_mut().get_mut_ptr(out_component_) as *mut c_void;
        let success = sdk::natives::get_shop_ped_component(
            out_component_,
component_hash_,
        );
        let out_component_ = 0;
        
        ResultOfGetShopPedComponent {
            success,
            ret: (),
            out_component_
        }
    }
}

    fn native_does_current_ped_component_have_restriction_tag(&self, ped_: u32,
component_id_: i32,
restriction_tag_hash_: u32) -> ResultOfDoesCurrentPedComponentHaveRestrictionTag {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut component_id_ = component_id_;
let mut restriction_tag_hash_ = restriction_tag_hash_;
        let success = sdk::natives::does_current_ped_component_have_restriction_tag(
            &mut native_return,
ped_,
component_id_,
restriction_tag_hash_,
        );
        let native_return = native_return;
        
        ResultOfDoesCurrentPedComponentHaveRestrictionTag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_dlc_weapon_data(&self, dlc_weapon_index_: i32,
out_data_: shared::MemoryBufferId) -> ResultOfGetDlcWeaponData {
    unsafe {
        let mut native_return = Default::default();
let mut dlc_weapon_index_ = dlc_weapon_index_;
let mut out_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(out_data_) as *mut c_void;
        let success = sdk::natives::get_dlc_weapon_data(
            &mut native_return,
out_data_,
dlc_weapon_index_,
        );
        let native_return = native_return;
let out_data_ = 0;
        
        ResultOfGetDlcWeaponData {
            success,
            ret: native_return,
            out_data_
        }
    }
}

    fn native_get_shop_ped_query_component_index(&self, component_hash_: u32) -> ResultOfGetShopPedQueryComponentIndex {
    unsafe {
        let mut native_return = Default::default();
let mut component_hash_ = component_hash_;
        let success = sdk::natives::get_shop_ped_query_component_index(
            &mut native_return,
component_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetShopPedQueryComponentIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_setup_shop_ped_apparel_query_tu(&self, character_: i32,
p1_: i32,
p2_: i32,
p3_: bool,
p4_: i32,
component_id_: i32) -> ResultOfSetupShopPedApparelQueryTu {
    unsafe {
        let mut native_return = Default::default();
let mut character_ = character_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut component_id_ = component_id_;
        let success = sdk::natives::setup_shop_ped_apparel_query_tu(
            &mut native_return,
character_,
p1_,
p2_,
p3_,
p4_,
component_id_,
        );
        let native_return = native_return;
        
        ResultOfSetupShopPedApparelQueryTu {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_num_dlc_vehicles(&self, ) -> ResultOfGetNumDlcVehicles {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_num_dlc_vehicles(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetNumDlcVehicles {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_shop_ped_outfit_prop_variant(&self, outfit_hash_: u32,
unk_variant_index_: i32,
out_prop_variant_: shared::MemoryBufferId) -> ResultOfGetShopPedOutfitPropVariant {
    unsafe {
        let mut native_return = Default::default();
let mut outfit_hash_ = outfit_hash_;
let mut unk_variant_index_ = unk_variant_index_;
let mut out_prop_variant_ = self.memory_buffers.borrow_mut().get_mut_ptr(out_prop_variant_) as *mut c_void;
        let success = sdk::natives::get_shop_ped_outfit_prop_variant(
            &mut native_return,
out_prop_variant_,
outfit_hash_,
unk_variant_index_,
        );
        let native_return = native_return;
let out_prop_variant_ = 0;
        
        ResultOfGetShopPedOutfitPropVariant {
            success,
            ret: native_return,
            out_prop_variant_
        }
    }
}

    fn native_get_num_dlc_weapon_components_sp(&self, dlc_weapon_index_: i32) -> ResultOfGetNumDlcWeaponComponentsSp {
    unsafe {
        let mut native_return = Default::default();
let mut dlc_weapon_index_ = dlc_weapon_index_;
        let success = sdk::natives::get_num_dlc_weapon_components_sp(
            &mut native_return,
dlc_weapon_index_,
        );
        let native_return = native_return;
        
        ResultOfGetNumDlcWeaponComponentsSp {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_shop_ped_outfit(&self, p0_: i32,
p1_: shared::MemoryBufferId) -> ResultOfGetShopPedOutfit {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
        let success = sdk::natives::get_shop_ped_outfit(
            p1_,
p0_,
        );
        let p1_ = 0;
        
        ResultOfGetShopPedOutfit {
            success,
            ret: (),
            p1_
        }
    }
}

    fn native_get_dlc_vehicle_mod_lock_hash(&self, hash_: u32) -> ResultOfGetDlcVehicleModLockHash {
    unsafe {
        let mut native_return = Default::default();
let mut hash_ = hash_;
        let success = sdk::natives::get_dlc_vehicle_mod_lock_hash(
            &mut native_return,
hash_,
        );
        let native_return = native_return;
        
        ResultOfGetDlcVehicleModLockHash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_shop_ped_apparel_variant_component_count(&self, component_hash_: u32) -> ResultOfGetShopPedApparelVariantComponentCount {
    unsafe {
        let mut native_return = Default::default();
let mut component_hash_ = component_hash_;
        let success = sdk::natives::get_shop_ped_apparel_variant_component_count(
            &mut native_return,
component_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetShopPedApparelVariantComponentCount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_shop_ped_apparel_forced_component_count(&self, component_hash_: u32) -> ResultOfGetShopPedApparelForcedComponentCount {
    unsafe {
        let mut native_return = Default::default();
let mut component_hash_ = component_hash_;
        let success = sdk::natives::get_shop_ped_apparel_forced_component_count(
            &mut native_return,
component_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetShopPedApparelForcedComponentCount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_shop_ped_apparel_variant_prop_count(&self, prop_hash_: u32) -> ResultOfGetShopPedApparelVariantPropCount {
    unsafe {
        let mut native_return = Default::default();
let mut prop_hash_ = prop_hash_;
        let success = sdk::natives::get_shop_ped_apparel_variant_prop_count(
            &mut native_return,
prop_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetShopPedApparelVariantPropCount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_content_item_locked(&self, item_hash_: u32) -> ResultOfIsContentItemLocked {
    unsafe {
        let mut native_return = Default::default();
let mut item_hash_ = item_hash_;
        let success = sdk::natives::is_content_item_locked(
            &mut native_return,
item_hash_,
        );
        let native_return = native_return;
        
        ResultOfIsContentItemLocked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_current_ped_prop_have_restriction_tag(&self, ped_: u32,
component_id_: i32,
restriction_tag_hash_: u32) -> ResultOfDoesCurrentPedPropHaveRestrictionTag {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut component_id_ = component_id_;
let mut restriction_tag_hash_ = restriction_tag_hash_;
        let success = sdk::natives::does_current_ped_prop_have_restriction_tag(
            &mut native_return,
ped_,
component_id_,
restriction_tag_hash_,
        );
        let native_return = native_return;
        
        ResultOfDoesCurrentPedPropHaveRestrictionTag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_variant_prop(&self, component_hash_: u32,
unk_variant_prop_index_: i32,
name_hash_: u32,
enum_value_: i32,
anchor_point_: i32) -> ResultOfGetVariantProp {
    unsafe {
        let mut component_hash_ = component_hash_;
let mut unk_variant_prop_index_ = unk_variant_prop_index_;
let mut name_hash_ = name_hash_;
let mut enum_value_ = enum_value_;
let mut anchor_point_ = anchor_point_;
        let success = sdk::natives::get_variant_prop(
            &mut name_hash_,
&mut enum_value_,
&mut anchor_point_,
component_hash_,
unk_variant_prop_index_,
        );
        let name_hash_ = name_hash_;
let enum_value_ = enum_value_;
let anchor_point_ = anchor_point_;
        
        ResultOfGetVariantProp {
            success,
            ret: (),
            name_hash_,
enum_value_,
anchor_point_
        }
    }
}

    fn native_get_shop_ped_query_prop(&self, component_id_: i32,
out_prop_: shared::MemoryBufferId) -> ResultOfGetShopPedQueryProp {
    unsafe {
        let mut component_id_ = component_id_;
let mut out_prop_ = self.memory_buffers.borrow_mut().get_mut_ptr(out_prop_) as *mut c_void;
        let success = sdk::natives::get_shop_ped_query_prop(
            out_prop_,
component_id_,
        );
        let out_prop_ = 0;
        
        ResultOfGetShopPedQueryProp {
            success,
            ret: (),
            out_prop_
        }
    }
}

    fn native_get_forced_prop(&self, component_hash_: u32,
forced_prop_index_: i32,
name_hash_: u32,
enum_value_: i32,
anchor_point_: i32) -> ResultOfGetForcedProp {
    unsafe {
        let mut component_hash_ = component_hash_;
let mut forced_prop_index_ = forced_prop_index_;
let mut name_hash_ = name_hash_;
let mut enum_value_ = enum_value_;
let mut anchor_point_ = anchor_point_;
        let success = sdk::natives::get_forced_prop(
            &mut name_hash_,
&mut enum_value_,
&mut anchor_point_,
component_hash_,
forced_prop_index_,
        );
        let name_hash_ = name_hash_;
let enum_value_ = enum_value_;
let anchor_point_ = anchor_point_;
        
        ResultOfGetForcedProp {
            success,
            ret: (),
            name_hash_,
enum_value_,
anchor_point_
        }
    }
}

    fn native_init_shop_ped_prop(&self, out_prop_: shared::MemoryBufferId) -> ResultOfInitShopPedProp {
    unsafe {
        let mut out_prop_ = self.memory_buffers.borrow_mut().get_mut_ptr(out_prop_) as *mut c_void;
        let success = sdk::natives::init_shop_ped_prop(
            out_prop_,
        );
        let out_prop_ = 0;
        
        ResultOfInitShopPedProp {
            success,
            ret: (),
            out_prop_
        }
    }
}

    fn native_get_dlc_vehicle_model(&self, dlc_vehicle_index_: i32) -> ResultOfGetDlcVehicleModel {
    unsafe {
        let mut native_return = Default::default();
let mut dlc_vehicle_index_ = dlc_vehicle_index_;
        let success = sdk::natives::get_dlc_vehicle_model(
            &mut native_return,
dlc_vehicle_index_,
        );
        let native_return = native_return;
        
        ResultOfGetDlcVehicleModel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_num_dlc_weapons(&self, ) -> ResultOfGetNumDlcWeapons {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_num_dlc_weapons(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetNumDlcWeapons {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_setup_shop_ped_outfit_query(&self, character_: i32,
p1_: bool) -> ResultOfSetupShopPedOutfitQuery {
    unsafe {
        let mut native_return = Default::default();
let mut character_ = character_;
let mut p1_ = p1_;
        let success = sdk::natives::setup_shop_ped_outfit_query(
            &mut native_return,
character_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfSetupShopPedOutfitQuery {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_tattoo_shop_dlc_item_data(&self, character_type_: i32,
decoration_index_: i32,
out_component_: shared::MemoryBufferId) -> ResultOfGetTattooShopDlcItemData {
    unsafe {
        let mut native_return = Default::default();
let mut character_type_ = character_type_;
let mut decoration_index_ = decoration_index_;
let mut out_component_ = self.memory_buffers.borrow_mut().get_mut_ptr(out_component_) as *mut c_void;
        let success = sdk::natives::get_tattoo_shop_dlc_item_data(
            &mut native_return,
out_component_,
character_type_,
decoration_index_,
        );
        let native_return = native_return;
let out_component_ = 0;
        
        ResultOfGetTattooShopDlcItemData {
            success,
            ret: native_return,
            out_component_
        }
    }
}

    fn native_stop_fire_in_range(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOfStopFireInRange {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::stop_fire_in_range(
            x_,
y_,
z_,
radius_,
        );
        
        
        ResultOfStopFireInRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_owner_of_explosion_in_angled_area(&self, explosion_type_: i32,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
radius_: f32) -> ResultOfGetOwnerOfExplosionInAngledArea {
    unsafe {
        let mut native_return = Default::default();
let mut explosion_type_ = explosion_type_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut radius_ = radius_;
        let success = sdk::natives::get_owner_of_explosion_in_angled_area(
            &mut native_return,
explosion_type_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
radius_,
        );
        let native_return = native_return;
        
        ResultOfGetOwnerOfExplosionInAngledArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_owned_explosion(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
explosion_type_: i32,
damage_scale_: f32,
is_audible_: bool,
is_invisible_: bool,
camera_shake_: f32) -> ResultOfAddOwnedExplosion {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut explosion_type_ = explosion_type_;
let mut damage_scale_ = damage_scale_;
let mut is_audible_ = is_audible_;
let mut is_invisible_ = is_invisible_;
let mut camera_shake_ = camera_shake_;
        let success = sdk::natives::add_owned_explosion(
            ped_,
x_,
y_,
z_,
explosion_type_,
damage_scale_,
is_audible_,
is_invisible_,
camera_shake_,
        );
        
        
        ResultOfAddOwnedExplosion {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_entity_on_fire(&self, entity_: u32) -> ResultOfIsEntityOnFire {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_on_fire(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityOnFire {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_explosion_in_area(&self, explosion_type_: i32,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOfIsExplosionInArea {
    unsafe {
        let mut native_return = Default::default();
let mut explosion_type_ = explosion_type_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::is_explosion_in_area(
            &mut native_return,
explosion_type_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOfIsExplosionInArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_closest_fire_pos(&self, out_position_: Option<shared::Vector3>,
x_: f32,
y_: f32,
z_: f32) -> ResultOfGetClosestFirePos {
    unsafe {
        let mut native_return = Default::default();
let mut out_position_ = sdk_helpers::create_vector3_ptr(out_position_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::get_closest_fire_pos(
            &mut native_return,
out_position_.pin_mut(),
x_,
y_,
z_,
        );
        let native_return = native_return;
let out_position_ = sdk_helpers::read_cpp_vector3(out_position_);
        
        ResultOfGetClosestFirePos {
            success,
            ret: native_return,
            out_position_
        }
    }
}

    fn native_add_explosion_with_user_vfx(&self, x_: f32,
y_: f32,
z_: f32,
explosion_type_: i32,
explosion_fx_: u32,
damage_scale_: f32,
is_audible_: bool,
is_invisible_: bool,
camera_shake_: f32) -> ResultOfAddExplosionWithUserVfx {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut explosion_type_ = explosion_type_;
let mut explosion_fx_ = explosion_fx_;
let mut damage_scale_ = damage_scale_;
let mut is_audible_ = is_audible_;
let mut is_invisible_ = is_invisible_;
let mut camera_shake_ = camera_shake_;
        let success = sdk::natives::add_explosion_with_user_vfx(
            x_,
y_,
z_,
explosion_type_,
explosion_fx_,
damage_scale_,
is_audible_,
is_invisible_,
camera_shake_,
        );
        
        
        ResultOfAddExplosionWithUserVfx {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_number_of_fires_in_range(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOfGetNumberOfFiresInRange {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::get_number_of_fires_in_range(
            &mut native_return,
x_,
y_,
z_,
radius_,
        );
        let native_return = native_return;
        
        ResultOfGetNumberOfFiresInRange {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_explosion_active_in_area(&self, explosion_type_: i32,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOfIsExplosionActiveInArea {
    unsafe {
        let mut native_return = Default::default();
let mut explosion_type_ = explosion_type_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::is_explosion_active_in_area(
            &mut native_return,
explosion_type_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOfIsExplosionActiveInArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_script_fire(&self, x_: f32,
y_: f32,
z_: f32,
max_children_: i32,
is_gas_fire_: bool) -> ResultOfStartScriptFire {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut max_children_ = max_children_;
let mut is_gas_fire_ = is_gas_fire_;
        let success = sdk::natives::start_script_fire(
            &mut native_return,
x_,
y_,
z_,
max_children_,
is_gas_fire_,
        );
        let native_return = native_return;
        
        ResultOfStartScriptFire {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_entity_fire(&self, entity_: u32) -> ResultOfStopEntityFire {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::stop_entity_fire(
            entity_,
        );
        
        
        ResultOfStopEntityFire {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_script_fire(&self, fire_handle_: i32) -> ResultOfRemoveScriptFire {
    unsafe {
        let mut fire_handle_ = fire_handle_;
        let success = sdk::natives::remove_script_fire(
            fire_handle_,
        );
        
        
        ResultOfRemoveScriptFire {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_flammability_multiplier(&self, p0_: f32) -> ResultOfSetFlammabilityMultiplier {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_flammability_multiplier(
            p0_,
        );
        
        
        ResultOfSetFlammabilityMultiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_explosion_in_angled_area(&self, explosion_type_: i32,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32) -> ResultOfIsExplosionInAngledArea {
    unsafe {
        let mut native_return = Default::default();
let mut explosion_type_ = explosion_type_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
        let success = sdk::natives::is_explosion_in_angled_area(
            &mut native_return,
explosion_type_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
        );
        let native_return = native_return;
        
        ResultOfIsExplosionInAngledArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_explosion_in_sphere(&self, explosion_type_: i32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOfIsExplosionInSphere {
    unsafe {
        let mut native_return = Default::default();
let mut explosion_type_ = explosion_type_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::is_explosion_in_sphere(
            &mut native_return,
explosion_type_,
x_,
y_,
z_,
radius_,
        );
        let native_return = native_return;
        
        ResultOfIsExplosionInSphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_owner_of_explosion_in_sphere(&self, explosion_type_: i32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOfGetOwnerOfExplosionInSphere {
    unsafe {
        let mut native_return = Default::default();
let mut explosion_type_ = explosion_type_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::get_owner_of_explosion_in_sphere(
            &mut native_return,
explosion_type_,
x_,
y_,
z_,
radius_,
        );
        let native_return = native_return;
        
        ResultOfGetOwnerOfExplosionInSphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_explosion(&self, x_: f32,
y_: f32,
z_: f32,
explosion_type_: i32,
damage_scale_: f32,
is_audible_: bool,
is_invisible_: bool,
camera_shake_: f32,
no_damage_: bool) -> ResultOfAddExplosion {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut explosion_type_ = explosion_type_;
let mut damage_scale_ = damage_scale_;
let mut is_audible_ = is_audible_;
let mut is_invisible_ = is_invisible_;
let mut camera_shake_ = camera_shake_;
let mut no_damage_ = no_damage_;
        let success = sdk::natives::add_explosion(
            x_,
y_,
z_,
explosion_type_,
damage_scale_,
is_audible_,
is_invisible_,
camera_shake_,
no_damage_,
        );
        
        
        ResultOfAddExplosion {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_entity_fire(&self, entity_: u32) -> ResultOfStartEntityFire {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::start_entity_fire(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfStartEntityFire {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_checkpoint(&self, type_: i32,
pos_x1_: f32,
pos_y1_: f32,
pos_z1_: f32,
pos_x2_: f32,
pos_y2_: f32,
pos_z2_: f32,
diameter_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32,
reserved_: i32) -> ResultOfCreateCheckpoint {
    unsafe {
        let mut native_return = Default::default();
let mut type_ = type_;
let mut pos_x1_ = pos_x1_;
let mut pos_y1_ = pos_y1_;
let mut pos_z1_ = pos_z1_;
let mut pos_x2_ = pos_x2_;
let mut pos_y2_ = pos_y2_;
let mut pos_z2_ = pos_z2_;
let mut diameter_ = diameter_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
let mut reserved_ = reserved_;
        let success = sdk::natives::create_checkpoint(
            &mut native_return,
type_,
pos_x1_,
pos_y1_,
pos_z1_,
pos_x2_,
pos_y2_,
pos_z2_,
diameter_,
red_,
green_,
blue_,
alpha_,
reserved_,
        );
        let native_return = native_return;
        
        ResultOfCreateCheckpoint {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_streamed_texture_dict_loaded(&self, texture_dict_: Option<String>) -> ResultOfHasStreamedTextureDictLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut texture_dict_ = sdk_helpers::create_c_string_ptr(texture_dict_);
        let success = sdk::natives::has_streamed_texture_dict_loaded(
            &mut native_return,
texture_dict_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfHasStreamedTextureDictLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_procgrass_disable_ambscalescan(&self, ) -> ResultOfProcgrassDisableAmbscalescan {
    unsafe {
        
        let success = sdk::natives::procgrass_disable_ambscalescan(
            
        );
        
        
        ResultOfProcgrassDisableAmbscalescan {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_scuff_decals(&self, toggle_: bool) -> ResultOfDisableScuffDecals {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::disable_scuff_decals(
            toggle_,
        );
        
        
        ResultOfDisableScuffDecals {
            success,
            ret: (),
            
        }
    }
}

    fn native_cascade_shadows_set_dynamic_depth_value(&self, p0_: f32) -> ResultOfCascadeShadowsSetDynamicDepthValue {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::cascade_shadows_set_dynamic_depth_value(
            p0_,
        );
        
        
        ResultOfCascadeShadowsSetDynamicDepthValue {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_particle_fx_non_looped_on_entity_bone(&self, effect_name_: Option<String>,
entity_: u32,
offset_x_: f32,
offset_y_: f32,
offset_z_: f32,
rot_x_: f32,
rot_y_: f32,
rot_z_: f32,
bone_index_: i32,
scale_: f32,
axis_x_: bool,
axis_y_: bool,
axis_z_: bool) -> ResultOfStartParticleFxNonLoopedOnEntityBone {
    unsafe {
        let mut native_return = Default::default();
let mut effect_name_ = sdk_helpers::create_c_string_ptr(effect_name_);
let mut entity_ = entity_;
let mut offset_x_ = offset_x_;
let mut offset_y_ = offset_y_;
let mut offset_z_ = offset_z_;
let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
let mut bone_index_ = bone_index_;
let mut scale_ = scale_;
let mut axis_x_ = axis_x_;
let mut axis_y_ = axis_y_;
let mut axis_z_ = axis_z_;
        let success = sdk::natives::start_particle_fx_non_looped_on_entity_bone(
            &mut native_return,
effect_name_.as_ref().unwrap(),
entity_,
offset_x_,
offset_y_,
offset_z_,
rot_x_,
rot_y_,
rot_z_,
bone_index_,
scale_,
axis_x_,
axis_y_,
axis_z_,
        );
        let native_return = native_return;
        
        ResultOfStartParticleFxNonLoopedOnEntityBone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_render_shadowed_lights_with_no_shadows(&self, p0_: bool) -> ResultOfRenderShadowedLightsWithNoShadows {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::render_shadowed_lights_with_no_shadows(
            p0_,
        );
        
        
        ResultOfRenderShadowedLightsWithNoShadows {
            success,
            ret: (),
            
        }
    }
}

    fn native_cascade_shadows_init_session(&self, ) -> ResultOfCascadeShadowsInitSession {
    unsafe {
        
        let success = sdk::natives::cascade_shadows_init_session(
            
        );
        
        
        ResultOfCascadeShadowsInitSession {
            success,
            ret: (),
            
        }
    }
}

    fn native_release_bink_movie(&self, bink_movie_: i32) -> ResultOfReleaseBinkMovie {
    unsafe {
        let mut bink_movie_ = bink_movie_;
        let success = sdk::natives::release_bink_movie(
            bink_movie_,
        );
        
        
        ResultOfReleaseBinkMovie {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_vehicle_have_crew_emblem(&self, vehicle_: u32,
p1_: i32) -> ResultOfDoesVehicleHaveCrewEmblem {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::does_vehicle_have_crew_emblem(
            &mut native_return,
vehicle_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfDoesVehicleHaveCrewEmblem {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_animpostfx_stop(&self, effect_name_: Option<String>) -> ResultOfAnimpostfxStop {
    unsafe {
        let mut effect_name_ = sdk_helpers::create_c_string_ptr(effect_name_);
        let success = sdk::natives::animpostfx_stop(
            effect_name_.as_ref().unwrap(),
        );
        
        
        ResultOfAnimpostfxStop {
            success,
            ret: (),
            
        }
    }
}

    fn native_golf_trail_set_facing(&self, p0_: bool) -> ResultOfGolfTrailSetFacing {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::golf_trail_set_facing(
            p0_,
        );
        
        
        ResultOfGolfTrailSetFacing {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_debug_box(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
r_: i32,
g_: i32,
b_: i32,
alpha_: i32) -> ResultOfDrawDebugBox {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_debug_box(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
r_,
g_,
b_,
alpha_,
        );
        
        
        ResultOfDrawDebugBox {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_petrol_trail_decals(&self, ) -> ResultOfEndPetrolTrailDecals {
    unsafe {
        
        let success = sdk::natives::end_petrol_trail_decals(
            
        );
        
        
        ResultOfEndPetrolTrailDecals {
            success,
            ret: (),
            
        }
    }
}

    fn native_free_memory_for_mission_creator_photo(&self, ) -> ResultOfFreeMemoryForMissionCreatorPhoto {
    unsafe {
        
        let success = sdk::natives::free_memory_for_mission_creator_photo(
            
        );
        
        
        ResultOfFreeMemoryForMissionCreatorPhoto {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_flash(&self, p0_: f32,
p1_: f32,
fade_in_: f32,
duration_: f32,
fade_out_: f32) -> ResultOfSetFlash {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut fade_in_ = fade_in_;
let mut duration_ = duration_;
let mut fade_out_ = fade_out_;
        let success = sdk::natives::set_flash(
            p0_,
p1_,
fade_in_,
duration_,
fade_out_,
        );
        
        
        ResultOfSetFlash {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_tvshow_currently_playing(&self, video_cliphash_: u32) -> ResultOfIsTvshowCurrentlyPlaying {
    unsafe {
        let mut native_return = Default::default();
let mut video_cliphash_ = video_cliphash_;
        let success = sdk::natives::is_tvshow_currently_playing(
            &mut native_return,
video_cliphash_,
        );
        let native_return = native_return;
        
        ResultOfIsTvshowCurrentlyPlaying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_cascade_shadows_enable_freezer(&self, p0_: bool) -> ResultOfCascadeShadowsEnableFreezer {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::cascade_shadows_enable_freezer(
            p0_,
        );
        
        
        ResultOfCascadeShadowsEnableFreezer {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_status_of_save_high_quality_photo(&self, ) -> ResultOfGetStatusOfSaveHighQualityPhoto {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_status_of_save_high_quality_photo(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetStatusOfSaveHighQualityPhoto {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_scaleform_movie_filename_loaded(&self, scaleform_name_: Option<String>) -> ResultOfHasScaleformMovieFilenameLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut scaleform_name_ = sdk_helpers::create_c_string_ptr(scaleform_name_);
        let success = sdk::natives::has_scaleform_movie_filename_loaded(
            &mut native_return,
scaleform_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfHasScaleformMovieFilenameLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_seethrough_set_max_thickness(&self, thickness_: f32) -> ResultOfSeethroughSetMaxThickness {
    unsafe {
        let mut thickness_ = thickness_;
        let success = sdk::natives::seethrough_set_max_thickness(
            thickness_,
        );
        
        
        ResultOfSeethroughSetMaxThickness {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_bink_movie_time(&self, bink_movie_: i32,
progress_: f32) -> ResultOfSetBinkMovieTime {
    unsafe {
        let mut bink_movie_ = bink_movie_;
let mut progress_ = progress_;
        let success = sdk::natives::set_bink_movie_time(
            bink_movie_,
progress_,
        );
        
        
        ResultOfSetBinkMovieTime {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_particle_fx_non_looped_on_entity(&self, effect_name_: Option<String>,
entity_: u32,
offset_x_: f32,
offset_y_: f32,
offset_z_: f32,
rot_x_: f32,
rot_y_: f32,
rot_z_: f32,
scale_: f32,
axis_x_: bool,
axis_y_: bool,
axis_z_: bool) -> ResultOfStartParticleFxNonLoopedOnEntity {
    unsafe {
        let mut native_return = Default::default();
let mut effect_name_ = sdk_helpers::create_c_string_ptr(effect_name_);
let mut entity_ = entity_;
let mut offset_x_ = offset_x_;
let mut offset_y_ = offset_y_;
let mut offset_z_ = offset_z_;
let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
let mut scale_ = scale_;
let mut axis_x_ = axis_x_;
let mut axis_y_ = axis_y_;
let mut axis_z_ = axis_z_;
        let success = sdk::natives::start_particle_fx_non_looped_on_entity(
            &mut native_return,
effect_name_.as_ref().unwrap(),
entity_,
offset_x_,
offset_y_,
offset_z_,
rot_x_,
rot_y_,
rot_z_,
scale_,
axis_x_,
axis_y_,
axis_z_,
        );
        let native_return = native_return;
        
        ResultOfStartParticleFxNonLoopedOnEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_status_of_take_high_quality_photo(&self, ) -> ResultOfGetStatusOfTakeHighQualityPhoto {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_status_of_take_high_quality_photo(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetStatusOfTakeHighQualityPhoto {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_draw_scaleform_movie_fullscreen(&self, scaleform_: i32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32,
p5_: i32) -> ResultOfDrawScaleformMovieFullscreen {
    unsafe {
        let mut scaleform_ = scaleform_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
let mut p5_ = p5_;
        let success = sdk::natives::draw_scaleform_movie_fullscreen(
            scaleform_,
red_,
green_,
blue_,
alpha_,
p5_,
        );
        
        
        ResultOfDrawScaleformMovieFullscreen {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_composite_shotgun_decals(&self, toggle_: bool) -> ResultOfDisableCompositeShotgunDecals {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::disable_composite_shotgun_decals(
            toggle_,
        );
        
        
        ResultOfDisableCompositeShotgunDecals {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_particle_fx_non_looped_on_ped_bone(&self, effect_name_: Option<String>,
ped_: u32,
offset_x_: f32,
offset_y_: f32,
offset_z_: f32,
rot_x_: f32,
rot_y_: f32,
rot_z_: f32,
bone_index_: i32,
scale_: f32,
axis_x_: bool,
axis_y_: bool,
axis_z_: bool) -> ResultOfStartParticleFxNonLoopedOnPedBone {
    unsafe {
        let mut native_return = Default::default();
let mut effect_name_ = sdk_helpers::create_c_string_ptr(effect_name_);
let mut ped_ = ped_;
let mut offset_x_ = offset_x_;
let mut offset_y_ = offset_y_;
let mut offset_z_ = offset_z_;
let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
let mut bone_index_ = bone_index_;
let mut scale_ = scale_;
let mut axis_x_ = axis_x_;
let mut axis_y_ = axis_y_;
let mut axis_z_ = axis_z_;
        let success = sdk::natives::start_particle_fx_non_looped_on_ped_bone(
            &mut native_return,
effect_name_.as_ref().unwrap(),
ped_,
offset_x_,
offset_y_,
offset_z_,
rot_x_,
rot_y_,
rot_z_,
bone_index_,
scale_,
axis_x_,
axis_y_,
axis_z_,
        );
        let native_return = native_return;
        
        ResultOfStartParticleFxNonLoopedOnPedBone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_timecycle_modifier(&self, ) -> ResultOfClearTimecycleModifier {
    unsafe {
        
        let success = sdk::natives::clear_timecycle_modifier(
            
        );
        
        
        ResultOfClearTimecycleModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_low_quality_photo_to_phone(&self, p0_: bool,
p1_: bool) -> ResultOfDrawLowQualityPhotoToPhone {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::draw_low_quality_photo_to_phone(
            p0_,
p1_,
        );
        
        
        ResultOfDrawLowQualityPhotoToPhone {
            success,
            ret: (),
            
        }
    }
}

    fn native_seethrough_set_color_near(&self, red_: i32,
green_: i32,
blue_: i32) -> ResultOfSeethroughSetColorNear {
    unsafe {
        let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
        let success = sdk::natives::seethrough_set_color_near(
            red_,
green_,
blue_,
        );
        
        
        ResultOfSeethroughSetColorNear {
            success,
            ret: (),
            
        }
    }
}

    fn native_ui3dscene_make_pushed_preset_persistent(&self, toggle_: bool) -> ResultOfUi3dsceneMakePushedPresetPersistent {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::ui3dscene_make_pushed_preset_persistent(
            toggle_,
        );
        
        
        ResultOfUi3dsceneMakePushedPresetPersistent {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_tv_audio_frontend(&self, toggle_: bool) -> ResultOfSetTvAudioFrontend {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_tv_audio_frontend(
            toggle_,
        );
        
        
        ResultOfSetTvAudioFrontend {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_scaleform_movie(&self, scaleform_name_: Option<String>) -> ResultOfRequestScaleformMovie {
    unsafe {
        let mut native_return = Default::default();
let mut scaleform_name_ = sdk_helpers::create_c_string_ptr(scaleform_name_);
        let success = sdk::natives::request_scaleform_movie(
            &mut native_return,
scaleform_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfRequestScaleformMovie {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_artificial_lights_state(&self, state_: bool) -> ResultOfSetArtificialLightsState {
    unsafe {
        let mut state_ = state_;
        let success = sdk::natives::set_artificial_lights_state(
            state_,
        );
        
        
        ResultOfSetArtificialLightsState {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_oil_decal(&self, x_: f32,
y_: f32,
z_: f32,
ground_lvl_: f32,
width_: f32,
transparency_: f32) -> ResultOfAddOilDecal {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut ground_lvl_ = ground_lvl_;
let mut width_ = width_;
let mut transparency_ = transparency_;
        let success = sdk::natives::add_oil_decal(
            &mut native_return,
x_,
y_,
z_,
ground_lvl_,
width_,
transparency_,
        );
        let native_return = native_return;
        
        ResultOfAddOilDecal {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_golf_trail_set_colour(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32,
p8_: i32,
p9_: i32,
p10_: i32,
p11_: i32) -> ResultOfGolfTrailSetColour {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
        let success = sdk::natives::golf_trail_set_colour(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
p11_,
        );
        
        
        ResultOfGolfTrailSetColour {
            success,
            ret: (),
            
        }
    }
}

    fn native_procgrass_enable_ambscalescan(&self, ) -> ResultOfProcgrassEnableAmbscalescan {
    unsafe {
        
        let success = sdk::natives::procgrass_enable_ambscalescan(
            
        );
        
        
        ResultOfProcgrassEnableAmbscalescan {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_all_tcmodifier_overrides(&self, p0_: Option<String>) -> ResultOfClearAllTcmodifierOverrides {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::clear_all_tcmodifier_overrides(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOfClearAllTcmodifierOverrides {
            success,
            ret: (),
            
        }
    }
}

    fn native_override_interior_smoke_level(&self, level_: f32) -> ResultOfOverrideInteriorSmokeLevel {
    unsafe {
        let mut level_ = level_;
        let success = sdk::natives::override_interior_smoke_level(
            level_,
        );
        
        
        ResultOfOverrideInteriorSmokeLevel {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_procobj_creation(&self, ) -> ResultOfDisableProcobjCreation {
    unsafe {
        
        let success = sdk::natives::disable_procobj_creation(
            
        );
        
        
        ResultOfDisableProcobjCreation {
            success,
            ret: (),
            
        }
    }
}

    fn native_seethrough_set_highlight_noise(&self, noise_: f32) -> ResultOfSeethroughSetHighlightNoise {
    unsafe {
        let mut noise_ = noise_;
        let success = sdk::natives::seethrough_set_highlight_noise(
            noise_,
        );
        
        
        ResultOfSeethroughSetHighlightNoise {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_tracked_point_info(&self, point_: i32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOfSetTrackedPointInfo {
    unsafe {
        let mut point_ = point_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::set_tracked_point_info(
            point_,
x_,
y_,
z_,
radius_,
        );
        
        
        ResultOfSetTrackedPointInfo {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_status_of_load_mission_creator_photo(&self, p0_: shared::MemoryBufferId) -> ResultOfGetStatusOfLoadMissionCreatorPhoto {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
        let success = sdk::natives::get_status_of_load_mission_creator_photo(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfGetStatusOfLoadMissionCreatorPhoto {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_register_postfx_bullet_impact(&self, weapon_world_pos_x_: f32,
weapon_world_pos_y_: f32,
weapon_world_pos_z_: f32,
intensity_: f32) -> ResultOfRegisterPostfxBulletImpact {
    unsafe {
        let mut weapon_world_pos_x_ = weapon_world_pos_x_;
let mut weapon_world_pos_y_ = weapon_world_pos_y_;
let mut weapon_world_pos_z_ = weapon_world_pos_z_;
let mut intensity_ = intensity_;
        let success = sdk::natives::register_postfx_bullet_impact(
            weapon_world_pos_x_,
weapon_world_pos_y_,
weapon_world_pos_z_,
intensity_,
        );
        
        
        ResultOfRegisterPostfxBulletImpact {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_debug_lines_and_spheres_drawing_active(&self, enabled_: bool) -> ResultOfSetDebugLinesAndSpheresDrawingActive {
    unsafe {
        let mut enabled_ = enabled_;
        let success = sdk::natives::set_debug_lines_and_spheres_drawing_active(
            enabled_,
        );
        
        
        ResultOfSetDebugLinesAndSpheresDrawingActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_nightvision(&self, toggle_: bool) -> ResultOfSetNightvision {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_nightvision(
            toggle_,
        );
        
        
        ResultOfSetNightvision {
            success,
            ret: (),
            
        }
    }
}

    fn native_seethrough_set_hilight_intensity(&self, intensity_: f32) -> ResultOfSeethroughSetHilightIntensity {
    unsafe {
        let mut intensity_ = intensity_;
        let success = sdk::natives::seethrough_set_hilight_intensity(
            intensity_,
        );
        
        
        ResultOfSeethroughSetHilightIntensity {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_tcmodifier_override(&self, modifier_name1_: Option<String>,
modifier_name2_: Option<String>) -> ResultOfAddTcmodifierOverride {
    unsafe {
        let mut modifier_name1_ = sdk_helpers::create_c_string_ptr(modifier_name1_);
let mut modifier_name2_ = sdk_helpers::create_c_string_ptr(modifier_name2_);
        let success = sdk::natives::add_tcmodifier_override(
            modifier_name1_.as_ref().unwrap(),
modifier_name2_.as_ref().unwrap(),
        );
        
        
        ResultOfAddTcmodifierOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_particle_fx_looped_on_entity(&self, effect_name_: Option<String>,
entity_: u32,
x_offset_: f32,
y_offset_: f32,
z_offset_: f32,
x_rot_: f32,
y_rot_: f32,
z_rot_: f32,
scale_: f32,
x_axis_: bool,
y_axis_: bool,
z_axis_: bool) -> ResultOfStartParticleFxLoopedOnEntity {
    unsafe {
        let mut native_return = Default::default();
let mut effect_name_ = sdk_helpers::create_c_string_ptr(effect_name_);
let mut entity_ = entity_;
let mut x_offset_ = x_offset_;
let mut y_offset_ = y_offset_;
let mut z_offset_ = z_offset_;
let mut x_rot_ = x_rot_;
let mut y_rot_ = y_rot_;
let mut z_rot_ = z_rot_;
let mut scale_ = scale_;
let mut x_axis_ = x_axis_;
let mut y_axis_ = y_axis_;
let mut z_axis_ = z_axis_;
        let success = sdk::natives::start_particle_fx_looped_on_entity(
            &mut native_return,
effect_name_.as_ref().unwrap(),
entity_,
x_offset_,
y_offset_,
z_offset_,
x_rot_,
y_rot_,
z_rot_,
scale_,
x_axis_,
y_axis_,
z_axis_,
        );
        let native_return = native_return;
        
        ResultOfStartParticleFxLoopedOnEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_taken_photo_is_mugshot(&self, toggle_: bool) -> ResultOfSetTakenPhotoIsMugshot {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_taken_photo_is_mugshot(
            toggle_,
        );
        
        
        ResultOfSetTakenPhotoIsMugshot {
            success,
            ret: (),
            
        }
    }
}

    fn native_terraingrid_set_params(&self, x_: f32,
y_: f32,
z_: f32,
forward_x_: f32,
forward_y_: f32,
forward_z_: f32,
size_x_: f32,
size_y_: f32,
size_z_: f32,
grid_scale_: f32,
glow_intensity_: f32,
normal_height_: f32,
height_diff_: f32) -> ResultOfTerraingridSetParams {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut forward_x_ = forward_x_;
let mut forward_y_ = forward_y_;
let mut forward_z_ = forward_z_;
let mut size_x_ = size_x_;
let mut size_y_ = size_y_;
let mut size_z_ = size_z_;
let mut grid_scale_ = grid_scale_;
let mut glow_intensity_ = glow_intensity_;
let mut normal_height_ = normal_height_;
let mut height_diff_ = height_diff_;
        let success = sdk::natives::terraingrid_set_params(
            x_,
y_,
z_,
forward_x_,
forward_y_,
forward_z_,
size_x_,
size_y_,
size_z_,
grid_scale_,
glow_intensity_,
normal_height_,
height_diff_,
        );
        
        
        ResultOfTerraingridSetParams {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_transition_out_of_timecycle_modifier(&self, strength_: f32) -> ResultOfSetTransitionOutOfTimecycleModifier {
    unsafe {
        let mut strength_ = strength_;
        let success = sdk::natives::set_transition_out_of_timecycle_modifier(
            strength_,
        );
        
        
        ResultOfSetTransitionOutOfTimecycleModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_scaleform_movie3d_solid(&self, scaleform_: i32,
pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
rot_x_: f32,
rot_y_: f32,
rot_z_: f32,
p7_: f32,
p8_: f32,
p9_: f32,
scale_x_: f32,
scale_y_: f32,
scale_z_: f32,
rotation_order_: i32) -> ResultOfDrawScaleformMovie3dSolid {
    unsafe {
        let mut scaleform_ = scaleform_;
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut scale_x_ = scale_x_;
let mut scale_y_ = scale_y_;
let mut scale_z_ = scale_z_;
let mut rotation_order_ = rotation_order_;
        let success = sdk::natives::draw_scaleform_movie3d_solid(
            scaleform_,
pos_x_,
pos_y_,
pos_z_,
rot_x_,
rot_y_,
rot_z_,
p7_,
p8_,
p9_,
scale_x_,
scale_y_,
scale_z_,
rotation_order_,
        );
        
        
        ResultOfDrawScaleformMovie3dSolid {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_scaleform_movie_as_no_longer_needed(&self, scaleform_handle_: i32) -> ResultOfSetScaleformMovieAsNoLongerNeeded {
    unsafe {
        let mut scaleform_handle_ = scaleform_handle_;
        let success = sdk::natives::set_scaleform_movie_as_no_longer_needed(
            &mut scaleform_handle_,
        );
        let scaleform_handle_ = scaleform_handle_;
        
        ResultOfSetScaleformMovieAsNoLongerNeeded {
            success,
            ret: (),
            scaleform_handle_
        }
    }
}

    fn native_set_entity_icon_color(&self, entity_: u32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOfSetEntityIconColor {
    unsafe {
        let mut entity_ = entity_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::set_entity_icon_color(
            entity_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOfSetEntityIconColor {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_take_mission_creator_photo(&self, ) -> ResultOfBeginTakeMissionCreatorPhoto {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::begin_take_mission_creator_photo(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfBeginTakeMissionCreatorPhoto {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_particle_fx_non_looped_emitter_size(&self, p0_: f32,
p1_: f32,
scale_: f32) -> ResultOfSetParticleFxNonLoopedEmitterSize {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut scale_ = scale_;
        let success = sdk::natives::set_particle_fx_non_looped_emitter_size(
            p0_,
p1_,
scale_,
        );
        
        
        ResultOfSetParticleFxNonLoopedEmitterSize {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_playlist_on_channel(&self, tv_channel_: i32,
p1_: i32) -> ResultOfIsPlaylistOnChannel {
    unsafe {
        let mut native_return = Default::default();
let mut tv_channel_ = tv_channel_;
let mut p1_ = p1_;
        let success = sdk::natives::is_playlist_on_channel(
            &mut native_return,
tv_channel_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfIsPlaylistOnChannel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_tv_volume(&self, ) -> ResultOfGetTvVolume {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_tv_volume(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetTvVolume {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_tv_channel_playlist_at_hour(&self, tv_channel_: i32,
playlist_name_: Option<String>,
hour_: i32) -> ResultOfSetTvChannelPlaylistAtHour {
    unsafe {
        let mut tv_channel_ = tv_channel_;
let mut playlist_name_ = sdk_helpers::create_c_string_ptr(playlist_name_);
let mut hour_ = hour_;
        let success = sdk::natives::set_tv_channel_playlist_at_hour(
            tv_channel_,
playlist_name_.as_ref().unwrap(),
hour_,
        );
        
        
        ResultOfSetTvChannelPlaylistAtHour {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_usingnightvision(&self, ) -> ResultOfGetUsingnightvision {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_usingnightvision(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetUsingnightvision {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_animpostfx_play(&self, effect_name_: Option<String>,
duration_: i32,
looped_: bool) -> ResultOfAnimpostfxPlay {
    unsafe {
        let mut effect_name_ = sdk_helpers::create_c_string_ptr(effect_name_);
let mut duration_ = duration_;
let mut looped_ = looped_;
        let success = sdk::natives::animpostfx_play(
            effect_name_.as_ref().unwrap(),
duration_,
looped_,
        );
        
        
        ResultOfAnimpostfxPlay {
            success,
            ret: (),
            
        }
    }
}

    fn native_dont_render_in_game_ui(&self, p0_: bool) -> ResultOfDontRenderInGameUi {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::dont_render_in_game_ui(
            p0_,
        );
        
        
        ResultOfDontRenderInGameUi {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_backfaceculling(&self, toggle_: bool) -> ResultOfSetBackfaceculling {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_backfaceculling(
            toggle_,
        );
        
        
        ResultOfSetBackfaceculling {
            success,
            ret: (),
            
        }
    }
}

    fn native_golf_trail_set_radius(&self, p0_: f32,
p1_: f32,
p2_: f32) -> ResultOfGolfTrailSetRadius {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::golf_trail_set_radius(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfGolfTrailSetRadius {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_particle_fx_non_looped_at_coord(&self, effect_name_: Option<String>,
x_pos_: f32,
y_pos_: f32,
z_pos_: f32,
x_rot_: f32,
y_rot_: f32,
z_rot_: f32,
scale_: f32,
x_axis_: bool,
y_axis_: bool,
z_axis_: bool) -> ResultOfStartParticleFxNonLoopedAtCoord {
    unsafe {
        let mut native_return = Default::default();
let mut effect_name_ = sdk_helpers::create_c_string_ptr(effect_name_);
let mut x_pos_ = x_pos_;
let mut y_pos_ = y_pos_;
let mut z_pos_ = z_pos_;
let mut x_rot_ = x_rot_;
let mut y_rot_ = y_rot_;
let mut z_rot_ = z_rot_;
let mut scale_ = scale_;
let mut x_axis_ = x_axis_;
let mut y_axis_ = y_axis_;
let mut z_axis_ = z_axis_;
        let success = sdk::natives::start_particle_fx_non_looped_at_coord(
            &mut native_return,
effect_name_.as_ref().unwrap(),
x_pos_,
y_pos_,
z_pos_,
x_rot_,
y_rot_,
z_rot_,
scale_,
x_axis_,
y_axis_,
z_axis_,
        );
        let native_return = native_return;
        
        ResultOfStartParticleFxNonLoopedAtCoord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_cascade_shadows_set_bound_position(&self, p0_: i32) -> ResultOfCascadeShadowsSetBoundPosition {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::cascade_shadows_set_bound_position(
            p0_,
        );
        
        
        ResultOfCascadeShadowsSetBoundPosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_cascade_shadows_set_screen_size_check_enabled(&self, p0_: bool) -> ResultOfCascadeShadowsSetScreenSizeCheckEnabled {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::cascade_shadows_set_screen_size_check_enabled(
            p0_,
        );
        
        
        ResultOfCascadeShadowsSetScreenSizeCheckEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_non_looped_colour(&self, r_: f32,
g_: f32,
b_: f32) -> ResultOfSetParticleFxNonLoopedColour {
    unsafe {
        let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::set_particle_fx_non_looped_colour(
            r_,
g_,
b_,
        );
        
        
        ResultOfSetParticleFxNonLoopedColour {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_checkpoint_cylinder_height(&self, checkpoint_: i32,
near_height_: f32,
far_height_: f32,
radius_: f32) -> ResultOfSetCheckpointCylinderHeight {
    unsafe {
        let mut checkpoint_ = checkpoint_;
let mut near_height_ = near_height_;
let mut far_height_ = far_height_;
let mut radius_ = radius_;
        let success = sdk::natives::set_checkpoint_cylinder_height(
            checkpoint_,
near_height_,
far_height_,
radius_,
        );
        
        
        ResultOfSetCheckpointCylinderHeight {
            success,
            ret: (),
            
        }
    }
}

    fn native_cascade_shadows_clear_shadow_sample_type(&self, ) -> ResultOfCascadeShadowsClearShadowSampleType {
    unsafe {
        
        let success = sdk::natives::cascade_shadows_clear_shadow_sample_type(
            
        );
        
        
        ResultOfCascadeShadowsClearShadowSampleType {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_petrol_decals_recycling_this_frame(&self, ) -> ResultOfSetDisablePetrolDecalsRecyclingThisFrame {
    unsafe {
        
        let success = sdk::natives::set_disable_petrol_decals_recycling_this_frame(
            
        );
        
        
        ResultOfSetDisablePetrolDecalsRecyclingThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_bullet_impact_scale(&self, scale_: f32) -> ResultOfSetParticleFxBulletImpactScale {
    unsafe {
        let mut scale_ = scale_;
        let success = sdk::natives::set_particle_fx_bullet_impact_scale(
            scale_,
        );
        
        
        ResultOfSetParticleFxBulletImpactScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_phonephotoeditor_set_frame_txd(&self, texture_dict_: Option<String>,
p1_: bool) -> ResultOfPhonephotoeditorSetFrameTxd {
    unsafe {
        let mut native_return = Default::default();
let mut texture_dict_ = sdk_helpers::create_c_string_ptr(texture_dict_);
let mut p1_ = p1_;
        let success = sdk::natives::phonephotoeditor_set_frame_txd(
            &mut native_return,
texture_dict_.as_ref().unwrap(),
p1_,
        );
        let native_return = native_return;
        
        ResultOfPhonephotoeditorSetFrameTxd {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_draw_marker(&self, type_: i32,
pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
dir_x_: f32,
dir_y_: f32,
dir_z_: f32,
rot_x_: f32,
rot_y_: f32,
rot_z_: f32,
scale_x_: f32,
scale_y_: f32,
scale_z_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32,
bob_up_and_down_: bool,
face_camera_: bool,
p19_: i32,
rotate_: bool,
texture_dict_: Option<String>,
texture_name_: Option<String>,
draw_on_ents_: bool) -> ResultOfDrawMarker {
    unsafe {
        let mut type_ = type_;
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut dir_x_ = dir_x_;
let mut dir_y_ = dir_y_;
let mut dir_z_ = dir_z_;
let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
let mut scale_x_ = scale_x_;
let mut scale_y_ = scale_y_;
let mut scale_z_ = scale_z_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
let mut bob_up_and_down_ = bob_up_and_down_;
let mut face_camera_ = face_camera_;
let mut p19_ = p19_;
let mut rotate_ = rotate_;
let mut texture_dict_ = sdk_helpers::create_c_string_ptr(texture_dict_);
let mut texture_name_ = sdk_helpers::create_c_string_ptr(texture_name_);
let mut draw_on_ents_ = draw_on_ents_;
        let success = sdk::natives::draw_marker(
            type_,
pos_x_,
pos_y_,
pos_z_,
dir_x_,
dir_y_,
dir_z_,
rot_x_,
rot_y_,
rot_z_,
scale_x_,
scale_y_,
scale_z_,
red_,
green_,
blue_,
alpha_,
bob_up_and_down_,
face_camera_,
p19_,
rotate_,
texture_dict_.as_ref().unwrap(),
texture_name_.as_ref().unwrap(),
draw_on_ents_,
        );
        
        
        ResultOfDrawMarker {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_textured_poly(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
x3_: f32,
y3_: f32,
z3_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32,
texture_dict_: Option<String>,
texture_name_: Option<String>,
u1_: f32,
v1_: f32,
w1_: f32,
u2_: f32,
v2_: f32,
w2_: f32,
u3_: f32,
v3_: f32,
w3_: f32) -> ResultOfDrawTexturedPoly {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut x3_ = x3_;
let mut y3_ = y3_;
let mut z3_ = z3_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
let mut texture_dict_ = sdk_helpers::create_c_string_ptr(texture_dict_);
let mut texture_name_ = sdk_helpers::create_c_string_ptr(texture_name_);
let mut u1_ = u1_;
let mut v1_ = v1_;
let mut w1_ = w1_;
let mut u2_ = u2_;
let mut v2_ = v2_;
let mut w2_ = w2_;
let mut u3_ = u3_;
let mut v3_ = v3_;
let mut w3_ = w3_;
        let success = sdk::natives::draw_textured_poly(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
x3_,
y3_,
z3_,
red_,
green_,
blue_,
alpha_,
texture_dict_.as_ref().unwrap(),
texture_name_.as_ref().unwrap(),
u1_,
v1_,
w1_,
u2_,
v2_,
w2_,
u3_,
v3_,
w3_,
        );
        
        
        ResultOfDrawTexturedPoly {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_tv_volume(&self, volume_: f32) -> ResultOfSetTvVolume {
    unsafe {
        let mut volume_ = volume_;
        let success = sdk::natives::set_tv_volume(
            volume_,
        );
        
        
        ResultOfSetTvVolume {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_particle_fx_shootout_boat(&self, ) -> ResultOfClearParticleFxShootoutBoat {
    unsafe {
        
        let success = sdk::natives::clear_particle_fx_shootout_boat(
            
        );
        
        
        ResultOfClearParticleFxShootoutBoat {
            success,
            ret: (),
            
        }
    }
}

    fn native_override_interior_smoke_name(&self, name_: Option<String>) -> ResultOfOverrideInteriorSmokeName {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::override_interior_smoke_name(
            name_.as_ref().unwrap(),
        );
        
        
        ResultOfOverrideInteriorSmokeName {
            success,
            ret: (),
            
        }
    }
}

    fn native_queue_operation_to_create_sorted_list_of_photos(&self, p0_: i32) -> ResultOfQueueOperationToCreateSortedListOfPhotos {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::queue_operation_to_create_sorted_list_of_photos(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfQueueOperationToCreateSortedListOfPhotos {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_particle_fx_slipstream_lodrange_scale(&self, scale_: f32) -> ResultOfSetParticleFxSlipstreamLodrangeScale {
    unsafe {
        let mut scale_ = scale_;
        let success = sdk::natives::set_particle_fx_slipstream_lodrange_scale(
            scale_,
        );
        
        
        ResultOfSetParticleFxSlipstreamLodrangeScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_sprite_named_rendertarget(&self, texture_dict_: Option<String>,
texture_name_: Option<String>,
screen_x_: f32,
screen_y_: f32,
width_: f32,
height_: f32,
heading_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32,
p11_: i32) -> ResultOfDrawSpriteNamedRendertarget {
    unsafe {
        let mut texture_dict_ = sdk_helpers::create_c_string_ptr(texture_dict_);
let mut texture_name_ = sdk_helpers::create_c_string_ptr(texture_name_);
let mut screen_x_ = screen_x_;
let mut screen_y_ = screen_y_;
let mut width_ = width_;
let mut height_ = height_;
let mut heading_ = heading_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
let mut p11_ = p11_;
        let success = sdk::natives::draw_sprite_named_rendertarget(
            texture_dict_.as_ref().unwrap(),
texture_name_.as_ref().unwrap(),
screen_x_,
screen_y_,
width_,
height_,
heading_,
red_,
green_,
blue_,
alpha_,
p11_,
        );
        
        
        ResultOfDrawSpriteNamedRendertarget {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_moon_cycle_override(&self, ) -> ResultOfDisableMoonCycleOverride {
    unsafe {
        
        let success = sdk::natives::disable_moon_cycle_override(
            
        );
        
        
        ResultOfDisableMoonCycleOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_moon_cycle_override(&self, strength_: f32) -> ResultOfEnableMoonCycleOverride {
    unsafe {
        let mut strength_ = strength_;
        let success = sdk::natives::enable_moon_cycle_override(
            strength_,
        );
        
        
        ResultOfEnableMoonCycleOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_procgrass_is_cullsphere_enabled(&self, handle_: i32) -> ResultOfProcgrassIsCullsphereEnabled {
    unsafe {
        let mut native_return = Default::default();
let mut handle_ = handle_;
        let success = sdk::natives::procgrass_is_cullsphere_enabled(
            &mut native_return,
handle_,
        );
        let native_return = native_return;
        
        ResultOfProcgrassIsCullsphereEnabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_timecycle_modifier(&self, modifier_name_: Option<String>) -> ResultOfSetTimecycleModifier {
    unsafe {
        let mut modifier_name_ = sdk_helpers::create_c_string_ptr(modifier_name_);
        let success = sdk::natives::set_timecycle_modifier(
            modifier_name_.as_ref().unwrap(),
        );
        
        
        ResultOfSetTimecycleModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_sprite_arx(&self, texture_dict_: Option<String>,
texture_name_: Option<String>,
x_: f32,
y_: f32,
width_: f32,
height_: f32,
p6_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32,
p11_: i32,
p12_: i32) -> ResultOfDrawSpriteArx {
    unsafe {
        let mut texture_dict_ = sdk_helpers::create_c_string_ptr(texture_dict_);
let mut texture_name_ = sdk_helpers::create_c_string_ptr(texture_name_);
let mut x_ = x_;
let mut y_ = y_;
let mut width_ = width_;
let mut height_ = height_;
let mut p6_ = p6_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
let mut p11_ = p11_;
let mut p12_ = p12_;
        let success = sdk::natives::draw_sprite_arx(
            texture_dict_.as_ref().unwrap(),
texture_name_.as_ref().unwrap(),
x_,
y_,
width_,
height_,
p6_,
red_,
green_,
blue_,
alpha_,
p11_,
p12_,
        );
        
        
        ResultOfDrawSpriteArx {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_scaleform_movie_method_return_value_int(&self, method_return_: i32) -> ResultOfGetScaleformMovieMethodReturnValueInt {
    unsafe {
        let mut native_return = Default::default();
let mut method_return_ = method_return_;
        let success = sdk::natives::get_scaleform_movie_method_return_value_int(
            &mut native_return,
method_return_,
        );
        let native_return = native_return;
        
        ResultOfGetScaleformMovieMethodReturnValueInt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_petrol_decal_in_range(&self, x_coord_: f32,
y_coord_: f32,
z_coord_: f32,
radius_: f32) -> ResultOfGetIsPetrolDecalInRange {
    unsafe {
        let mut native_return = Default::default();
let mut x_coord_ = x_coord_;
let mut y_coord_ = y_coord_;
let mut z_coord_ = z_coord_;
let mut radius_ = radius_;
        let success = sdk::natives::get_is_petrol_decal_in_range(
            &mut native_return,
x_coord_,
y_coord_,
z_coord_,
radius_,
        );
        let native_return = native_return;
        
        ResultOfGetIsPetrolDecalInRange {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_active_scaleform_movie_deleting(&self, val_: i32) -> ResultOfIsActiveScaleformMovieDeleting {
    unsafe {
        let mut native_return = Default::default();
let mut val_ = val_;
        let success = sdk::natives::is_active_scaleform_movie_deleting(
            &mut native_return,
val_,
        );
        let native_return = native_return;
        
        ResultOfIsActiveScaleformMovieDeleting {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_grassbatch_disable_flattening(&self, ) -> ResultOfGrassbatchDisableFlattening {
    unsafe {
        
        let success = sdk::natives::grassbatch_disable_flattening(
            
        );
        
        
        ResultOfGrassbatchDisableFlattening {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_current_tv_clip_namehash(&self, ) -> ResultOfGetCurrentTvClipNamehash {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_current_tv_clip_namehash(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetCurrentTvClipNamehash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_widescreen(&self, ) -> ResultOfGetIsWidescreen {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_widescreen(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetIsWidescreen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_golf_trail_set_path(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: f32,
p8_: bool) -> ResultOfGolfTrailSetPath {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::golf_trail_set_path(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
        );
        
        
        ResultOfGolfTrailSetPath {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_decal_wash_level(&self, decal_: i32) -> ResultOfGetDecalWashLevel {
    unsafe {
        let mut native_return = Default::default();
let mut decal_ = decal_;
        let success = sdk::natives::get_decal_wash_level(
            &mut native_return,
decal_,
        );
        let native_return = native_return;
        
        ResultOfGetDecalWashLevel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_scaleform_movie_to_use_large_rt(&self, scaleform_handle_: i32,
toggle_: bool) -> ResultOfSetScaleformMovieToUseLargeRt {
    unsafe {
        let mut scaleform_handle_ = scaleform_handle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_scaleform_movie_to_use_large_rt(
            scaleform_handle_,
toggle_,
        );
        
        
        ResultOfSetScaleformMovieToUseLargeRt {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_bink_movie(&self, name_: Option<String>) -> ResultOfSetBinkMovie {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::set_bink_movie(
            &mut native_return,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfSetBinkMovie {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_free_memory_for_mission_creator_photo_preview(&self, ) -> ResultOfFreeMemoryForMissionCreatorPhotoPreview {
    unsafe {
        
        let success = sdk::natives::free_memory_for_mission_creator_photo_preview(
            
        );
        
        
        ResultOfFreeMemoryForMissionCreatorPhotoPreview {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_maximum_number_of_photos(&self, ) -> ResultOfGetMaximumNumberOfPhotos {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_maximum_number_of_photos(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetMaximumNumberOfPhotos {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_screen_coord_from_world_coord(&self, world_x_: f32,
world_y_: f32,
world_z_: f32,
screen_x_: f32,
screen_y_: f32) -> ResultOfGetScreenCoordFromWorldCoord {
    unsafe {
        let mut native_return = Default::default();
let mut world_x_ = world_x_;
let mut world_y_ = world_y_;
let mut world_z_ = world_z_;
let mut screen_x_ = screen_x_;
let mut screen_y_ = screen_y_;
        let success = sdk::natives::get_screen_coord_from_world_coord(
            &mut native_return,
&mut screen_x_,
&mut screen_y_,
world_x_,
world_y_,
world_z_,
        );
        let native_return = native_return;
let screen_x_ = screen_x_;
let screen_y_ = screen_y_;
        
        ResultOfGetScreenCoordFromWorldCoord {
            success,
            ret: native_return,
            screen_x_,
screen_y_
        }
    }
}

    fn native_get_texture_resolution(&self, texture_dict_: Option<String>,
texture_name_: Option<String>) -> ResultOfGetTextureResolution {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut texture_dict_ = sdk_helpers::create_c_string_ptr(texture_dict_);
let mut texture_name_ = sdk_helpers::create_c_string_ptr(texture_name_);
        let success = sdk::natives::get_texture_resolution(
            native_return.pin_mut(),
texture_dict_.as_ref().unwrap(),
texture_name_.as_ref().unwrap(),
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetTextureResolution {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_requestingnightvision(&self, ) -> ResultOfGetRequestingnightvision {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_requestingnightvision(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetRequestingnightvision {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_end_text_command_scaleform_string(&self, ) -> ResultOfEndTextCommandScaleformString {
    unsafe {
        
        let success = sdk::natives::end_text_command_scaleform_string(
            
        );
        
        
        ResultOfEndTextCommandScaleformString {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_occlusion_this_frame(&self, ) -> ResultOfDisableOcclusionThisFrame {
    unsafe {
        
        let success = sdk::natives::disable_occlusion_this_frame(
            
        );
        
        
        ResultOfDisableOcclusionThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_animpostfx_is_running(&self, effect_name_: Option<String>) -> ResultOfAnimpostfxIsRunning {
    unsafe {
        let mut native_return = Default::default();
let mut effect_name_ = sdk_helpers::create_c_string_ptr(effect_name_);
        let success = sdk::natives::animpostfx_is_running(
            &mut native_return,
effect_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfAnimpostfxIsRunning {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_cascade_shadows_set_split_z_exp_weight(&self, p0_: f32) -> ResultOfCascadeShadowsSetSplitZexpWeight {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::cascade_shadows_set_split_z_exp_weight(
            p0_,
        );
        
        
        ResultOfCascadeShadowsSetSplitZexpWeight {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_debug_text(&self, text_: Option<String>,
x_: f32,
y_: f32,
z_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOfDrawDebugText {
    unsafe {
        let mut text_ = sdk_helpers::create_c_string_ptr(text_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_debug_text(
            text_.as_ref().unwrap(),
x_,
y_,
z_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOfDrawDebugText {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_light_override_max_intensity_scale(&self, ) -> ResultOfGetLightOverrideMaxIntensityScale {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_light_override_max_intensity_scale(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetLightOverrideMaxIntensityScale {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_draw_rect(&self, x_: f32,
y_: f32,
width_: f32,
height_: f32,
r_: i32,
g_: i32,
b_: i32,
a_: i32,
p8_: bool) -> ResultOfDrawRect {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut width_ = width_;
let mut height_ = height_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut a_ = a_;
let mut p8_ = p8_;
        let success = sdk::natives::draw_rect(
            x_,
y_,
width_,
height_,
r_,
g_,
b_,
a_,
p8_,
        );
        
        
        ResultOfDrawRect {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_transition_timecycle_modifier(&self, modifier_name_: Option<String>,
transition_: f32) -> ResultOfSetTransitionTimecycleModifier {
    unsafe {
        let mut modifier_name_ = sdk_helpers::create_c_string_ptr(modifier_name_);
let mut transition_ = transition_;
        let success = sdk::natives::set_transition_timecycle_modifier(
            modifier_name_.as_ref().unwrap(),
transition_,
        );
        
        
        ResultOfSetTransitionTimecycleModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_checkpoint_direction(&self, checkpoint_: i32,
pos_x_: f32,
pos_y_: f32,
pos_z_: f32) -> ResultOfSetCheckpointDirection {
    unsafe {
        let mut checkpoint_ = checkpoint_;
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
        let success = sdk::natives::set_checkpoint_direction(
            checkpoint_,
pos_x_,
pos_y_,
pos_z_,
        );
        
        
        ResultOfSetCheckpointDirection {
            success,
            ret: (),
            
        }
    }
}

    fn native_pop_timecycle_modifier(&self, ) -> ResultOfPopTimecycleModifier {
    unsafe {
        
        let success = sdk::natives::pop_timecycle_modifier(
            
        );
        
        
        ResultOfPopTimecycleModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_save_high_quality_photo(&self, unused_: i32) -> ResultOfSaveHighQualityPhoto {
    unsafe {
        let mut native_return = Default::default();
let mut unused_ = unused_;
        let success = sdk::natives::save_high_quality_photo(
            &mut native_return,
unused_,
        );
        let native_return = native_return;
        
        ResultOfSaveHighQualityPhoto {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_load_high_quality_photo_status(&self, p0_: i32) -> ResultOfGetLoadHighQualityPhotoStatus {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_load_high_quality_photo_status(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfGetLoadHighQualityPhotoStatus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_vehicle_crew_emblem(&self, vehicle_: u32,
ped_: u32,
bone_index_: i32,
x1_: f32,
x2_: f32,
x3_: f32,
y1_: f32,
y2_: f32,
y3_: f32,
z1_: f32,
z2_: f32,
z3_: f32,
scale_: f32,
p13_: i32,
alpha_: i32) -> ResultOfAddVehicleCrewEmblem {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut ped_ = ped_;
let mut bone_index_ = bone_index_;
let mut x1_ = x1_;
let mut x2_ = x2_;
let mut x3_ = x3_;
let mut y1_ = y1_;
let mut y2_ = y2_;
let mut y3_ = y3_;
let mut z1_ = z1_;
let mut z2_ = z2_;
let mut z3_ = z3_;
let mut scale_ = scale_;
let mut p13_ = p13_;
let mut alpha_ = alpha_;
        let success = sdk::natives::add_vehicle_crew_emblem(
            &mut native_return,
vehicle_,
ped_,
bone_index_,
x1_,
x2_,
x3_,
y1_,
y2_,
y3_,
z1_,
z2_,
z3_,
scale_,
p13_,
alpha_,
        );
        let native_return = native_return;
        
        ResultOfAddVehicleCrewEmblem {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_seethrough_get_max_thickness(&self, ) -> ResultOfSeethroughGetMaxThickness {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::seethrough_get_max_thickness(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfSeethroughGetMaxThickness {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_override_nightvision_light_range(&self, p0_: f32) -> ResultOfOverrideNightvisionLightRange {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::override_nightvision_light_range(
            p0_,
        );
        
        
        ResultOfOverrideNightvisionLightRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_checkpoint_inside_cylinder_scale(&self, checkpoint_: i32,
scale_: f32) -> ResultOfSetCheckpointInsideCylinderScale {
    unsafe {
        let mut checkpoint_ = checkpoint_;
let mut scale_ = scale_;
        let success = sdk::natives::set_checkpoint_inside_cylinder_scale(
            checkpoint_,
scale_,
        );
        
        
        ResultOfSetCheckpointInsideCylinderScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_usingseethrough(&self, ) -> ResultOfGetUsingseethrough {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_usingseethrough(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetUsingseethrough {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_timecycle_transition_modifier_index(&self, ) -> ResultOfGetTimecycleTransitionModifierIndex {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_timecycle_transition_modifier_index(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetTimecycleTransitionModifierIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_decal_bullet_impact_range_scale(&self, p0_: f32) -> ResultOfSetDecalBulletImpactRangeScale {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_decal_bullet_impact_range_scale(
            p0_,
        );
        
        
        ResultOfSetDecalBulletImpactRangeScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_current_number_of_cloud_photos(&self, ) -> ResultOfGetCurrentNumberOfCloudPhotos {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_current_number_of_cloud_photos(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetCurrentNumberOfCloudPhotos {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_load_mission_creator_photo(&self, p0_: shared::MemoryBufferId,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfLoadMissionCreatorPhoto {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::load_mission_creator_photo(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfLoadMissionCreatorPhoto {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_clear_status_of_sorted_list_operation(&self, ) -> ResultOfClearStatusOfSortedListOperation {
    unsafe {
        
        let success = sdk::natives::clear_status_of_sorted_list_operation(
            
        );
        
        
        ResultOfClearStatusOfSortedListOperation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_checkpoint_inside_cylinder_height_scale(&self, checkpoint_: i32,
scale_: f32) -> ResultOfSetCheckpointInsideCylinderHeightScale {
    unsafe {
        let mut checkpoint_ = checkpoint_;
let mut scale_ = scale_;
        let success = sdk::natives::set_checkpoint_inside_cylinder_height_scale(
            checkpoint_,
scale_,
        );
        
        
        ResultOfSetCheckpointInsideCylinderHeightScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_decal_rendering_this_frame(&self, ) -> ResultOfSetDisableDecalRenderingThisFrame {
    unsafe {
        
        let success = sdk::natives::set_disable_decal_rendering_this_frame(
            
        );
        
        
        ResultOfSetDisableDecalRenderingThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_use_snow_wheel_vfx_when_unsheltered(&self, toggle_: bool) -> ResultOfUseSnowWheelVfxWhenUnsheltered {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::use_snow_wheel_vfx_when_unsheltered(
            toggle_,
        );
        
        
        ResultOfUseSnowWheelVfxWhenUnsheltered {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_petrol_decal(&self, x_: f32,
y_: f32,
z_: f32,
ground_lvl_: f32,
width_: f32,
transparency_: f32) -> ResultOfAddPetrolDecal {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut ground_lvl_ = ground_lvl_;
let mut width_ = width_;
let mut transparency_ = transparency_;
        let success = sdk::natives::add_petrol_decal(
            &mut native_return,
x_,
y_,
z_,
ground_lvl_,
width_,
transparency_,
        );
        let native_return = native_return;
        
        ResultOfAddPetrolDecal {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_extra_tcmodifier(&self, modifier_name_: Option<String>) -> ResultOfSetExtraTcmodifier {
    unsafe {
        let mut modifier_name_ = sdk_helpers::create_c_string_ptr(modifier_name_);
        let success = sdk::natives::set_extra_tcmodifier(
            modifier_name_.as_ref().unwrap(),
        );
        
        
        ResultOfSetExtraTcmodifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_call_scaleform_movie_method_with_string(&self, scaleform_: i32,
method_name_: Option<String>,
param1_: Option<String>,
param2_: Option<String>,
param3_: Option<String>,
param4_: Option<String>,
param5_: Option<String>) -> ResultOfCallScaleformMovieMethodWithString {
    unsafe {
        let mut scaleform_ = scaleform_;
let mut method_name_ = sdk_helpers::create_c_string_ptr(method_name_);
let mut param1_ = sdk_helpers::create_c_string_ptr(param1_);
let mut param2_ = sdk_helpers::create_c_string_ptr(param2_);
let mut param3_ = sdk_helpers::create_c_string_ptr(param3_);
let mut param4_ = sdk_helpers::create_c_string_ptr(param4_);
let mut param5_ = sdk_helpers::create_c_string_ptr(param5_);
        let success = sdk::natives::call_scaleform_movie_method_with_string(
            scaleform_,
method_name_.as_ref().unwrap(),
param1_.as_ref().unwrap(),
param2_.as_ref().unwrap(),
param3_.as_ref().unwrap(),
param4_.as_ref().unwrap(),
param5_.as_ref().unwrap(),
        );
        
        
        ResultOfCallScaleformMovieMethodWithString {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_scaleform_movie(&self, scaleform_handle_: i32,
x_: f32,
y_: f32,
width_: f32,
height_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32,
p9_: i32) -> ResultOfDrawScaleformMovie {
    unsafe {
        let mut scaleform_handle_ = scaleform_handle_;
let mut x_ = x_;
let mut y_ = y_;
let mut width_ = width_;
let mut height_ = height_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
let mut p9_ = p9_;
        let success = sdk::natives::draw_scaleform_movie(
            scaleform_handle_,
x_,
y_,
width_,
height_,
red_,
green_,
blue_,
alpha_,
p9_,
        );
        
        
        ResultOfDrawScaleformMovie {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_bang_scrape_lodrange_scale(&self, p0_: f32) -> ResultOfSetParticleFxBangScrapeLodrangeScale {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_particle_fx_bang_scrape_lodrange_scale(
            p0_,
        );
        
        
        ResultOfSetParticleFxBangScrapeLodrangeScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_push_timecycle_modifier(&self, ) -> ResultOfPushTimecycleModifier {
    unsafe {
        
        let success = sdk::natives::push_timecycle_modifier(
            
        );
        
        
        ResultOfPushTimecycleModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_status_of_create_mission_creator_photo_preview(&self, ) -> ResultOfGetStatusOfCreateMissionCreatorPhotoPreview {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_status_of_create_mission_creator_photo_preview(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetStatusOfCreateMissionCreatorPhotoPreview {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_wash_decals_from_vehicle(&self, vehicle_: u32,
p1_: f32) -> ResultOfWashDecalsFromVehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::wash_decals_from_vehicle(
            vehicle_,
p1_,
        );
        
        
        ResultOfWashDecalsFromVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_shadowed_spot_light(&self, pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
dir_x_: f32,
dir_y_: f32,
dir_z_: f32,
color_r_: i32,
color_g_: i32,
color_b_: i32,
distance_: f32,
brightness_: f32,
roundness_: f32,
radius_: f32,
falloff_: f32,
shadow_id_: i32) -> ResultOfDrawShadowedSpotLight {
    unsafe {
        let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut dir_x_ = dir_x_;
let mut dir_y_ = dir_y_;
let mut dir_z_ = dir_z_;
let mut color_r_ = color_r_;
let mut color_g_ = color_g_;
let mut color_b_ = color_b_;
let mut distance_ = distance_;
let mut brightness_ = brightness_;
let mut roundness_ = roundness_;
let mut radius_ = radius_;
let mut falloff_ = falloff_;
let mut shadow_id_ = shadow_id_;
        let success = sdk::natives::draw_shadowed_spot_light(
            pos_x_,
pos_y_,
pos_z_,
dir_x_,
dir_y_,
dir_z_,
color_r_,
color_g_,
color_b_,
distance_,
brightness_,
roundness_,
radius_,
falloff_,
shadow_id_,
        );
        
        
        ResultOfDrawShadowedSpotLight {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_screenblur_fade_current_time(&self, ) -> ResultOfGetScreenblurFadeCurrentTime {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_screenblur_fade_current_time(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetScreenblurFadeCurrentTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_terraingrid_set_colours(&self, low_r_: i32,
low_g_: i32,
low_b_: i32,
low_alpha_: i32,
r_: i32,
g_: i32,
b_: i32,
alpha_: i32,
high_r_: i32,
high_g_: i32,
high_b_: i32,
high_alpha_: i32) -> ResultOfTerraingridSetColours {
    unsafe {
        let mut low_r_ = low_r_;
let mut low_g_ = low_g_;
let mut low_b_ = low_b_;
let mut low_alpha_ = low_alpha_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut alpha_ = alpha_;
let mut high_r_ = high_r_;
let mut high_g_ = high_g_;
let mut high_b_ = high_b_;
let mut high_alpha_ = high_alpha_;
        let success = sdk::natives::terraingrid_set_colours(
            low_r_,
low_g_,
low_b_,
low_alpha_,
r_,
g_,
b_,
alpha_,
high_r_,
high_g_,
high_b_,
high_alpha_,
        );
        
        
        ResultOfTerraingridSetColours {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_decals_in_range(&self, x_: f32,
y_: f32,
z_: f32,
range_: f32) -> ResultOfRemoveDecalsInRange {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut range_ = range_;
        let success = sdk::natives::remove_decals_in_range(
            x_,
y_,
z_,
range_,
        );
        
        
        ResultOfRemoveDecalsInRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_skidmark_range_scale(&self, scale_: f32) -> ResultOfSetSkidmarkRangeScale {
    unsafe {
        let mut scale_ = scale_;
        let success = sdk::natives::set_skidmark_range_scale(
            scale_,
        );
        
        
        ResultOfSetSkidmarkRangeScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_procobj_creation(&self, ) -> ResultOfEnableProcobjCreation {
    unsafe {
        
        let success = sdk::natives::enable_procobj_creation(
            
        );
        
        
        ResultOfEnableProcobjCreation {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_latest_brief_string_exist(&self, p0_: i32) -> ResultOfDoesLatestBriefStringExist {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::does_latest_brief_string_exist(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfDoesLatestBriefStringExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_cascade_shadows_set_entity_tracker_scale(&self, p0_: f32) -> ResultOfCascadeShadowsSetEntityTrackerScale {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::cascade_shadows_set_entity_tracker_scale(
            p0_,
        );
        
        
        ResultOfCascadeShadowsSetEntityTrackerScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_looped_evolution(&self, ptfx_handle_: i32,
property_name_: Option<String>,
amount_: f32,
no_network_: bool) -> ResultOfSetParticleFxLoopedEvolution {
    unsafe {
        let mut ptfx_handle_ = ptfx_handle_;
let mut property_name_ = sdk_helpers::create_c_string_ptr(property_name_);
let mut amount_ = amount_;
let mut no_network_ = no_network_;
        let success = sdk::natives::set_particle_fx_looped_evolution(
            ptfx_handle_,
property_name_.as_ref().unwrap(),
amount_,
no_network_,
        );
        
        
        ResultOfSetParticleFxLoopedEvolution {
            success,
            ret: (),
            
        }
    }
}

    fn native_cascade_shadows_set_cascade_bounds_scale(&self, p0_: f32) -> ResultOfCascadeShadowsSetCascadeBoundsScale {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::cascade_shadows_set_cascade_bounds_scale(
            p0_,
        );
        
        
        ResultOfCascadeShadowsSetCascadeBoundsScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_downwash_ptfx(&self, toggle_: bool) -> ResultOfDisableDownwashPtfx {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::disable_downwash_ptfx(
            toggle_,
        );
        
        
        ResultOfDisableDownwashPtfx {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_checkpoint_decal_rot_aligned_to_camera_rot(&self, checkpoint_: i32) -> ResultOfSetCheckpointDecalRotAlignedToCameraRot {
    unsafe {
        let mut checkpoint_ = checkpoint_;
        let success = sdk::natives::set_checkpoint_decal_rot_aligned_to_camera_rot(
            checkpoint_,
        );
        
        
        ResultOfSetCheckpointDecalRotAlignedToCameraRot {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_script_gfx_draw_order(&self, draw_order_: i32) -> ResultOfSetScriptGfxDrawOrder {
    unsafe {
        let mut draw_order_ = draw_order_;
        let success = sdk::natives::set_script_gfx_draw_order(
            draw_order_,
        );
        
        
        ResultOfSetScriptGfxDrawOrder {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_grass_cull_sphere(&self, handle_: i32) -> ResultOfRemoveGrassCullSphere {
    unsafe {
        let mut handle_ = handle_;
        let success = sdk::natives::remove_grass_cull_sphere(
            handle_,
        );
        
        
        ResultOfRemoveGrassCullSphere {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_bink_movie(&self, bink_movie_: i32) -> ResultOfStopBinkMovie {
    unsafe {
        let mut bink_movie_ = bink_movie_;
        let success = sdk::natives::stop_bink_movie(
            bink_movie_,
        );
        
        
        ResultOfStopBinkMovie {
            success,
            ret: (),
            
        }
    }
}

    fn native_procgrass_disable_cullsphere(&self, handle_: i32) -> ResultOfProcgrassDisableCullsphere {
    unsafe {
        let mut handle_ = handle_;
        let success = sdk::natives::procgrass_disable_cullsphere(
            handle_,
        );
        
        
        ResultOfProcgrassDisableCullsphere {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_scaleform_movie_with_ignore_super_widescreen(&self, scaleform_name_: Option<String>) -> ResultOfRequestScaleformMovieWithIgnoreSuperWidescreen {
    unsafe {
        let mut native_return = Default::default();
let mut scaleform_name_ = sdk_helpers::create_c_string_ptr(scaleform_name_);
        let success = sdk::natives::request_scaleform_movie_with_ignore_super_widescreen(
            &mut native_return,
scaleform_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfRequestScaleformMovieWithIgnoreSuperWidescreen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_bink_should_skip(&self, bink_movie_: i32,
b_should_skip_: bool) -> ResultOfSetBinkShouldSkip {
    unsafe {
        let mut bink_movie_ = bink_movie_;
let mut b_should_skip_ = b_should_skip_;
        let success = sdk::natives::set_bink_should_skip(
            bink_movie_,
b_should_skip_,
        );
        
        
        ResultOfSetBinkShouldSkip {
            success,
            ret: (),
            
        }
    }
}

    fn native_free_memory_for_low_quality_photo(&self, ) -> ResultOfFreeMemoryForLowQualityPhoto {
    unsafe {
        
        let success = sdk::natives::free_memory_for_low_quality_photo(
            
        );
        
        
        ResultOfFreeMemoryForLowQualityPhoto {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_force_motionblur(&self, toggle_: bool) -> ResultOfSetForceMotionblur {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_force_motionblur(
            toggle_,
        );
        
        
        ResultOfSetForceMotionblur {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_line(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOfDrawLine {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_line(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOfDrawLine {
            success,
            ret: (),
            
        }
    }
}

    fn native_use_particle_fx_asset(&self, name_: Option<String>) -> ResultOfUseParticleFxAsset {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::use_particle_fx_asset(
            name_.as_ref().unwrap(),
        );
        
        
        ResultOfUseParticleFxAsset {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_scaleform_movie_to_use_system_time(&self, scaleform_: i32,
toggle_: bool) -> ResultOfSetScaleformMovieToUseSystemTime {
    unsafe {
        let mut scaleform_ = scaleform_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_scaleform_movie_to_use_system_time(
            scaleform_,
toggle_,
        );
        
        
        ResultOfSetScaleformMovieToUseSystemTime {
            success,
            ret: (),
            
        }
    }
}

    fn native_grassbatch_enable_flattening_in_sphere(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
p4_: f32,
p5_: f32,
p6_: f32) -> ResultOfGrassbatchEnableFlatteningInSphere {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::grassbatch_enable_flattening_in_sphere(
            x_,
y_,
z_,
radius_,
p4_,
p5_,
p6_,
        );
        
        
        ResultOfGrassbatchEnableFlatteningInSphere {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_script_gfx_align_position(&self, x_: f32,
y_: f32,
calculated_x_: f32,
calculated_y_: f32) -> ResultOfGetScriptGfxAlignPosition {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut calculated_x_ = calculated_x_;
let mut calculated_y_ = calculated_y_;
        let success = sdk::natives::get_script_gfx_align_position(
            &mut calculated_x_,
&mut calculated_y_,
x_,
y_,
        );
        let calculated_x_ = calculated_x_;
let calculated_y_ = calculated_y_;
        
        ResultOfGetScriptGfxAlignPosition {
            success,
            ret: (),
            calculated_x_,
calculated_y_
        }
    }
}

    fn native_cascade_shadows_set_aircraft_mode(&self, p0_: bool) -> ResultOfCascadeShadowsSetAircraftMode {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::cascade_shadows_set_aircraft_mode(
            p0_,
        );
        
        
        ResultOfCascadeShadowsSetAircraftMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_networked_particle_fx_looped_on_entity(&self, effect_name_: Option<String>,
entity_: u32,
x_offset_: f32,
y_offset_: f32,
z_offset_: f32,
x_rot_: f32,
y_rot_: f32,
z_rot_: f32,
scale_: f32,
x_axis_: bool,
y_axis_: bool,
z_axis_: bool,
r_: f32,
g_: f32,
b_: f32,
a_: f32) -> ResultOfStartNetworkedParticleFxLoopedOnEntity {
    unsafe {
        let mut native_return = Default::default();
let mut effect_name_ = sdk_helpers::create_c_string_ptr(effect_name_);
let mut entity_ = entity_;
let mut x_offset_ = x_offset_;
let mut y_offset_ = y_offset_;
let mut z_offset_ = z_offset_;
let mut x_rot_ = x_rot_;
let mut y_rot_ = y_rot_;
let mut z_rot_ = z_rot_;
let mut scale_ = scale_;
let mut x_axis_ = x_axis_;
let mut y_axis_ = y_axis_;
let mut z_axis_ = z_axis_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut a_ = a_;
        let success = sdk::natives::start_networked_particle_fx_looped_on_entity(
            &mut native_return,
effect_name_.as_ref().unwrap(),
entity_,
x_offset_,
y_offset_,
z_offset_,
x_rot_,
y_rot_,
z_rot_,
scale_,
x_axis_,
y_axis_,
z_axis_,
r_,
g_,
b_,
a_,
        );
        let native_return = native_return;
        
        ResultOfStartNetworkedParticleFxLoopedOnEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_seethrough_reset(&self, ) -> ResultOfSeethroughReset {
    unsafe {
        
        let success = sdk::natives::seethrough_reset(
            
        );
        
        
        ResultOfSeethroughReset {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_bink_movie(&self, bink_movie_: i32) -> ResultOfPlayBinkMovie {
    unsafe {
        let mut bink_movie_ = bink_movie_;
        let success = sdk::natives::play_bink_movie(
            bink_movie_,
        );
        
        
        ResultOfPlayBinkMovie {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_bink_movie(&self, bink_movie_: i32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
r_: i32,
g_: i32,
b_: i32,
a_: i32) -> ResultOfDrawBinkMovie {
    unsafe {
        let mut bink_movie_ = bink_movie_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut a_ = a_;
        let success = sdk::natives::draw_bink_movie(
            bink_movie_,
p1_,
p2_,
p3_,
p4_,
p5_,
r_,
g_,
b_,
a_,
        );
        
        
        ResultOfDrawBinkMovie {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_checkpoint_rgba(&self, checkpoint_: i32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOfSetCheckpointRgba {
    unsafe {
        let mut checkpoint_ = checkpoint_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::set_checkpoint_rgba(
            checkpoint_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOfSetCheckpointRgba {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_looped_alpha(&self, ptfx_handle_: i32,
alpha_: f32) -> ResultOfSetParticleFxLoopedAlpha {
    unsafe {
        let mut ptfx_handle_ = ptfx_handle_;
let mut alpha_ = alpha_;
        let success = sdk::natives::set_particle_fx_looped_alpha(
            ptfx_handle_,
alpha_,
        );
        
        
        ResultOfSetParticleFxLoopedAlpha {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_textured_poly_with_three_colours(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
x3_: f32,
y3_: f32,
z3_: f32,
red1_: f32,
green1_: f32,
blue1_: f32,
alpha1_: i32,
red2_: f32,
green2_: f32,
blue2_: f32,
alpha2_: i32,
red3_: f32,
green3_: f32,
blue3_: f32,
alpha3_: i32,
texture_dict_: Option<String>,
texture_name_: Option<String>,
u1_: f32,
v1_: f32,
w1_: f32,
u2_: f32,
v2_: f32,
w2_: f32,
u3_: f32,
v3_: f32,
w3_: f32) -> ResultOfDrawTexturedPolyWithThreeColours {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut x3_ = x3_;
let mut y3_ = y3_;
let mut z3_ = z3_;
let mut red1_ = red1_;
let mut green1_ = green1_;
let mut blue1_ = blue1_;
let mut alpha1_ = alpha1_;
let mut red2_ = red2_;
let mut green2_ = green2_;
let mut blue2_ = blue2_;
let mut alpha2_ = alpha2_;
let mut red3_ = red3_;
let mut green3_ = green3_;
let mut blue3_ = blue3_;
let mut alpha3_ = alpha3_;
let mut texture_dict_ = sdk_helpers::create_c_string_ptr(texture_dict_);
let mut texture_name_ = sdk_helpers::create_c_string_ptr(texture_name_);
let mut u1_ = u1_;
let mut v1_ = v1_;
let mut w1_ = w1_;
let mut u2_ = u2_;
let mut v2_ = v2_;
let mut w2_ = w2_;
let mut u3_ = u3_;
let mut v3_ = v3_;
let mut w3_ = w3_;
        let success = sdk::natives::draw_textured_poly_with_three_colours(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
x3_,
y3_,
z3_,
red1_,
green1_,
blue1_,
alpha1_,
red2_,
green2_,
blue2_,
alpha2_,
red3_,
green3_,
blue3_,
alpha3_,
texture_dict_.as_ref().unwrap(),
texture_name_.as_ref().unwrap(),
u1_,
v1_,
w1_,
u2_,
v2_,
w2_,
u3_,
v3_,
w3_,
        );
        
        
        ResultOfDrawTexturedPolyWithThreeColours {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_debug_cross(&self, x_: f32,
y_: f32,
z_: f32,
size_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOfDrawDebugCross {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut size_ = size_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_debug_cross(
            x_,
y_,
z_,
size_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOfDrawDebugCross {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_particle_fx_looped_exist(&self, ptfx_handle_: i32) -> ResultOfDoesParticleFxLoopedExist {
    unsafe {
        let mut native_return = Default::default();
let mut ptfx_handle_ = ptfx_handle_;
        let success = sdk::natives::does_particle_fx_looped_exist(
            &mut native_return,
ptfx_handle_,
        );
        let native_return = native_return;
        
        ResultOfDoesParticleFxLoopedExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_enable_movie_keyframe_wait(&self, toggle_: bool) -> ResultOfEnableMovieKeyframeWait {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::enable_movie_keyframe_wait(
            toggle_,
        );
        
        
        ResultOfEnableMovieKeyframeWait {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_create_low_quality_copy_of_photo(&self, p0_: i32) -> ResultOfBeginCreateLowQualityCopyOfPhoto {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::begin_create_low_quality_copy_of_photo(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfBeginCreateLowQualityCopyOfPhoto {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_scaleform_movie_method_return_value_ready(&self, method_return_: i32) -> ResultOfIsScaleformMovieMethodReturnValueReady {
    unsafe {
        let mut native_return = Default::default();
let mut method_return_ = method_return_;
        let success = sdk::natives::is_scaleform_movie_method_return_value_ready(
            &mut native_return,
method_return_,
        );
        let native_return = native_return;
        
        ResultOfIsScaleformMovieMethodReturnValueReady {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_particle_fx_non_looped_alpha(&self, alpha_: f32) -> ResultOfSetParticleFxNonLoopedAlpha {
    unsafe {
        let mut alpha_ = alpha_;
        let success = sdk::natives::set_particle_fx_non_looped_alpha(
            alpha_,
        );
        
        
        ResultOfSetParticleFxNonLoopedAlpha {
            success,
            ret: (),
            
        }
    }
}

    fn native_scaleform_movie_method_add_param_literal_string(&self, string_: Option<String>) -> ResultOfScaleformMovieMethodAddParamLiteralString {
    unsafe {
        let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::scaleform_movie_method_add_param_literal_string(
            string_.as_ref().unwrap(),
        );
        
        
        ResultOfScaleformMovieMethodAddParamLiteralString {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_marker_sphere(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: f32) -> ResultOfDrawMarkerSphere {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_marker_sphere(
            x_,
y_,
z_,
radius_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOfDrawMarkerSphere {
            success,
            ret: (),
            
        }
    }
}

    fn native_ui3dscene_clear_patched_data(&self, ) -> ResultOfUi3dsceneClearPatchedData {
    unsafe {
        
        let success = sdk::natives::ui3dscene_clear_patched_data(
            
        );
        
        
        ResultOfUi3dsceneClearPatchedData {
            success,
            ret: (),
            
        }
    }
}

    fn native_phonephotoeditor_toggle(&self, p0_: bool) -> ResultOfPhonephotoeditorToggle {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::phonephotoeditor_toggle(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfPhonephotoeditorToggle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_screenblur_fade_running(&self, ) -> ResultOfIsScreenblurFadeRunning {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_screenblur_fade_running(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsScreenblurFadeRunning {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_seethrough(&self, toggle_: bool) -> ResultOfSetSeethrough {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_seethrough(
            toggle_,
        );
        
        
        ResultOfSetSeethrough {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_looped_colour(&self, ptfx_handle_: i32,
r_: f32,
g_: f32,
b_: f32,
p4_: bool) -> ResultOfSetParticleFxLoopedColour {
    unsafe {
        let mut ptfx_handle_ = ptfx_handle_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut p4_ = p4_;
        let success = sdk::natives::set_particle_fx_looped_colour(
            ptfx_handle_,
r_,
g_,
b_,
p4_,
        );
        
        
        ResultOfSetParticleFxLoopedColour {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_create_mission_creator_photo_preview(&self, ) -> ResultOfBeginCreateMissionCreatorPhotoPreview {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::begin_create_mission_creator_photo_preview(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfBeginCreateMissionCreatorPhotoPreview {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_draw_debug_line(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
r_: i32,
g_: i32,
b_: i32,
alpha_: i32) -> ResultOfDrawDebugLine {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_debug_line(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
r_,
g_,
b_,
alpha_,
        );
        
        
        ResultOfDrawDebugLine {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_text_command_scaleform_string(&self, component_type_: Option<String>) -> ResultOfBeginTextCommandScaleformString {
    unsafe {
        let mut component_type_ = sdk_helpers::create_c_string_ptr(component_type_);
        let success = sdk::natives::begin_text_command_scaleform_string(
            component_type_.as_ref().unwrap(),
        );
        
        
        ResultOfBeginTextCommandScaleformString {
            success,
            ret: (),
            
        }
    }
}

    fn native_cascade_shadows_enable_entity_tracker(&self, toggle_: bool) -> ResultOfCascadeShadowsEnableEntityTracker {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::cascade_shadows_enable_entity_tracker(
            toggle_,
        );
        
        
        ResultOfCascadeShadowsEnableEntityTracker {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_exposure_readback(&self, toggle_: bool) -> ResultOfForceExposureReadback {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::force_exposure_readback(
            toggle_,
        );
        
        
        ResultOfForceExposureReadback {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_scaleform_container_movie_loaded_into_parent(&self, scaleform_handle_: i32) -> ResultOfHasScaleformContainerMovieLoadedIntoParent {
    unsafe {
        let mut native_return = Default::default();
let mut scaleform_handle_ = scaleform_handle_;
        let success = sdk::natives::has_scaleform_container_movie_loaded_into_parent(
            &mut native_return,
scaleform_handle_,
        );
        let native_return = native_return;
        
        ResultOfHasScaleformContainerMovieLoadedIntoParent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_abort_vehicle_crew_emblem_request(&self, p0_: i32) -> ResultOfAbortVehicleCrewEmblemRequest {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::abort_vehicle_crew_emblem_request(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOfAbortVehicleCrewEmblemRequest {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_set_timecycle_modifier_strength(&self, strength_: f32) -> ResultOfSetTimecycleModifierStrength {
    unsafe {
        let mut strength_ = strength_;
        let success = sdk::natives::set_timecycle_modifier_strength(
            strength_,
        );
        
        
        ResultOfSetTimecycleModifierStrength {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_tv_audio_to_entity(&self, entity_: u32) -> ResultOfAttachTvAudioToEntity {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::attach_tv_audio_to_entity(
            entity_,
        );
        
        
        ResultOfAttachTvAudioToEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_move_vehicle_decals(&self, p0_: i32,
p1_: i32) -> ResultOfMoveVehicleDecals {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::move_vehicle_decals(
            p0_,
p1_,
        );
        
        
        ResultOfMoveVehicleDecals {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_hidef(&self, ) -> ResultOfGetIsHidef {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_hidef(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetIsHidef {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_grab_pausemenu_ownership(&self, ) -> ResultOfGrabPausemenuOwnership {
    unsafe {
        
        let success = sdk::natives::grab_pausemenu_ownership(
            
        );
        
        
        ResultOfGrabPausemenuOwnership {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_scaleform_movie_loaded(&self, scaleform_handle_: i32) -> ResultOfHasScaleformMovieLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut scaleform_handle_ = scaleform_handle_;
        let success = sdk::natives::has_scaleform_movie_loaded(
            &mut native_return,
scaleform_handle_,
        );
        let native_return = native_return;
        
        ResultOfHasScaleformMovieLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_scaleform_movie_deleting(&self, val_: i32) -> ResultOfIsScaleformMovieDeleting {
    unsafe {
        let mut native_return = Default::default();
let mut val_ = val_;
        let success = sdk::natives::is_scaleform_movie_deleting(
            &mut native_return,
val_,
        );
        let native_return = native_return;
        
        ResultOfIsScaleformMovieDeleting {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_actual_screen_resolution(&self, x_: i32,
y_: i32) -> ResultOfGetActualScreenResolution {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
        let success = sdk::natives::get_actual_screen_resolution(
            &mut x_,
&mut y_,
        );
        let x_ = x_;
let y_ = y_;
        
        ResultOfGetActualScreenResolution {
            success,
            ret: (),
            x_,
y_
        }
    }
}

    fn native_enable_movie_subtitles(&self, toggle_: bool) -> ResultOfEnableMovieSubtitles {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::enable_movie_subtitles(
            toggle_,
        );
        
        
        ResultOfEnableMovieSubtitles {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_scaleform_movie3d(&self, scaleform_: i32,
pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
rot_x_: f32,
rot_y_: f32,
rot_z_: f32,
p7_: f32,
p8_: f32,
p9_: f32,
scale_x_: f32,
scale_y_: f32,
scale_z_: f32,
rotation_order_: i32) -> ResultOfDrawScaleformMovie3d {
    unsafe {
        let mut scaleform_ = scaleform_;
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut scale_x_ = scale_x_;
let mut scale_y_ = scale_y_;
let mut scale_z_ = scale_z_;
let mut rotation_order_ = rotation_order_;
        let success = sdk::natives::draw_scaleform_movie3d(
            scaleform_,
pos_x_,
pos_y_,
pos_z_,
rot_x_,
rot_y_,
rot_z_,
p7_,
p8_,
p9_,
scale_x_,
scale_y_,
scale_z_,
rotation_order_,
        );
        
        
        ResultOfDrawScaleformMovie3d {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_screen_resolution(&self, x_: i32,
y_: i32) -> ResultOfGetScreenResolution {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
        let success = sdk::natives::get_screen_resolution(
            &mut x_,
&mut y_,
        );
        let x_ = x_;
let y_ = y_;
        
        ResultOfGetScreenResolution {
            success,
            ret: (),
            x_,
y_
        }
    }
}

    fn native_reset_particle_fx_override(&self, name_: Option<String>) -> ResultOfResetParticleFxOverride {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::reset_particle_fx_override(
            name_.as_ref().unwrap(),
        );
        
        
        ResultOfResetParticleFxOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_patch_decal_diffuse_map(&self, decal_type_: i32,
texture_dict_: Option<String>,
texture_name_: Option<String>) -> ResultOfPatchDecalDiffuseMap {
    unsafe {
        let mut decal_type_ = decal_type_;
let mut texture_dict_ = sdk_helpers::create_c_string_ptr(texture_dict_);
let mut texture_name_ = sdk_helpers::create_c_string_ptr(texture_name_);
        let success = sdk::natives::patch_decal_diffuse_map(
            decal_type_,
texture_dict_.as_ref().unwrap(),
texture_name_.as_ref().unwrap(),
        );
        
        
        ResultOfPatchDecalDiffuseMap {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_force_vehicle_interior(&self, toggle_: bool) -> ResultOfSetParticleFxForceVehicleInterior {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_particle_fx_force_vehicle_interior(
            toggle_,
        );
        
        
        ResultOfSetParticleFxForceVehicleInterior {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_bink_movie_time(&self, bink_movie_: i32) -> ResultOfGetBinkMovieTime {
    unsafe {
        let mut native_return = Default::default();
let mut bink_movie_ = bink_movie_;
        let success = sdk::natives::get_bink_movie_time(
            &mut native_return,
bink_movie_,
        );
        let native_return = native_return;
        
        ResultOfGetBinkMovieTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_particle_fx_looped(&self, ptfx_handle_: i32,
p1_: bool) -> ResultOfStopParticleFxLooped {
    unsafe {
        let mut ptfx_handle_ = ptfx_handle_;
let mut p1_ = p1_;
        let success = sdk::natives::stop_particle_fx_looped(
            ptfx_handle_,
p1_,
        );
        
        
        ResultOfStopParticleFxLooped {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_blood_scale(&self, p0_: i32) -> ResultOfSetParticleFxBloodScale {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_particle_fx_blood_scale(
            p0_,
        );
        
        
        ResultOfSetParticleFxBloodScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_status_of_take_mission_creator_photo(&self, ) -> ResultOfGetStatusOfTakeMissionCreatorPhoto {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_status_of_take_mission_creator_photo(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetStatusOfTakeMissionCreatorPhoto {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_extra_tcmodifier(&self, ) -> ResultOfClearExtraTcmodifier {
    unsafe {
        
        let success = sdk::natives::clear_extra_tcmodifier(
            
        );
        
        
        ResultOfClearExtraTcmodifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_scaleform_script_hud_movie(&self, hud_component_: i32) -> ResultOfRequestScaleformScriptHudMovie {
    unsafe {
        let mut hud_component_ = hud_component_;
        let success = sdk::natives::request_scaleform_script_hud_movie(
            hud_component_,
        );
        
        
        ResultOfRequestScaleformScriptHudMovie {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_foot_lodrange_scale(&self, p0_: f32) -> ResultOfSetParticleFxFootLodrangeScale {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_particle_fx_foot_lodrange_scale(
            p0_,
        );
        
        
        ResultOfSetParticleFxFootLodrangeScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_sprite_arx_with_uv(&self, texture_dict_: Option<String>,
texture_name_: Option<String>,
x_: f32,
y_: f32,
width_: f32,
height_: f32,
u1_: f32,
v1_: f32,
u2_: f32,
v2_: f32,
heading_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32,
p15_: i32) -> ResultOfDrawSpriteArxWithUv {
    unsafe {
        let mut texture_dict_ = sdk_helpers::create_c_string_ptr(texture_dict_);
let mut texture_name_ = sdk_helpers::create_c_string_ptr(texture_name_);
let mut x_ = x_;
let mut y_ = y_;
let mut width_ = width_;
let mut height_ = height_;
let mut u1_ = u1_;
let mut v1_ = v1_;
let mut u2_ = u2_;
let mut v2_ = v2_;
let mut heading_ = heading_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
let mut p15_ = p15_;
        let success = sdk::natives::draw_sprite_arx_with_uv(
            texture_dict_.as_ref().unwrap(),
texture_name_.as_ref().unwrap(),
x_,
y_,
width_,
height_,
u1_,
v1_,
u2_,
v2_,
heading_,
red_,
green_,
blue_,
alpha_,
p15_,
        );
        
        
        ResultOfDrawSpriteArxWithUv {
            success,
            ret: (),
            
        }
    }
}

    fn native_override_ped_crew_logo_texture(&self, ped_: u32,
txd_: Option<String>,
txn_: Option<String>) -> ResultOfOverridePedCrewLogoTexture {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut txd_ = sdk_helpers::create_c_string_ptr(txd_);
let mut txn_ = sdk_helpers::create_c_string_ptr(txn_);
        let success = sdk::natives::override_ped_crew_logo_texture(
            &mut native_return,
ped_,
txd_.as_ref().unwrap(),
txn_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfOverridePedCrewLogoTexture {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_light_override_max_intensity_scale(&self, p0_: i32) -> ResultOfSetLightOverrideMaxIntensityScale {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_light_override_max_intensity_scale(
            p0_,
        );
        
        
        ResultOfSetLightOverrideMaxIntensityScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_petrol_trail_decal_info(&self, x_: f32,
y_: f32,
z_: f32,
p3_: f32) -> ResultOfAddPetrolTrailDecalInfo {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
        let success = sdk::natives::add_petrol_trail_decal_info(
            x_,
y_,
z_,
p3_,
        );
        
        
        ResultOfAddPetrolTrailDecalInfo {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_shootout_boat(&self, p0_: i32) -> ResultOfSetParticleFxShootoutBoat {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_particle_fx_shootout_boat(
            p0_,
        );
        
        
        ResultOfSetParticleFxShootoutBoat {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_scaleform_script_hud_movie_method(&self, hud_component_: i32,
method_name_: Option<String>) -> ResultOfBeginScaleformScriptHudMovieMethod {
    unsafe {
        let mut native_return = Default::default();
let mut hud_component_ = hud_component_;
let mut method_name_ = sdk_helpers::create_c_string_ptr(method_name_);
        let success = sdk::natives::begin_scaleform_script_hud_movie_method(
            &mut native_return,
hud_component_,
method_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfBeginScaleformScriptHudMovieMethod {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ui3dscene_assign_ped_to_slot(&self, preset_name_: Option<String>,
ped_: u32,
slot_: i32,
pos_x_: f32,
pos_y_: f32,
pos_z_: f32) -> ResultOfUi3dsceneAssignPedToSlot {
    unsafe {
        let mut native_return = Default::default();
let mut preset_name_ = sdk_helpers::create_c_string_ptr(preset_name_);
let mut ped_ = ped_;
let mut slot_ = slot_;
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
        let success = sdk::natives::ui3dscene_assign_ped_to_slot(
            &mut native_return,
preset_name_.as_ref().unwrap(),
ped_,
slot_,
pos_x_,
pos_y_,
pos_z_,
        );
        let native_return = native_return;
        
        ResultOfUi3dsceneAssignPedToSlot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_timecycle_transitioning_out(&self, ) -> ResultOfGetIsTimecycleTransitioningOut {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_timecycle_transitioning_out(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetIsTimecycleTransitioningOut {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_early_light_check(&self, ) -> ResultOfRequestEarlyLightCheck {
    unsafe {
        
        let success = sdk::natives::request_early_light_check(
            
        );
        
        
        ResultOfRequestEarlyLightCheck {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_petrol_trail_decals(&self, p0_: f32) -> ResultOfStartPetrolTrailDecals {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::start_petrol_trail_decals(
            p0_,
        );
        
        
        ResultOfStartPetrolTrailDecals {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_postfx_bullet_impacts_after_hud(&self, p0_: bool) -> ResultOfForcePostfxBulletImpactsAfterHud {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::force_postfx_bullet_impacts_after_hud(
            p0_,
        );
        
        
        ResultOfForcePostfxBulletImpactsAfterHud {
            success,
            ret: (),
            
        }
    }
}

    fn native_query_movie_mesh_set_state(&self, p0_: i32) -> ResultOfQueryMovieMeshSetState {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::query_movie_mesh_set_state(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfQueryMovieMeshSetState {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_wash_decals_in_range(&self, x_: f32,
y_: f32,
z_: f32,
range_: f32,
p4_: f32) -> ResultOfWashDecalsInRange {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut range_ = range_;
let mut p4_ = p4_;
        let success = sdk::natives::wash_decals_in_range(
            x_,
y_,
z_,
range_,
p4_,
        );
        
        
        ResultOfWashDecalsInRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_entity_icon(&self, entity_: u32,
icon_: Option<String>) -> ResultOfAddEntityIcon {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut icon_ = sdk_helpers::create_c_string_ptr(icon_);
        let success = sdk::natives::add_entity_icon(
            &mut native_return,
entity_,
icon_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfAddEntityIcon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_golf_trail_set_shader_params(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32) -> ResultOfGolfTrailSetShaderParams {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::golf_trail_set_shader_params(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfGolfTrailSetShaderParams {
            success,
            ret: (),
            
        }
    }
}

    fn native_seethrough_set_fade_enddistance(&self, distance_: f32) -> ResultOfSeethroughSetFadeEnddistance {
    unsafe {
        let mut distance_ = distance_;
        let success = sdk::natives::seethrough_set_fade_enddistance(
            distance_,
        );
        
        
        ResultOfSeethroughSetFadeEnddistance {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_alien_blood_vfx(&self, toggle_: bool) -> ResultOfEnableAlienBloodVfx {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::enable_alien_blood_vfx(
            toggle_,
        );
        
        
        ResultOfEnableAlienBloodVfx {
            success,
            ret: (),
            
        }
    }
}

    fn native_trigger_screenblur_fade_in(&self, transition_time_: f32) -> ResultOfTriggerScreenblurFadeIn {
    unsafe {
        let mut native_return = Default::default();
let mut transition_time_ = transition_time_;
        let success = sdk::natives::trigger_screenblur_fade_in(
            &mut native_return,
transition_time_,
        );
        let native_return = native_return;
        
        ResultOfTriggerScreenblurFadeIn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_terraingrid_activate(&self, toggle_: bool) -> ResultOfTerraingridActivate {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::terraingrid_activate(
            toggle_,
        );
        
        
        ResultOfTerraingridActivate {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_debug_text2d(&self, text_: Option<String>,
x_: f32,
y_: f32,
z_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOfDrawDebugText2d {
    unsafe {
        let mut text_ = sdk_helpers::create_c_string_ptr(text_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_debug_text2d(
            text_.as_ref().unwrap(),
x_,
y_,
z_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOfDrawDebugText2d {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_networked_particle_fx_non_looped_on_ped_bone(&self, effect_name_: Option<String>,
ped_: u32,
offset_x_: f32,
offset_y_: f32,
offset_z_: f32,
rot_x_: f32,
rot_y_: f32,
rot_z_: f32,
bone_index_: i32,
scale_: f32,
axis_x_: bool,
axis_y_: bool,
axis_z_: bool) -> ResultOfStartNetworkedParticleFxNonLoopedOnPedBone {
    unsafe {
        let mut native_return = Default::default();
let mut effect_name_ = sdk_helpers::create_c_string_ptr(effect_name_);
let mut ped_ = ped_;
let mut offset_x_ = offset_x_;
let mut offset_y_ = offset_y_;
let mut offset_z_ = offset_z_;
let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
let mut bone_index_ = bone_index_;
let mut scale_ = scale_;
let mut axis_x_ = axis_x_;
let mut axis_y_ = axis_y_;
let mut axis_z_ = axis_z_;
        let success = sdk::natives::start_networked_particle_fx_non_looped_on_ped_bone(
            &mut native_return,
effect_name_.as_ref().unwrap(),
ped_,
offset_x_,
offset_y_,
offset_z_,
rot_x_,
rot_y_,
rot_z_,
bone_index_,
scale_,
axis_x_,
axis_y_,
axis_z_,
        );
        let native_return = native_return;
        
        ResultOfStartNetworkedParticleFxNonLoopedOnPedBone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_register_noir_lens_effect(&self, ) -> ResultOfRegisterNoirLensEffect {
    unsafe {
        
        let success = sdk::natives::register_noir_lens_effect(
            
        );
        
        
        ResultOfRegisterNoirLensEffect {
            success,
            ret: (),
            
        }
    }
}

    fn native_golf_trail_get_visual_control_point(&self, p0_: i32) -> ResultOfGolfTrailGetVisualControlPoint {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut p0_ = p0_;
        let success = sdk::natives::golf_trail_get_visual_control_point(
            native_return.pin_mut(),
p0_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGolfTrailGetVisualControlPoint {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_weather_ptfx_use_override_settings(&self, p0_: bool) -> ResultOfSetWeatherPtfxUseOverrideSettings {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_weather_ptfx_use_override_settings(
            p0_,
        );
        
        
        ResultOfSetWeatherPtfxUseOverrideSettings {
            success,
            ret: (),
            
        }
    }
}

    fn native_golf_trail_get_max_height(&self, ) -> ResultOfGolfTrailGetMaxHeight {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::golf_trail_get_max_height(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGolfTrailGetMaxHeight {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_golf_trail_set_enabled(&self, toggle_: bool) -> ResultOfGolfTrailSetEnabled {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::golf_trail_set_enabled(
            toggle_,
        );
        
        
        ResultOfGolfTrailSetEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_take_high_quality_photo(&self, ) -> ResultOfBeginTakeHighQualityPhoto {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::begin_take_high_quality_photo(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfBeginTakeHighQualityPhoto {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_decals_from_object_facing(&self, obj_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfRemoveDecalsFromObjectFacing {
    unsafe {
        let mut obj_ = obj_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::remove_decals_from_object_facing(
            obj_,
x_,
y_,
z_,
        );
        
        
        ResultOfRemoveDecalsFromObjectFacing {
            success,
            ret: (),
            
        }
    }
}

    fn native_seethrough_set_fade_startdistance(&self, distance_: f32) -> ResultOfSeethroughSetFadeStartdistance {
    unsafe {
        let mut distance_ = distance_;
        let success = sdk::natives::seethrough_set_fade_startdistance(
            distance_,
        );
        
        
        ResultOfSeethroughSetFadeStartdistance {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_draw_origin(&self, x_: f32,
y_: f32,
z_: f32,
p3_: bool) -> ResultOfSetDrawOrigin {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
        let success = sdk::natives::set_draw_origin(
            x_,
y_,
z_,
p3_,
        );
        
        
        ResultOfSetDrawOrigin {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_debug_sphere(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOfDrawDebugSphere {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_debug_sphere(
            x_,
y_,
z_,
radius_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOfDrawDebugSphere {
            success,
            ret: (),
            
        }
    }
}

    fn native_grassbatch_enable_flattening_ext_in_sphere(&self, x_: f32,
y_: f32,
z_: f32,
p3_: i32,
p4_: f32,
p5_: f32,
p6_: f32,
scale_: f32) -> ResultOfGrassbatchEnableFlatteningExtInSphere {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut scale_ = scale_;
        let success = sdk::natives::grassbatch_enable_flattening_ext_in_sphere(
            x_,
y_,
z_,
p3_,
p4_,
p5_,
p6_,
scale_,
        );
        
        
        ResultOfGrassbatchEnableFlatteningExtInSphere {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_scaleform_movie_method_on_frontend(&self, method_name_: Option<String>) -> ResultOfBeginScaleformMovieMethodOnFrontend {
    unsafe {
        let mut native_return = Default::default();
let mut method_name_ = sdk_helpers::create_c_string_ptr(method_name_);
        let success = sdk::natives::begin_scaleform_movie_method_on_frontend(
            &mut native_return,
method_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfBeginScaleformMovieMethodOnFrontend {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_draw_poly(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
x3_: f32,
y3_: f32,
z3_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOfDrawPoly {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut x3_ = x3_;
let mut y3_ = y3_;
let mut z3_ = z3_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_poly(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
x3_,
y3_,
z3_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOfDrawPoly {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_cam_inside_nonplayer_vehicle(&self, vehicle_: u32,
p1_: bool) -> ResultOfSetParticleFxCamInsideNonplayerVehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_particle_fx_cam_inside_nonplayer_vehicle(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetParticleFxCamInsideNonplayerVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_on_island_x_for_taken_photo(&self, p0_: i32) -> ResultOfSetOnIslandXforTakenPhoto {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_on_island_x_for_taken_photo(
            p0_,
        );
        
        
        ResultOfSetOnIslandXforTakenPhoto {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_unparsed_scaleform_string(&self, ) -> ResultOfEndTextCommandUnparsedScaleformString {
    unsafe {
        
        let success = sdk::natives::end_text_command_unparsed_scaleform_string(
            
        );
        
        
        ResultOfEndTextCommandUnparsedScaleformString {
            success,
            ret: (),
            
        }
    }
}

    fn native_procgrass_enable_cullsphere(&self, handle_: i32,
x_: f32,
y_: f32,
z_: f32,
scale_: f32) -> ResultOfProcgrassEnableCullsphere {
    unsafe {
        let mut handle_ = handle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut scale_ = scale_;
        let success = sdk::natives::procgrass_enable_cullsphere(
            handle_,
x_,
y_,
z_,
scale_,
        );
        
        
        ResultOfProcgrassEnableCullsphere {
            success,
            ret: (),
            
        }
    }
}

    fn native_use_snow_foot_vfx_when_unsheltered(&self, toggle_: bool) -> ResultOfUseSnowFootVfxWhenUnsheltered {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::use_snow_foot_vfx_when_unsheltered(
            toggle_,
        );
        
        
        ResultOfUseSnowFootVfxWhenUnsheltered {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_bink_movie_volume(&self, bink_movie_: i32,
value_: f32) -> ResultOfSetBinkMovieVolume {
    unsafe {
        let mut bink_movie_ = bink_movie_;
let mut value_ = value_;
        let success = sdk::natives::set_bink_movie_volume(
            bink_movie_,
value_,
        );
        
        
        ResultOfSetBinkMovieVolume {
            success,
            ret: (),
            
        }
    }
}

    fn native_cascade_shadows_set_shadow_sample_type(&self, type_: Option<String>) -> ResultOfCascadeShadowsSetShadowSampleType {
    unsafe {
        let mut type_ = sdk_helpers::create_c_string_ptr(type_);
        let success = sdk::natives::cascade_shadows_set_shadow_sample_type(
            type_.as_ref().unwrap(),
        );
        
        
        ResultOfCascadeShadowsSetShadowSampleType {
            success,
            ret: (),
            
        }
    }
}

    fn native_golf_trail_set_fixed_control_point(&self, type_: i32,
x_pos_: f32,
y_pos_: f32,
z_pos_: f32,
p4_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOfGolfTrailSetFixedControlPoint {
    unsafe {
        let mut type_ = type_;
let mut x_pos_ = x_pos_;
let mut y_pos_ = y_pos_;
let mut z_pos_ = z_pos_;
let mut p4_ = p4_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::golf_trail_set_fixed_control_point(
            type_,
x_pos_,
y_pos_,
z_pos_,
p4_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOfGolfTrailSetFixedControlPoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_destroy_tracked_point(&self, point_: i32) -> ResultOfDestroyTrackedPoint {
    unsafe {
        let mut point_ = point_;
        let success = sdk::natives::destroy_tracked_point(
            point_,
        );
        
        
        ResultOfDestroyTrackedPoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_screen_aspect_ratio(&self, ) -> ResultOfGetScreenAspectRatio {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_screen_aspect_ratio(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetScreenAspectRatio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_decal(&self, decal_type_: i32,
pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: f32,
p8_: f32,
p9_: f32,
width_: f32,
height_: f32,
r_coef_: f32,
g_coef_: f32,
b_coef_: f32,
opacity_: f32,
timeout_: f32,
p17_: bool,
p18_: bool,
p19_: bool) -> ResultOfAddDecal {
    unsafe {
        let mut native_return = Default::default();
let mut decal_type_ = decal_type_;
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut width_ = width_;
let mut height_ = height_;
let mut r_coef_ = r_coef_;
let mut g_coef_ = g_coef_;
let mut b_coef_ = b_coef_;
let mut opacity_ = opacity_;
let mut timeout_ = timeout_;
let mut p17_ = p17_;
let mut p18_ = p18_;
let mut p19_ = p19_;
        let success = sdk::natives::add_decal(
            &mut native_return,
decal_type_,
pos_x_,
pos_y_,
pos_z_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
width_,
height_,
r_coef_,
g_coef_,
b_coef_,
opacity_,
timeout_,
p17_,
p18_,
p19_,
        );
        let native_return = native_return;
        
        ResultOfAddDecal {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_motionblur_max_vel_scaler(&self, p0_: f32) -> ResultOfSetMotionblurMaxVelScaler {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_motionblur_max_vel_scaler(
            p0_,
        );
        
        
        ResultOfSetMotionblurMaxVelScaler {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_looped_scale(&self, ptfx_handle_: i32,
scale_: f32) -> ResultOfSetParticleFxLoopedScale {
    unsafe {
        let mut ptfx_handle_ = ptfx_handle_;
let mut scale_ = scale_;
        let success = sdk::natives::set_particle_fx_looped_scale(
            ptfx_handle_,
scale_,
        );
        
        
        ResultOfSetParticleFxLoopedScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_animpostfx_stop_all(&self, ) -> ResultOfAnimpostfxStopAll {
    unsafe {
        
        let success = sdk::natives::animpostfx_stop_all(
            
        );
        
        
        ResultOfAnimpostfxStopAll {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_lock_adaptive_dof_distance(&self, p0_: bool) -> ResultOfSetLockAdaptiveDofDistance {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_lock_adaptive_dof_distance(
            p0_,
        );
        
        
        ResultOfSetLockAdaptiveDofDistance {
            success,
            ret: (),
            
        }
    }
}

    fn native_load_movie_mesh_set(&self, movie_mesh_set_name_: Option<String>) -> ResultOfLoadMovieMeshSet {
    unsafe {
        let mut native_return = Default::default();
let mut movie_mesh_set_name_ = sdk_helpers::create_c_string_ptr(movie_mesh_set_name_);
        let success = sdk::natives::load_movie_mesh_set(
            &mut native_return,
movie_mesh_set_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfLoadMovieMeshSet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_unpatch_decal_diffuse_map(&self, decal_type_: i32) -> ResultOfUnpatchDecalDiffuseMap {
    unsafe {
        let mut decal_type_ = decal_type_;
        let success = sdk::natives::unpatch_decal_diffuse_map(
            decal_type_,
        );
        
        
        ResultOfUnpatchDecalDiffuseMap {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_non_looped_scale(&self, scale_: f32) -> ResultOfSetParticleFxNonLoopedScale {
    unsafe {
        let mut scale_ = scale_;
        let success = sdk::natives::set_particle_fx_non_looped_scale(
            scale_,
        );
        
        
        ResultOfSetParticleFxNonLoopedScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_script_gfx_align(&self, horizontal_align_: i32,
vertical_align_: i32) -> ResultOfSetScriptGfxAlign {
    unsafe {
        let mut horizontal_align_ = horizontal_align_;
let mut vertical_align_ = vertical_align_;
        let success = sdk::natives::set_script_gfx_align(
            horizontal_align_,
vertical_align_,
        );
        
        
        ResultOfSetScriptGfxAlign {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_particle_fx_from_entity(&self, entity_: u32) -> ResultOfRemoveParticleFxFromEntity {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::remove_particle_fx_from_entity(
            entity_,
        );
        
        
        ResultOfRemoveParticleFxFromEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_scaleform_movie_method_on_frontend_header(&self, method_name_: Option<String>) -> ResultOfBeginScaleformMovieMethodOnFrontendHeader {
    unsafe {
        let mut native_return = Default::default();
let mut method_name_ = sdk_helpers::create_c_string_ptr(method_name_);
        let success = sdk::natives::begin_scaleform_movie_method_on_frontend_header(
            &mut native_return,
method_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfBeginScaleformMovieMethodOnFrontendHeader {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_checkpoint_rgba2(&self, checkpoint_: i32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOfSetCheckpointRgba2 {
    unsafe {
        let mut checkpoint_ = checkpoint_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::set_checkpoint_rgba2(
            checkpoint_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOfSetCheckpointRgba2 {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_particle_fx_in_vehicle_interior(&self, p0_: i32,
p1_: i32) -> ResultOfForceParticleFxInVehicleInterior {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::force_particle_fx_in_vehicle_interior(
            p0_,
p1_,
        );
        
        
        ResultOfForceParticleFxInVehicleInterior {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_foot_override_name(&self, p0_: Option<String>) -> ResultOfSetParticleFxFootOverrideName {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::set_particle_fx_foot_override_name(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOfSetParticleFxFootOverrideName {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_hidof_override(&self, p0_: bool,
p1_: bool,
nearplane_out_: f32,
nearplane_in_: f32,
farplane_out_: f32,
farplane_in_: f32) -> ResultOfSetHidofOverride {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut nearplane_out_ = nearplane_out_;
let mut nearplane_in_ = nearplane_in_;
let mut farplane_out_ = farplane_out_;
let mut farplane_in_ = farplane_in_;
        let success = sdk::natives::set_hidof_override(
            p0_,
p1_,
nearplane_out_,
nearplane_in_,
farplane_out_,
farplane_in_,
        );
        
        
        ResultOfSetHidofOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_scaleform_movie_method_add_param_texture_name_string(&self, string_: Option<String>) -> ResultOfScaleformMovieMethodAddParamTextureNameString {
    unsafe {
        let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::scaleform_movie_method_add_param_texture_name_string(
            string_.as_ref().unwrap(),
        );
        
        
        ResultOfScaleformMovieMethodAddParamTextureNameString {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_tv_channel(&self, channel_: i32) -> ResultOfSetTvChannel {
    unsafe {
        let mut channel_ = channel_;
        let success = sdk::natives::set_tv_channel(
            channel_,
        );
        
        
        ResultOfSetTvChannel {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_safe_zone_size(&self, ) -> ResultOfGetSafeZoneSize {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_safe_zone_size(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetSafeZoneSize {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_extra_tcmodifier(&self, ) -> ResultOfGetExtraTcmodifier {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_extra_tcmodifier(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetExtraTcmodifier {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_particle_fx_bullet_impact_lodrange_scale(&self, p0_: f32) -> ResultOfSetParticleFxBulletImpactLodrangeScale {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_particle_fx_bullet_impact_lodrange_scale(
            p0_,
        );
        
        
        ResultOfSetParticleFxBulletImpactLodrangeScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_current_player_tcmodifier(&self, modifier_name_: Option<String>) -> ResultOfSetCurrentPlayerTcmodifier {
    unsafe {
        let mut modifier_name_ = sdk_helpers::create_c_string_ptr(modifier_name_);
        let success = sdk::natives::set_current_player_tcmodifier(
            modifier_name_.as_ref().unwrap(),
        );
        
        
        ResultOfSetCurrentPlayerTcmodifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_phonephotoeditor_is_active(&self, ) -> ResultOfPhonephotoeditorIsActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::phonephotoeditor_is_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfPhonephotoeditorIsActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_scaleform_movie_skip_render_while_paused(&self, scaleform_name_: Option<String>) -> ResultOfRequestScaleformMovieSkipRenderWhilePaused {
    unsafe {
        let mut native_return = Default::default();
let mut scaleform_name_ = sdk_helpers::create_c_string_ptr(scaleform_name_);
        let success = sdk::natives::request_scaleform_movie_skip_render_while_paused(
            &mut native_return,
scaleform_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfRequestScaleformMovieSkipRenderWhilePaused {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_tcmodifier_transition(&self, value_: f32) -> ResultOfSetPlayerTcmodifierTransition {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_player_tcmodifier_transition(
            value_,
        );
        
        
        ResultOfSetPlayerTcmodifierTransition {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_grass_cull_sphere(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32) -> ResultOfSetGrassCullSphere {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_grass_cull_sphere(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOfSetGrassCullSphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_streamed_texture_dict_as_no_longer_needed(&self, texture_dict_: Option<String>) -> ResultOfSetStreamedTextureDictAsNoLongerNeeded {
    unsafe {
        let mut texture_dict_ = sdk_helpers::create_c_string_ptr(texture_dict_);
        let success = sdk::natives::set_streamed_texture_dict_as_no_longer_needed(
            texture_dict_.as_ref().unwrap(),
        );
        
        
        ResultOfSetStreamedTextureDictAsNoLongerNeeded {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_tv_channel_playlist(&self, tv_channel_: i32) -> ResultOfClearTvChannelPlaylist {
    unsafe {
        let mut tv_channel_ = tv_channel_;
        let success = sdk::natives::clear_tv_channel_playlist(
            tv_channel_,
        );
        
        
        ResultOfClearTvChannelPlaylist {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_next_player_tcmodifier(&self, modifier_name_: Option<String>) -> ResultOfSetNextPlayerTcmodifier {
    unsafe {
        let mut modifier_name_ = sdk_helpers::create_c_string_ptr(modifier_name_);
        let success = sdk::natives::set_next_player_tcmodifier(
            modifier_name_.as_ref().unwrap(),
        );
        
        
        ResultOfSetNextPlayerTcmodifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_golf_trail_set_fixed_control_point_enable(&self, p0_: bool) -> ResultOfGolfTrailSetFixedControlPointEnable {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::golf_trail_set_fixed_control_point_enable(
            p0_,
        );
        
        
        ResultOfGolfTrailSetFixedControlPointEnable {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_hdtex_this_frame(&self, ) -> ResultOfDisableHdtexThisFrame {
    unsafe {
        
        let success = sdk::natives::disable_hdtex_this_frame(
            
        );
        
        
        ResultOfDisableHdtexThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_scaleform_movie_method_add_param_int(&self, value_: i32) -> ResultOfScaleformMovieMethodAddParamInt {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::scaleform_movie_method_add_param_int(
            value_,
        );
        
        
        ResultOfScaleformMovieMethodAddParamInt {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_particle_fx(&self, ptfx_handle_: i32,
p1_: bool) -> ResultOfRemoveParticleFx {
    unsafe {
        let mut ptfx_handle_ = ptfx_handle_;
let mut p1_ = p1_;
        let success = sdk::natives::remove_particle_fx(
            ptfx_handle_,
p1_,
        );
        
        
        ResultOfRemoveParticleFx {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_tracked_point_visible(&self, point_: i32) -> ResultOfIsTrackedPointVisible {
    unsafe {
        let mut native_return = Default::default();
let mut point_ = point_;
        let success = sdk::natives::is_tracked_point_visible(
            &mut native_return,
point_,
        );
        let native_return = native_return;
        
        ResultOfIsTrackedPointVisible {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_end_scaleform_movie_method_return_value(&self, ) -> ResultOfEndScaleformMovieMethodReturnValue {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::end_scaleform_movie_method_return_value(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfEndScaleformMovieMethodReturnValue {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_scaleform_movie_instance(&self, scaleform_name_: Option<String>) -> ResultOfRequestScaleformMovieInstance {
    unsafe {
        let mut native_return = Default::default();
let mut scaleform_name_ = sdk_helpers::create_c_string_ptr(scaleform_name_);
        let success = sdk::natives::request_scaleform_movie_instance(
            &mut native_return,
scaleform_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfRequestScaleformMovieInstance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_scaleform_movie_method_add_param_bool(&self, value_: bool) -> ResultOfScaleformMovieMethodAddParamBool {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::scaleform_movie_method_add_param_bool(
            value_,
        );
        
        
        ResultOfScaleformMovieMethodAddParamBool {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_depthwriting(&self, toggle_: bool) -> ResultOfSetDepthwriting {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_depthwriting(
            toggle_,
        );
        
        
        ResultOfSetDepthwriting {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_script_gfx_draw_behind_pausemenu(&self, toggle_: bool) -> ResultOfSetScriptGfxDrawBehindPausemenu {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_script_gfx_draw_behind_pausemenu(
            toggle_,
        );
        
        
        ResultOfSetScriptGfxDrawBehindPausemenu {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ptfx_force_vehicle_interior_flag(&self, p0_: i32) -> ResultOfSetPtfxForceVehicleInteriorFlag {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_ptfx_force_vehicle_interior_flag(
            p0_,
        );
        
        
        ResultOfSetPtfxForceVehicleInteriorFlag {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_scaleform_movie_method(&self, ) -> ResultOfEndScaleformMovieMethod {
    unsafe {
        
        let success = sdk::natives::end_scaleform_movie_method(
            
        );
        
        
        ResultOfEndScaleformMovieMethod {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_decal_alive(&self, decal_: i32) -> ResultOfIsDecalAlive {
    unsafe {
        let mut native_return = Default::default();
let mut decal_ = decal_;
        let success = sdk::natives::is_decal_alive(
            &mut native_return,
decal_,
        );
        let native_return = native_return;
        
        ResultOfIsDecalAlive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_particle_fx_looped_on_entity_bone(&self, effect_name_: Option<String>,
entity_: u32,
x_offset_: f32,
y_offset_: f32,
z_offset_: f32,
x_rot_: f32,
y_rot_: f32,
z_rot_: f32,
bone_index_: i32,
scale_: f32,
x_axis_: bool,
y_axis_: bool,
z_axis_: bool) -> ResultOfStartParticleFxLoopedOnEntityBone {
    unsafe {
        let mut native_return = Default::default();
let mut effect_name_ = sdk_helpers::create_c_string_ptr(effect_name_);
let mut entity_ = entity_;
let mut x_offset_ = x_offset_;
let mut y_offset_ = y_offset_;
let mut z_offset_ = z_offset_;
let mut x_rot_ = x_rot_;
let mut y_rot_ = y_rot_;
let mut z_rot_ = z_rot_;
let mut bone_index_ = bone_index_;
let mut scale_ = scale_;
let mut x_axis_ = x_axis_;
let mut y_axis_ = y_axis_;
let mut z_axis_ = z_axis_;
        let success = sdk::natives::start_particle_fx_looped_on_entity_bone(
            &mut native_return,
effect_name_.as_ref().unwrap(),
entity_,
x_offset_,
y_offset_,
z_offset_,
x_rot_,
y_rot_,
z_rot_,
bone_index_,
scale_,
x_axis_,
y_axis_,
z_axis_,
        );
        let native_return = native_return;
        
        ResultOfStartParticleFxLoopedOnEntityBone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_networked_particle_fx_non_looped_on_entity(&self, effect_name_: Option<String>,
entity_: u32,
offset_x_: f32,
offset_y_: f32,
offset_z_: f32,
rot_x_: f32,
rot_y_: f32,
rot_z_: f32,
scale_: f32,
axis_x_: bool,
axis_y_: bool,
axis_z_: bool) -> ResultOfStartNetworkedParticleFxNonLoopedOnEntity {
    unsafe {
        let mut native_return = Default::default();
let mut effect_name_ = sdk_helpers::create_c_string_ptr(effect_name_);
let mut entity_ = entity_;
let mut offset_x_ = offset_x_;
let mut offset_y_ = offset_y_;
let mut offset_z_ = offset_z_;
let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
let mut scale_ = scale_;
let mut axis_x_ = axis_x_;
let mut axis_y_ = axis_y_;
let mut axis_z_ = axis_z_;
        let success = sdk::natives::start_networked_particle_fx_non_looped_on_entity(
            &mut native_return,
effect_name_.as_ref().unwrap(),
entity_,
offset_x_,
offset_y_,
offset_z_,
rot_x_,
rot_y_,
rot_z_,
scale_,
axis_x_,
axis_y_,
axis_z_,
        );
        let native_return = native_return;
        
        ResultOfStartNetworkedParticleFxNonLoopedOnEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_fade_up_ped_light(&self, p0_: f32) -> ResultOfFadeUpPedLight {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::fade_up_ped_light(
            p0_,
        );
        
        
        ResultOfFadeUpPedLight {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_vehicle_distantlights(&self, toggle_: bool) -> ResultOfDisableVehicleDistantlights {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::disable_vehicle_distantlights(
            toggle_,
        );
        
        
        ResultOfDisableVehicleDistantlights {
            success,
            ret: (),
            
        }
    }
}

    fn native_water_reflection_set_script_object_visibility(&self, p0_: i32) -> ResultOfWaterReflectionSetScriptObjectVisibility {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::water_reflection_set_script_object_visibility(
            p0_,
        );
        
        
        ResultOfWaterReflectionSetScriptObjectVisibility {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_bullet_trace_no_angle_reject(&self, p0_: bool) -> ResultOfSetParticleFxBulletTraceNoAngleReject {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_particle_fx_bullet_trace_no_angle_reject(
            p0_,
        );
        
        
        ResultOfSetParticleFxBulletTraceNoAngleReject {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_noisinessoveride(&self, value_: f32) -> ResultOfSetNoisinessoveride {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_noisinessoveride(
            value_,
        );
        
        
        ResultOfSetNoisinessoveride {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_status_of_create_low_quality_copy_of_photo(&self, p0_: i32) -> ResultOfGetStatusOfCreateLowQualityCopyOfPhoto {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_status_of_create_low_quality_copy_of_photo(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfGetStatusOfCreateLowQualityCopyOfPhoto {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_decals_from_object(&self, obj_: u32) -> ResultOfRemoveDecalsFromObject {
    unsafe {
        let mut obj_ = obj_;
        let success = sdk::natives::remove_decals_from_object(
            obj_,
        );
        
        
        ResultOfRemoveDecalsFromObject {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_scaleform_movie_fullscreen_masked(&self, scaleform1_: i32,
scaleform2_: i32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOfDrawScaleformMovieFullscreenMasked {
    unsafe {
        let mut scaleform1_ = scaleform1_;
let mut scaleform2_ = scaleform2_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_scaleform_movie_fullscreen_masked(
            scaleform1_,
scaleform2_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOfDrawScaleformMovieFullscreenMasked {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_in_water_ptfx(&self, toggle_: bool) -> ResultOfDisableInWaterPtfx {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::disable_in_water_ptfx(
            toggle_,
        );
        
        
        ResultOfDisableInWaterPtfx {
            success,
            ret: (),
            
        }
    }
}

    fn native_call_scaleform_movie_method_with_number(&self, scaleform_: i32,
method_name_: Option<String>,
param1_: f32,
param2_: f32,
param3_: f32,
param4_: f32,
param5_: f32) -> ResultOfCallScaleformMovieMethodWithNumber {
    unsafe {
        let mut scaleform_ = scaleform_;
let mut method_name_ = sdk_helpers::create_c_string_ptr(method_name_);
let mut param1_ = param1_;
let mut param2_ = param2_;
let mut param3_ = param3_;
let mut param4_ = param4_;
let mut param5_ = param5_;
        let success = sdk::natives::call_scaleform_movie_method_with_number(
            scaleform_,
method_name_.as_ref().unwrap(),
param1_,
param2_,
param3_,
param4_,
param5_,
        );
        
        
        ResultOfCallScaleformMovieMethodWithNumber {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_spot_light(&self, pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
dir_x_: f32,
dir_y_: f32,
dir_z_: f32,
color_r_: i32,
color_g_: i32,
color_b_: i32,
distance_: f32,
brightness_: f32,
hardness_: f32,
radius_: f32,
falloff_: f32) -> ResultOfDrawSpotLight {
    unsafe {
        let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut dir_x_ = dir_x_;
let mut dir_y_ = dir_y_;
let mut dir_z_ = dir_z_;
let mut color_r_ = color_r_;
let mut color_g_ = color_g_;
let mut color_b_ = color_b_;
let mut distance_ = distance_;
let mut brightness_ = brightness_;
let mut hardness_ = hardness_;
let mut radius_ = radius_;
let mut falloff_ = falloff_;
        let success = sdk::natives::draw_spot_light(
            pos_x_,
pos_y_,
pos_z_,
dir_x_,
dir_y_,
dir_z_,
color_r_,
color_g_,
color_b_,
distance_,
brightness_,
hardness_,
radius_,
falloff_,
        );
        
        
        ResultOfDrawSpotLight {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_tv_player_watching_this_frame(&self, p0_: i32) -> ResultOfSetTvPlayerWatchingThisFrame {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_tv_player_watching_this_frame(
            p0_,
        );
        
        
        ResultOfSetTvPlayerWatchingThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_pass_keyboard_input_to_scaleform(&self, scaleform_handle_: i32) -> ResultOfPassKeyboardInputToScaleform {
    unsafe {
        let mut native_return = Default::default();
let mut scaleform_handle_ = scaleform_handle_;
        let success = sdk::natives::pass_keyboard_input_to_scaleform(
            &mut native_return,
scaleform_handle_,
        );
        let native_return = native_return;
        
        ResultOfPassKeyboardInputToScaleform {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_animpostfx_stop_and_flush_requests(&self, effect_name_: Option<String>) -> ResultOfAnimpostfxStopAndFlushRequests {
    unsafe {
        let mut effect_name_ = sdk_helpers::create_c_string_ptr(effect_name_);
        let success = sdk::natives::animpostfx_stop_and_flush_requests(
            effect_name_.as_ref().unwrap(),
        );
        
        
        ResultOfAnimpostfxStopAndFlushRequests {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_vehicle_crew_emblem(&self, vehicle_: u32,
p1_: i32) -> ResultOfRemoveVehicleCrewEmblem {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::remove_vehicle_crew_emblem(
            vehicle_,
p1_,
        );
        
        
        ResultOfRemoveVehicleCrewEmblem {
            success,
            ret: (),
            
        }
    }
}

    fn native_cascade_shadows_set_cascade_bounds(&self, p0_: i32,
p1_: bool,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: bool,
p7_: f32) -> ResultOfCascadeShadowsSetCascadeBounds {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::cascade_shadows_set_cascade_bounds(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
        );
        
        
        ResultOfCascadeShadowsSetCascadeBounds {
            success,
            ret: (),
            
        }
    }
}

    fn native_cascade_shadows_set_dynamic_depth_mode(&self, p0_: bool) -> ResultOfCascadeShadowsSetDynamicDepthMode {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::cascade_shadows_set_dynamic_depth_mode(
            p0_,
        );
        
        
        ResultOfCascadeShadowsSetDynamicDepthMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_ui3dscene_is_available(&self, ) -> ResultOfUi3dsceneIsAvailable {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ui3dscene_is_available(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfUi3dsceneIsAvailable {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_draw_box(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOfDrawBox {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_box(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOfDrawBox {
            success,
            ret: (),
            
        }
    }
}

    fn native_scaleform_movie_method_add_param_float(&self, value_: f32) -> ResultOfScaleformMovieMethodAddParamFloat {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::scaleform_movie_method_add_param_float(
            value_,
        );
        
        
        ResultOfScaleformMovieMethodAddParamFloat {
            success,
            ret: (),
            
        }
    }
}

    fn native_preset_interior_ambient_cache(&self, timecycle_modifier_name_: Option<String>) -> ResultOfPresetInteriorAmbientCache {
    unsafe {
        let mut timecycle_modifier_name_ = sdk_helpers::create_c_string_ptr(timecycle_modifier_name_);
        let success = sdk::natives::preset_interior_ambient_cache(
            timecycle_modifier_name_.as_ref().unwrap(),
        );
        
        
        ResultOfPresetInteriorAmbientCache {
            success,
            ret: (),
            
        }
    }
}

    fn native_fade_decals_in_range(&self, x_: f32,
y_: f32,
z_: f32,
p3_: f32,
p4_: f32) -> ResultOfFadeDecalsInRange {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::fade_decals_in_range(
            x_,
y_,
z_,
p3_,
p4_,
        );
        
        
        ResultOfFadeDecalsInRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_seethrough_set_heatscale(&self, index_: i32,
heat_scale_: f32) -> ResultOfSeethroughSetHeatscale {
    unsafe {
        let mut index_ = index_;
let mut heat_scale_ = heat_scale_;
        let success = sdk::natives::seethrough_set_heatscale(
            index_,
heat_scale_,
        );
        
        
        ResultOfSeethroughSetHeatscale {
            success,
            ret: (),
            
        }
    }
}

    fn native_free_memory_for_high_quality_photo(&self, ) -> ResultOfFreeMemoryForHighQualityPhoto {
    unsafe {
        
        let success = sdk::natives::free_memory_for_high_quality_photo(
            
        );
        
        
        ResultOfFreeMemoryForHighQualityPhoto {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_scaleform_movie_method_return_value_bool(&self, method_return_: i32) -> ResultOfGetScaleformMovieMethodReturnValueBool {
    unsafe {
        let mut native_return = Default::default();
let mut method_return_ = method_return_;
        let success = sdk::natives::get_scaleform_movie_method_return_value_bool(
            &mut native_return,
method_return_,
        );
        let native_return = native_return;
        
        ResultOfGetScaleformMovieMethodReturnValueBool {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_enable_clown_blood_vfx(&self, toggle_: bool) -> ResultOfEnableClownBloodVfx {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::enable_clown_blood_vfx(
            toggle_,
        );
        
        
        ResultOfEnableClownBloodVfx {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_debug_line_with_two_colours(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
r1_: i32,
g1_: i32,
b1_: i32,
r2_: i32,
g2_: i32,
b2_: i32,
alpha1_: i32,
alpha2_: i32) -> ResultOfDrawDebugLineWithTwoColours {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut r1_ = r1_;
let mut g1_ = g1_;
let mut b1_ = b1_;
let mut r2_ = r2_;
let mut g2_ = g2_;
let mut b2_ = b2_;
let mut alpha1_ = alpha1_;
let mut alpha2_ = alpha2_;
        let success = sdk::natives::draw_debug_line_with_two_colours(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
r1_,
g1_,
b1_,
r2_,
g2_,
b2_,
alpha1_,
alpha2_,
        );
        
        
        ResultOfDrawDebugLineWithTwoColours {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_petrol_decals_igniting_this_frame(&self, ) -> ResultOfSetDisablePetrolDecalsIgnitingThisFrame {
    unsafe {
        
        let success = sdk::natives::set_disable_petrol_decals_igniting_this_frame(
            
        );
        
        
        ResultOfSetDisablePetrolDecalsIgnitingThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_checkpoint_force_direction(&self, checkpoint_: i32) -> ResultOfSetCheckpointForceDirection {
    unsafe {
        let mut checkpoint_ = checkpoint_;
        let success = sdk::natives::set_checkpoint_force_direction(
            checkpoint_,
        );
        
        
        ResultOfSetCheckpointForceDirection {
            success,
            ret: (),
            
        }
    }
}

    fn native_golf_trail_set_tessellation(&self, p0_: i32,
p1_: i32) -> ResultOfGolfTrailSetTessellation {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::golf_trail_set_tessellation(
            p0_,
p1_,
        );
        
        
        ResultOfGolfTrailSetTessellation {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_render_in_game_ui(&self, toggle_: bool) -> ResultOfForceRenderInGameUi {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::force_render_in_game_ui(
            toggle_,
        );
        
        
        ResultOfForceRenderInGameUi {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_maximum_number_of_cloud_photos(&self, ) -> ResultOfGetMaximumNumberOfCloudPhotos {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_maximum_number_of_cloud_photos(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetMaximumNumberOfCloudPhotos {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_particle_fx_looped_far_clip_dist(&self, ptfx_handle_: i32,
range_: f32) -> ResultOfSetParticleFxLoopedFarClipDist {
    unsafe {
        let mut ptfx_handle_ = ptfx_handle_;
let mut range_ = range_;
        let success = sdk::natives::set_particle_fx_looped_far_clip_dist(
            ptfx_handle_,
range_,
        );
        
        
        ResultOfSetParticleFxLoopedFarClipDist {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_particle_fx_in_range(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOfRemoveParticleFxInRange {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::remove_particle_fx_in_range(
            x_,
y_,
z_,
radius_,
        );
        
        
        ResultOfRemoveParticleFxInRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_networked_particle_fx_looped_on_entity_bone(&self, effect_name_: Option<String>,
entity_: u32,
x_offset_: f32,
y_offset_: f32,
z_offset_: f32,
x_rot_: f32,
y_rot_: f32,
z_rot_: f32,
bone_index_: i32,
scale_: f32,
x_axis_: bool,
y_axis_: bool,
z_axis_: bool,
r_: f32,
g_: f32,
b_: f32,
a_: f32) -> ResultOfStartNetworkedParticleFxLoopedOnEntityBone {
    unsafe {
        let mut native_return = Default::default();
let mut effect_name_ = sdk_helpers::create_c_string_ptr(effect_name_);
let mut entity_ = entity_;
let mut x_offset_ = x_offset_;
let mut y_offset_ = y_offset_;
let mut z_offset_ = z_offset_;
let mut x_rot_ = x_rot_;
let mut y_rot_ = y_rot_;
let mut z_rot_ = z_rot_;
let mut bone_index_ = bone_index_;
let mut scale_ = scale_;
let mut x_axis_ = x_axis_;
let mut y_axis_ = y_axis_;
let mut z_axis_ = z_axis_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut a_ = a_;
        let success = sdk::natives::start_networked_particle_fx_looped_on_entity_bone(
            &mut native_return,
effect_name_.as_ref().unwrap(),
entity_,
x_offset_,
y_offset_,
z_offset_,
x_rot_,
y_rot_,
z_rot_,
bone_index_,
scale_,
x_axis_,
y_axis_,
z_axis_,
r_,
g_,
b_,
a_,
        );
        let native_return = native_return;
        
        ResultOfStartNetworkedParticleFxLoopedOnEntityBone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_screenblur_fade(&self, ) -> ResultOfDisableScreenblurFade {
    unsafe {
        
        let success = sdk::natives::disable_screenblur_fade(
            
        );
        
        
        ResultOfDisableScreenblurFade {
            success,
            ret: (),
            
        }
    }
}

    fn native_update_lights_on_entity(&self, entity_: u32) -> ResultOfUpdateLightsOnEntity {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::update_lights_on_entity(
            entity_,
        );
        
        
        ResultOfUpdateLightsOnEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_scaleform_script_hud_movie_loaded(&self, hud_component_: i32) -> ResultOfHasScaleformScriptHudMovieLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut hud_component_ = hud_component_;
        let success = sdk::natives::has_scaleform_script_hud_movie_loaded(
            &mut native_return,
hud_component_,
        );
        let native_return = native_return;
        
        ResultOfHasScaleformScriptHudMovieLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_streamed_texture_dict(&self, texture_dict_: Option<String>,
p1_: bool) -> ResultOfRequestStreamedTextureDict {
    unsafe {
        let mut texture_dict_ = sdk_helpers::create_c_string_ptr(texture_dict_);
let mut p1_ = p1_;
        let success = sdk::natives::request_streamed_texture_dict(
            texture_dict_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOfRequestStreamedTextureDict {
            success,
            ret: (),
            
        }
    }
}

    fn native_toggle_paused_renderphases(&self, toggle_: bool) -> ResultOfTogglePausedRenderphases {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::toggle_paused_renderphases(
            toggle_,
        );
        
        
        ResultOfTogglePausedRenderphases {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_icon_visibility(&self, entity_: u32,
toggle_: bool) -> ResultOfSetEntityIconVisibility {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_icon_visibility(
            entity_,
toggle_,
        );
        
        
        ResultOfSetEntityIconVisibility {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_particle_fx_looped_at_coord(&self, effect_name_: Option<String>,
x_: f32,
y_: f32,
z_: f32,
x_rot_: f32,
y_rot_: f32,
z_rot_: f32,
scale_: f32,
x_axis_: bool,
y_axis_: bool,
z_axis_: bool,
p11_: bool) -> ResultOfStartParticleFxLoopedAtCoord {
    unsafe {
        let mut native_return = Default::default();
let mut effect_name_ = sdk_helpers::create_c_string_ptr(effect_name_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut x_rot_ = x_rot_;
let mut y_rot_ = y_rot_;
let mut z_rot_ = z_rot_;
let mut scale_ = scale_;
let mut x_axis_ = x_axis_;
let mut y_axis_ = y_axis_;
let mut z_axis_ = z_axis_;
let mut p11_ = p11_;
        let success = sdk::natives::start_particle_fx_looped_at_coord(
            &mut native_return,
effect_name_.as_ref().unwrap(),
x_,
y_,
z_,
x_rot_,
y_rot_,
z_rot_,
scale_,
x_axis_,
y_axis_,
z_axis_,
p11_,
        );
        let native_return = native_return;
        
        ResultOfStartParticleFxLoopedAtCoord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_paused_renderphases(&self, ) -> ResultOfResetPausedRenderphases {
    unsafe {
        
        let success = sdk::natives::reset_paused_renderphases(
            
        );
        
        
        ResultOfResetPausedRenderphases {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_scaleform_movie_method_return_value_string(&self, method_return_: i32) -> ResultOfGetScaleformMovieMethodReturnValueString {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut method_return_ = method_return_;
        let success = sdk::natives::get_scaleform_movie_method_return_value_string(
            native_return.pin_mut(),
method_return_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetScaleformMovieMethodReturnValueString {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_distance_blur_strength_override(&self, p0_: f32) -> ResultOfSetDistanceBlurStrengthOverride {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_distance_blur_strength_override(
            p0_,
        );
        
        
        ResultOfSetDistanceBlurStrengthOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_artificial_vehicle_lights_state(&self, toggle_: bool) -> ResultOfSetArtificialVehicleLightsState {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_artificial_vehicle_lights_state(
            toggle_,
        );
        
        
        ResultOfSetArtificialVehicleLightsState {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_tracked_point(&self, ) -> ResultOfCreateTrackedPoint {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::create_tracked_point(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfCreateTrackedPoint {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_animpostfx_get_current_time(&self, effect_name_: Option<String>) -> ResultOfAnimpostfxGetCurrentTime {
    unsafe {
        let mut native_return = Default::default();
let mut effect_name_ = sdk_helpers::create_c_string_ptr(effect_name_);
        let success = sdk::natives::animpostfx_get_current_time(
            &mut native_return,
effect_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfAnimpostfxGetCurrentTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_script_gfx_align(&self, ) -> ResultOfResetScriptGfxAlign {
    unsafe {
        
        let success = sdk::natives::reset_script_gfx_align(
            
        );
        
        
        ResultOfResetScriptGfxAlign {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_adaptation(&self, p0_: i32) -> ResultOfResetAdaptation {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::reset_adaptation(
            p0_,
        );
        
        
        ResultOfResetAdaptation {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_motionblur_max_vel_scaler(&self, ) -> ResultOfGetMotionblurMaxVelScaler {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_motionblur_max_vel_scaler(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetMotionblurMaxVelScaler {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_toggle_player_damage_overlay(&self, toggle_: bool) -> ResultOfTogglePlayerDamageOverlay {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::toggle_player_damage_overlay(
            toggle_,
        );
        
        
        ResultOfTogglePlayerDamageOverlay {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_scaleform_movie_to_use_super_large_rt(&self, scaleform_handle_: i32,
toggle_: bool) -> ResultOfSetScaleformMovieToUseSuperLargeRt {
    unsafe {
        let mut scaleform_handle_ = scaleform_handle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_scaleform_movie_to_use_super_large_rt(
            scaleform_handle_,
toggle_,
        );
        
        
        ResultOfSetScaleformMovieToUseSuperLargeRt {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_noiseoveride(&self, toggle_: bool) -> ResultOfSetNoiseoveride {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_noiseoveride(
            toggle_,
        );
        
        
        ResultOfSetNoiseoveride {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_this_photo_slot_contain_a_valid_photo(&self, p0_: i32) -> ResultOfDoesThisPhotoSlotContainAvalidPhoto {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::does_this_photo_slot_contain_a_valid_photo(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfDoesThisPhotoSlotContainAvalidPhoto {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_draw_sprite(&self, texture_dict_: Option<String>,
texture_name_: Option<String>,
screen_x_: f32,
screen_y_: f32,
width_: f32,
height_: f32,
heading_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32,
p11_: bool,
p12_: i32) -> ResultOfDrawSprite {
    unsafe {
        let mut texture_dict_ = sdk_helpers::create_c_string_ptr(texture_dict_);
let mut texture_name_ = sdk_helpers::create_c_string_ptr(texture_name_);
let mut screen_x_ = screen_x_;
let mut screen_y_ = screen_y_;
let mut width_ = width_;
let mut height_ = height_;
let mut heading_ = heading_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
let mut p11_ = p11_;
let mut p12_ = p12_;
        let success = sdk::natives::draw_sprite(
            texture_dict_.as_ref().unwrap(),
texture_name_.as_ref().unwrap(),
screen_x_,
screen_y_,
width_,
height_,
heading_,
red_,
green_,
blue_,
alpha_,
p11_,
p12_,
        );
        
        
        ResultOfDrawSprite {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_marker_ex(&self, type_: i32,
pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
dir_x_: f32,
dir_y_: f32,
dir_z_: f32,
rot_x_: f32,
rot_y_: f32,
rot_z_: f32,
scale_x_: f32,
scale_y_: f32,
scale_z_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32,
bob_up_and_down_: bool,
face_camera_: bool,
p19_: i32,
rotate_: bool,
texture_dict_: Option<String>,
texture_name_: Option<String>,
draw_on_ents_: bool,
p24_: bool,
p25_: bool) -> ResultOfDrawMarkerEx {
    unsafe {
        let mut type_ = type_;
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut dir_x_ = dir_x_;
let mut dir_y_ = dir_y_;
let mut dir_z_ = dir_z_;
let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
let mut scale_x_ = scale_x_;
let mut scale_y_ = scale_y_;
let mut scale_z_ = scale_z_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
let mut bob_up_and_down_ = bob_up_and_down_;
let mut face_camera_ = face_camera_;
let mut p19_ = p19_;
let mut rotate_ = rotate_;
let mut texture_dict_ = sdk_helpers::create_c_string_ptr(texture_dict_);
let mut texture_name_ = sdk_helpers::create_c_string_ptr(texture_name_);
let mut draw_on_ents_ = draw_on_ents_;
let mut p24_ = p24_;
let mut p25_ = p25_;
        let success = sdk::natives::draw_marker_ex(
            type_,
pos_x_,
pos_y_,
pos_z_,
dir_x_,
dir_y_,
dir_z_,
rot_x_,
rot_y_,
rot_z_,
scale_x_,
scale_y_,
scale_z_,
red_,
green_,
blue_,
alpha_,
bob_up_and_down_,
face_camera_,
p19_,
rotate_,
texture_dict_.as_ref().unwrap(),
texture_name_.as_ref().unwrap(),
draw_on_ents_,
p24_,
p25_,
        );
        
        
        ResultOfDrawMarkerEx {
            success,
            ret: (),
            
        }
    }
}

    fn native_scaleform_movie_method_add_param_player_name_string(&self, string_: Option<String>) -> ResultOfScaleformMovieMethodAddParamPlayerNameString {
    unsafe {
        let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::scaleform_movie_method_add_param_player_name_string(
            string_.as_ref().unwrap(),
        );
        
        
        ResultOfScaleformMovieMethodAddParamPlayerNameString {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_decals_from_vehicle(&self, vehicle_: u32) -> ResultOfRemoveDecalsFromVehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::remove_decals_from_vehicle(
            vehicle_,
        );
        
        
        ResultOfRemoveDecalsFromVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_override(&self, old_asset_: Option<String>,
new_asset_: Option<String>) -> ResultOfSetParticleFxOverride {
    unsafe {
        let mut old_asset_ = sdk_helpers::create_c_string_ptr(old_asset_);
let mut new_asset_ = sdk_helpers::create_c_string_ptr(new_asset_);
        let success = sdk::natives::set_particle_fx_override(
            old_asset_.as_ref().unwrap(),
new_asset_.as_ref().unwrap(),
        );
        
        
        ResultOfSetParticleFxOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_release_movie_mesh_set(&self, movie_mesh_set_: i32) -> ResultOfReleaseMovieMeshSet {
    unsafe {
        let mut movie_mesh_set_ = movie_mesh_set_;
        let success = sdk::natives::release_movie_mesh_set(
            movie_mesh_set_,
        );
        
        
        ResultOfReleaseMovieMeshSet {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_toggle_paused_renderphases_status(&self, ) -> ResultOfGetTogglePausedRenderphasesStatus {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_toggle_paused_renderphases_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetTogglePausedRenderphasesStatus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_scaleform_movie_method_add_param_latest_brief_string(&self, value_: i32) -> ResultOfScaleformMovieMethodAddParamLatestBriefString {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::scaleform_movie_method_add_param_latest_brief_string(
            value_,
        );
        
        
        ResultOfScaleformMovieMethodAddParamLatestBriefString {
            success,
            ret: (),
            
        }
    }
}

    fn native_load_high_quality_photo(&self, p0_: i32) -> ResultOfLoadHighQualityPhoto {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::load_high_quality_photo(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfLoadHighQualityPhoto {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_decal(&self, decal_: i32) -> ResultOfRemoveDecal {
    unsafe {
        let mut decal_ = decal_;
        let success = sdk::natives::remove_decal(
            decal_,
        );
        
        
        ResultOfRemoveDecal {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_cam_inside_vehicle(&self, p0_: bool) -> ResultOfSetParticleFxCamInsideVehicle {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_particle_fx_cam_inside_vehicle(
            p0_,
        );
        
        
        ResultOfSetParticleFxCamInsideVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_exposuretweak(&self, toggle_: bool) -> ResultOfSetExposuretweak {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_exposuretweak(
            toggle_,
        );
        
        
        ResultOfSetExposuretweak {
            success,
            ret: (),
            
        }
    }
}

    fn native_call_scaleform_movie_method_with_number_and_string(&self, scaleform_: i32,
method_name_: Option<String>,
float_param1_: f32,
float_param2_: f32,
float_param3_: f32,
float_param4_: f32,
float_param5_: f32,
string_param1_: Option<String>,
string_param2_: Option<String>,
string_param3_: Option<String>,
string_param4_: Option<String>,
string_param5_: Option<String>) -> ResultOfCallScaleformMovieMethodWithNumberAndString {
    unsafe {
        let mut scaleform_ = scaleform_;
let mut method_name_ = sdk_helpers::create_c_string_ptr(method_name_);
let mut float_param1_ = float_param1_;
let mut float_param2_ = float_param2_;
let mut float_param3_ = float_param3_;
let mut float_param4_ = float_param4_;
let mut float_param5_ = float_param5_;
let mut string_param1_ = sdk_helpers::create_c_string_ptr(string_param1_);
let mut string_param2_ = sdk_helpers::create_c_string_ptr(string_param2_);
let mut string_param3_ = sdk_helpers::create_c_string_ptr(string_param3_);
let mut string_param4_ = sdk_helpers::create_c_string_ptr(string_param4_);
let mut string_param5_ = sdk_helpers::create_c_string_ptr(string_param5_);
        let success = sdk::natives::call_scaleform_movie_method_with_number_and_string(
            scaleform_,
method_name_.as_ref().unwrap(),
float_param1_,
float_param2_,
float_param3_,
float_param4_,
float_param5_,
string_param1_.as_ref().unwrap(),
string_param2_.as_ref().unwrap(),
string_param3_.as_ref().unwrap(),
string_param4_.as_ref().unwrap(),
string_param5_.as_ref().unwrap(),
        );
        
        
        ResultOfCallScaleformMovieMethodWithNumberAndString {
            success,
            ret: (),
            
        }
    }
}

    fn native_adjust_next_pos_size_as_normalized169(&self, ) -> ResultOfAdjustNextPosSizeAsNormalized169 {
    unsafe {
        
        let success = sdk::natives::adjust_next_pos_size_as_normalized169(
            
        );
        
        
        ResultOfAdjustNextPosSizeAsNormalized169 {
            success,
            ret: (),
            
        }
    }
}

    fn native_trigger_screenblur_fade_out(&self, transition_time_: f32) -> ResultOfTriggerScreenblurFadeOut {
    unsafe {
        let mut native_return = Default::default();
let mut transition_time_ = transition_time_;
        let success = sdk::natives::trigger_screenblur_fade_out(
            &mut native_return,
transition_time_,
        );
        let native_return = native_return;
        
        ResultOfTriggerScreenblurFadeOut {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_override_interior_smoke_end(&self, ) -> ResultOfOverrideInteriorSmokeEnd {
    unsafe {
        
        let success = sdk::natives::override_interior_smoke_end(
            
        );
        
        
        ResultOfOverrideInteriorSmokeEnd {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_region_vfx(&self, p0_: i32) -> ResultOfDisableRegionVfx {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::disable_region_vfx(
            p0_,
        );
        
        
        ResultOfDisableRegionVfx {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_aspect_ratio(&self, b_: bool) -> ResultOfGetAspectRatio {
    unsafe {
        let mut native_return = Default::default();
let mut b_ = b_;
        let success = sdk::natives::get_aspect_ratio(
            &mut native_return,
b_,
        );
        let native_return = native_return;
        
        ResultOfGetAspectRatio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ui3dscene_push_preset(&self, preset_name_: Option<String>) -> ResultOfUi3dscenePushPreset {
    unsafe {
        let mut native_return = Default::default();
let mut preset_name_ = sdk_helpers::create_c_string_ptr(preset_name_);
        let success = sdk::natives::ui3dscene_push_preset(
            &mut native_return,
preset_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfUi3dscenePushPreset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_particle_fx_looped_on_ped_bone(&self, effect_name_: Option<String>,
ped_: u32,
x_offset_: f32,
y_offset_: f32,
z_offset_: f32,
x_rot_: f32,
y_rot_: f32,
z_rot_: f32,
bone_index_: i32,
scale_: f32,
x_axis_: bool,
y_axis_: bool,
z_axis_: bool) -> ResultOfStartParticleFxLoopedOnPedBone {
    unsafe {
        let mut native_return = Default::default();
let mut effect_name_ = sdk_helpers::create_c_string_ptr(effect_name_);
let mut ped_ = ped_;
let mut x_offset_ = x_offset_;
let mut y_offset_ = y_offset_;
let mut z_offset_ = z_offset_;
let mut x_rot_ = x_rot_;
let mut y_rot_ = y_rot_;
let mut z_rot_ = z_rot_;
let mut bone_index_ = bone_index_;
let mut scale_ = scale_;
let mut x_axis_ = x_axis_;
let mut y_axis_ = y_axis_;
let mut z_axis_ = z_axis_;
        let success = sdk::natives::start_particle_fx_looped_on_ped_bone(
            &mut native_return,
effect_name_.as_ref().unwrap(),
ped_,
x_offset_,
y_offset_,
z_offset_,
x_rot_,
y_rot_,
z_rot_,
bone_index_,
scale_,
x_axis_,
y_axis_,
z_axis_,
        );
        let native_return = native_return;
        
        ResultOfStartParticleFxLoopedOnPedBone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_draw_light_with_range(&self, pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
color_r_: i32,
color_g_: i32,
color_b_: i32,
range_: f32,
intensity_: f32) -> ResultOfDrawLightWithRange {
    unsafe {
        let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut color_r_ = color_r_;
let mut color_g_ = color_g_;
let mut color_b_ = color_b_;
let mut range_ = range_;
let mut intensity_ = intensity_;
        let success = sdk::natives::draw_light_with_range(
            pos_x_,
pos_y_,
pos_z_,
color_r_,
color_g_,
color_b_,
range_,
intensity_,
        );
        
        
        ResultOfDrawLightWithRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_arena_theme_and_variation_for_taken_photo(&self, p0_: i32,
p1_: i32) -> ResultOfSetArenaThemeAndVariationForTakenPhoto {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_arena_theme_and_variation_for_taken_photo(
            p0_,
p1_,
        );
        
        
        ResultOfSetArenaThemeAndVariationForTakenPhoto {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_scaleform_script_hud_movie(&self, hud_component_: i32) -> ResultOfRemoveScaleformScriptHudMovie {
    unsafe {
        let mut hud_component_ = hud_component_;
        let success = sdk::natives::remove_scaleform_script_hud_movie(
            hud_component_,
        );
        
        
        ResultOfRemoveScaleformScriptHudMovie {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_light_with_rangeex(&self, x_: f32,
y_: f32,
z_: f32,
r_: i32,
g_: i32,
b_: i32,
range_: f32,
intensity_: f32,
shadow_: f32) -> ResultOfDrawLightWithRangeex {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut range_ = range_;
let mut intensity_ = intensity_;
let mut shadow_ = shadow_;
        let success = sdk::natives::draw_light_with_rangeex(
            x_,
y_,
z_,
r_,
g_,
b_,
range_,
intensity_,
shadow_,
        );
        
        
        ResultOfDrawLightWithRangeex {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_checkpoint_clipplane_with_pos_norm(&self, checkpoint_: i32,
pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
unk_x_: f32,
unk_y_: f32,
unk_z_: f32) -> ResultOfSetCheckpointClipplaneWithPosNorm {
    unsafe {
        let mut checkpoint_ = checkpoint_;
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut unk_x_ = unk_x_;
let mut unk_y_ = unk_y_;
let mut unk_z_ = unk_z_;
        let success = sdk::natives::set_checkpoint_clipplane_with_pos_norm(
            checkpoint_,
pos_x_,
pos_y_,
pos_z_,
unk_x_,
unk_y_,
unk_z_,
        );
        
        
        ResultOfSetCheckpointClipplaneWithPosNorm {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_networked_particle_fx_non_looped_at_coord(&self, effect_name_: Option<String>,
x_pos_: f32,
y_pos_: f32,
z_pos_: f32,
x_rot_: f32,
y_rot_: f32,
z_rot_: f32,
scale_: f32,
x_axis_: bool,
y_axis_: bool,
z_axis_: bool,
p11_: bool) -> ResultOfStartNetworkedParticleFxNonLoopedAtCoord {
    unsafe {
        let mut native_return = Default::default();
let mut effect_name_ = sdk_helpers::create_c_string_ptr(effect_name_);
let mut x_pos_ = x_pos_;
let mut y_pos_ = y_pos_;
let mut z_pos_ = z_pos_;
let mut x_rot_ = x_rot_;
let mut y_rot_ = y_rot_;
let mut z_rot_ = z_rot_;
let mut scale_ = scale_;
let mut x_axis_ = x_axis_;
let mut y_axis_ = y_axis_;
let mut z_axis_ = z_axis_;
let mut p11_ = p11_;
        let success = sdk::natives::start_networked_particle_fx_non_looped_at_coord(
            &mut native_return,
effect_name_.as_ref().unwrap(),
x_pos_,
y_pos_,
z_pos_,
x_rot_,
y_rot_,
z_rot_,
scale_,
x_axis_,
y_axis_,
z_axis_,
p11_,
        );
        let native_return = native_return;
        
        ResultOfStartNetworkedParticleFxNonLoopedAtCoord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_script_gfx_align_params(&self, x_: f32,
y_: f32,
w_: f32,
h_: f32) -> ResultOfSetScriptGfxAlignParams {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut w_ = w_;
let mut h_ = h_;
        let success = sdk::natives::set_script_gfx_align_params(
            x_,
y_,
w_,
h_,
        );
        
        
        ResultOfSetScriptGfxAlignParams {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_status_of_sorted_list_operation(&self, p0_: i32) -> ResultOfGetStatusOfSortedListOperation {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_status_of_sorted_list_operation(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfGetStatusOfSortedListOperation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_delete_checkpoint(&self, checkpoint_: i32) -> ResultOfDeleteCheckpoint {
    unsafe {
        let mut checkpoint_ = checkpoint_;
        let success = sdk::natives::delete_checkpoint(
            checkpoint_,
        );
        
        
        ResultOfDeleteCheckpoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_scaleform_movie_method(&self, scaleform_: i32,
method_name_: Option<String>) -> ResultOfBeginScaleformMovieMethod {
    unsafe {
        let mut native_return = Default::default();
let mut scaleform_ = scaleform_;
let mut method_name_ = sdk_helpers::create_c_string_ptr(method_name_);
        let success = sdk::natives::begin_scaleform_movie_method(
            &mut native_return,
scaleform_,
method_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfBeginScaleformMovieMethod {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_weather_ptfx_override_curr_level(&self, p0_: f32) -> ResultOfSetWeatherPtfxOverrideCurrLevel {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_weather_ptfx_override_curr_level(
            p0_,
        );
        
        
        ResultOfSetWeatherPtfxOverrideCurrLevel {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_tv_channel_playlist(&self, tv_channel_: i32,
playlist_name_: Option<String>,
restart_: bool) -> ResultOfSetTvChannelPlaylist {
    unsafe {
        let mut tv_channel_ = tv_channel_;
let mut playlist_name_ = sdk_helpers::create_c_string_ptr(playlist_name_);
let mut restart_ = restart_;
        let success = sdk::natives::set_tv_channel_playlist(
            tv_channel_,
playlist_name_.as_ref().unwrap(),
restart_,
        );
        
        
        ResultOfSetTvChannelPlaylist {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_particle_fx_looped_offsets(&self, ptfx_handle_: i32,
x_: f32,
y_: f32,
z_: f32,
rot_x_: f32,
rot_y_: f32,
rot_z_: f32) -> ResultOfSetParticleFxLoopedOffsets {
    unsafe {
        let mut ptfx_handle_ = ptfx_handle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
        let success = sdk::natives::set_particle_fx_looped_offsets(
            ptfx_handle_,
x_,
y_,
z_,
rot_x_,
rot_y_,
rot_z_,
        );
        
        
        ResultOfSetParticleFxLoopedOffsets {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_bink_movie_audio_frontend(&self, bink_movie_: i32,
p1_: bool) -> ResultOfSetBinkMovieAudioFrontend {
    unsafe {
        let mut bink_movie_ = bink_movie_;
let mut p1_ = p1_;
        let success = sdk::natives::set_bink_movie_audio_frontend(
            bink_movie_,
p1_,
        );
        
        
        ResultOfSetBinkMovieAudioFrontend {
            success,
            ret: (),
            
        }
    }
}

    fn native_call_scaleform_movie_method(&self, scaleform_: i32,
method_: Option<String>) -> ResultOfCallScaleformMovieMethod {
    unsafe {
        let mut scaleform_ = scaleform_;
let mut method_ = sdk_helpers::create_c_string_ptr(method_);
        let success = sdk::natives::call_scaleform_movie_method(
            scaleform_,
method_.as_ref().unwrap(),
        );
        
        
        ResultOfCallScaleformMovieMethod {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_tv_channel(&self, ) -> ResultOfGetTvChannel {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_tv_channel(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetTvChannel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_checkpoint_force_old_arrow_pointing(&self, checkpoint_: i32) -> ResultOfSetCheckpointForceOldArrowPointing {
    unsafe {
        let mut checkpoint_ = checkpoint_;
        let success = sdk::natives::set_checkpoint_force_old_arrow_pointing(
            checkpoint_,
        );
        
        
        ResultOfSetCheckpointForceOldArrowPointing {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_tv_channel(&self, x_pos_: f32,
y_pos_: f32,
x_scale_: f32,
y_scale_: f32,
rotation_: f32,
red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOfDrawTvChannel {
    unsafe {
        let mut x_pos_ = x_pos_;
let mut y_pos_ = y_pos_;
let mut x_scale_ = x_scale_;
let mut y_scale_ = y_scale_;
let mut rotation_ = rotation_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::draw_tv_channel(
            x_pos_,
y_pos_,
x_scale_,
y_scale_,
rotation_,
red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOfDrawTvChannel {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_timecycle_modifier_index(&self, ) -> ResultOfGetTimecycleModifierIndex {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_timecycle_modifier_index(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetTimecycleModifierIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_crew_emblem_request_state(&self, vehicle_: u32,
p1_: i32) -> ResultOfGetVehicleCrewEmblemRequestState {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::get_vehicle_crew_emblem_request_state(
            &mut native_return,
vehicle_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleCrewEmblemRequestState {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_seethrough_set_noise_max(&self, amount_: f32) -> ResultOfSeethroughSetNoiseMax {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::seethrough_set_noise_max(
            amount_,
        );
        
        
        ResultOfSeethroughSetNoiseMax {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_draw_origin(&self, ) -> ResultOfClearDrawOrigin {
    unsafe {
        
        let success = sdk::natives::clear_draw_origin(
            
        );
        
        
        ResultOfClearDrawOrigin {
            success,
            ret: (),
            
        }
    }
}

    fn native_seethrough_set_noise_min(&self, amount_: f32) -> ResultOfSeethroughSetNoiseMin {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::seethrough_set_noise_min(
            amount_,
        );
        
        
        ResultOfSeethroughSetNoiseMin {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_blip_rotation(&self, blip_: i32) -> ResultOfGetBlipRotation {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_rotation(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOfGetBlipRotation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_current_webpage_id(&self, ) -> ResultOfGetCurrentWebpageId {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_current_webpage_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetCurrentWebpageId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_additional_text_loaded(&self, slot_: i32) -> ResultOfHasAdditionalTextLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut slot_ = slot_;
        let success = sdk::natives::has_additional_text_loaded(
            &mut native_return,
slot_,
        );
        let native_return = native_return;
        
        ResultOfHasAdditionalTextLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_flash_ability_bar(&self, milliseconds_to_flash_: i32) -> ResultOfFlashAbilityBar {
    unsafe {
        let mut milliseconds_to_flash_ = milliseconds_to_flash_;
        let success = sdk::natives::flash_ability_bar(
            milliseconds_to_flash_,
        );
        
        
        ResultOfFlashAbilityBar {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_text_proportional(&self, p0_: bool) -> ResultOfSetTextProportional {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_text_proportional(
            p0_,
        );
        
        
        ResultOfSetTextProportional {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_text_component_integer(&self, value_: i32) -> ResultOfAddTextComponentInteger {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::add_text_component_integer(
            value_,
        );
        
        
        ResultOfAddTextComponentInteger {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_colour(&self, blip_: i32,
color_: i32) -> ResultOfSetBlipColour {
    unsafe {
        let mut blip_ = blip_;
let mut color_ = color_;
        let success = sdk::natives::set_blip_colour(
            blip_,
color_,
        );
        
        
        ResultOfSetBlipColour {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_director_mode_available(&self, toggle_: bool) -> ResultOfSetDirectorModeAvailable {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_director_mode_available(
            toggle_,
        );
        
        
        ResultOfSetDirectorModeAvailable {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_menu_ped_bool_stat(&self, stat_hash_: u32,
out_value_: bool) -> ResultOfGetMenuPedBoolStat {
    unsafe {
        let mut native_return = Default::default();
let mut stat_hash_ = stat_hash_;
let mut out_value_ = out_value_;
        let success = sdk::natives::get_menu_ped_bool_stat(
            &mut native_return,
&mut out_value_,
stat_hash_,
        );
        let native_return = native_return;
let out_value_ = out_value_;
        
        ResultOfGetMenuPedBoolStat {
            success,
            ret: native_return,
            out_value_
        }
    }
}

    fn native_set_max_armour_hud_display(&self, maximum_value_: i32) -> ResultOfSetMaxArmourHudDisplay {
    unsafe {
        let mut maximum_value_ = maximum_value_;
        let success = sdk::natives::set_max_armour_hud_display(
            maximum_value_,
        );
        
        
        ResultOfSetMaxArmourHudDisplay {
            success,
            ret: (),
            
        }
    }
}

    fn native_change_fake_mp_cash(&self, cash_: i32,
bank_: i32) -> ResultOfChangeFakeMpCash {
    unsafe {
        let mut cash_ = cash_;
let mut bank_ = bank_;
        let success = sdk::natives::change_fake_mp_cash(
            cash_,
bank_,
        );
        
        
        ResultOfChangeFakeMpCash {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_text_scale(&self, scale_: f32,
size_: f32) -> ResultOfSetTextScale {
    unsafe {
        let mut scale_ = scale_;
let mut size_ = size_;
        let success = sdk::natives::set_text_scale(
            scale_,
size_,
        );
        
        
        ResultOfSetTextScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_minimap_fow_reveal_coordinate(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfSetMinimapFowRevealCoordinate {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_minimap_fow_reveal_coordinate(
            x_,
y_,
z_,
        );
        
        
        ResultOfSetMinimapFowRevealCoordinate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radar_zoom(&self, zoom_level_: i32) -> ResultOfSetRadarZoom {
    unsafe {
        let mut zoom_level_ = zoom_level_;
        let success = sdk::natives::set_radar_zoom(
            zoom_level_,
        );
        
        
        ResultOfSetRadarZoom {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_scripted_hud_component_hidden_this_frame(&self, id_: i32) -> ResultOfIsScriptedHudComponentHiddenThisFrame {
    unsafe {
        let mut native_return = Default::default();
let mut id_ = id_;
        let success = sdk::natives::is_scripted_hud_component_hidden_this_frame(
            &mut native_return,
id_,
        );
        let native_return = native_return;
        
        ResultOfIsScriptedHudComponentHiddenThisFrame {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_begin_text_command_is_this_help_message_being_displayed(&self, label_name_: Option<String>) -> ResultOfBeginTextCommandIsThisHelpMessageBeingDisplayed {
    unsafe {
        let mut label_name_ = sdk_helpers::create_c_string_ptr(label_name_);
        let success = sdk::natives::begin_text_command_is_this_help_message_being_displayed(
            label_name_.as_ref().unwrap(),
        );
        
        
        ResultOfBeginTextCommandIsThisHelpMessageBeingDisplayed {
            success,
            ret: (),
            
        }
    }
}

    fn native_hud_suppress_weapon_wheel_results_this_frame(&self, ) -> ResultOfHudSuppressWeaponWheelResultsThisFrame {
    unsafe {
        
        let success = sdk::natives::hud_suppress_weapon_wheel_results_this_frame(
            
        );
        
        
        ResultOfHudSuppressWeaponWheelResultsThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_show_hud_component_this_frame(&self, id_: i32) -> ResultOfShowHudComponentThisFrame {
    unsafe {
        let mut id_ = id_;
        let success = sdk::natives::show_hud_component_this_frame(
            id_,
        );
        
        
        ResultOfShowHudComponentThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_ai_blip_forced_on(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedAiBlipForcedOn {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_ai_blip_forced_on(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedAiBlipForcedOn {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_warning_message_option_items(&self, index_: i32,
name_: Option<String>,
cash_: i32,
rp_: i32,
lvl_: i32,
colour_: i32) -> ResultOfSetWarningMessageOptionItems {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut cash_ = cash_;
let mut rp_ = rp_;
let mut lvl_ = lvl_;
let mut colour_ = colour_;
        let success = sdk::natives::set_warning_message_option_items(
            &mut native_return,
index_,
name_.as_ref().unwrap(),
cash_,
rp_,
lvl_,
colour_,
        );
        let native_return = native_return;
        
        ResultOfSetWarningMessageOptionItems {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_use_vehicle_targeting_reticule(&self, p0_: i32) -> ResultOfUseVehicleTargetingReticule {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::use_vehicle_targeting_reticule(
            p0_,
        );
        
        
        ResultOfUseVehicleTargetingReticule {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_savegame_list_unique_id(&self, p0_: i32) -> ResultOfSetSavegameListUniqueId {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_savegame_list_unique_id(
            p0_,
        );
        
        
        ResultOfSetSavegameListUniqueId {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_text_component_formatted_integer(&self, value_: i32,
comma_separated_: bool) -> ResultOfAddTextComponentFormattedInteger {
    unsafe {
        let mut value_ = value_;
let mut comma_separated_ = comma_separated_;
        let success = sdk::natives::add_text_component_formatted_integer(
            value_,
comma_separated_,
        );
        
        
        ResultOfAddTextComponentFormattedInteger {
            success,
            ret: (),
            
        }
    }
}

    fn native_restart_frontend_menu(&self, menu_hash_: u32,
p1_: i32) -> ResultOfRestartFrontendMenu {
    unsafe {
        let mut menu_hash_ = menu_hash_;
let mut p1_ = p1_;
        let success = sdk::natives::restart_frontend_menu(
            menu_hash_,
p1_,
        );
        
        
        ResultOfRestartFrontendMenu {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_is_this_help_message_being_displayed(&self, p0_: i32) -> ResultOfEndTextCommandIsThisHelpMessageBeingDisplayed {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::end_text_command_is_this_help_message_being_displayed(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfEndTextCommandIsThisHelpMessageBeingDisplayed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_busyspinner_off(&self, ) -> ResultOfBusyspinnerOff {
    unsafe {
        
        let success = sdk::natives::busyspinner_off(
            
        );
        
        
        ResultOfBusyspinnerOff {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_text_component_substring_time(&self, timestamp_: i32,
flags_: i32) -> ResultOfAddTextComponentSubstringTime {
    unsafe {
        let mut timestamp_ = timestamp_;
let mut flags_ = flags_;
        let success = sdk::natives::add_text_component_substring_time(
            timestamp_,
flags_,
        );
        
        
        ResultOfAddTextComponentSubstringTime {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_sonar_blips_this_frame(&self, ) -> ResultOfForceSonarBlipsThisFrame {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::force_sonar_blips_this_frame(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfForceSonarBlipsThisFrame {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_named_rendertarget_linked(&self, model_hash_: u32) -> ResultOfIsNamedRendertargetLinked {
    unsafe {
        let mut native_return = Default::default();
let mut model_hash_ = model_hash_;
        let success = sdk::natives::is_named_rendertarget_linked(
            &mut native_return,
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfIsNamedRendertargetLinked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_text_input_box_enabled(&self, p0_: bool) -> ResultOfSetTextInputBoxEnabled {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_text_input_box_enabled(
            p0_,
        );
        
        
        ResultOfSetTextInputBoxEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_reticule_values(&self, ) -> ResultOfResetReticuleValues {
    unsafe {
        
        let success = sdk::natives::reset_reticule_values(
            
        );
        
        
        ResultOfResetReticuleValues {
            success,
            ret: (),
            
        }
    }
}

    fn native_lock_minimap_position(&self, x_: f32,
y_: f32) -> ResultOfLockMinimapPosition {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
        let success = sdk::natives::lock_minimap_position(
            x_,
y_,
        );
        
        
        ResultOfLockMinimapPosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_name_to_player_name(&self, blip_: i32,
player_: u32) -> ResultOfSetBlipNameToPlayerName {
    unsafe {
        let mut blip_ = blip_;
let mut player_ = player_;
        let success = sdk::natives::set_blip_name_to_player_name(
            blip_,
player_,
        );
        
        
        ResultOfSetBlipNameToPlayerName {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_show_cone(&self, blip_: i32,
toggle_: bool,
hud_color_index_: i32) -> ResultOfSetBlipShowCone {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
let mut hud_color_index_ = hud_color_index_;
        let success = sdk::natives::set_blip_show_cone(
            blip_,
toggle_,
hud_color_index_,
        );
        
        
        ResultOfSetBlipShowCone {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_crewtag_with_game_name(&self, p0_: bool,
p1_: bool,
p2_: i32,
p3_: i32,
is_leader_: bool,
unk0_: bool,
clan_desc_: i32,
player_name_: Option<String>,
r_: i32,
g_: i32,
b_: i32) -> ResultOfEndTextCommandThefeedPostCrewtagWithGameName {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut is_leader_ = is_leader_;
let mut unk0_ = unk0_;
let mut clan_desc_ = clan_desc_;
let mut player_name_ = sdk_helpers::create_c_string_ptr(player_name_);
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::end_text_command_thefeed_post_crewtag_with_game_name(
            &mut native_return,
&mut p2_,
p0_,
p1_,
p3_,
is_leader_,
unk0_,
clan_desc_,
player_name_.as_ref().unwrap(),
r_,
g_,
b_,
        );
        let native_return = native_return;
let p2_ = p2_;
        
        ResultOfEndTextCommandThefeedPostCrewtagWithGameName {
            success,
            ret: native_return,
            p2_
        }
    }
}

    fn native_pause_menu_get_mouse_hover_unique_id(&self, ) -> ResultOfPauseMenuGetMouseHoverUniqueId {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::pause_menu_get_mouse_hover_unique_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfPauseMenuGetMouseHoverUniqueId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_release_control_of_frontend(&self, ) -> ResultOfReleaseControlOfFrontend {
    unsafe {
        
        let success = sdk::natives::release_control_of_frontend(
            
        );
        
        
        ResultOfReleaseControlOfFrontend {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_secondary_colour(&self, blip_: i32,
r_: i32,
g_: i32,
b_: i32) -> ResultOfSetBlipSecondaryColour {
    unsafe {
        let mut blip_ = blip_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::set_blip_secondary_colour(
            blip_,
r_,
g_,
b_,
        );
        
        
        ResultOfSetBlipSecondaryColour {
            success,
            ret: (),
            
        }
    }
}

    fn native_hud_showing_character_switch_selection(&self, toggle_: bool) -> ResultOfHudShowingCharacterSwitchSelection {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::hud_showing_character_switch_selection(
            toggle_,
        );
        
        
        ResultOfHudShowingCharacterSwitchSelection {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_next_blip_info_id(&self, blip_sprite_: i32) -> ResultOfGetNextBlipInfoId {
    unsafe {
        let mut native_return = Default::default();
let mut blip_sprite_ = blip_sprite_;
        let success = sdk::natives::get_next_blip_info_id(
            &mut native_return,
blip_sprite_,
        );
        let native_return = native_return;
        
        ResultOfGetNextBlipInfoId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mp_gamer_tags_point_health(&self, gamer_tag_id_: i32,
value_: i32,
maximum_value_: i32) -> ResultOfSetMpGamerTagsPointHealth {
    unsafe {
        let mut gamer_tag_id_ = gamer_tag_id_;
let mut value_ = value_;
let mut maximum_value_ = maximum_value_;
        let success = sdk::natives::set_mp_gamer_tags_point_health(
            gamer_tag_id_,
value_,
maximum_value_,
        );
        
        
        ResultOfSetMpGamerTagsPointHealth {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_radar_hidden(&self, ) -> ResultOfIsRadarHidden {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_radar_hidden(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsRadarHidden {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_warning_message_with_header_and_substring_flags_extended(&self, label_title_: Option<String>,
label_message_: Option<String>,
p2_: i32,
p3_: i32,
label_message2_: Option<String>,
p5_: bool,
p6_: i32,
p7_: i32,
p8_: Option<String>,
p9_: Option<String>,
background_: bool,
error_code_: i32) -> ResultOfSetWarningMessageWithHeaderAndSubstringFlagsExtended {
    unsafe {
        let mut label_title_ = sdk_helpers::create_c_string_ptr(label_title_);
let mut label_message_ = sdk_helpers::create_c_string_ptr(label_message_);
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut label_message2_ = sdk_helpers::create_c_string_ptr(label_message2_);
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = sdk_helpers::create_c_string_ptr(p8_);
let mut p9_ = sdk_helpers::create_c_string_ptr(p9_);
let mut background_ = background_;
let mut error_code_ = error_code_;
        let success = sdk::natives::set_warning_message_with_header_and_substring_flags_extended(
            label_title_.as_ref().unwrap(),
label_message_.as_ref().unwrap(),
p2_,
p3_,
label_message2_.as_ref().unwrap(),
p5_,
p6_,
p7_,
p8_.as_ref().unwrap(),
p9_.as_ref().unwrap(),
background_,
error_code_,
        );
        
        
        ResultOfSetWarningMessageWithHeaderAndSubstringFlagsExtended {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_ped_have_ai_blip(&self, ped_: u32) -> ResultOfDoesPedHaveAiBlip {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::does_ped_have_ai_blip(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfDoesPedHaveAiBlip {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_thefeed_show(&self, ) -> ResultOfThefeedShow {
    unsafe {
        
        let success = sdk::natives::thefeed_show(
            
        );
        
        
        ResultOfThefeedShow {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_character_from_audio_conversation_filename(&self, text_: Option<String>,
position_: i32,
length_: i32) -> ResultOfGetCharacterFromAudioConversationFilename {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut text_ = sdk_helpers::create_c_string_ptr(text_);
let mut position_ = position_;
let mut length_ = length_;
        let success = sdk::natives::get_character_from_audio_conversation_filename(
            native_return.pin_mut(),
text_.as_ref().unwrap(),
position_,
length_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetCharacterFromAudioConversationFilename {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_second_script_variable_hud_colour(&self, r_: i32,
g_: i32,
b_: i32,
a_: i32) -> ResultOfSetSecondScriptVariableHudColour {
    unsafe {
        let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut a_ = a_;
        let success = sdk::natives::set_second_script_variable_hud_colour(
            r_,
g_,
b_,
a_,
        );
        
        
        ResultOfSetSecondScriptVariableHudColour {
            success,
            ret: (),
            
        }
    }
}

    fn native_use_fake_mp_cash(&self, toggle_: bool) -> ResultOfUseFakeMpCash {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::use_fake_mp_cash(
            toggle_,
        );
        
        
        ResultOfUseFakeMpCash {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_text_component_substring_text_label_hash_key(&self, gxt_entry_hash_: u32) -> ResultOfAddTextComponentSubstringTextLabelHashKey {
    unsafe {
        let mut gxt_entry_hash_ = gxt_entry_hash_;
        let success = sdk::natives::add_text_component_substring_text_label_hash_key(
            gxt_entry_hash_,
        );
        
        
        ResultOfAddTextComponentSubstringTextLabelHashKey {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_set_rgba_parameter_for_next_message(&self, red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOfThefeedSetRgbaParameterForNextMessage {
    unsafe {
        let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::thefeed_set_rgba_parameter_for_next_message(
            red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOfThefeedSetRgbaParameterForNextMessage {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_set_flash_duration_parameter_for_next_message(&self, count_: i32) -> ResultOfThefeedSetFlashDurationParameterForNextMessage {
    unsafe {
        let mut count_ = count_;
        let success = sdk::natives::thefeed_set_flash_duration_parameter_for_next_message(
            count_,
        );
        
        
        ResultOfThefeedSetFlashDurationParameterForNextMessage {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_waypoint_blip_enum_id(&self, ) -> ResultOfGetWaypointBlipEnumId {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_waypoint_blip_enum_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetWaypointBlipEnumId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_hud_preference_switched_on(&self, ) -> ResultOfIsHudPreferenceSwitchedOn {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_hud_preference_switched_on(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsHudPreferenceSwitchedOn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_show_for_sale_icon_on_blip(&self, blip_: i32,
toggle_: bool) -> ResultOfShowForSaleIconOnBlip {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::show_for_sale_icon_on_blip(
            blip_,
toggle_,
        );
        
        
        ResultOfShowForSaleIconOnBlip {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_minimap_in_spectator_mode(&self, toggle_: bool,
ped_: u32) -> ResultOfSetMinimapInSpectatorMode {
    unsafe {
        let mut toggle_ = toggle_;
let mut ped_ = ped_;
        let success = sdk::natives::set_minimap_in_spectator_mode(
            toggle_,
ped_,
        );
        
        
        ResultOfSetMinimapInSpectatorMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_named_rendertarget_render_id(&self, name_: Option<String>) -> ResultOfGetNamedRendertargetRenderId {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::get_named_rendertarget_render_id(
            &mut native_return,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfGetNamedRendertargetRenderId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_close_mp_text_chat(&self, ) -> ResultOfCloseMpTextChat {
    unsafe {
        
        let success = sdk::natives::close_mp_text_chat(
            
        );
        
        
        ResultOfCloseMpTextChat {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_first_blip_info_id(&self, blip_sprite_: i32) -> ResultOfGetFirstBlipInfoId {
    unsafe {
        let mut native_return = Default::default();
let mut blip_sprite_ = blip_sprite_;
        let success = sdk::natives::get_first_blip_info_id(
            &mut native_return,
blip_sprite_,
        );
        let native_return = native_return;
        
        ResultOfGetFirstBlipInfoId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_pause_menu_restarting(&self, ) -> ResultOfIsPauseMenuRestarting {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_pause_menu_restarting(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsPauseMenuRestarting {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_text_block_exist(&self, gxt_: Option<String>) -> ResultOfDoesTextBlockExist {
    unsafe {
        let mut native_return = Default::default();
let mut gxt_ = sdk_helpers::create_c_string_ptr(gxt_);
        let success = sdk::natives::does_text_block_exist(
            &mut native_return,
gxt_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfDoesTextBlockExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_text_drop_shadow(&self, ) -> ResultOfSetTextDropShadow {
    unsafe {
        
        let success = sdk::natives::set_text_drop_shadow(
            
        );
        
        
        ResultOfSetTextDropShadow {
            success,
            ret: (),
            
        }
    }
}

    fn native_replace_hud_colour(&self, hud_color_index_: i32,
hud_color_index2_: i32) -> ResultOfReplaceHudColour {
    unsafe {
        let mut hud_color_index_ = hud_color_index_;
let mut hud_color_index2_ = hud_color_index2_;
        let success = sdk::natives::replace_hud_colour(
            hud_color_index_,
hud_color_index2_,
        );
        
        
        ResultOfReplaceHudColour {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_messagetext(&self, txd_name_: Option<String>,
texture_name_: Option<String>,
flash_: bool,
icon_type_: i32,
sender_: Option<String>,
subject_: Option<String>) -> ResultOfEndTextCommandThefeedPostMessagetext {
    unsafe {
        let mut native_return = Default::default();
let mut txd_name_ = sdk_helpers::create_c_string_ptr(txd_name_);
let mut texture_name_ = sdk_helpers::create_c_string_ptr(texture_name_);
let mut flash_ = flash_;
let mut icon_type_ = icon_type_;
let mut sender_ = sdk_helpers::create_c_string_ptr(sender_);
let mut subject_ = sdk_helpers::create_c_string_ptr(subject_);
        let success = sdk::natives::end_text_command_thefeed_post_messagetext(
            &mut native_return,
txd_name_.as_ref().unwrap(),
texture_name_.as_ref().unwrap(),
flash_,
icon_type_,
sender_.as_ref().unwrap(),
subject_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfEndTextCommandThefeedPostMessagetext {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_mp_text_chat_disable(&self, toggle_: bool) -> ResultOfMpTextChatDisable {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::mp_text_chat_disable(
            toggle_,
        );
        
        
        ResultOfMpTextChatDisable {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_waypoint_active(&self, ) -> ResultOfIsWaypointActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_waypoint_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsWaypointActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ability_bar_visibility(&self, visible_: bool) -> ResultOfSetAbilityBarVisibility {
    unsafe {
        let mut visible_ = visible_;
        let success = sdk::natives::set_ability_bar_visibility(
            visible_,
        );
        
        
        ResultOfSetAbilityBarVisibility {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_blip_info_id_display(&self, blip_: i32) -> ResultOfGetBlipInfoIdDisplay {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_info_id_display(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOfGetBlipInfoIdDisplay {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_end_text_command_thefeed_post_messagetext_tu(&self, txd_name_: Option<String>,
texture_name_: Option<String>,
flash_: bool,
icon_type_: i32,
sender_: Option<String>,
subject_: Option<String>,
duration_: f32) -> ResultOfEndTextCommandThefeedPostMessagetextTu {
    unsafe {
        let mut native_return = Default::default();
let mut txd_name_ = sdk_helpers::create_c_string_ptr(txd_name_);
let mut texture_name_ = sdk_helpers::create_c_string_ptr(texture_name_);
let mut flash_ = flash_;
let mut icon_type_ = icon_type_;
let mut sender_ = sdk_helpers::create_c_string_ptr(sender_);
let mut subject_ = sdk_helpers::create_c_string_ptr(subject_);
let mut duration_ = duration_;
        let success = sdk::natives::end_text_command_thefeed_post_messagetext_tu(
            &mut native_return,
txd_name_.as_ref().unwrap(),
texture_name_.as_ref().unwrap(),
flash_,
icon_type_,
sender_.as_ref().unwrap(),
subject_.as_ref().unwrap(),
duration_,
        );
        let native_return = native_return;
        
        ResultOfEndTextCommandThefeedPostMessagetextTu {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_race_track_render(&self, toggle_: bool) -> ResultOfSetRaceTrackRender {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_race_track_render(
            toggle_,
        );
        
        
        ResultOfSetRaceTrackRender {
            success,
            ret: (),
            
        }
    }
}

    fn native_custom_minimap_set_blip_object(&self, sprite_id_: i32) -> ResultOfCustomMinimapSetBlipObject {
    unsafe {
        let mut sprite_id_ = sprite_id_;
        let success = sdk::natives::custom_minimap_set_blip_object(
            sprite_id_,
        );
        
        
        ResultOfCustomMinimapSetBlipObject {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_blip_sprite(&self, blip_: i32) -> ResultOfGetBlipSprite {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_sprite(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOfGetBlipSprite {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_begin_text_command_thefeed_post(&self, text_: Option<String>) -> ResultOfBeginTextCommandThefeedPost {
    unsafe {
        let mut text_ = sdk_helpers::create_c_string_ptr(text_);
        let success = sdk::natives::begin_text_command_thefeed_post(
            text_.as_ref().unwrap(),
        );
        
        
        ResultOfBeginTextCommandThefeedPost {
            success,
            ret: (),
            
        }
    }
}

    fn native_hide_minimap_interior_map_this_frame(&self, ) -> ResultOfHideMinimapInteriorMapThisFrame {
    unsafe {
        
        let success = sdk::natives::hide_minimap_interior_map_this_frame(
            
        );
        
        
        ResultOfHideMinimapInteriorMapThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_draw_frontend_background_this_frame(&self, ) -> ResultOfDrawFrontendBackgroundThisFrame {
    unsafe {
        
        let success = sdk::natives::draw_frontend_background_this_frame(
            
        );
        
        
        ResultOfDrawFrontendBackgroundThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_script_hidden_help_this_frame(&self, ) -> ResultOfHasScriptHiddenHelpThisFrame {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_script_hidden_help_this_frame(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfHasScriptHiddenHelpThisFrame {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_scripted_gfx_when_frontend_active(&self, p0_: Option<String>) -> ResultOfForceScriptedGfxWhenFrontendActive {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::force_scripted_gfx_when_frontend_active(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOfForceScriptedGfxWhenFrontendActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_gps_flags(&self, ) -> ResultOfClearGpsFlags {
    unsafe {
        
        let success = sdk::natives::clear_gps_flags(
            
        );
        
        
        ResultOfClearGpsFlags {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_hud_component_position(&self, id_: i32) -> ResultOfGetHudComponentPosition {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut id_ = id_;
        let success = sdk::natives::get_hud_component_position(
            native_return.pin_mut(),
id_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetHudComponentPosition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_current_frontend_menu_version(&self, ) -> ResultOfGetCurrentFrontendMenuVersion {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_current_frontend_menu_version(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetCurrentFrontendMenuVersion {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_bigmap_active(&self, toggle_big_map_: bool,
show_full_map_: bool) -> ResultOfSetBigmapActive {
    unsafe {
        let mut toggle_big_map_ = toggle_big_map_;
let mut show_full_map_ = show_full_map_;
        let success = sdk::natives::set_bigmap_active(
            toggle_big_map_,
show_full_map_,
        );
        
        
        ResultOfSetBigmapActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_category(&self, blip_: i32,
index_: i32) -> ResultOfSetBlipCategory {
    unsafe {
        let mut blip_ = blip_;
let mut index_ = index_;
        let success = sdk::natives::set_blip_category(
            blip_,
index_,
        );
        
        
        ResultOfSetBlipCategory {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_display_help(&self, p0_: i32,
loop_: bool,
beep_: bool,
shape_: i32) -> ResultOfEndTextCommandDisplayHelp {
    unsafe {
        let mut p0_ = p0_;
let mut loop_ = loop_;
let mut beep_ = beep_;
let mut shape_ = shape_;
        let success = sdk::natives::end_text_command_display_help(
            p0_,
loop_,
beep_,
shape_,
        );
        
        
        ResultOfEndTextCommandDisplayHelp {
            success,
            ret: (),
            
        }
    }
}

    fn native_show_friend_indicator_on_blip(&self, blip_: i32,
toggle_: bool) -> ResultOfShowFriendIndicatorOnBlip {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::show_friend_indicator_on_blip(
            blip_,
toggle_,
        );
        
        
        ResultOfShowFriendIndicatorOnBlip {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_text_command_add_directly_to_previous_briefs(&self, p0_: Option<String>) -> ResultOfBeginTextCommandAddDirectlyToPreviousBriefs {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::begin_text_command_add_directly_to_previous_briefs(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOfBeginTextCommandAddDirectlyToPreviousBriefs {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_floating_help_text_on_screen(&self, hud_index_: i32) -> ResultOfIsFloatingHelpTextOnScreen {
    unsafe {
        let mut native_return = Default::default();
let mut hud_index_ = hud_index_;
        let success = sdk::natives::is_floating_help_text_on_screen(
            &mut native_return,
hud_index_,
        );
        let native_return = native_return;
        
        ResultOfIsFloatingHelpTextOnScreen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_hide_hudmarkers_this_frame(&self, ) -> ResultOfHideHudmarkersThisFrame {
    unsafe {
        
        let success = sdk::natives::hide_hudmarkers_this_frame(
            
        );
        
        
        ResultOfHideHudmarkersThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_character_menu_ped_masked_int_stat(&self, stat_hash_: u32,
out_value_: shared::MemoryBufferId,
p2_: i32,
mask_: i32,
p4_: bool) -> ResultOfGetCharacterMenuPedMaskedIntStat {
    unsafe {
        let mut native_return = Default::default();
let mut stat_hash_ = stat_hash_;
let mut out_value_ = self.memory_buffers.borrow_mut().get_mut_ptr(out_value_) as *mut c_void;
let mut p2_ = p2_;
let mut mask_ = mask_;
let mut p4_ = p4_;
        let success = sdk::natives::get_character_menu_ped_masked_int_stat(
            &mut native_return,
out_value_,
stat_hash_,
p2_,
mask_,
p4_,
        );
        let native_return = native_return;
let out_value_ = 0;
        
        ResultOfGetCharacterMenuPedMaskedIntStat {
            success,
            ret: native_return,
            out_value_
        }
    }
}

    fn native_set_blip_as_mission_creator_blip(&self, blip_: i32,
toggle_: bool) -> ResultOfSetBlipAsMissionCreatorBlip {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_blip_as_mission_creator_blip(
            blip_,
toggle_,
        );
        
        
        ResultOfSetBlipAsMissionCreatorBlip {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_text_outline(&self, ) -> ResultOfSetTextOutline {
    unsafe {
        
        let success = sdk::natives::set_text_outline(
            
        );
        
        
        ResultOfSetTextOutline {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radius_blip_edge(&self, blip_: i32,
toggle_: bool) -> ResultOfSetRadiusBlipEdge {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_radius_blip_edge(
            blip_,
toggle_,
        );
        
        
        ResultOfSetRadiusBlipEdge {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_hide_this_frame(&self, ) -> ResultOfThefeedHideThisFrame {
    unsafe {
        
        let success = sdk::natives::thefeed_hide_this_frame(
            
        );
        
        
        ResultOfThefeedHideThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_text_command_display_text(&self, text_: Option<String>) -> ResultOfBeginTextCommandDisplayText {
    unsafe {
        let mut text_ = sdk_helpers::create_c_string_ptr(text_);
        let success = sdk::natives::begin_text_command_display_text(
            text_.as_ref().unwrap(),
        );
        
        
        ResultOfBeginTextCommandDisplayText {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_director_mode_launched_by_script(&self, ) -> ResultOfSetDirectorModeLaunchedByScript {
    unsafe {
        
        let success = sdk::natives::set_director_mode_launched_by_script(
            
        );
        
        
        ResultOfSetDirectorModeLaunchedByScript {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_mission_creator_blip(&self, blip_: i32) -> ResultOfIsMissionCreatorBlip {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::is_mission_creator_blip(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOfIsMissionCreatorBlip {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_custom_minimap_clear_blips(&self, ) -> ResultOfCustomMinimapClearBlips {
    unsafe {
        
        let success = sdk::natives::custom_minimap_clear_blips(
            
        );
        
        
        ResultOfCustomMinimapClearBlips {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_pause_menu_state(&self, ) -> ResultOfGetPauseMenuState {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_pause_menu_state(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetPauseMenuState {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_display_area_name(&self, toggle_: bool) -> ResultOfDisplayAreaName {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::display_area_name(
            toggle_,
        );
        
        
        ResultOfDisplayAreaName {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_force_show_gps(&self, toggle_: bool) -> ResultOfSetForceShowGps {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_force_show_gps(
            toggle_,
        );
        
        
        ResultOfSetForceShowGps {
            success,
            ret: (),
            
        }
    }
}

    fn native_reload_map_menu(&self, ) -> ResultOfReloadMapMenu {
    unsafe {
        
        let success = sdk::natives::reload_map_menu(
            
        );
        
        
        ResultOfReloadMapMenu {
            success,
            ret: (),
            
        }
    }
}

    fn native_lock_minimap_angle(&self, angle_: i32) -> ResultOfLockMinimapAngle {
    unsafe {
        let mut angle_ = angle_;
        let success = sdk::natives::lock_minimap_angle(
            angle_,
        );
        
        
        ResultOfLockMinimapAngle {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_additional_text(&self, p0_: i32,
p1_: bool) -> ResultOfClearAdditionalText {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::clear_additional_text(
            p0_,
p1_,
        );
        
        
        ResultOfClearAdditionalText {
            success,
            ret: (),
            
        }
    }
}

    fn native_pause_menu_is_context_menu_active(&self, ) -> ResultOfPauseMenuIsContextMenuActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::pause_menu_is_context_menu_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfPauseMenuIsContextMenuActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_custom_mp_hud_color(&self, hud_color_id_: i32) -> ResultOfSetCustomMpHudColor {
    unsafe {
        let mut hud_color_id_ = hud_color_id_;
        let success = sdk::natives::set_custom_mp_hud_color(
            hud_color_id_,
        );
        
        
        ResultOfSetCustomMpHudColor {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_fade(&self, blip_: i32,
opacity_: i32,
duration_: i32) -> ResultOfSetBlipFade {
    unsafe {
        let mut blip_ = blip_;
let mut opacity_ = opacity_;
let mut duration_ = duration_;
        let success = sdk::natives::set_blip_fade(
            blip_,
opacity_,
duration_,
        );
        
        
        ResultOfSetBlipFade {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_as_minimal_on_edge(&self, blip_: i32,
toggle_: bool) -> ResultOfSetBlipAsMinimalOnEdge {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_blip_as_minimal_on_edge(
            blip_,
toggle_,
        );
        
        
        ResultOfSetBlipAsMinimalOnEdge {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_stats(&self, stat_title_: Option<String>,
icon_enum_: i32,
step_val_: bool,
bar_value_: i32,
is_important_: bool,
picture_texture_dict_: Option<String>,
picture_texture_name_: Option<String>) -> ResultOfEndTextCommandThefeedPostStats {
    unsafe {
        let mut native_return = Default::default();
let mut stat_title_ = sdk_helpers::create_c_string_ptr(stat_title_);
let mut icon_enum_ = icon_enum_;
let mut step_val_ = step_val_;
let mut bar_value_ = bar_value_;
let mut is_important_ = is_important_;
let mut picture_texture_dict_ = sdk_helpers::create_c_string_ptr(picture_texture_dict_);
let mut picture_texture_name_ = sdk_helpers::create_c_string_ptr(picture_texture_name_);
        let success = sdk::natives::end_text_command_thefeed_post_stats(
            &mut native_return,
stat_title_.as_ref().unwrap(),
icon_enum_,
step_val_,
bar_value_,
is_important_,
picture_texture_dict_.as_ref().unwrap(),
picture_texture_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfEndTextCommandThefeedPostStats {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_blip_fade_direction(&self, blip_: i32) -> ResultOfGetBlipFadeDirection {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_fade_direction(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOfGetBlipFadeDirection {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_blip_use_height_indicator_on_edge(&self, blip_: i32,
p1_: i32) -> ResultOfSetBlipUseHeightIndicatorOnEdge {
    unsafe {
        let mut blip_ = blip_;
let mut p1_ = p1_;
        let success = sdk::natives::set_blip_use_height_indicator_on_edge(
            blip_,
p1_,
        );
        
        
        ResultOfSetBlipUseHeightIndicatorOnEdge {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_small_prints(&self, ) -> ResultOfClearSmallPrints {
    unsafe {
        
        let success = sdk::natives::clear_small_prints(
            
        );
        
        
        ResultOfClearSmallPrints {
            success,
            ret: (),
            
        }
    }
}

    fn native_pause_toggle_fullscreen_map(&self, p0_: i32) -> ResultOfPauseToggleFullscreenMap {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::pause_toggle_fullscreen_map(
            p0_,
        );
        
        
        ResultOfPauseToggleFullscreenMap {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_menu_layout_changed_event_occurred(&self, ) -> ResultOfHasMenuLayoutChangedEventOccurred {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_menu_layout_changed_event_occurred(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfHasMenuLayoutChangedEventOccurred {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_blip_flashes_alternate(&self, blip_: i32,
toggle_: bool) -> ResultOfSetBlipFlashesAlternate {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_blip_flashes_alternate(
            blip_,
toggle_,
        );
        
        
        ResultOfSetBlipFlashesAlternate {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_ticker(&self, blink_: bool,
p1_: bool) -> ResultOfEndTextCommandThefeedPostTicker {
    unsafe {
        let mut native_return = Default::default();
let mut blink_ = blink_;
let mut p1_ = p1_;
        let success = sdk::natives::end_text_command_thefeed_post_ticker(
            &mut native_return,
blink_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfEndTextCommandThefeedPostTicker {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_store_pending_network_shutdown_to_open(&self, ) -> ResultOfIsStorePendingNetworkShutdownToOpen {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_store_pending_network_shutdown_to_open(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsStorePendingNetworkShutdownToOpen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_point_to_gps_custom_route(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfAddPointToGpsCustomRoute {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::add_point_to_gps_custom_route(
            x_,
y_,
z_,
        );
        
        
        ResultOfAddPointToGpsCustomRoute {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mp_gamer_tag_health_bar_colour(&self, gamer_tag_id_: i32,
hud_color_index_: i32) -> ResultOfSetMpGamerTagHealthBarColour {
    unsafe {
        let mut gamer_tag_id_ = gamer_tag_id_;
let mut hud_color_index_ = hud_color_index_;
        let success = sdk::natives::set_mp_gamer_tag_health_bar_colour(
            gamer_tag_id_,
hud_color_index_,
        );
        
        
        ResultOfSetMpGamerTagHealthBarColour {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_mp_gamer_tag(&self, gamer_tag_id_: i32) -> ResultOfRemoveMpGamerTag {
    unsafe {
        let mut gamer_tag_id_ = gamer_tag_id_;
        let success = sdk::natives::remove_mp_gamer_tag(
            gamer_tag_id_,
        );
        
        
        ResultOfRemoveMpGamerTag {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_update_item_texture(&self, txd_string1_: Option<String>,
txn_string1_: Option<String>,
txd_string2_: Option<String>,
txn_string2_: Option<String>) -> ResultOfThefeedUpdateItemTexture {
    unsafe {
        let mut txd_string1_ = sdk_helpers::create_c_string_ptr(txd_string1_);
let mut txn_string1_ = sdk_helpers::create_c_string_ptr(txn_string1_);
let mut txd_string2_ = sdk_helpers::create_c_string_ptr(txd_string2_);
let mut txn_string2_ = sdk_helpers::create_c_string_ptr(txn_string2_);
        let success = sdk::natives::thefeed_update_item_texture(
            txd_string1_.as_ref().unwrap(),
txn_string1_.as_ref().unwrap(),
txd_string2_.as_ref().unwrap(),
txn_string2_.as_ref().unwrap(),
        );
        
        
        ResultOfThefeedUpdateItemTexture {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gps_flashes(&self, toggle_: bool) -> ResultOfSetGpsFlashes {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_gps_flashes(
            toggle_,
        );
        
        
        ResultOfSetGpsFlashes {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_help_message_fading_out(&self, ) -> ResultOfIsHelpMessageFadingOut {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_help_message_fading_out(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsHelpMessageFadingOut {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_thefeed_hide(&self, ) -> ResultOfThefeedHide {
    unsafe {
        
        let success = sdk::natives::thefeed_hide(
            
        );
        
        
        ResultOfThefeedHide {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_unlock(&self, gxt_label1_: Option<String>,
p1_: i32,
gxt_label2_: Option<String>) -> ResultOfEndTextCommandThefeedPostUnlock {
    unsafe {
        let mut native_return = Default::default();
let mut gxt_label1_ = sdk_helpers::create_c_string_ptr(gxt_label1_);
let mut p1_ = p1_;
let mut gxt_label2_ = sdk_helpers::create_c_string_ptr(gxt_label2_);
        let success = sdk::natives::end_text_command_thefeed_post_unlock(
            &mut native_return,
gxt_label1_.as_ref().unwrap(),
p1_,
gxt_label2_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfEndTextCommandThefeedPostUnlock {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pause_menu_get_mouse_hover_index(&self, ) -> ResultOfPauseMenuGetMouseHoverIndex {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::pause_menu_get_mouse_hover_index(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfPauseMenuGetMouseHoverIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_fake_cone_data(&self, blip_: i32) -> ResultOfRemoveFakeConeData {
    unsafe {
        let mut blip_ = blip_;
        let success = sdk::natives::remove_fake_cone_data(
            blip_,
        );
        
        
        ResultOfRemoveFakeConeData {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_minimap_golf_course_off(&self, ) -> ResultOfSetMinimapGolfCourseOff {
    unsafe {
        
        let success = sdk::natives::set_minimap_golf_course_off(
            
        );
        
        
        ResultOfSetMinimapGolfCourseOff {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_menu_trigger_event_details(&self, last_item_menu_id_: i32,
selected_item_unique_id_: i32) -> ResultOfGetMenuTriggerEventDetails {
    unsafe {
        let mut last_item_menu_id_ = last_item_menu_id_;
let mut selected_item_unique_id_ = selected_item_unique_id_;
        let success = sdk::natives::get_menu_trigger_event_details(
            &mut last_item_menu_id_,
&mut selected_item_unique_id_,
        );
        let last_item_menu_id_ = last_item_menu_id_;
let selected_item_unique_id_ = selected_item_unique_id_;
        
        ResultOfGetMenuTriggerEventDetails {
            success,
            ret: (),
            last_item_menu_id_,
selected_item_unique_id_
        }
    }
}

    fn native_end_text_command_thefeed_post_ticker_with_tokens(&self, blink_: bool,
p1_: bool) -> ResultOfEndTextCommandThefeedPostTickerWithTokens {
    unsafe {
        let mut native_return = Default::default();
let mut blink_ = blink_;
let mut p1_ = p1_;
        let success = sdk::natives::end_text_command_thefeed_post_ticker_with_tokens(
            &mut native_return,
blink_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfEndTextCommandThefeedPostTickerWithTokens {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_warning_message_with_header_extended(&self, entry_header_: Option<String>,
entry_line1_: Option<String>,
flags_: i32,
entry_line2_: Option<String>,
p4_: bool,
p5_: i32,
p6_: shared::MemoryBufferId,
p7_: shared::MemoryBufferId,
show_bg_: bool,
p9_: i32,
p10_: i32) -> ResultOfSetWarningMessageWithHeaderExtended {
    unsafe {
        let mut entry_header_ = sdk_helpers::create_c_string_ptr(entry_header_);
let mut entry_line1_ = sdk_helpers::create_c_string_ptr(entry_line1_);
let mut flags_ = flags_;
let mut entry_line2_ = sdk_helpers::create_c_string_ptr(entry_line2_);
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = self.memory_buffers.borrow_mut().get_mut_ptr(p6_) as *mut c_void;
let mut p7_ = self.memory_buffers.borrow_mut().get_mut_ptr(p7_) as *mut c_void;
let mut show_bg_ = show_bg_;
let mut p9_ = p9_;
let mut p10_ = p10_;
        let success = sdk::natives::set_warning_message_with_header_extended(
            p6_,
p7_,
entry_header_.as_ref().unwrap(),
entry_line1_.as_ref().unwrap(),
flags_,
entry_line2_.as_ref().unwrap(),
p4_,
p5_,
show_bg_,
p9_,
p10_,
        );
        let p6_ = 0;
let p7_ = 0;
        
        ResultOfSetWarningMessageWithHeaderExtended {
            success,
            ret: (),
            p6_,
p7_
        }
    }
}

    fn native_set_colour_of_next_text_component(&self, hud_color_: i32) -> ResultOfSetColourOfNextTextComponent {
    unsafe {
        let mut hud_color_ = hud_color_;
        let success = sdk::natives::set_colour_of_next_text_component(
            hud_color_,
        );
        
        
        ResultOfSetColourOfNextTextComponent {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_frontend_ready_for_control(&self, ) -> ResultOfIsFrontendReadyForControl {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_frontend_ready_for_control(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsFrontendReadyForControl {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_pause_menu_ped_lighting(&self, state_: bool) -> ResultOfSetPauseMenuPedLighting {
    unsafe {
        let mut state_ = state_;
        let success = sdk::natives::set_pause_menu_ped_lighting(
            state_,
        );
        
        
        ResultOfSetPauseMenuPedLighting {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_gps_multi_route(&self, hud_color_: i32,
route_from_player_: bool,
display_on_foot_: bool) -> ResultOfStartGpsMultiRoute {
    unsafe {
        let mut hud_color_ = hud_color_;
let mut route_from_player_ = route_from_player_;
let mut display_on_foot_ = display_on_foot_;
        let success = sdk::natives::start_gps_multi_route(
            hud_color_,
route_from_player_,
display_on_foot_,
        );
        
        
        ResultOfStartGpsMultiRoute {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_mouse_rolled_over_instructional_buttons(&self, ) -> ResultOfIsMouseRolledOverInstructionalButtons {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_mouse_rolled_over_instructional_buttons(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsMouseRolledOverInstructionalButtons {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gps_multi_route_render(&self, toggle_: bool) -> ResultOfSetGpsMultiRouteRender {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_gps_multi_route_render(
            toggle_,
        );
        
        
        ResultOfSetGpsMultiRouteRender {
            success,
            ret: (),
            
        }
    }
}

    fn native_unlock_minimap_position(&self, ) -> ResultOfUnlockMinimapPosition {
    unsafe {
        
        let success = sdk::natives::unlock_minimap_position(
            
        );
        
        
        ResultOfUnlockMinimapPosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_ai_blip_has_cone(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedAiBlipHasCone {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_ai_blip_has_cone(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedAiBlipHasCone {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_north_blid_index(&self, ) -> ResultOfGetNorthBlidIndex {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_north_blid_index(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetNorthBlidIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_health_hud_display_values(&self, health_: i32,
capacity_: i32,
was_added_: bool) -> ResultOfSetHealthHudDisplayValues {
    unsafe {
        let mut health_ = health_;
let mut capacity_ = capacity_;
let mut was_added_ = was_added_;
        let success = sdk::natives::set_health_hud_display_values(
            health_,
capacity_,
was_added_,
        );
        
        
        ResultOfSetHealthHudDisplayValues {
            success,
            ret: (),
            
        }
    }
}

    fn native_display_hud_when_paused_this_frame(&self, ) -> ResultOfDisplayHudWhenPausedThisFrame {
    unsafe {
        
        let success = sdk::natives::display_hud_when_paused_this_frame(
            
        );
        
        
        ResultOfDisplayHudWhenPausedThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pm_warningscreen_active(&self, p0_: bool) -> ResultOfSetPmWarningscreenActive {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_pm_warningscreen_active(
            p0_,
        );
        
        
        ResultOfSetPmWarningscreenActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_hovering_over_mission_creator_blip(&self, ) -> ResultOfIsHoveringOverMissionCreatorBlip {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_hovering_over_mission_creator_blip(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsHoveringOverMissionCreatorBlip {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_length_of_literal_string_in_bytes(&self, string_: Option<String>) -> ResultOfGetLengthOfLiteralStringInBytes {
    unsafe {
        let mut native_return = Default::default();
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::get_length_of_literal_string_in_bytes(
            &mut native_return,
string_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfGetLengthOfLiteralStringInBytes {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_text_edge(&self, p0_: i32,
r_: i32,
g_: i32,
b_: i32,
a_: i32) -> ResultOfSetTextEdge {
    unsafe {
        let mut p0_ = p0_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut a_ = a_;
        let success = sdk::natives::set_text_edge(
            p0_,
r_,
g_,
b_,
a_,
        );
        
        
        ResultOfSetTextEdge {
            success,
            ret: (),
            
        }
    }
}

    fn native_pause_menu_deactivate_context(&self, context_hash_: u32) -> ResultOfPauseMenuDeactivateContext {
    unsafe {
        let mut context_hash_ = context_hash_;
        let success = sdk::natives::pause_menu_deactivate_context(
            context_hash_,
        );
        
        
        ResultOfPauseMenuDeactivateContext {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_ticker_forced(&self, blink_: bool,
p1_: bool) -> ResultOfEndTextCommandThefeedPostTickerForced {
    unsafe {
        let mut native_return = Default::default();
let mut blink_ = blink_;
let mut p1_ = p1_;
        let success = sdk::natives::end_text_command_thefeed_post_ticker_forced(
            &mut native_return,
blink_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfEndTextCommandThefeedPostTickerForced {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_hud_component_values(&self, id_: i32) -> ResultOfResetHudComponentValues {
    unsafe {
        let mut id_ = id_;
        let success = sdk::natives::reset_hud_component_values(
            id_,
        );
        
        
        ResultOfResetHudComponentValues {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_alpha(&self, blip_: i32,
alpha_: i32) -> ResultOfSetBlipAlpha {
    unsafe {
        let mut blip_ = blip_;
let mut alpha_ = alpha_;
        let success = sdk::natives::set_blip_alpha(
            blip_,
alpha_,
        );
        
        
        ResultOfSetBlipAlpha {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_text_dropshadow(&self, distance_: i32,
r_: i32,
g_: i32,
b_: i32,
a_: i32) -> ResultOfSetTextDropshadow {
    unsafe {
        let mut distance_ = distance_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut a_ = a_;
        let success = sdk::natives::set_text_dropshadow(
            distance_,
r_,
g_,
b_,
a_,
        );
        
        
        ResultOfSetTextDropshadow {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_blip_for_radius(&self, pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
radius_: f32) -> ResultOfAddBlipForRadius {
    unsafe {
        let mut native_return = Default::default();
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut radius_ = radius_;
        let success = sdk::natives::add_blip_for_radius(
            &mut native_return,
pos_x_,
pos_y_,
pos_z_,
radius_,
        );
        let native_return = native_return;
        
        ResultOfAddBlipForRadius {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_hud_force_special_vehicle_weapon_wheel(&self, ) -> ResultOfHudForceSpecialVehicleWeaponWheel {
    unsafe {
        
        let success = sdk::natives::hud_force_special_vehicle_weapon_wheel(
            
        );
        
        
        ResultOfHudForceSpecialVehicleWeaponWheel {
            success,
            ret: (),
            
        }
    }
}

    fn native_pause_menu_redraw_instructional_buttons(&self, p0_: i32) -> ResultOfPauseMenuRedrawInstructionalButtons {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::pause_menu_redraw_instructional_buttons(
            p0_,
        );
        
        
        ResultOfPauseMenuRedrawInstructionalButtons {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_set_vibrate_parameter_for_next_message(&self, toggle_: bool) -> ResultOfThefeedSetVibrateParameterForNextMessage {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::thefeed_set_vibrate_parameter_for_next_message(
            toggle_,
        );
        
        
        ResultOfThefeedSetVibrateParameterForNextMessage {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_standard_blip_enum_id(&self, ) -> ResultOfGetStandardBlipEnumId {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_standard_blip_enum_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetStandardBlipEnumId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_hide_loading_on_fade_this_frame(&self, ) -> ResultOfHideLoadingOnFadeThisFrame {
    unsafe {
        
        let success = sdk::natives::hide_loading_on_fade_this_frame(
            
        );
        
        
        ResultOfHideLoadingOnFadeThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_short_height_threshold(&self, p0_: i32,
p1_: i32) -> ResultOfSetBlipShortHeightThreshold {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_blip_short_height_threshold(
            p0_,
p1_,
        );
        
        
        ResultOfSetBlipShortHeightThreshold {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_blip_info_id_entity_index(&self, blip_: i32) -> ResultOfGetBlipInfoIdEntityIndex {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_info_id_entity_index(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOfGetBlipInfoIdEntityIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_help_message_being_displayed(&self, ) -> ResultOfIsHelpMessageBeingDisplayed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_help_message_being_displayed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsHelpMessageBeingDisplayed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_text_justification(&self, justify_type_: i32) -> ResultOfSetTextJustification {
    unsafe {
        let mut justify_type_ = justify_type_;
        let success = sdk::natives::set_text_justification(
            justify_type_,
        );
        
        
        ResultOfSetTextJustification {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_navigating_menu_content(&self, ) -> ResultOfIsNavigatingMenuContent {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_navigating_menu_content(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsNavigatingMenuContent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_mp_gamer_tag_active(&self, gamer_tag_id_: i32) -> ResultOfIsMpGamerTagActive {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_tag_id_ = gamer_tag_id_;
        let success = sdk::natives::is_mp_gamer_tag_active(
            &mut native_return,
gamer_tag_id_,
        );
        let native_return = native_return;
        
        ResultOfIsMpGamerTagActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_show_scripted_hud_component_this_frame(&self, id_: i32) -> ResultOfShowScriptedHudComponentThisFrame {
    unsafe {
        let mut id_ = id_;
        let success = sdk::natives::show_scripted_hud_component_this_frame(
            id_,
        );
        
        
        ResultOfShowScriptedHudComponentThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_route(&self, blip_: i32,
enabled_: bool) -> ResultOfSetBlipRoute {
    unsafe {
        let mut blip_ = blip_;
let mut enabled_ = enabled_;
        let success = sdk::natives::set_blip_route(
            blip_,
enabled_,
        );
        
        
        ResultOfSetBlipRoute {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_floating_help(&self, hud_index_: i32,
p1_: bool) -> ResultOfClearFloatingHelp {
    unsafe {
        let mut hud_index_ = hud_index_;
let mut p1_ = p1_;
        let success = sdk::natives::clear_floating_help(
            hud_index_,
p1_,
        );
        
        
        ResultOfClearFloatingHelp {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_inside_very_small_interior(&self, toggle_: bool) -> ResultOfSetInsideVerySmallInterior {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_inside_very_small_interior(
            toggle_,
        );
        
        
        ResultOfSetInsideVerySmallInterior {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_text_command_get_number_of_lines_for_string(&self, entry_: Option<String>) -> ResultOfBeginTextCommandGetNumberOfLinesForString {
    unsafe {
        let mut entry_ = sdk_helpers::create_c_string_ptr(entry_);
        let success = sdk::natives::begin_text_command_get_number_of_lines_for_string(
            entry_.as_ref().unwrap(),
        );
        
        
        ResultOfBeginTextCommandGetNumberOfLinesForString {
            success,
            ret: (),
            
        }
    }
}

    fn native_open_reportugc_menu(&self, ) -> ResultOfOpenReportugcMenu {
    unsafe {
        
        let success = sdk::natives::open_reportugc_menu(
            
        );
        
        
        ResultOfOpenReportugcMenu {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_default_script_rendertarget_render_id(&self, ) -> ResultOfGetDefaultScriptRendertargetRenderId {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_default_script_rendertarget_render_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetDefaultScriptRendertargetRenderId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_end_text_command_thefeed_post_messagetext_with_crew_tag_and_additional_icon(&self, txd_name_: Option<String>,
texture_name_: Option<String>,
flash_: bool,
icon_type1_: i32,
sender_: Option<String>,
subject_: Option<String>,
duration_: f32,
clan_tag_: Option<String>,
icon_type2_: i32,
p9_: i32) -> ResultOfEndTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon {
    unsafe {
        let mut native_return = Default::default();
let mut txd_name_ = sdk_helpers::create_c_string_ptr(txd_name_);
let mut texture_name_ = sdk_helpers::create_c_string_ptr(texture_name_);
let mut flash_ = flash_;
let mut icon_type1_ = icon_type1_;
let mut sender_ = sdk_helpers::create_c_string_ptr(sender_);
let mut subject_ = sdk_helpers::create_c_string_ptr(subject_);
let mut duration_ = duration_;
let mut clan_tag_ = sdk_helpers::create_c_string_ptr(clan_tag_);
let mut icon_type2_ = icon_type2_;
let mut p9_ = p9_;
        let success = sdk::natives::end_text_command_thefeed_post_messagetext_with_crew_tag_and_additional_icon(
            &mut native_return,
txd_name_.as_ref().unwrap(),
texture_name_.as_ref().unwrap(),
flash_,
icon_type1_,
sender_.as_ref().unwrap(),
subject_.as_ref().unwrap(),
duration_,
clan_tag_.as_ref().unwrap(),
icon_type2_,
p9_,
        );
        let native_return = native_return;
        
        ResultOfEndTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_hide_number_on_blip(&self, blip_: i32) -> ResultOfHideNumberOnBlip {
    unsafe {
        let mut blip_ = blip_;
        let success = sdk::natives::hide_number_on_blip(
            blip_,
        );
        
        
        ResultOfHideNumberOnBlip {
            success,
            ret: (),
            
        }
    }
}

    fn native_custom_minimap_set_active(&self, toggle_: bool) -> ResultOfCustomMinimapSetActive {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::custom_minimap_set_active(
            toggle_,
        );
        
        
        ResultOfCustomMinimapSetActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_hidden_on_legend(&self, blip_: i32,
toggle_: bool) -> ResultOfSetBlipHiddenOnLegend {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_blip_hidden_on_legend(
            blip_,
toggle_,
        );
        
        
        ResultOfSetBlipHiddenOnLegend {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_text_command_get_screen_width_of_display_text(&self, text_: Option<String>) -> ResultOfBeginTextCommandGetScreenWidthOfDisplayText {
    unsafe {
        let mut text_ = sdk_helpers::create_c_string_ptr(text_);
        let success = sdk::natives::begin_text_command_get_screen_width_of_display_text(
            text_.as_ref().unwrap(),
        );
        
        
        ResultOfBeginTextCommandGetScreenWidthOfDisplayText {
            success,
            ret: (),
            
        }
    }
}

    fn native_custom_minimap_create_blip(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfCustomMinimapCreateBlip {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::custom_minimap_create_blip(
            &mut native_return,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOfCustomMinimapCreateBlip {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_thefeed_set_scripted_menu_height(&self, pos_: f32) -> ResultOfThefeedSetScriptedMenuHeight {
    unsafe {
        let mut pos_ = pos_;
        let success = sdk::natives::thefeed_set_scripted_menu_height(
            pos_,
        );
        
        
        ResultOfThefeedSetScriptedMenuHeight {
            success,
            ret: (),
            
        }
    }
}

    fn native_dont_zoom_minimap_when_sniping_this_frame(&self, ) -> ResultOfDontZoomMinimapWhenSnipingThisFrame {
    unsafe {
        
        let success = sdk::natives::dont_zoom_minimap_when_sniping_this_frame(
            
        );
        
        
        ResultOfDontZoomMinimapWhenSnipingThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ai_ped_vehicle_blip_index(&self, ped_: u32) -> ResultOfGetAiPedVehicleBlipIndex {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ai_ped_vehicle_blip_index(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetAiPedVehicleBlipIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_thefeed_auto_post_gametips_on(&self, ) -> ResultOfThefeedAutoPostGametipsOn {
    unsafe {
        
        let success = sdk::natives::thefeed_auto_post_gametips_on(
            
        );
        
        
        ResultOfThefeedAutoPostGametipsOn {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_allow_comma_on_text_input(&self, p0_: i32) -> ResultOfSetAllowCommaOnTextInput {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_allow_comma_on_text_input(
            p0_,
        );
        
        
        ResultOfSetAllowCommaOnTextInput {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_next_message_to_previous_briefs_list(&self, p0_: i32) -> ResultOfForceNextMessageToPreviousBriefsList {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::force_next_message_to_previous_briefs_list(
            p0_,
        );
        
        
        ResultOfForceNextMessageToPreviousBriefsList {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_named_rendertarget(&self, name_: Option<String>,
p1_: bool) -> ResultOfRegisterNamedRendertarget {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut p1_ = p1_;
        let success = sdk::natives::register_named_rendertarget(
            &mut native_return,
name_.as_ref().unwrap(),
p1_,
        );
        let native_return = native_return;
        
        ResultOfRegisterNamedRendertarget {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_thefeed_force_render_off(&self, ) -> ResultOfThefeedForceRenderOff {
    unsafe {
        
        let success = sdk::natives::thefeed_force_render_off(
            
        );
        
        
        ResultOfThefeedForceRenderOff {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_blip_coords(&self, blip_: i32) -> ResultOfGetBlipCoords {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_coords(
            native_return.pin_mut(),
blip_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetBlipCoords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_minimap_block_waypoint(&self, toggle_: bool) -> ResultOfSetMinimapBlockWaypoint {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_minimap_block_waypoint(
            toggle_,
        );
        
        
        ResultOfSetMinimapBlockWaypoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_screen_code_wants_script_to_control(&self, ) -> ResultOfGetScreenCodeWantsScriptToControl {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_screen_code_wants_script_to_control(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetScreenCodeWantsScriptToControl {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_mp_gamer_tag_free(&self, gamer_tag_id_: i32) -> ResultOfIsMpGamerTagFree {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_tag_id_ = gamer_tag_id_;
        let success = sdk::natives::is_mp_gamer_tag_free(
            &mut native_return,
gamer_tag_id_,
        );
        let native_return = native_return;
        
        ResultOfIsMpGamerTagFree {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_radar_as_interior_this_frame(&self, interior_: u32,
x_: f32,
y_: f32,
z_: i32,
zoom_: i32) -> ResultOfSetRadarAsInteriorThisFrame {
    unsafe {
        let mut interior_ = interior_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut zoom_ = zoom_;
        let success = sdk::natives::set_radar_as_interior_this_frame(
            interior_,
x_,
y_,
z_,
zoom_,
        );
        
        
        ResultOfSetRadarAsInteriorThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_blip_for_coord(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfAddBlipForCoord {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::add_blip_for_coord(
            &mut native_return,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOfAddBlipForCoord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gps_flags(&self, p0_: i32,
p1_: f32) -> ResultOfSetGpsFlags {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_gps_flags(
            p0_,
p1_,
        );
        
        
        ResultOfSetGpsFlags {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_pause_menu_position(&self, ) -> ResultOfGetPauseMenuPosition {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
        let success = sdk::natives::get_pause_menu_position(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetPauseMenuPosition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_new_selected_mission_creator_blip(&self, ) -> ResultOfGetNewSelectedMissionCreatorBlip {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_new_selected_mission_creator_blip(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetNewSelectedMissionCreatorBlip {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_end_text_command_thefeed_post_messagetext_with_crew_tag(&self, txd_name_: Option<String>,
texture_name_: Option<String>,
flash_: bool,
icon_type_: i32,
sender_: Option<String>,
subject_: Option<String>,
duration_: f32,
clan_tag_: Option<String>) -> ResultOfEndTextCommandThefeedPostMessagetextWithCrewTag {
    unsafe {
        let mut native_return = Default::default();
let mut txd_name_ = sdk_helpers::create_c_string_ptr(txd_name_);
let mut texture_name_ = sdk_helpers::create_c_string_ptr(texture_name_);
let mut flash_ = flash_;
let mut icon_type_ = icon_type_;
let mut sender_ = sdk_helpers::create_c_string_ptr(sender_);
let mut subject_ = sdk_helpers::create_c_string_ptr(subject_);
let mut duration_ = duration_;
let mut clan_tag_ = sdk_helpers::create_c_string_ptr(clan_tag_);
        let success = sdk::natives::end_text_command_thefeed_post_messagetext_with_crew_tag(
            &mut native_return,
txd_name_.as_ref().unwrap(),
texture_name_.as_ref().unwrap(),
flash_,
icon_type_,
sender_.as_ref().unwrap(),
subject_.as_ref().unwrap(),
duration_,
clan_tag_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfEndTextCommandThefeedPostMessagetextWithCrewTag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_blip_for_entity(&self, entity_: u32) -> ResultOfAddBlipForEntity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::add_blip_for_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfAddBlipForEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_use_island_map(&self, toggle_: bool) -> ResultOfSetUseIslandMap {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_use_island_map(
            toggle_,
        );
        
        
        ResultOfSetUseIslandMap {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_in_pause_menu(&self, ) -> ResultOfClearPedInPauseMenu {
    unsafe {
        
        let success = sdk::natives::clear_ped_in_pause_menu(
            
        );
        
        
        ResultOfClearPedInPauseMenu {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_text_render_id(&self, render_id_: i32) -> ResultOfSetTextRenderId {
    unsafe {
        let mut render_id_ = render_id_;
        let success = sdk::natives::set_text_render_id(
            render_id_,
        );
        
        
        ResultOfSetTextRenderId {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mission_name(&self, p0_: bool,
name_: Option<String>) -> ResultOfSetMissionName {
    unsafe {
        let mut p0_ = p0_;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::set_mission_name(
            p0_,
name_.as_ref().unwrap(),
        );
        
        
        ResultOfSetMissionName {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_text_component_substring_keyboard_display(&self, string_: Option<String>) -> ResultOfAddTextComponentSubstringKeyboardDisplay {
    unsafe {
        let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::add_text_component_substring_keyboard_display(
            string_.as_ref().unwrap(),
        );
        
        
        ResultOfAddTextComponentSubstringKeyboardDisplay {
            success,
            ret: (),
            
        }
    }
}

    fn native_hide_minimap_exterior_map_this_frame(&self, ) -> ResultOfHideMinimapExteriorMapThisFrame {
    unsafe {
        
        let success = sdk::natives::hide_minimap_exterior_map_this_frame(
            
        );
        
        
        ResultOfHideMinimapExteriorMapThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_show_heading_indicator_on_blip(&self, blip_: i32,
toggle_: bool) -> ResultOfShowHeadingIndicatorOnBlip {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::show_heading_indicator_on_blip(
            blip_,
toggle_,
        );
        
        
        ResultOfShowHeadingIndicatorOnBlip {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_menu_ped_float_stat(&self, stat_hash_: u32,
out_value_: f32) -> ResultOfGetMenuPedFloatStat {
    unsafe {
        let mut native_return = Default::default();
let mut stat_hash_ = stat_hash_;
let mut out_value_ = out_value_;
        let success = sdk::natives::get_menu_ped_float_stat(
            &mut native_return,
&mut out_value_,
stat_hash_,
        );
        let native_return = native_return;
let out_value_ = out_value_;
        
        ResultOfGetMenuPedFloatStat {
            success,
            ret: native_return,
            out_value_
        }
    }
}

    fn native_request_additional_text_for_dlc(&self, gxt_: Option<String>,
slot_: i32) -> ResultOfRequestAdditionalTextForDlc {
    unsafe {
        let mut gxt_ = sdk_helpers::create_c_string_ptr(gxt_);
let mut slot_ = slot_;
        let success = sdk::natives::request_additional_text_for_dlc(
            gxt_.as_ref().unwrap(),
slot_,
        );
        
        
        ResultOfRequestAdditionalTextForDlc {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_next_message_to_previous_briefs(&self, p0_: bool) -> ResultOfAddNextMessageToPreviousBriefs {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::add_next_message_to_previous_briefs(
            p0_,
        );
        
        
        ResultOfAddNextMessageToPreviousBriefs {
            success,
            ret: (),
            
        }
    }
}

    fn native_allow_sonar_blips(&self, toggle_: bool) -> ResultOfAllowSonarBlips {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::allow_sonar_blips(
            toggle_,
        );
        
        
        ResultOfAllowSonarBlips {
            success,
            ret: (),
            
        }
    }
}

    fn native_show_account_picker(&self, ) -> ResultOfShowAccountPicker {
    unsafe {
        
        let success = sdk::natives::show_account_picker(
            
        );
        
        
        ResultOfShowAccountPicker {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mp_gamer_tag_colour(&self, gamer_tag_id_: i32,
component_: i32,
hud_color_index_: i32) -> ResultOfSetMpGamerTagColour {
    unsafe {
        let mut gamer_tag_id_ = gamer_tag_id_;
let mut component_ = component_;
let mut hud_color_index_ = hud_color_index_;
        let success = sdk::natives::set_mp_gamer_tag_colour(
            gamer_tag_id_,
component_,
hud_color_index_,
        );
        
        
        ResultOfSetMpGamerTagColour {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_all_help_messages(&self, ) -> ResultOfClearAllHelpMessages {
    unsafe {
        
        let success = sdk::natives::clear_all_help_messages(
            
        );
        
        
        ResultOfClearAllHelpMessages {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_minimap_fow_do_not_update(&self, p0_: bool) -> ResultOfSetMinimapFowDoNotUpdate {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_minimap_fow_do_not_update(
            p0_,
        );
        
        
        ResultOfSetMinimapFowDoNotUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_text_wrap(&self, start_: f32,
end_: f32) -> ResultOfSetTextWrap {
    unsafe {
        let mut start_ = start_;
let mut end_ = end_;
        let success = sdk::natives::set_text_wrap(
            start_,
end_,
        );
        
        
        ResultOfSetTextWrap {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_mouse_event(&self, scaleform_handle_: i32,
p1_: shared::MemoryBufferId,
p2_: shared::MemoryBufferId,
p3_: shared::MemoryBufferId) -> ResultOfGetMouseEvent {
    unsafe {
        let mut native_return = Default::default();
let mut scaleform_handle_ = scaleform_handle_;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
let mut p2_ = self.memory_buffers.borrow_mut().get_mut_ptr(p2_) as *mut c_void;
let mut p3_ = self.memory_buffers.borrow_mut().get_mut_ptr(p3_) as *mut c_void;
        let success = sdk::natives::get_mouse_event(
            &mut native_return,
p1_,
p2_,
p3_,
scaleform_handle_,
        );
        let native_return = native_return;
let p1_ = 0;
let p2_ = 0;
let p3_ = 0;
        
        ResultOfGetMouseEvent {
            success,
            ret: native_return,
            p1_,
p2_,
p3_
        }
    }
}

    fn native_set_mp_gamer_tag_visibility(&self, gamer_tag_id_: i32,
component_: i32,
toggle_: bool,
p3_: i32) -> ResultOfSetMpGamerTagVisibility {
    unsafe {
        let mut gamer_tag_id_ = gamer_tag_id_;
let mut component_ = component_;
let mut toggle_ = toggle_;
let mut p3_ = p3_;
        let success = sdk::natives::set_mp_gamer_tag_visibility(
            gamer_tag_id_,
component_,
toggle_,
p3_,
        );
        
        
        ResultOfSetMpGamerTagVisibility {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_text_font(&self, font_type_: i32) -> ResultOfSetTextFont {
    unsafe {
        let mut font_type_ = font_type_;
        let success = sdk::natives::set_text_font(
            font_type_,
        );
        
        
        ResultOfSetTextFont {
            success,
            ret: (),
            
        }
    }
}

    fn native_code_wants_script_to_take_control(&self, ) -> ResultOfCodeWantsScriptToTakeControl {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::code_wants_script_to_take_control(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfCodeWantsScriptToTakeControl {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_gps_multi_route(&self, ) -> ResultOfClearGpsMultiRoute {
    unsafe {
        
        let success = sdk::natives::clear_gps_multi_route(
            
        );
        
        
        ResultOfClearGpsMultiRoute {
            success,
            ret: (),
            
        }
    }
}

    fn native_hide_hud_component_this_frame(&self, id_: i32) -> ResultOfHideHudComponentThisFrame {
    unsafe {
        let mut id_ = id_;
        let success = sdk::natives::hide_hud_component_this_frame(
            id_,
        );
        
        
        ResultOfHideHudComponentThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_override_mp_text_chat_team_string(&self, gxt_entry_hash_: u32) -> ResultOfOverrideMpTextChatTeamString {
    unsafe {
        let mut gxt_entry_hash_ = gxt_entry_hash_;
        let success = sdk::natives::override_mp_text_chat_team_string(
            gxt_entry_hash_,
        );
        
        
        ResultOfOverrideMpTextChatTeamString {
            success,
            ret: (),
            
        }
    }
}

    fn native_toggle_stealth_radar(&self, toggle_: bool) -> ResultOfToggleStealthRadar {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::toggle_stealth_radar(
            toggle_,
        );
        
        
        ResultOfToggleStealthRadar {
            success,
            ret: (),
            
        }
    }
}

    fn native_flash_minimap_display_with_color(&self, hud_color_index_: i32) -> ResultOfFlashMinimapDisplayWithColor {
    unsafe {
        let mut hud_color_index_ = hud_color_index_;
        let success = sdk::natives::flash_minimap_display_with_color(
            hud_color_index_,
        );
        
        
        ResultOfFlashMinimapDisplayWithColor {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_text_right_justify(&self, toggle_: bool) -> ResultOfSetTextRightJustify {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_text_right_justify(
            toggle_,
        );
        
        
        ResultOfSetTextRightJustify {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_minimap_sonar_sweep(&self, toggle_: bool) -> ResultOfSetMinimapSonarSweep {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_minimap_sonar_sweep(
            toggle_,
        );
        
        
        ResultOfSetMinimapSonarSweep {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_text_component_substring_player_name(&self, text_: Option<String>) -> ResultOfAddTextComponentSubstringPlayerName {
    unsafe {
        let mut text_ = sdk_helpers::create_c_string_ptr(text_);
        let success = sdk::natives::add_text_component_substring_player_name(
            text_.as_ref().unwrap(),
        );
        
        
        ResultOfAddTextComponentSubstringPlayerName {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_use_set_destination_in_pause_map(&self, toggle_: bool) -> ResultOfSetUseSetDestinationInPauseMap {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_use_set_destination_in_pause_map(
            toggle_,
        );
        
        
        ResultOfSetUseSetDestinationInPauseMap {
            success,
            ret: (),
            
        }
    }
}

    fn native_dont_tilt_minimap_this_frame(&self, ) -> ResultOfDontTiltMinimapThisFrame {
    unsafe {
        
        let success = sdk::natives::dont_tilt_minimap_this_frame(
            
        );
        
        
        ResultOfDontTiltMinimapThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_frontend_this_frame(&self, ) -> ResultOfDisableFrontendThisFrame {
    unsafe {
        
        let success = sdk::natives::disable_frontend_this_frame(
            
        );
        
        
        ResultOfDisableFrontendThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_mp_gamer_tag_with_crew_color(&self, player_: u32,
username_: Option<String>,
pointed_clan_tag_: bool,
is_rockstar_clan_: bool,
clan_tag_: Option<String>,
clan_flag_: i32,
r_: i32,
g_: i32,
b_: i32) -> ResultOfCreateMpGamerTagWithCrewColor {
    unsafe {
        let mut player_ = player_;
let mut username_ = sdk_helpers::create_c_string_ptr(username_);
let mut pointed_clan_tag_ = pointed_clan_tag_;
let mut is_rockstar_clan_ = is_rockstar_clan_;
let mut clan_tag_ = sdk_helpers::create_c_string_ptr(clan_tag_);
let mut clan_flag_ = clan_flag_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::create_mp_gamer_tag_with_crew_color(
            player_,
username_.as_ref().unwrap(),
pointed_clan_tag_,
is_rockstar_clan_,
clan_tag_.as_ref().unwrap(),
clan_flag_,
r_,
g_,
b_,
        );
        
        
        ResultOfCreateMpGamerTagWithCrewColor {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_mp_gamer_tag_movie_active(&self, ) -> ResultOfIsMpGamerTagMovieActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_mp_gamer_tag_movie_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsMpGamerTagMovieActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_minimap_fow_coordinate_is_revealed(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfGetMinimapFowCoordinateIsRevealed {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::get_minimap_fow_coordinate_is_revealed(
            &mut native_return,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOfGetMinimapFowCoordinateIsRevealed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_warning_message_option_items(&self, ) -> ResultOfRemoveWarningMessageOptionItems {
    unsafe {
        
        let success = sdk::natives::remove_warning_message_option_items(
            
        );
        
        
        ResultOfRemoveWarningMessageOptionItems {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_only_show_tooltips(&self, toggle_: bool) -> ResultOfThefeedOnlyShowTooltips {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::thefeed_only_show_tooltips(
            toggle_,
        );
        
        
        ResultOfThefeedOnlyShowTooltips {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_as_friendly(&self, blip_: i32,
toggle_: bool) -> ResultOfSetBlipAsFriendly {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_blip_as_friendly(
            blip_,
toggle_,
        );
        
        
        ResultOfSetBlipAsFriendly {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_online_policies_menu_active(&self, ) -> ResultOfIsOnlinePoliciesMenuActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_online_policies_menu_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsOnlinePoliciesMenuActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_warning_message_with_header_and_substring_flags(&self, entry_header_: Option<String>,
entry_line1_: Option<String>,
instructional_key_: i32,
entry_line2_: Option<String>,
p4_: bool,
p5_: i32,
additional_int_info_: i32,
additional_text_info_line1_: Option<String>,
additional_text_info_line2_: Option<String>,
show_background_: bool,
error_code_: i32) -> ResultOfSetWarningMessageWithHeaderAndSubstringFlags {
    unsafe {
        let mut entry_header_ = sdk_helpers::create_c_string_ptr(entry_header_);
let mut entry_line1_ = sdk_helpers::create_c_string_ptr(entry_line1_);
let mut instructional_key_ = instructional_key_;
let mut entry_line2_ = sdk_helpers::create_c_string_ptr(entry_line2_);
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut additional_int_info_ = additional_int_info_;
let mut additional_text_info_line1_ = sdk_helpers::create_c_string_ptr(additional_text_info_line1_);
let mut additional_text_info_line2_ = sdk_helpers::create_c_string_ptr(additional_text_info_line2_);
let mut show_background_ = show_background_;
let mut error_code_ = error_code_;
        let success = sdk::natives::set_warning_message_with_header_and_substring_flags(
            entry_header_.as_ref().unwrap(),
entry_line1_.as_ref().unwrap(),
instructional_key_,
entry_line2_.as_ref().unwrap(),
p4_,
p5_,
additional_int_info_,
additional_text_info_line1_.as_ref().unwrap(),
additional_text_info_line2_.as_ref().unwrap(),
show_background_,
error_code_,
        );
        
        
        ResultOfSetWarningMessageWithHeaderAndSubstringFlags {
            success,
            ret: (),
            
        }
    }
}

    fn native_hide_hud_and_radar_this_frame(&self, ) -> ResultOfHideHudAndRadarThisFrame {
    unsafe {
        
        let success = sdk::natives::hide_hud_and_radar_this_frame(
            
        );
        
        
        ResultOfHideHudAndRadarThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_additional_text(&self, gxt_: Option<String>,
slot_: i32) -> ResultOfRequestAdditionalText {
    unsafe {
        let mut gxt_ = sdk_helpers::create_c_string_ptr(gxt_);
let mut slot_ = slot_;
        let success = sdk::natives::request_additional_text(
            gxt_.as_ref().unwrap(),
slot_,
        );
        
        
        ResultOfRequestAdditionalText {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_minimap_golf_course(&self, hole_: i32) -> ResultOfSetMinimapGolfCourse {
    unsafe {
        let mut hole_ = hole_;
        let success = sdk::natives::set_minimap_golf_course(
            hole_,
        );
        
        
        ResultOfSetMinimapGolfCourse {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_blip_hud_colour(&self, blip_: i32) -> ResultOfGetBlipHudColour {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_hud_colour(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOfGetBlipHudColour {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_hud_set_weapon_wheel_top_slot(&self, weapon_hash_: u32) -> ResultOfHudSetWeaponWheelTopSlot {
    unsafe {
        let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::hud_set_weapon_wheel_top_slot(
            weapon_hash_,
        );
        
        
        ResultOfHudSetWeaponWheelTopSlot {
            success,
            ret: (),
            
        }
    }
}

    fn native_trigger_sonar_blip(&self, pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
radius_: f32,
p4_: i32) -> ResultOfTriggerSonarBlip {
    unsafe {
        let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut radius_ = radius_;
let mut p4_ = p4_;
        let success = sdk::natives::trigger_sonar_blip(
            pos_x_,
pos_y_,
pos_z_,
radius_,
p4_,
        );
        
        
        ResultOfTriggerSonarBlip {
            success,
            ret: (),
            
        }
    }
}

    fn native_display_sniper_scope_this_frame(&self, ) -> ResultOfDisplaySniperScopeThisFrame {
    unsafe {
        
        let success = sdk::natives::display_sniper_scope_this_frame(
            
        );
        
        
        ResultOfDisplaySniperScopeThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_pulse_blip(&self, blip_: i32) -> ResultOfPulseBlip {
    unsafe {
        let mut blip_ = blip_;
        let success = sdk::natives::pulse_blip(
            blip_,
        );
        
        
        ResultOfPulseBlip {
            success,
            ret: (),
            
        }
    }
}

    fn native_show_tick_on_blip(&self, blip_: i32,
toggle_: bool) -> ResultOfShowTickOnBlip {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::show_tick_on_blip(
            blip_,
toggle_,
        );
        
        
        ResultOfShowTickOnBlip {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_frontend_active(&self, active_: bool) -> ResultOfSetFrontendActive {
    unsafe {
        let mut active_ = active_;
        let success = sdk::natives::set_frontend_active(
            active_,
        );
        
        
        ResultOfSetFrontendActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_show_height_on_blip(&self, blip_: i32,
toggle_: bool) -> ResultOfShowHeightOnBlip {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::show_height_on_blip(
            blip_,
toggle_,
        );
        
        
        ResultOfShowHeightOnBlip {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_minimap_component(&self, component_id_: i32,
toggle_: bool,
override_color_: i32) -> ResultOfSetMinimapComponent {
    unsafe {
        let mut native_return = Default::default();
let mut component_id_ = component_id_;
let mut toggle_ = toggle_;
let mut override_color_ = override_color_;
        let success = sdk::natives::set_minimap_component(
            &mut native_return,
component_id_,
toggle_,
override_color_,
        );
        let native_return = native_return;
        
        ResultOfSetMinimapComponent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_open_social_club_menu(&self, ) -> ResultOfOpenSocialClubMenu {
    unsafe {
        
        let success = sdk::natives::open_social_club_menu(
            
        );
        
        
        ResultOfOpenSocialClubMenu {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_text_component_substring_phone_number(&self, p0_: Option<String>,
p1_: i32) -> ResultOfAddTextComponentSubstringPhoneNumber {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
        let success = sdk::natives::add_text_component_substring_phone_number(
            p0_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOfAddTextComponentSubstringPhoneNumber {
            success,
            ret: (),
            
        }
    }
}

    fn native_display_hud_when_not_in_state_of_play_this_frame(&self, ) -> ResultOfDisplayHudWhenNotInStateOfPlayThisFrame {
    unsafe {
        
        let success = sdk::natives::display_hud_when_not_in_state_of_play_this_frame(
            
        );
        
        
        ResultOfDisplayHudWhenNotInStateOfPlayThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_floating_help_text_screen_position(&self, hud_index_: i32,
x_: f32,
y_: f32) -> ResultOfSetFloatingHelpTextScreenPosition {
    unsafe {
        let mut hud_index_ = hud_index_;
let mut x_ = x_;
let mut y_ = y_;
        let success = sdk::natives::set_floating_help_text_screen_position(
            hud_index_,
x_,
y_,
        );
        
        
        ResultOfSetFloatingHelpTextScreenPosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_dynamic_pause_menu_error_message(&self, ) -> ResultOfClearDynamicPauseMenuErrorMessage {
    unsafe {
        
        let success = sdk::natives::clear_dynamic_pause_menu_error_message(
            
        );
        
        
        ResultOfClearDynamicPauseMenuErrorMessage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_fake_pausemap_player_position_this_frame(&self, x_: f32,
y_: f32) -> ResultOfSetFakePausemapPlayerPositionThisFrame {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
        let success = sdk::natives::set_fake_pausemap_player_position_this_frame(
            x_,
y_,
        );
        
        
        ResultOfSetFakePausemapPlayerPositionThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_pause_menuception_go_deeper(&self, page_: i32) -> ResultOfPauseMenuceptionGoDeeper {
    unsafe {
        let mut page_ = page_;
        let success = sdk::natives::pause_menuception_go_deeper(
            page_,
        );
        
        
        ResultOfPauseMenuceptionGoDeeper {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_floating_help_text_world_position(&self, hud_index_: i32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfSetFloatingHelpTextWorldPosition {
    unsafe {
        let mut hud_index_ = hud_index_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_floating_help_text_world_position(
            hud_index_,
x_,
y_,
z_,
        );
        
        
        ResultOfSetFloatingHelpTextWorldPosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_floating_help_text_style(&self, hud_index_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOfSetFloatingHelpTextStyle {
    unsafe {
        let mut hud_index_ = hud_index_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::set_floating_help_text_style(
            hud_index_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOfSetFloatingHelpTextStyle {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_named_rendertarget_registered(&self, name_: Option<String>) -> ResultOfIsNamedRendertargetRegistered {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::is_named_rendertarget_registered(
            &mut native_return,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfIsNamedRendertargetRegistered {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_message_being_displayed(&self, ) -> ResultOfIsMessageBeingDisplayed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_message_being_displayed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsMessageBeingDisplayed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_gps_race_track(&self, ) -> ResultOfClearGpsRaceTrack {
    unsafe {
        
        let success = sdk::natives::clear_gps_race_track(
            
        );
        
        
        ResultOfClearGpsRaceTrack {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_unlock_tu_with_color(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOfEndTextCommandThefeedPostUnlockTuWithColor {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::end_text_command_thefeed_post_unlock_tu_with_color(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        let native_return = native_return;
        
        ResultOfEndTextCommandThefeedPostUnlockTuWithColor {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_warning_message(&self, title_msg_: Option<String>,
flags_: i32,
prompt_msg_: Option<String>,
p3_: bool,
p4_: i32,
p5_: Option<String>,
p6_: Option<String>,
show_background_: bool,
error_code_: i32) -> ResultOfSetWarningMessage {
    unsafe {
        let mut title_msg_ = sdk_helpers::create_c_string_ptr(title_msg_);
let mut flags_ = flags_;
let mut prompt_msg_ = sdk_helpers::create_c_string_ptr(prompt_msg_);
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = sdk_helpers::create_c_string_ptr(p5_);
let mut p6_ = sdk_helpers::create_c_string_ptr(p6_);
let mut show_background_ = show_background_;
let mut error_code_ = error_code_;
        let success = sdk::natives::set_warning_message(
            title_msg_.as_ref().unwrap(),
flags_,
prompt_msg_.as_ref().unwrap(),
p3_,
p4_,
p5_.as_ref().unwrap(),
p6_.as_ref().unwrap(),
show_background_,
error_code_,
        );
        
        
        ResultOfSetWarningMessage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_icon_colour(&self, color_: i32) -> ResultOfSetPlayerIconColour {
    unsafe {
        let mut color_ = color_;
        let success = sdk::natives::set_player_icon_colour(
            color_,
        );
        
        
        ResultOfSetPlayerIconColour {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_filename_for_audio_conversation(&self, label_name_: Option<String>) -> ResultOfGetFilenameForAudioConversation {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut label_name_ = sdk_helpers::create_c_string_ptr(label_name_);
        let success = sdk::natives::get_filename_for_audio_conversation(
            native_return.pin_mut(),
label_name_.as_ref().unwrap(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetFilenameForAudioConversation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mp_gamer_tag_big_text(&self, gamer_tag_id_: i32,
string_: Option<String>) -> ResultOfSetMpGamerTagBigText {
    unsafe {
        let mut gamer_tag_id_ = gamer_tag_id_;
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::set_mp_gamer_tag_big_text(
            gamer_tag_id_,
string_.as_ref().unwrap(),
        );
        
        
        ResultOfSetMpGamerTagBigText {
            success,
            ret: (),
            
        }
    }
}

    fn native_mp_text_chat_is_team_job(&self, p0_: i32) -> ResultOfMpTextChatIsTeamJob {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::mp_text_chat_is_team_job(
            p0_,
        );
        
        
        ResultOfMpTextChatIsTeamJob {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_hud_colour(&self, hud_color_index_: i32,
r_: i32,
g_: i32,
b_: i32,
a_: i32) -> ResultOfGetHudColour {
    unsafe {
        let mut hud_color_index_ = hud_color_index_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut a_ = a_;
        let success = sdk::natives::get_hud_colour(
            &mut r_,
&mut g_,
&mut b_,
&mut a_,
hud_color_index_,
        );
        let r_ = r_;
let g_ = g_;
let b_ = b_;
let a_ = a_;
        
        ResultOfGetHudColour {
            success,
            ret: (),
            r_,
g_,
b_,
a_
        }
    }
}

    fn native_get_ai_ped_ped_blip_index(&self, ped_: u32) -> ResultOfGetAiPedPedBlipIndex {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ai_ped_ped_blip_index(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetAiPedPedBlipIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_menu_layout_changed_event_details(&self, last_item_menu_id_: i32,
selected_item_menu_id_: i32,
selected_item_unique_id_: i32) -> ResultOfGetMenuLayoutChangedEventDetails {
    unsafe {
        let mut last_item_menu_id_ = last_item_menu_id_;
let mut selected_item_menu_id_ = selected_item_menu_id_;
let mut selected_item_unique_id_ = selected_item_unique_id_;
        let success = sdk::natives::get_menu_layout_changed_event_details(
            &mut last_item_menu_id_,
&mut selected_item_menu_id_,
&mut selected_item_unique_id_,
        );
        let last_item_menu_id_ = last_item_menu_id_;
let selected_item_menu_id_ = selected_item_menu_id_;
let selected_item_unique_id_ = selected_item_unique_id_;
        
        ResultOfGetMenuLayoutChangedEventDetails {
            success,
            ret: (),
            last_item_menu_id_,
selected_item_menu_id_,
selected_item_unique_id_
        }
    }
}

    fn native_set_inside_very_large_interior(&self, toggle_: bool) -> ResultOfSetInsideVeryLargeInterior {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_inside_very_large_interior(
            toggle_,
        );
        
        
        ResultOfSetInsideVeryLargeInterior {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ime_in_progress(&self, ) -> ResultOfIsImeInProgress {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_ime_in_progress(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsImeInProgress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_length_of_string_with_this_text_label(&self, gxt_: Option<String>) -> ResultOfGetLengthOfStringWithThisTextLabel {
    unsafe {
        let mut native_return = Default::default();
let mut gxt_ = sdk_helpers::create_c_string_ptr(gxt_);
        let success = sdk::natives::get_length_of_string_with_this_text_label(
            &mut native_return,
gxt_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfGetLengthOfStringWithThisTextLabel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_open_online_policies_menu(&self, ) -> ResultOfOpenOnlinePoliciesMenu {
    unsafe {
        
        let success = sdk::natives::open_online_policies_menu(
            
        );
        
        
        ResultOfOpenOnlinePoliciesMenu {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_is_in_director_mode(&self, toggle_: bool) -> ResultOfSetPlayerIsInDirectorMode {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_is_in_director_mode(
            toggle_,
        );
        
        
        ResultOfSetPlayerIsInDirectorMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_text_component_substring_blip_name(&self, blip_: i32) -> ResultOfAddTextComponentSubstringBlipName {
    unsafe {
        let mut blip_ = blip_;
        let success = sdk::natives::add_text_component_substring_blip_name(
            blip_,
        );
        
        
        ResultOfAddTextComponentSubstringBlipName {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_clear_frozen_post(&self, ) -> ResultOfThefeedClearFrozenPost {
    unsafe {
        
        let success = sdk::natives::thefeed_clear_frozen_post(
            
        );
        
        
        ResultOfThefeedClearFrozenPost {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_description_for_ugc_mission_eight_strings(&self, p0_: bool,
p1_: Option<String>,
p2_: Option<String>,
p3_: Option<String>,
p4_: Option<String>,
p5_: Option<String>,
p6_: Option<String>,
p7_: Option<String>,
p8_: Option<String>) -> ResultOfSetDescriptionForUgcMissionEightStrings {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut p3_ = sdk_helpers::create_c_string_ptr(p3_);
let mut p4_ = sdk_helpers::create_c_string_ptr(p4_);
let mut p5_ = sdk_helpers::create_c_string_ptr(p5_);
let mut p6_ = sdk_helpers::create_c_string_ptr(p6_);
let mut p7_ = sdk_helpers::create_c_string_ptr(p7_);
let mut p8_ = sdk_helpers::create_c_string_ptr(p8_);
        let success = sdk::natives::set_description_for_ugc_mission_eight_strings(
            p0_,
p1_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
p3_.as_ref().unwrap(),
p4_.as_ref().unwrap(),
p5_.as_ref().unwrap(),
p6_.as_ref().unwrap(),
p7_.as_ref().unwrap(),
p8_.as_ref().unwrap(),
        );
        
        
        ResultOfSetDescriptionForUgcMissionEightStrings {
            success,
            ret: (),
            
        }
    }
}

    fn native_unlock_minimap_angle(&self, ) -> ResultOfUnlockMinimapAngle {
    unsafe {
        
        let success = sdk::natives::unlock_minimap_angle(
            
        );
        
        
        ResultOfUnlockMinimapAngle {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_warning_screen_message_hash(&self, ) -> ResultOfGetWarningScreenMessageHash {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_warning_screen_message_hash(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetWarningScreenMessageHash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_refresh_waypoint(&self, ) -> ResultOfRefreshWaypoint {
    unsafe {
        
        let success = sdk::natives::refresh_waypoint(
            
        );
        
        
        ResultOfRefreshWaypoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_get_last_shown_phone_activatable_feed_id(&self, ) -> ResultOfThefeedGetLastShownPhoneActivatableFeedId {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::thefeed_get_last_shown_phone_activatable_feed_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfThefeedGetLastShownPhoneActivatableFeedId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_display_player_name_tags_on_blips(&self, toggle_: bool) -> ResultOfDisplayPlayerNameTagsOnBlips {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::display_player_name_tags_on_blips(
            toggle_,
        );
        
        
        ResultOfDisplayPlayerNameTagsOnBlips {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_route_colour(&self, blip_: i32,
colour_: i32) -> ResultOfSetBlipRouteColour {
    unsafe {
        let mut blip_ = blip_;
let mut colour_ = colour_;
        let success = sdk::natives::set_blip_route_colour(
            blip_,
colour_,
        );
        
        
        ResultOfSetBlipRouteColour {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_fake_cone_array(&self, ) -> ResultOfClearFakeConeArray {
    unsafe {
        
        let success = sdk::natives::clear_fake_cone_array(
            
        );
        
        
        ResultOfClearFakeConeArray {
            success,
            ret: (),
            
        }
    }
}

    fn native_pause_menu_is_context_active(&self, context_hash_: u32) -> ResultOfPauseMenuIsContextActive {
    unsafe {
        let mut native_return = Default::default();
let mut context_hash_ = context_hash_;
        let success = sdk::natives::pause_menu_is_context_active(
            &mut native_return,
context_hash_,
        );
        let native_return = native_return;
        
        ResultOfPauseMenuIsContextActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_begin_text_command_display_help(&self, input_type_: Option<String>) -> ResultOfBeginTextCommandDisplayHelp {
    unsafe {
        let mut input_type_ = sdk_helpers::create_c_string_ptr(input_type_);
        let success = sdk::natives::begin_text_command_display_help(
            input_type_.as_ref().unwrap(),
        );
        
        
        ResultOfBeginTextCommandDisplayHelp {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_text_command_is_message_displayed(&self, text_: Option<String>) -> ResultOfBeginTextCommandIsMessageDisplayed {
    unsafe {
        let mut text_ = sdk_helpers::create_c_string_ptr(text_);
        let success = sdk::natives::begin_text_command_is_message_displayed(
            text_.as_ref().unwrap(),
        );
        
        
        ResultOfBeginTextCommandIsMessageDisplayed {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_get_screen_width_of_display_text(&self, p0_: bool) -> ResultOfEndTextCommandGetScreenWidthOfDisplayText {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::end_text_command_get_screen_width_of_display_text(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfEndTextCommandGetScreenWidthOfDisplayText {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_blip(&self, blip_: i32) -> ResultOfRemoveBlip {
    unsafe {
        let mut blip_ = blip_;
        let success = sdk::natives::remove_blip(
            &mut blip_,
        );
        let blip_ = blip_;
        
        ResultOfRemoveBlip {
            success,
            ret: (),
            blip_
        }
    }
}

    fn native_force_close_text_input_box(&self, ) -> ResultOfForceCloseTextInputBox {
    unsafe {
        
        let success = sdk::natives::force_close_text_input_box(
            
        );
        
        
        ResultOfForceCloseTextInputBox {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_allow_ability_bar(&self, toggle_: bool) -> ResultOfSetAllowAbilityBar {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_allow_ability_bar(
            toggle_,
        );
        
        
        ResultOfSetAllowAbilityBar {
            success,
            ret: (),
            
        }
    }
}

    fn native_dont_zoom_minimap_when_running_this_frame(&self, ) -> ResultOfDontZoomMinimapWhenRunningThisFrame {
    unsafe {
        
        let success = sdk::natives::dont_zoom_minimap_when_running_this_frame(
            
        );
        
        
        ResultOfDontZoomMinimapWhenRunningThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_is_message_displayed(&self, ) -> ResultOfEndTextCommandIsMessageDisplayed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::end_text_command_is_message_displayed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfEndTextCommandIsMessageDisplayed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_streaming_additional_text(&self, p0_: i32) -> ResultOfIsStreamingAdditionalText {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::is_streaming_additional_text(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfIsStreamingAdditionalText {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mouse_cursor_style(&self, sprite_id_: i32) -> ResultOfSetMouseCursorStyle {
    unsafe {
        let mut sprite_id_ = sprite_id_;
        let success = sdk::natives::set_mouse_cursor_style(
            sprite_id_,
        );
        
        
        ResultOfSetMouseCursorStyle {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_help(&self, toggle_: bool) -> ResultOfClearHelp {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::clear_help(
            toggle_,
        );
        
        
        ResultOfClearHelp {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_crew_rankup_with_literal_flag(&self, p0_: Option<String>,
p1_: Option<String>,
p2_: Option<String>,
p3_: bool,
p4_: bool) -> ResultOfEndTextCommandThefeedPostCrewRankupWithLiteralFlag {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::end_text_command_thefeed_post_crew_rankup_with_literal_flag(
            &mut native_return,
p0_.as_ref().unwrap(),
p1_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
p3_,
p4_,
        );
        let native_return = native_return;
        
        ResultOfEndTextCommandThefeedPostCrewRankupWithLiteralFlag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_character_menu_ped_float_stat(&self, stat_hash_: f32,
out_value_: f32,
p2_: bool) -> ResultOfGetCharacterMenuPedFloatStat {
    unsafe {
        let mut native_return = Default::default();
let mut stat_hash_ = stat_hash_;
let mut out_value_ = out_value_;
let mut p2_ = p2_;
        let success = sdk::natives::get_character_menu_ped_float_stat(
            &mut native_return,
&mut out_value_,
stat_hash_,
p2_,
        );
        let native_return = native_return;
let out_value_ = out_value_;
        
        ResultOfGetCharacterMenuPedFloatStat {
            success,
            ret: native_return,
            out_value_
        }
    }
}

    fn native_begin_text_command_override_button_text(&self, gxt_entry_: Option<String>) -> ResultOfBeginTextCommandOverrideButtonText {
    unsafe {
        let mut gxt_entry_ = sdk_helpers::create_c_string_ptr(gxt_entry_);
        let success = sdk::natives::begin_text_command_override_button_text(
            gxt_entry_.as_ref().unwrap(),
        );
        
        
        ResultOfBeginTextCommandOverrideButtonText {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_gps_custom_route_render(&self, toggle_: bool,
radar_thickness_: i32,
map_thickness_: i32) -> ResultOfSetGpsCustomRouteRender {
    unsafe {
        let mut toggle_ = toggle_;
let mut radar_thickness_ = radar_thickness_;
let mut map_thickness_ = map_thickness_;
        let success = sdk::natives::set_gps_custom_route_render(
            toggle_,
radar_thickness_,
map_thickness_,
        );
        
        
        ResultOfSetGpsCustomRouteRender {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_display(&self, blip_: i32,
display_id_: i32) -> ResultOfSetBlipDisplay {
    unsafe {
        let mut blip_ = blip_;
let mut display_id_ = display_id_;
        let success = sdk::natives::set_blip_display(
            blip_,
display_id_,
        );
        
        
        ResultOfSetBlipDisplay {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_get_number_of_lines_for_string(&self, x_: f32,
y_: f32) -> ResultOfEndTextCommandGetNumberOfLinesForString {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
        let success = sdk::natives::end_text_command_get_number_of_lines_for_string(
            &mut native_return,
x_,
y_,
        );
        let native_return = native_return;
        
        ResultOfEndTextCommandGetNumberOfLinesForString {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_pausemap_in_interior_mode(&self, ) -> ResultOfIsPausemapInInteriorMode {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_pausemap_in_interior_mode(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsPausemapInInteriorMode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_menu_ped_masked_int_stat(&self, stat_hash_: u32,
out_value_: i32,
mask_: i32,
p3_: bool) -> ResultOfGetMenuPedMaskedIntStat {
    unsafe {
        let mut native_return = Default::default();
let mut stat_hash_ = stat_hash_;
let mut out_value_ = out_value_;
let mut mask_ = mask_;
let mut p3_ = p3_;
        let success = sdk::natives::get_menu_ped_masked_int_stat(
            &mut native_return,
&mut out_value_,
stat_hash_,
mask_,
p3_,
        );
        let native_return = native_return;
let out_value_ = out_value_;
        
        ResultOfGetMenuPedMaskedIntStat {
            success,
            ret: native_return,
            out_value_
        }
    }
}

    fn native_set_minimap_in_prologue(&self, toggle_: bool) -> ResultOfSetMinimapInPrologue {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_minimap_in_prologue(
            toggle_,
        );
        
        
        ResultOfSetMinimapInPrologue {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_reportugc_menu_open(&self, ) -> ResultOfIsReportugcMenuOpen {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_reportugc_menu_open(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsReportugcMenuOpen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_pausemenu_spinner(&self, p0_: bool) -> ResultOfDisablePausemenuSpinner {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::disable_pausemenu_spinner(
            p0_,
        );
        
        
        ResultOfDisablePausemenuSpinner {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_set_background_color_for_next_post(&self, hud_color_index_: i32) -> ResultOfThefeedSetBackgroundColorForNextPost {
    unsafe {
        let mut hud_color_index_ = hud_color_index_;
        let success = sdk::natives::thefeed_set_background_color_for_next_post(
            hud_color_index_,
        );
        
        
        ResultOfThefeedSetBackgroundColorForNextPost {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_text_component_substring_website(&self, website_: Option<String>) -> ResultOfAddTextComponentSubstringWebsite {
    unsafe {
        let mut website_ = sdk_helpers::create_c_string_ptr(website_);
        let success = sdk::natives::add_text_component_substring_website(
            website_.as_ref().unwrap(),
        );
        
        
        ResultOfAddTextComponentSubstringWebsite {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_multiplayer_wallet_cash(&self, ) -> ResultOfRemoveMultiplayerWalletCash {
    unsafe {
        
        let success = sdk::natives::remove_multiplayer_wallet_cash(
            
        );
        
        
        ResultOfRemoveMultiplayerWalletCash {
            success,
            ret: (),
            
        }
    }
}

    fn native_display_help_text_this_frame(&self, message_: Option<String>,
p1_: bool) -> ResultOfDisplayHelpTextThisFrame {
    unsafe {
        let mut message_ = sdk_helpers::create_c_string_ptr(message_);
let mut p1_ = p1_;
        let success = sdk::natives::display_help_text_this_frame(
            message_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOfDisplayHelpTextThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_multiplayer_hud_cash(&self, ) -> ResultOfRemoveMultiplayerHudCash {
    unsafe {
        
        let success = sdk::natives::remove_multiplayer_hud_cash(
            
        );
        
        
        ResultOfRemoveMultiplayerHudCash {
            success,
            ret: (),
            
        }
    }
}

    fn native_display_cash(&self, toggle_: bool) -> ResultOfDisplayCash {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::display_cash(
            toggle_,
        );
        
        
        ResultOfDisplayCash {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_blip_alpha(&self, blip_: i32) -> ResultOfGetBlipAlpha {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_alpha(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOfGetBlipAlpha {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_max_health_hud_display(&self, maximum_value_: i32) -> ResultOfSetMaxHealthHudDisplay {
    unsafe {
        let mut maximum_value_ = maximum_value_;
        let success = sdk::natives::set_max_health_hud_display(
            maximum_value_,
        );
        
        
        ResultOfSetMaxHealthHudDisplay {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_ai_blip_notice_range(&self, ped_: u32,
range_: f32) -> ResultOfSetPedAiBlipNoticeRange {
    unsafe {
        let mut ped_ = ped_;
let mut range_ = range_;
        let success = sdk::natives::set_ped_ai_blip_notice_range(
            ped_,
range_,
        );
        
        
        ResultOfSetPedAiBlipNoticeRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_crewtag(&self, p0_: bool,
p1_: bool,
p2_: i32,
p3_: i32,
is_leader_: bool,
unk0_: bool,
clan_desc_: i32,
r_: i32,
g_: i32,
b_: i32) -> ResultOfEndTextCommandThefeedPostCrewtag {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut is_leader_ = is_leader_;
let mut unk0_ = unk0_;
let mut clan_desc_ = clan_desc_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::end_text_command_thefeed_post_crewtag(
            &mut native_return,
&mut p2_,
p0_,
p1_,
p3_,
is_leader_,
unk0_,
clan_desc_,
r_,
g_,
b_,
        );
        let native_return = native_return;
let p2_ = p2_;
        
        ResultOfEndTextCommandThefeedPostCrewtag {
            success,
            ret: native_return,
            p2_
        }
    }
}

    fn native_get_current_website_id(&self, ) -> ResultOfGetCurrentWebsiteId {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_current_website_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetCurrentWebsiteId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mouse_cursor_visible(&self, toggle_: bool) -> ResultOfSetMouseCursorVisible {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_mouse_cursor_visible(
            toggle_,
        );
        
        
        ResultOfSetMouseCursorVisible {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_first_n_characters_of_literal_string(&self, string_: Option<String>,
length_: i32) -> ResultOfGetFirstNcharactersOfLiteralString {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
let mut length_ = length_;
        let success = sdk::natives::get_first_n_characters_of_literal_string(
            native_return.pin_mut(),
string_.as_ref().unwrap(),
length_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetFirstNcharactersOfLiteralString {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ability_bar_value(&self, p0_: f32,
p1_: f32) -> ResultOfSetAbilityBarValue {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ability_bar_value(
            p0_,
p1_,
        );
        
        
        ResultOfSetAbilityBarValue {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_number_of_active_blips(&self, ) -> ResultOfGetNumberOfActiveBlips {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_number_of_active_blips(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetNumberOfActiveBlips {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_blip_info_id_pickup_index(&self, blip_: i32) -> ResultOfGetBlipInfoIdPickupIndex {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_info_id_pickup_index(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOfGetBlipInfoIdPickupIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mp_gamer_tag_num_packages(&self, gamer_tag_id_: i32,
p1_: i32) -> ResultOfSetMpGamerTagNumPackages {
    unsafe {
        let mut gamer_tag_id_ = gamer_tag_id_;
let mut p1_ = p1_;
        let success = sdk::natives::set_mp_gamer_tag_num_packages(
            gamer_tag_id_,
p1_,
        );
        
        
        ResultOfSetMpGamerTagNumPackages {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_brief(&self, ) -> ResultOfClearBrief {
    unsafe {
        
        let success = sdk::natives::clear_brief(
            
        );
        
        
        ResultOfClearBrief {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_print(&self, duration_: i32,
draw_immediately_: bool) -> ResultOfEndTextCommandPrint {
    unsafe {
        let mut duration_ = duration_;
let mut draw_immediately_ = draw_immediately_;
        let success = sdk::natives::end_text_command_print(
            duration_,
draw_immediately_,
        );
        
        
        ResultOfEndTextCommandPrint {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_social_club_tour(&self, name_: Option<String>) -> ResultOfSetSocialClubTour {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::set_social_club_tour(
            name_.as_ref().unwrap(),
        );
        
        
        ResultOfSetSocialClubTour {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_radar_preference_switched_on(&self, ) -> ResultOfIsRadarPreferenceSwitchedOn {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_radar_preference_switched_on(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsRadarPreferenceSwitchedOn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cop_blip_sprite(&self, p0_: i32,
p1_: f32) -> ResultOfSetCopBlipSprite {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cop_blip_sprite(
            p0_,
p1_,
        );
        
        
        ResultOfSetCopBlipSprite {
            success,
            ret: (),
            
        }
    }
}

    fn native_display_radar(&self, toggle_: bool) -> ResultOfDisplayRadar {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::display_radar(
            toggle_,
        );
        
        
        ResultOfDisplayRadar {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_force_render_on(&self, ) -> ResultOfThefeedForceRenderOn {
    unsafe {
        
        let success = sdk::natives::thefeed_force_render_on(
            
        );
        
        
        ResultOfThefeedForceRenderOn {
            success,
            ret: (),
            
        }
    }
}

    fn native_hud_get_weapon_wheel_top_slot(&self, weapon_type_index_: i32) -> ResultOfHudGetWeaponWheelTopSlot {
    unsafe {
        let mut native_return = Default::default();
let mut weapon_type_index_ = weapon_type_index_;
        let success = sdk::natives::hud_get_weapon_wheel_top_slot(
            &mut native_return,
weapon_type_index_,
        );
        let native_return = native_return;
        
        ResultOfHudGetWeaponWheelTopSlot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_fake_gps_player_position_this_frame(&self, x_: f32,
y_: f32,
p2_: i32) -> ResultOfSetFakeGpsPlayerPositionThisFrame {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut p2_ = p2_;
        let success = sdk::natives::set_fake_gps_player_position_this_frame(
            x_,
y_,
p2_,
        );
        
        
        ResultOfSetFakeGpsPlayerPositionThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_flash_wanted_display(&self, p0_: bool) -> ResultOfFlashWantedDisplay {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::flash_wanted_display(
            p0_,
        );
        
        
        ResultOfFlashWantedDisplay {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_pm_player_crew_color(&self, r_: i32,
g_: i32,
b_: i32) -> ResultOfGetPmPlayerCrewColor {
    unsafe {
        let mut native_return = Default::default();
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::get_pm_player_crew_color(
            &mut native_return,
&mut r_,
&mut g_,
&mut b_,
        );
        let native_return = native_return;
let r_ = r_;
let g_ = g_;
let b_ = b_;
        
        ResultOfGetPmPlayerCrewColor {
            success,
            ret: native_return,
            r_,
g_,
b_
        }
    }
}

    fn native_has_director_mode_been_launched_by_code(&self, ) -> ResultOfHasDirectorModeBeenLaunchedByCode {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_director_mode_been_launched_by_code(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfHasDirectorModeBeenLaunchedByCode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_show_number_on_blip(&self, blip_: i32,
number_: i32) -> ResultOfShowNumberOnBlip {
    unsafe {
        let mut blip_ = blip_;
let mut number_ = number_;
        let success = sdk::natives::show_number_on_blip(
            blip_,
number_,
        );
        
        
        ResultOfShowNumberOnBlip {
            success,
            ret: (),
            
        }
    }
}

    fn native_hud_get_weapon_wheel_currently_highlighted(&self, ) -> ResultOfHudGetWeaponWheelCurrentlyHighlighted {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::hud_get_weapon_wheel_currently_highlighted(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfHudGetWeaponWheelCurrentlyHighlighted {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_hide_street_and_car_names_this_frame(&self, ) -> ResultOfHideStreetAndCarNamesThisFrame {
    unsafe {
        
        let success = sdk::natives::hide_street_and_car_names_this_frame(
            
        );
        
        
        ResultOfHideStreetAndCarNamesThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_text_leading(&self, p0_: i32) -> ResultOfSetTextLeading {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_text_leading(
            p0_,
        );
        
        
        ResultOfSetTextLeading {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_blip_flashing(&self, blip_: i32) -> ResultOfIsBlipFlashing {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::is_blip_flashing(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOfIsBlipFlashing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_display_ammo_this_frame(&self, display_: bool) -> ResultOfDisplayAmmoThisFrame {
    unsafe {
        let mut display_ = display_;
        let success = sdk::natives::display_ammo_this_frame(
            display_,
        );
        
        
        ResultOfDisplayAmmoThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_display_hud(&self, toggle_: bool) -> ResultOfDisplayHud {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::display_hud(
            toggle_,
        );
        
        
        ResultOfDisplayHud {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mp_gamer_tags_should_use_vehicle_health(&self, gamer_tag_id_: i32,
toggle_: bool) -> ResultOfSetMpGamerTagsShouldUseVehicleHealth {
    unsafe {
        let mut gamer_tag_id_ = gamer_tag_id_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_mp_gamer_tags_should_use_vehicle_health(
            gamer_tag_id_,
toggle_,
        );
        
        
        ResultOfSetMpGamerTagsShouldUseVehicleHealth {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_blip_exist(&self, blip_: i32) -> ResultOfDoesBlipExist {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::does_blip_exist(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOfDoesBlipExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_waypoint_off(&self, ) -> ResultOfSetWaypointOff {
    unsafe {
        
        let success = sdk::natives::set_waypoint_off(
            
        );
        
        
        ResultOfSetWaypointOff {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_hud_hidden(&self, ) -> ResultOfIsHudHidden {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_hud_hidden(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsHudHidden {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_end_text_command_override_button_text(&self, p0_: i32) -> ResultOfEndTextCommandOverrideButtonText {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::end_text_command_override_button_text(
            p0_,
        );
        
        
        ResultOfEndTextCommandOverrideButtonText {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_rotation_with_float(&self, blip_: i32,
heading_: f32) -> ResultOfSetBlipRotationWithFloat {
    unsafe {
        let mut blip_ = blip_;
let mut heading_ = heading_;
        let success = sdk::natives::set_blip_rotation_with_float(
            blip_,
heading_,
        );
        
        
        ResultOfSetBlipRotationWithFloat {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_flush_queue(&self, ) -> ResultOfThefeedFlushQueue {
    unsafe {
        
        let success = sdk::natives::thefeed_flush_queue(
            
        );
        
        
        ResultOfThefeedFlushQueue {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_point_to_gps_multi_route(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfAddPointToGpsMultiRoute {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::add_point_to_gps_multi_route(
            x_,
y_,
z_,
        );
        
        
        ResultOfAddPointToGpsMultiRoute {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_is_paused(&self, ) -> ResultOfThefeedIsPaused {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::thefeed_is_paused(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfThefeedIsPaused {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_end_text_command_thefeed_post_award(&self, texture_dict_: Option<String>,
texture_name_: Option<String>,
rp_bonus_: i32,
color_overlay_: i32,
title_label_: Option<String>) -> ResultOfEndTextCommandThefeedPostAward {
    unsafe {
        let mut native_return = Default::default();
let mut texture_dict_ = sdk_helpers::create_c_string_ptr(texture_dict_);
let mut texture_name_ = sdk_helpers::create_c_string_ptr(texture_name_);
let mut rp_bonus_ = rp_bonus_;
let mut color_overlay_ = color_overlay_;
let mut title_label_ = sdk_helpers::create_c_string_ptr(title_label_);
        let success = sdk::natives::end_text_command_thefeed_post_award(
            &mut native_return,
texture_dict_.as_ref().unwrap(),
texture_name_.as_ref().unwrap(),
rp_bonus_,
color_overlay_,
title_label_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfEndTextCommandThefeedPostAward {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_blip_flash_interval(&self, blip_: i32,
p1_: i32) -> ResultOfSetBlipFlashInterval {
    unsafe {
        let mut blip_ = blip_;
let mut p1_ = p1_;
        let success = sdk::natives::set_blip_flash_interval(
            blip_,
p1_,
        );
        
        
        ResultOfSetBlipFlashInterval {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_hud_component_position(&self, id_: i32,
x_: f32,
y_: f32) -> ResultOfSetHudComponentPosition {
    unsafe {
        let mut id_ = id_;
let mut x_ = x_;
let mut y_ = y_;
        let success = sdk::natives::set_hud_component_position(
            id_,
x_,
y_,
        );
        
        
        ResultOfSetHudComponentPosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mouse_cursor_this_frame(&self, ) -> ResultOfSetMouseCursorThisFrame {
    unsafe {
        
        let success = sdk::natives::set_mouse_cursor_this_frame(
            
        );
        
        
        ResultOfSetMouseCursorThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_text_command_busyspinner_on(&self, string_: Option<String>) -> ResultOfBeginTextCommandBusyspinnerOn {
    unsafe {
        let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::begin_text_command_busyspinner_on(
            string_.as_ref().unwrap(),
        );
        
        
        ResultOfBeginTextCommandBusyspinnerOn {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_text_label_exist(&self, gxt_: Option<String>) -> ResultOfDoesTextLabelExist {
    unsafe {
        let mut native_return = Default::default();
let mut gxt_ = sdk_helpers::create_c_string_ptr(gxt_);
        let success = sdk::natives::does_text_label_exist(
            &mut native_return,
gxt_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfDoesTextLabelExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_give_ped_to_pause_menu(&self, ped_: u32,
p1_: i32) -> ResultOfGivePedToPauseMenu {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::give_ped_to_pause_menu(
            ped_,
p1_,
        );
        
        
        ResultOfGivePedToPauseMenu {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_subtitle_preference_switched_on(&self, ) -> ResultOfIsSubtitlePreferenceSwitchedOn {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_subtitle_preference_switched_on(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsSubtitlePreferenceSwitchedOn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_this_additional_text_loaded(&self, gxt_: Option<String>,
slot_: i32) -> ResultOfHasThisAdditionalTextLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut gxt_ = sdk_helpers::create_c_string_ptr(gxt_);
let mut slot_ = slot_;
        let success = sdk::natives::has_this_additional_text_loaded(
            &mut native_return,
gxt_.as_ref().unwrap(),
slot_,
        );
        let native_return = native_return;
        
        ResultOfHasThisAdditionalTextLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_thefeed_auto_post_gametips_off(&self, ) -> ResultOfThefeedAutoPostGametipsOff {
    unsafe {
        
        let success = sdk::natives::thefeed_auto_post_gametips_off(
            
        );
        
        
        ResultOfThefeedAutoPostGametipsOff {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_coords(&self, blip_: i32,
pos_x_: f32,
pos_y_: f32,
pos_z_: f32) -> ResultOfSetBlipCoords {
    unsafe {
        let mut blip_ = blip_;
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
        let success = sdk::natives::set_blip_coords(
            blip_,
pos_x_,
pos_y_,
pos_z_,
        );
        
        
        ResultOfSetBlipCoords {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_priority(&self, blip_: i32,
priority_: i32) -> ResultOfSetBlipPriority {
    unsafe {
        let mut blip_ = blip_;
let mut priority_ = priority_;
        let success = sdk::natives::set_blip_priority(
            blip_,
priority_,
        );
        
        
        ResultOfSetBlipPriority {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_warning_message_ready_for_control(&self, ) -> ResultOfIsWarningMessageReadyForControl {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_warning_message_ready_for_control(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsWarningMessageReadyForControl {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_minimap_rendering(&self, ) -> ResultOfIsMinimapRendering {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_minimap_rendering(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsMinimapRendering {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_pause_menu_active(&self, ) -> ResultOfIsPauseMenuActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_pause_menu_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsPauseMenuActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_floating_help_text_to_entity(&self, hud_index_: i32,
entity_: u32,
offset_x_: f32,
offset_y_: f32) -> ResultOfSetFloatingHelpTextToEntity {
    unsafe {
        let mut hud_index_ = hud_index_;
let mut entity_ = entity_;
let mut offset_x_ = offset_x_;
let mut offset_y_ = offset_y_;
        let success = sdk::natives::set_floating_help_text_to_entity(
            hud_index_,
entity_,
offset_x_,
offset_y_,
        );
        
        
        ResultOfSetFloatingHelpTextToEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_mp_text_chat_typing(&self, ) -> ResultOfIsMpTextChatTyping {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_mp_text_chat_typing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsMpTextChatTyping {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_has_ai_blip_with_colour(&self, ped_: u32,
has_cone_: bool,
color_: i32) -> ResultOfSetPedHasAiBlipWithColour {
    unsafe {
        let mut ped_ = ped_;
let mut has_cone_ = has_cone_;
let mut color_ = color_;
        let success = sdk::natives::set_ped_has_ai_blip_with_colour(
            ped_,
has_cone_,
color_,
        );
        
        
        ResultOfSetPedHasAiBlipWithColour {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_flashes(&self, blip_: i32,
toggle_: bool) -> ResultOfSetBlipFlashes {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_blip_flashes(
            blip_,
toggle_,
        );
        
        
        ResultOfSetBlipFlashes {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_bright(&self, blip_: i32,
toggle_: bool) -> ResultOfSetBlipBright {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_blip_bright(
            blip_,
toggle_,
        );
        
        
        ResultOfSetBlipBright {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_character_from_audio_conversation_filename_with_byte_limit(&self, text_: Option<String>,
position_: i32,
length_: i32,
max_length_: i32) -> ResultOfGetCharacterFromAudioConversationFilenameWithByteLimit {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut text_ = sdk_helpers::create_c_string_ptr(text_);
let mut position_ = position_;
let mut length_ = length_;
let mut max_length_ = max_length_;
        let success = sdk::natives::get_character_from_audio_conversation_filename_with_byte_limit(
            native_return.pin_mut(),
text_.as_ref().unwrap(),
position_,
length_,
max_length_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetCharacterFromAudioConversationFilenameWithByteLimit {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_busyspinner_is_displaying(&self, ) -> ResultOfBusyspinnerIsDisplaying {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::busyspinner_is_displaying(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfBusyspinnerIsDisplaying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_blip_marker_long_distance(&self, p0_: i32,
p1_: i32) -> ResultOfSetBlipMarkerLongDistance {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_blip_marker_long_distance(
            p0_,
p1_,
        );
        
        
        ResultOfSetBlipMarkerLongDistance {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_reminder_message(&self, ) -> ResultOfClearReminderMessage {
    unsafe {
        
        let success = sdk::natives::clear_reminder_message(
            
        );
        
        
        ResultOfClearReminderMessage {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_versus_tu(&self, txd_name1_: Option<String>,
texture_name1_: Option<String>,
count1_: i32,
txd_name2_: Option<String>,
texture_name2_: Option<String>,
count2_: i32,
hud_color1_: i32,
hud_color2_: i32) -> ResultOfEndTextCommandThefeedPostVersusTu {
    unsafe {
        let mut native_return = Default::default();
let mut txd_name1_ = sdk_helpers::create_c_string_ptr(txd_name1_);
let mut texture_name1_ = sdk_helpers::create_c_string_ptr(texture_name1_);
let mut count1_ = count1_;
let mut txd_name2_ = sdk_helpers::create_c_string_ptr(txd_name2_);
let mut texture_name2_ = sdk_helpers::create_c_string_ptr(texture_name2_);
let mut count2_ = count2_;
let mut hud_color1_ = hud_color1_;
let mut hud_color2_ = hud_color2_;
        let success = sdk::natives::end_text_command_thefeed_post_versus_tu(
            &mut native_return,
txd_name1_.as_ref().unwrap(),
texture_name1_.as_ref().unwrap(),
count1_,
txd_name2_.as_ref().unwrap(),
texture_name2_.as_ref().unwrap(),
count2_,
hud_color1_,
hud_color2_,
        );
        let native_return = native_return;
        
        ResultOfEndTextCommandThefeedPostVersusTu {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_thefeed_report_logo_off(&self, ) -> ResultOfThefeedReportLogoOff {
    unsafe {
        
        let success = sdk::natives::thefeed_report_logo_off(
            
        );
        
        
        ResultOfThefeedReportLogoOff {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cop_blip_sprite_as_standard(&self, ) -> ResultOfSetCopBlipSpriteAsStandard {
    unsafe {
        
        let success = sdk::natives::set_cop_blip_sprite_as_standard(
            
        );
        
        
        ResultOfSetCopBlipSpriteAsStandard {
            success,
            ret: (),
            
        }
    }
}

    fn native_show_outline_indicator_on_blip(&self, blip_: i32,
toggle_: bool) -> ResultOfShowOutlineIndicatorOnBlip {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::show_outline_indicator_on_blip(
            blip_,
toggle_,
        );
        
        
        ResultOfShowOutlineIndicatorOnBlip {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_text_command_print(&self, gxt_entry_: Option<String>) -> ResultOfBeginTextCommandPrint {
    unsafe {
        let mut gxt_entry_ = sdk_helpers::create_c_string_ptr(gxt_entry_);
        let success = sdk::natives::begin_text_command_print(
            gxt_entry_.as_ref().unwrap(),
        );
        
        
        ResultOfBeginTextCommandPrint {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_global_actionscript_flag(&self, flag_index_: i32) -> ResultOfResetGlobalActionscriptFlag {
    unsafe {
        let mut flag_index_ = flag_index_;
        let success = sdk::natives::reset_global_actionscript_flag(
            flag_index_,
        );
        
        
        ResultOfResetGlobalActionscriptFlag {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_help_message_style(&self, style_: i32,
hud_color_: i32,
alpha_: i32,
p3_: i32,
p4_: i32) -> ResultOfSetHelpMessageStyle {
    unsafe {
        let mut style_ = style_;
let mut hud_color_ = hud_color_;
let mut alpha_ = alpha_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::set_help_message_style(
            style_,
hud_color_,
alpha_,
p3_,
p4_,
        );
        
        
        ResultOfSetHelpMessageStyle {
            success,
            ret: (),
            
        }
    }
}

    fn native_suppress_frontend_rendering_this_frame(&self, ) -> ResultOfSuppressFrontendRenderingThisFrame {
    unsafe {
        
        let success = sdk::natives::suppress_frontend_rendering_this_frame(
            
        );
        
        
        ResultOfSuppressFrontendRenderingThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_off_wanted_star_flash(&self, toggle_: bool) -> ResultOfForceOffWantedStarFlash {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::force_off_wanted_star_flash(
            toggle_,
        );
        
        
        ResultOfForceOffWantedStarFlash {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_set_snap_feed_item_positions(&self, p0_: bool) -> ResultOfThefeedSetSnapFeedItemPositions {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::thefeed_set_snap_feed_item_positions(
            p0_,
        );
        
        
        ResultOfThefeedSetSnapFeedItemPositions {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_set_blip_name(&self, blip_: i32) -> ResultOfEndTextCommandSetBlipName {
    unsafe {
        let mut blip_ = blip_;
        let success = sdk::natives::end_text_command_set_blip_name(
            blip_,
        );
        
        
        ResultOfEndTextCommandSetBlipName {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_hud_component_active(&self, id_: i32) -> ResultOfIsHudComponentActive {
    unsafe {
        let mut native_return = Default::default();
let mut id_ = id_;
        let success = sdk::natives::is_hud_component_active(
            &mut native_return,
id_,
        );
        let native_return = native_return;
        
        ResultOfIsHudComponentActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_blip_from_entity(&self, entity_: u32) -> ResultOfGetBlipFromEntity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_blip_from_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetBlipFromEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_radar_zoom_precise(&self, zoom_: f32) -> ResultOfSetRadarZoomPrecise {
    unsafe {
        let mut zoom_ = zoom_;
        let success = sdk::natives::set_radar_zoom_precise(
            zoom_,
        );
        
        
        ResultOfSetRadarZoomPrecise {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_busyspinner_on(&self, busy_spinner_type_: i32) -> ResultOfEndTextCommandBusyspinnerOn {
    unsafe {
        let mut busy_spinner_type_ = busy_spinner_type_;
        let success = sdk::natives::end_text_command_busyspinner_on(
            busy_spinner_type_,
        );
        
        
        ResultOfEndTextCommandBusyspinnerOn {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_blip_for_pickup(&self, pickup_: i32) -> ResultOfAddBlipForPickup {
    unsafe {
        let mut native_return = Default::default();
let mut pickup_ = pickup_;
        let success = sdk::natives::add_blip_for_pickup(
            &mut native_return,
pickup_,
        );
        let native_return = native_return;
        
        ResultOfAddBlipForPickup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_thefeed_remove_item(&self, notification_id_: i32) -> ResultOfThefeedRemoveItem {
    unsafe {
        let mut notification_id_ = notification_id_;
        let success = sdk::natives::thefeed_remove_item(
            notification_id_,
        );
        
        
        ResultOfThefeedRemoveItem {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_text_colour(&self, red_: i32,
green_: i32,
blue_: i32,
alpha_: i32) -> ResultOfSetTextColour {
    unsafe {
        let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
let mut alpha_ = alpha_;
        let success = sdk::natives::set_text_colour(
            red_,
green_,
blue_,
alpha_,
        );
        
        
        ResultOfSetTextColour {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_as_short_range(&self, blip_: i32,
toggle_: bool) -> ResultOfSetBlipAsShortRange {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_blip_as_short_range(
            blip_,
toggle_,
        );
        
        
        ResultOfSetBlipAsShortRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_blip_info_id_type(&self, blip_: i32) -> ResultOfGetBlipInfoIdType {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_info_id_type(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOfGetBlipInfoIdType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_draw_hud_over_fade_this_frame(&self, ) -> ResultOfDrawHudOverFadeThisFrame {
    unsafe {
        
        let success = sdk::natives::draw_hud_over_fade_this_frame(
            
        );
        
        
        ResultOfDrawHudOverFadeThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_fake_mp_gamer_tag(&self, ped_: u32,
username_: Option<String>,
pointed_clan_tag_: bool,
is_rockstar_clan_: bool,
clan_tag_: Option<String>,
clan_flag_: i32) -> ResultOfCreateFakeMpGamerTag {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut username_ = sdk_helpers::create_c_string_ptr(username_);
let mut pointed_clan_tag_ = pointed_clan_tag_;
let mut is_rockstar_clan_ = is_rockstar_clan_;
let mut clan_tag_ = sdk_helpers::create_c_string_ptr(clan_tag_);
let mut clan_flag_ = clan_flag_;
        let success = sdk::natives::create_fake_mp_gamer_tag(
            &mut native_return,
ped_,
username_.as_ref().unwrap(),
pointed_clan_tag_,
is_rockstar_clan_,
clan_tag_.as_ref().unwrap(),
clan_flag_,
        );
        let native_return = native_return;
        
        ResultOfCreateFakeMpGamerTag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_text_centre(&self, align_: bool) -> ResultOfSetTextCentre {
    unsafe {
        let mut align_ = align_;
        let success = sdk::natives::set_text_centre(
            align_,
        );
        
        
        ResultOfSetTextCentre {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_multiplayer_wallet_cash(&self, ) -> ResultOfSetMultiplayerWalletCash {
    unsafe {
        
        let success = sdk::natives::set_multiplayer_wallet_cash(
            
        );
        
        
        ResultOfSetMultiplayerWalletCash {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_fake_spectator_mode(&self, ) -> ResultOfGetFakeSpectatorMode {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_fake_spectator_mode(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetFakeSpectatorMode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_widescreen_format(&self, p0_: i32) -> ResultOfSetWidescreenFormat {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_widescreen_format(
            p0_,
        );
        
        
        ResultOfSetWidescreenFormat {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_social_club_active(&self, ) -> ResultOfIsSocialClubActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_social_club_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsSocialClubActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_blip_extended_height_threshold(&self, blip_: i32,
toggle_: bool) -> ResultOfSetBlipExtendedHeightThreshold {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_blip_extended_height_threshold(
            blip_,
toggle_,
        );
        
        
        ResultOfSetBlipExtendedHeightThreshold {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_cop_blip_from_ped(&self, ped_: u32) -> ResultOfRemoveCopBlipFromPed {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::remove_cop_blip_from_ped(
            ped_,
        );
        
        
        ResultOfRemoveCopBlipFromPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_text_component_substring_text_label(&self, label_name_: Option<String>) -> ResultOfAddTextComponentSubstringTextLabel {
    unsafe {
        let mut label_name_ = sdk_helpers::create_c_string_ptr(label_name_);
        let success = sdk::natives::add_text_component_substring_text_label(
            label_name_.as_ref().unwrap(),
        );
        
        
        ResultOfAddTextComponentSubstringTextLabel {
            success,
            ret: (),
            
        }
    }
}

    fn native_preload_busyspinner(&self, ) -> ResultOfPreloadBusyspinner {
    unsafe {
        
        let success = sdk::natives::preload_busyspinner(
            
        );
        
        
        ResultOfPreloadBusyspinner {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_messagetext_subtitle_label(&self, txd_name_: Option<String>,
texture_name_: Option<String>,
flash_: bool,
icon_type_: i32,
sender_: Option<String>,
subject_: Option<String>) -> ResultOfEndTextCommandThefeedPostMessagetextSubtitleLabel {
    unsafe {
        let mut native_return = Default::default();
let mut txd_name_ = sdk_helpers::create_c_string_ptr(txd_name_);
let mut texture_name_ = sdk_helpers::create_c_string_ptr(texture_name_);
let mut flash_ = flash_;
let mut icon_type_ = icon_type_;
let mut sender_ = sdk_helpers::create_c_string_ptr(sender_);
let mut subject_ = sdk_helpers::create_c_string_ptr(subject_);
        let success = sdk::natives::end_text_command_thefeed_post_messagetext_subtitle_label(
            &mut native_return,
txd_name_.as_ref().unwrap(),
texture_name_.as_ref().unwrap(),
flash_,
icon_type_,
sender_.as_ref().unwrap(),
subject_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfEndTextCommandThefeedPostMessagetextSubtitleLabel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_show_contact_instructional_button(&self, toggle_: bool) -> ResultOfShowContactInstructionalButton {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::show_contact_instructional_button(
            toggle_,
        );
        
        
        ResultOfShowContactInstructionalButton {
            success,
            ret: (),
            
        }
    }
}

    fn native_pause_menu_set_busy_spinner(&self, p0_: bool,
position_: i32,
spinner_index_: i32) -> ResultOfPauseMenuSetBusySpinner {
    unsafe {
        let mut p0_ = p0_;
let mut position_ = position_;
let mut spinner_index_ = spinner_index_;
        let success = sdk::natives::pause_menu_set_busy_spinner(
            p0_,
position_,
spinner_index_,
        );
        
        
        ResultOfPauseMenuSetBusySpinner {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_multiplayer_bank_cash(&self, ) -> ResultOfRemoveMultiplayerBankCash {
    unsafe {
        
        let success = sdk::natives::remove_multiplayer_bank_cash(
            
        );
        
        
        ResultOfRemoveMultiplayerBankCash {
            success,
            ret: (),
            
        }
    }
}

    fn native_pause_menu_get_mouse_click_event(&self, p0_: shared::MemoryBufferId,
p1_: shared::MemoryBufferId,
p2_: shared::MemoryBufferId) -> ResultOfPauseMenuGetMouseClickEvent {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
let mut p2_ = self.memory_buffers.borrow_mut().get_mut_ptr(p2_) as *mut c_void;
        let success = sdk::natives::pause_menu_get_mouse_click_event(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
let p0_ = 0;
let p1_ = 0;
let p2_ = 0;
        
        ResultOfPauseMenuGetMouseClickEvent {
            success,
            ret: native_return,
            p0_,
p1_,
p2_
        }
    }
}

    fn native_end_text_command_thefeed_post_unlock_tu(&self, gxt_label1_: Option<String>,
p1_: i32,
gxt_label2_: Option<String>,
p3_: i32) -> ResultOfEndTextCommandThefeedPostUnlockTu {
    unsafe {
        let mut native_return = Default::default();
let mut gxt_label1_ = sdk_helpers::create_c_string_ptr(gxt_label1_);
let mut p1_ = p1_;
let mut gxt_label2_ = sdk_helpers::create_c_string_ptr(gxt_label2_);
let mut p3_ = p3_;
        let success = sdk::natives::end_text_command_thefeed_post_unlock_tu(
            &mut native_return,
gxt_label1_.as_ref().unwrap(),
p1_,
gxt_label2_.as_ref().unwrap(),
p3_,
        );
        let native_return = native_return;
        
        ResultOfEndTextCommandThefeedPostUnlockTu {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_character_menu_ped_int_stat(&self, p0_: i32,
p1_: shared::MemoryBufferId,
p2_: i32) -> ResultOfGetCharacterMenuPedIntStat {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
let mut p2_ = p2_;
        let success = sdk::natives::get_character_menu_ped_int_stat(
            &mut native_return,
p1_,
p0_,
p2_,
        );
        let native_return = native_return;
let p1_ = 0;
        
        ResultOfGetCharacterMenuPedIntStat {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_show_gold_tick_on_blip(&self, blip_: i32,
toggle_: bool) -> ResultOfShowGoldTickOnBlip {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::show_gold_tick_on_blip(
            blip_,
toggle_,
        );
        
        
        ResultOfShowGoldTickOnBlip {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radar_zoom_to_distance(&self, zoom_: f32) -> ResultOfSetRadarZoomToDistance {
    unsafe {
        let mut zoom_ = zoom_;
        let success = sdk::natives::set_radar_zoom_to_distance(
            zoom_,
        );
        
        
        ResultOfSetRadarZoomToDistance {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_prints(&self, ) -> ResultOfClearPrints {
    unsafe {
        
        let success = sdk::natives::clear_prints(
            
        );
        
        
        ResultOfClearPrints {
            success,
            ret: (),
            
        }
    }
}

    fn native_allow_pause_when_not_in_state_of_play_this_frame(&self, ) -> ResultOfAllowPauseWhenNotInStateOfPlayThisFrame {
    unsafe {
        
        let success = sdk::natives::allow_pause_when_not_in_state_of_play_this_frame(
            
        );
        
        
        ResultOfAllowPauseWhenNotInStateOfPlayThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_display_text(&self, x_: f32,
y_: f32,
p2_: i32) -> ResultOfEndTextCommandDisplayText {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut p2_ = p2_;
        let success = sdk::natives::end_text_command_display_text(
            x_,
y_,
p2_,
        );
        
        
        ResultOfEndTextCommandDisplayText {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_scale2d(&self, blip_: i32,
x_scale_: f32,
y_scale_: f32) -> ResultOfSetBlipScale2d {
    unsafe {
        let mut blip_ = blip_;
let mut x_scale_ = x_scale_;
let mut y_scale_ = y_scale_;
        let success = sdk::natives::set_blip_scale2d(
            blip_,
x_scale_,
y_scale_,
        );
        
        
        ResultOfSetBlipScale2d {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_fake_spectator_mode(&self, toggle_: bool) -> ResultOfSetFakeSpectatorMode {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_fake_spectator_mode(
            toggle_,
        );
        
        
        ResultOfSetFakeSpectatorMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_pause_menuception_the_kick(&self, ) -> ResultOfPauseMenuceptionTheKick {
    unsafe {
        
        let success = sdk::natives::pause_menuception_the_kick(
            
        );
        
        
        ResultOfPauseMenuceptionTheKick {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_blip_for_area(&self, x_: f32,
y_: f32,
z_: f32,
width_: f32,
height_: f32) -> ResultOfAddBlipForArea {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut width_ = width_;
let mut height_ = height_;
        let success = sdk::natives::add_blip_for_area(
            &mut native_return,
x_,
y_,
z_,
width_,
height_,
        );
        let native_return = native_return;
        
        ResultOfAddBlipForArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_character_from_audio_conversation_filename_bytes(&self, text_: Option<String>,
start_position_: i32,
end_position_: i32) -> ResultOfGetCharacterFromAudioConversationFilenameBytes {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut text_ = sdk_helpers::create_c_string_ptr(text_);
let mut start_position_ = start_position_;
let mut end_position_ = end_position_;
        let success = sdk::natives::get_character_from_audio_conversation_filename_bytes(
            native_return.pin_mut(),
text_.as_ref().unwrap(),
start_position_,
end_position_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetCharacterFromAudioConversationFilenameBytes {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_flag_player_context_in_tournament(&self, toggle_: bool) -> ResultOfFlagPlayerContextInTournament {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::flag_player_context_in_tournament(
            toggle_,
        );
        
        
        ResultOfFlagPlayerContextInTournament {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mp_gamer_tag_wanted_level(&self, gamer_tag_id_: i32,
wantedlvl_: i32) -> ResultOfSetMpGamerTagWantedLevel {
    unsafe {
        let mut gamer_tag_id_ = gamer_tag_id_;
let mut wantedlvl_ = wantedlvl_;
        let success = sdk::natives::set_mp_gamer_tag_wanted_level(
            gamer_tag_id_,
wantedlvl_,
        );
        
        
        ResultOfSetMpGamerTagWantedLevel {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_this_print(&self, p0_: Option<String>) -> ResultOfClearThisPrint {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::clear_this_print(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOfClearThisPrint {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_add_directly_to_previous_briefs(&self, p0_: bool) -> ResultOfEndTextCommandAddDirectlyToPreviousBriefs {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::end_text_command_add_directly_to_previous_briefs(
            p0_,
        );
        
        
        ResultOfEndTextCommandAddDirectlyToPreviousBriefs {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_street_name_from_hash_key(&self, hash_: u32) -> ResultOfGetStreetNameFromHashKey {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut hash_ = hash_;
        let success = sdk::natives::get_street_name_from_hash_key(
            native_return.pin_mut(),
hash_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetStreetNameFromHashKey {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_all_blip_routes(&self, ) -> ResultOfClearAllBlipRoutes {
    unsafe {
        
        let success = sdk::natives::clear_all_blip_routes(
            
        );
        
        
        ResultOfClearAllBlipRoutes {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_block_wanted_flash(&self, disabled_: bool) -> ResultOfSetBlockWantedFlash {
    unsafe {
        let mut disabled_ = disabled_;
        let success = sdk::natives::set_block_wanted_flash(
            disabled_,
        );
        
        
        ResultOfSetBlockWantedFlash {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_fake_minimap_max_altimeter_height(&self, altitude_: f32,
p1_: bool,
p2_: i32) -> ResultOfSetFakeMinimapMaxAltimeterHeight {
    unsafe {
        let mut altitude_ = altitude_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_fake_minimap_max_altimeter_height(
            altitude_,
p1_,
p2_,
        );
        
        
        ResultOfSetFakeMinimapMaxAltimeterHeight {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_replay(&self, type_: i32,
image_: i32,
text_: Option<String>) -> ResultOfEndTextCommandThefeedPostReplay {
    unsafe {
        let mut native_return = Default::default();
let mut type_ = type_;
let mut image_ = image_;
let mut text_ = sdk_helpers::create_c_string_ptr(text_);
        let success = sdk::natives::end_text_command_thefeed_post_replay(
            &mut native_return,
type_,
image_,
text_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfEndTextCommandThefeedPostReplay {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_update_radar_zoom_to_blip(&self, ) -> ResultOfUpdateRadarZoomToBlip {
    unsafe {
        
        let success = sdk::natives::update_radar_zoom_to_blip(
            
        );
        
        
        ResultOfUpdateRadarZoomToBlip {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mp_gamer_tags_should_use_points_health(&self, gamer_tag_id_: i32,
toggle_: bool) -> ResultOfSetMpGamerTagsShouldUsePointsHealth {
    unsafe {
        let mut gamer_tag_id_ = gamer_tag_id_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_mp_gamer_tags_should_use_points_health(
            gamer_tag_id_,
toggle_,
        );
        
        
        ResultOfSetMpGamerTagsShouldUsePointsHealth {
            success,
            ret: (),
            
        }
    }
}

    fn native_close_social_club_menu(&self, ) -> ResultOfCloseSocialClubMenu {
    unsafe {
        
        let success = sdk::natives::close_social_club_menu(
            
        );
        
        
        ResultOfCloseSocialClubMenu {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_has_ai_blip(&self, ped_: u32,
has_cone_: bool) -> ResultOfSetPedHasAiBlip {
    unsafe {
        let mut ped_ = ped_;
let mut has_cone_ = has_cone_;
        let success = sdk::natives::set_ped_has_ai_blip(
            ped_,
has_cone_,
        );
        
        
        ResultOfSetPedHasAiBlip {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_scale(&self, blip_: i32,
scale_: f32) -> ResultOfSetBlipScale {
    unsafe {
        let mut blip_ = blip_;
let mut scale_ = scale_;
        let success = sdk::natives::set_blip_scale(
            blip_,
scale_,
        );
        
        
        ResultOfSetBlipScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_flash_timer(&self, blip_: i32,
duration_: i32) -> ResultOfSetBlipFlashTimer {
    unsafe {
        let mut blip_ = blip_;
let mut duration_ = duration_;
        let success = sdk::natives::set_blip_flash_timer(
            blip_,
duration_,
        );
        
        
        ResultOfSetBlipFlashTimer {
            success,
            ret: (),
            
        }
    }
}

    fn native_busyspinner_is_on(&self, ) -> ResultOfBusyspinnerIsOn {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::busyspinner_is_on(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfBusyspinnerIsOn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_thefeed_report_logo_on(&self, ) -> ResultOfThefeedReportLogoOn {
    unsafe {
        
        let success = sdk::natives::thefeed_report_logo_on(
            
        );
        
        
        ResultOfThefeedReportLogoOn {
            success,
            ret: (),
            
        }
    }
}

    fn native_hide_help_text_this_frame(&self, ) -> ResultOfHideHelpTextThisFrame {
    unsafe {
        
        let success = sdk::natives::hide_help_text_this_frame(
            
        );
        
        
        ResultOfHideHelpTextThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_closest_blip_info_id(&self, blip_sprite_: i32) -> ResultOfGetClosestBlipInfoId {
    unsafe {
        let mut native_return = Default::default();
let mut blip_sprite_ = blip_sprite_;
        let success = sdk::natives::get_closest_blip_info_id(
            &mut native_return,
blip_sprite_,
        );
        let native_return = native_return;
        
        ResultOfGetClosestBlipInfoId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mp_gamer_tag_alpha(&self, gamer_tag_id_: i32,
component_: i32,
alpha_: i32) -> ResultOfSetMpGamerTagAlpha {
    unsafe {
        let mut gamer_tag_id_ = gamer_tag_id_;
let mut component_ = component_;
let mut alpha_ = alpha_;
        let success = sdk::natives::set_mp_gamer_tag_alpha(
            gamer_tag_id_,
component_,
alpha_,
        );
        
        
        ResultOfSetMpGamerTagAlpha {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_script_variable_hud_colour(&self, r_: i32,
g_: i32,
b_: i32,
a_: i32) -> ResultOfSetScriptVariableHudColour {
    unsafe {
        let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut a_ = a_;
        let success = sdk::natives::set_script_variable_hud_colour(
            r_,
g_,
b_,
a_,
        );
        
        
        ResultOfSetScriptVariableHudColour {
            success,
            ret: (),
            
        }
    }
}

    fn native_delete_waypoints_from_this_player(&self, ) -> ResultOfDeleteWaypointsFromThisPlayer {
    unsafe {
        
        let success = sdk::natives::delete_waypoints_from_this_player(
            
        );
        
        
        ResultOfDeleteWaypointsFromThisPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_blip_short_range(&self, blip_: i32) -> ResultOfIsBlipShortRange {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::is_blip_short_range(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOfIsBlipShortRange {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_help_message_on_screen(&self, ) -> ResultOfIsHelpMessageOnScreen {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_help_message_on_screen(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsHelpMessageOnScreen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_warning_message_option_highlight(&self, p0_: i32) -> ResultOfSetWarningMessageOptionHighlight {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::set_warning_message_option_highlight(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfSetWarningMessageOptionHighlight {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_gps_custom_route(&self, hud_color_: i32,
display_on_foot_: bool,
follow_player_: bool) -> ResultOfStartGpsCustomRoute {
    unsafe {
        let mut hud_color_ = hud_color_;
let mut display_on_foot_ = display_on_foot_;
let mut follow_player_ = follow_player_;
        let success = sdk::natives::start_gps_custom_route(
            hud_color_,
display_on_foot_,
follow_player_,
        );
        
        
        ResultOfStartGpsCustomRoute {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_rendered_character_height(&self, size_: f32,
font_: i32) -> ResultOfGetRenderedCharacterHeight {
    unsafe {
        let mut native_return = Default::default();
let mut size_ = size_;
let mut font_ = font_;
        let success = sdk::natives::get_rendered_character_height(
            &mut native_return,
size_,
font_,
        );
        let native_return = native_return;
        
        ResultOfGetRenderedCharacterHeight {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_warning_message_with_header(&self, entry_header_: Option<String>,
entry_line1_: Option<String>,
instructional_key_: i32,
entry_line2_: Option<String>,
p4_: bool,
p5_: i32,
show_background_: shared::MemoryBufferId,
p7_: shared::MemoryBufferId,
p8_: bool,
p9_: i32) -> ResultOfSetWarningMessageWithHeader {
    unsafe {
        let mut entry_header_ = sdk_helpers::create_c_string_ptr(entry_header_);
let mut entry_line1_ = sdk_helpers::create_c_string_ptr(entry_line1_);
let mut instructional_key_ = instructional_key_;
let mut entry_line2_ = sdk_helpers::create_c_string_ptr(entry_line2_);
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut show_background_ = self.memory_buffers.borrow_mut().get_mut_ptr(show_background_) as *mut c_void;
let mut p7_ = self.memory_buffers.borrow_mut().get_mut_ptr(p7_) as *mut c_void;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::set_warning_message_with_header(
            show_background_,
p7_,
entry_header_.as_ref().unwrap(),
entry_line1_.as_ref().unwrap(),
instructional_key_,
entry_line2_.as_ref().unwrap(),
p4_,
p5_,
p8_,
p9_,
        );
        let show_background_ = 0;
let p7_ = 0;
        
        ResultOfSetWarningMessageWithHeader {
            success,
            ret: (),
            show_background_,
p7_
        }
    }
}

    fn native_get_main_player_blip_id(&self, ) -> ResultOfGetMainPlayerBlipId {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_main_player_blip_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetMainPlayerBlipId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_show_crew_indicator_on_blip(&self, blip_: i32,
toggle_: bool) -> ResultOfShowCrewIndicatorOnBlip {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::show_crew_indicator_on_blip(
            blip_,
toggle_,
        );
        
        
        ResultOfShowCrewIndicatorOnBlip {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_scripted_hud_component_active(&self, id_: i32) -> ResultOfIsScriptedHudComponentActive {
    unsafe {
        let mut native_return = Default::default();
let mut id_ = id_;
        let success = sdk::natives::is_scripted_hud_component_active(
            &mut native_return,
id_,
        );
        let native_return = native_return;
        
        ResultOfIsScriptedHudComponentActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_multiplayer_bank_cash(&self, ) -> ResultOfSetMultiplayerBankCash {
    unsafe {
        
        let success = sdk::natives::set_multiplayer_bank_cash(
            
        );
        
        
        ResultOfSetMultiplayerBankCash {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_blip_have_gps_route(&self, blip_: i32) -> ResultOfDoesBlipHaveGpsRoute {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::does_blip_have_gps_route(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOfDoesBlipHaveGpsRoute {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pause_menu_activate_context(&self, context_hash_: u32) -> ResultOfPauseMenuActivateContext {
    unsafe {
        let mut context_hash_ = context_hash_;
        let success = sdk::natives::pause_menu_activate_context(
            context_hash_,
        );
        
        
        ResultOfPauseMenuActivateContext {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_text_command_thefeed_post_replay_input(&self, type_: i32,
button_: Option<String>,
text_: Option<String>) -> ResultOfEndTextCommandThefeedPostReplayInput {
    unsafe {
        let mut native_return = Default::default();
let mut type_ = type_;
let mut button_ = sdk_helpers::create_c_string_ptr(button_);
let mut text_ = sdk_helpers::create_c_string_ptr(text_);
        let success = sdk::natives::end_text_command_thefeed_post_replay_input(
            &mut native_return,
type_,
button_.as_ref().unwrap(),
text_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfEndTextCommandThefeedPostReplayInput {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pause_menu_get_hair_colour_index(&self, ) -> ResultOfPauseMenuGetHairColourIndex {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::pause_menu_get_hair_colour_index(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfPauseMenuGetHairColourIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mp_gamer_tag_name(&self, gamer_tag_id_: i32,
string_: Option<String>) -> ResultOfSetMpGamerTagName {
    unsafe {
        let mut gamer_tag_id_ = gamer_tag_id_;
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::set_mp_gamer_tag_name(
            gamer_tag_id_,
string_.as_ref().unwrap(),
        );
        
        
        ResultOfSetMpGamerTagName {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pause_menu_active(&self, toggle_: bool) -> ResultOfSetPauseMenuActive {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_pause_menu_active(
            toggle_,
        );
        
        
        ResultOfSetPauseMenuActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_blip_colour(&self, blip_: i32) -> ResultOfGetBlipColour {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_colour(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOfGetBlipColour {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_blip_sprite(&self, blip_: i32,
sprite_id_: i32) -> ResultOfSetBlipSprite {
    unsafe {
        let mut blip_ = blip_;
let mut sprite_id_ = sprite_id_;
        let success = sdk::natives::set_blip_sprite(
            blip_,
sprite_id_,
        );
        
        
        ResultOfSetBlipSprite {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_minimap_fow_discovery_ratio(&self, ) -> ResultOfGetMinimapFowDiscoveryRatio {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_minimap_fow_discovery_ratio(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetMinimapFowDiscoveryRatio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_begin_text_command_clear_print(&self, text_: Option<String>) -> ResultOfBeginTextCommandClearPrint {
    unsafe {
        let mut text_ = sdk_helpers::create_c_string_ptr(text_);
        let success = sdk::natives::begin_text_command_clear_print(
            text_.as_ref().unwrap(),
        );
        
        
        ResultOfBeginTextCommandClearPrint {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_warning_message_active(&self, ) -> ResultOfIsWarningMessageActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_warning_message_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsWarningMessageActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_thefeed_resume(&self, ) -> ResultOfThefeedResume {
    unsafe {
        
        let success = sdk::natives::thefeed_resume(
            
        );
        
        
        ResultOfThefeedResume {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_high_detail(&self, blip_: i32,
toggle_: bool) -> ResultOfSetBlipHighDetail {
    unsafe {
        let mut blip_ = blip_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_blip_high_detail(
            blip_,
toggle_,
        );
        
        
        ResultOfSetBlipHighDetail {
            success,
            ret: (),
            
        }
    }
}

    fn native_hide_scripted_hud_component_this_frame(&self, id_: i32) -> ResultOfHideScriptedHudComponentThisFrame {
    unsafe {
        let mut id_ = id_;
        let success = sdk::natives::hide_scripted_hud_component_this_frame(
            id_,
        );
        
        
        ResultOfHideScriptedHudComponentThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_global_actionscript_flag(&self, flag_index_: i32) -> ResultOfGetGlobalActionscriptFlag {
    unsafe {
        let mut native_return = Default::default();
let mut flag_index_ = flag_index_;
        let success = sdk::natives::get_global_actionscript_flag(
            &mut native_return,
flag_index_,
        );
        let native_return = native_return;
        
        ResultOfGetGlobalActionscriptFlag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_blip_on_minimap(&self, blip_: i32) -> ResultOfIsBlipOnMinimap {
    unsafe {
        let mut native_return = Default::default();
let mut blip_ = blip_;
        let success = sdk::natives::is_blip_on_minimap(
            &mut native_return,
blip_,
        );
        let native_return = native_return;
        
        ResultOfIsBlipOnMinimap {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mission_name_for_ugc_mission(&self, p0_: bool,
name_: Option<String>) -> ResultOfSetMissionNameForUgcMission {
    unsafe {
        let mut p0_ = p0_;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::set_mission_name_for_ugc_mission(
            p0_,
name_.as_ref().unwrap(),
        );
        
        
        ResultOfSetMissionNameForUgcMission {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_valid_vehicle_hit_hash(&self, p0_: i32) -> ResultOfAddValidVehicleHitHash {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::add_valid_vehicle_hit_hash(
            p0_,
        );
        
        
        ResultOfAddValidVehicleHitHash {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_ai_blip_gang_id(&self, ped_: u32,
gang_id_: i32) -> ResultOfSetPedAiBlipGangId {
    unsafe {
        let mut ped_ = ped_;
let mut gang_id_ = gang_id_;
        let success = sdk::natives::set_ped_ai_blip_gang_id(
            ped_,
gang_id_,
        );
        
        
        ResultOfSetPedAiBlipGangId {
            success,
            ret: (),
            
        }
    }
}

    fn native_allow_display_of_multiplayer_cash_text(&self, allow_: bool) -> ResultOfAllowDisplayOfMultiplayerCashText {
    unsafe {
        let mut allow_ = allow_;
        let success = sdk::natives::allow_display_of_multiplayer_cash_text(
            allow_,
        );
        
        
        ResultOfAllowDisplayOfMultiplayerCashText {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_gps_custom_route(&self, ) -> ResultOfClearGpsCustomRoute {
    unsafe {
        
        let success = sdk::natives::clear_gps_custom_route(
            
        );
        
        
        ResultOfClearGpsCustomRoute {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_text_component_float(&self, value_: f32,
decimal_places_: i32) -> ResultOfAddTextComponentFloat {
    unsafe {
        let mut value_ = value_;
let mut decimal_places_ = decimal_places_;
        let success = sdk::natives::add_text_component_float(
            value_,
decimal_places_,
        );
        
        
        ResultOfAddTextComponentFloat {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radar_as_exterior_this_frame(&self, ) -> ResultOfSetRadarAsExteriorThisFrame {
    unsafe {
        
        let success = sdk::natives::set_radar_as_exterior_this_frame(
            
        );
        
        
        ResultOfSetRadarAsExteriorThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_release_named_rendertarget(&self, name_: Option<String>) -> ResultOfReleaseNamedRendertarget {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::release_named_rendertarget(
            &mut native_return,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfReleaseNamedRendertarget {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_blip_name_from_text_file(&self, blip_: i32,
gxt_entry_: Option<String>) -> ResultOfSetBlipNameFromTextFile {
    unsafe {
        let mut blip_ = blip_;
let mut gxt_entry_ = sdk_helpers::create_c_string_ptr(gxt_entry_);
        let success = sdk::natives::set_blip_name_from_text_file(
            blip_,
gxt_entry_.as_ref().unwrap(),
        );
        
        
        ResultOfSetBlipNameFromTextFile {
            success,
            ret: (),
            
        }
    }
}

    fn native_hud_force_weapon_wheel(&self, show_: bool) -> ResultOfHudForceWeaponWheel {
    unsafe {
        let mut show_ = show_;
        let success = sdk::natives::hud_force_weapon_wheel(
            show_,
        );
        
        
        ResultOfHudForceWeaponWheel {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_updating_mp_gamer_tag_name_and_crew_details(&self, gamer_tag_id_: i32) -> ResultOfIsUpdatingMpGamerTagNameAndCrewDetails {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_tag_id_ = gamer_tag_id_;
        let success = sdk::natives::is_updating_mp_gamer_tag_name_and_crew_details(
            &mut native_return,
gamer_tag_id_,
        );
        let native_return = native_return;
        
        ResultOfIsUpdatingMpGamerTagNameAndCrewDetails {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_valid_vehicle_hit_hashes(&self, ) -> ResultOfClearValidVehicleHitHashes {
    unsafe {
        
        let success = sdk::natives::clear_valid_vehicle_hit_hashes(
            
        );
        
        
        ResultOfClearValidVehicleHitHashes {
            success,
            ret: (),
            
        }
    }
}

    fn native_take_control_of_frontend(&self, ) -> ResultOfTakeControlOfFrontend {
    unsafe {
        
        let success = sdk::natives::take_control_of_frontend(
            
        );
        
        
        ResultOfTakeControlOfFrontend {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pause_menu_ped_sleep_state(&self, state_: bool) -> ResultOfSetPauseMenuPedSleepState {
    unsafe {
        let mut state_ = state_;
        let success = sdk::natives::set_pause_menu_ped_sleep_state(
            state_,
        );
        
        
        ResultOfSetPauseMenuPedSleepState {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_close_reportugc_menu(&self, ) -> ResultOfForceCloseReportugcMenu {
    unsafe {
        
        let success = sdk::natives::force_close_reportugc_menu(
            
        );
        
        
        ResultOfForceCloseReportugcMenu {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_all_mp_gamer_tags_visibility(&self, gamer_tag_id_: i32,
toggle_: bool) -> ResultOfSetAllMpGamerTagsVisibility {
    unsafe {
        let mut gamer_tag_id_ = gamer_tag_id_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_all_mp_gamer_tags_visibility(
            gamer_tag_id_,
toggle_,
        );
        
        
        ResultOfSetAllMpGamerTagsVisibility {
            success,
            ret: (),
            
        }
    }
}

    fn native_activate_frontend_menu(&self, menuhash_: u32,
toggle_pause_: bool,
component_: i32) -> ResultOfActivateFrontendMenu {
    unsafe {
        let mut menuhash_ = menuhash_;
let mut toggle_pause_ = toggle_pause_;
let mut component_ = component_;
        let success = sdk::natives::activate_frontend_menu(
            menuhash_,
toggle_pause_,
component_,
        );
        
        
        ResultOfActivateFrontendMenu {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_menu_ped_int_stat(&self, p0_: i32,
p1_: shared::MemoryBufferId) -> ResultOfGetMenuPedIntStat {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
        let success = sdk::natives::get_menu_ped_int_stat(
            &mut native_return,
p1_,
p0_,
        );
        let native_return = native_return;
let p1_ = 0;
        
        ResultOfGetMenuPedIntStat {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_end_text_command_thefeed_post_mpticker(&self, blink_: bool,
p1_: bool) -> ResultOfEndTextCommandThefeedPostMpticker {
    unsafe {
        let mut native_return = Default::default();
let mut blink_ = blink_;
let mut p1_ = p1_;
        let success = sdk::natives::end_text_command_thefeed_post_mpticker(
            &mut native_return,
blink_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfEndTextCommandThefeedPostMpticker {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_length_of_literal_string(&self, string_: Option<String>) -> ResultOfGetLengthOfLiteralString {
    unsafe {
        let mut native_return = Default::default();
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::get_length_of_literal_string(
            &mut native_return,
string_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfGetLengthOfLiteralString {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pause_menu_set_warn_on_tab_change(&self, p0_: bool) -> ResultOfPauseMenuSetWarnOnTabChange {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::pause_menu_set_warn_on_tab_change(
            p0_,
        );
        
        
        ResultOfPauseMenuSetWarnOnTabChange {
            success,
            ret: (),
            
        }
    }
}

    fn native_are_online_policies_up_to_date(&self, ) -> ResultOfAreOnlinePoliciesUpToDate {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::are_online_policies_up_to_date(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfAreOnlinePoliciesUpToDate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_show_start_mission_instructional_button(&self, toggle_: bool) -> ResultOfShowStartMissionInstructionalButton {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::show_start_mission_instructional_button(
            toggle_,
        );
        
        
        ResultOfShowStartMissionInstructionalButton {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_menu_trigger_event_occurred(&self, ) -> ResultOfHasMenuTriggerEventOccurred {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_menu_trigger_event_occurred(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfHasMenuTriggerEventOccurred {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_flash_minimap_display(&self, ) -> ResultOfFlashMinimapDisplay {
    unsafe {
        
        let success = sdk::natives::flash_minimap_display(
            
        );
        
        
        ResultOfFlashMinimapDisplay {
            success,
            ret: (),
            
        }
    }
}

    fn native_replace_hud_colour_with_rgba(&self, hud_color_index_: i32,
r_: i32,
g_: i32,
b_: i32,
a_: i32) -> ResultOfReplaceHudColourWithRgba {
    unsafe {
        let mut hud_color_index_ = hud_color_index_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut a_ = a_;
        let success = sdk::natives::replace_hud_colour_with_rgba(
            hud_color_index_,
r_,
g_,
b_,
a_,
        );
        
        
        ResultOfReplaceHudColourWithRgba {
            success,
            ret: (),
            
        }
    }
}

    fn native_override_mp_text_chat_color(&self, p0_: i32,
hud_color_: i32) -> ResultOfOverrideMpTextChatColor {
    unsafe {
        let mut p0_ = p0_;
let mut hud_color_ = hud_color_;
        let success = sdk::natives::override_mp_text_chat_color(
            p0_,
hud_color_,
        );
        
        
        ResultOfOverrideMpTextChatColor {
            success,
            ret: (),
            
        }
    }
}

    fn native_link_named_rendertarget(&self, model_hash_: u32) -> ResultOfLinkNamedRendertarget {
    unsafe {
        let mut model_hash_ = model_hash_;
        let success = sdk::natives::link_named_rendertarget(
            model_hash_,
        );
        
        
        ResultOfLinkNamedRendertarget {
            success,
            ret: (),
            
        }
    }
}

    fn native_setup_fake_cone_data(&self, blip_: i32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: i32,
p8_: i32) -> ResultOfSetupFakeConeData {
    unsafe {
        let mut blip_ = blip_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::setup_fake_cone_data(
            blip_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
        );
        
        
        ResultOfSetupFakeConeData {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blip_rotation(&self, blip_: i32,
rotation_: i32) -> ResultOfSetBlipRotation {
    unsafe {
        let mut blip_ = blip_;
let mut rotation_ = rotation_;
        let success = sdk::natives::set_blip_rotation(
            blip_,
rotation_,
        );
        
        
        ResultOfSetBlipRotation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_minimap_hide_fow(&self, toggle_: bool) -> ResultOfSetMinimapHideFow {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_minimap_hide_fow(
            toggle_,
        );
        
        
        ResultOfSetMinimapHideFow {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_text_command_set_blip_name(&self, text_label_: Option<String>) -> ResultOfBeginTextCommandSetBlipName {
    unsafe {
        let mut text_label_ = sdk_helpers::create_c_string_ptr(text_label_);
        let success = sdk::natives::begin_text_command_set_blip_name(
            text_label_.as_ref().unwrap(),
        );
        
        
        ResultOfBeginTextCommandSetBlipName {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_radar_zoom_to_blip(&self, blip_: i32,
zoom_: f32) -> ResultOfSetRadarZoomToBlip {
    unsafe {
        let mut blip_ = blip_;
let mut zoom_ = zoom_;
        let success = sdk::natives::set_radar_zoom_to_blip(
            blip_,
zoom_,
        );
        
        
        ResultOfSetRadarZoomToBlip {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_hud_screen_position_from_world_position(&self, world_x_: f32,
world_y_: f32,
world_z_: f32,
screen_x_: f32,
screen_y_: f32) -> ResultOfGetHudScreenPositionFromWorldPosition {
    unsafe {
        let mut native_return = Default::default();
let mut world_x_ = world_x_;
let mut world_y_ = world_y_;
let mut world_z_ = world_z_;
let mut screen_x_ = screen_x_;
let mut screen_y_ = screen_y_;
        let success = sdk::natives::get_hud_screen_position_from_world_position(
            &mut native_return,
&mut screen_x_,
&mut screen_y_,
world_x_,
world_y_,
world_z_,
        );
        let native_return = native_return;
let screen_x_ = screen_x_;
let screen_y_ = screen_y_;
        
        ResultOfGetHudScreenPositionFromWorldPosition {
            success,
            ret: native_return,
            screen_x_,
screen_y_
        }
    }
}

    fn native_get_blip_info_id_coord(&self, blip_: i32) -> ResultOfGetBlipInfoIdCoord {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut blip_ = blip_;
        let success = sdk::natives::get_blip_info_id_coord(
            native_return.pin_mut(),
blip_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetBlipInfoIdCoord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_end_text_command_clear_print(&self, ) -> ResultOfEndTextCommandClearPrint {
    unsafe {
        
        let success = sdk::natives::end_text_command_clear_print(
            
        );
        
        
        ResultOfEndTextCommandClearPrint {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_ai_blip_sprite(&self, ped_: u32,
sprite_id_: i32) -> ResultOfSetPedAiBlipSprite {
    unsafe {
        let mut ped_ = ped_;
let mut sprite_id_ = sprite_id_;
        let success = sdk::natives::set_ped_ai_blip_sprite(
            ped_,
sprite_id_,
        );
        
        
        ResultOfSetPedAiBlipSprite {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_multiplayer_hud_cash(&self, p0_: i32,
p1_: bool) -> ResultOfSetMultiplayerHudCash {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_multiplayer_hud_cash(
            p0_,
p1_,
        );
        
        
        ResultOfSetMultiplayerHudCash {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_pause(&self, ) -> ResultOfThefeedPause {
    unsafe {
        
        let success = sdk::natives::thefeed_pause(
            
        );
        
        
        ResultOfThefeedPause {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_reset_all_parameters(&self, ) -> ResultOfThefeedResetAllParameters {
    unsafe {
        
        let success = sdk::natives::thefeed_reset_all_parameters(
            
        );
        
        
        ResultOfThefeedResetAllParameters {
            success,
            ret: (),
            
        }
    }
}

    fn native_thefeed_freeze_next_post(&self, ) -> ResultOfThefeedFreezeNextPost {
    unsafe {
        
        let success = sdk::natives::thefeed_freeze_next_post(
            
        );
        
        
        ResultOfThefeedFreezeNextPost {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_new_waypoint(&self, x_: f32,
y_: f32) -> ResultOfSetNewWaypoint {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
        let success = sdk::natives::set_new_waypoint(
            x_,
y_,
        );
        
        
        ResultOfSetNewWaypoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_gps_player_waypoint(&self, ) -> ResultOfClearGpsPlayerWaypoint {
    unsafe {
        
        let success = sdk::natives::clear_gps_player_waypoint(
            
        );
        
        
        ResultOfClearGpsPlayerWaypoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_interior_at_coords_with_type(&self, x_: f32,
y_: f32,
z_: f32,
interior_type_: Option<String>) -> ResultOfGetInteriorAtCoordsWithType {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut interior_type_ = sdk_helpers::create_c_string_ptr(interior_type_);
        let success = sdk::natives::get_interior_at_coords_with_type(
            &mut native_return,
x_,
y_,
z_,
interior_type_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfGetInteriorAtCoordsWithType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_interior_from_entity(&self, entity_: u32) -> ResultOfGetInteriorFromEntity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_interior_from_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetInteriorFromEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_room_for_game_viewport(&self, ) -> ResultOfClearRoomForGameViewport {
    unsafe {
        
        let success = sdk::natives::clear_room_for_game_viewport(
            
        );
        
        
        ResultOfClearRoomForGameViewport {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_interior_location_and_namehash(&self, interior_: i32,
position_: Option<shared::Vector3>,
name_hash_: u32) -> ResultOfGetInteriorLocationAndNamehash {
    unsafe {
        let mut interior_ = interior_;
let mut position_ = sdk_helpers::create_vector3_ptr(position_);
let mut name_hash_ = name_hash_;
        let success = sdk::natives::get_interior_location_and_namehash(
            position_.pin_mut(),
&mut name_hash_,
interior_,
        );
        let position_ = sdk_helpers::read_cpp_vector3(position_);
let name_hash_ = name_hash_;
        
        ResultOfGetInteriorLocationAndNamehash {
            success,
            ret: (),
            position_,
name_hash_
        }
    }
}

    fn native_unpin_interior(&self, interior_: i32) -> ResultOfUnpinInterior {
    unsafe {
        let mut interior_ = interior_;
        let success = sdk::natives::unpin_interior(
            interior_,
        );
        
        
        ResultOfUnpinInterior {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_valid_interior(&self, interior_: i32) -> ResultOfIsValidInterior {
    unsafe {
        let mut native_return = Default::default();
let mut interior_ = interior_;
        let success = sdk::natives::is_valid_interior(
            &mut native_return,
interior_,
        );
        let native_return = native_return;
        
        ResultOfIsValidInterior {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pin_interior_in_memory(&self, interior_: i32) -> ResultOfPinInteriorInMemory {
    unsafe {
        let mut interior_ = interior_;
        let success = sdk::natives::pin_interior_in_memory(
            interior_,
        );
        
        
        ResultOfPinInteriorInMemory {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_interior_entity_set_active(&self, interior_: i32,
entity_set_name_: Option<String>) -> ResultOfIsInteriorEntitySetActive {
    unsafe {
        let mut native_return = Default::default();
let mut interior_ = interior_;
let mut entity_set_name_ = sdk_helpers::create_c_string_ptr(entity_set_name_);
        let success = sdk::natives::is_interior_entity_set_active(
            &mut native_return,
interior_,
entity_set_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfIsInteriorEntitySetActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_activating_tracking_on_entity(&self, p0_: i32,
p1_: i32) -> ResultOfForceActivatingTrackingOnEntity {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::force_activating_tracking_on_entity(
            p0_,
p1_,
        );
        
        
        ResultOfForceActivatingTrackingOnEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_key_for_entity_in_room(&self, entity_: u32) -> ResultOfGetKeyForEntityInRoom {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_key_for_entity_in_room(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetKeyForEntityInRoom {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_pickup_to_interior_room_by_name(&self, pickup_: i32,
room_name_: Option<String>) -> ResultOfAddPickupToInteriorRoomByName {
    unsafe {
        let mut pickup_ = pickup_;
let mut room_name_ = sdk_helpers::create_c_string_ptr(room_name_);
        let success = sdk::natives::add_pickup_to_interior_room_by_name(
            pickup_,
room_name_.as_ref().unwrap(),
        );
        
        
        ResultOfAddPickupToInteriorRoomByName {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_room_for_game_viewport_by_key(&self, room_hash_key_: u32) -> ResultOfSetRoomForGameViewportByKey {
    unsafe {
        let mut room_hash_key_ = room_hash_key_;
        let success = sdk::natives::set_room_for_game_viewport_by_key(
            room_hash_key_,
        );
        
        
        ResultOfSetRoomForGameViewportByKey {
            success,
            ret: (),
            
        }
    }
}

    fn native_refresh_interior(&self, interior_: i32) -> ResultOfRefreshInterior {
    unsafe {
        let mut interior_ = interior_;
        let success = sdk::natives::refresh_interior(
            interior_,
        );
        
        
        ResultOfRefreshInterior {
            success,
            ret: (),
            
        }
    }
}

    fn native_deactivate_interior_entity_set(&self, interior_: i32,
entity_set_name_: Option<String>) -> ResultOfDeactivateInteriorEntitySet {
    unsafe {
        let mut interior_ = interior_;
let mut entity_set_name_ = sdk_helpers::create_c_string_ptr(entity_set_name_);
        let success = sdk::natives::deactivate_interior_entity_set(
            interior_,
entity_set_name_.as_ref().unwrap(),
        );
        
        
        ResultOfDeactivateInteriorEntitySet {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_room_key_from_entity(&self, entity_: u32) -> ResultOfGetRoomKeyFromEntity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::get_room_key_from_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfGetRoomKeyFromEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_activate_interior_groups_using_camera(&self, ) -> ResultOfActivateInteriorGroupsUsingCamera {
    unsafe {
        
        let success = sdk::natives::activate_interior_groups_using_camera(
            
        );
        
        
        ResultOfActivateInteriorGroupsUsingCamera {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_interior_in_use(&self, interior_: i32) -> ResultOfSetInteriorInUse {
    unsafe {
        let mut native_return = Default::default();
let mut interior_ = interior_;
        let success = sdk::natives::set_interior_in_use(
            &mut native_return,
interior_,
        );
        let native_return = native_return;
        
        ResultOfSetInteriorInUse {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_enable_shadow_cull_model_this_frame(&self, map_object_hash_: u32) -> ResultOfEnableShadowCullModelThisFrame {
    unsafe {
        let mut map_object_hash_ = map_object_hash_;
        let success = sdk::natives::enable_shadow_cull_model_this_frame(
            map_object_hash_,
        );
        
        
        ResultOfEnableShadowCullModelThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_room_for_entity(&self, entity_: u32,
interior_: i32,
room_hash_key_: u32) -> ResultOfForceRoomForEntity {
    unsafe {
        let mut entity_ = entity_;
let mut interior_ = interior_;
let mut room_hash_key_ = room_hash_key_;
        let success = sdk::natives::force_room_for_entity(
            entity_,
interior_,
room_hash_key_,
        );
        
        
        ResultOfForceRoomForEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_activate_interior_entity_set(&self, interior_: i32,
entity_set_name_: Option<String>) -> ResultOfActivateInteriorEntitySet {
    unsafe {
        let mut interior_ = interior_;
let mut entity_set_name_ = sdk_helpers::create_c_string_ptr(entity_set_name_);
        let success = sdk::natives::activate_interior_entity_set(
            interior_,
entity_set_name_.as_ref().unwrap(),
        );
        
        
        ResultOfActivateInteriorEntitySet {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_interior(&self, interior_: i32,
toggle_: bool) -> ResultOfDisableInterior {
    unsafe {
        let mut interior_ = interior_;
let mut toggle_ = toggle_;
        let success = sdk::natives::disable_interior(
            interior_,
toggle_,
        );
        
        
        ResultOfDisableInterior {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_interior_ready(&self, interior_: i32) -> ResultOfIsInteriorReady {
    unsafe {
        let mut native_return = Default::default();
let mut interior_ = interior_;
        let success = sdk::natives::is_interior_ready(
            &mut native_return,
interior_,
        );
        let native_return = native_return;
        
        ResultOfIsInteriorReady {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_is_exterior_only(&self, entity_: u32,
toggle_: bool) -> ResultOfSetIsExteriorOnly {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_is_exterior_only(
            entity_,
toggle_,
        );
        
        
        ResultOfSetIsExteriorOnly {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_stadium_probes_this_frame(&self, toggle_: bool) -> ResultOfEnableStadiumProbesThisFrame {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::enable_stadium_probes_this_frame(
            toggle_,
        );
        
        
        ResultOfEnableStadiumProbesThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_retain_entity_in_interior(&self, entity_: u32,
interior_: i32) -> ResultOfRetainEntityInInterior {
    unsafe {
        let mut entity_ = entity_;
let mut interior_ = interior_;
        let success = sdk::natives::retain_entity_in_interior(
            entity_,
interior_,
        );
        
        
        ResultOfRetainEntityInInterior {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_interior_state_of_entity(&self, entity_: u32) -> ResultOfClearInteriorStateOfEntity {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::clear_interior_state_of_entity(
            entity_,
        );
        
        
        ResultOfClearInteriorStateOfEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_room_for_game_viewport(&self, interior_i_d_: i32,
room_hash_key_: u32) -> ResultOfForceRoomForGameViewport {
    unsafe {
        let mut interior_i_d_ = interior_i_d_;
let mut room_hash_key_ = room_hash_key_;
        let success = sdk::natives::force_room_for_game_viewport(
            interior_i_d_,
room_hash_key_,
        );
        
        
        ResultOfForceRoomForGameViewport {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_interior_capped(&self, interior_: i32) -> ResultOfIsInteriorCapped {
    unsafe {
        let mut native_return = Default::default();
let mut interior_ = interior_;
        let success = sdk::natives::is_interior_capped(
            &mut native_return,
interior_,
        );
        let native_return = native_return;
        
        ResultOfIsInteriorCapped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_offset_from_interior_in_world_coords(&self, interior_: i32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfGetOffsetFromInteriorInWorldCoords {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut interior_ = interior_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::get_offset_from_interior_in_world_coords(
            native_return.pin_mut(),
interior_,
x_,
y_,
z_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetOffsetFromInteriorInWorldCoords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_metro_system(&self, toggle_: bool) -> ResultOfDisableMetroSystem {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::disable_metro_system(
            toggle_,
        );
        
        
        ResultOfDisableMetroSystem {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_room_key_for_game_viewport(&self, ) -> ResultOfGetRoomKeyForGameViewport {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_room_key_for_game_viewport(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetRoomKeyForGameViewport {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_enable_exterior_cull_model_this_frame(&self, map_object_hash_: u32) -> ResultOfEnableExteriorCullModelThisFrame {
    unsafe {
        let mut map_object_hash_ = map_object_hash_;
        let success = sdk::natives::enable_exterior_cull_model_this_frame(
            map_object_hash_,
        );
        
        
        ResultOfEnableExteriorCullModelThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_room_for_game_viewport_by_name(&self, room_name_: Option<String>) -> ResultOfSetRoomForGameViewportByName {
    unsafe {
        let mut room_name_ = sdk_helpers::create_c_string_ptr(room_name_);
        let success = sdk::natives::set_room_for_game_viewport_by_name(
            room_name_.as_ref().unwrap(),
        );
        
        
        ResultOfSetRoomForGameViewportByName {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_interior_at_coords(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfGetInteriorAtCoords {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::get_interior_at_coords(
            &mut native_return,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOfGetInteriorAtCoords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_room_for_entity(&self, entity_: u32) -> ResultOfClearRoomForEntity {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::clear_room_for_entity(
            entity_,
        );
        
        
        ResultOfClearRoomForEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_interior_disabled(&self, interior_: i32) -> ResultOfIsInteriorDisabled {
    unsafe {
        let mut native_return = Default::default();
let mut interior_ = interior_;
        let success = sdk::natives::is_interior_disabled(
            &mut native_return,
interior_,
        );
        let native_return = native_return;
        
        ResultOfIsInteriorDisabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_interior_scene(&self, ) -> ResultOfIsInteriorScene {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_interior_scene(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsInteriorScene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_interior_entity_set_tint_index(&self, interior_: i32,
entity_set_name_: Option<String>,
color_: i32) -> ResultOfSetInteriorEntitySetTintIndex {
    unsafe {
        let mut interior_ = interior_;
let mut entity_set_name_ = sdk_helpers::create_c_string_ptr(entity_set_name_);
let mut color_ = color_;
        let success = sdk::natives::set_interior_entity_set_tint_index(
            interior_,
entity_set_name_.as_ref().unwrap(),
color_,
        );
        
        
        ResultOfSetInteriorEntitySetTintIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_cap_interior(&self, interior_: i32,
toggle_: bool) -> ResultOfCapInterior {
    unsafe {
        let mut interior_ = interior_;
let mut toggle_ = toggle_;
        let success = sdk::natives::cap_interior(
            interior_,
toggle_,
        );
        
        
        ResultOfCapInterior {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_interior_group_id(&self, interior_: i32) -> ResultOfGetInteriorGroupId {
    unsafe {
        let mut native_return = Default::default();
let mut interior_ = interior_;
        let success = sdk::natives::get_interior_group_id(
            &mut native_return,
interior_,
        );
        let native_return = native_return;
        
        ResultOfGetInteriorGroupId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_interior_from_primary_view(&self, ) -> ResultOfGetInteriorFromPrimaryView {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_interior_from_primary_view(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetInteriorFromPrimaryView {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_interior_from_collision(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfGetInteriorFromCollision {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::get_interior_from_collision(
            &mut native_return,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOfGetInteriorFromCollision {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_collision_marked_outside(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfIsCollisionMarkedOutside {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::is_collision_marked_outside(
            &mut native_return,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOfIsCollisionMarkedOutside {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_interior_at_coords_with_typehash(&self, x_: f32,
y_: f32,
z_: f32,
type_hash_: u32) -> ResultOfGetInteriorAtCoordsWithTypehash {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut type_hash_ = type_hash_;
        let success = sdk::natives::get_interior_at_coords_with_typehash(
            &mut native_return,
x_,
y_,
z_,
type_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetInteriorAtCoordsWithTypehash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_interior_heading(&self, interior_: i32) -> ResultOfGetInteriorHeading {
    unsafe {
        let mut native_return = Default::default();
let mut interior_ = interior_;
        let success = sdk::natives::get_interior_heading(
            &mut native_return,
interior_,
        );
        let native_return = native_return;
        
        ResultOfGetInteriorHeading {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_from_itemset(&self, item_: u32,
itemset_: u32) -> ResultOfRemoveFromItemset {
    unsafe {
        let mut item_ = item_;
let mut itemset_ = itemset_;
        let success = sdk::natives::remove_from_itemset(
            item_,
itemset_,
        );
        
        
        ResultOfRemoveFromItemset {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_in_itemset(&self, item_: u32,
itemset_: u32) -> ResultOfIsInItemset {
    unsafe {
        let mut native_return = Default::default();
let mut item_ = item_;
let mut itemset_ = itemset_;
        let success = sdk::natives::is_in_itemset(
            &mut native_return,
item_,
itemset_,
        );
        let native_return = native_return;
        
        ResultOfIsInItemset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_itemset(&self, p0_: bool) -> ResultOfCreateItemset {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::create_itemset(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfCreateItemset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clean_itemset(&self, itemset_: u32) -> ResultOfCleanItemset {
    unsafe {
        let mut itemset_ = itemset_;
        let success = sdk::natives::clean_itemset(
            itemset_,
        );
        
        
        ResultOfCleanItemset {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_indexed_item_in_itemset(&self, index_: i32,
itemset_: u32) -> ResultOfGetIndexedItemInItemset {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
let mut itemset_ = itemset_;
        let success = sdk::natives::get_indexed_item_in_itemset(
            &mut native_return,
index_,
itemset_,
        );
        let native_return = native_return;
        
        ResultOfGetIndexedItemInItemset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_itemset_valid(&self, itemset_: u32) -> ResultOfIsItemsetValid {
    unsafe {
        let mut native_return = Default::default();
let mut itemset_ = itemset_;
        let success = sdk::natives::is_itemset_valid(
            &mut native_return,
itemset_,
        );
        let native_return = native_return;
        
        ResultOfIsItemsetValid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_itemset_size(&self, itemset_: u32) -> ResultOfGetItemsetSize {
    unsafe {
        let mut native_return = Default::default();
let mut itemset_ = itemset_;
        let success = sdk::natives::get_itemset_size(
            &mut native_return,
itemset_,
        );
        let native_return = native_return;
        
        ResultOfGetItemsetSize {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_destroy_itemset(&self, itemset_: u32) -> ResultOfDestroyItemset {
    unsafe {
        let mut itemset_ = itemset_;
        let success = sdk::natives::destroy_itemset(
            itemset_,
        );
        
        
        ResultOfDestroyItemset {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_to_itemset(&self, item_: u32,
itemset_: u32) -> ResultOfAddToItemset {
    unsafe {
        let mut native_return = Default::default();
let mut item_ = item_;
let mut itemset_ = itemset_;
        let success = sdk::natives::add_to_itemset(
            &mut native_return,
item_,
itemset_,
        );
        let native_return = native_return;
        
        ResultOfAddToItemset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_lobby_auto_multiplayer_event(&self, ) -> ResultOfLobbyAutoMultiplayerEvent {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::lobby_auto_multiplayer_event(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfLobbyAutoMultiplayerEvent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_lobby_set_auto_multiplayer(&self, toggle_: bool) -> ResultOfLobbySetAutoMultiplayer {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::lobby_set_auto_multiplayer(
            toggle_,
        );
        
        
        ResultOfLobbySetAutoMultiplayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_lobby_auto_multiplayer_random_job(&self, ) -> ResultOfLobbyAutoMultiplayerRandomJob {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::lobby_auto_multiplayer_random_job(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfLobbyAutoMultiplayerRandomJob {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_lobby_set_auto_mp_random_job(&self, toggle_: bool) -> ResultOfLobbySetAutoMpRandomJob {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::lobby_set_auto_mp_random_job(
            toggle_,
        );
        
        
        ResultOfLobbySetAutoMpRandomJob {
            success,
            ret: (),
            
        }
    }
}

    fn native_lobby_auto_multiplayer_freemode(&self, ) -> ResultOfLobbyAutoMultiplayerFreemode {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::lobby_auto_multiplayer_freemode(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfLobbyAutoMultiplayerFreemode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_lobby_auto_multiplayer_menu(&self, ) -> ResultOfLobbyAutoMultiplayerMenu {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::lobby_auto_multiplayer_menu(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfLobbyAutoMultiplayerMenu {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_shutdown_session_clears_auto_multiplayer(&self, toggle_: bool) -> ResultOfShutdownSessionClearsAutoMultiplayer {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::shutdown_session_clears_auto_multiplayer(
            toggle_,
        );
        
        
        ResultOfShutdownSessionClearsAutoMultiplayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_lobby_set_auto_multiplayer_event(&self, toggle_: bool) -> ResultOfLobbySetAutoMultiplayerEvent {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::lobby_set_auto_multiplayer_event(
            toggle_,
        );
        
        
        ResultOfLobbySetAutoMultiplayerEvent {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_current_language(&self, ) -> ResultOfGetCurrentLanguage {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_current_language(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetCurrentLanguage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_localization_get_system_language(&self, ) -> ResultOfLocalizationGetSystemLanguage {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::localization_get_system_language(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfLocalizationGetSystemLanguage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_localization_get_system_date_type(&self, ) -> ResultOfLocalizationGetSystemDateType {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::localization_get_system_date_type(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfLocalizationGetSystemDateType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_display_onscreen_keyboard(&self, p0_: i32,
window_title_: Option<String>,
p2_: Option<String>,
default_text_: Option<String>,
default_concat1_: Option<String>,
default_concat2_: Option<String>,
default_concat3_: Option<String>,
max_input_length_: i32) -> ResultOfDisplayOnscreenKeyboard {
    unsafe {
        let mut p0_ = p0_;
let mut window_title_ = sdk_helpers::create_c_string_ptr(window_title_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut default_text_ = sdk_helpers::create_c_string_ptr(default_text_);
let mut default_concat1_ = sdk_helpers::create_c_string_ptr(default_concat1_);
let mut default_concat2_ = sdk_helpers::create_c_string_ptr(default_concat2_);
let mut default_concat3_ = sdk_helpers::create_c_string_ptr(default_concat3_);
let mut max_input_length_ = max_input_length_;
        let success = sdk::natives::display_onscreen_keyboard(
            p0_,
window_title_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
default_text_.as_ref().unwrap(),
default_concat1_.as_ref().unwrap(),
default_concat2_.as_ref().unwrap(),
default_concat3_.as_ref().unwrap(),
max_input_length_,
        );
        
        
        ResultOfDisplayOnscreenKeyboard {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_area_of_vehicles(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
p4_: bool,
p5_: bool,
p6_: bool,
p7_: bool,
p8_: bool,
p9_: bool,
p10_: i32) -> ResultOfClearAreaOfVehicles {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
        let success = sdk::natives::clear_area_of_vehicles(
            x_,
y_,
z_,
radius_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
        );
        
        
        ResultOfClearAreaOfVehicles {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cloud_settings_override(&self, p0_: Option<String>) -> ResultOfSetCloudSettingsOverride {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::set_cloud_settings_override(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOfSetCloudSettingsOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_model_dimensions(&self, model_hash_: u32,
minimum_: Option<shared::Vector3>,
maximum_: Option<shared::Vector3>) -> ResultOfGetModelDimensions {
    unsafe {
        let mut model_hash_ = model_hash_;
let mut minimum_ = sdk_helpers::create_vector3_ptr(minimum_);
let mut maximum_ = sdk_helpers::create_vector3_ptr(maximum_);
        let success = sdk::natives::get_model_dimensions(
            minimum_.pin_mut(),
maximum_.pin_mut(),
model_hash_,
        );
        let minimum_ = sdk_helpers::read_cpp_vector3(minimum_);
let maximum_ = sdk_helpers::read_cpp_vector3(maximum_);
        
        ResultOfGetModelDimensions {
            success,
            ret: (),
            minimum_,
maximum_
        }
    }
}

    fn native_stop_save_array(&self, ) -> ResultOfStopSaveArray {
    unsafe {
        
        let success = sdk::natives::stop_save_array(
            
        );
        
        
        ResultOfStopSaveArray {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_area_of_cops(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
flags_: i32) -> ResultOfClearAreaOfCops {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut flags_ = flags_;
        let success = sdk::natives::clear_area_of_cops(
            x_,
y_,
z_,
radius_,
flags_,
        );
        
        
        ResultOfClearAreaOfCops {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_incident_with_entity(&self, dispatch_service_: i32,
ped_: u32,
num_units_: i32,
radius_: f32,
out_incident_i_d_: i32,
p5_: i32,
p6_: i32) -> ResultOfCreateIncidentWithEntity {
    unsafe {
        let mut native_return = Default::default();
let mut dispatch_service_ = dispatch_service_;
let mut ped_ = ped_;
let mut num_units_ = num_units_;
let mut radius_ = radius_;
let mut out_incident_i_d_ = out_incident_i_d_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::create_incident_with_entity(
            &mut native_return,
&mut out_incident_i_d_,
dispatch_service_,
ped_,
num_units_,
radius_,
p5_,
p6_,
        );
        let native_return = native_return;
let out_incident_i_d_ = out_incident_i_d_;
        
        ResultOfCreateIncidentWithEntity {
            success,
            ret: native_return,
            out_incident_i_d_
        }
    }
}

    fn native_clear_code_requested_autosave(&self, ) -> ResultOfClearCodeRequestedAutosave {
    unsafe {
        
        let success = sdk::natives::clear_code_requested_autosave(
            
        );
        
        
        ResultOfClearCodeRequestedAutosave {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_cheat_with_hash_been_activated(&self, hash_: u32,
amount_: i32) -> ResultOfHasCheatWithHashBeenActivated {
    unsafe {
        let mut native_return = Default::default();
let mut hash_ = hash_;
let mut amount_ = amount_;
        let success = sdk::natives::has_cheat_with_hash_been_activated(
            &mut native_return,
hash_,
amount_,
        );
        let native_return = native_return;
        
        ResultOfHasCheatWithHashBeenActivated {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_have_credits_reached_end(&self, ) -> ResultOfHaveCreditsReachedEnd {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::have_credits_reached_end(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfHaveCreditsReachedEnd {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_area_of_projectiles(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
flags_: i32) -> ResultOfClearAreaOfProjectiles {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut flags_ = flags_;
        let success = sdk::natives::clear_area_of_projectiles(
            x_,
y_,
z_,
radius_,
flags_,
        );
        
        
        ResultOfClearAreaOfProjectiles {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_steam_version(&self, ) -> ResultOfIsSteamVersion {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_steam_version(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsSteamVersion {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_script_race_init(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfScriptRaceInit {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::script_race_init(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfScriptRaceInit {
            success,
            ret: (),
            
        }
    }
}

    fn native_are_strings_equal(&self, string1_: Option<String>,
string2_: Option<String>) -> ResultOfAreStringsEqual {
    unsafe {
        let mut native_return = Default::default();
let mut string1_ = sdk_helpers::create_c_string_ptr(string1_);
let mut string2_ = sdk_helpers::create_c_string_ptr(string2_);
        let success = sdk::natives::are_strings_equal(
            &mut native_return,
string1_.as_ref().unwrap(),
string2_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfAreStringsEqual {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_update_onscreen_keyboard(&self, ) -> ResultOfUpdateOnscreenKeyboard {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::update_onscreen_keyboard(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfUpdateOnscreenKeyboard {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_weather_type_now_persist_network(&self, milliseconds_: i32) -> ResultOfClearWeatherTypeNowPersistNetwork {
    unsafe {
        let mut milliseconds_ = milliseconds_;
        let success = sdk::natives::clear_weather_type_now_persist_network(
            milliseconds_,
        );
        
        
        ResultOfClearWeatherTypeNowPersistNetwork {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_enum_to_save(&self, p0_: shared::MemoryBufferId,
name_: Option<String>) -> ResultOfRegisterEnumToSave {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::register_enum_to_save(
            p0_,
name_.as_ref().unwrap(),
        );
        let p0_ = 0;
        
        ResultOfRegisterEnumToSave {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_override_save_house(&self, p0_: bool,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: bool,
p6_: f32,
p7_: f32) -> ResultOfOverrideSaveHouse {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::override_save_house(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
        );
        let native_return = native_return;
        
        ResultOfOverrideSaveHouse {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_override_weatherex(&self, weather_type_: Option<String>,
p1_: bool) -> ResultOfSetOverrideWeatherex {
    unsafe {
        let mut weather_type_ = sdk_helpers::create_c_string_ptr(weather_type_);
let mut p1_ = p1_;
        let success = sdk::natives::set_override_weatherex(
            weather_type_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOfSetOverrideWeatherex {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_fire_ammo_this_frame(&self, player_: u32) -> ResultOfSetFireAmmoThisFrame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::set_fire_ammo_this_frame(
            player_,
        );
        
        
        ResultOfSetFireAmmoThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_preload_cloud_hat(&self, name_: Option<String>) -> ResultOfPreloadCloudHat {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::preload_cloud_hat(
            name_.as_ref().unwrap(),
        );
        
        
        ResultOfPreloadCloudHat {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_angled_area_of_vehicles(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32,
p7_: bool,
p8_: bool,
p9_: bool,
p10_: bool,
p11_: bool,
p12_: i32,
p13_: i32) -> ResultOfClearAngledAreaOfVehicles {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
let mut p12_ = p12_;
let mut p13_ = p13_;
        let success = sdk::natives::clear_angled_area_of_vehicles(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
p7_,
p8_,
p9_,
p10_,
p11_,
p12_,
p13_,
        );
        
        
        ResultOfClearAngledAreaOfVehicles {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_pop_multiplier_area_networked(&self, id_: i32) -> ResultOfIsPopMultiplierAreaNetworked {
    unsafe {
        let mut native_return = Default::default();
let mut id_ = id_;
        let success = sdk::natives::is_pop_multiplier_area_networked(
            &mut native_return,
id_,
        );
        let native_return = native_return;
        
        ResultOfIsPopMultiplierAreaNetworked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_pop_multiplier_area_exist(&self, id_: i32) -> ResultOfDoesPopMultiplierAreaExist {
    unsafe {
        let mut native_return = Default::default();
let mut id_ = id_;
        let success = sdk::natives::does_pop_multiplier_area_exist(
            &mut native_return,
id_,
        );
        let native_return = native_return;
        
        ResultOfDoesPopMultiplierAreaExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_xbox_platform(&self, ) -> ResultOfIsXboxPlatform {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_xbox_platform(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsXboxPlatform {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_fake_wanted_level(&self, fake_wanted_level_: i32) -> ResultOfSetFakeWantedLevel {
    unsafe {
        let mut fake_wanted_level_ = fake_wanted_level_;
        let success = sdk::natives::set_fake_wanted_level(
            fake_wanted_level_,
        );
        
        
        ResultOfSetFakeWantedLevel {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_async_install_finished(&self, ) -> ResultOfHasAsyncInstallFinished {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_async_install_finished(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfHasAsyncInstallFinished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_frame_time(&self, ) -> ResultOfGetFrameTime {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_frame_time(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetFrameTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_pop_multiplier_sphere_exist(&self, id_: i32) -> ResultOfDoesPopMultiplierSphereExist {
    unsafe {
        let mut native_return = Default::default();
let mut id_ = id_;
        let success = sdk::natives::does_pop_multiplier_sphere_exist(
            &mut native_return,
id_,
        );
        let native_return = native_return;
        
        ResultOfDoesPopMultiplierSphereExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_tennis_swing_anim_complete(&self, ped_: u32) -> ResultOfGetTennisSwingAnimComplete {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_tennis_swing_anim_complete(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetTennisSwingAnimComplete {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_angle_between2d_vectors(&self, x1_: f32,
y1_: f32,
x2_: f32,
y2_: f32) -> ResultOfGetAngleBetween2dVectors {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
        let success = sdk::natives::get_angle_between2d_vectors(
            &mut native_return,
x1_,
y1_,
x2_,
y2_,
        );
        let native_return = native_return;
        
        ResultOfGetAngleBetween2dVectors {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_tennis_swing_anim_can_be_interrupted(&self, ped_: u32) -> ResultOfGetTennisSwingAnimCanBeInterrupted {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_tennis_swing_anim_can_be_interrupted(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetTennisSwingAnimCanBeInterrupted {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_minigame_in_progress(&self, toggle_: bool) -> ResultOfSetMinigameInProgress {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_minigame_in_progress(
            toggle_,
        );
        
        
        ResultOfSetMinigameInProgress {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_bullet_in_angled_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32,
owned_by_player_: bool) -> ResultOfIsBulletInAngledArea {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
let mut owned_by_player_ = owned_by_player_;
        let success = sdk::natives::is_bullet_in_angled_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
owned_by_player_,
        );
        let native_return = native_return;
        
        ResultOfIsBulletInAngledArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_stunt_jump(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
x3_: f32,
y3_: f32,
z3_: f32,
x4_: f32,
y4_: f32,
z4_: f32,
cam_x_: f32,
cam_y_: f32,
cam_z_: f32,
p15_: i32,
p16_: i32,
p17_: i32) -> ResultOfAddStuntJump {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut x3_ = x3_;
let mut y3_ = y3_;
let mut z3_ = z3_;
let mut x4_ = x4_;
let mut y4_ = y4_;
let mut z4_ = z4_;
let mut cam_x_ = cam_x_;
let mut cam_y_ = cam_y_;
let mut cam_z_ = cam_z_;
let mut p15_ = p15_;
let mut p16_ = p16_;
let mut p17_ = p17_;
        let success = sdk::natives::add_stunt_jump(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
x3_,
y3_,
z3_,
x4_,
y4_,
z4_,
cam_x_,
cam_y_,
cam_z_,
p15_,
p16_,
p17_,
        );
        let native_return = native_return;
        
        ResultOfAddStuntJump {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_replay_stats(&self, ) -> ResultOfClearReplayStats {
    unsafe {
        
        let success = sdk::natives::clear_replay_stats(
            
        );
        
        
        ResultOfClearReplayStats {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_benchmark_pass(&self, ) -> ResultOfGetBenchmarkPass {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_benchmark_pass(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetBenchmarkPass {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_script_race_player_hit_checkpoint(&self, player_: u32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfScriptRacePlayerHitCheckpoint {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::script_race_player_hit_checkpoint(
            player_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfScriptRacePlayerHitCheckpoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_acos(&self, p0_: f32) -> ResultOfAcos {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::acos(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfAcos {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_time_scale(&self, time_scale_: f32) -> ResultOfSetTimeScale {
    unsafe {
        let mut time_scale_ = time_scale_;
        let success = sdk::natives::set_time_scale(
            time_scale_,
        );
        
        
        ResultOfSetTimeScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_fade_out_after_arrest(&self, toggle_: bool) -> ResultOfSetFadeOutAfterArrest {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_fade_out_after_arrest(
            toggle_,
        );
        
        
        ResultOfSetFadeOutAfterArrest {
            success,
            ret: (),
            
        }
    }
}

    fn native_compare_strings(&self, str1_: Option<String>,
str2_: Option<String>,
match_case_: bool,
max_length_: i32) -> ResultOfCompareStrings {
    unsafe {
        let mut native_return = Default::default();
let mut str1_ = sdk_helpers::create_c_string_ptr(str1_);
let mut str2_ = sdk_helpers::create_c_string_ptr(str2_);
let mut match_case_ = match_case_;
let mut max_length_ = max_length_;
        let success = sdk::natives::compare_strings(
            &mut native_return,
str1_.as_ref().unwrap(),
str2_.as_ref().unwrap(),
match_case_,
max_length_,
        );
        let native_return = native_return;
        
        ResultOfCompareStrings {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_supress_random_event_this_frame(&self, event_type_: i32,
suppress_: bool) -> ResultOfSupressRandomEventThisFrame {
    unsafe {
        let mut event_type_ = event_type_;
let mut suppress_ = suppress_;
        let success = sdk::natives::supress_random_event_this_frame(
            event_type_,
suppress_,
        );
        
        
        ResultOfSupressRandomEventThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_wind_direction(&self, ) -> ResultOfGetWindDirection {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
        let success = sdk::natives::get_wind_direction(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetWindDirection {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_hospital_restart(&self, x_: f32,
y_: f32,
z_: f32,
p3_: f32,
p4_: i32) -> ResultOfAddHospitalRestart {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::add_hospital_restart(
            &mut native_return,
x_,
y_,
z_,
p3_,
p4_,
        );
        let native_return = native_return;
        
        ResultOfAddHospitalRestart {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_script_race_shutdown(&self, ) -> ResultOfScriptRaceShutdown {
    unsafe {
        
        let success = sdk::natives::script_race_shutdown(
            
        );
        
        
        ResultOfScriptRaceShutdown {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_clouds_alpha(&self, ) -> ResultOfGetCloudsAlpha {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_clouds_alpha(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetCloudsAlpha {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_code_requested_autosave(&self, ) -> ResultOfHasCodeRequestedAutosave {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_code_requested_autosave(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfHasCodeRequestedAutosave {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_copy_script_struct(&self, dst_: shared::MemoryBufferId,
src_: shared::MemoryBufferId,
size_: i32) -> ResultOfCopyScriptStruct {
    unsafe {
        let mut dst_ = self.memory_buffers.borrow_mut().get_mut_ptr(dst_) as *mut c_void;
let mut src_ = self.memory_buffers.borrow_mut().get_mut_ptr(src_) as *mut c_void;
let mut size_ = size_;
        let success = sdk::natives::copy_script_struct(
            dst_,
src_,
size_,
        );
        let dst_ = 0;
let src_ = 0;
        
        ResultOfCopyScriptStruct {
            success,
            ret: (),
            dst_,
src_
        }
    }
}

    fn native_get_closest_point_on_line(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
x3_: f32,
y3_: f32,
z3_: f32,
clamp_: bool) -> ResultOfGetClosestPointOnLine {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut x3_ = x3_;
let mut y3_ = y3_;
let mut z3_ = z3_;
let mut clamp_ = clamp_;
        let success = sdk::natives::get_closest_point_on_line(
            native_return.pin_mut(),
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
x3_,
y3_,
z3_,
clamp_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetClosestPointOnLine {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ignore_next_restart(&self, toggle_: bool) -> ResultOfIgnoreNextRestart {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::ignore_next_restart(
            toggle_,
        );
        
        
        ResultOfIgnoreNextRestart {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_stunt_jump_message_showing(&self, ) -> ResultOfIsStuntJumpMessageShowing {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_stunt_jump_message_showing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsStuntJumpMessageShowing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_screen_dimming_this_frame(&self, ) -> ResultOfDisableScreenDimmingThisFrame {
    unsafe {
        
        let success = sdk::natives::disable_screen_dimming_this_frame(
            
        );
        
        
        ResultOfDisableScreenDimmingThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_police_restart(&self, police_index_: i32,
toggle_: bool) -> ResultOfDisablePoliceRestart {
    unsafe {
        let mut police_index_ = police_index_;
let mut toggle_ = toggle_;
        let success = sdk::natives::disable_police_restart(
            police_index_,
toggle_,
        );
        
        
        ResultOfDisablePoliceRestart {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_content_to_load(&self, ) -> ResultOfGetContentToLoad {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
        let success = sdk::natives::get_content_to_load(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetContentToLoad {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_riot_mode_enabled(&self, toggle_: bool) -> ResultOfSetRiotModeEnabled {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_riot_mode_enabled(
            toggle_,
        );
        
        
        ResultOfSetRiotModeEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_dispatch_spawn_blocking_area(&self, p0_: i32) -> ResultOfRemoveDispatchSpawnBlockingArea {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::remove_dispatch_spawn_blocking_area(
            p0_,
        );
        
        
        ResultOfRemoveDispatchSpawnBlockingArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_tennis_mode(&self, ped_: u32,
toggle_: bool,
p2_: bool) -> ResultOfEnableTennisMode {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
        let success = sdk::natives::enable_tennis_mode(
            ped_,
toggle_,
p2_,
        );
        
        
        ResultOfEnableTennisMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_weather_type_now(&self, weather_type_: Option<String>) -> ResultOfSetWeatherTypeNow {
    unsafe {
        let mut weather_type_ = sdk_helpers::create_c_string_ptr(weather_type_);
        let success = sdk::natives::set_weather_type_now(
            weather_type_.as_ref().unwrap(),
        );
        
        
        ResultOfSetWeatherTypeNow {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_minigame_in_progress(&self, ) -> ResultOfIsMinigameInProgress {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_minigame_in_progress(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsMinigameInProgress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_status_of_mission_repeat_save(&self, ) -> ResultOfGetStatusOfMissionRepeatSave {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_status_of_mission_repeat_save(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetStatusOfMissionRepeatSave {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_replay_stat_mission_type(&self, ) -> ResultOfGetReplayStatMissionType {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_replay_stat_mission_type(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetReplayStatMissionType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pause_death_arrest_restart(&self, toggle_: bool) -> ResultOfPauseDeathArrestRestart {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::pause_death_arrest_restart(
            toggle_,
        );
        
        
        ResultOfPauseDeathArrestRestart {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_dispatch_spawn_sphere_blocking_area(&self, x1_: f32,
y1_: f32,
x2_: f32,
y2_: f32) -> ResultOfAddDispatchSpawnSphereBlockingArea {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
        let success = sdk::natives::add_dispatch_spawn_sphere_blocking_area(
            &mut native_return,
x1_,
y1_,
x2_,
y2_,
        );
        let native_return = native_return;
        
        ResultOfAddDispatchSpawnSphereBlockingArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_projectile_type_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
type_: i32,
owned_by_player_: bool) -> ResultOfIsProjectileTypeInArea {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut type_ = type_;
let mut owned_by_player_ = owned_by_player_;
        let success = sdk::natives::is_projectile_type_in_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
type_,
owned_by_player_,
        );
        let native_return = native_return;
        
        ResultOfIsProjectileTypeInArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_next_weather_type(&self, weather_type_: Option<String>) -> ResultOfIsNextWeatherType {
    unsafe {
        let mut native_return = Default::default();
let mut weather_type_ = sdk_helpers::create_c_string_ptr(weather_type_);
        let success = sdk::natives::is_next_weather_type(
            &mut native_return,
weather_type_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfIsNextWeatherType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_heading_from_vector2d(&self, dx_: f32,
dy_: f32) -> ResultOfGetHeadingFromVector2d {
    unsafe {
        let mut native_return = Default::default();
let mut dx_ = dx_;
let mut dy_ = dy_;
        let success = sdk::natives::get_heading_from_vector2d(
            &mut native_return,
dx_,
dy_,
        );
        let native_return = native_return;
        
        ResultOfGetHeadingFromVector2d {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_activity_feed_add_substring_to_caption(&self, p0_: Option<String>) -> ResultOfActivityFeedAddSubstringToCaption {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::activity_feed_add_substring_to_caption(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOfActivityFeedAddSubstringToCaption {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_random_float_in_range(&self, start_range_: f32,
end_range_: f32) -> ResultOfGetRandomFloatInRange {
    unsafe {
        let mut native_return = Default::default();
let mut start_range_ = start_range_;
let mut end_range_ = end_range_;
        let success = sdk::natives::get_random_float_in_range(
            &mut native_return,
start_range_,
end_range_,
        );
        let native_return = native_return;
        
        ResultOfGetRandomFloatInRange {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_water_override_set_oceannoiseminamplitude(&self, min_amplitude_: f32) -> ResultOfWaterOverrideSetOceannoiseminamplitude {
    unsafe {
        let mut min_amplitude_ = min_amplitude_;
        let success = sdk::natives::water_override_set_oceannoiseminamplitude(
            min_amplitude_,
        );
        
        
        ResultOfWaterOverrideSetOceannoiseminamplitude {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_pop_multiplier_sphere(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
ped_multiplier_: f32,
vehicle_multiplier_: f32,
p6_: bool,
p7_: bool) -> ResultOfAddPopMultiplierSphere {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut ped_multiplier_ = ped_multiplier_;
let mut vehicle_multiplier_ = vehicle_multiplier_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::add_pop_multiplier_sphere(
            &mut native_return,
x_,
y_,
z_,
radius_,
ped_multiplier_,
vehicle_multiplier_,
p6_,
p7_,
        );
        let native_return = native_return;
        
        ResultOfAddPopMultiplierSphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_override_weather(&self, ) -> ResultOfClearOverrideWeather {
    unsafe {
        
        let success = sdk::natives::clear_override_weather(
            
        );
        
        
        ResultOfClearOverrideWeather {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_projectile_type_within_distance(&self, x_: f32,
y_: f32,
z_: f32,
projectile_hash_: u32,
radius_: f32,
owned_by_player_: bool) -> ResultOfIsProjectileTypeWithinDistance {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut projectile_hash_ = projectile_hash_;
let mut radius_ = radius_;
let mut owned_by_player_ = owned_by_player_;
        let success = sdk::natives::is_projectile_type_within_distance(
            &mut native_return,
x_,
y_,
z_,
projectile_hash_,
radius_,
owned_by_player_,
        );
        let native_return = native_return;
        
        ResultOfIsProjectileTypeWithinDistance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_register_int_to_save(&self, p0_: shared::MemoryBufferId,
name_: Option<String>) -> ResultOfRegisterIntToSave {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::register_int_to_save(
            p0_,
name_.as_ref().unwrap(),
        );
        let p0_ = 0;
        
        ResultOfRegisterIntToSave {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_save_end_user_benchmark(&self, ) -> ResultOfSaveEndUserBenchmark {
    unsafe {
        
        let success = sdk::natives::save_end_user_benchmark(
            
        );
        
        
        ResultOfSaveEndUserBenchmark {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_area_occupied_slow(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32,
p8_: i32,
p9_: i32,
p10_: i32,
p11_: i32,
p12_: i32) -> ResultOfIsAreaOccupiedSlow {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
let mut p12_ = p12_;
        let success = sdk::natives::is_area_occupied_slow(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
p11_,
p12_,
        );
        let native_return = native_return;
        
        ResultOfIsAreaOccupiedSlow {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_status_of_manual_save(&self, ) -> ResultOfGetStatusOfManualSave {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_status_of_manual_save(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetStatusOfManualSave {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_landing_screen_started_end_user_benchmark(&self, ) -> ResultOfLandingScreenStartedEndUserBenchmark {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::landing_screen_started_end_user_benchmark(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfLandingScreenStartedEndUserBenchmark {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_coords_of_projectile_type_in_angled_area(&self, vec_angled_area_point1_x_: f32,
vec_angled_area_point1_y_: f32,
vec_angled_area_point1_z_: f32,
vec_angled_area_point2_x_: f32,
vec_angled_area_point2_y_: f32,
vec_angled_area_point2_z_: f32,
distance_of_opposite_face_: f32,
weapon_type_: u32,
position_out_: Option<shared::Vector3>,
b_is_player_: bool) -> ResultOfGetCoordsOfProjectileTypeInAngledArea {
    unsafe {
        let mut native_return = Default::default();
let mut vec_angled_area_point1_x_ = vec_angled_area_point1_x_;
let mut vec_angled_area_point1_y_ = vec_angled_area_point1_y_;
let mut vec_angled_area_point1_z_ = vec_angled_area_point1_z_;
let mut vec_angled_area_point2_x_ = vec_angled_area_point2_x_;
let mut vec_angled_area_point2_y_ = vec_angled_area_point2_y_;
let mut vec_angled_area_point2_z_ = vec_angled_area_point2_z_;
let mut distance_of_opposite_face_ = distance_of_opposite_face_;
let mut weapon_type_ = weapon_type_;
let mut position_out_ = sdk_helpers::create_vector3_ptr(position_out_);
let mut b_is_player_ = b_is_player_;
        let success = sdk::natives::get_coords_of_projectile_type_in_angled_area(
            &mut native_return,
position_out_.pin_mut(),
vec_angled_area_point1_x_,
vec_angled_area_point1_y_,
vec_angled_area_point1_z_,
vec_angled_area_point2_x_,
vec_angled_area_point2_y_,
vec_angled_area_point2_z_,
distance_of_opposite_face_,
weapon_type_,
b_is_player_,
        );
        let native_return = native_return;
let position_out_ = sdk_helpers::read_cpp_vector3(position_out_);
        
        ResultOfGetCoordsOfProjectileTypeInAngledArea {
            success,
            ret: native_return,
            position_out_
        }
    }
}

    fn native_next_onscreen_keyboard_result_will_display_using_these_fonts(&self, p0_: i32) -> ResultOfNextOnscreenKeyboardResultWillDisplayUsingTheseFonts {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::next_onscreen_keyboard_result_will_display_using_these_fonts(
            p0_,
        );
        
        
        ResultOfNextOnscreenKeyboardResultWillDisplayUsingTheseFonts {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_bullet_in_area(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
owned_by_player_: bool) -> ResultOfIsBulletInArea {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut owned_by_player_ = owned_by_player_;
        let success = sdk::natives::is_bullet_in_area(
            &mut native_return,
x_,
y_,
z_,
radius_,
owned_by_player_,
        );
        let native_return = native_return;
        
        ResultOfIsBulletInArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_real_world_time(&self, ) -> ResultOfGetRealWorldTime {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_real_world_time(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetRealWorldTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_incident(&self, dispatch_service_: i32,
x_: f32,
y_: f32,
z_: f32,
num_units_: i32,
radius_: f32,
out_incident_i_d_: i32,
p7_: i32,
p8_: i32) -> ResultOfCreateIncident {
    unsafe {
        let mut native_return = Default::default();
let mut dispatch_service_ = dispatch_service_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut num_units_ = num_units_;
let mut radius_ = radius_;
let mut out_incident_i_d_ = out_incident_i_d_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::create_incident(
            &mut native_return,
&mut out_incident_i_d_,
dispatch_service_,
x_,
y_,
z_,
num_units_,
radius_,
p7_,
p8_,
        );
        let native_return = native_return;
let out_incident_i_d_ = out_incident_i_d_;
        
        ResultOfCreateIncident {
            success,
            ret: native_return,
            out_incident_i_d_
        }
    }
}

    fn native_water_override_set_oceanwaveamplitude(&self, amplitude_: f32) -> ResultOfWaterOverrideSetOceanwaveamplitude {
    unsafe {
        let mut amplitude_ = amplitude_;
        let success = sdk::natives::water_override_set_oceanwaveamplitude(
            amplitude_,
        );
        
        
        ResultOfWaterOverrideSetOceanwaveamplitude {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_end_user_benchmark(&self, ) -> ResultOfResetEndUserBenchmark {
    unsafe {
        
        let success = sdk::natives::reset_end_user_benchmark(
            
        );
        
        
        ResultOfResetEndUserBenchmark {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_beast_jump_this_frame(&self, player_: u32) -> ResultOfSetBeastJumpThisFrame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::set_beast_jump_this_frame(
            player_,
        );
        
        
        ResultOfSetBeastJumpThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_random_seed(&self, seed_: i32) -> ResultOfSetRandomSeed {
    unsafe {
        let mut seed_ = seed_;
        let success = sdk::natives::set_random_seed(
            seed_,
        );
        
        
        ResultOfSetRandomSeed {
            success,
            ret: (),
            
        }
    }
}

    fn native_queue_mission_repeat_save(&self, ) -> ResultOfQueueMissionRepeatSave {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::queue_mission_repeat_save(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfQueueMissionRepeatSave {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_prev_weather_type(&self, weather_type_: Option<String>) -> ResultOfIsPrevWeatherType {
    unsafe {
        let mut native_return = Default::default();
let mut weather_type_ = sdk_helpers::create_c_string_ptr(weather_type_);
        let success = sdk::natives::is_prev_weather_type(
            &mut native_return,
weather_type_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfIsPrevWeatherType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_dispatch_time_between_spawn_attempts(&self, p0_: i32,
p1_: f32) -> ResultOfSetDispatchTimeBetweenSpawnAttempts {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_dispatch_time_between_spawn_attempts(
            p0_,
p1_,
        );
        
        
        ResultOfSetDispatchTimeBetweenSpawnAttempts {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_police_restart(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: i32) -> ResultOfAddPoliceRestart {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::add_police_restart(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
        );
        let native_return = native_return;
        
        ResultOfAddPoliceRestart {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_benchmark_iterations(&self, ) -> ResultOfGetBenchmarkIterations {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_benchmark_iterations(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetBenchmarkIterations {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_dispatch_time_between_spawn_attempts_multiplier(&self, p0_: i32,
p1_: f32) -> ResultOfSetDispatchTimeBetweenSpawnAttemptsMultiplier {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_dispatch_time_between_spawn_attempts_multiplier(
            p0_,
p1_,
        );
        
        
        ResultOfSetDispatchTimeBetweenSpawnAttemptsMultiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_pc_version(&self, ) -> ResultOfIsPcVersion {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_pc_version(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsPcVersion {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_register_text_label23_to_save(&self, p0_: shared::MemoryBufferId,
name_: Option<String>) -> ResultOfRegisterTextLabel23ToSave {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::register_text_label23_to_save(
            p0_,
name_.as_ref().unwrap(),
        );
        let p0_ = 0;
        
        ResultOfRegisterTextLabel23ToSave {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_set_fade_out_after_death(&self, toggle_: bool) -> ResultOfSetFadeOutAfterDeath {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_fade_out_after_death(
            toggle_,
        );
        
        
        ResultOfSetFadeOutAfterDeath {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_content_id_index(&self, content_id_: u32,
index_: i32) -> ResultOfSetContentIdIndex {
    unsafe {
        let mut content_id_ = content_id_;
let mut index_ = index_;
        let success = sdk::natives::set_content_id_index(
            content_id_,
index_,
        );
        
        
        ResultOfSetContentIdIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_fake_wanted_level(&self, ) -> ResultOfGetFakeWantedLevel {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_fake_wanted_level(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetFakeWantedLevel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_durango_version(&self, ) -> ResultOfIsDurangoVersion {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_durango_version(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsDurangoVersion {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_activity_feed_create(&self, p0_: Option<String>,
p1_: Option<String>) -> ResultOfActivityFeedCreate {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::activity_feed_create(
            p0_.as_ref().unwrap(),
p1_.as_ref().unwrap(),
        );
        
        
        ResultOfActivityFeedCreate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_is_in_animal_form(&self, toggle_: bool) -> ResultOfSetPlayerIsInAnimalForm {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_is_in_animal_form(
            toggle_,
        );
        
        
        ResultOfSetPlayerIsInAnimalForm {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_save_house(&self, savehouse_handle_: i32,
p1_: bool,
p2_: bool) -> ResultOfSetSaveHouse {
    unsafe {
        let mut savehouse_handle_ = savehouse_handle_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_save_house(
            savehouse_handle_,
p1_,
p2_,
        );
        
        
        ResultOfSetSaveHouse {
            success,
            ret: (),
            
        }
    }
}

    fn native_do_auto_save(&self, ) -> ResultOfDoAutoSave {
    unsafe {
        
        let success = sdk::natives::do_auto_save(
            
        );
        
        
        ResultOfDoAutoSave {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_projectile_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
owned_by_player_: bool) -> ResultOfIsProjectileInArea {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut owned_by_player_ = owned_by_player_;
        let success = sdk::natives::is_projectile_in_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
owned_by_player_,
        );
        let native_return = native_return;
        
        ResultOfIsProjectileInArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_bits_in_range(&self, unk_var_: i32,
range_start_: i32,
range_end_: i32) -> ResultOfGetBitsInRange {
    unsafe {
        let mut native_return = Default::default();
let mut unk_var_ = unk_var_;
let mut range_start_ = range_start_;
let mut range_end_ = range_end_;
        let success = sdk::natives::get_bits_in_range(
            &mut native_return,
unk_var_,
range_start_,
range_end_,
        );
        let native_return = native_return;
        
        ResultOfGetBitsInRange {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_tennis_move_network_signal_float(&self, ped_: u32,
p1_: Option<String>,
p2_: f32) -> ResultOfSetTennisMoveNetworkSignalFloat {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = p2_;
        let success = sdk::natives::set_tennis_move_network_signal_float(
            ped_,
p1_.as_ref().unwrap(),
p2_,
        );
        
        
        ResultOfSetTennisMoveNetworkSignalFloat {
            success,
            ret: (),
            
        }
    }
}

    fn native_delete_incident(&self, incident_id_: i32) -> ResultOfDeleteIncident {
    unsafe {
        let mut incident_id_ = incident_id_;
        let success = sdk::natives::delete_incident(
            incident_id_,
        );
        
        
        ResultOfDeleteIncident {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_pc_cheat_with_hash_been_activated(&self, hash_: u32) -> ResultOfHasPcCheatWithHashBeenActivated {
    unsafe {
        let mut native_return = Default::default();
let mut hash_ = hash_;
        let success = sdk::natives::has_pc_cheat_with_hash_been_activated(
            &mut native_return,
hash_,
        );
        let native_return = native_return;
        
        ResultOfHasPcCheatWithHashBeenActivated {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_prev_weather_type_hash_name(&self, ) -> ResultOfGetPrevWeatherTypeHashName {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_prev_weather_type_hash_name(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetPrevWeatherTypeHashName {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_game_paused(&self, toggle_: bool) -> ResultOfSetGamePaused {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_game_paused(
            toggle_,
        );
        
        
        ResultOfSetGamePaused {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_curr_weather_state(&self, weather_type1_: u32,
weather_type2_: u32,
percent_weather2_: f32) -> ResultOfSetCurrWeatherState {
    unsafe {
        let mut weather_type1_ = weather_type1_;
let mut weather_type2_ = weather_type2_;
let mut percent_weather2_ = percent_weather2_;
        let success = sdk::natives::set_curr_weather_state(
            weather_type1_,
weather_type2_,
percent_weather2_,
        );
        
        
        ResultOfSetCurrWeatherState {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_super_jump_this_frame(&self, player_: u32) -> ResultOfSetSuperJumpThisFrame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::set_super_jump_this_frame(
            player_,
        );
        
        
        ResultOfSetSuperJumpThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_dispatch_spawn_location(&self, ) -> ResultOfResetDispatchSpawnLocation {
    unsafe {
        
        let success = sdk::natives::reset_dispatch_spawn_location(
            
        );
        
        
        ResultOfResetDispatchSpawnLocation {
            success,
            ret: (),
            
        }
    }
}

    fn native_cancel_onscreen_keyboard(&self, ) -> ResultOfCancelOnscreenKeyboard {
    unsafe {
        
        let success = sdk::natives::cancel_onscreen_keyboard(
            
        );
        
        
        ResultOfCancelOnscreenKeyboard {
            success,
            ret: (),
            
        }
    }
}

    fn native_string_to_int(&self, string_: Option<String>,
out_integer_: i32) -> ResultOfStringToInt {
    unsafe {
        let mut native_return = Default::default();
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
let mut out_integer_ = out_integer_;
        let success = sdk::natives::string_to_int(
            &mut native_return,
&mut out_integer_,
string_.as_ref().unwrap(),
        );
        let native_return = native_return;
let out_integer_ = out_integer_;
        
        ResultOfStringToInt {
            success,
            ret: native_return,
            out_integer_
        }
    }
}

    fn native_are_profile_settings_valid(&self, ) -> ResultOfAreProfileSettingsValid {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::are_profile_settings_valid(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfAreProfileSettingsValid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_replay_stat_mission_id(&self, ) -> ResultOfGetReplayStatMissionId {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_replay_stat_mission_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetReplayStatMissionId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_tennis_mode(&self, ped_: u32) -> ResultOfIsTennisMode {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_tennis_mode(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsTennisMode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_save_array_with_size(&self, p0_: shared::MemoryBufferId,
size_: i32,
array_name_: Option<String>) -> ResultOfStartSaveArrayWithSize {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut size_ = size_;
let mut array_name_ = sdk_helpers::create_c_string_ptr(array_name_);
        let success = sdk::natives::start_save_array_with_size(
            p0_,
size_,
array_name_.as_ref().unwrap(),
        );
        let p0_ = 0;
        
        ResultOfStartSaveArrayWithSize {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_is_sniper_inverted(&self, ) -> ResultOfIsSniperInverted {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_sniper_inverted(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsSniperInverted {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_water_override_set_rippleminbumpiness(&self, min_bumpiness_: f32) -> ResultOfWaterOverrideSetRippleminbumpiness {
    unsafe {
        let mut min_bumpiness_ = min_bumpiness_;
        let success = sdk::natives::water_override_set_rippleminbumpiness(
            min_bumpiness_,
        );
        
        
        ResultOfWaterOverrideSetRippleminbumpiness {
            success,
            ret: (),
            
        }
    }
}

    fn native_tan(&self, p0_: f32) -> ResultOfTan {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::tan(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfTan {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_rain(&self, intensity_: f32) -> ResultOfSetRain {
    unsafe {
        let mut intensity_ = intensity_;
        let success = sdk::natives::set_rain(
            intensity_,
        );
        
        
        ResultOfSetRain {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_script_high_prio(&self, toggle_: bool) -> ResultOfSetScriptHighPrio {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_script_high_prio(
            toggle_,
        );
        
        
        ResultOfSetScriptHighPrio {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_pop_multiplier_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
p6_: f32,
p7_: f32,
p8_: bool,
p9_: bool) -> ResultOfAddPopMultiplierArea {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::add_pop_multiplier_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
p6_,
p7_,
p8_,
p9_,
        );
        let native_return = native_return;
        
        ResultOfAddPopMultiplierArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_plm_is_in_constrained_mode(&self, ) -> ResultOfPlmIsInConstrainedMode {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::plm_is_in_constrained_mode(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfPlmIsInConstrainedMode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_total_successful_stunt_jumps(&self, ) -> ResultOfGetTotalSuccessfulStuntJumps {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_total_successful_stunt_jumps(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetTotalSuccessfulStuntJumps {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_find_spawn_point_in_direction(&self, pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
fwd_vec_x_: f32,
fwd_vec_y_: f32,
fwd_vec_z_: f32,
distance_: f32,
spawn_point_: Option<shared::Vector3>) -> ResultOfFindSpawnPointInDirection {
    unsafe {
        let mut native_return = Default::default();
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut fwd_vec_x_ = fwd_vec_x_;
let mut fwd_vec_y_ = fwd_vec_y_;
let mut fwd_vec_z_ = fwd_vec_z_;
let mut distance_ = distance_;
let mut spawn_point_ = sdk_helpers::create_vector3_ptr(spawn_point_);
        let success = sdk::natives::find_spawn_point_in_direction(
            &mut native_return,
spawn_point_.pin_mut(),
pos_x_,
pos_y_,
pos_z_,
fwd_vec_x_,
fwd_vec_y_,
fwd_vec_z_,
distance_,
        );
        let native_return = native_return;
let spawn_point_ = sdk_helpers::read_cpp_vector3(spawn_point_);
        
        ResultOfFindSpawnPointInDirection {
            success,
            ret: native_return,
            spawn_point_
        }
    }
}

    fn native_is_auto_save_in_progress(&self, ) -> ResultOfIsAutoSaveInProgress {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_auto_save_in_progress(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsAutoSaveInProgress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_use_active_camera_for_timeslicing_centre(&self, ) -> ResultOfUseActiveCameraForTimeslicingCentre {
    unsafe {
        
        let success = sdk::natives::use_active_camera_for_timeslicing_centre(
            
        );
        
        
        ResultOfUseActiveCameraForTimeslicingCentre {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_replay_stat_value(&self, value_: i32) -> ResultOfAddReplayStatValue {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::add_replay_stat_value(
            value_,
        );
        
        
        ResultOfAddReplayStatValue {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_auto_save_off(&self, ) -> ResultOfGetIsAutoSaveOff {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_auto_save_off(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetIsAutoSaveOff {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_this_is_a_trigger_script(&self, toggle_: bool) -> ResultOfSetThisIsAtriggerScript {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_this_is_a_trigger_script(
            toggle_,
        );
        
        
        ResultOfSetThisIsAtriggerScript {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_text_label15_to_save(&self, p0_: shared::MemoryBufferId,
name_: Option<String>) -> ResultOfRegisterTextLabel15ToSave {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::register_text_label15_to_save(
            p0_,
name_.as_ref().unwrap(),
        );
        let p0_ = 0;
        
        ResultOfRegisterTextLabel15ToSave {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_has_game_installed_this_session(&self, ) -> ResultOfHasGameInstalledThisSession {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_game_installed_this_session(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfHasGameInstalledThisSession {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_dispatch_ideal_spawn_distance(&self, distance_: f32) -> ResultOfSetDispatchIdealSpawnDistance {
    unsafe {
        let mut distance_ = distance_;
        let success = sdk::natives::set_dispatch_ideal_spawn_distance(
            distance_,
        );
        
        
        ResultOfSetDispatchIdealSpawnDistance {
            success,
            ret: (),
            
        }
    }
}

    fn native_activity_feed_action_start_with_command_line_add(&self, p0_: Option<String>) -> ResultOfActivityFeedActionStartWithCommandLineAdd {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::activity_feed_action_start_with_command_line_add(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOfActivityFeedActionStartWithCommandLineAdd {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_weather_type_persist(&self, weather_type_: Option<String>) -> ResultOfSetWeatherTypePersist {
    unsafe {
        let mut weather_type_ = sdk_helpers::create_c_string_ptr(weather_type_);
        let success = sdk::natives::set_weather_type_persist(
            weather_type_.as_ref().unwrap(),
        );
        
        
        ResultOfSetWeatherTypePersist {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_restart_coord_override(&self, x_: f32,
y_: f32,
z_: f32,
heading_: f32) -> ResultOfSetRestartCoordOverride {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
        let success = sdk::natives::set_restart_coord_override(
            x_,
y_,
z_,
heading_,
        );
        
        
        ResultOfSetRestartCoordOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_next_weather_type_hash_name(&self, ) -> ResultOfGetNextWeatherTypeHashName {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_next_weather_type_hash_name(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetNextWeatherTypeHashName {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_queue_mission_repeat_load(&self, ) -> ResultOfQueueMissionRepeatLoad {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::queue_mission_repeat_load(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfQueueMissionRepeatLoad {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_absf(&self, value_: f32) -> ResultOfAbsf {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::absf(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOfAbsf {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gravity_level(&self, level_: i32) -> ResultOfSetGravityLevel {
    unsafe {
        let mut level_ = level_;
        let success = sdk::natives::set_gravity_level(
            level_,
        );
        
        
        ResultOfSetGravityLevel {
            success,
            ret: (),
            
        }
    }
}

    fn native_populate_now(&self, ) -> ResultOfPopulateNow {
    unsafe {
        
        let success = sdk::natives::populate_now(
            
        );
        
        
        ResultOfPopulateNow {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_save_data(&self, ) -> ResultOfStopSaveData {
    unsafe {
        
        let success = sdk::natives::stop_save_data(
            
        );
        
        
        ResultOfStopSaveData {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_dispatch_ideal_spawn_distance(&self, ) -> ResultOfResetDispatchIdealSpawnDistance {
    unsafe {
        
        let success = sdk::natives::reset_dispatch_ideal_spawn_distance(
            
        );
        
        
        ResultOfResetDispatchIdealSpawnDistance {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_stunt_jump_in_progress(&self, ) -> ResultOfIsStuntJumpInProgress {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_stunt_jump_in_progress(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsStuntJumpInProgress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_this_a_minigame_script(&self, ) -> ResultOfIsThisAminigameScript {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_this_a_minigame_script(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsThisAminigameScript {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_water_override_set_ripplebumpiness(&self, bumpiness_: f32) -> ResultOfWaterOverrideSetRipplebumpiness {
    unsafe {
        let mut bumpiness_ = bumpiness_;
        let success = sdk::natives::water_override_set_ripplebumpiness(
            bumpiness_,
        );
        
        
        ResultOfWaterOverrideSetRipplebumpiness {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_float_to_save(&self, p0_: shared::MemoryBufferId,
name_: Option<String>) -> ResultOfRegisterFloatToSave {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::register_float_to_save(
            p0_,
name_.as_ref().unwrap(),
        );
        let p0_ = 0;
        
        ResultOfRegisterFloatToSave {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_is_frontend_fading(&self, ) -> ResultOfIsFrontendFading {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_frontend_fading(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsFrontendFading {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_scenario_spawn_history(&self, ) -> ResultOfClearScenarioSpawnHistory {
    unsafe {
        
        let success = sdk::natives::clear_scenario_spawn_history(
            
        );
        
        
        ResultOfClearScenarioSpawnHistory {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_snow(&self, level_: f32) -> ResultOfSetSnow {
    unsafe {
        let mut level_ = level_;
        let success = sdk::natives::set_snow(
            level_,
        );
        
        
        ResultOfSetSnow {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ratio_of_closest_point_on_line(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
x3_: f32,
y3_: f32,
z3_: f32,
clamp_: bool) -> ResultOfGetRatioOfClosestPointOnLine {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut x3_ = x3_;
let mut y3_ = y3_;
let mut z3_ = z3_;
let mut clamp_ = clamp_;
        let success = sdk::natives::get_ratio_of_closest_point_on_line(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
x3_,
y3_,
z3_,
clamp_,
        );
        let native_return = native_return;
        
        ResultOfGetRatioOfClosestPointOnLine {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_prospero_version(&self, ) -> ResultOfIsProsperoVersion {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_prospero_version(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsProsperoVersion {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_replay_stat_at_index(&self, index_: i32) -> ResultOfGetReplayStatAtIndex {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
        let success = sdk::natives::get_replay_stat_at_index(
            &mut native_return,
index_,
        );
        let native_return = native_return;
        
        ResultOfGetReplayStatAtIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_register_text_label31_to_save(&self, p0_: shared::MemoryBufferId,
name_: Option<String>) -> ResultOfRegisterTextLabel31ToSave {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::register_text_label31_to_save(
            p0_,
name_.as_ref().unwrap(),
        );
        let p0_ = 0;
        
        ResultOfRegisterTextLabel31ToSave {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_get_projectile_of_projectile_type_within_distance(&self, ped_: u32,
weapon_hash_: u32,
distance_: f32,
out_coords_: Option<shared::Vector3>,
out_projectile_: u32,
p5_: bool) -> ResultOfGetProjectileOfProjectileTypeWithinDistance {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut distance_ = distance_;
let mut out_coords_ = sdk_helpers::create_vector3_ptr(out_coords_);
let mut out_projectile_ = out_projectile_;
let mut p5_ = p5_;
        let success = sdk::natives::get_projectile_of_projectile_type_within_distance(
            &mut native_return,
out_coords_.pin_mut(),
&mut out_projectile_,
ped_,
weapon_hash_,
distance_,
p5_,
        );
        let native_return = native_return;
let out_coords_ = sdk_helpers::read_cpp_vector3(out_coords_);
let out_projectile_ = out_projectile_;
        
        ResultOfGetProjectileOfProjectileTypeWithinDistance {
            success,
            ret: native_return,
            out_coords_,
out_projectile_
        }
    }
}

    fn native_get_onscreen_keyboard_result(&self, ) -> ResultOfGetOnscreenKeyboardResult {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
        let success = sdk::natives::get_onscreen_keyboard_result(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetOnscreenKeyboardResult {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_shoot_single_bullet_between_coords(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
damage_: i32,
p7_: bool,
weapon_hash_: u32,
owner_ped_: u32,
is_audible_: bool,
is_invisible_: bool,
speed_: f32) -> ResultOfShootSingleBulletBetweenCoords {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut damage_ = damage_;
let mut p7_ = p7_;
let mut weapon_hash_ = weapon_hash_;
let mut owner_ped_ = owner_ped_;
let mut is_audible_ = is_audible_;
let mut is_invisible_ = is_invisible_;
let mut speed_ = speed_;
        let success = sdk::natives::shoot_single_bullet_between_coords(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
damage_,
p7_,
weapon_hash_,
owner_ped_,
is_audible_,
is_invisible_,
speed_,
        );
        
        
        ResultOfShootSingleBulletBetweenCoords {
            success,
            ret: (),
            
        }
    }
}

    fn native_atan2(&self, p0_: f32,
p1_: f32) -> ResultOfAtan2 {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::atan2(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfAtan2 {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_activity_feed_post(&self, ) -> ResultOfActivityFeedPost {
    unsafe {
        
        let success = sdk::natives::activity_feed_post(
            
        );
        
        
        ResultOfActivityFeedPost {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_memory_card_in_use(&self, ) -> ResultOfIsMemoryCardInUse {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_memory_card_in_use(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsMemoryCardInUse {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_random_weather_type(&self, ) -> ResultOfSetRandomWeatherType {
    unsafe {
        
        let success = sdk::natives::set_random_weather_type(
            
        );
        
        
        ResultOfSetRandomWeatherType {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_allocated_stack_size(&self, ) -> ResultOfGetAllocatedStackSize {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_allocated_stack_size(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetAllocatedStackSize {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ground_z_and_normal_for3d_coord(&self, x_: f32,
y_: f32,
z_: f32,
ground_z_: f32,
normal_: Option<shared::Vector3>) -> ResultOfGetGroundZandNormalFor3dCoord {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut ground_z_ = ground_z_;
let mut normal_ = sdk_helpers::create_vector3_ptr(normal_);
        let success = sdk::natives::get_ground_z_and_normal_for3d_coord(
            &mut native_return,
&mut ground_z_,
normal_.pin_mut(),
x_,
y_,
z_,
        );
        let native_return = native_return;
let ground_z_ = ground_z_;
let normal_ = sdk_helpers::read_cpp_vector3(normal_);
        
        ResultOfGetGroundZandNormalFor3dCoord {
            success,
            ret: native_return,
            ground_z_,
normal_
        }
    }
}

    fn native_inform_code_of_content_id_of_current_ugc_mission(&self, p0_: Option<String>) -> ResultOfInformCodeOfContentIdOfCurrentUgcMission {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::inform_code_of_content_id_of_current_ugc_mission(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOfInformCodeOfContentIdOfCurrentUgcMission {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_coords_of_projectile_type_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
projectile_hash_: u32,
projectile_pos_: Option<shared::Vector3>,
owned_by_player_: bool) -> ResultOfGetCoordsOfProjectileTypeInArea {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut projectile_hash_ = projectile_hash_;
let mut projectile_pos_ = sdk_helpers::create_vector3_ptr(projectile_pos_);
let mut owned_by_player_ = owned_by_player_;
        let success = sdk::natives::get_coords_of_projectile_type_in_area(
            &mut native_return,
projectile_pos_.pin_mut(),
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
projectile_hash_,
owned_by_player_,
        );
        let native_return = native_return;
let projectile_pos_ = sdk_helpers::read_cpp_vector3(projectile_pos_);
        
        ResultOfGetCoordsOfProjectileTypeInArea {
            success,
            ret: native_return,
            projectile_pos_
        }
    }
}

    fn native_set_bits_in_range(&self, unk_var_: i32,
range_start_: i32,
range_end_: i32,
p3_: i32) -> ResultOfSetBitsInRange {
    unsafe {
        let mut unk_var_ = unk_var_;
let mut range_start_ = range_start_;
let mut range_end_ = range_end_;
let mut p3_ = p3_;
        let success = sdk::natives::set_bits_in_range(
            &mut unk_var_,
range_start_,
range_end_,
p3_,
        );
        let unk_var_ = unk_var_;
        
        ResultOfSetBitsInRange {
            success,
            ret: (),
            unk_var_
        }
    }
}

    fn native_script_race_get_player_split_time(&self, player_: u32,
p1_: i32,
p2_: i32) -> ResultOfScriptRaceGetPlayerSplitTime {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::script_race_get_player_split_time(
            &mut native_return,
&mut p1_,
&mut p2_,
player_,
        );
        let native_return = native_return;
let p1_ = p1_;
let p2_ = p2_;
        
        ResultOfScriptRaceGetPlayerSplitTime {
            success,
            ret: native_return,
            p1_,
p2_
        }
    }
}

    fn native_play_tennis_dive_anim(&self, ped_: u32,
p1_: i32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: bool) -> ResultOfPlayTennisDiveAnim {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::play_tennis_dive_anim(
            ped_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOfPlayTennisDiveAnim {
            success,
            ret: (),
            
        }
    }
}

    fn native_activity_feed_large_image_url(&self, p0_: Option<String>) -> ResultOfActivityFeedLargeImageUrl {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::activity_feed_large_image_url(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOfActivityFeedLargeImageUrl {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_dispatch_spawn_angled_blocking_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32) -> ResultOfAddDispatchSpawnAngledBlockingArea {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
        let success = sdk::natives::add_dispatch_spawn_angled_blocking_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
        );
        let native_return = native_return;
        
        ResultOfAddDispatchSpawnAngledBlockingArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_script_is_safe_for_network_game(&self, ) -> ResultOfNetworkSetScriptIsSafeForNetworkGame {
    unsafe {
        
        let success = sdk::natives::network_set_script_is_safe_for_network_game(
            
        );
        
        
        ResultOfNetworkSetScriptIsSafeForNetworkGame {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_end_user_benchmark(&self, ) -> ResultOfStartEndUserBenchmark {
    unsafe {
        
        let success = sdk::natives::start_end_user_benchmark(
            
        );
        
        
        ResultOfStartEndUserBenchmark {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_bit(&self, address_: i32,
offset_: i32) -> ResultOfSetBit {
    unsafe {
        let mut address_ = address_;
let mut offset_ = offset_;
        let success = sdk::natives::set_bit(
            &mut address_,
offset_,
        );
        let address_ = address_;
        
        ResultOfSetBit {
            success,
            ret: (),
            address_
        }
    }
}

    fn native_clear_area_leave_vehicle_health(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
p4_: bool,
p5_: bool,
p6_: bool,
p7_: bool) -> ResultOfClearAreaLeaveVehicleHealth {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::clear_area_leave_vehicle_health(
            x_,
y_,
z_,
radius_,
p4_,
p5_,
p6_,
p7_,
        );
        
        
        ResultOfClearAreaLeaveVehicleHealth {
            success,
            ret: (),
            
        }
    }
}

    fn native_unload_all_cloud_hats(&self, ) -> ResultOfUnloadAllCloudHats {
    unsafe {
        
        let success = sdk::natives::unload_all_cloud_hats(
            
        );
        
        
        ResultOfUnloadAllCloudHats {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_rain_level(&self, ) -> ResultOfGetRainLevel {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_rain_level(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetRainLevel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_player_in_animal_form(&self, ) -> ResultOfGetIsPlayerInAnimalForm {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_player_in_animal_form(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetIsPlayerInAnimalForm {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_random_event_flag(&self, toggle_: bool) -> ResultOfSetRandomEventFlag {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_random_event_flag(
            toggle_,
        );
        
        
        ResultOfSetRandomEventFlag {
            success,
            ret: (),
            
        }
    }
}

    fn native_activity_feed_add_int_to_caption(&self, p0_: i32) -> ResultOfActivityFeedAddIntToCaption {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::activity_feed_add_int_to_caption(
            p0_,
        );
        
        
        ResultOfActivityFeedAddIntToCaption {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_bullet_impacted_in_area(&self, x_: f32,
y_: f32,
z_: f32,
p3_: f32,
p4_: bool,
p5_: bool) -> ResultOfHasBulletImpactedInArea {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::has_bullet_impacted_in_area(
            &mut native_return,
x_,
y_,
z_,
p3_,
p4_,
p5_,
        );
        let native_return = native_return;
        
        ResultOfHasBulletImpactedInArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_num_successful_stunt_jumps(&self, ) -> ResultOfGetNumSuccessfulStuntJumps {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_num_successful_stunt_jumps(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetNumSuccessfulStuntJumps {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_block_dispatch_service_resource_creation(&self, dispatch_service_: i32,
toggle_: bool) -> ResultOfBlockDispatchServiceResourceCreation {
    unsafe {
        let mut dispatch_service_ = dispatch_service_;
let mut toggle_ = toggle_;
        let success = sdk::natives::block_dispatch_service_resource_creation(
            dispatch_service_,
toggle_,
        );
        
        
        ResultOfBlockDispatchServiceResourceCreation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_instance_priority_mode(&self, p0_: i32) -> ResultOfSetInstancePriorityMode {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_instance_priority_mode(
            p0_,
        );
        
        
        ResultOfSetInstancePriorityMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_game_timer(&self, ) -> ResultOfGetGameTimer {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_game_timer(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetGameTimer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_is_repeating_a_mission(&self, toggle_: bool) -> ResultOfSetPlayerIsRepeatingAmission {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_is_repeating_a_mission(
            toggle_,
        );
        
        
        ResultOfSetPlayerIsRepeatingAmission {
            success,
            ret: (),
            
        }
    }
}

    fn native_terminate_all_scripts_with_this_name(&self, script_name_: Option<String>) -> ResultOfTerminateAllScriptsWithThisName {
    unsafe {
        let mut script_name_ = sdk_helpers::create_c_string_ptr(script_name_);
        let success = sdk::natives::terminate_all_scripts_with_this_name(
            script_name_.as_ref().unwrap(),
        );
        
        
        ResultOfTerminateAllScriptsWithThisName {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ground_z_excluding_objects_for3d_coord(&self, x_: f32,
y_: f32,
z_: f32,
ground_z_: f32,
p4_: bool,
p5_: bool) -> ResultOfGetGroundZexcludingObjectsFor3dCoord {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut ground_z_ = ground_z_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::get_ground_z_excluding_objects_for3d_coord(
            &mut native_return,
&mut ground_z_,
x_,
y_,
z_,
p4_,
p5_,
        );
        let native_return = native_return;
let ground_z_ = ground_z_;
        
        ResultOfGetGroundZexcludingObjectsFor3dCoord {
            success,
            ret: native_return,
            ground_z_
        }
    }
}

    fn native_is_aussie_version(&self, ) -> ResultOfIsAussieVersion {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_aussie_version(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsAussieVersion {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_water_override_set_ripplemaxbumpiness(&self, max_bumpiness_: f32) -> ResultOfWaterOverrideSetRipplemaxbumpiness {
    unsafe {
        let mut max_bumpiness_ = max_bumpiness_;
        let success = sdk::natives::water_override_set_ripplemaxbumpiness(
            max_bumpiness_,
        );
        
        
        ResultOfWaterOverrideSetRipplemaxbumpiness {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_commandline_end_user_benchmark(&self, ) -> ResultOfIsCommandlineEndUserBenchmark {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_commandline_end_user_benchmark(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsCommandlineEndUserBenchmark {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_size_of_save_data(&self, p0_: bool) -> ResultOfGetSizeOfSaveData {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_size_of_save_data(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfGetSizeOfSaveData {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_point_area_overlap(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32,
p8_: i32,
p9_: i32,
p10_: i32,
p11_: i32,
p12_: i32,
p13_: i32) -> ResultOfGetPointAreaOverlap {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
let mut p12_ = p12_;
let mut p13_ = p13_;
        let success = sdk::natives::get_point_area_overlap(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
p11_,
p12_,
p13_,
        );
        let native_return = native_return;
        
        ResultOfGetPointAreaOverlap {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_forced_jump_this_frame(&self, player_: u32) -> ResultOfSetForcedJumpThisFrame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::set_forced_jump_this_frame(
            player_,
        );
        
        
        ResultOfSetForcedJumpThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_replay_stats(&self, ) -> ResultOfEndReplayStats {
    unsafe {
        
        let success = sdk::natives::end_replay_stats(
            
        );
        
        
        ResultOfEndReplayStats {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_restart_coord_override(&self, ) -> ResultOfClearRestartCoordOverride {
    unsafe {
        
        let success = sdk::natives::clear_restart_coord_override(
            
        );
        
        
        ResultOfClearRestartCoordOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_mission_flag(&self, ) -> ResultOfGetMissionFlag {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_mission_flag(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetMissionFlag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_override_weather(&self, weather_type_: Option<String>) -> ResultOfSetOverrideWeather {
    unsafe {
        let mut weather_type_ = sdk_helpers::create_c_string_ptr(weather_type_);
        let success = sdk::natives::set_override_weather(
            weather_type_.as_ref().unwrap(),
        );
        
        
        ResultOfSetOverrideWeather {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_save_house_details_after_successful_load(&self, p0_: Option<shared::Vector3>,
p1_: f32,
fade_in_after_load_: bool,
p3_: bool) -> ResultOfGetSaveHouseDetailsAfterSuccessfulLoad {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_vector3_ptr(p0_);
let mut p1_ = p1_;
let mut fade_in_after_load_ = fade_in_after_load_;
let mut p3_ = p3_;
        let success = sdk::natives::get_save_house_details_after_successful_load(
            &mut native_return,
p0_.pin_mut(),
&mut p1_,
&mut fade_in_after_load_,
&mut p3_,
        );
        let native_return = native_return;
let p0_ = sdk_helpers::read_cpp_vector3(p0_);
let p1_ = p1_;
let fade_in_after_load_ = fade_in_after_load_;
let p3_ = p3_;
        
        ResultOfGetSaveHouseDetailsAfterSuccessfulLoad {
            success,
            ret: native_return,
            p0_,
p1_,
fade_in_after_load_,
p3_
        }
    }
}

    fn native_disable_stunt_jump_set(&self, p0_: i32) -> ResultOfDisableStuntJumpSet {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::disable_stunt_jump_set(
            p0_,
        );
        
        
        ResultOfDisableStuntJumpSet {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_area(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
p4_: bool,
ignore_cop_cars_: bool,
ignore_objects_: bool,
p7_: bool) -> ResultOfClearArea {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut p4_ = p4_;
let mut ignore_cop_cars_ = ignore_cop_cars_;
let mut ignore_objects_ = ignore_objects_;
let mut p7_ = p7_;
        let success = sdk::natives::clear_area(
            x_,
y_,
z_,
radius_,
p4_,
ignore_cop_cars_,
ignore_objects_,
p7_,
        );
        
        
        ResultOfClearArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_area_occupied(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: bool,
p7_: bool,
p8_: bool,
p9_: bool,
p10_: bool,
p11_: i32,
p12_: bool) -> ResultOfIsAreaOccupied {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
let mut p12_ = p12_;
        let success = sdk::natives::is_area_occupied(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
p11_,
p12_,
        );
        let native_return = native_return;
        
        ResultOfIsAreaOccupied {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_explosive_ammo_this_frame(&self, player_: u32) -> ResultOfSetExplosiveAmmoThisFrame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::set_explosive_ammo_this_frame(
            player_,
        );
        
        
        ResultOfSetExplosiveAmmoThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_action_manager_enable_action(&self, hash_: u32,
enable_: bool) -> ResultOfActionManagerEnableAction {
    unsafe {
        let mut hash_ = hash_;
let mut enable_ = enable_;
        let success = sdk::natives::action_manager_enable_action(
            hash_,
enable_,
        );
        
        
        ResultOfActionManagerEnableAction {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_orbis_version(&self, ) -> ResultOfIsOrbisVersion {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_orbis_version(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsOrbisVersion {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_register_int64_to_save(&self, p0_: shared::MemoryBufferId,
name_: Option<String>) -> ResultOfRegisterInt64ToSave {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::register_int64_to_save(
            p0_,
name_.as_ref().unwrap(),
        );
        let p0_ = 0;
        
        ResultOfRegisterInt64ToSave {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_unload_cloud_hat(&self, name_: Option<String>,
p1_: f32) -> ResultOfUnloadCloudHat {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut p1_ = p1_;
        let success = sdk::natives::unload_cloud_hat(
            name_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOfUnloadCloudHat {
            success,
            ret: (),
            
        }
    }
}

    fn native_water_override_set_shorewavemaxamplitude(&self, max_amplitude_: f32) -> ResultOfWaterOverrideSetShorewavemaxamplitude {
    unsafe {
        let mut max_amplitude_ = max_amplitude_;
        let success = sdk::natives::water_override_set_shorewavemaxamplitude(
            max_amplitude_,
        );
        
        
        ResultOfWaterOverrideSetShorewavemaxamplitude {
            success,
            ret: (),
            
        }
    }
}

    fn native_water_override_fade_in(&self, p0_: f32) -> ResultOfWaterOverrideFadeIn {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::water_override_fade_in(
            p0_,
        );
        
        
        ResultOfWaterOverrideFadeIn {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_wind_speed(&self, ) -> ResultOfGetWindSpeed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_wind_speed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetWindSpeed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_save_data(&self, p0_: shared::MemoryBufferId,
p1_: i32,
p2_: bool) -> ResultOfStartSaveData {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::start_save_data(
            p0_,
p1_,
p2_,
        );
        let p0_ = 0;
        
        ResultOfStartSaveData {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_atan(&self, p0_: f32) -> ResultOfAtan {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::atan(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfAtan {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_this_script_can_be_paused(&self, toggle_: bool) -> ResultOfSetThisScriptCanBePaused {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_this_script_can_be_paused(
            toggle_,
        );
        
        
        ResultOfSetThisScriptCanBePaused {
            success,
            ret: (),
            
        }
    }
}

    fn native_plm_get_constrained_duration_ms(&self, ) -> ResultOfPlmGetConstrainedDurationMs {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::plm_get_constrained_duration_ms(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfPlmGetConstrainedDurationMs {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_wind(&self, speed_: f32) -> ResultOfSetWind {
    unsafe {
        let mut speed_ = speed_;
        let success = sdk::natives::set_wind(
            speed_,
        );
        
        
        ResultOfSetWind {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_dispatch_spawn_blocking_areas(&self, ) -> ResultOfResetDispatchSpawnBlockingAreas {
    unsafe {
        
        let success = sdk::natives::reset_dispatch_spawn_blocking_areas(
            
        );
        
        
        ResultOfResetDispatchSpawnBlockingAreas {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_position_occupied(&self, x_: f32,
y_: f32,
z_: f32,
range_: f32,
p4_: bool,
check_vehicles_: bool,
check_peds_: bool,
p7_: bool,
p8_: bool,
ignore_entity_: u32,
p10_: bool) -> ResultOfIsPositionOccupied {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut range_ = range_;
let mut p4_ = p4_;
let mut check_vehicles_ = check_vehicles_;
let mut check_peds_ = check_peds_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut ignore_entity_ = ignore_entity_;
let mut p10_ = p10_;
        let success = sdk::natives::is_position_occupied(
            &mut native_return,
x_,
y_,
z_,
range_,
p4_,
check_vehicles_,
check_peds_,
p7_,
p8_,
ignore_entity_,
p10_,
        );
        let native_return = native_return;
        
        ResultOfIsPositionOccupied {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_incident_requested_units(&self, incident_id_: i32,
dispatch_service_: i32,
num_units_: i32) -> ResultOfSetIncidentRequestedUnits {
    unsafe {
        let mut incident_id_ = incident_id_;
let mut dispatch_service_ = dispatch_service_;
let mut num_units_ = num_units_;
        let success = sdk::natives::set_incident_requested_units(
            incident_id_,
dispatch_service_,
num_units_,
        );
        
        
        ResultOfSetIncidentRequestedUnits {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_pop_multiplier_area(&self, id_: i32,
p1_: bool) -> ResultOfRemovePopMultiplierArea {
    unsafe {
        let mut id_ = id_;
let mut p1_ = p1_;
        let success = sdk::natives::remove_pop_multiplier_area(
            id_,
p1_,
        );
        
        
        ResultOfRemovePopMultiplierArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_base_element_location_from_metadata_block(&self, p0_: shared::MemoryBufferId,
p1_: shared::MemoryBufferId,
p2_: i32,
p3_: bool) -> ResultOfGetBaseElementLocationFromMetadataBlock {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::get_base_element_location_from_metadata_block(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
let p0_ = 0;
let p1_ = 0;
        
        ResultOfGetBaseElementLocationFromMetadataBlock {
            success,
            ret: native_return,
            p0_,
p1_
        }
    }
}

    fn native_clear_tactical_nav_mesh_points(&self, ) -> ResultOfClearTacticalNavMeshPoints {
    unsafe {
        
        let success = sdk::natives::clear_tactical_nav_mesh_points(
            
        );
        
        
        ResultOfClearTacticalNavMeshPoints {
            success,
            ret: (),
            
        }
    }
}

    fn native_water_override_set_oceanwavemaxamplitude(&self, max_amplitude_: f32) -> ResultOfWaterOverrideSetOceanwavemaxamplitude {
    unsafe {
        let mut max_amplitude_ = max_amplitude_;
        let success = sdk::natives::water_override_set_oceanwavemaxamplitude(
            max_amplitude_,
        );
        
        
        ResultOfWaterOverrideSetOceanwavemaxamplitude {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_credits_fade_out_with_screen(&self, toggle_: bool) -> ResultOfSetCreditsFadeOutWithScreen {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_credits_fade_out_with_screen(
            toggle_,
        );
        
        
        ResultOfSetCreditsFadeOutWithScreen {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_tactical_nav_mesh_point(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfAddTacticalNavMeshPoint {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::add_tactical_nav_mesh_point(
            x_,
y_,
z_,
        );
        
        
        ResultOfAddTacticalNavMeshPoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_japanese_version(&self, ) -> ResultOfIsJapaneseVersion {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_japanese_version(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsJapaneseVersion {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_water_override_set_shorewaveamplitude(&self, amplitude_: f32) -> ResultOfWaterOverrideSetShorewaveamplitude {
    unsafe {
        let mut amplitude_ = amplitude_;
        let success = sdk::natives::water_override_set_shorewaveamplitude(
            amplitude_,
        );
        
        
        ResultOfWaterOverrideSetShorewaveamplitude {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_credits_active(&self, toggle_: bool) -> ResultOfSetCreditsActive {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_credits_active(
            toggle_,
        );
        
        
        ResultOfSetCreditsActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_this_script_can_remove_blips_created_by_any_script(&self, toggle_: bool) -> ResultOfSetThisScriptCanRemoveBlipsCreatedByAnyScript {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_this_script_can_remove_blips_created_by_any_script(
            toggle_,
        );
        
        
        ResultOfSetThisScriptCanRemoveBlipsCreatedByAnyScript {
            success,
            ret: (),
            
        }
    }
}

    fn native_water_override_set_rippledisturb(&self, disturb_: f32) -> ResultOfWaterOverrideSetRippledisturb {
    unsafe {
        let mut disturb_ = disturb_;
        let success = sdk::natives::water_override_set_rippledisturb(
            disturb_,
        );
        
        
        ResultOfWaterOverrideSetRippledisturb {
            success,
            ret: (),
            
        }
    }
}

    fn native_activity_feed_online_played_with_post(&self, p0_: Option<String>) -> ResultOfActivityFeedOnlinePlayedWithPost {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::activity_feed_online_played_with_post(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOfActivityFeedOnlinePlayedWithPost {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_stunt_jump_angled(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
radius1_: f32,
x3_: f32,
y3_: f32,
z3_: f32,
x4_: f32,
y4_: f32,
z4_: f32,
radius2_: f32,
cam_x_: f32,
cam_y_: f32,
cam_z_: f32,
p17_: i32,
p18_: i32,
p19_: i32) -> ResultOfAddStuntJumpAngled {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut radius1_ = radius1_;
let mut x3_ = x3_;
let mut y3_ = y3_;
let mut z3_ = z3_;
let mut x4_ = x4_;
let mut y4_ = y4_;
let mut z4_ = z4_;
let mut radius2_ = radius2_;
let mut cam_x_ = cam_x_;
let mut cam_y_ = cam_y_;
let mut cam_z_ = cam_z_;
let mut p17_ = p17_;
let mut p18_ = p18_;
let mut p19_ = p19_;
        let success = sdk::natives::add_stunt_jump_angled(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
radius1_,
x3_,
y3_,
z3_,
x4_,
y4_,
z4_,
radius2_,
cam_x_,
cam_y_,
cam_z_,
p17_,
p18_,
p19_,
        );
        let native_return = native_return;
        
        ResultOfAddStuntJumpAngled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_area_of_peds(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
flags_: i32) -> ResultOfClearAreaOfPeds {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut flags_ = flags_;
        let success = sdk::natives::clear_area_of_peds(
            x_,
y_,
z_,
radius_,
flags_,
        );
        
        
        ResultOfClearAreaOfPeds {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_save_struct_with_size(&self, p0_: shared::MemoryBufferId,
size_: i32,
struct_name_: Option<String>) -> ResultOfStartSaveStructWithSize {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut size_ = size_;
let mut struct_name_ = sdk_helpers::create_c_string_ptr(struct_name_);
        let success = sdk::natives::start_save_struct_with_size(
            p0_,
size_,
struct_name_.as_ref().unwrap(),
        );
        let p0_ = 0;
        
        ResultOfStartSaveStructWithSize {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_shoot_single_bullet_between_coords_ignore_entity_new(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
damage_: i32,
p7_: bool,
weapon_hash_: u32,
owner_ped_: u32,
is_audible_: bool,
is_invisible_: bool,
speed_: f32,
entity_: u32,
p14_: bool,
p15_: bool,
target_entity_: u32,
p17_: bool,
p18_: i32,
p19_: i32,
p20_: i32) -> ResultOfShootSingleBulletBetweenCoordsIgnoreEntityNew {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut damage_ = damage_;
let mut p7_ = p7_;
let mut weapon_hash_ = weapon_hash_;
let mut owner_ped_ = owner_ped_;
let mut is_audible_ = is_audible_;
let mut is_invisible_ = is_invisible_;
let mut speed_ = speed_;
let mut entity_ = entity_;
let mut p14_ = p14_;
let mut p15_ = p15_;
let mut target_entity_ = target_entity_;
let mut p17_ = p17_;
let mut p18_ = p18_;
let mut p19_ = p19_;
let mut p20_ = p20_;
        let success = sdk::natives::shoot_single_bullet_between_coords_ignore_entity_new(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
damage_,
p7_,
weapon_hash_,
owner_ped_,
is_audible_,
is_invisible_,
speed_,
entity_,
p14_,
p15_,
target_entity_,
p17_,
p18_,
p19_,
p20_,
        );
        
        
        ResultOfShootSingleBulletBetweenCoordsIgnoreEntityNew {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_save_house(&self, x_: f32,
y_: f32,
z_: f32,
p3_: f32,
p4_: Option<String>,
p5_: i32,
p6_: i32) -> ResultOfRegisterSaveHouse {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut p4_ = sdk_helpers::create_c_string_ptr(p4_);
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::register_save_house(
            &mut native_return,
x_,
y_,
z_,
p3_,
p4_.as_ref().unwrap(),
p5_,
p6_,
        );
        let native_return = native_return;
        
        ResultOfRegisterSaveHouse {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_game_state_playing(&self, ) -> ResultOfForceGameStatePlaying {
    unsafe {
        
        let success = sdk::natives::force_game_state_playing(
            
        );
        
        
        ResultOfForceGameStatePlaying {
            success,
            ret: (),
            
        }
    }
}

    fn native_water_override_fade_out(&self, p0_: f32) -> ResultOfWaterOverrideFadeOut {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::water_override_fade_out(
            p0_,
        );
        
        
        ResultOfWaterOverrideFadeOut {
            success,
            ret: (),
            
        }
    }
}

    fn native_water_override_set_shorewaveminamplitude(&self, min_amplitude_: f32) -> ResultOfWaterOverrideSetShorewaveminamplitude {
    unsafe {
        let mut min_amplitude_ = min_amplitude_;
        let success = sdk::natives::water_override_set_shorewaveminamplitude(
            min_amplitude_,
        );
        
        
        ResultOfWaterOverrideSetShorewaveminamplitude {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mission_flag(&self, toggle_: bool) -> ResultOfSetMissionFlag {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_mission_flag(
            toggle_,
        );
        
        
        ResultOfSetMissionFlag {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_profile_setting(&self, profile_setting_: i32) -> ResultOfGetProfileSetting {
    unsafe {
        let mut native_return = Default::default();
let mut profile_setting_ = profile_setting_;
        let success = sdk::natives::get_profile_setting(
            &mut native_return,
profile_setting_,
        );
        let native_return = native_return;
        
        ResultOfGetProfileSetting {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_scarlett_version(&self, ) -> ResultOfIsScarlettVersion {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_scarlett_version(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsScarlettVersion {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_water_override_set_strength(&self, strength_: f32) -> ResultOfWaterOverrideSetStrength {
    unsafe {
        let mut strength_ = strength_;
        let success = sdk::natives::water_override_set_strength(
            strength_,
        );
        
        
        ResultOfWaterOverrideSetStrength {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_snow_level(&self, ) -> ResultOfGetSnowLevel {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_snow_level(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetSnowLevel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_instance_priority_hint(&self, flag_: i32) -> ResultOfSetInstancePriorityHint {
    unsafe {
        let mut flag_ = flag_;
        let success = sdk::natives::set_instance_priority_hint(
            flag_,
        );
        
        
        ResultOfSetInstancePriorityHint {
            success,
            ret: (),
            
        }
    }
}

    fn native_cleanup_async_install(&self, ) -> ResultOfCleanupAsyncInstall {
    unsafe {
        
        let success = sdk::natives::cleanup_async_install(
            
        );
        
        
        ResultOfCleanupAsyncInstall {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_end_user_benchmark(&self, ) -> ResultOfStopEndUserBenchmark {
    unsafe {
        
        let success = sdk::natives::stop_end_user_benchmark(
            
        );
        
        
        ResultOfStopEndUserBenchmark {
            success,
            ret: (),
            
        }
    }
}

    fn native_asin(&self, p0_: f32) -> ResultOfAsin {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::asin(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfAsin {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_hospital_restart(&self, hospital_index_: i32,
toggle_: bool) -> ResultOfDisableHospitalRestart {
    unsafe {
        let mut hospital_index_ = hospital_index_;
let mut toggle_ = toggle_;
        let success = sdk::natives::disable_hospital_restart(
            hospital_index_,
toggle_,
        );
        
        
        ResultOfDisableHospitalRestart {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_incident_valid(&self, incident_id_: i32) -> ResultOfIsIncidentValid {
    unsafe {
        let mut native_return = Default::default();
let mut incident_id_ = incident_id_;
        let success = sdk::natives::is_incident_valid(
            &mut native_return,
incident_id_,
        );
        let native_return = native_return;
        
        ResultOfIsIncidentValid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_register_bool_to_save(&self, p0_: shared::MemoryBufferId,
name_: Option<String>) -> ResultOfRegisterBoolToSave {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::register_bool_to_save(
            p0_,
name_.as_ref().unwrap(),
        );
        let p0_ = 0;
        
        ResultOfRegisterBoolToSave {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_get_ground_z_for3d_coord(&self, x_: f32,
y_: f32,
z_: f32,
ground_z_: f32,
ignore_water_: bool,
p5_: bool) -> ResultOfGetGroundZfor3dCoord {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut ground_z_ = ground_z_;
let mut ignore_water_ = ignore_water_;
let mut p5_ = p5_;
        let success = sdk::natives::get_ground_z_for3d_coord(
            &mut native_return,
&mut ground_z_,
x_,
y_,
z_,
ignore_water_,
p5_,
        );
        let native_return = native_return;
let ground_z_ = ground_z_;
        
        ResultOfGetGroundZfor3dCoord {
            success,
            ret: native_return,
            ground_z_
        }
    }
}

    fn native_set_save_menu_active(&self, ignore_vehicle_: bool) -> ResultOfSetSaveMenuActive {
    unsafe {
        let mut ignore_vehicle_ = ignore_vehicle_;
        let success = sdk::natives::set_save_menu_active(
            ignore_vehicle_,
        );
        
        
        ResultOfSetSaveMenuActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_string_null_or_empty(&self, string_: Option<String>) -> ResultOfIsStringNullOrEmpty {
    unsafe {
        let mut native_return = Default::default();
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::is_string_null_or_empty(
            &mut native_return,
string_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfIsStringNullOrEmpty {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_display_onscreen_keyboard_with_longer_initial_string(&self, p0_: i32,
window_title_: Option<String>,
p2_: shared::MemoryBufferId,
default_text_: Option<String>,
default_concat1_: Option<String>,
default_concat2_: Option<String>,
default_concat3_: Option<String>,
default_concat4_: Option<String>,
default_concat5_: Option<String>,
default_concat6_: Option<String>,
default_concat7_: Option<String>,
max_input_length_: i32) -> ResultOfDisplayOnscreenKeyboardWithLongerInitialString {
    unsafe {
        let mut p0_ = p0_;
let mut window_title_ = sdk_helpers::create_c_string_ptr(window_title_);
let mut p2_ = self.memory_buffers.borrow_mut().get_mut_ptr(p2_) as *mut c_void;
let mut default_text_ = sdk_helpers::create_c_string_ptr(default_text_);
let mut default_concat1_ = sdk_helpers::create_c_string_ptr(default_concat1_);
let mut default_concat2_ = sdk_helpers::create_c_string_ptr(default_concat2_);
let mut default_concat3_ = sdk_helpers::create_c_string_ptr(default_concat3_);
let mut default_concat4_ = sdk_helpers::create_c_string_ptr(default_concat4_);
let mut default_concat5_ = sdk_helpers::create_c_string_ptr(default_concat5_);
let mut default_concat6_ = sdk_helpers::create_c_string_ptr(default_concat6_);
let mut default_concat7_ = sdk_helpers::create_c_string_ptr(default_concat7_);
let mut max_input_length_ = max_input_length_;
        let success = sdk::natives::display_onscreen_keyboard_with_longer_initial_string(
            p2_,
p0_,
window_title_.as_ref().unwrap(),
default_text_.as_ref().unwrap(),
default_concat1_.as_ref().unwrap(),
default_concat2_.as_ref().unwrap(),
default_concat3_.as_ref().unwrap(),
default_concat4_.as_ref().unwrap(),
default_concat5_.as_ref().unwrap(),
default_concat6_.as_ref().unwrap(),
default_concat7_.as_ref().unwrap(),
max_input_length_,
        );
        let p2_ = 0;
        
        ResultOfDisplayOnscreenKeyboardWithLongerInitialString {
            success,
            ret: (),
            p2_
        }
    }
}

    fn native_get_index_of_current_level(&self, ) -> ResultOfGetIndexOfCurrentLevel {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_index_of_current_level(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetIndexOfCurrentLevel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ps3_version(&self, ) -> ResultOfIsPs3Version {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_ps3_version(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsPs3Version {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_weather_type_persist(&self, ) -> ResultOfClearWeatherTypePersist {
    unsafe {
        
        let success = sdk::natives::clear_weather_type_persist(
            
        );
        
        
        ResultOfClearWeatherTypePersist {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_city_density(&self, ) -> ResultOfGetCityDensity {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_city_density(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetCityDensity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_dispatch_spawn_location(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfSetDispatchSpawnLocation {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_dispatch_spawn_location(
            x_,
y_,
z_,
        );
        
        
        ResultOfSetDispatchSpawnLocation {
            success,
            ret: (),
            
        }
    }
}

    fn native_are_credits_running(&self, ) -> ResultOfAreCreditsRunning {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::are_credits_running(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfAreCreditsRunning {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_hash_key(&self, string_: Option<String>) -> ResultOfGetHashKey {
    unsafe {
        let mut native_return = Default::default();
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::get_hash_key(
            &mut native_return,
string_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfGetHashKey {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ideal_spawn_distance_for_incident(&self, incident_id_: i32,
p1_: f32) -> ResultOfSetIdealSpawnDistanceForIncident {
    unsafe {
        let mut incident_id_ = incident_id_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ideal_spawn_distance_for_incident(
            incident_id_,
p1_,
        );
        
        
        ResultOfSetIdealSpawnDistanceForIncident {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_random_event_flag(&self, ) -> ResultOfGetRandomEventFlag {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_random_event_flag(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetRandomEventFlag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_should_use_metric_measurements(&self, ) -> ResultOfShouldUseMetricMeasurements {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::should_use_metric_measurements(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfShouldUseMetricMeasurements {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_random_int_in_range(&self, start_range_: i32,
end_range_: i32) -> ResultOfGetRandomIntInRange {
    unsafe {
        let mut native_return = Default::default();
let mut start_range_ = start_range_;
let mut end_range_ = end_range_;
        let success = sdk::natives::get_random_int_in_range(
            &mut native_return,
start_range_,
end_range_,
        );
        let native_return = native_return;
        
        ResultOfGetRandomIntInRange {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_have_replay_stats_been_stored(&self, ) -> ResultOfHaveReplayStatsBeenStored {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::have_replay_stats_been_stored(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfHaveReplayStatsBeenStored {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_stunt_jumps_can_trigger(&self, toggle_: bool) -> ResultOfSetStuntJumpsCanTrigger {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_stunt_jumps_can_trigger(
            toggle_,
        );
        
        
        ResultOfSetStuntJumpsCanTrigger {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_wanted_response_num_peds_to_spawn(&self, ) -> ResultOfResetWantedResponseNumPedsToSpawn {
    unsafe {
        
        let success = sdk::natives::reset_wanted_response_num_peds_to_spawn(
            
        );
        
        
        ResultOfResetWantedResponseNumPedsToSpawn {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_fade_in_after_death_arrest(&self, toggle_: bool) -> ResultOfSetFadeInAfterDeathArrest {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_fade_in_after_death_arrest(
            toggle_,
        );
        
        
        ResultOfSetFadeInAfterDeathArrest {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_dispatch_service(&self, dispatch_service_: i32,
toggle_: bool) -> ResultOfEnableDispatchService {
    unsafe {
        let mut dispatch_service_ = dispatch_service_;
let mut toggle_ = toggle_;
        let success = sdk::natives::enable_dispatch_service(
            dispatch_service_,
toggle_,
        );
        
        
        ResultOfEnableDispatchService {
            success,
            ret: (),
            
        }
    }
}

    fn native_delete_stunt_jump(&self, p0_: i32) -> ResultOfDeleteStuntJump {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::delete_stunt_jump(
            p0_,
        );
        
        
        ResultOfDeleteStuntJump {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_bullet_impacted_in_box(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: bool,
p7_: bool) -> ResultOfHasBulletImpactedInBox {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::has_bullet_impacted_in_box(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
        );
        let native_return = native_return;
        
        ResultOfHasBulletImpactedInBox {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_replay_stat_count(&self, ) -> ResultOfGetReplayStatCount {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_replay_stat_count(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetReplayStatCount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_area_of_objects(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
flags_: i32) -> ResultOfClearAreaOfObjects {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut flags_ = flags_;
        let success = sdk::natives::clear_area_of_objects(
            x_,
y_,
z_,
radius_,
flags_,
        );
        
        
        ResultOfClearAreaOfObjects {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_bullet_in_box(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
owned_by_player_: bool) -> ResultOfIsBulletInBox {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut owned_by_player_ = owned_by_player_;
        let success = sdk::natives::is_bullet_in_box(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
owned_by_player_,
        );
        let native_return = native_return;
        
        ResultOfIsBulletInBox {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_allow_mission_creator_warp(&self, toggle_: bool) -> ResultOfAllowMissionCreatorWarp {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::allow_mission_creator_warp(
            toggle_,
        );
        
        
        ResultOfAllowMissionCreatorWarp {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_coords_of_projectile_type_within_distance(&self, ped_: u32,
weapon_hash_: u32,
distance_: f32,
out_coords_: Option<shared::Vector3>,
p4_: bool) -> ResultOfGetCoordsOfProjectileTypeWithinDistance {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut distance_ = distance_;
let mut out_coords_ = sdk_helpers::create_vector3_ptr(out_coords_);
let mut p4_ = p4_;
        let success = sdk::natives::get_coords_of_projectile_type_within_distance(
            &mut native_return,
out_coords_.pin_mut(),
ped_,
weapon_hash_,
distance_,
p4_,
        );
        let native_return = native_return;
let out_coords_ = sdk_helpers::read_cpp_vector3(out_coords_);
        
        ResultOfGetCoordsOfProjectileTypeWithinDistance {
            success,
            ret: native_return,
            out_coords_
        }
    }
}

    fn native_begin_replay_stats(&self, p0_: i32,
p1_: i32) -> ResultOfBeginReplayStats {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::begin_replay_stats(
            p0_,
p1_,
        );
        
        
        ResultOfBeginReplayStats {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_tennis_swing_anim(&self, ped_: u32,
anim_dict_: Option<String>,
anim_name_: Option<String>,
p3_: f32,
p4_: f32,
p5_: bool) -> ResultOfPlayTennisSwingAnim {
    unsafe {
        let mut ped_ = ped_;
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::play_tennis_swing_anim(
            ped_,
anim_dict_.as_ref().unwrap(),
anim_name_.as_ref().unwrap(),
p3_,
p4_,
p5_,
        );
        
        
        ResultOfPlayTennisSwingAnim {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_stunt_jump_set(&self, p0_: i32) -> ResultOfEnableStuntJumpSet {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::enable_stunt_jump_set(
            p0_,
        );
        
        
        ResultOfEnableStuntJumpSet {
            success,
            ret: (),
            
        }
    }
}

    fn native_shoot_single_bullet_between_coords_ignore_entity(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
damage_: i32,
p7_: bool,
weapon_hash_: u32,
owner_ped_: u32,
is_audible_: bool,
is_invisible_: bool,
speed_: f32,
entity_: u32,
p14_: i32) -> ResultOfShootSingleBulletBetweenCoordsIgnoreEntity {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut damage_ = damage_;
let mut p7_ = p7_;
let mut weapon_hash_ = weapon_hash_;
let mut owner_ped_ = owner_ped_;
let mut is_audible_ = is_audible_;
let mut is_invisible_ = is_invisible_;
let mut speed_ = speed_;
let mut entity_ = entity_;
let mut p14_ = p14_;
        let success = sdk::natives::shoot_single_bullet_between_coords_ignore_entity(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
damage_,
p7_,
weapon_hash_,
owner_ped_,
is_audible_,
is_invisible_,
speed_,
entity_,
p14_,
        );
        
        
        ResultOfShootSingleBulletBetweenCoordsIgnoreEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_prevent_arrest_state_this_frame(&self, ) -> ResultOfPreventArrestStateThisFrame {
    unsafe {
        
        let success = sdk::natives::prevent_arrest_state_this_frame(
            
        );
        
        
        ResultOfPreventArrestStateThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_wanted_response_num_peds_to_spawn(&self, p0_: i32,
p1_: i32) -> ResultOfSetWantedResponseNumPedsToSpawn {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_wanted_response_num_peds_to_spawn(
            p0_,
p1_,
        );
        
        
        ResultOfSetWantedResponseNumPedsToSpawn {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_point_obscured_by_a_mission_entity(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: i32) -> ResultOfIsPointObscuredByAmissionEntity {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::is_point_obscured_by_a_mission_entity(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        let native_return = native_return;
        
        ResultOfIsPointObscuredByAmissionEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_restart_game(&self, ) -> ResultOfRestartGame {
    unsafe {
        
        let success = sdk::natives::restart_game(
            
        );
        
        
        ResultOfRestartGame {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_system_time_step(&self, ) -> ResultOfGetSystemTimeStep {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_system_time_step(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetSystemTimeStep {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_pop_multiplier_sphere(&self, id_: i32,
p1_: bool) -> ResultOfRemovePopMultiplierSphere {
    unsafe {
        let mut id_ = id_;
let mut p1_ = p1_;
        let success = sdk::natives::remove_pop_multiplier_sphere(
            id_,
p1_,
        );
        
        
        ResultOfRemovePopMultiplierSphere {
            success,
            ret: (),
            
        }
    }
}

    fn native_cancel_stunt_jump(&self, ) -> ResultOfCancelStuntJump {
    unsafe {
        
        let success = sdk::natives::cancel_stunt_jump(
            
        );
        
        
        ResultOfCancelStuntJump {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_bit(&self, address_: i32,
offset_: i32) -> ResultOfClearBit {
    unsafe {
        let mut address_ = address_;
let mut offset_ = offset_;
        let success = sdk::natives::clear_bit(
            &mut address_,
offset_,
        );
        let address_ = address_;
        
        ResultOfClearBit {
            success,
            ret: (),
            address_
        }
    }
}

    fn native_has_resumed_from_suspend(&self, ) -> ResultOfHasResumedFromSuspend {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_resumed_from_suspend(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfHasResumedFromSuspend {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_tennis_swing_anim_swung(&self, ped_: u32) -> ResultOfGetTennisSwingAnimSwung {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_tennis_swing_anim_swung(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetTennisSwingAnimSwung {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ui_started_end_user_benchmark(&self, ) -> ResultOfUiStartedEndUserBenchmark {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ui_started_end_user_benchmark(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfUiStartedEndUserBenchmark {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_activity_feed_action_start_with_command_line(&self, p0_: Option<String>,
p1_: Option<String>) -> ResultOfActivityFeedActionStartWithCommandLine {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::activity_feed_action_start_with_command_line(
            p0_.as_ref().unwrap(),
p1_.as_ref().unwrap(),
        );
        
        
        ResultOfActivityFeedActionStartWithCommandLine {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_wind_direction(&self, direction_: f32) -> ResultOfSetWindDirection {
    unsafe {
        let mut direction_ = direction_;
        let success = sdk::natives::set_wind_direction(
            direction_,
        );
        
        
        ResultOfSetWindDirection {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_save_struct(&self, ) -> ResultOfStopSaveStruct {
    unsafe {
        
        let success = sdk::natives::stop_save_struct(
            
        );
        
        
        ResultOfStopSaveStruct {
            success,
            ret: (),
            
        }
    }
}

    fn native_queue_mission_repeat_save_for_benchmark_test(&self, ) -> ResultOfQueueMissionRepeatSaveForBenchmarkTest {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::queue_mission_repeat_save_for_benchmark_test(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfQueueMissionRepeatSaveForBenchmarkTest {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_dispatch_time_between_spawn_attempts(&self, p0_: i32) -> ResultOfResetDispatchTimeBetweenSpawnAttempts {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::reset_dispatch_time_between_spawn_attempts(
            p0_,
        );
        
        
        ResultOfResetDispatchTimeBetweenSpawnAttempts {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_number_resources_allocated_to_wanted_level(&self, dispatch_service_: i32) -> ResultOfGetNumberResourcesAllocatedToWantedLevel {
    unsafe {
        let mut native_return = Default::default();
let mut dispatch_service_ = dispatch_service_;
        let success = sdk::natives::get_number_resources_allocated_to_wanted_level(
            &mut native_return,
dispatch_service_,
        );
        let native_return = native_return;
        
        ResultOfGetNumberResourcesAllocatedToWantedLevel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_quit_game(&self, ) -> ResultOfQuitGame {
    unsafe {
        
        let success = sdk::natives::quit_game(
            
        );
        
        
        ResultOfQuitGame {
            success,
            ret: (),
            
        }
    }
}

    fn native_activity_feed_add_literal_substring_to_caption(&self, p0_: Option<String>) -> ResultOfActivityFeedAddLiteralSubstringToCaption {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::activity_feed_add_literal_substring_to_caption(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOfActivityFeedAddLiteralSubstringToCaption {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_content_id_index(&self, content_id_: u32) -> ResultOfGetContentIdIndex {
    unsafe {
        let mut native_return = Default::default();
let mut content_id_ = content_id_;
        let success = sdk::natives::get_content_id_index(
            &mut native_return,
content_id_,
        );
        let native_return = native_return;
        
        ResultOfGetContentIdIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_weather_type_now_persist(&self, weather_type_: Option<String>) -> ResultOfSetWeatherTypeNowPersist {
    unsafe {
        let mut weather_type_ = sdk_helpers::create_c_string_ptr(weather_type_);
        let success = sdk::natives::set_weather_type_now_persist(
            weather_type_.as_ref().unwrap(),
        );
        
        
        ResultOfSetWeatherTypeNowPersist {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_text_label_to_save(&self, p0_: shared::MemoryBufferId,
name_: Option<String>) -> ResultOfRegisterTextLabelToSave {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::register_text_label_to_save(
            p0_,
name_.as_ref().unwrap(),
        );
        let p0_ = 0;
        
        ResultOfRegisterTextLabelToSave {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_set_wind_speed(&self, speed_: f32) -> ResultOfSetWindSpeed {
    unsafe {
        let mut speed_ = speed_;
        let success = sdk::natives::set_wind_speed(
            speed_,
        );
        
        
        ResultOfSetWindSpeed {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_projectile_type_in_angled_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32,
p7_: i32,
owned_by_player_: bool) -> ResultOfIsProjectileTypeInAngledArea {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
let mut p7_ = p7_;
let mut owned_by_player_ = owned_by_player_;
        let success = sdk::natives::is_projectile_type_in_angled_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
p7_,
owned_by_player_,
        );
        let native_return = native_return;
        
        ResultOfIsProjectileTypeInAngledArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_absi(&self, value_: i32) -> ResultOfAbsi {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::absi(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOfAbsi {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_using_mission_creator(&self, toggle_: bool) -> ResultOfUsingMissionCreator {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::using_mission_creator(
            toggle_,
        );
        
        
        ResultOfUsingMissionCreator {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_distance_between_coords(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
use_z_: bool) -> ResultOfGetDistanceBetweenCoords {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut use_z_ = use_z_;
        let success = sdk::natives::get_distance_between_coords(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
use_z_,
        );
        let native_return = native_return;
        
        ResultOfGetDistanceBetweenCoords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_string_null(&self, string_: Option<String>) -> ResultOfIsStringNull {
    unsafe {
        let mut native_return = Default::default();
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::is_string_null(
            &mut native_return,
string_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfIsStringNull {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_random_mwc_int_in_range(&self, start_range_: i32,
end_range_: i32) -> ResultOfGetRandomMwcIntInRange {
    unsafe {
        let mut native_return = Default::default();
let mut start_range_ = start_range_;
let mut end_range_ = end_range_;
        let success = sdk::natives::get_random_mwc_int_in_range(
            &mut native_return,
start_range_,
end_range_,
        );
        let native_return = native_return;
        
        ResultOfGetRandomMwcIntInRange {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_slerp_near_quaternion(&self, t_: f32,
x_: f32,
y_: f32,
z_: f32,
w_: f32,
x1_: f32,
y1_: f32,
z1_: f32,
w1_: f32,
out_x_: f32,
out_y_: f32,
out_z_: f32,
out_w_: f32) -> ResultOfSlerpNearQuaternion {
    unsafe {
        let mut t_ = t_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut w_ = w_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut w1_ = w1_;
let mut out_x_ = out_x_;
let mut out_y_ = out_y_;
let mut out_z_ = out_z_;
let mut out_w_ = out_w_;
        let success = sdk::natives::slerp_near_quaternion(
            &mut out_x_,
&mut out_y_,
&mut out_z_,
&mut out_w_,
t_,
x_,
y_,
z_,
w_,
x1_,
y1_,
z1_,
w1_,
        );
        let out_x_ = out_x_;
let out_y_ = out_y_;
let out_z_ = out_z_;
let out_w_ = out_w_;
        
        ResultOfSlerpNearQuaternion {
            success,
            ret: (),
            out_x_,
out_y_,
out_z_,
out_w_
        }
    }
}

    fn native_set_clouds_alpha(&self, opacity_: f32) -> ResultOfSetCloudsAlpha {
    unsafe {
        let mut opacity_ = opacity_;
        let success = sdk::natives::set_clouds_alpha(
            opacity_,
        );
        
        
        ResultOfSetCloudsAlpha {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_curr_weather_state(&self, weather_type1_: u32,
weather_type2_: u32,
percent_weather2_: f32) -> ResultOfGetCurrWeatherState {
    unsafe {
        let mut weather_type1_ = weather_type1_;
let mut weather_type2_ = weather_type2_;
let mut percent_weather2_ = percent_weather2_;
        let success = sdk::natives::get_curr_weather_state(
            &mut weather_type1_,
&mut weather_type2_,
&mut percent_weather2_,
        );
        let weather_type1_ = weather_type1_;
let weather_type2_ = weather_type2_;
let percent_weather2_ = percent_weather2_;
        
        ResultOfGetCurrWeatherState {
            success,
            ret: (),
            weather_type1_,
weather_type2_,
percent_weather2_
        }
    }
}

    fn native_set_fade_in_after_load(&self, toggle_: bool) -> ResultOfSetFadeInAfterLoad {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_fade_in_after_load(
            toggle_,
        );
        
        
        ResultOfSetFadeInAfterLoad {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_line_plane_intersection(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: f32,
p8_: f32,
p9_: f32,
p10_: f32,
p11_: f32,
p12_: f32) -> ResultOfGetLinePlaneIntersection {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
let mut p12_ = p12_;
        let success = sdk::natives::get_line_plane_intersection(
            &mut native_return,
&mut p12_,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
p11_,
        );
        let native_return = native_return;
let p12_ = p12_;
        
        ResultOfGetLinePlaneIntersection {
            success,
            ret: native_return,
            p12_
        }
    }
}

    fn native_force_lightning_flash(&self, ) -> ResultOfForceLightningFlash {
    unsafe {
        
        let success = sdk::natives::force_lightning_flash(
            
        );
        
        
        ResultOfForceLightningFlash {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_xbox360_version(&self, ) -> ResultOfIsXbox360Version {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_xbox360_version(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsXbox360Version {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_water_override_set_oceanwaveminamplitude(&self, min_amplitude_: f32) -> ResultOfWaterOverrideSetOceanwaveminamplitude {
    unsafe {
        let mut min_amplitude_ = min_amplitude_;
        let success = sdk::natives::water_override_set_oceanwaveminamplitude(
            min_amplitude_,
        );
        
        
        ResultOfWaterOverrideSetOceanwaveminamplitude {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_sce_platform(&self, ) -> ResultOfIsScePlatform {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_sce_platform(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsScePlatform {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_override_freeze_flags(&self, p0_: bool) -> ResultOfOverrideFreezeFlags {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::override_freeze_flags(
            p0_,
        );
        
        
        ResultOfOverrideFreezeFlags {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_text_label63_to_save(&self, p0_: shared::MemoryBufferId,
name_: Option<String>) -> ResultOfRegisterTextLabel63ToSave {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::register_text_label63_to_save(
            p0_,
name_.as_ref().unwrap(),
        );
        let p0_ = 0;
        
        ResultOfRegisterTextLabel63ToSave {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_set_ticker_johnmarston_is_done(&self, ) -> ResultOfSetTickerJohnmarstonIsDone {
    unsafe {
        
        let success = sdk::natives::set_ticker_johnmarston_is_done(
            
        );
        
        
        ResultOfSetTickerJohnmarstonIsDone {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_weather_type_overtime_persist(&self, weather_type_: Option<String>,
time_: f32) -> ResultOfSetWeatherTypeOvertimePersist {
    unsafe {
        let mut weather_type_ = sdk_helpers::create_c_string_ptr(weather_type_);
let mut time_ = time_;
        let success = sdk::natives::set_weather_type_overtime_persist(
            weather_type_.as_ref().unwrap(),
time_,
        );
        
        
        ResultOfSetWeatherTypeOvertimePersist {
            success,
            ret: (),
            
        }
    }
}

    fn native_toggle_show_optional_stunt_jump_camera(&self, toggle_: bool) -> ResultOfToggleShowOptionalStuntJumpCamera {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::toggle_show_optional_stunt_jump_camera(
            toggle_,
        );
        
        
        ResultOfToggleShowOptionalStuntJumpCamera {
            success,
            ret: (),
            
        }
    }
}

    fn native_load_cloud_hat(&self, name_: Option<String>,
transition_time_: f32) -> ResultOfLoadCloudHat {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut transition_time_ = transition_time_;
        let success = sdk::natives::load_cloud_hat(
            name_.as_ref().unwrap(),
transition_time_,
        );
        
        
        ResultOfLoadCloudHat {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_frame_count(&self, ) -> ResultOfGetFrameCount {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_frame_count(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetFrameCount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_number_of_free_stacks_of_this_size(&self, stack_size_: i32) -> ResultOfGetNumberOfFreeStacksOfThisSize {
    unsafe {
        let mut native_return = Default::default();
let mut stack_size_ = stack_size_;
        let success = sdk::natives::get_number_of_free_stacks_of_this_size(
            &mut native_return,
stack_size_,
        );
        let native_return = native_return;
        
        ResultOfGetNumberOfFreeStacksOfThisSize {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_sniper_bullet_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOfIsSniperBulletInArea {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::is_sniper_bullet_in_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOfIsSniperBulletInArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_explosive_melee_this_frame(&self, player_: u32) -> ResultOfSetExplosiveMeleeThisFrame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::set_explosive_melee_this_frame(
            player_,
        );
        
        
        ResultOfSetExplosiveMeleeThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_cam_activate_selfie_mode(&self, toggle_: bool) -> ResultOfCellCamActivateSelfieMode {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::cell_cam_activate_selfie_mode(
            toggle_,
        );
        
        
        ResultOfCellCamActivateSelfieMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_cam_set_selfie_mode_roll_offset(&self, roll_: f32) -> ResultOfCellCamSetSelfieModeRollOffset {
    unsafe {
        let mut roll_ = roll_;
        let success = sdk::natives::cell_cam_set_selfie_mode_roll_offset(
            roll_,
        );
        
        
        ResultOfCellCamSetSelfieModeRollOffset {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_cam_set_selfie_mode_side_offset_scaling(&self, p0_: f32) -> ResultOfCellCamSetSelfieModeSideOffsetScaling {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::cell_cam_set_selfie_mode_side_offset_scaling(
            p0_,
        );
        
        
        ResultOfCellCamSetSelfieModeSideOffsetScaling {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_mobile_phone_rotation(&self, rotation_: Option<shared::Vector3>,
p1_: u32) -> ResultOfGetMobilePhoneRotation {
    unsafe {
        let mut rotation_ = sdk_helpers::create_vector3_ptr(rotation_);
let mut p1_ = p1_;
        let success = sdk::natives::get_mobile_phone_rotation(
            rotation_.pin_mut(),
p1_,
        );
        let rotation_ = sdk_helpers::read_cpp_vector3(rotation_);
        
        ResultOfGetMobilePhoneRotation {
            success,
            ret: (),
            rotation_
        }
    }
}

    fn native_cell_cam_set_selfie_mode_vert_pan_offset(&self, vert_pan_: f32) -> ResultOfCellCamSetSelfieModeVertPanOffset {
    unsafe {
        let mut vert_pan_ = vert_pan_;
        let success = sdk::natives::cell_cam_set_selfie_mode_vert_pan_offset(
            vert_pan_,
        );
        
        
        ResultOfCellCamSetSelfieModeVertPanOffset {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mobile_phone_dof_state(&self, toggle_: bool) -> ResultOfSetMobilePhoneDofState {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_mobile_phone_dof_state(
            toggle_,
        );
        
        
        ResultOfSetMobilePhoneDofState {
            success,
            ret: (),
            
        }
    }
}

    fn native_destroy_mobile_phone(&self, ) -> ResultOfDestroyMobilePhone {
    unsafe {
        
        let success = sdk::natives::destroy_mobile_phone(
            
        );
        
        
        ResultOfDestroyMobilePhone {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_cam_is_char_visible_no_face_check(&self, entity_: u32) -> ResultOfCellCamIsCharVisibleNoFaceCheck {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::cell_cam_is_char_visible_no_face_check(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfCellCamIsCharVisibleNoFaceCheck {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_cell_horizontal_mode_toggle(&self, toggle_: bool) -> ResultOfCellHorizontalModeToggle {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::cell_horizontal_mode_toggle(
            toggle_,
        );
        
        
        ResultOfCellHorizontalModeToggle {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_cam_set_selfie_mode_head_pitch_offset(&self, pitch_: f32) -> ResultOfCellCamSetSelfieModeHeadPitchOffset {
    unsafe {
        let mut pitch_ = pitch_;
        let success = sdk::natives::cell_cam_set_selfie_mode_head_pitch_offset(
            pitch_,
        );
        
        
        ResultOfCellCamSetSelfieModeHeadPitchOffset {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_cam_set_selfie_mode_horz_pan_offset(&self, horizontal_pan_: f32) -> ResultOfCellCamSetSelfieModeHorzPanOffset {
    unsafe {
        let mut horizontal_pan_ = horizontal_pan_;
        let success = sdk::natives::cell_cam_set_selfie_mode_horz_pan_offset(
            horizontal_pan_,
        );
        
        
        ResultOfCellCamSetSelfieModeHorzPanOffset {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_mobile_phone_position(&self, position_: Option<shared::Vector3>) -> ResultOfGetMobilePhonePosition {
    unsafe {
        let mut position_ = sdk_helpers::create_vector3_ptr(position_);
        let success = sdk::natives::get_mobile_phone_position(
            position_.pin_mut(),
        );
        let position_ = sdk_helpers::read_cpp_vector3(position_);
        
        ResultOfGetMobilePhonePosition {
            success,
            ret: (),
            position_
        }
    }
}

    fn native_set_mobile_phone_position(&self, pos_x_: f32,
pos_y_: f32,
pos_z_: f32) -> ResultOfSetMobilePhonePosition {
    unsafe {
        let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
        let success = sdk::natives::set_mobile_phone_position(
            pos_x_,
pos_y_,
pos_z_,
        );
        
        
        ResultOfSetMobilePhonePosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_set_input(&self, direction_: i32) -> ResultOfCellSetInput {
    unsafe {
        let mut direction_ = direction_;
        let success = sdk::natives::cell_set_input(
            direction_,
        );
        
        
        ResultOfCellSetInput {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_cam_activate_shallow_dof_mode(&self, toggle_: bool) -> ResultOfCellCamActivateShallowDofMode {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::cell_cam_activate_shallow_dof_mode(
            toggle_,
        );
        
        
        ResultOfCellCamActivateShallowDofMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_mobile_phone(&self, phone_type_: i32) -> ResultOfCreateMobilePhone {
    unsafe {
        let mut phone_type_ = phone_type_;
        let success = sdk::natives::create_mobile_phone(
            phone_type_,
        );
        
        
        ResultOfCreateMobilePhone {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_cam_set_selfie_mode_distance_scaling(&self, distance_scaling_: f32) -> ResultOfCellCamSetSelfieModeDistanceScaling {
    unsafe {
        let mut distance_scaling_ = distance_scaling_;
        let success = sdk::natives::cell_cam_set_selfie_mode_distance_scaling(
            distance_scaling_,
        );
        
        
        ResultOfCellCamSetSelfieModeDistanceScaling {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_mobile_phone_render_id(&self, render_id_: i32) -> ResultOfGetMobilePhoneRenderId {
    unsafe {
        let mut render_id_ = render_id_;
        let success = sdk::natives::get_mobile_phone_render_id(
            &mut render_id_,
        );
        let render_id_ = render_id_;
        
        ResultOfGetMobilePhoneRenderId {
            success,
            ret: (),
            render_id_
        }
    }
}

    fn native_set_mobile_phone_rotation(&self, rot_x_: f32,
rot_y_: f32,
rot_z_: f32,
p3_: i32) -> ResultOfSetMobilePhoneRotation {
    unsafe {
        let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
let mut p3_ = p3_;
        let success = sdk::natives::set_mobile_phone_rotation(
            rot_x_,
rot_y_,
rot_z_,
p3_,
        );
        
        
        ResultOfSetMobilePhoneRotation {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_phone_be_seen_on_screen(&self, ) -> ResultOfCanPhoneBeSeenOnScreen {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::can_phone_be_seen_on_screen(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfCanPhoneBeSeenOnScreen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mobile_phone_scale(&self, scale_: f32) -> ResultOfSetMobilePhoneScale {
    unsafe {
        let mut scale_ = scale_;
        let success = sdk::natives::set_mobile_phone_scale(
            scale_,
        );
        
        
        ResultOfSetMobilePhoneScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_cam_set_selfie_mode_head_yaw_offset(&self, yaw_: f32) -> ResultOfCellCamSetSelfieModeHeadYawOffset {
    unsafe {
        let mut yaw_ = yaw_;
        let success = sdk::natives::cell_cam_set_selfie_mode_head_yaw_offset(
            yaw_,
        );
        
        
        ResultOfCellCamSetSelfieModeHeadYawOffset {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_cam_set_selfie_mode_head_roll_offset(&self, roll_: f32) -> ResultOfCellCamSetSelfieModeHeadRollOffset {
    unsafe {
        let mut roll_ = roll_;
        let success = sdk::natives::cell_cam_set_selfie_mode_head_roll_offset(
            roll_,
        );
        
        
        ResultOfCellCamSetSelfieModeHeadRollOffset {
            success,
            ret: (),
            
        }
    }
}

    fn native_script_is_moving_mobile_phone_offscreen(&self, toggle_: bool) -> ResultOfScriptIsMovingMobilePhoneOffscreen {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::script_is_moving_mobile_phone_offscreen(
            toggle_,
        );
        
        
        ResultOfScriptIsMovingMobilePhoneOffscreen {
            success,
            ret: (),
            
        }
    }
}

    fn native_cell_cam_activate(&self, p0_: bool,
p1_: bool) -> ResultOfCellCamActivate {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::cell_cam_activate(
            p0_,
p1_,
        );
        
        
        ResultOfCellCamActivate {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_pay_business_supplies(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentPayBusinessSupplies {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_pay_business_supplies(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentPayBusinessSupplies {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_wage_payment_bonus(&self, amount_: i32) -> ResultOfNetworkEarnWagePaymentBonus {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_wage_payment_bonus(
            amount_,
        );
        
        
        ResultOfNetworkEarnWagePaymentBonus {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_rockstar(&self, amount_: i32) -> ResultOfNetworkEarnFromRockstar {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_from_rockstar(
            amount_,
        );
        
        
        ResultOfNetworkEarnFromRockstar {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_vehicle_requested(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfNetworkSpendVehicleRequested {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spend_vehicle_requested(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfNetworkSpendVehicleRequested {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_upgrade_arena(&self, amount_: i32,
p1_: bool,
p2_: bool,
p3_: Option<String>) -> ResultOfNetworkSpendUpgradeArena {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = sdk_helpers::create_c_string_ptr(p3_);
        let success = sdk::natives::network_spend_upgrade_arena(
            amount_,
p1_,
p2_,
p3_.as_ref().unwrap(),
        );
        
        
        ResultOfNetworkSpendUpgradeArena {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_delete_character(&self, character_slot_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkDeleteCharacter {
    unsafe {
        let mut character_slot_ = character_slot_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_delete_character(
            character_slot_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkDeleteCharacter {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_order_warehouse_vehicle(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentOrderWarehouseVehicle {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_order_warehouse_vehicle(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentOrderWarehouseVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_casino_time_trial_win(&self, amount_: i32) -> ResultOfNetworkEarnCasinoTimeTrialWin {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_casino_time_trial_win(
            amount_,
        );
        
        
        ResultOfNetworkEarnCasinoTimeTrialWin {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_goon(&self, p0_: i32,
p1_: i32,
amount_: i32) -> ResultOfNetworkSpendGoon {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut amount_ = amount_;
        let success = sdk::natives::network_spend_goon(
            p0_,
p1_,
amount_,
        );
        
        
        ResultOfNetworkSpendGoon {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_boss(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkEarnBoss {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_boss(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkEarnBoss {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_can_transfer_cash(&self, amount_: i32) -> ResultOfNetworkGetCanTransferCash {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
        let success = sdk::natives::network_get_can_transfer_cash(
            &mut native_return,
amount_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetCanTransferCash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_earn_casino_mission_participation(&self, amount_: i32) -> ResultOfNetworkEarnCasinoMissionParticipation {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_casino_mission_participation(
            amount_,
        );
        
        
        ResultOfNetworkEarnCasinoMissionParticipation {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_business_hub_sell(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkEarnFromBusinessHubSell {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_from_business_hub_sell(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkEarnFromBusinessHubSell {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_uprade_bunker(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentUpradeBunker {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_uprade_bunker(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentUpradeBunker {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_agency(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkEarnAgency {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_earn_agency(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkEarnAgency {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_buy_tiltrotor(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentBuyTiltrotor {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_buy_tiltrotor(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentBuyTiltrotor {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_pa_service_snack(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentPaServiceSnack {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_pa_service_snack(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentPaServiceSnack {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_challenge(&self, amount_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkEarnChallenge {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_challenge(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkEarnChallenge {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_sell_base(&self, amount_: i32,
base_name_hash_: u32) -> ResultOfNetworkEarnSellBase {
    unsafe {
        let mut amount_ = amount_;
let mut base_name_hash_ = base_name_hash_;
        let success = sdk::natives::network_earn_sell_base(
            amount_,
base_name_hash_,
        );
        
        
        ResultOfNetworkEarnSellBase {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_arena_career_progression(&self, amount_: i32,
p1_: i32) -> ResultOfNetworkEarnArenaCareerProgression {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_arena_career_progression(
            amount_,
p1_,
        );
        
        
        ResultOfNetworkEarnArenaCareerProgression {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_pa_heli_pickup(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentPaHeliPickup {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_pa_heli_pickup(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentPaHeliPickup {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_upgrade_acid_lab_equipment(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendUpgradeAcidLabEquipment {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_upgrade_acid_lab_equipment(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendUpgradeAcidLabEquipment {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_pa_service_heli(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentPaServiceHeli {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_pa_service_heli(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentPaServiceHeli {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_first_time_bonus(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkEarnFirstTimeBonus {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_first_time_bonus(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkEarnFirstTimeBonus {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_apartment_utilities(&self, amount_: i32,
p1_: bool,
p2_: bool,
data_: shared::MemoryBufferId) -> ResultOfNetworkSpendApartmentUtilities {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
        let success = sdk::natives::network_spend_apartment_utilities(
            data_,
amount_,
p1_,
p2_,
        );
        let data_ = 0;
        
        ResultOfNetworkSpendApartmentUtilities {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_network_earn_doomsday_finale_bonus(&self, amount_: i32,
vehicle_hash_: u32) -> ResultOfNetworkEarnDoomsdayFinaleBonus {
    unsafe {
        let mut amount_ = amount_;
let mut vehicle_hash_ = vehicle_hash_;
        let success = sdk::natives::network_earn_doomsday_finale_bonus(
            amount_,
vehicle_hash_,
        );
        
        
        ResultOfNetworkEarnDoomsdayFinaleBonus {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_buy_bunker(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentBuyBunker {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_buy_bunker(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentBuyBunker {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_bounty(&self, amount_: i32,
gamer_handle_: shared::MemoryBufferId,
p2_: shared::MemoryBufferId,
p3_: i32) -> ResultOfNetworkEarnFromBounty {
    unsafe {
        let mut amount_ = amount_;
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
let mut p2_ = self.memory_buffers.borrow_mut().get_mut_ptr(p2_) as *mut c_void;
let mut p3_ = p3_;
        let success = sdk::natives::network_earn_from_bounty(
            gamer_handle_,
p2_,
amount_,
p3_,
        );
        let gamer_handle_ = 0;
let p2_ = 0;
        
        ResultOfNetworkEarnFromBounty {
            success,
            ret: (),
            gamer_handle_,
p2_
        }
    }
}

    fn native_network_earn_source_participation_acid_lab(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnSourceParticipationAcidLab {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_source_participation_acid_lab(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnSourceParticipationAcidLab {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_pvc_transfer_balance(&self, ) -> ResultOfNetworkGetPvcTransferBalance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_pvc_transfer_balance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetPvcTransferBalance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spend_car_club_membership(&self, amount1_: i32,
p1_: i32,
p2_: i32,
amount2_: i32,
p4_: i32) -> ResultOfNetworkSpendCarClubMembership {
    unsafe {
        let mut amount1_ = amount1_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut amount2_ = amount2_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spend_car_club_membership(
            amount1_,
p1_,
p2_,
amount2_,
p4_,
        );
        
        
        ResultOfNetworkSpendCarClubMembership {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_award_contract(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnAwardContract {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_award_contract(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnAwardContract {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_arena_join_spectator(&self, amount_: i32,
p1_: i32,
p2_: bool,
p3_: bool) -> ResultOfNetworkSpentArenaJoinSpectator {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_arena_join_spectator(
            amount_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentArenaJoinSpectator {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_casino_can_bet(&self, hash_: u32) -> ResultOfNetworkCasinoCanBet {
    unsafe {
        let mut native_return = Default::default();
let mut hash_ = hash_;
        let success = sdk::natives::network_casino_can_bet(
            &mut native_return,
hash_,
        );
        let native_return = native_return;
        
        ResultOfNetworkCasinoCanBet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_earn_gangops_wages_bonus(&self, amount_: i32,
p1_: i32) -> ResultOfNetworkEarnGangopsWagesBonus {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_gangops_wages_bonus(
            amount_,
p1_,
        );
        
        
        ResultOfNetworkEarnGangopsWagesBonus {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_upgrade_tiltrotor(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentUpgradeTiltrotor {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_tiltrotor(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentUpgradeTiltrotor {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_taxi(&self, amount_: i32,
p1_: bool,
p2_: bool,
p3_: i32,
p4_: i32) -> ResultOfNetworkSpentTaxi {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spent_taxi(
            amount_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfNetworkSpentTaxi {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_deduct_cash(&self, amount_: i32,
p1_: Option<String>,
p2_: Option<String>,
p3_: bool,
p4_: bool,
p5_: bool) -> ResultOfNetworkDeductCash {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::network_deduct_cash(
            amount_,
p1_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
p3_,
p4_,
p5_,
        );
        
        
        ResultOfNetworkDeductCash {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_agency(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfNetworkSpendAgency {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spend_agency(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfNetworkSpendAgency {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_service_earn_gangops_rival_delivery(&self, earned_money_: i32) -> ResultOfNetworkServiceEarnGangopsRivalDelivery {
    unsafe {
        let mut earned_money_ = earned_money_;
        let success = sdk::natives::network_service_earn_gangops_rival_delivery(
            earned_money_,
        );
        
        
        ResultOfNetworkServiceEarnGangopsRivalDelivery {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_bounty_hunter_mission(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkSpendBountyHunterMission {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spend_bounty_hunter_mission(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpendBountyHunterMission {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_gangops_finale(&self, amount_: i32,
p1_: Option<String>) -> ResultOfNetworkEarnGangopsFinale {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::network_earn_gangops_finale(
            amount_,
p1_.as_ref().unwrap(),
        );
        
        
        ResultOfNetworkEarnGangopsFinale {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_can_share_job_cash(&self, ) -> ResultOfNetworkCanShareJobCash {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_can_share_job_cash(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkCanShareJobCash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spent_betting(&self, amount_: i32,
p1_: i32,
match_id_: Option<String>,
p3_: bool,
p4_: bool) -> ResultOfNetworkSpentBetting {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut match_id_ = sdk_helpers::create_c_string_ptr(match_id_);
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spent_betting(
            amount_,
p1_,
match_id_.as_ref().unwrap(),
p3_,
p4_,
        );
        
        
        ResultOfNetworkSpentBetting {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_upgrade_nightclub_and_warehouse(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentUpgradeNightclubAndWarehouse {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_nightclub_and_warehouse(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentUpgradeNightclubAndWarehouse {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_fmbb_boss_work(&self, p0_: i32) -> ResultOfNetworkEarnFromFmbbBossWork {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_from_fmbb_boss_work(
            p0_,
        );
        
        
        ResultOfNetworkEarnFromFmbbBossWork {
            success,
            ret: (),
            
        }
    }
}

    fn native_process_cash_gift(&self, p0_: i32,
p1_: i32,
p2_: Option<String>) -> ResultOfProcessCashGift {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
        let success = sdk::natives::process_cash_gift(
            native_return.pin_mut(),
&mut p0_,
&mut p1_,
p2_.as_ref().unwrap(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
let p0_ = p0_;
let p1_ = p1_;
        
        ResultOfProcessCashGift {
            success,
            ret: native_return,
            p0_,
p1_
        }
    }
}

    fn native_network_spent_upgrade_hacker_truck(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentUpgradeHackerTruck {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_hacker_truck(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentUpgradeHackerTruck {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_fixer_rival_delivery(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnFixerRivalDelivery {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_fixer_rival_delivery(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnFixerRivalDelivery {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_gangops_elite(&self, amount_: i32,
p1_: Option<String>,
act_index_: i32) -> ResultOfNetworkEarnGangopsElite {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut act_index_ = act_index_;
        let success = sdk::natives::network_earn_gangops_elite(
            amount_,
p1_.as_ref().unwrap(),
act_index_,
        );
        
        
        ResultOfNetworkEarnGangopsElite {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_cash_drop(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkSpentCashDrop {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_cash_drop(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpentCashDrop {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_job_skip(&self, amount_: i32,
match_id_: Option<String>,
p2_: bool,
p3_: bool) -> ResultOfNetworkSpentJobSkip {
    unsafe {
        let mut amount_ = amount_;
let mut match_id_ = sdk_helpers::create_c_string_ptr(match_id_);
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_job_skip(
            amount_,
match_id_.as_ref().unwrap(),
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentJobSkip {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_upgrade_acid_lab_scoop(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfNetworkSpendUpgradeAcidLabScoop {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_upgrade_acid_lab_scoop(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendUpgradeAcidLabScoop {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_bounty(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkSpentBounty {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_bounty(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpentBounty {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_gangops_repair_cost(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkSpendGangopsRepairCost {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spend_gangops_repair_cost(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpendGangopsRepairCost {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_purchase_hacker_truck(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentPurchaseHackerTruck {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_purchase_hacker_truck(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentPurchaseHackerTruck {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_upgrade_office_garage(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentUpgradeOfficeGarage {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_office_garage(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentUpgradeOfficeGarage {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_challenge_win(&self, p0_: i32,
p1_: shared::MemoryBufferId,
p2_: bool) -> ResultOfNetworkEarnFromChallengeWin {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_from_challenge_win(
            p1_,
p0_,
p2_,
        );
        let p1_ = 0;
        
        ResultOfNetworkEarnFromChallengeWin {
            success,
            ret: (),
            p1_
        }
    }
}

    fn native_network_earn_biker_shop(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnBikerShop {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_biker_shop(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnBikerShop {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_gunrunning(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendGunrunning {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_gunrunning(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendGunrunning {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_gangops_wages(&self, amount_: i32,
p1_: i32) -> ResultOfNetworkEarnGangopsWages {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_gangops_wages(
            amount_,
p1_,
        );
        
        
        ResultOfNetworkEarnGangopsWages {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_trade_impexp_warehouse_property(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentTradeImpexpWarehouseProperty {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_trade_impexp_warehouse_property(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentTradeImpexpWarehouseProperty {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_buy_contraband_mission(&self, p0_: i32,
p1_: i32,
p2_: u32,
p3_: bool,
p4_: bool) -> ResultOfNetworkBuyContrabandMission {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_buy_contraband_mission(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfNetworkBuyContrabandMission {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_hangar_trade(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnFromHangarTrade {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_from_hangar_trade(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnFromHangarTrade {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_purchase_impexp_warehouse_property(&self, amount_: i32,
data_: shared::MemoryBufferId,
p2_: bool,
p3_: bool) -> ResultOfNetworkSpentPurchaseImpexpWarehouseProperty {
    unsafe {
        let mut amount_ = amount_;
let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_purchase_impexp_warehouse_property(
            data_,
amount_,
p2_,
p3_,
        );
        let data_ = 0;
        
        ResultOfNetworkSpentPurchaseImpexpWarehouseProperty {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_network_spend_buy_casino(&self, amount_: i32,
p1_: bool,
p2_: bool,
data_: shared::MemoryBufferId) -> ResultOfNetworkSpendBuyCasino {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
        let success = sdk::natives::network_spend_buy_casino(
            data_,
amount_,
p1_,
p2_,
        );
        let data_ = 0;
        
        ResultOfNetworkSpendBuyCasino {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_network_earn_wage_payment(&self, amount_: i32,
p1_: i32) -> ResultOfNetworkEarnWagePayment {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_wage_payment(
            amount_,
p1_,
        );
        
        
        ResultOfNetworkEarnWagePayment {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_upgrade_truck(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentUpgradeTruck {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_truck(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentUpgradeTruck {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_autoshop_business(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkEarnAutoshopBusiness {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_autoshop_business(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkEarnAutoshopBusiness {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_agency_contract(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnAgencyContract {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_agency_contract(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnAgencyContract {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_casino_can_bet_pvc(&self, ) -> ResultOfNetworkCasinoCanBetPvc {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_casino_can_bet_pvc(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkCasinoCanBetPvc {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_can_bet(&self, amount_: i32) -> ResultOfNetworkCanBet {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
        let success = sdk::natives::network_can_bet(
            &mut native_return,
amount_,
        );
        let native_return = native_return;
        
        ResultOfNetworkCanBet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_casino_buy_chips(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkCasinoBuyChips {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_casino_buy_chips(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfNetworkCasinoBuyChips {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_initialize_cash(&self, wallet_: i32,
bank_: i32) -> ResultOfNetworkInitializeCash {
    unsafe {
        let mut wallet_ = wallet_;
let mut bank_ = bank_;
        let success = sdk::natives::network_initialize_cash(
            wallet_,
bank_,
        );
        
        
        ResultOfNetworkInitializeCash {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_upgrade_base(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentUpgradeBase {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_base(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentUpgradeBase {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_warehouse(&self, amount_: i32,
id_: i32) -> ResultOfNetworkEarnFromWarehouse {
    unsafe {
        let mut amount_ = amount_;
let mut id_ = id_;
        let success = sdk::natives::network_earn_from_warehouse(
            amount_,
id_,
        );
        
        
        ResultOfNetworkEarnFromWarehouse {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_casino_heist_awards(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfNetworkEarnCasinoHeistAwards {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_earn_casino_heist_awards(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfNetworkEarnCasinoHeistAwards {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_personal_vehicle(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32,
p8_: i32) -> ResultOfNetworkEarnFromPersonalVehicle {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::network_earn_from_personal_vehicle(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
        );
        
        
        ResultOfNetworkEarnFromPersonalVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_buy_arena(&self, amount_: i32,
p1_: bool,
p2_: bool,
p3_: Option<String>) -> ResultOfNetworkSpendBuyArena {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = sdk_helpers::create_c_string_ptr(p3_);
        let success = sdk::natives::network_spend_buy_arena(
            amount_,
p1_,
p2_,
p3_.as_ref().unwrap(),
        );
        
        
        ResultOfNetworkSpendBuyArena {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_juggalo_story_mission_participation(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnJuggaloStoryMissionParticipation {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_juggalo_story_mission_participation(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnJuggaloStoryMissionParticipation {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_upgrade_impexp_warehouse_property(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentUpgradeImpexpWarehouseProperty {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_impexp_warehouse_property(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentUpgradeImpexpWarehouseProperty {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_business_battle(&self, p0_: i32) -> ResultOfNetworkEarnFromBusinessBattle {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_from_business_battle(
            p0_,
        );
        
        
        ResultOfNetworkEarnFromBusinessBattle {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_not_badsport(&self, amount_: i32) -> ResultOfNetworkEarnFromNotBadsport {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_from_not_badsport(
            amount_,
        );
        
        
        ResultOfNetworkEarnFromNotBadsport {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_arcade(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfNetworkSpendArcade {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spend_arcade(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfNetworkSpendArcade {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_rename_acid_product(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendRenameAcidProduct {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_rename_acid_product(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendRenameAcidProduct {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_sightseeing_reward(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkEarnSightseeingReward {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_earn_sightseeing_reward(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkEarnSightseeingReward {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_holdups(&self, amount_: i32) -> ResultOfNetworkEarnFromHoldups {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_from_holdups(
            amount_,
        );
        
        
        ResultOfNetworkEarnFromHoldups {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_upgrade_casino(&self, amount_: i32,
p1_: bool,
p2_: bool,
data_: shared::MemoryBufferId) -> ResultOfNetworkSpendUpgradeCasino {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
        let success = sdk::natives::network_spend_upgrade_casino(
            data_,
amount_,
p1_,
p2_,
        );
        let data_ = 0;
        
        ResultOfNetworkSpendUpgradeCasino {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_network_spend_casino_heist_skip_mission(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendCasinoHeistSkipMission {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_casino_heist_skip_mission(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendCasinoHeistSkipMission {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_upgrade_acid_lab_mines(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfNetworkSpendUpgradeAcidLabMines {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_upgrade_acid_lab_mines(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendUpgradeAcidLabMines {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_upgrade_arcade(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkEarnUpgradeArcade {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_upgrade_arcade(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkEarnUpgradeArcade {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_buy_base(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentBuyBase {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_buy_base(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentBuyBase {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_pvc_balance(&self, ) -> ResultOfNetworkGetPvcBalance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_pvc_balance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetPvcBalance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_earn_daily_objective_event(&self, amount_: i32) -> ResultOfNetworkEarnDailyObjectiveEvent {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_daily_objective_event(
            amount_,
        );
        
        
        ResultOfNetworkEarnDailyObjectiveEvent {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_ai_target_kill(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnFromAiTargetKill {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_from_ai_target_kill(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnFromAiTargetKill {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_boat_pickup(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfNetworkSpentBoatPickup {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_boat_pickup(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentBoatPickup {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_daily_vehicle(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnDailyVehicle {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_daily_vehicle(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnDailyVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_beach_party(&self, p0_: i32) -> ResultOfNetworkSpendBeachParty {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_spend_beach_party(
            p0_,
        );
        
        
        ResultOfNetworkSpendBeachParty {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_collectables_action_figures(&self, amount_: i32) -> ResultOfNetworkEarnCollectablesActionFigures {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_collectables_action_figures(
            amount_,
        );
        
        
        ResultOfNetworkEarnCollectablesActionFigures {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_upgrade_arcade(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendUpgradeArcade {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_upgrade_arcade(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendUpgradeArcade {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_purchase_club_house(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnPurchaseClubHouse {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_purchase_club_house(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnPurchaseClubHouse {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_casino_mission_reward(&self, amount_: i32) -> ResultOfNetworkEarnCasinoMissionReward {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_casino_mission_reward(
            amount_,
        );
        
        
        ResultOfNetworkEarnCasinoMissionReward {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_receive_player_jobshare_cash(&self, value_: i32,
gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkReceivePlayerJobshareCash {
    unsafe {
        let mut value_ = value_;
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_receive_player_jobshare_cash(
            gamer_handle_,
value_,
        );
        let gamer_handle_ = 0;
        
        ResultOfNetworkReceivePlayerJobshareCash {
            success,
            ret: (),
            gamer_handle_
        }
    }
}

    fn native_network_yohan_source_goods(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkYohanSourceGoods {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_yohan_source_goods(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkYohanSourceGoods {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_award_short_trip(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnAwardShortTrip {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_award_short_trip(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnAwardShortTrip {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_target_refund(&self, amount_: i32,
p1_: i32) -> ResultOfNetworkEarnTargetRefund {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_target_refund(
            amount_,
p1_,
        );
        
        
        ResultOfNetworkEarnTargetRefund {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_employ_assassins(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentEmployAssassins {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_employ_assassins(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentEmployAssassins {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_jukebox(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentJukebox {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_jukebox(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentJukebox {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_collectable_completed_collection(&self, amount_: i32,
p1_: i32) -> ResultOfNetworkEarnCollectableCompletedCollection {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_collectable_completed_collection(
            amount_,
p1_,
        );
        
        
        ResultOfNetworkEarnCollectableCompletedCollection {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_vc_balance(&self, ) -> ResultOfNetworkGetVcBalance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_vc_balance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetVcBalance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_can_receive_player_cash(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkCanReceivePlayerCash {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_can_receive_player_cash(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOfNetworkCanReceivePlayerCash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_evc_balance(&self, ) -> ResultOfNetworkGetEvcBalance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_evc_balance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetEvcBalance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spent_ballistic_equipment(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkSpentBallisticEquipment {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_ballistic_equipment(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpentBallisticEquipment {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_arena_war_assassinate_target(&self, amount_: i32) -> ResultOfNetworkEarnArenaWarAssassinateTarget {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_arena_war_assassinate_target(
            amount_,
        );
        
        
        ResultOfNetworkEarnArenaWarAssassinateTarget {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_gangops_trip_skip(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkSpendGangopsTripSkip {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spend_gangops_trip_skip(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpendGangopsTripSkip {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_change_appearance(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkSpentChangeAppearance {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_change_appearance(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpentChangeAppearance {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_pay_employee_wage(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkPayEmployeeWage {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_pay_employee_wage(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkPayEmployeeWage {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_bend_job(&self, amount_: i32,
heist_hash_: Option<String>) -> ResultOfNetworkEarnFromBendJob {
    unsafe {
        let mut amount_ = amount_;
let mut heist_hash_ = sdk_helpers::create_c_string_ptr(heist_hash_);
        let success = sdk::natives::network_earn_from_bend_job(
            amount_,
heist_hash_.as_ref().unwrap(),
        );
        
        
        ResultOfNetworkEarnFromBendJob {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_upgrade_hangar(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentUpgradeHangar {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_hangar(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentUpgradeHangar {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_arena_premium(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkSpendArenaPremium {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spend_arena_premium(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpendArenaPremium {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_suv_fst_trvl(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfNetworkSpendSuvFstTrvl {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_suv_fst_trvl(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendSuvFstTrvl {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_fixer_prep(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnFixerPrep {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_fixer_prep(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnFixerPrep {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_arena_war(&self, amount_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkEarnArenaWar {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_earn_arena_war(
            amount_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkEarnArenaWar {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_buy_property(&self, cost_: i32,
property_name_: u32,
p2_: bool,
p3_: bool) -> ResultOfNetworkBuyProperty {
    unsafe {
        let mut cost_ = cost_;
let mut property_name_ = property_name_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_buy_property(
            cost_,
property_name_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkBuyProperty {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_nightclub_and_warehouse(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendNightclubAndWarehouse {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_nightclub_and_warehouse(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendNightclubAndWarehouse {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_agency_safe(&self, p0_: i32) -> ResultOfNetworkEarnAgencySafe {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_agency_safe(
            p0_,
        );
        
        
        ResultOfNetworkEarnAgencySafe {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_upgrade_business_property(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentUpgradeBusinessProperty {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_business_property(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentUpgradeBusinessProperty {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_spin_the_wheel_cash(&self, amount_: i32) -> ResultOfNetworkEarnSpinTheWheelCash {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_spin_the_wheel_cash(
            amount_,
        );
        
        
        ResultOfNetworkEarnSpinTheWheelCash {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_job_bonus(&self, p0_: i32,
p1_: shared::MemoryBufferId,
p2_: shared::MemoryBufferId) -> ResultOfNetworkEarnFromJobBonus {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
let mut p2_ = self.memory_buffers.borrow_mut().get_mut_ptr(p2_) as *mut c_void;
        let success = sdk::natives::network_earn_from_job_bonus(
            p1_,
p2_,
p0_,
        );
        let p1_ = 0;
let p2_ = 0;
        
        ResultOfNetworkEarnFromJobBonus {
            success,
            ret: (),
            p1_,
p2_
        }
    }
}

    fn native_network_spent_purchase_office_property(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentPurchaseOfficeProperty {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_purchase_office_property(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentPurchaseOfficeProperty {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_from_rockstar(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkSpentFromRockstar {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_from_rockstar(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpentFromRockstar {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_cinema(&self, p0_: i32,
p1_: i32,
p2_: bool,
p3_: bool) -> ResultOfNetworkSpentCinema {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_cinema(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentCinema {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_smuggler_work(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfNetworkEarnFromSmugglerWork {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_earn_from_smuggler_work(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfNetworkEarnFromSmugglerWork {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_submarine(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOfNetworkSpendSubmarine {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::network_spend_submarine(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOfNetworkSpendSubmarine {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_upgrade_agency(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendUpgradeAgency {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_upgrade_agency(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendUpgradeAgency {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_buy_passive_mode(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfNetworkSpentBuyPassiveMode {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_buy_passive_mode(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentBuyPassiveMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_buy_reveal_players(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfNetworkSpentBuyRevealPlayers {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_buy_reveal_players(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentBuyRevealPlayers {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_daily_objectives(&self, amount_: i32,
type_: Option<String>,
character_slot_: i32) -> ResultOfNetworkEarnFromDailyObjectives {
    unsafe {
        let mut amount_ = amount_;
let mut type_ = sdk_helpers::create_c_string_ptr(type_);
let mut character_slot_ = character_slot_;
        let success = sdk::natives::network_earn_from_daily_objectives(
            amount_,
type_.as_ref().unwrap(),
character_slot_,
        );
        
        
        ResultOfNetworkEarnFromDailyObjectives {
            success,
            ret: (),
            
        }
    }
}

    fn native_was_vc_withdrawal_successful(&self, p0_: i32) -> ResultOfWasVcWithdrawalSuccessful {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::was_vc_withdrawal_successful(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfWasVcWithdrawalSuccessful {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spent_purchase_business_property(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentPurchaseBusinessProperty {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_purchase_business_property(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentPurchaseBusinessProperty {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_string_bank_wallet_balance(&self, ) -> ResultOfNetworkGetStringBankWalletBalance {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
        let success = sdk::natives::network_get_string_bank_wallet_balance(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfNetworkGetStringBankWalletBalance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spend_arena_spectator_box(&self, amount_: i32,
type_: i32,
p2_: bool,
p3_: bool) -> ResultOfNetworkSpendArenaSpectatorBox {
    unsafe {
        let mut amount_ = amount_;
let mut type_ = type_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_arena_spectator_box(
            amount_,
type_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendArenaSpectatorBox {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_cashing_out(&self, amount_: i32) -> ResultOfNetworkEarnFromCashingOut {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_from_cashing_out(
            amount_,
        );
        
        
        ResultOfNetworkEarnFromCashingOut {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_biker(&self, p0_: i32) -> ResultOfNetworkEarnBiker {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_biker(
            p0_,
        );
        
        
        ResultOfNetworkEarnBiker {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_casino_heist(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32) -> ResultOfNetworkEarnCasinoHeist {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::network_earn_casino_heist(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        
        
        ResultOfNetworkEarnCasinoHeist {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_can_spend_money2(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: bool,
p4_: shared::MemoryBufferId,
p5_: i32,
p6_: i32) -> ResultOfNetworkCanSpendMoney2 {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = self.memory_buffers.borrow_mut().get_mut_ptr(p4_) as *mut c_void;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::network_can_spend_money2(
            &mut native_return,
p4_,
p0_,
p1_,
p2_,
p3_,
p5_,
p6_,
        );
        let native_return = native_return;
let p4_ = 0;
        
        ResultOfNetworkCanSpendMoney2 {
            success,
            ret: native_return,
            p4_
        }
    }
}

    fn native_network_earn_award_phone(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnAwardPhone {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_award_phone(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnAwardPhone {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_buy_smokes(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkBuySmokes {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_buy_smokes(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkBuySmokes {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_buy_airstrike(&self, cost_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfNetworkBuyAirstrike {
    unsafe {
        let mut cost_ = cost_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_buy_airstrike(
            cost_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkBuyAirstrike {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_vc_bank_balance(&self, ) -> ResultOfNetworkGetVcBankBalance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_vc_bank_balance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetVcBankBalance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spend_gangops_cannon(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendGangopsCannon {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_gangops_cannon(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendGangopsCannon {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_sell_acid(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnSellAcid {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_sell_acid(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnSellAcid {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_rdr_bonus(&self, amount_: i32,
p1_: i32) -> ResultOfNetworkEarnRdrBonus {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_rdr_bonus(
            amount_,
p1_,
        );
        
        
        ResultOfNetworkEarnRdrBonus {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_buy_bounty(&self, amount_: i32,
victim_: u32,
p2_: bool,
p3_: bool,
p4_: i32) -> ResultOfNetworkBuyBounty {
    unsafe {
        let mut amount_ = amount_;
let mut victim_ = victim_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_buy_bounty(
            amount_,
victim_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfNetworkBuyBounty {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_heli_pickup(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfNetworkSpentHeliPickup {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_heli_pickup(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentHeliPickup {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_economy_has_fixed_crazy_numbers(&self, ) -> ResultOfNetworkEconomyHasFixedCrazyNumbers {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_economy_has_fixed_crazy_numbers(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkEconomyHasFixedCrazyNumbers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spent_player_healthcare(&self, p0_: i32,
p1_: i32,
p2_: bool,
p3_: bool) -> ResultOfNetworkSpentPlayerHealthcare {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_player_healthcare(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentPlayerHealthcare {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_set_discount(&self, p0_: bool) -> ResultOfNetworkSpendSetDiscount {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_spend_set_discount(
            p0_,
        );
        
        
        ResultOfNetworkSpendSetDiscount {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_telescope(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkSpentTelescope {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_telescope(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpentTelescope {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_arrest_bail(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkSpentArrestBail {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_arrest_bail(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpentArrestBail {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_money_can_bet(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkMoneyCanBet {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_money_can_bet(
            &mut native_return,
amount_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfNetworkMoneyCanBet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_buy_heli_strike(&self, cost_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfNetworkBuyHeliStrike {
    unsafe {
        let mut cost_ = cost_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_buy_heli_strike(
            cost_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkBuyHeliStrike {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_request_job(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfNetworkSpentRequestJob {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_request_job(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentRequestJob {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_manual_delete_character(&self, character_slot_: i32) -> ResultOfNetworkManualDeleteCharacter {
    unsafe {
        let mut character_slot_ = character_slot_;
        let success = sdk::natives::network_manual_delete_character(
            character_slot_,
        );
        
        
        ResultOfNetworkManualDeleteCharacter {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_betting(&self, amount_: i32,
p1_: Option<String>) -> ResultOfNetworkEarnFromBetting {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::network_earn_from_betting(
            amount_,
p1_.as_ref().unwrap(),
        );
        
        
        ResultOfNetworkEarnFromBetting {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_casino_collectable_completed_collection(&self, amount_: i32) -> ResultOfNetworkEarnCasinoCollectableCompletedCollection {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_casino_collectable_completed_collection(
            amount_,
        );
        
        
        ResultOfNetworkEarnCasinoCollectableCompletedCollection {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_rename_acid_lab(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendRenameAcidLab {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_rename_acid_lab(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendRenameAcidLab {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_property(&self, amount_: i32,
property_name_: u32) -> ResultOfNetworkEarnFromProperty {
    unsafe {
        let mut amount_ = amount_;
let mut property_name_ = property_name_;
        let success = sdk::natives::network_earn_from_property(
            amount_,
property_name_,
        );
        
        
        ResultOfNetworkEarnFromProperty {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_destroying_contraband(&self, p0_: i32) -> ResultOfNetworkEarnFromDestroyingContraband {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_from_destroying_contraband(
            p0_,
        );
        
        
        ResultOfNetworkEarnFromDestroyingContraband {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_collectable_item(&self, amount_: i32,
p1_: i32) -> ResultOfNetworkEarnCollectableItem {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_collectable_item(
            amount_,
p1_,
        );
        
        
        ResultOfNetworkEarnCollectableItem {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_business_product(&self, amount_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkEarnFromBusinessProduct {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_earn_from_business_product(
            amount_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkEarnFromBusinessProduct {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_buy_arcade(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendBuyArcade {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_buy_arcade(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendBuyArcade {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_nightclub_entry_fee(&self, player_: u32,
amount_: i32,
p1_: i32,
p2_: bool,
p3_: bool) -> ResultOfNetworkSpentNightclubEntryFee {
    unsafe {
        let mut player_ = player_;
let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_nightclub_entry_fee(
            player_,
amount_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentNightclubEntryFee {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_casino_generic(&self, amount_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfNetworkSpendCasinoGeneric {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spend_casino_generic(
            amount_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfNetworkSpendCasinoGeneric {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_award_fixer_mission(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnAwardFixerMission {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_award_fixer_mission(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnAwardFixerMission {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_upgrade_sub(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendUpgradeSub {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_upgrade_sub(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendUpgradeSub {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_casino_can_buy_chips_pvc(&self, ) -> ResultOfNetworkCasinoCanBuyChipsPvc {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_casino_can_buy_chips_pvc(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkCasinoCanBuyChipsPvc {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_buy_fairground_ride(&self, amount_: i32,
p1_: i32,
p2_: bool,
p3_: bool,
p4_: i32) -> ResultOfNetworkBuyFairgroundRide {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_buy_fairground_ride(
            amount_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfNetworkBuyFairgroundRide {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_sell_prize_vehicle(&self, amount_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkEarnSellPrizeVehicle {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_sell_prize_vehicle(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkEarnSellPrizeVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_upgrade_office_property(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentUpgradeOfficeProperty {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_office_property(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentUpgradeOfficeProperty {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_buy_sub(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendBuySub {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_buy_sub(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendBuySub {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_bike_shop(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendBikeShop {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_bike_shop(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendBikeShop {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_sell_bunker(&self, amount_: i32,
bunker_hash_: u32) -> ResultOfNetworkEarnFromSellBunker {
    unsafe {
        let mut amount_ = amount_;
let mut bunker_hash_ = bunker_hash_;
        let success = sdk::natives::network_earn_from_sell_bunker(
            amount_,
bunker_hash_,
        );
        
        
        ResultOfNetworkEarnFromSellBunker {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_car_club_bar(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfNetworkSpendCarClubBar {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_car_club_bar(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendCarClubBar {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_business_property_fees(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendBusinessPropertyFees {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_business_property_fees(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendBusinessPropertyFees {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_pay_match_entry_fee(&self, amount_: i32,
match_id_: Option<String>,
p2_: bool,
p3_: bool) -> ResultOfNetworkPayMatchEntryFee {
    unsafe {
        let mut amount_ = amount_;
let mut match_id_ = sdk_helpers::create_c_string_ptr(match_id_);
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_pay_match_entry_fee(
            amount_,
match_id_.as_ref().unwrap(),
p2_,
p3_,
        );
        
        
        ResultOfNetworkPayMatchEntryFee {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_interaction_menu_ability(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendInteractionMenuAbility {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_interaction_menu_ability(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendInteractionMenuAbility {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_cargo_sourcing(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOfNetworkSpentCargoSourcing {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::network_spent_cargo_sourcing(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOfNetworkSpentCargoSourcing {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_casino_award(&self, amount_: i32,
hash_: u32) -> ResultOfNetworkEarnCasinoAward {
    unsafe {
        let mut amount_ = amount_;
let mut hash_ = hash_;
        let success = sdk::natives::network_earn_casino_award(
            amount_,
hash_,
        );
        
        
        ResultOfNetworkEarnCasinoAward {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_pay_amount_to_boss(&self, p0_: i32,
p1_: i32,
amount_: i32,
p3_: i32) -> ResultOfCanPayAmountToBoss {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut amount_ = amount_;
let mut p3_ = p3_;
        let success = sdk::natives::can_pay_amount_to_boss(
            &mut native_return,
&mut p3_,
p0_,
p1_,
amount_,
        );
        let native_return = native_return;
let p3_ = p3_;
        
        ResultOfCanPayAmountToBoss {
            success,
            ret: native_return,
            p3_
        }
    }
}

    fn native_network_earn_taxi_job(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnTaxiJob {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_taxi_job(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnTaxiJob {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_robbed_by_mugger(&self, amount_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfNetworkSpentRobbedByMugger {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_robbed_by_mugger(
            amount_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentRobbedByMugger {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_purchase_club_house(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentPurchaseClubHouse {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_purchase_club_house(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentPurchaseClubHouse {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_spin_the_wheel_payment(&self, amount_: i32,
p1_: i32,
p2_: bool) -> ResultOfNetworkSpendSpinTheWheelPayment {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spend_spin_the_wheel_payment(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpendSpinTheWheelPayment {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_earned_from_bank_and_wallets(&self, amount_: i32) -> ResultOfNetworkSpendEarnedFromBankAndWallets {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
        let success = sdk::natives::network_spend_earned_from_bank_and_wallets(
            &mut native_return,
amount_,
        );
        let native_return = native_return;
        
        ResultOfNetworkSpendEarnedFromBankAndWallets {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spend_autoshop_modify(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfNetworkSpendAutoshopModify {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spend_autoshop_modify(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfNetworkSpendAutoshopModify {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_daily_stash_house_participation(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnDailyStashHouseParticipation {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_daily_stash_house_participation(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnDailyStashHouseParticipation {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_request_heist(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfNetworkSpentRequestHeist {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_request_heist(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentRequestHeist {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_heist_award(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkEarnHeistAward {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_heist_award(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkEarnHeistAward {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_pay_vehicle_insurance_premium(&self, amount_: i32,
vehicle_model_: u32,
gamer_handle_: shared::MemoryBufferId,
not_bankrupt_: bool,
has_the_money_: bool) -> ResultOfNetworkSpentPayVehicleInsurancePremium {
    unsafe {
        let mut amount_ = amount_;
let mut vehicle_model_ = vehicle_model_;
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
let mut not_bankrupt_ = not_bankrupt_;
let mut has_the_money_ = has_the_money_;
        let success = sdk::natives::network_spent_pay_vehicle_insurance_premium(
            gamer_handle_,
amount_,
vehicle_model_,
not_bankrupt_,
has_the_money_,
        );
        let gamer_handle_ = 0;
        
        ResultOfNetworkSpentPayVehicleInsurancePremium {
            success,
            ret: (),
            gamer_handle_
        }
    }
}

    fn native_network_earn_from_gangattack_pickup(&self, amount_: i32) -> ResultOfNetworkEarnFromGangattackPickup {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_from_gangattack_pickup(
            amount_,
        );
        
        
        ResultOfNetworkEarnFromGangattackPickup {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_gangops_start_strand(&self, type_: i32,
amount_: i32,
p2_: bool,
p3_: bool) -> ResultOfNetworkSpendGangopsStartStrand {
    unsafe {
        let mut type_ = type_;
let mut amount_ = amount_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_gangops_start_strand(
            type_,
amount_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendGangopsStartStrand {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_buy_mfgarage(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendBuyMfgarage {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_buy_mfgarage(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendBuyMfgarage {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_can_spend_from_bank(&self, amount_: i32) -> ResultOfNetworkGetCanSpendFromBank {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
        let success = sdk::natives::network_get_can_spend_from_bank(
            &mut native_return,
amount_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetCanSpendFromBank {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_buy_backup_gang(&self, p0_: i32,
p1_: i32,
p2_: bool,
p3_: bool) -> ResultOfNetworkBuyBackupGang {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_buy_backup_gang(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkBuyBackupGang {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_vc_wallet_balance(&self, character_slot_: i32) -> ResultOfNetworkGetVcWalletBalance {
    unsafe {
        let mut native_return = Default::default();
let mut character_slot_ = character_slot_;
        let success = sdk::natives::network_get_vc_wallet_balance(
            &mut native_return,
character_slot_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetVcWalletBalance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_earn_beach_party_lost_found(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkEarnBeachPartyLostFound {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_beach_party_lost_found(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkEarnBeachPartyLostFound {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_trade_business_property(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentTradeBusinessProperty {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_trade_business_property(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentTradeBusinessProperty {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_buy_offtheradar(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfNetworkSpentBuyOfftheradar {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_buy_offtheradar(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentBuyOfftheradar {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_bull_shark(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfNetworkSpentBullShark {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_bull_shark(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentBullShark {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_string_bank_balance(&self, ) -> ResultOfNetworkGetStringBankBalance {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
        let success = sdk::natives::network_get_string_bank_balance(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfNetworkGetStringBankBalance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spent_vehicle_export_mods(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32,
p8_: i32,
p9_: i32) -> ResultOfNetworkSpentVehicleExportMods {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::network_spent_vehicle_export_mods(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
        );
        
        
        ResultOfNetworkSpentVehicleExportMods {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_club_management_participation(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnFromClubManagementParticipation {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_from_club_management_participation(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnFromClubManagementParticipation {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_upgrade_acid_lab_armor(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfNetworkSpendUpgradeAcidLabArmor {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_upgrade_acid_lab_armor(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendUpgradeAcidLabArmor {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_street_dealer(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnStreetDealer {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_street_dealer(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnStreetDealer {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_arena_war_event_cargo(&self, amount_: i32) -> ResultOfNetworkEarnArenaWarEventCargo {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_arena_war_event_cargo(
            amount_,
        );
        
        
        ResultOfNetworkEarnArenaWarEventCargo {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_award_taxi(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnAwardTaxi {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_award_taxi(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnAwardTaxi {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_gangops_setup(&self, amount_: i32,
p1_: Option<String>) -> ResultOfNetworkEarnGangopsSetup {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::network_earn_gangops_setup(
            amount_,
p1_.as_ref().unwrap(),
        );
        
        
        ResultOfNetworkEarnGangopsSetup {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_clear_character_wallet(&self, character_slot_: i32) -> ResultOfNetworkClearCharacterWallet {
    unsafe {
        let mut character_slot_ = character_slot_;
        let success = sdk::natives::network_clear_character_wallet(
            character_slot_,
        );
        
        
        ResultOfNetworkClearCharacterWallet {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_collectables(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkEarnCollectables {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_collectables(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkEarnCollectables {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_upgrade_warehouse_property(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentUpgradeWarehouseProperty {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_warehouse_property(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentUpgradeWarehouseProperty {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_gangops_award(&self, amount_: i32,
p1_: Option<String>,
p2_: i32) -> ResultOfNetworkEarnGangopsAward {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_gangops_award(
            amount_,
p1_.as_ref().unwrap(),
p2_,
        );
        
        
        ResultOfNetworkEarnGangopsAward {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_can_spend_money(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: bool,
p4_: i32,
p5_: i32) -> ResultOfNetworkCanSpendMoney {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::network_can_spend_money(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        let native_return = native_return;
        
        ResultOfNetworkCanSpendMoney {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spent_buy_truck(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentBuyTruck {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_buy_truck(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentBuyTruck {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_casino_story_mission_reward(&self, amount_: i32) -> ResultOfNetworkEarnCasinoStoryMissionReward {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_casino_story_mission_reward(
            amount_,
        );
        
        
        ResultOfNetworkEarnCasinoStoryMissionReward {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_call_player(&self, p0_: i32,
p1_: shared::MemoryBufferId,
p2_: bool,
p3_: bool) -> ResultOfNetworkSpentCallPlayer {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_call_player(
            p1_,
p0_,
p2_,
p3_,
        );
        let p1_ = 0;
        
        ResultOfNetworkSpentCallPlayer {
            success,
            ret: (),
            p1_
        }
    }
}

    fn native_network_spent_ammo_drop(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfNetworkSpentAmmoDrop {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_ammo_drop(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentAmmoDrop {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_hangar_utility_charges(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkSpentHangarUtilityCharges {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_hangar_utility_charges(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpentHangarUtilityCharges {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_crate_drop(&self, amount_: i32) -> ResultOfNetworkEarnFromCrateDrop {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_from_crate_drop(
            amount_,
        );
        
        
        ResultOfNetworkEarnFromCrateDrop {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_hangar_staff_charges(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkSpentHangarStaffCharges {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_hangar_staff_charges(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpentHangarStaffCharges {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_prostitutes(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkSpentProstitutes {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_prostitutes(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpentProstitutes {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_job(&self, amount_: i32,
p1_: Option<String>) -> ResultOfNetworkEarnFromJob {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::network_earn_from_job(
            amount_,
p1_.as_ref().unwrap(),
        );
        
        
        ResultOfNetworkEarnFromJob {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_buy_supplies(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfNetworkSpendBuySupplies {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_buy_supplies(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendBuySupplies {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_pa_service_dancer(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentPaServiceDancer {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_pa_service_dancer(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentPaServiceDancer {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_purchase_office_garage(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentPurchaseOfficeGarage {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_purchase_office_garage(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentPurchaseOfficeGarage {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_nightclub_dancing(&self, p0_: i32) -> ResultOfNetworkEarnNightclubDancing {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_nightclub_dancing(
            p0_,
        );
        
        
        ResultOfNetworkEarnNightclubDancing {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_vehicle(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32) -> ResultOfNetworkEarnFromVehicle {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::network_earn_from_vehicle(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
        );
        
        
        ResultOfNetworkEarnFromVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_arcade_mgmt(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfNetworkSpendArcadeMgmt {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spend_arcade_mgmt(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfNetworkSpendArcadeMgmt {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_tuner_award(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkEarnTunerAward {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_tuner_award(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkEarnTunerAward {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_set_common_fields(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: bool) -> ResultOfNetworkSpendSetCommonFields {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_set_common_fields(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendSetCommonFields {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_fixer_finale(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnFixerFinale {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_fixer_finale(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnFixerFinale {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_carclub_membership(&self, p0_: i32) -> ResultOfNetworkEarnCarclubMembership {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_carclub_membership(
            p0_,
        );
        
        
        ResultOfNetworkEarnCarclubMembership {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_tuner_robbery(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfNetworkEarnTunerRobbery {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_earn_tuner_robbery(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfNetworkEarnTunerRobbery {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_purchase_warehouse_property(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentPurchaseWarehouseProperty {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_purchase_warehouse_property(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentPurchaseWarehouseProperty {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_award_random_event(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnAwardRandomEvent {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_award_random_event(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnAwardRandomEvent {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_hidden(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendHidden {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_hidden(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendHidden {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_upgrade_autoshop(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnUpgradeAutoshop {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_upgrade_autoshop(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnUpgradeAutoshop {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_import_export_repair(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkSpentImportExportRepair {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_import_export_repair(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpentImportExportRepair {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_award_daily_stash(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnAwardDailyStash {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_award_daily_stash(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnAwardDailyStash {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_fooligan_job_participation(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnFooliganJobParticipation {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_fooligan_job_participation(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnFooliganJobParticipation {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_fmbb_phonecall_mission(&self, p0_: i32) -> ResultOfNetworkEarnFromFmbbPhonecallMission {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_from_fmbb_phonecall_mission(
            p0_,
        );
        
        
        ResultOfNetworkEarnFromFmbbPhonecallMission {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_autoshop_income(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnAutoshopIncome {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_autoshop_income(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnAutoshopIncome {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_nightclub_and_warehouse(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32) -> ResultOfNetworkEarnNightclubAndWarehouse {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::network_earn_nightclub_and_warehouse(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        
        
        ResultOfNetworkEarnNightclubAndWarehouse {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_premium_job(&self, amount_: i32,
p1_: Option<String>) -> ResultOfNetworkEarnFromPremiumJob {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::network_earn_from_premium_job(
            amount_,
p1_.as_ref().unwrap(),
        );
        
        
        ResultOfNetworkEarnFromPremiumJob {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_casino_club(&self, amount1_: i32,
p1_: i32,
p2_: bool,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
amount2_: i32,
p8_: i32) -> ResultOfNetworkSpendCasinoClub {
    unsafe {
        let mut amount1_ = amount1_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut amount2_ = amount2_;
let mut p8_ = p8_;
        let success = sdk::natives::network_spend_casino_club(
            amount1_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
amount2_,
p8_,
        );
        
        
        ResultOfNetworkSpendCasinoClub {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_bank_interest(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkSpentBankInterest {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_bank_interest(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpentBankInterest {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_sell_participation_acid_lab(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnSellParticipationAcidLab {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_sell_participation_acid_lab(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnSellParticipationAcidLab {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_daily_stash_house_completed(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnDailyStashHouseCompleted {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_daily_stash_house_completed(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnDailyStashHouseCompleted {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_dar_challenge(&self, amount_: i32,
p1_: i32) -> ResultOfNetworkEarnDarChallenge {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_dar_challenge(
            amount_,
p1_,
        );
        
        
        ResultOfNetworkEarnDarChallenge {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_purchase_hangar(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentPurchaseHangar {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_purchase_hangar(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentPurchaseHangar {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_defer_cash_transactions_until_shop_save(&self, ) -> ResultOfNetworkDeferCashTransactionsUntilShopSave {
    unsafe {
        
        let success = sdk::natives::network_defer_cash_transactions_until_shop_save(
            
        );
        
        
        ResultOfNetworkDeferCashTransactionsUntilShopSave {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_move_submarine(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkSpentMoveSubmarine {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_move_submarine(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpentMoveSubmarine {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_goon(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkEarnGoon {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_goon(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkEarnGoon {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_fooligan_job(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnFooliganJob {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_fooligan_job(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnFooliganJob {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_upgrade_mfgarage(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendUpgradeMfgarage {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_upgrade_mfgarage(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendUpgradeMfgarage {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_award_dead_drop(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnAwardDeadDrop {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_award_dead_drop(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnAwardDeadDrop {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_upgrade_agency(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnUpgradeAgency {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_upgrade_agency(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnUpgradeAgency {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_award_acid_lab(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnAwardAcidLab {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_award_acid_lab(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnAwardAcidLab {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_car_club_takeover(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendCarClubTakeover {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_car_club_takeover(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendCarClubTakeover {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_island_heist(&self, amount1_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
amount2_: i32,
p5_: i32) -> ResultOfNetworkEarnIslandHeist {
    unsafe {
        let mut amount1_ = amount1_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut amount2_ = amount2_;
let mut p5_ = p5_;
        let success = sdk::natives::network_earn_island_heist(
            amount1_,
p1_,
p2_,
p3_,
amount2_,
p5_,
        );
        
        
        ResultOfNetworkEarnIslandHeist {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_arcade(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfNetworkEarnArcade {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_earn_arcade(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfNetworkEarnArcade {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_casino_heist(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32,
p8_: i32,
p9_: i32,
p10_: i32) -> ResultOfNetworkSpendCasinoHeist {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
        let success = sdk::natives::network_spend_casino_heist(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
        );
        
        
        ResultOfNetworkSpendCasinoHeist {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_no_cops(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfNetworkSpentNoCops {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_no_cops(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentNoCops {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_mc_ability(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfNetworkSpentMcAbility {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spent_mc_ability(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfNetworkSpentMcAbility {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_comp_suv(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendCompSuv {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_comp_suv(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendCompSuv {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_wager(&self, p0_: i32,
p1_: i32,
amount_: i32) -> ResultOfNetworkSpentWager {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut amount_ = amount_;
        let success = sdk::natives::network_spent_wager(
            p0_,
p1_,
amount_,
        );
        
        
        ResultOfNetworkSpentWager {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_buy_healthcare(&self, cost_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkBuyHealthcare {
    unsafe {
        let mut cost_ = cost_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_buy_healthcare(
            cost_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkBuyHealthcare {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_holdups(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkSpentHoldups {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_holdups(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpentHoldups {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_source_bike(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendSourceBike {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_source_bike(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendSourceBike {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_gangops_skip_mission(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendGangopsSkipMission {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_gangops_skip_mission(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendGangopsSkipMission {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_boss(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkSpendBoss {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spend_boss(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpendBoss {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_can_spend_from_bank_and_wallet(&self, amount_: i32,
character_slot_: i32) -> ResultOfNetworkGetCanSpendFromBankAndWallet {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
let mut character_slot_ = character_slot_;
        let success = sdk::natives::network_get_can_spend_from_bank_and_wallet(
            &mut native_return,
amount_,
character_slot_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetCanSpendFromBankAndWallet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spend_nightclub_bar_drink(&self, amount_: i32,
p1_: i32,
p2_: bool,
p3_: bool) -> ResultOfNetworkSpendNightclubBarDrink {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_nightclub_bar_drink(
            amount_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendNightclubBarDrink {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_upgrade_autoshop(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendUpgradeAutoshop {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_upgrade_autoshop(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendUpgradeAutoshop {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_award_juggalo_mission(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnAwardJuggaloMission {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_award_juggalo_mission(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnAwardJuggaloMission {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_yatch_mission(&self, amount_: i32,
p1_: i32) -> ResultOfNetworkEarnYatchMission {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_yatch_mission(
            amount_,
p1_,
        );
        
        
        ResultOfNetworkEarnYatchMission {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_jobx2(&self, amount_: i32,
p1_: Option<String>) -> ResultOfNetworkEarnFromJobx2 {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::network_earn_from_jobx2(
            amount_,
p1_.as_ref().unwrap(),
        );
        
        
        ResultOfNetworkEarnFromJobx2 {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_smuggler_agency(&self, amount_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkEarnSmugglerAgency {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_earn_smuggler_agency(
            amount_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkEarnSmugglerAgency {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_rc_time_trial(&self, amount_: i32) -> ResultOfNetworkEarnRcTimeTrial {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_rc_time_trial(
            amount_,
        );
        
        
        ResultOfNetworkEarnRcTimeTrial {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_juggalo_story_mission(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnJuggaloStoryMission {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_juggalo_story_mission(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnJuggaloStoryMission {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_arena_skill_level_progression(&self, amount_: i32,
p1_: i32) -> ResultOfNetworkEarnArenaSkillLevelProgression {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_arena_skill_level_progression(
            amount_,
p1_,
        );
        
        
        ResultOfNetworkEarnArenaSkillLevelProgression {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_nightclub(&self, p0_: i32) -> ResultOfNetworkEarnNightclub {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_nightclub(
            p0_,
        );
        
        
        ResultOfNetworkEarnNightclub {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_vc_withdrawal_completed(&self, p0_: i32) -> ResultOfHasVcWithdrawalCompleted {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::has_vc_withdrawal_completed(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfHasVcWithdrawalCompleted {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spent_buy_wantedlevel(&self, p0_: i32,
p1_: shared::MemoryBufferId,
p2_: bool,
p3_: bool,
p4_: i32) -> ResultOfNetworkSpentBuyWantedlevel {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spent_buy_wantedlevel(
            p1_,
p0_,
p2_,
p3_,
p4_,
        );
        let p1_ = 0;
        
        ResultOfNetworkSpentBuyWantedlevel {
            success,
            ret: (),
            p1_
        }
    }
}

    fn native_network_spent_pa_service_impound(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkSpentPaServiceImpound {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_pa_service_impound(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpentPaServiceImpound {
            success,
            ret: (),
            
        }
    }
}

    fn native_deposit_vc(&self, amount_: i32) -> ResultOfDepositVc {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
        let success = sdk::natives::deposit_vc(
            &mut native_return,
amount_,
        );
        let native_return = native_return;
        
        ResultOfDepositVc {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spent_rdr_hatchet_bonus(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkSpentRdrHatchetBonus {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_rdr_hatchet_bonus(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpentRdrHatchetBonus {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_agency_phone(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkEarnAgencyPhone {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_agency_phone(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkEarnAgencyPhone {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_island_heist_dj_mission(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnFromIslandHeistDjMission {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_from_island_heist_dj_mission(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnFromIslandHeistDjMission {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_dispatch_call(&self, amount_: i32,
p1_: i32) -> ResultOfNetworkEarnDispatchCall {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_dispatch_call(
            amount_,
p1_,
        );
        
        
        ResultOfNetworkEarnDispatchCall {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_setup_participation_acid_lab(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnSetupParticipationAcidLab {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_setup_participation_acid_lab(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnSetupParticipationAcidLab {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_hire_mugger(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfNetworkSpentHireMugger {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_hire_mugger(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentHireMugger {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_make_it_rain(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkSpendMakeItRain {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spend_make_it_rain(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpendMakeItRain {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_hire_mercenary(&self, p0_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfNetworkSpentHireMercenary {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_hire_mercenary(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentHireMercenary {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_move_yacht(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkSpentMoveYacht {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_move_yacht(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpentMoveYacht {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_island_heist(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendIslandHeist {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_island_heist(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendIslandHeist {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_hacker_truck(&self, p0_: i32,
amount_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkEarnHackerTruck {
    unsafe {
        let mut p0_ = p0_;
let mut amount_ = amount_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_earn_hacker_truck(
            p0_,
amount_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkEarnHackerTruck {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_order_bodyguard_vehicle(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentOrderBodyguardVehicle {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_order_bodyguard_vehicle(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentOrderBodyguardVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_remaining_transfer_balance(&self, ) -> ResultOfNetworkGetRemainingTransferBalance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_remaining_transfer_balance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetRemainingTransferBalance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spend_buy_agency(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendBuyAgency {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_buy_agency(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendBuyAgency {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_play_arcade(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfNetworkSpendPlayArcade {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spend_play_arcade(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfNetworkSpendPlayArcade {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_supply(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendSupply {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_supply(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendSupply {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_carwash(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: bool,
p4_: bool) -> ResultOfNetworkSpentCarwash {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_spent_carwash(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfNetworkSpentCarwash {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_contraband(&self, amount_: i32,
p1_: i32) -> ResultOfNetworkEarnFromContraband {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_from_contraband(
            amount_,
p1_,
        );
        
        
        ResultOfNetworkEarnFromContraband {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_pickup(&self, amount_: i32) -> ResultOfNetworkEarnFromPickup {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_from_pickup(
            amount_,
        );
        
        
        ResultOfNetworkEarnFromPickup {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_gangops_prep_participation(&self, amount_: i32) -> ResultOfNetworkEarnGangopsPrepParticipation {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_gangops_prep_participation(
            amount_,
        );
        
        
        ResultOfNetworkEarnGangopsPrepParticipation {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_casino_sell_chips(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkCasinoSellChips {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_casino_sell_chips(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfNetworkCasinoSellChips {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_can_spend_from_wallet(&self, amount_: i32,
character_slot_: i32) -> ResultOfNetworkGetCanSpendFromWallet {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
let mut character_slot_ = character_slot_;
        let success = sdk::natives::network_get_can_spend_from_wallet(
            &mut native_return,
amount_,
character_slot_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetCanSpendFromWallet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_spent_pa_service_vehicle(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentPaServiceVehicle {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_pa_service_vehicle(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentPaServiceVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_purchase_nightclub_and_warehouse(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentPurchaseNightclubAndWarehouse {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_purchase_nightclub_and_warehouse(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentPurchaseNightclubAndWarehouse {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_vehicle_export(&self, amount_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkEarnFromVehicleExport {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_from_vehicle_export(
            amount_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkEarnFromVehicleExport {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_in_stripclub(&self, p0_: i32,
p1_: bool,
p2_: i32,
p3_: bool) -> ResultOfNetworkSpentInStripclub {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_in_stripclub(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentInStripclub {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_buy_autoshop(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendBuyAutoshop {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_buy_autoshop(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendBuyAutoshop {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_buy_item(&self, amount_: i32,
item_: u32,
p2_: i32,
p3_: i32,
p4_: bool,
item_name_: Option<String>,
p6_: i32,
p7_: i32,
p8_: i32,
p9_: bool) -> ResultOfNetworkBuyItem {
    unsafe {
        let mut amount_ = amount_;
let mut item_ = item_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut item_name_ = sdk_helpers::create_c_string_ptr(item_name_);
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::network_buy_item(
            amount_,
item_,
p2_,
p3_,
p4_,
item_name_.as_ref().unwrap(),
p6_,
p7_,
p8_,
p9_,
        );
        
        
        ResultOfNetworkBuyItem {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spend_buy_acid_lab(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpendBuyAcidLab {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_buy_acid_lab(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendBuyAcidLab {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_fixer_agency_short_trip(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkEarnFixerAgencyShortTrip {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_earn_fixer_agency_short_trip(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkEarnFixerAgencyShortTrip {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_rob_armored_cars(&self, amount_: i32) -> ResultOfNetworkEarnFromRobArmoredCars {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_from_rob_armored_cars(
            amount_,
        );
        
        
        ResultOfNetworkEarnFromRobArmoredCars {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_casino_can_bet_amount(&self, p0_: i32) -> ResultOfNetworkCasinoCanBetAmount {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_casino_can_bet_amount(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkCasinoCanBetAmount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_earn_bounty_hunter_reward(&self, p0_: i32) -> ResultOfNetworkEarnBountyHunterReward {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_bounty_hunter_reward(
            p0_,
        );
        
        
        ResultOfNetworkEarnBountyHunterReward {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_rehire_dj(&self, amount_: i32,
p1_: i32,
p2_: bool,
p3_: bool) -> ResultOfNetworkSpentRehireDj {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_rehire_dj(
            amount_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentRehireDj {
            success,
            ret: (),
            
        }
    }
}

    fn native_withdraw_vc(&self, amount_: i32) -> ResultOfWithdrawVc {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
        let success = sdk::natives::withdraw_vc(
            &mut native_return,
amount_,
        );
        let native_return = native_return;
        
        ResultOfWithdrawVc {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_earn_from_import_export(&self, amount_: i32,
model_hash_: u32) -> ResultOfNetworkEarnFromImportExport {
    unsafe {
        let mut amount_ = amount_;
let mut model_hash_ = model_hash_;
        let success = sdk::natives::network_earn_from_import_export(
            amount_,
model_hash_,
        );
        
        
        ResultOfNetworkEarnFromImportExport {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_string_wallet_balance(&self, character_slot_: i32) -> ResultOfNetworkGetStringWalletBalance {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut character_slot_ = character_slot_;
        let success = sdk::natives::network_get_string_wallet_balance(
            native_return.pin_mut(),
character_slot_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfNetworkGetStringWalletBalance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_refund_cash(&self, index_: i32,
context_: Option<String>,
reason_: Option<String>,
p3_: bool) -> ResultOfNetworkRefundCash {
    unsafe {
        let mut index_ = index_;
let mut context_ = sdk_helpers::create_c_string_ptr(context_);
let mut reason_ = sdk_helpers::create_c_string_ptr(reason_);
let mut p3_ = p3_;
        let success = sdk::natives::network_refund_cash(
            index_,
context_.as_ref().unwrap(),
reason_.as_ref().unwrap(),
p3_,
        );
        
        
        ResultOfNetworkRefundCash {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_from_criminal_mastermind(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkEarnFromCriminalMastermind {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_earn_from_criminal_mastermind(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkEarnFromCriminalMastermind {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_upgrade_club_house(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSpentUpgradeClubHouse {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spent_upgrade_club_house(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpentUpgradeClubHouse {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_assassinate_target_killed(&self, amount_: i32) -> ResultOfNetworkEarnAssassinateTargetKilled {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_assassinate_target_killed(
            amount_,
        );
        
        
        ResultOfNetworkEarnAssassinateTargetKilled {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_give_player_jobshare_cash(&self, amount_: i32,
gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkGivePlayerJobshareCash {
    unsafe {
        let mut amount_ = amount_;
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_give_player_jobshare_cash(
            gamer_handle_,
amount_,
        );
        let gamer_handle_ = 0;
        
        ResultOfNetworkGivePlayerJobshareCash {
            success,
            ret: (),
            gamer_handle_
        }
    }
}

    fn native_network_get_player_is_high_earner(&self, ) -> ResultOfNetworkGetPlayerIsHighEarner {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_player_is_high_earner(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetPlayerIsHighEarner {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_earn_from_ambient_job(&self, p0_: i32,
p1_: Option<String>,
p2_: shared::MemoryBufferId) -> ResultOfNetworkEarnFromAmbientJob {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = self.memory_buffers.borrow_mut().get_mut_ptr(p2_) as *mut c_void;
        let success = sdk::natives::network_earn_from_ambient_job(
            p2_,
p0_,
p1_.as_ref().unwrap(),
        );
        let p2_ = 0;
        
        ResultOfNetworkEarnFromAmbientJob {
            success,
            ret: (),
            p2_
        }
    }
}

    fn native_network_spend_casino_membership(&self, amount_: i32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfNetworkSpendCasinoMembership {
    unsafe {
        let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_spend_casino_membership(
            amount_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSpendCasinoMembership {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_rename_organization(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkSpentRenameOrganization {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_rename_organization(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkSpentRenameOrganization {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_bb_event_bonus(&self, amount_: i32) -> ResultOfNetworkEarnBbEventBonus {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::network_earn_bb_event_bonus(
            amount_,
        );
        
        
        ResultOfNetworkEarnBbEventBonus {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_earn_daily_vehicle_bonus(&self, p0_: i32) -> ResultOfNetworkEarnDailyVehicleBonus {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_daily_vehicle_bonus(
            p0_,
        );
        
        
        ResultOfNetworkEarnDailyVehicleBonus {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_spent_boss_goon(&self, amount_: i32,
p1_: bool,
p2_: bool) -> ResultOfNetworkSpentBossGoon {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_spent_boss_goon(
            &mut native_return,
amount_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfNetworkSpentBossGoon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_earn_fmbb_wage_bonus(&self, p0_: i32) -> ResultOfNetworkEarnFmbbWageBonus {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_earn_fmbb_wage_bonus(
            p0_,
        );
        
        
        ResultOfNetworkEarnFmbbWageBonus {
            success,
            ret: (),
            
        }
    }
}

    fn native_net_gameserver_retrieve_init_session_status(&self, p0_: i32) -> ResultOfNetGameserverRetrieveInitSessionStatus {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::net_gameserver_retrieve_init_session_status(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOfNetGameserverRetrieveInitSessionStatus {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_net_gameserver_delete_character_get_status(&self, ) -> ResultOfNetGameserverDeleteCharacterGetStatus {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_delete_character_get_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverDeleteCharacterGetStatus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_delete_set_telemetry_nonce_seed(&self, ) -> ResultOfNetGameserverDeleteSetTelemetryNonceSeed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_delete_set_telemetry_nonce_seed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverDeleteSetTelemetryNonceSeed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_retrieve_start_session_status(&self, p0_: i32) -> ResultOfNetGameserverRetrieveStartSessionStatus {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::net_gameserver_retrieve_start_session_status(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOfNetGameserverRetrieveStartSessionStatus {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_net_gameserver_transfer_bank_to_wallet_get_status(&self, ) -> ResultOfNetGameserverTransferBankToWalletGetStatus {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_transfer_bank_to_wallet_get_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverTransferBankToWalletGetStatus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_catalog_item_key_is_valid(&self, hash_: u32) -> ResultOfNetGameserverCatalogItemKeyIsValid {
    unsafe {
        let mut native_return = Default::default();
let mut hash_ = hash_;
        let success = sdk::natives::net_gameserver_catalog_item_key_is_valid(
            &mut native_return,
hash_,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverCatalogItemKeyIsValid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_basket_start(&self, transaction_id_: i32,
category_hash_: u32,
action_hash_: u32,
flags_: i32) -> ResultOfNetGameserverBasketStart {
    unsafe {
        let mut native_return = Default::default();
let mut transaction_id_ = transaction_id_;
let mut category_hash_ = category_hash_;
let mut action_hash_ = action_hash_;
let mut flags_ = flags_;
        let success = sdk::natives::net_gameserver_basket_start(
            &mut native_return,
&mut transaction_id_,
category_hash_,
action_hash_,
flags_,
        );
        let native_return = native_return;
let transaction_id_ = transaction_id_;
        
        ResultOfNetGameserverBasketStart {
            success,
            ret: native_return,
            transaction_id_
        }
    }
}

    fn native_net_gameserver_basket_is_full(&self, ) -> ResultOfNetGameserverBasketIsFull {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_basket_is_full(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverBasketIsFull {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_is_catalog_current(&self, ) -> ResultOfNetGameserverIsCatalogCurrent {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_is_catalog_current(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverIsCatalogCurrent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_session_apply_received_data(&self, char_slot_: i32) -> ResultOfNetGameserverSessionApplyReceivedData {
    unsafe {
        let mut native_return = Default::default();
let mut char_slot_ = char_slot_;
        let success = sdk::natives::net_gameserver_session_apply_received_data(
            &mut native_return,
char_slot_,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverSessionApplyReceivedData {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_transfer_wallet_to_bank_get_status(&self, ) -> ResultOfNetGameserverTransferWalletToBankGetStatus {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_transfer_wallet_to_bank_get_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverTransferWalletToBankGetStatus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_refresh_server_catalog(&self, ) -> ResultOfNetGameserverRefreshServerCatalog {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_refresh_server_catalog(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverRefreshServerCatalog {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_start_session_restart(&self, inventory_: bool,
playerbalance_: bool) -> ResultOfNetGameserverStartSessionRestart {
    unsafe {
        let mut native_return = Default::default();
let mut inventory_ = inventory_;
let mut playerbalance_ = playerbalance_;
        let success = sdk::natives::net_gameserver_start_session_restart(
            &mut native_return,
inventory_,
playerbalance_,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverStartSessionRestart {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_checkout_start(&self, transaction_id_: i32) -> ResultOfNetGameserverCheckoutStart {
    unsafe {
        let mut native_return = Default::default();
let mut transaction_id_ = transaction_id_;
        let success = sdk::natives::net_gameserver_checkout_start(
            &mut native_return,
transaction_id_,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverCheckoutStart {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_catalog_is_valid(&self, ) -> ResultOfNetGameserverCatalogIsValid {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_catalog_is_valid(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverCatalogIsValid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_begin_service(&self, transaction_id_: i32,
category_hash_: u32,
item_hash_: u32,
action_type_hash_: u32,
value_: i32,
flags_: i32) -> ResultOfNetGameserverBeginService {
    unsafe {
        let mut native_return = Default::default();
let mut transaction_id_ = transaction_id_;
let mut category_hash_ = category_hash_;
let mut item_hash_ = item_hash_;
let mut action_type_hash_ = action_type_hash_;
let mut value_ = value_;
let mut flags_ = flags_;
        let success = sdk::natives::net_gameserver_begin_service(
            &mut native_return,
&mut transaction_id_,
category_hash_,
item_hash_,
action_type_hash_,
value_,
flags_,
        );
        let native_return = native_return;
let transaction_id_ = transaction_id_;
        
        ResultOfNetGameserverBeginService {
            success,
            ret: native_return,
            transaction_id_
        }
    }
}

    fn native_net_gameserver_transfer_cash_set_telemetry_nonce_seed(&self, ) -> ResultOfNetGameserverTransferCashSetTelemetryNonceSeed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_transfer_cash_set_telemetry_nonce_seed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverTransferCashSetTelemetryNonceSeed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_delete_character(&self, slot_: i32,
transfer_: bool,
reason_: u32) -> ResultOfNetGameserverDeleteCharacter {
    unsafe {
        let mut native_return = Default::default();
let mut slot_ = slot_;
let mut transfer_ = transfer_;
let mut reason_ = reason_;
        let success = sdk::natives::net_gameserver_delete_character(
            &mut native_return,
slot_,
transfer_,
reason_,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverDeleteCharacter {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_transaction_in_progress(&self, ) -> ResultOfNetGameserverTransactionInProgress {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_transaction_in_progress(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverTransactionInProgress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_start_session_pending(&self, ) -> ResultOfNetGameserverStartSessionPending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_start_session_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverStartSessionPending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_clear_session(&self, p0_: i32) -> ResultOfNetGameserverClearSession {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::net_gameserver_clear_session(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverClearSession {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_use_server_transactions(&self, ) -> ResultOfNetGameserverUseServerTransactions {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_use_server_transactions(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverUseServerTransactions {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_is_session_refresh_pending(&self, ) -> ResultOfNetGameserverIsSessionRefreshPending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_is_session_refresh_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverIsSessionRefreshPending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_get_catalog_cloud_crc(&self, ) -> ResultOfNetGameserverGetCatalogCloudCrc {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_get_catalog_cloud_crc(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverGetCatalogCloudCrc {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_get_session_state_and_status(&self, p0_: i32,
p1_: bool) -> ResultOfNetGameserverGetSessionStateAndStatus {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::net_gameserver_get_session_state_and_status(
            &mut native_return,
&mut p0_,
&mut p1_,
        );
        let native_return = native_return;
let p0_ = p0_;
let p1_ = p1_;
        
        ResultOfNetGameserverGetSessionStateAndStatus {
            success,
            ret: native_return,
            p0_,
p1_
        }
    }
}

    fn native_net_gameserver_set_telemetry_nonce_seed(&self, p0_: i32) -> ResultOfNetGameserverSetTelemetryNonceSeed {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::net_gameserver_set_telemetry_nonce_seed(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverSetTelemetryNonceSeed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_start_session(&self, char_slot_: i32) -> ResultOfNetGameserverStartSession {
    unsafe {
        let mut native_return = Default::default();
let mut char_slot_ = char_slot_;
        let success = sdk::natives::net_gameserver_start_session(
            &mut native_return,
char_slot_,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverStartSession {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_basket_is_active(&self, ) -> ResultOfNetGameserverBasketIsActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_basket_is_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverBasketIsActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_is_session_valid(&self, char_slot_: i32) -> ResultOfNetGameserverIsSessionValid {
    unsafe {
        let mut native_return = Default::default();
let mut char_slot_ = char_slot_;
        let success = sdk::natives::net_gameserver_is_session_valid(
            &mut native_return,
char_slot_,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverIsSessionValid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_catalog_item_is_valid(&self, name_: Option<String>) -> ResultOfNetGameserverCatalogItemIsValid {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::net_gameserver_catalog_item_is_valid(
            &mut native_return,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfNetGameserverCatalogItemIsValid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_retrieve_session_error_code(&self, p0_: i32) -> ResultOfNetGameserverRetrieveSessionErrorCode {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::net_gameserver_retrieve_session_error_code(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOfNetGameserverRetrieveSessionErrorCode {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_net_gameserver_get_price(&self, item_hash_: u32,
category_hash_: u32,
p2_: bool) -> ResultOfNetGameserverGetPrice {
    unsafe {
        let mut native_return = Default::default();
let mut item_hash_ = item_hash_;
let mut category_hash_ = category_hash_;
let mut p2_ = p2_;
        let success = sdk::natives::net_gameserver_get_price(
            &mut native_return,
item_hash_,
category_hash_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverGetPrice {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_transfer_wallet_to_bank(&self, char_slot_: i32,
amount_: i32) -> ResultOfNetGameserverTransferWalletToBank {
    unsafe {
        let mut native_return = Default::default();
let mut char_slot_ = char_slot_;
let mut amount_ = amount_;
        let success = sdk::natives::net_gameserver_transfer_wallet_to_bank(
            &mut native_return,
char_slot_,
amount_,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverTransferWalletToBank {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_retrieve_catalog_refresh_status(&self, state_: i32) -> ResultOfNetGameserverRetrieveCatalogRefreshStatus {
    unsafe {
        let mut native_return = Default::default();
let mut state_ = state_;
        let success = sdk::natives::net_gameserver_retrieve_catalog_refresh_status(
            &mut native_return,
&mut state_,
        );
        let native_return = native_return;
let state_ = state_;
        
        ResultOfNetGameserverRetrieveCatalogRefreshStatus {
            success,
            ret: native_return,
            state_
        }
    }
}

    fn native_net_gameserver_transfer_bank_to_wallet(&self, char_slot_: i32,
amount_: i32) -> ResultOfNetGameserverTransferBankToWallet {
    unsafe {
        let mut native_return = Default::default();
let mut char_slot_ = char_slot_;
let mut amount_ = amount_;
        let success = sdk::natives::net_gameserver_transfer_bank_to_wallet(
            &mut native_return,
char_slot_,
amount_,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverTransferBankToWallet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_basket_apply_server_data(&self, p0_: i32,
p1_: shared::MemoryBufferId) -> ResultOfNetGameserverBasketApplyServerData {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
        let success = sdk::natives::net_gameserver_basket_apply_server_data(
            &mut native_return,
p1_,
p0_,
        );
        let native_return = native_return;
let p1_ = 0;
        
        ResultOfNetGameserverBasketApplyServerData {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_net_gameserver_end_service(&self, transaction_id_: i32) -> ResultOfNetGameserverEndService {
    unsafe {
        let mut native_return = Default::default();
let mut transaction_id_ = transaction_id_;
        let success = sdk::natives::net_gameserver_end_service(
            &mut native_return,
transaction_id_,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverEndService {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_init_session(&self, ) -> ResultOfNetGameserverInitSession {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_init_session(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverInitSession {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_gameserver_basket_add_item(&self, item_data_: shared::MemoryBufferId,
quantity_: i32) -> ResultOfNetGameserverBasketAddItem {
    unsafe {
        let mut native_return = Default::default();
let mut item_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(item_data_) as *mut c_void;
let mut quantity_ = quantity_;
        let success = sdk::natives::net_gameserver_basket_add_item(
            &mut native_return,
item_data_,
quantity_,
        );
        let native_return = native_return;
let item_data_ = 0;
        
        ResultOfNetGameserverBasketAddItem {
            success,
            ret: native_return,
            item_data_
        }
    }
}

    fn native_net_gameserver_basket_end(&self, ) -> ResultOfNetGameserverBasketEnd {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::net_gameserver_basket_end(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetGameserverBasketEnd {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_time_offset(&self, time_a_: i32,
time_b_: i32) -> ResultOfGetTimeOffset {
    unsafe {
        let mut native_return = Default::default();
let mut time_a_ = time_a_;
let mut time_b_ = time_b_;
        let success = sdk::natives::get_time_offset(
            &mut native_return,
time_a_,
time_b_,
        );
        let native_return = native_return;
        
        ResultOfGetTimeOffset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_platform_party_member_count(&self, ) -> ResultOfNetworkGetPlatformPartyMemberCount {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_platform_party_member_count(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetPlatformPartyMemberCount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_control_of_entity(&self, entity_: u32) -> ResultOfNetworkHasControlOfEntity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::network_has_control_of_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfNetworkHasControlOfEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_can_send_local_invite(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkCanSendLocalInvite {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_can_send_local_invite(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkCanSendLocalInvite {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_cancel_transition_matchmaking(&self, ) -> ResultOfNetworkCancelTransitionMatchmaking {
    unsafe {
        
        let success = sdk::natives::network_cancel_transition_matchmaking(
            
        );
        
        
        ResultOfNetworkCancelTransitionMatchmaking {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_should_show_promotion_alert_screen(&self, ) -> ResultOfNetworkShouldShowPromotionAlertScreen {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_should_show_promotion_alert_screen(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkShouldShowPromotionAlertScreen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_gamer_status_result(&self, p0_: shared::MemoryBufferId,
p1_: i32) -> ResultOfNetworkGetGamerStatusResult {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = p1_;
        let success = sdk::natives::network_get_gamer_status_result(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfNetworkGetGamerStatusResult {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_ugc_has_get_finished(&self, ) -> ResultOfUgcHasGetFinished {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_has_get_finished(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfUgcHasGetFinished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_local_scene_from_network_id(&self, net_id_: i32) -> ResultOfNetworkGetLocalSceneFromNetworkId {
    unsafe {
        let mut native_return = Default::default();
let mut net_id_ = net_id_;
        let success = sdk::natives::network_get_local_scene_from_network_id(
            &mut native_return,
net_id_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetLocalSceneFromNetworkId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_player_talking(&self, player_: u32) -> ResultOfNetworkIsPlayerTalking {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_is_player_talking(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsPlayerTalking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_object_can_blend_when_fixed(&self, object_: u32,
toggle_: bool) -> ResultOfNetworkSetObjectCanBlendWhenFixed {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_object_can_blend_when_fixed(
            object_,
toggle_,
        );
        
        
        ResultOfNetworkSetObjectCanBlendWhenFixed {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_clear_invalid_object_models(&self, ) -> ResultOfNetworkClearInvalidObjectModels {
    unsafe {
        
        let success = sdk::natives::network_clear_invalid_object_models(
            
        );
        
        
        ResultOfNetworkClearInvalidObjectModels {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_reserve_slots_transition(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkSessionReserveSlotsTransition {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_session_reserve_slots_transition(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionReserveSlotsTransition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_primary_clan_data_cancel(&self, ) -> ResultOfNetworkGetPrimaryClanDataCancel {
    unsafe {
        
        let success = sdk::natives::network_get_primary_clan_data_cancel(
            
        );
        
        
        ResultOfNetworkGetPrimaryClanDataCancel {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_tunable_cloud_request_pending(&self, ) -> ResultOfNetworkIsTunableCloudRequestPending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_tunable_cloud_request_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsTunableCloudRequestPending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_in_spectator_mode(&self, ) -> ResultOfNetworkIsInSpectatorMode {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_in_spectator_mode(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsInSpectatorMode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_transition_finish(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkTransitionFinish {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_transition_finish(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfNetworkTransitionFinish {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_random_float_ranged(&self, range_start_: f32,
range_end_: f32) -> ResultOfNetworkGetRandomFloatRanged {
    unsafe {
        let mut native_return = Default::default();
let mut range_start_ = range_start_;
let mut range_end_ = range_end_;
        let success = sdk::natives::network_get_random_float_ranged(
            &mut native_return,
range_start_,
range_end_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetRandomFloatRanged {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_activity_session(&self, ) -> ResultOfNetworkIsActivitySession {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_activity_session(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsActivitySession {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_signed_in(&self, ) -> ResultOfNetworkIsSignedIn {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_signed_in(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsSignedIn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clear_followers(&self, ) -> ResultOfNetworkClearFollowers {
    unsafe {
        
        let success = sdk::natives::network_clear_followers(
            
        );
        
        
        ResultOfNetworkClearFollowers {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_register_entity_as_networked(&self, entity_: u32) -> ResultOfNetworkRegisterEntityAsNetworked {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::network_register_entity_as_networked(
            entity_,
        );
        
        
        ResultOfNetworkRegisterEntityAsNetworked {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_can_play_multiplayer_with_gamer(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkCanPlayMultiplayerWithGamer {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_can_play_multiplayer_with_gamer(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkCanPlayMultiplayerWithGamer {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_check_text_communication_privileges(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkCheckTextCommunicationPrivileges {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_check_text_communication_privileges(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfNetworkCheckTextCommunicationPrivileges {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_facebook_post_completed_heist(&self, heist_name_: Option<String>,
cash_earned_: i32,
xp_earned_: i32) -> ResultOfFacebookPostCompletedHeist {
    unsafe {
        let mut native_return = Default::default();
let mut heist_name_ = sdk_helpers::create_c_string_ptr(heist_name_);
let mut cash_earned_ = cash_earned_;
let mut xp_earned_ = xp_earned_;
        let success = sdk::natives::facebook_post_completed_heist(
            &mut native_return,
heist_name_.as_ref().unwrap(),
cash_earned_,
xp_earned_,
        );
        let native_return = native_return;
        
        ResultOfFacebookPostCompletedHeist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_entity_is_local(&self, entity_: u32) -> ResultOfNetworkGetEntityIsLocal {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::network_get_entity_is_local(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetEntityIsLocal {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_register_mission_pickups(&self, amount_: i32) -> ResultOfCanRegisterMissionPickups {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
        let success = sdk::natives::can_register_mission_pickups(
            &mut native_return,
amount_,
        );
        let native_return = native_return;
        
        ResultOfCanRegisterMissionPickups {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_facebook_post_completed_milestone(&self, milestone_id_: i32) -> ResultOfFacebookPostCompletedMilestone {
    unsafe {
        let mut native_return = Default::default();
let mut milestone_id_ = milestone_id_;
        let success = sdk::natives::facebook_post_completed_milestone(
            &mut native_return,
milestone_id_,
        );
        let native_return = native_return;
        
        ResultOfFacebookPostCompletedMilestone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_max_num_network_vehicles(&self, ) -> ResultOfGetMaxNumNetworkVehicles {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_max_num_network_vehicles(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetMaxNumNetworkVehicles {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_cloud_get_availability_check_result(&self, ) -> ResultOfCloudGetAvailabilityCheckResult {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::cloud_get_availability_check_result(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfCloudGetAvailabilityCheckResult {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_title_texture_download_request(&self, file_path_: Option<String>,
name_: Option<String>,
p2_: bool) -> ResultOfTitleTextureDownloadRequest {
    unsafe {
        let mut native_return = Default::default();
let mut file_path_ = sdk_helpers::create_c_string_ptr(file_path_);
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut p2_ = p2_;
        let success = sdk::natives::title_texture_download_request(
            &mut native_return,
file_path_.as_ref().unwrap(),
name_.as_ref().unwrap(),
p2_,
        );
        let native_return = native_return;
        
        ResultOfTitleTextureDownloadRequest {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_transition_host(&self, ) -> ResultOfNetworkIsTransitionHost {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_host(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsTransitionHost {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_pending_friend(&self, p0_: i32) -> ResultOfNetworkIsPendingFriend {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_is_pending_friend(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsPendingFriend {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_max_num_network_peds(&self, ) -> ResultOfGetMaxNumNetworkPeds {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_max_num_network_peds(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetMaxNumNetworkPeds {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_transition_visibility_lock(&self, p0_: bool,
p1_: bool) -> ResultOfNetworkSetTransitionVisibilityLock {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_set_transition_visibility_lock(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkSetTransitionVisibilityLock {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_num_created_mission_vehicles(&self, p0_: bool) -> ResultOfGetNumCreatedMissionVehicles {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_num_created_mission_vehicles(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfGetNumCreatedMissionVehicles {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_check_privileges(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkCheckPrivileges {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_check_privileges(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfNetworkCheckPrivileges {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_invite_failed_message_for_invite_menu(&self, p0_: shared::MemoryBufferId,
p1_: shared::MemoryBufferId) -> ResultOfNetworkSetInviteFailedMessageForInviteMenu {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
        let success = sdk::natives::network_set_invite_failed_message_for_invite_menu(
            p0_,
p1_,
        );
        let p0_ = 0;
let p1_ = 0;
        
        ResultOfNetworkSetInviteFailedMessageForInviteMenu {
            success,
            ret: (),
            p0_,
p1_
        }
    }
}

    fn native_network_is_transition_closed_crew(&self, ) -> ResultOfNetworkIsTransitionClosedCrew {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_closed_crew(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsTransitionClosedCrew {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_average_ping(&self, player_: u32) -> ResultOfNetworkGetAveragePing {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_get_average_ping(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetAveragePing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_activity_player_max(&self, p0_: i32) -> ResultOfNetworkSetActivityPlayerMax {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_set_activity_player_max(
            p0_,
        );
        
        
        ResultOfNetworkSetActivityPlayerMax {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_attribute_damage_to_player(&self, ped_: u32,
player_: u32) -> ResultOfNetworkSetAttributeDamageToPlayer {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut player_ = player_;
        let success = sdk::natives::network_set_attribute_damage_to_player(
            &mut native_return,
ped_,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkSetAttributeDamageToPlayer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ped_to_net(&self, ped_: u32) -> ResultOfPedToNet {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::ped_to_net(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfPedToNet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_gamer_in_my_session(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkIsGamerInMySession {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_is_gamer_in_my_session(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkIsGamerInMySession {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_allow_cloning_while_in_tutorial(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkAllowCloningWhileInTutorial {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_allow_cloning_while_in_tutorial(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkAllowCloningWhileInTutorial {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_override_receive_restrictions_all(&self, toggle_: bool) -> ResultOfNetworkOverrideReceiveRestrictionsAll {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_override_receive_restrictions_all(
            toggle_,
        );
        
        
        ResultOfNetworkOverrideReceiveRestrictionsAll {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_signed_online(&self, ) -> ResultOfNetworkIsSignedOnline {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_signed_online(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsSignedOnline {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_tunable_cloud_crc(&self, ) -> ResultOfNetworkGetTunableCloudCrc {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_tunable_cloud_crc(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetTunableCloudCrc {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_game_in_progress(&self, ) -> ResultOfNetworkIsGameInProgress {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_game_in_progress(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsGameInProgress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_release_emblem(&self, p0_: i32) -> ResultOfNetworkClanReleaseEmblem {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_clan_release_emblem(
            p0_,
        );
        
        
        ResultOfNetworkClanReleaseEmblem {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_set_script_validate_join(&self, ) -> ResultOfNetworkSessionSetScriptValidateJoin {
    unsafe {
        
        let success = sdk::natives::network_session_set_script_validate_join(
            
        );
        
        
        ResultOfNetworkSessionSetScriptValidateJoin {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_send_important_transition_invite_via_presence(&self, gamer_handle_: shared::MemoryBufferId,
p1_: Option<String>,
data_count_: i32,
p3_: i32) -> ResultOfNetworkSendImportantTransitionInviteViaPresence {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut data_count_ = data_count_;
let mut p3_ = p3_;
        let success = sdk::natives::network_send_important_transition_invite_via_presence(
            &mut native_return,
gamer_handle_,
p1_.as_ref().unwrap(),
data_count_,
p3_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkSendImportantTransitionInviteViaPresence {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_get_platform_party_members(&self, data_: shared::MemoryBufferId,
data_size_: i32) -> ResultOfNetworkGetPlatformPartyMembers {
    unsafe {
        let mut native_return = Default::default();
let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
let mut data_size_ = data_size_;
        let success = sdk::natives::network_get_platform_party_members(
            &mut native_return,
data_,
data_size_,
        );
        let native_return = native_return;
let data_ = 0;
        
        ResultOfNetworkGetPlatformPartyMembers {
            success,
            ret: native_return,
            data_
        }
    }
}

    fn native_network_is_activity_spectator(&self, ) -> ResultOfNetworkIsActivitySpectator {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_activity_spectator(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsActivitySpectator {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_last_player_pos_received_over_network(&self, player_: u32) -> ResultOfNetworkGetLastPlayerPosReceivedOverNetwork {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut player_ = player_;
        let success = sdk::natives::network_get_last_player_pos_received_over_network(
            native_return.pin_mut(),
player_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfNetworkGetLastPlayerPosReceivedOverNetwork {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_invisible_locally(&self, player_: u32,
b_include_players_vehicle_: bool) -> ResultOfSetPlayerInvisibleLocally {
    unsafe {
        let mut player_ = player_;
let mut b_include_players_vehicle_ = b_include_players_vehicle_;
        let success = sdk::natives::set_player_invisible_locally(
            player_,
b_include_players_vehicle_,
        );
        
        
        ResultOfSetPlayerInvisibleLocally {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_num_created_mission_objects(&self, p0_: bool) -> ResultOfGetNumCreatedMissionObjects {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_num_created_mission_objects(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfGetNumCreatedMissionObjects {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_request_emblem(&self, p0_: i32) -> ResultOfNetworkClanRequestEmblem {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_clan_request_emblem(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkClanRequestEmblem {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_age_restrictions(&self, ) -> ResultOfNetworkHasAgeRestrictions {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_age_restrictions(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkHasAgeRestrictions {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_can_gamer_play_multiplayer_with_me(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkCanGamerPlayMultiplayerWithMe {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_can_gamer_play_multiplayer_with_me(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkCanGamerPlayMultiplayerWithMe {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_transition_set_in_progress(&self, p0_: i32) -> ResultOfNetworkTransitionSetInProgress {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_transition_set_in_progress(
            p0_,
        );
        
        
        ResultOfNetworkTransitionSetInProgress {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_non_participants_of_this_script_as_ghosts(&self, p0_: bool) -> ResultOfSetNonParticipantsOfThisScriptAsGhosts {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_non_participants_of_this_script_as_ghosts(
            p0_,
        );
        
        
        ResultOfSetNonParticipantsOfThisScriptAsGhosts {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_clear_offline_invite_pending(&self, ) -> ResultOfNetworkClearOfflineInvitePending {
    unsafe {
        
        let success = sdk::natives::network_clear_offline_invite_pending(
            
        );
        
        
        ResultOfNetworkClearOfflineInvitePending {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_allow_remote_synced_scene_local_player_requests(&self, p0_: i32) -> ResultOfNetworkAllowRemoteSyncedSceneLocalPlayerRequests {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_allow_remote_synced_scene_local_player_requests(
            p0_,
        );
        
        
        ResultOfNetworkAllowRemoteSyncedSceneLocalPlayerRequests {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_queuing_for_session_join(&self, ) -> ResultOfNetworkIsQueuingForSessionJoin {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_queuing_for_session_join(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsQueuingForSessionJoin {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_copy_content(&self, p0_: shared::MemoryBufferId,
p1_: shared::MemoryBufferId) -> ResultOfUgcCopyContent {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
        let success = sdk::natives::ugc_copy_content(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
let p0_ = 0;
let p1_ = 0;
        
        ResultOfUgcCopyContent {
            success,
            ret: native_return,
            p0_,
p1_
        }
    }
}

    fn native_network_am_i_blocked_by_gamer(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkAmIblockedByGamer {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_am_i_blocked_by_gamer(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkAmIblockedByGamer {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_get_user_starter_access(&self, ) -> ResultOfGetUserStarterAccess {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_user_starter_access(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetUserStarterAccess {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_query_by_content_id(&self, content_id_: Option<String>,
latest_version_: bool,
content_type_name_: Option<String>) -> ResultOfUgcQueryByContentId {
    unsafe {
        let mut native_return = Default::default();
let mut content_id_ = sdk_helpers::create_c_string_ptr(content_id_);
let mut latest_version_ = latest_version_;
let mut content_type_name_ = sdk_helpers::create_c_string_ptr(content_type_name_);
        let success = sdk::natives::ugc_query_by_content_id(
            &mut native_return,
content_id_.as_ref().unwrap(),
latest_version_,
content_type_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfUgcQueryByContentId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_texture_download_request(&self, gamer_handle_: shared::MemoryBufferId,
file_path_: Option<String>,
name_: Option<String>,
p3_: bool) -> ResultOfTextureDownloadRequest {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
let mut file_path_ = sdk_helpers::create_c_string_ptr(file_path_);
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut p3_ = p3_;
        let success = sdk::natives::texture_download_request(
            &mut native_return,
gamer_handle_,
file_path_.as_ref().unwrap(),
name_.as_ref().unwrap(),
p3_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfTextureDownloadRequest {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_ugc_did_description_request_succeed(&self, p0_: i32) -> ResultOfUgcDidDescriptionRequestSucceed {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_did_description_request_succeed(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfUgcDidDescriptionRequestSucceed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_conceal_entity(&self, entity_: u32,
toggle_: bool) -> ResultOfNetworkConcealEntity {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_conceal_entity(
            entity_,
toggle_,
        );
        
        
        ResultOfNetworkConcealEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_connected_via_relay(&self, player_: u32) -> ResultOfNetworkIsConnectedViaRelay {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_is_connected_via_relay(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsConnectedViaRelay {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_request_content_data_from_index(&self, p0_: i32,
p1_: i32) -> ResultOfUgcRequestContentDataFromIndex {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::ugc_request_content_data_from_index(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfUgcRequestContentDataFromIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_player_get_cheater_reason(&self, ) -> ResultOfNetworkPlayerGetCheaterReason {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_player_get_cheater_reason(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkPlayerGetCheaterReason {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_ghost_alpha(&self, ) -> ResultOfResetGhostAlpha {
    unsafe {
        
        let success = sdk::natives::reset_ghost_alpha(
            
        );
        
        
        ResultOfResetGhostAlpha {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_clear_create_result(&self, ) -> ResultOfUgcClearCreateResult {
    unsafe {
        
        let success = sdk::natives::ugc_clear_create_result(
            
        );
        
        
        ResultOfUgcClearCreateResult {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_property_id(&self, id_: i32) -> ResultOfNetworkSetPropertyId {
    unsafe {
        let mut id_ = id_;
        let success = sdk::natives::network_set_property_id(
            id_,
        );
        
        
        ResultOfNetworkSetPropertyId {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_keep_entity_collision_disabled_after_anim_scene(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkKeepEntityCollisionDisabledAfterAnimScene {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_keep_entity_collision_disabled_after_anim_scene(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkKeepEntityCollisionDisabledAfterAnimScene {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_start_solo_tutorial_session(&self, ) -> ResultOfNetworkStartSoloTutorialSession {
    unsafe {
        
        let success = sdk::natives::network_start_solo_tutorial_session(
            
        );
        
        
        ResultOfNetworkStartSoloTutorialSession {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_content_modifier_list_id(&self, content_hash_: u32) -> ResultOfNetworkGetContentModifierListId {
    unsafe {
        let mut native_return = Default::default();
let mut content_hash_ = content_hash_;
        let success = sdk::natives::network_get_content_modifier_list_id(
            &mut native_return,
content_hash_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetContentModifierListId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clear_group_activity(&self, ) -> ResultOfNetworkClearGroupActivity {
    unsafe {
        
        let success = sdk::natives::network_clear_group_activity(
            
        );
        
        
        ResultOfNetworkClearGroupActivity {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_does_entity_exist_with_network_id(&self, net_id_: i32) -> ResultOfNetworkDoesEntityExistWithNetworkId {
    unsafe {
        let mut native_return = Default::default();
let mut net_id_ = net_id_;
        let success = sdk::natives::network_does_entity_exist_with_network_id(
            &mut native_return,
net_id_,
        );
        let native_return = native_return;
        
        ResultOfNetworkDoesEntityExistWithNetworkId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_num_participants(&self, ) -> ResultOfNetworkGetNumParticipants {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_num_participants(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetNumParticipants {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_access_tunable_float_modification_detection_registration_hash(&self, context_hash_: u32,
name_hash_: u32,
value_: f32) -> ResultOfNetworkAccessTunableFloatModificationDetectionRegistrationHash {
    unsafe {
        let mut native_return = Default::default();
let mut context_hash_ = context_hash_;
let mut name_hash_ = name_hash_;
let mut value_ = value_;
        let success = sdk::natives::network_access_tunable_float_modification_detection_registration_hash(
            &mut native_return,
&mut value_,
context_hash_,
name_hash_,
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOfNetworkAccessTunableFloatModificationDetectionRegistrationHash {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_network_player_is_badsport(&self, ) -> ResultOfNetworkPlayerIsBadsport {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_player_is_badsport(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkPlayerIsBadsport {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_friend(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkIsFriend {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_is_friend(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkIsFriend {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_ugc_get_content_rating(&self, p0_: i32,
p1_: i32) -> ResultOfUgcGetContentRating {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::ugc_get_content_rating(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfUgcGetContentRating {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_player_a_participant_on_script(&self, player_: u32,
script_: Option<String>,
instance_id_: i32) -> ResultOfNetworkIsPlayerAparticipantOnScript {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut script_ = sdk_helpers::create_c_string_ptr(script_);
let mut instance_id_ = instance_id_;
        let success = sdk::natives::network_is_player_a_participant_on_script(
            &mut native_return,
player_,
script_.as_ref().unwrap(),
instance_id_,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsPlayerAparticipantOnScript {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_participant_index(&self, index_: i32) -> ResultOfNetworkGetParticipantIndex {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
        let success = sdk::natives::network_get_participant_index(
            &mut native_return,
index_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetParticipantIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_player_is_passive(&self, toggle_: bool) -> ResultOfNetworkSetPlayerIsPassive {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_player_is_passive(
            toggle_,
        );
        
        
        ResultOfNetworkSetPlayerIsPassive {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_this_script_is_network_script(&self, max_num_mission_participants_: i32,
p1_: bool,
instance_id_: i32) -> ResultOfNetworkSetThisScriptIsNetworkScript {
    unsafe {
        let mut max_num_mission_participants_ = max_num_mission_participants_;
let mut p1_ = p1_;
let mut instance_id_ = instance_id_;
        let success = sdk::natives::network_set_this_script_is_network_script(
            max_num_mission_participants_,
p1_,
instance_id_,
        );
        
        
        ResultOfNetworkSetThisScriptIsNetworkScript {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_commerce_data_fetch_in_progress(&self, ) -> ResultOfIsCommerceDataFetchInProgress {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_commerce_data_fetch_in_progress(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsCommerceDataFetchInProgress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_content_has_lo_res_photo(&self, p0_: i32) -> ResultOfUgcGetContentHasLoResPhoto {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_has_lo_res_photo(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfUgcGetContentHasLoResPhoto {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_host_of_script(&self, script_name_: Option<String>,
instance_id_: i32,
position_hash_: i32) -> ResultOfNetworkGetHostOfScript {
    unsafe {
        let mut native_return = Default::default();
let mut script_name_ = sdk_helpers::create_c_string_ptr(script_name_);
let mut instance_id_ = instance_id_;
let mut position_hash_ = position_hash_;
        let success = sdk::natives::network_get_host_of_script(
            &mut native_return,
script_name_.as_ref().unwrap(),
instance_id_,
position_hash_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetHostOfScript {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_rich_presence(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkSetRichPresence {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_set_rich_presence(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfNetworkSetRichPresence {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_publish(&self, content_id_: Option<String>,
base_content_id_: Option<String>,
content_type_name_: Option<String>) -> ResultOfUgcPublish {
    unsafe {
        let mut native_return = Default::default();
let mut content_id_ = sdk_helpers::create_c_string_ptr(content_id_);
let mut base_content_id_ = sdk_helpers::create_c_string_ptr(base_content_id_);
let mut content_type_name_ = sdk_helpers::create_c_string_ptr(content_type_name_);
        let success = sdk::natives::ugc_publish(
            &mut native_return,
content_id_.as_ref().unwrap(),
base_content_id_.as_ref().unwrap(),
content_type_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfUgcPublish {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_num_reserved_mission_peds(&self, p0_: bool,
p1_: i32) -> ResultOfGetNumReservedMissionPeds {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::get_num_reserved_mission_peds(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfGetNumReservedMissionPeds {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_get_local_memberships_count(&self, ) -> ResultOfNetworkClanGetLocalMembershipsCount {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_clan_get_local_memberships_count(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkClanGetLocalMembershipsCount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_fade_in_entity(&self, entity_: u32,
state_: bool,
p2_: i32) -> ResultOfNetworkFadeInEntity {
    unsafe {
        let mut entity_ = entity_;
let mut state_ = state_;
let mut p2_ = p2_;
        let success = sdk::natives::network_fade_in_entity(
            entity_,
state_,
p2_,
        );
        
        
        ResultOfNetworkFadeInEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_privilege_check_result_not_needed(&self, ) -> ResultOfNetworkSetPrivilegeCheckResultNotNeeded {
    unsafe {
        
        let success = sdk::natives::network_set_privilege_check_result_not_needed(
            
        );
        
        
        ResultOfNetworkSetPrivilegeCheckResultNotNeeded {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_transition_set_content_creator(&self, p0_: i32) -> ResultOfNetworkTransitionSetContentCreator {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_transition_set_content_creator(
            p0_,
        );
        
        
        ResultOfNetworkTransitionSetContentCreator {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_friend_count(&self, ) -> ResultOfNetworkGetFriendCount {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_friend_count(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetFriendCount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_player_loudness(&self, player_: u32) -> ResultOfNetworkGetPlayerLoudness {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_get_player_loudness(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetPlayerLoudness {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_a_ghost(&self, entity_: u32) -> ResultOfIsEntityAghost {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_a_ghost(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityAghost {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_prevent_script_host_migration(&self, ) -> ResultOfNetworkPreventScriptHostMigration {
    unsafe {
        
        let success = sdk::natives::network_prevent_script_host_migration(
            
        );
        
        
        ResultOfNetworkPreventScriptHostMigration {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_add_followers(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkAddFollowers {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_add_followers(
            &mut p0_,
p1_,
        );
        let p0_ = p0_;
        
        ResultOfNetworkAddFollowers {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_network_disable_realtime_multiplayer(&self, ) -> ResultOfNetworkDisableRealtimeMultiplayer {
    unsafe {
        
        let success = sdk::natives::network_disable_realtime_multiplayer(
            
        );
        
        
        ResultOfNetworkDisableRealtimeMultiplayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_has_cached_player_head_blend_data(&self, player_: u32) -> ResultOfNetworkHasCachedPlayerHeadBlendData {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_has_cached_player_head_blend_data(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkHasCachedPlayerHeadBlendData {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_was_invited(&self, ) -> ResultOfNetworkSessionWasInvited {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_was_invited(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionWasInvited {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_locally_visible(&self, entity_: u32) -> ResultOfSetEntityLocallyVisible {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::set_entity_locally_visible(
            entity_,
        );
        
        
        ResultOfSetEntityLocallyVisible {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_presence_invite_content_id(&self, p0_: i32) -> ResultOfNetworkGetPresenceInviteContentId {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_presence_invite_content_id(
            native_return.pin_mut(),
p0_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfNetworkGetPresenceInviteContentId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_did_create_succeed(&self, ) -> ResultOfUgcDidCreateSucceed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_did_create_succeed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfUgcDidCreateSucceed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_player_index(&self, player_: u32) -> ResultOfNetworkGetPlayerIndex {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_get_player_index(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetPlayerIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_signalling_info(&self, p0_: shared::MemoryBufferId) -> ResultOfNetworkGetSignallingInfo {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
        let success = sdk::natives::network_get_signalling_info(
            p0_,
        );
        let p0_ = 0;
        
        ResultOfNetworkGetSignallingInfo {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_network_get_position_hash_of_this_script(&self, ) -> ResultOfNetworkGetPositionHashOfThisScript {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_position_hash_of_this_script(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetPositionHashOfThisScript {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_add_client_entity_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOfNetworkAddClientEntityArea {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::network_add_client_entity_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOfNetworkAddClientEntityArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_have_online_privileges(&self, ) -> ResultOfNetworkHaveOnlinePrivileges {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_have_online_privileges(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkHaveOnlinePrivileges {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_remove_all_queued_join_requests(&self, ) -> ResultOfNetworkRemoveAllQueuedJoinRequests {
    unsafe {
        
        let success = sdk::natives::network_remove_all_queued_join_requests(
            
        );
        
        
        ResultOfNetworkRemoveAllQueuedJoinRequests {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_are_transition_details_valid(&self, p0_: i32) -> ResultOfNetworkAreTransitionDetailsValid {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_are_transition_details_valid(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkAreTransitionDetailsValid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_mark_as_preferred_activity(&self, p0_: bool) -> ResultOfNetworkMarkAsPreferredActivity {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_mark_as_preferred_activity(
            p0_,
        );
        
        
        ResultOfNetworkMarkAsPreferredActivity {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_script_controlling_teams(&self, p0_: i32) -> ResultOfNetworkSetScriptControllingTeams {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_set_script_controlling_teams(
            p0_,
        );
        
        
        ResultOfNetworkSetScriptControllingTeams {
            success,
            ret: (),
            
        }
    }
}

    fn native_delay_mp_store_open(&self, ) -> ResultOfDelayMpStoreOpen {
    unsafe {
        
        let success = sdk::natives::delay_mp_store_open(
            
        );
        
        
        ResultOfDelayMpStoreOpen {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_allow_remote_attachment_modification(&self, entity_: u32,
toggle_: bool) -> ResultOfNetworkAllowRemoteAttachmentModification {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_allow_remote_attachment_modification(
            entity_,
toggle_,
        );
        
        
        ResultOfNetworkAllowRemoteAttachmentModification {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_presence_invite_session_id(&self, p0_: i32) -> ResultOfNetworkGetPresenceInviteSessionId {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_presence_invite_session_id(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetPresenceInviteSessionId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_automute_override(&self, ) -> ResultOfNetworkHasAutomuteOverride {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_automute_override(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkHasAutomuteOverride {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_mark_visible(&self, toggle_: bool) -> ResultOfNetworkSessionMarkVisible {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_session_mark_visible(
            toggle_,
        );
        
        
        ResultOfNetworkSessionMarkVisible {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_set_bookmarked(&self, content_id_: Option<String>,
bookmarked_: bool,
content_type_name_: Option<String>) -> ResultOfUgcSetBookmarked {
    unsafe {
        let mut native_return = Default::default();
let mut content_id_ = sdk_helpers::create_c_string_ptr(content_id_);
let mut bookmarked_ = bookmarked_;
let mut content_type_name_ = sdk_helpers::create_c_string_ptr(content_type_name_);
        let success = sdk::natives::ugc_set_bookmarked(
            &mut native_return,
content_id_.as_ref().unwrap(),
bookmarked_,
content_type_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfUgcSetBookmarked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_activity_spectator_from_handle(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkIsActivitySpectatorFromHandle {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_is_activity_spectator_from_handle(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkIsActivitySpectatorFromHandle {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_on_return_to_single_player(&self, ) -> ResultOfNetworkOnReturnToSinglePlayer {
    unsafe {
        
        let success = sdk::natives::network_on_return_to_single_player(
            
        );
        
        
        ResultOfNetworkOnReturnToSinglePlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_this_script_is_network_script(&self, ) -> ResultOfNetworkGetThisScriptIsNetworkScript {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_this_script_is_network_script(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetThisScriptIsNetworkScript {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_transition_matchmaking(&self, ) -> ResultOfNetworkIsTransitionMatchmaking {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_matchmaking(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsTransitionMatchmaking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_network_id_can_migrate(&self, net_id_: i32,
toggle_: bool) -> ResultOfSetNetworkIdCanMigrate {
    unsafe {
        let mut net_id_ = net_id_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_network_id_can_migrate(
            net_id_,
toggle_,
        );
        
        
        ResultOfSetNetworkIdCanMigrate {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_has_modify_finished(&self, ) -> ResultOfUgcHasModifyFinished {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_has_modify_finished(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfUgcHasModifyFinished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_explode_heli(&self, vehicle_: u32,
is_audible_: bool,
is_invisible_: bool,
net_id_: i32) -> ResultOfNetworkExplodeHeli {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut is_audible_ = is_audible_;
let mut is_invisible_ = is_invisible_;
let mut net_id_ = net_id_;
        let success = sdk::natives::network_explode_heli(
            vehicle_,
is_audible_,
is_invisible_,
net_id_,
        );
        
        
        ResultOfNetworkExplodeHeli {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_commerce_item_num_cats(&self, index_: i32) -> ResultOfGetCommerceItemNumCats {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
        let success = sdk::natives::get_commerce_item_num_cats(
            &mut native_return,
index_,
        );
        let native_return = native_return;
        
        ResultOfGetCommerceItemNumCats {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_use_high_precision_blending(&self, net_i_d_: i32,
toggle_: bool) -> ResultOfNetworkUseHighPrecisionBlending {
    unsafe {
        let mut net_i_d_ = net_i_d_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_use_high_precision_blending(
            net_i_d_,
toggle_,
        );
        
        
        ResultOfNetworkUseHighPrecisionBlending {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_add_client_entity_angled_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
radius_: f32) -> ResultOfNetworkAddClientEntityAngledArea {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut radius_ = radius_;
        let success = sdk::natives::network_add_client_entity_angled_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
radius_,
        );
        let native_return = native_return;
        
        ResultOfNetworkAddClientEntityAngledArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_open_transition_matchmaking(&self, ) -> ResultOfNetworkOpenTransitionMatchmaking {
    unsafe {
        
        let success = sdk::natives::network_open_transition_matchmaking(
            
        );
        
        
        ResultOfNetworkOpenTransitionMatchmaking {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_clan_crewinfo_get_crewranktitle(&self, p0_: i32,
p1_: Option<String>) -> ResultOfNetworkClanCrewinfoGetCrewranktitle {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::network_clan_crewinfo_get_crewranktitle(
            &mut native_return,
p0_,
p1_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfNetworkClanCrewinfoGetCrewranktitle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_can_queue_for_previous_session_join(&self, ) -> ResultOfNetworkCanQueueForPreviousSessionJoin {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_can_queue_for_previous_session_join(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkCanQueueForPreviousSessionJoin {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_current_public_content_id(&self, mission_id_: Option<String>) -> ResultOfNetworkSetCurrentPublicContentId {
    unsafe {
        let mut mission_id_ = sdk_helpers::create_c_string_ptr(mission_id_);
        let success = sdk::natives::network_set_current_public_content_id(
            mission_id_.as_ref().unwrap(),
        );
        
        
        ResultOfNetworkSetCurrentPublicContentId {
            success,
            ret: (),
            
        }
    }
}

    fn native_reserve_local_network_mission_peds(&self, amount_: i32) -> ResultOfReserveLocalNetworkMissionPeds {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::reserve_local_network_mission_peds(
            amount_,
        );
        
        
        ResultOfReserveLocalNetworkMissionPeds {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_gamer_status_from_queue(&self, ) -> ResultOfNetworkGetGamerStatusFromQueue {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_gamer_status_from_queue(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetGamerStatusFromQueue {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_in_progress_finish_time(&self, p0_: i32) -> ResultOfNetworkSetInProgressFinishTime {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_set_in_progress_finish_time(
            p0_,
        );
        
        
        ResultOfNetworkSetInProgressFinishTime {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_do_friend_matchmaking(&self, p0_: i32,
p1_: i32,
max_players_: i32) -> ResultOfNetworkSessionDoFriendMatchmaking {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut max_players_ = max_players_;
        let success = sdk::natives::network_session_do_friend_matchmaking(
            &mut native_return,
p0_,
p1_,
max_players_,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionDoFriendMatchmaking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_is_description_request_in_progress(&self, p0_: i32) -> ResultOfUgcIsDescriptionRequestInProgress {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_is_description_request_in_progress(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfUgcIsDescriptionRequestInProgress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_local_player_invincible_time(&self, time_: i32) -> ResultOfNetworkSetLocalPlayerInvincibleTime {
    unsafe {
        let mut time_ = time_;
        let success = sdk::natives::network_set_local_player_invincible_time(
            time_,
        );
        
        
        ResultOfNetworkSetLocalPlayerInvincibleTime {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_killer_of_player(&self, player_: u32,
weapon_hash_: u32) -> ResultOfNetworkGetKillerOfPlayer {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::network_get_killer_of_player(
            &mut native_return,
&mut weapon_hash_,
player_,
        );
        let native_return = native_return;
let weapon_hash_ = weapon_hash_;
        
        ResultOfNetworkGetKillerOfPlayer {
            success,
            ret: native_return,
            weapon_hash_
        }
    }
}

    fn native_network_launch_transition(&self, ) -> ResultOfNetworkLaunchTransition {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_launch_transition(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkLaunchTransition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_bone_been_hit_by_killer(&self, bone_index_: i32) -> ResultOfNetworkHasBoneBeenHitByKiller {
    unsafe {
        let mut native_return = Default::default();
let mut bone_index_ = bone_index_;
        let success = sdk::natives::network_has_bone_been_hit_by_killer(
            &mut native_return,
bone_index_,
        );
        let native_return = native_return;
        
        ResultOfNetworkHasBoneBeenHitByKiller {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_any_player_near(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32) -> ResultOfNetworkIsAnyPlayerNear {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::network_is_any_player_near(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsAnyPlayerNear {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_friend_in_same_title(&self, friend_name_: Option<String>) -> ResultOfNetworkIsFriendInSameTitle {
    unsafe {
        let mut native_return = Default::default();
let mut friend_name_ = sdk_helpers::create_c_string_ptr(friend_name_);
        let success = sdk::natives::network_is_friend_in_same_title(
            &mut native_return,
friend_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfNetworkIsFriendInSameTitle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_commerce_store_open(&self, ) -> ResultOfIsCommerceStoreOpen {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_commerce_store_open(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsCommerceStoreOpen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_cancel_invite(&self, ) -> ResultOfNetworkSessionCancelInvite {
    unsafe {
        
        let success = sdk::natives::network_session_cancel_invite(
            
        );
        
        
        ResultOfNetworkSessionCancelInvite {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_in_platform_party(&self, ) -> ResultOfNetworkIsInPlatformParty {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_in_platform_party(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsInPlatformParty {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_explode_vehicle(&self, vehicle_: u32,
is_audible_: bool,
is_invisible_: bool,
net_id_: i32) -> ResultOfNetworkExplodeVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut is_audible_ = is_audible_;
let mut is_invisible_ = is_invisible_;
let mut net_id_ = net_id_;
        let success = sdk::natives::network_explode_vehicle(
            &mut native_return,
vehicle_,
is_audible_,
is_invisible_,
net_id_,
        );
        let native_return = native_return;
        
        ResultOfNetworkExplodeVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_override_chat_restrictions(&self, player_: u32,
toggle_: bool) -> ResultOfNetworkOverrideChatRestrictions {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_override_chat_restrictions(
            player_,
toggle_,
        );
        
        
        ResultOfNetworkOverrideChatRestrictions {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_content_is_published(&self, p0_: i32) -> ResultOfUgcGetContentIsPublished {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_is_published(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfUgcGetContentIsPublished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_texture_download_request(&self, p0_: Option<String>,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: Option<String>,
p5_: bool) -> ResultOfUgcTextureDownloadRequest {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = sdk_helpers::create_c_string_ptr(p4_);
let mut p5_ = p5_;
        let success = sdk::natives::ugc_texture_download_request(
            &mut native_return,
p0_.as_ref().unwrap(),
p1_,
p2_,
p3_,
p4_.as_ref().unwrap(),
p5_,
        );
        let native_return = native_return;
        
        ResultOfUgcTextureDownloadRequest {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_transition_activity_id(&self, p0_: i32) -> ResultOfNetworkSetTransitionActivityId {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_set_transition_activity_id(
            p0_,
        );
        
        
        ResultOfNetworkSetTransitionActivityId {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_my_content(&self, p0_: i32,
p1_: i32,
p2_: Option<String>,
p3_: shared::MemoryBufferId) -> ResultOfUgcGetMyContent {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut p3_ = self.memory_buffers.borrow_mut().get_mut_ptr(p3_) as *mut c_void;
        let success = sdk::natives::ugc_get_my_content(
            &mut native_return,
p3_,
p0_,
p1_,
p2_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p3_ = 0;
        
        ResultOfUgcGetMyContent {
            success,
            ret: native_return,
            p3_
        }
    }
}

    fn native_network_send_transition_gamer_instruction(&self, gamer_handle_: shared::MemoryBufferId,
p1_: Option<String>,
p2_: i32,
p3_: i32,
p4_: bool) -> ResultOfNetworkSendTransitionGamerInstruction {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_send_transition_gamer_instruction(
            &mut native_return,
gamer_handle_,
p1_.as_ref().unwrap(),
p2_,
p3_,
p4_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkSendTransitionGamerInstruction {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_ugc_get_content_language(&self, p0_: i32) -> ResultOfUgcGetContentLanguage {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_language(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfUgcGetContentLanguage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_network_id_visible_in_cutscene_hack(&self, net_id_: i32,
p1_: bool,
p2_: bool) -> ResultOfSetNetworkIdVisibleInCutsceneHack {
    unsafe {
        let mut net_id_ = net_id_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_network_id_visible_in_cutscene_hack(
            net_id_,
p1_,
p2_,
        );
        
        
        ResultOfSetNetworkIdVisibleInCutsceneHack {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_do_freeroam_quickmatch(&self, p0_: i32,
p1_: i32,
p2_: i32,
max_players_: i32) -> ResultOfNetworkSessionDoFreeroamQuickmatch {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut max_players_ = max_players_;
        let success = sdk::natives::network_session_do_freeroam_quickmatch(
            &mut native_return,
p0_,
p1_,
p2_,
max_players_,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionDoFreeroamQuickmatch {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_register_player_broadcast_variables(&self, unk_vars_: i32,
num_vars_: i32,
debug_name_: Option<String>) -> ResultOfNetworkRegisterPlayerBroadcastVariables {
    unsafe {
        let mut unk_vars_ = unk_vars_;
let mut num_vars_ = num_vars_;
let mut debug_name_ = sdk_helpers::create_c_string_ptr(debug_name_);
        let success = sdk::natives::network_register_player_broadcast_variables(
            &mut unk_vars_,
num_vars_,
debug_name_.as_ref().unwrap(),
        );
        let unk_vars_ = unk_vars_;
        
        ResultOfNetworkRegisterPlayerBroadcastVariables {
            success,
            ret: (),
            unk_vars_
        }
    }
}

    fn native_network_get_last_vel_received_over_network(&self, entity_: u32) -> ResultOfNetworkGetLastVelReceivedOverNetwork {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
        let success = sdk::natives::network_get_last_vel_received_over_network(
            native_return.pin_mut(),
entity_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfNetworkGetLastVelReceivedOverNetwork {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_leave_single_player(&self, ) -> ResultOfNetworkSessionLeaveSinglePlayer {
    unsafe {
        
        let success = sdk::natives::network_session_leave_single_player(
            
        );
        
        
        ResultOfNetworkSessionLeaveSinglePlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_texture_download_get_name(&self, p0_: i32) -> ResultOfTextureDownloadGetName {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
        let success = sdk::natives::texture_download_get_name(
            native_return.pin_mut(),
p0_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfTextureDownloadGetName {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_block_invites(&self, toggle_: bool) -> ResultOfNetworkBlockInvites {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_block_invites(
            toggle_,
        );
        
        
        ResultOfNetworkBlockInvites {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_average_packet_loss(&self, player_: u32) -> ResultOfNetworkGetAveragePacketLoss {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_get_average_packet_loss(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetAveragePacketLoss {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_tutorial_session_change_pending(&self, ) -> ResultOfNetworkIsTutorialSessionChangePending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_tutorial_session_change_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsTutorialSessionChangePending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_start_communication_permissions_check(&self, p0_: i32) -> ResultOfNetworkStartCommunicationPermissionsCheck {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_start_communication_permissions_check(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkStartCommunicationPermissionsCheck {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_num_script_participants(&self, script_name_: Option<String>,
instance_id_: i32,
position_hash_: i32) -> ResultOfNetworkGetNumScriptParticipants {
    unsafe {
        let mut native_return = Default::default();
let mut script_name_ = sdk_helpers::create_c_string_ptr(script_name_);
let mut instance_id_ = instance_id_;
let mut position_hash_ = position_hash_;
        let success = sdk::natives::network_get_num_script_participants(
            &mut native_return,
script_name_.as_ref().unwrap(),
instance_id_,
position_hash_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetNumScriptParticipants {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_to_veh(&self, net_handle_: i32) -> ResultOfNetToVeh {
    unsafe {
        let mut native_return = Default::default();
let mut net_handle_ = net_handle_;
        let success = sdk::natives::net_to_veh(
            &mut native_return,
net_handle_,
        );
        let native_return = native_return;
        
        ResultOfNetToVeh {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_player_mental_state(&self, p0_: i32) -> ResultOfNetworkSetPlayerMentalState {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_set_player_mental_state(
            p0_,
        );
        
        
        ResultOfNetworkSetPlayerMentalState {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_content_file_version(&self, p0_: i32,
p1_: i32) -> ResultOfUgcGetContentFileVersion {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::ugc_get_content_file_version(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfUgcGetContentFileVersion {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_respawn_result(&self, random_int_: i32,
coordinates_: Option<shared::Vector3>,
heading_: f32) -> ResultOfNetworkGetRespawnResult {
    unsafe {
        let mut random_int_ = random_int_;
let mut coordinates_ = sdk_helpers::create_vector3_ptr(coordinates_);
let mut heading_ = heading_;
        let success = sdk::natives::network_get_respawn_result(
            coordinates_.pin_mut(),
&mut heading_,
random_int_,
        );
        let coordinates_ = sdk_helpers::read_cpp_vector3(coordinates_);
let heading_ = heading_;
        
        ResultOfNetworkGetRespawnResult {
            success,
            ret: (),
            coordinates_,
heading_
        }
    }
}

    fn native_network_get_unreliable_resend_count(&self, player_: u32) -> ResultOfNetworkGetUnreliableResendCount {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_get_unreliable_resend_count(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetUnreliableResendCount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_add_entity_angled_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32) -> ResultOfNetworkAddEntityAngledArea {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
        let success = sdk::natives::network_add_entity_angled_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
        );
        let native_return = native_return;
        
        ResultOfNetworkAddEntityAngledArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_transition_open_to_matchmaking(&self, ) -> ResultOfNetworkIsTransitionOpenToMatchmaking {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_open_to_matchmaking(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsTransitionOpenToMatchmaking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_entity_from_object_id(&self, p0_: i32) -> ResultOfNetworkGetEntityFromObjectId {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_entity_from_object_id(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetEntityFromObjectId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_invite_reply_status(&self, p0_: i32) -> ResultOfNetworkGetInviteReplyStatus {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_invite_reply_status(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetInviteReplyStatus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_handle_from_player(&self, player_: u32,
gamer_handle_: shared::MemoryBufferId,
gamer_handle_size_: i32) -> ResultOfNetworkHandleFromPlayer {
    unsafe {
        let mut player_ = player_;
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
let mut gamer_handle_size_ = gamer_handle_size_;
        let success = sdk::natives::network_handle_from_player(
            gamer_handle_,
player_,
gamer_handle_size_,
        );
        let gamer_handle_ = 0;
        
        ResultOfNetworkHandleFromPlayer {
            success,
            ret: (),
            gamer_handle_
        }
    }
}

    fn native_network_trigger_damage_event_for_zero_weapon_hash(&self, entity_: u32,
toggle_: bool) -> ResultOfNetworkTriggerDamageEventForZeroWeaponHash {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_trigger_damage_event_for_zero_weapon_hash(
            entity_,
toggle_,
        );
        
        
        ResultOfNetworkTriggerDamageEventForZeroWeaponHash {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_does_network_id_exist(&self, net_id_: i32) -> ResultOfNetworkDoesNetworkIdExist {
    unsafe {
        let mut native_return = Default::default();
let mut net_id_ = net_id_;
        let success = sdk::natives::network_does_network_id_exist(
            &mut native_return,
net_id_,
        );
        let native_return = native_return;
        
        ResultOfNetworkDoesNetworkIdExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_presence_invite_handle(&self, p0_: i32,
p1_: shared::MemoryBufferId) -> ResultOfNetworkGetPresenceInviteHandle {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
        let success = sdk::natives::network_get_presence_invite_handle(
            &mut native_return,
p1_,
p0_,
        );
        let native_return = native_return;
let p1_ = 0;
        
        ResultOfNetworkGetPresenceInviteHandle {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_network_mark_as_waiting_async(&self, p0_: bool) -> ResultOfNetworkMarkAsWaitingAsync {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_mark_as_waiting_async(
            p0_,
        );
        
        
        ResultOfNetworkMarkAsWaitingAsync {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_content_hash(&self, ) -> ResultOfUgcGetContentHash {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_get_content_hash(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfUgcGetContentHash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_send_text_message(&self, message_: Option<String>,
gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkSendTextMessage {
    unsafe {
        let mut native_return = Default::default();
let mut message_ = sdk_helpers::create_c_string_ptr(message_);
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_send_text_message(
            &mut native_return,
gamer_handle_,
message_.as_ref().unwrap(),
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkSendTextMessage {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_cloud_did_request_succeed(&self, request_id_: i32) -> ResultOfCloudDidRequestSucceed {
    unsafe {
        let mut native_return = Default::default();
let mut request_id_ = request_id_;
        let success = sdk::natives::cloud_did_request_succeed(
            &mut native_return,
request_id_,
        );
        let native_return = native_return;
        
        ResultOfCloudDidRequestSucceed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_access_tunable_int_modification_detection_registration_hash(&self, context_hash_: u32,
name_hash_: u32,
value_: i32) -> ResultOfNetworkAccessTunableIntModificationDetectionRegistrationHash {
    unsafe {
        let mut native_return = Default::default();
let mut context_hash_ = context_hash_;
let mut name_hash_ = name_hash_;
let mut value_ = value_;
        let success = sdk::natives::network_access_tunable_int_modification_detection_registration_hash(
            &mut native_return,
&mut value_,
context_hash_,
name_hash_,
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOfNetworkAccessTunableIntModificationDetectionRegistrationHash {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_network_do_transition_to_freemode(&self, p0_: shared::MemoryBufferId,
p1_: i32,
p2_: bool,
players_: i32,
p4_: bool) -> ResultOfNetworkDoTransitionToFreemode {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut players_ = players_;
let mut p4_ = p4_;
        let success = sdk::natives::network_do_transition_to_freemode(
            &mut native_return,
p0_,
p1_,
p2_,
players_,
p4_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfNetworkDoTransitionToFreemode {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_get_player_tutorial_session_instance(&self, player_: u32) -> ResultOfNetworkGetPlayerTutorialSessionInstance {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_get_player_tutorial_session_instance(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetPlayerTutorialSessionInstance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_mission_finished(&self, ) -> ResultOfNetworkSetMissionFinished {
    unsafe {
        
        let success = sdk::natives::network_set_mission_finished(
            
        );
        
        
        ResultOfNetworkSetMissionFinished {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_override_tutorial_session_chat(&self, toggle_: bool) -> ResultOfNetworkSetOverrideTutorialSessionChat {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_override_tutorial_session_chat(
            toggle_,
        );
        
        
        ResultOfNetworkSetOverrideTutorialSessionChat {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_query_respawn_results(&self, p0_: shared::MemoryBufferId) -> ResultOfNetworkQueryRespawnResults {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
        let success = sdk::natives::network_query_respawn_results(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfNetworkQueryRespawnResults {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_is_player_a_participant(&self, player_: u32) -> ResultOfNetworkIsPlayerAparticipant {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_is_player_a_participant(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsPlayerAparticipant {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_current_chat_option(&self, new_chat_option_: i32) -> ResultOfNetworkSetCurrentChatOption {
    unsafe {
        let mut new_chat_option_ = new_chat_option_;
        let success = sdk::natives::network_set_current_chat_option(
            new_chat_option_,
        );
        
        
        ResultOfNetworkSetCurrentChatOption {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_presence_invite_from_admin(&self, p0_: i32) -> ResultOfNetworkGetPresenceInviteFromAdmin {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_presence_invite_from_admin(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetPresenceInviteFromAdmin {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_rich_presence_string(&self, p0_: i32,
text_label_: Option<String>) -> ResultOfNetworkSetRichPresenceString {
    unsafe {
        let mut p0_ = p0_;
let mut text_label_ = sdk_helpers::create_c_string_ptr(text_label_);
        let success = sdk::natives::network_set_rich_presence_string(
            p0_,
text_label_.as_ref().unwrap(),
        );
        
        
        ResultOfNetworkSetRichPresenceString {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_register_host_broadcast_variables(&self, unk_vars_: i32,
num_vars_: i32,
debug_name_: Option<String>) -> ResultOfNetworkRegisterHostBroadcastVariables {
    unsafe {
        let mut unk_vars_ = unk_vars_;
let mut num_vars_ = num_vars_;
let mut debug_name_ = sdk_helpers::create_c_string_ptr(debug_name_);
        let success = sdk::natives::network_register_host_broadcast_variables(
            &mut unk_vars_,
num_vars_,
debug_name_.as_ref().unwrap(),
        );
        let unk_vars_ = unk_vars_;
        
        ResultOfNetworkRegisterHostBroadcastVariables {
            success,
            ret: (),
            unk_vars_
        }
    }
}

    fn native_network_do_transition_to_game(&self, p0_: bool,
max_players_: i32) -> ResultOfNetworkDoTransitionToGame {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut max_players_ = max_players_;
        let success = sdk::natives::network_do_transition_to_game(
            &mut native_return,
p0_,
max_players_,
        );
        let native_return = native_return;
        
        ResultOfNetworkDoTransitionToGame {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_set_matchmaking_property_id(&self, p0_: bool) -> ResultOfNetworkSessionSetMatchmakingPropertyId {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_session_set_matchmaking_property_id(
            p0_,
        );
        
        
        ResultOfNetworkSessionSetMatchmakingPropertyId {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_has_transition_invite_been_acked(&self, p0_: shared::MemoryBufferId) -> ResultOfNetworkHasTransitionInviteBeenAcked {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
        let success = sdk::natives::network_has_transition_invite_been_acked(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfNetworkHasTransitionInviteBeenAcked {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_set_network_id_pass_control_in_tutorial(&self, net_id_: i32,
state_: bool) -> ResultOfSetNetworkIdPassControlInTutorial {
    unsafe {
        let mut net_id_ = net_id_;
let mut state_ = state_;
        let success = sdk::natives::set_network_id_pass_control_in_tutorial(
            net_id_,
state_,
        );
        
        
        ResultOfSetNetworkIdPassControlInTutorial {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_player_has_headset(&self, player_: u32) -> ResultOfNetworkPlayerHasHeadset {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_player_has_headset(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkPlayerHasHeadset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_no_longer_needed(&self, entity_: u32,
toggle_: bool) -> ResultOfNetworkSetNoLongerNeeded {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_no_longer_needed(
            entity_,
toggle_,
        );
        
        
        ResultOfNetworkSetNoLongerNeeded {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_disable_proximity_migration(&self, net_i_d_: i32) -> ResultOfNetworkDisableProximityMigration {
    unsafe {
        let mut net_i_d_ = net_i_d_;
        let success = sdk::natives::network_disable_proximity_migration(
            net_i_d_,
        );
        
        
        ResultOfNetworkDisableProximityMigration {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_cached_description(&self, p0_: i32,
p1_: i32) -> ResultOfUgcGetCachedDescription {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::ugc_get_cached_description(
            native_return.pin_mut(),
p0_,
p1_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfUgcGetCachedDescription {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_access_tunable_int_hash(&self, tunable_context_: u32,
tunable_name_: u32,
value_: i32) -> ResultOfNetworkAccessTunableIntHash {
    unsafe {
        let mut native_return = Default::default();
let mut tunable_context_ = tunable_context_;
let mut tunable_name_ = tunable_name_;
let mut value_ = value_;
        let success = sdk::natives::network_access_tunable_int_hash(
            &mut native_return,
&mut value_,
tunable_context_,
tunable_name_,
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOfNetworkAccessTunableIntHash {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_network_get_friend_display_name(&self, friend_index_: i32) -> ResultOfNetworkGetFriendDisplayName {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut friend_index_ = friend_index_;
        let success = sdk::natives::network_get_friend_display_name(
            native_return.pin_mut(),
friend_index_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfNetworkGetFriendDisplayName {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_fade_out_local_player(&self, p0_: bool) -> ResultOfFadeOutLocalPlayer {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::fade_out_local_player(
            p0_,
        );
        
        
        ResultOfFadeOutLocalPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_in_spectator_mode_extended(&self, toggle_: bool,
player_ped_: u32,
p2_: bool) -> ResultOfNetworkSetInSpectatorModeExtended {
    unsafe {
        let mut toggle_ = toggle_;
let mut player_ped_ = player_ped_;
let mut p2_ = p2_;
        let success = sdk::natives::network_set_in_spectator_mode_extended(
            toggle_,
player_ped_,
p2_,
        );
        
        
        ResultOfNetworkSetInSpectatorModeExtended {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_can_receive_local_invite(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkCanReceiveLocalInvite {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_can_receive_local_invite(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkCanReceiveLocalInvite {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_have_ros_leaderboard_write_priv(&self, ) -> ResultOfNetworkHaveRosLeaderboardWritePriv {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_have_ros_leaderboard_write_priv(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkHaveRosLeaderboardWritePriv {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_entity_fading(&self, entity_: u32) -> ResultOfNetworkIsEntityFading {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::network_is_entity_fading(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsEntityFading {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_was_game_suspended(&self, ) -> ResultOfNetworkWasGameSuspended {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_was_game_suspended(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkWasGameSuspended {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_in_spectator_mode(&self, toggle_: bool,
player_ped_: u32) -> ResultOfNetworkSetInSpectatorMode {
    unsafe {
        let mut toggle_ = toggle_;
let mut player_ped_ = player_ped_;
        let success = sdk::natives::network_set_in_spectator_mode(
            toggle_,
player_ped_,
        );
        
        
        ResultOfNetworkSetInSpectatorMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_friend_online(&self, name_: Option<String>) -> ResultOfNetworkIsFriendOnline {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::network_is_friend_online(
            &mut native_return,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfNetworkIsFriendOnline {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reserve_local_network_mission_vehicles(&self, amount_: i32) -> ResultOfReserveLocalNetworkMissionVehicles {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::reserve_local_network_mission_vehicles(
            amount_,
        );
        
        
        ResultOfReserveLocalNetworkMissionVehicles {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_gamertag_from_handle(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkGetGamertagFromHandle {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_get_gamertag_from_handle(
            native_return.pin_mut(),
gamer_handle_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
let gamer_handle_ = 0;
        
        ResultOfNetworkGetGamertagFromHandle {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_get_entity_killer_of_player(&self, player_: u32,
weapon_hash_: u32) -> ResultOfNetworkGetEntityKillerOfPlayer {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::network_get_entity_killer_of_player(
            &mut native_return,
&mut weapon_hash_,
player_,
        );
        let native_return = native_return;
let weapon_hash_ = weapon_hash_;
        
        ResultOfNetworkGetEntityKillerOfPlayer {
            success,
            ret: native_return,
            weapon_hash_
        }
    }
}

    fn native_network_override_clock_rate(&self, ms_: i32) -> ResultOfNetworkOverrideClockRate {
    unsafe {
        let mut ms_ = ms_;
        let success = sdk::natives::network_override_clock_rate(
            ms_,
        );
        
        
        ResultOfNetworkOverrideClockRate {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_request_cloud_tunables(&self, ) -> ResultOfNetworkRequestCloudTunables {
    unsafe {
        
        let success = sdk::natives::network_request_cloud_tunables(
            
        );
        
        
        ResultOfNetworkRequestCloudTunables {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_same_team_as_local_player(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkSetSameTeamAsLocalPlayer {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_set_same_team_as_local_player(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfNetworkSetSameTeamAsLocalPlayer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_facebook_can_post_to_facebook(&self, ) -> ResultOfFacebookCanPostToFacebook {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::facebook_can_post_to_facebook(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfFacebookCanPostToFacebook {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clear_follow_invite(&self, ) -> ResultOfNetworkClearFollowInvite {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_clear_follow_invite(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkClearFollowInvite {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_close_transition_matchmaking(&self, ) -> ResultOfNetworkCloseTransitionMatchmaking {
    unsafe {
        
        let success = sdk::natives::network_close_transition_matchmaking(
            
        );
        
        
        ResultOfNetworkCloseTransitionMatchmaking {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_store_network_game_tracking(&self, ) -> ResultOfResetStoreNetworkGameTracking {
    unsafe {
        
        let success = sdk::natives::reset_store_network_game_tracking(
            
        );
        
        
        ResultOfResetStoreNetworkGameTracking {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_check_data_manager_succeeded_for_handle(&self, p0_: i32,
gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkCheckDataManagerSucceededForHandle {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_check_data_manager_succeeded_for_handle(
            &mut native_return,
gamer_handle_,
p0_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkCheckDataManagerSucceededForHandle {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_quit_mp_to_desktop(&self, ) -> ResultOfNetworkQuitMpToDesktop {
    unsafe {
        
        let success = sdk::natives::network_quit_mp_to_desktop(
            
        );
        
        
        ResultOfNetworkQuitMpToDesktop {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_is_modifying(&self, ) -> ResultOfUgcIsModifying {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_is_modifying(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfUgcIsModifying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_add_map_entity_to_synchronised_scene(&self, net_scene_: i32,
model_hash_: u32,
x_: f32,
y_: f32,
z_: f32,
p5_: f32,
p6_: Option<String>,
p7_: f32,
p8_: f32,
flags_: i32) -> ResultOfNetworkAddMapEntityToSynchronisedScene {
    unsafe {
        let mut net_scene_ = net_scene_;
let mut model_hash_ = model_hash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p5_ = p5_;
let mut p6_ = sdk_helpers::create_c_string_ptr(p6_);
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut flags_ = flags_;
        let success = sdk::natives::network_add_map_entity_to_synchronised_scene(
            net_scene_,
model_hash_,
x_,
y_,
z_,
p5_,
p6_.as_ref().unwrap(),
p7_,
p8_,
flags_,
        );
        
        
        ResultOfNetworkAddMapEntityToSynchronisedScene {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_do_transition_to_new_game(&self, p0_: bool,
max_players_: i32,
p2_: bool) -> ResultOfNetworkDoTransitionToNewGame {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut max_players_ = max_players_;
let mut p2_ = p2_;
        let success = sdk::natives::network_do_transition_to_new_game(
            &mut native_return,
p0_,
max_players_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfNetworkDoTransitionToNewGame {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_network_time_started(&self, ) -> ResultOfHasNetworkTimeStarted {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_network_time_started(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfHasNetworkTimeStarted {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_trigger_player_crc_hacker_check(&self, player_: u32,
p1_: i32,
script_hash_: u32) -> ResultOfTriggerPlayerCrcHackerCheck {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut p1_ = p1_;
let mut script_hash_ = script_hash_;
        let success = sdk::natives::trigger_player_crc_hacker_check(
            &mut native_return,
player_,
p1_,
script_hash_,
        );
        let native_return = native_return;
        
        ResultOfTriggerPlayerCrcHackerCheck {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remote_cheater_player_detected(&self, player_: u32,
a_: i32,
b_: i32) -> ResultOfRemoteCheaterPlayerDetected {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut a_ = a_;
let mut b_ = b_;
        let success = sdk::natives::remote_cheater_player_detected(
            &mut native_return,
player_,
a_,
b_,
        );
        let native_return = native_return;
        
        ResultOfRemoteCheaterPlayerDetected {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_attach_synchronised_scene_to_entity(&self, net_scene_: i32,
entity_: u32,
bone_: i32) -> ResultOfNetworkAttachSynchronisedSceneToEntity {
    unsafe {
        let mut net_scene_ = net_scene_;
let mut entity_ = entity_;
let mut bone_ = bone_;
        let success = sdk::natives::network_attach_synchronised_scene_to_entity(
            net_scene_,
entity_,
bone_,
        );
        
        
        ResultOfNetworkAttachSynchronisedSceneToEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_set_unique_crew_limit_transition(&self, p0_: i32) -> ResultOfNetworkSessionSetUniqueCrewLimitTransition {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_session_set_unique_crew_limit_transition(
            p0_,
        );
        
        
        ResultOfNetworkSessionSetUniqueCrewLimitTransition {
            success,
            ret: (),
            
        }
    }
}

    fn native_texture_download_release(&self, p0_: i32) -> ResultOfTextureDownloadRelease {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::texture_download_release(
            p0_,
        );
        
        
        ResultOfTextureDownloadRelease {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_clan_get_membership_valid(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkClanGetMembershipValid {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_clan_get_membership_valid(
            &mut native_return,
&mut p0_,
p1_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOfNetworkClanGetMembershipValid {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_clan_get_membership_desc(&self, member_desc_: shared::MemoryBufferId,
p1_: i32) -> ResultOfNetworkClanGetMembershipDesc {
    unsafe {
        let mut native_return = Default::default();
let mut member_desc_ = self.memory_buffers.borrow_mut().get_mut_ptr(member_desc_) as *mut c_void;
let mut p1_ = p1_;
        let success = sdk::natives::network_clan_get_membership_desc(
            &mut native_return,
member_desc_,
p1_,
        );
        let native_return = native_return;
let member_desc_ = 0;
        
        ResultOfNetworkClanGetMembershipDesc {
            success,
            ret: native_return,
            member_desc_
        }
    }
}

    fn native_network_player_get_userid(&self, player_: u32,
user_i_d_: i32) -> ResultOfNetworkPlayerGetUserid {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut player_ = player_;
let mut user_i_d_ = user_i_d_;
        let success = sdk::natives::network_player_get_userid(
            native_return.pin_mut(),
&mut user_i_d_,
player_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
let user_i_d_ = user_i_d_;
        
        ResultOfNetworkPlayerGetUserid {
            success,
            ret: native_return,
            user_i_d_
        }
    }
}

    fn native_network_add_entity_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOfNetworkAddEntityArea {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::network_add_entity_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOfNetworkAddEntityArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_presence_invite_inviter(&self, p0_: i32) -> ResultOfNetworkGetPresenceInviteInviter {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_presence_invite_inviter(
            native_return.pin_mut(),
p0_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfNetworkGetPresenceInviteInviter {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_set_matchmaking_group(&self, matchmaking_group_: i32) -> ResultOfNetworkSessionSetMatchmakingGroup {
    unsafe {
        let mut matchmaking_group_ = matchmaking_group_;
        let success = sdk::natives::network_session_set_matchmaking_group(
            matchmaking_group_,
        );
        
        
        ResultOfNetworkSessionSetMatchmakingGroup {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_entity_area_is_occupied(&self, area_handle_: i32) -> ResultOfNetworkEntityAreaIsOccupied {
    unsafe {
        let mut native_return = Default::default();
let mut area_handle_ = area_handle_;
        let success = sdk::natives::network_entity_area_is_occupied(
            &mut native_return,
area_handle_,
        );
        let native_return = native_return;
        
        ResultOfNetworkEntityAreaIsOccupied {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_invite_gamers_to_transition(&self, p0_: shared::MemoryBufferId,
p1_: i32) -> ResultOfNetworkInviteGamersToTransition {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = p1_;
        let success = sdk::natives::network_invite_gamers_to_transition(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfNetworkInviteGamersToTransition {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_set_presence_session_invites_blocked(&self, toggle_: bool) -> ResultOfNetworkSetPresenceSessionInvitesBlocked {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_presence_session_invites_blocked(
            toggle_,
        );
        
        
        ResultOfNetworkSetPresenceSessionInvitesBlocked {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_check_data_manager_for_handle(&self, p0_: i32,
gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkCheckDataManagerForHandle {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_check_data_manager_for_handle(
            &mut native_return,
gamer_handle_,
p0_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkCheckDataManagerForHandle {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_set_entity_ghosted_for_ghost_players(&self, entity_: u32,
toggle_: bool) -> ResultOfSetEntityGhostedForGhostPlayers {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_ghosted_for_ghost_players(
            entity_,
toggle_,
        );
        
        
        ResultOfSetEntityGhostedForGhostPlayers {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_start_respawn_search_in_angled_area_for_player(&self, player_: u32,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32,
p8_: f32,
p9_: f32,
p10_: f32,
flags_: i32) -> ResultOfNetworkStartRespawnSearchInAngledAreaForPlayer {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut flags_ = flags_;
        let success = sdk::natives::network_start_respawn_search_in_angled_area_for_player(
            &mut native_return,
player_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
p8_,
p9_,
p10_,
flags_,
        );
        let native_return = native_return;
        
        ResultOfNetworkStartRespawnSearchInAngledAreaForPlayer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_ignore_remote_waypoints(&self, ) -> ResultOfNetworkIgnoreRemoteWaypoints {
    unsafe {
        
        let success = sdk::natives::network_ignore_remote_waypoints(
            
        );
        
        
        ResultOfNetworkIgnoreRemoteWaypoints {
            success,
            ret: (),
            
        }
    }
}

    fn native_cloud_has_request_completed(&self, request_id_: i32) -> ResultOfCloudHasRequestCompleted {
    unsafe {
        let mut native_return = Default::default();
let mut request_id_ = request_id_;
        let success = sdk::natives::cloud_has_request_completed(
            &mut native_return,
request_id_,
        );
        let native_return = native_return;
        
        ResultOfCloudHasRequestCompleted {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_game_mode(&self, ) -> ResultOfNetworkGetGameMode {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_game_mode(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetGameMode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_assisted_damage_of_entity(&self, player_: u32,
entity_: u32,
p2_: i32) -> ResultOfNetworkGetAssistedDamageOfEntity {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut entity_ = entity_;
let mut p2_ = p2_;
        let success = sdk::natives::network_get_assisted_damage_of_entity(
            &mut native_return,
&mut p2_,
player_,
entity_,
        );
        let native_return = native_return;
let p2_ = p2_;
        
        ResultOfNetworkGetAssistedDamageOfEntity {
            success,
            ret: native_return,
            p2_
        }
    }
}

    fn native_ugc_did_query_creators_succeed(&self, ) -> ResultOfUgcDidQueryCreatorsSucceed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_did_query_creators_succeed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfUgcDidQueryCreatorsSucceed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_control_of_network_id(&self, net_id_: i32) -> ResultOfNetworkHasControlOfNetworkId {
    unsafe {
        let mut native_return = Default::default();
let mut net_id_ = net_id_;
        let success = sdk::natives::network_has_control_of_network_id(
            &mut native_return,
net_id_,
        );
        let native_return = native_return;
        
        ResultOfNetworkHasControlOfNetworkId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_invited_gamer(&self, p0_: shared::MemoryBufferId) -> ResultOfNetworkHasInvitedGamer {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
        let success = sdk::natives::network_has_invited_gamer(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfNetworkHasInvitedGamer {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_entity_area_have_all_replied(&self, area_handle_: i32) -> ResultOfNetworkEntityAreaHaveAllReplied {
    unsafe {
        let mut native_return = Default::default();
let mut area_handle_ = area_handle_;
        let success = sdk::natives::network_entity_area_have_all_replied(
            &mut native_return,
area_handle_,
        );
        let native_return = native_return;
        
        ResultOfNetworkEntityAreaHaveAllReplied {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_content_rating_negative_count(&self, p0_: i32,
p1_: i32) -> ResultOfUgcGetContentRatingNegativeCount {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::ugc_get_content_rating_negative_count(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfUgcGetContentRatingNegativeCount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reserve_network_mission_objects(&self, amount_: i32) -> ResultOfReserveNetworkMissionObjects {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::reserve_network_mission_objects(
            amount_,
        );
        
        
        ResultOfReserveNetworkMissionObjects {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_can_session_end(&self, ) -> ResultOfNetworkCanSessionEnd {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_can_session_end(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkCanSessionEnd {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_cloud_check_availability(&self, ) -> ResultOfCloudCheckAvailability {
    unsafe {
        
        let success = sdk::natives::cloud_check_availability(
            
        );
        
        
        ResultOfCloudCheckAvailability {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_transition_busy(&self, ) -> ResultOfNetworkIsTransitionBusy {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_busy(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsTransitionBusy {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_apply_transition_parameter(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkApplyTransitionParameter {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_apply_transition_parameter(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkApplyTransitionParameter {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_local_player_sync_look_at(&self, toggle_: bool) -> ResultOfNetworkSetLocalPlayerSyncLookAt {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_local_player_sync_look_at(
            toggle_,
        );
        
        
        ResultOfNetworkSetLocalPlayerSyncLookAt {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_highest_reliable_resend_count(&self, player_: u32) -> ResultOfNetworkGetHighestReliableResendCount {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_get_highest_reliable_resend_count(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetHighestReliableResendCount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_top_rated_content(&self, p0_: i32,
p1_: i32,
p2_: shared::MemoryBufferId,
p3_: shared::MemoryBufferId) -> ResultOfUgcGetTopRatedContent {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = self.memory_buffers.borrow_mut().get_mut_ptr(p2_) as *mut c_void;
let mut p3_ = self.memory_buffers.borrow_mut().get_mut_ptr(p3_) as *mut c_void;
        let success = sdk::natives::ugc_get_top_rated_content(
            &mut native_return,
p2_,
p3_,
p0_,
p1_,
        );
        let native_return = native_return;
let p2_ = 0;
let p3_ = 0;
        
        ResultOfUgcGetTopRatedContent {
            success,
            ret: native_return,
            p2_,
p3_
        }
    }
}

    fn native_network_session_get_private_slots(&self, ) -> ResultOfNetworkSessionGetPrivateSlots {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_get_private_slots(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionGetPrivateSlots {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_need_to_start_new_game_but_blocked(&self, ) -> ResultOfNetworkNeedToStartNewGameButBlocked {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_need_to_start_new_game_but_blocked(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkNeedToStartNewGameButBlocked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_transition_started(&self, ) -> ResultOfNetworkIsTransitionStarted {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_started(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsTransitionStarted {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_player_is_rockstar_dev(&self, player_: u32) -> ResultOfNetworkPlayerIsRockstarDev {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_player_is_rockstar_dev(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkPlayerIsRockstarDev {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_set_unique_crew_only_crews_transition(&self, p0_: bool) -> ResultOfNetworkSessionSetUniqueCrewOnlyCrewsTransition {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_session_set_unique_crew_only_crews_transition(
            p0_,
        );
        
        
        ResultOfNetworkSessionSetUniqueCrewOnlyCrewsTransition {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_permissions_has_gamer_record(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkPermissionsHasGamerRecord {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_permissions_has_gamer_record(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkPermissionsHasGamerRecord {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_ugc_get_content_id(&self, p0_: i32) -> ResultOfUgcGetContentId {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_id(
            native_return.pin_mut(),
p0_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfUgcGetContentId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_thread_a_network_script(&self, thread_id_: i32) -> ResultOfNetworkIsThreadAnetworkScript {
    unsafe {
        let mut native_return = Default::default();
let mut thread_id_ = thread_id_;
        let success = sdk::natives::network_is_thread_a_network_script(
            &mut native_return,
thread_id_,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsThreadAnetworkScript {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_report_code_tamper(&self, ) -> ResultOfNetworkReportCodeTamper {
    unsafe {
        
        let success = sdk::natives::network_report_code_tamper(
            
        );
        
        
        ResultOfNetworkReportCodeTamper {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_player_index_is_cheater(&self, player_: u32) -> ResultOfNetworkPlayerIndexIsCheater {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_player_index_is_cheater(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkPlayerIndexIsCheater {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_get_matchmaking_group_free(&self, p0_: i32) -> ResultOfNetworkSessionGetMatchmakingGroupFree {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_session_get_matchmaking_group_free(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionGetMatchmakingGroupFree {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_friend_in_multiplayer(&self, friend_name_: Option<String>) -> ResultOfNetworkIsFriendInMultiplayer {
    unsafe {
        let mut native_return = Default::default();
let mut friend_name_ = sdk_helpers::create_c_string_ptr(friend_name_);
        let success = sdk::natives::network_is_friend_in_multiplayer(
            &mut native_return,
friend_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfNetworkIsFriendInMultiplayer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_mark_transition_gamer_as_fully_joined(&self, p0_: shared::MemoryBufferId) -> ResultOfNetworkMarkTransitionGamerAsFullyJoined {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
        let success = sdk::natives::network_mark_transition_gamer_as_fully_joined(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfNetworkMarkTransitionGamerAsFullyJoined {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_texture_download_has_failed(&self, p0_: i32) -> ResultOfTextureDownloadHasFailed {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::texture_download_has_failed(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfTextureDownloadHasFailed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_service_is_valid(&self, ) -> ResultOfNetworkClanServiceIsValid {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_clan_service_is_valid(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkClanServiceIsValid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_participant_id_to_int(&self, ) -> ResultOfParticipantIdToInt {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::participant_id_to_int(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfParticipantIdToInt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_player_blocked_by_me(&self, player_: u32) -> ResultOfNetworkIsPlayerBlockedByMe {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_is_player_blocked_by_me(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsPlayerBlockedByMe {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_override_send_restrictions_all(&self, toggle_: bool) -> ResultOfNetworkOverrideSendRestrictionsAll {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_override_send_restrictions_all(
            toggle_,
        );
        
        
        ResultOfNetworkOverrideSendRestrictionsAll {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_script_status(&self, ) -> ResultOfNetworkGetScriptStatus {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_script_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetScriptStatus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_are_handles_the_same(&self, gamer_handle1_: shared::MemoryBufferId,
gamer_handle2_: shared::MemoryBufferId) -> ResultOfNetworkAreHandlesTheSame {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle1_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle1_) as *mut c_void;
let mut gamer_handle2_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle2_) as *mut c_void;
        let success = sdk::natives::network_are_handles_the_same(
            &mut native_return,
gamer_handle1_,
gamer_handle2_,
        );
        let native_return = native_return;
let gamer_handle1_ = 0;
let gamer_handle2_ = 0;
        
        ResultOfNetworkAreHandlesTheSame {
            success,
            ret: native_return,
            gamer_handle1_,
gamer_handle2_
        }
    }
}

    fn native_network_can_bail(&self, ) -> ResultOfNetworkCanBail {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_can_bail(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkCanBail {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_get_emblem_txd_name(&self, net_handle_: shared::MemoryBufferId,
txd_name_: Option<String>) -> ResultOfNetworkClanGetEmblemTxdName {
    unsafe {
        let mut native_return = Default::default();
let mut net_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(net_handle_) as *mut c_void;
let mut txd_name_ = sdk_helpers::create_c_string_ptr(txd_name_);
        let success = sdk::natives::network_clan_get_emblem_txd_name(
            &mut native_return,
net_handle_,
txd_name_.pin_mut(),
        );
        let native_return = native_return;
let net_handle_ = 0;
let txd_name_ = sdk_helpers::read_c_string_ptr(txd_name_);
        
        ResultOfNetworkClanGetEmblemTxdName {
            success,
            ret: native_return,
            net_handle_,
txd_name_
        }
    }
}

    fn native_ugc_get_content_creator_gamer_handle(&self, p0_: i32,
p1_: shared::MemoryBufferId) -> ResultOfUgcGetContentCreatorGamerHandle {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
        let success = sdk::natives::ugc_get_content_creator_gamer_handle(
            &mut native_return,
p1_,
p0_,
        );
        let native_return = native_return;
let p1_ = 0;
        
        ResultOfUgcGetContentCreatorGamerHandle {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_network_hash_from_gamer_handle(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkHashFromGamerHandle {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_hash_from_gamer_handle(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkHashFromGamerHandle {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_open_commerce_store(&self, p0_: Option<String>,
p1_: Option<String>,
p2_: i32) -> ResultOfOpenCommerceStore {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = p2_;
        let success = sdk::natives::open_commerce_store(
            p0_.as_ref().unwrap(),
p1_.as_ref().unwrap(),
p2_,
        );
        
        
        ResultOfOpenCommerceStore {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_displaynames_from_handles(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkGetDisplaynamesFromHandles {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_get_displaynames_from_handles(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetDisplaynamesFromHandles {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_user_old_enough_to_access_store(&self, ) -> ResultOfIsUserOldEnoughToAccessStore {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_user_old_enough_to_access_store(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsUserOldEnoughToAccessStore {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_ros_privilege_played_last_gen(&self, ) -> ResultOfNetworkHasRosPrivilegePlayedLastGen {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_ros_privilege_played_last_gen(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkHasRosPrivilegePlayedLastGen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_shutdown_and_launch_single_player_game(&self, ) -> ResultOfShutdownAndLaunchSinglePlayerGame {
    unsafe {
        
        let success = sdk::natives::shutdown_and_launch_single_player_game(
            
        );
        
        
        ResultOfShutdownAndLaunchSinglePlayerGame {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_check_user_content_privileges(&self, p0_: i32,
p1_: i32,
p2_: bool) -> ResultOfNetworkCheckUserContentPrivileges {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_check_user_content_privileges(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfNetworkCheckUserContentPrivileges {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_creator_num(&self, ) -> ResultOfUgcGetCreatorNum {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_get_creator_num(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfUgcGetCreatorNum {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_random_int(&self, ) -> ResultOfNetworkGetRandomInt {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_random_int(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetRandomInt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_set_num_bosses(&self, num_: i32) -> ResultOfNetworkSessionSetNumBosses {
    unsafe {
        let mut num_ = num_;
        let success = sdk::natives::network_session_set_num_bosses(
            num_,
        );
        
        
        ResultOfNetworkSessionSetNumBosses {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_join_previously_failed_session(&self, ) -> ResultOfNetworkJoinPreviouslyFailedSession {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_join_previously_failed_session(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkJoinPreviouslyFailedSession {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_modify_result(&self, ) -> ResultOfUgcGetModifyResult {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_get_modify_result(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfUgcGetModifyResult {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_release_cached_description(&self, p0_: i32) -> ResultOfUgcReleaseCachedDescription {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_release_cached_description(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfUgcReleaseCachedDescription {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_transition_private(&self, ) -> ResultOfNetworkIsTransitionPrivate {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_private(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsTransitionPrivate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_start_respawn_search_for_player(&self, player_: u32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32,
p5_: f32,
p6_: f32,
p7_: f32,
flags_: i32) -> ResultOfNetworkStartRespawnSearchForPlayer {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut flags_ = flags_;
        let success = sdk::natives::network_start_respawn_search_for_player(
            &mut native_return,
player_,
x_,
y_,
z_,
radius_,
p5_,
p6_,
p7_,
flags_,
        );
        let native_return = native_return;
        
        ResultOfNetworkStartRespawnSearchForPlayer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_did_get_gamer_status_succeed(&self, ) -> ResultOfNetworkDidGetGamerStatusSucceed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_did_get_gamer_status_succeed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkDidGetGamerStatusSucceed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_primary_clan_data_success(&self, ) -> ResultOfNetworkGetPrimaryClanDataSuccess {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_primary_clan_data_success(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetPrimaryClanDataSuccess {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_voice_set_timeout(&self, timeout_: i32) -> ResultOfNetworkSessionVoiceSetTimeout {
    unsafe {
        let mut timeout_ = timeout_;
        let success = sdk::natives::network_session_voice_set_timeout(
            timeout_,
        );
        
        
        ResultOfNetworkSessionVoiceSetTimeout {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_clan_download_membership_pending(&self, p0_: shared::MemoryBufferId) -> ResultOfNetworkClanDownloadMembershipPending {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
        let success = sdk::natives::network_clan_download_membership_pending(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfNetworkClanDownloadMembershipPending {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_has_control_of_pickup(&self, pickup_: i32) -> ResultOfNetworkHasControlOfPickup {
    unsafe {
        let mut native_return = Default::default();
let mut pickup_ = pickup_;
        let success = sdk::natives::network_has_control_of_pickup(
            &mut native_return,
pickup_,
        );
        let native_return = native_return;
        
        ResultOfNetworkHasControlOfPickup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_show_psn_ugc_restriction(&self, ) -> ResultOfNetworkShowPsnUgcRestriction {
    unsafe {
        
        let success = sdk::natives::network_show_psn_ugc_restriction(
            
        );
        
        
        ResultOfNetworkShowPsnUgcRestriction {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_antagonistic_to_player(&self, toggle_: bool,
player_: u32) -> ResultOfNetworkSetAntagonisticToPlayer {
    unsafe {
        let mut toggle_ = toggle_;
let mut player_ = player_;
        let success = sdk::natives::network_set_antagonistic_to_player(
            toggle_,
player_,
        );
        
        
        ResultOfNetworkSetAntagonisticToPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_load_offline_query(&self, p0_: i32) -> ResultOfUgcLoadOfflineQuery {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_load_offline_query(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfUgcLoadOfflineQuery {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_received_host_broadcast_data(&self, ) -> ResultOfNetworkHasReceivedHostBroadcastData {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_received_host_broadcast_data(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkHasReceivedHostBroadcastData {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_transition_solo(&self, ) -> ResultOfNetworkIsTransitionSolo {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_solo(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsTransitionSolo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_request_cached_description(&self, p0_: i32) -> ResultOfUgcRequestCachedDescription {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_request_cached_description(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfUgcRequestCachedDescription {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_has_create_finished(&self, ) -> ResultOfUgcHasCreateFinished {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_has_create_finished(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfUgcHasCreateFinished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_enable_voice_bandwidth_restriction(&self, player_: u32) -> ResultOfNetworkEnableVoiceBandwidthRestriction {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::network_enable_voice_bandwidth_restriction(
            player_,
        );
        
        
        ResultOfNetworkEnableVoiceBandwidthRestriction {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_have_platform_subscription(&self, ) -> ResultOfNetworkHavePlatformSubscription {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_have_platform_subscription(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkHavePlatformSubscription {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_timeout_time(&self, ) -> ResultOfNetworkGetTimeoutTime {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_timeout_time(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetTimeoutTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_have_ros_multiplayer_priv(&self, ) -> ResultOfNetworkHaveRosMultiplayerPriv {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_have_ros_multiplayer_priv(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkHaveRosMultiplayerPriv {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_text_chat_is_typing(&self, ) -> ResultOfNetworkTextChatIsTyping {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_text_chat_is_typing(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkTextChatIsTyping {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_local_player_as_ghost(&self, toggle_: bool,
p1_: bool) -> ResultOfSetLocalPlayerAsGhost {
    unsafe {
        let mut toggle_ = toggle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_local_player_as_ghost(
            toggle_,
p1_,
        );
        
        
        ResultOfSetLocalPlayerAsGhost {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_set_gamemode(&self, p0_: i32) -> ResultOfNetworkSessionSetGamemode {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_session_set_gamemode(
            p0_,
        );
        
        
        ResultOfNetworkSessionSetGamemode {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_have_ros_social_club_priv(&self, ) -> ResultOfNetworkHaveRosSocialClubPriv {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_have_ros_social_club_priv(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkHaveRosSocialClubPriv {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_check_ros_link_wentdown_not_net(&self, ) -> ResultOfNetworkCheckRosLinkWentdownNotNet {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_check_ros_link_wentdown_not_net(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkCheckRosLinkWentdownNotNet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_num_transition_non_async_gamers(&self, ) -> ResultOfNetworkGetNumTransitionNonAsyncGamers {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_num_transition_non_async_gamers(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetNumTransitionNonAsyncGamers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_clear_offline_query(&self, ) -> ResultOfUgcClearOfflineQuery {
    unsafe {
        
        let success = sdk::natives::ugc_clear_offline_query(
            
        );
        
        
        ResultOfUgcClearOfflineQuery {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_network_vehicle_as_ghost(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetNetworkVehicleAsGhost {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_network_vehicle_as_ghost(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetNetworkVehicleAsGhost {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_request_invite_confirmed_event(&self, ) -> ResultOfNetworkRequestInviteConfirmedEvent {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_request_invite_confirmed_event(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkRequestInviteConfirmedEvent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_facebook_has_post_completed(&self, ) -> ResultOfFacebookHasPostCompleted {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::facebook_has_post_completed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfFacebookHasPostCompleted {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_player_fading(&self, player_: u32) -> ResultOfNetworkIsPlayerFading {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_is_player_fading(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsPlayerFading {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_instance_id_of_this_script(&self, ) -> ResultOfNetworkGetInstanceIdOfThisScript {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_instance_id_of_this_script(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetInstanceIdOfThisScript {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_has_query_creators_finished(&self, ) -> ResultOfUgcHasQueryCreatorsFinished {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_has_query_creators_finished(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfUgcHasQueryCreatorsFinished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_player_in_mp_cutscene(&self, player_: u32) -> ResultOfNetworkIsPlayerInMpCutscene {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_is_player_in_mp_cutscene(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsPlayerInMpCutscene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_last_entity_pos_received_over_network(&self, entity_: u32) -> ResultOfNetworkGetLastEntityPosReceivedOverNetwork {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
        let success = sdk::natives::network_get_last_entity_pos_received_over_network(
            native_return.pin_mut(),
entity_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfNetworkGetLastEntityPosReceivedOverNetwork {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_privilege_check_in_progress(&self, ) -> ResultOfNetworkIsPrivilegeCheckInProgress {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_privilege_check_in_progress(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsPrivilegeCheckInProgress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_finish_broadcasting_data(&self, ) -> ResultOfNetworkFinishBroadcastingData {
    unsafe {
        
        let success = sdk::natives::network_finish_broadcasting_data(
            
        );
        
        
        ResultOfNetworkFinishBroadcastingData {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_transition_host(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkGetTransitionHost {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_get_transition_host(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkGetTransitionHost {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_is_transition_closed_friends(&self, ) -> ResultOfNetworkIsTransitionClosedFriends {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_closed_friends(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsTransitionClosedFriends {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_player_is_cheater(&self, ) -> ResultOfNetworkPlayerIsCheater {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_player_is_cheater(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkPlayerIsCheater {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ghost_alpha(&self, alpha_: i32) -> ResultOfSetGhostAlpha {
    unsafe {
        let mut alpha_ = alpha_;
        let success = sdk::natives::set_ghost_alpha(
            alpha_,
        );
        
        
        ResultOfSetGhostAlpha {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_skip_radio_warning(&self, ) -> ResultOfNetworkSkipRadioWarning {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_skip_radio_warning(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkSkipRadioWarning {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_commerce_item_id(&self, index_: i32) -> ResultOfGetCommerceItemId {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut index_ = index_;
        let success = sdk::natives::get_commerce_item_id(
            native_return.pin_mut(),
index_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetCommerceItemId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_have_scs_private_msg_priv(&self, ) -> ResultOfNetworkHaveScsPrivateMsgPriv {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_have_scs_private_msg_priv(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkHaveScsPrivateMsgPriv {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_are_cutscene_entities_networked(&self, ) -> ResultOfAreCutsceneEntitiesNetworked {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::are_cutscene_entities_networked(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfAreCutsceneEntitiesNetworked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_invite_on_call_for_invite_menu(&self, p0_: shared::MemoryBufferId) -> ResultOfNetworkSetInviteOnCallForInviteMenu {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
        let success = sdk::natives::network_set_invite_on_call_for_invite_menu(
            p0_,
        );
        let p0_ = 0;
        
        ResultOfNetworkSetInviteOnCallForInviteMenu {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_ugc_get_get_by_category(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: Option<String>,
p4_: shared::MemoryBufferId) -> ResultOfUgcGetGetByCategory {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = sdk_helpers::create_c_string_ptr(p3_);
let mut p4_ = self.memory_buffers.borrow_mut().get_mut_ptr(p4_) as *mut c_void;
        let success = sdk::natives::ugc_get_get_by_category(
            &mut native_return,
p4_,
p0_,
p1_,
p2_,
p3_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p4_ = 0;
        
        ResultOfUgcGetGetByCategory {
            success,
            ret: native_return,
            p4_
        }
    }
}

    fn native_network_session_voice_leave(&self, ) -> ResultOfNetworkSessionVoiceLeave {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_voice_leave(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionVoiceLeave {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_social_club_account(&self, ) -> ResultOfNetworkHasSocialClubAccount {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_social_club_account(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkHasSocialClubAccount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_live_area_launch_with_content(&self, ) -> ResultOfGetIsLiveAreaLaunchWithContent {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_live_area_launch_with_content(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetIsLiveAreaLaunchWithContent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_in_transition(&self, ) -> ResultOfNetworkIsInTransition {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_in_transition(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsInTransition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_release_all_cached_descriptions(&self, ) -> ResultOfUgcReleaseAllCachedDescriptions {
    unsafe {
        
        let success = sdk::natives::ugc_release_all_cached_descriptions(
            
        );
        
        
        ResultOfUgcReleaseAllCachedDescriptions {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_can_receive_rs_invites(&self, p0_: bool) -> ResultOfNetworkSetCanReceiveRsInvites {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_set_can_receive_rs_invites(
            p0_,
        );
        
        
        ResultOfNetworkSetCanReceiveRsInvites {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_query_by_category(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: Option<String>,
p4_: i32,
p5_: bool) -> ResultOfUgcQueryByCategory {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = sdk_helpers::create_c_string_ptr(p3_);
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::ugc_query_by_category(
            &mut native_return,
p0_,
p1_,
p2_,
p3_.as_ref().unwrap(),
p4_,
p5_,
        );
        let native_return = native_return;
        
        ResultOfUgcQueryByCategory {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_register_mission_entities(&self, ped_amt_: i32,
vehicle_amt_: i32,
object_amt_: i32,
pickup_amt_: i32) -> ResultOfCanRegisterMissionEntities {
    unsafe {
        let mut native_return = Default::default();
let mut ped_amt_ = ped_amt_;
let mut vehicle_amt_ = vehicle_amt_;
let mut object_amt_ = object_amt_;
let mut pickup_amt_ = pickup_amt_;
        let success = sdk::natives::can_register_mission_entities(
            &mut native_return,
ped_amt_,
vehicle_amt_,
object_amt_,
pickup_amt_,
        );
        let native_return = native_return;
        
        ResultOfCanRegisterMissionEntities {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_access_tunable_bool_modification_detection_registration_hash(&self, context_hash_: u32,
name_hash_: u32,
value_: bool) -> ResultOfNetworkAccessTunableBoolModificationDetectionRegistrationHash {
    unsafe {
        let mut native_return = Default::default();
let mut context_hash_ = context_hash_;
let mut name_hash_ = name_hash_;
let mut value_ = value_;
        let success = sdk::natives::network_access_tunable_bool_modification_detection_registration_hash(
            &mut native_return,
&mut value_,
context_hash_,
name_hash_,
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOfNetworkAccessTunableBoolModificationDetectionRegistrationHash {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_network_set_ignore_spectator_chat_limits_same_team(&self, toggle_: bool) -> ResultOfNetworkSetIgnoreSpectatorChatLimitsSameTeam {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_ignore_spectator_chat_limits_same_team(
            toggle_,
        );
        
        
        ResultOfNetworkSetIgnoreSpectatorChatLimitsSameTeam {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_allow_invite_process_in_player_switch(&self, p0_: bool) -> ResultOfNetworkAllowInviteProcessInPlayerSwitch {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_allow_invite_process_in_player_switch(
            p0_,
        );
        
        
        ResultOfNetworkAllowInviteProcessInPlayerSwitch {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_transition_host_from_handle(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkIsTransitionHostFromHandle {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_is_transition_host_from_handle(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkIsTransitionHostFromHandle {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_show_chat_restriction_msc(&self, player_: u32) -> ResultOfNetworkShowChatRestrictionMsc {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::network_show_chat_restriction_msc(
            player_,
        );
        
        
        ResultOfNetworkShowChatRestrictionMsc {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_player_index_from_ped(&self, ped_: u32) -> ResultOfNetworkGetPlayerIndexFromPed {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::network_get_player_index_from_ped(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetPlayerIndexFromPed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_respawn_result_flags(&self, p0_: i32) -> ResultOfNetworkGetRespawnResultFlags {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_respawn_result_flags(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetRespawnResultFlags {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_in_mp_cutscene(&self, ) -> ResultOfNetworkIsInMpCutscene {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_in_mp_cutscene(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsInMpCutscene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clear_queued_join_request(&self, ) -> ResultOfNetworkClearQueuedJoinRequest {
    unsafe {
        
        let success = sdk::natives::network_clear_queued_join_request(
            
        );
        
        
        ResultOfNetworkClearQueuedJoinRequest {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_global_multiplayer_clock(&self, hours_: i32,
minutes_: i32,
seconds_: i32) -> ResultOfNetworkGetGlobalMultiplayerClock {
    unsafe {
        let mut hours_ = hours_;
let mut minutes_ = minutes_;
let mut seconds_ = seconds_;
        let success = sdk::natives::network_get_global_multiplayer_clock(
            &mut hours_,
&mut minutes_,
&mut seconds_,
        );
        let hours_ = hours_;
let minutes_ = minutes_;
let seconds_ = seconds_;
        
        ResultOfNetworkGetGlobalMultiplayerClock {
            success,
            ret: (),
            hours_,
minutes_,
seconds_
        }
    }
}

    fn native_network_clear_found_gamers(&self, ) -> ResultOfNetworkClearFoundGamers {
    unsafe {
        
        let success = sdk::natives::network_clear_found_gamers(
            
        );
        
        
        ResultOfNetworkClearFoundGamers {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_query_most_recently_created_content(&self, offset_: i32,
count_: i32,
content_type_name_: Option<String>,
p3_: i32) -> ResultOfUgcQueryMostRecentlyCreatedContent {
    unsafe {
        let mut native_return = Default::default();
let mut offset_ = offset_;
let mut count_ = count_;
let mut content_type_name_ = sdk_helpers::create_c_string_ptr(content_type_name_);
let mut p3_ = p3_;
        let success = sdk::natives::ugc_query_most_recently_created_content(
            &mut native_return,
offset_,
count_,
content_type_name_.as_ref().unwrap(),
p3_,
        );
        let native_return = native_return;
        
        ResultOfUgcQueryMostRecentlyCreatedContent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_damage_tracker_active_on_network_id(&self, net_i_d_: i32) -> ResultOfIsDamageTrackerActiveOnNetworkId {
    unsafe {
        let mut native_return = Default::default();
let mut net_i_d_ = net_i_d_;
        let success = sdk::natives::is_damage_tracker_active_on_network_id(
            &mut native_return,
net_i_d_,
        );
        let native_return = native_return;
        
        ResultOfIsDamageTrackerActiveOnNetworkId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_adding_friend(&self, ) -> ResultOfNetworkIsAddingFriend {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_adding_friend(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsAddingFriend {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_host(&self, p0_: i32,
max_players_: i32,
p2_: bool) -> ResultOfNetworkSessionHost {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut max_players_ = max_players_;
let mut p2_ = p2_;
        let success = sdk::natives::network_session_host(
            &mut native_return,
p0_,
max_players_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionHost {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_commerce_item_cat(&self, index_: i32,
index2_: i32) -> ResultOfGetCommerceItemCat {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut index_ = index_;
let mut index2_ = index2_;
        let success = sdk::natives::get_commerce_item_cat(
            native_return.pin_mut(),
index_,
index2_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetCommerceItemCat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_override_team_restrictions(&self, team_: i32,
toggle_: bool) -> ResultOfNetworkOverrideTeamRestrictions {
    unsafe {
        let mut team_ = team_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_override_team_restrictions(
            team_,
toggle_,
        );
        
        
        ResultOfNetworkOverrideTeamRestrictions {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_handle_valid(&self, gamer_handle_: shared::MemoryBufferId,
gamer_handle_size_: i32) -> ResultOfNetworkIsHandleValid {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
let mut gamer_handle_size_ = gamer_handle_size_;
        let success = sdk::natives::network_is_handle_valid(
            &mut native_return,
gamer_handle_,
gamer_handle_size_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkIsHandleValid {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_is_title_update_required(&self, ) -> ResultOfNetworkIsTitleUpdateRequired {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_title_update_required(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsTitleUpdateRequired {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_net_statistics_info(&self, p0_: shared::MemoryBufferId) -> ResultOfNetworkGetNetStatisticsInfo {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
        let success = sdk::natives::network_get_net_statistics_info(
            p0_,
        );
        let p0_ = 0;
        
        ResultOfNetworkGetNetStatisticsInfo {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_network_is_participant_active(&self, p0_: i32) -> ResultOfNetworkIsParticipantActive {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_is_participant_active(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsParticipantActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_set_crew_limit_max_members_transition(&self, p0_: i32) -> ResultOfNetworkSessionSetCrewLimitMaxMembersTransition {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_session_set_crew_limit_max_members_transition(
            p0_,
        );
        
        
        ResultOfNetworkSessionSetCrewLimitMaxMembersTransition {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_content_user_name(&self, p0_: i32) -> ResultOfUgcGetContentUserName {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_user_name(
            native_return.pin_mut(),
p0_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfUgcGetContentUserName {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_override_spectator_mode(&self, toggle_: bool) -> ResultOfNetworkSetOverrideSpectatorMode {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_override_spectator_mode(
            toggle_,
        );
        
        
        ResultOfNetworkSetOverrideSpectatorMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_content_has_player_record(&self, p0_: i32) -> ResultOfUgcGetContentHasPlayerRecord {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_has_player_record(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfUgcGetContentHasPlayerRecord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_entity_concealed(&self, entity_: u32) -> ResultOfNetworkIsEntityConcealed {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::network_is_entity_concealed(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsEntityConcealed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_all_sticky_bombs_from_entity(&self, entity_: u32,
ped_: u32) -> ResultOfRemoveAllStickyBombsFromEntity {
    unsafe {
        let mut entity_ = entity_;
let mut ped_ = ped_;
        let success = sdk::natives::remove_all_sticky_bombs_from_entity(
            entity_,
ped_,
        );
        
        
        ResultOfRemoveAllStickyBombsFromEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_fillout_pm_player_list_with_names(&self, p0_: shared::MemoryBufferId,
p1_: shared::MemoryBufferId,
p2_: i32,
p3_: i32) -> ResultOfFilloutPmPlayerListWithNames {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::fillout_pm_player_list_with_names(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
let p0_ = 0;
let p1_ = 0;
        
        ResultOfFilloutPmPlayerListWithNames {
            success,
            ret: native_return,
            p0_,
p1_
        }
    }
}

    fn native_network_is_gamer_talking(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkIsGamerTalking {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_is_gamer_talking(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkIsGamerTalking {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_has_made_invite_decision(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkHasMadeInviteDecision {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_has_made_invite_decision(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkHasMadeInviteDecision {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_do_transition_quickmatch(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOfNetworkDoTransitionQuickmatch {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::network_do_transition_quickmatch(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        let native_return = native_return;
        
        ResultOfNetworkDoTransitionQuickmatch {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_currently_selected_gamer_handle_from_invite_menu(&self, p0_: shared::MemoryBufferId) -> ResultOfNetworkSetCurrentlySelectedGamerHandleFromInviteMenu {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
        let success = sdk::natives::network_set_currently_selected_gamer_handle_from_invite_menu(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfNetworkSetCurrentlySelectedGamerHandleFromInviteMenu {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_get_commerce_item_texturename(&self, index_: i32) -> ResultOfGetCommerceItemTexturename {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut index_ = index_;
        let success = sdk::natives::get_commerce_item_texturename(
            native_return.pin_mut(),
index_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetCommerceItemTexturename {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_network_id_remotely_controlled(&self, net_id_: i32) -> ResultOfNetworkIsNetworkIdRemotelyControlled {
    unsafe {
        let mut native_return = Default::default();
let mut net_id_ = net_id_;
        let success = sdk::natives::network_is_network_id_remotely_controlled(
            &mut native_return,
net_id_,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsNetworkIdRemotelyControlled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_reset_body_tracker(&self, ) -> ResultOfNetworkResetBodyTracker {
    unsafe {
        
        let success = sdk::natives::network_reset_body_tracker(
            
        );
        
        
        ResultOfNetworkResetBodyTracker {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_remove_all_transition_invite(&self, ) -> ResultOfNetworkRemoveAllTransitionInvite {
    unsafe {
        
        let success = sdk::natives::network_remove_all_transition_invite(
            
        );
        
        
        ResultOfNetworkRemoveAllTransitionInvite {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_register_mission_vehicles(&self, amount_: i32) -> ResultOfCanRegisterMissionVehicles {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
        let success = sdk::natives::can_register_mission_vehicles(
            &mut native_return,
amount_,
        );
        let native_return = native_return;
        
        ResultOfCanRegisterMissionVehicles {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_invited_gamer_to_transition(&self, p0_: shared::MemoryBufferId) -> ResultOfNetworkHasInvitedGamerToTransition {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
        let success = sdk::natives::network_has_invited_gamer_to_transition(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfNetworkHasInvitedGamerToTransition {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_get_presence_invite_playlist_current(&self, p0_: i32) -> ResultOfNetworkGetPresenceInvitePlaylistCurrent {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_presence_invite_playlist_current(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetPresenceInvitePlaylistCurrent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_crewinfo_get_string_value(&self, anim_dict_: Option<String>,
anim_name_: Option<String>) -> ResultOfNetworkClanCrewinfoGetStringValue {
    unsafe {
        let mut native_return = Default::default();
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
        let success = sdk::natives::network_clan_crewinfo_get_string_value(
            &mut native_return,
anim_dict_.as_ref().unwrap(),
anim_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfNetworkClanCrewinfoGetStringValue {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_release_all_commerce_item_images(&self, ) -> ResultOfReleaseAllCommerceItemImages {
    unsafe {
        
        let success = sdk::natives::release_all_commerce_item_images(
            
        );
        
        
        ResultOfReleaseAllCommerceItemImages {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_have_user_content_privileges(&self, p0_: i32) -> ResultOfNetworkHaveUserContentPrivileges {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_have_user_content_privileges(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkHaveUserContentPrivileges {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_unregister_networked_entity(&self, entity_: u32) -> ResultOfNetworkUnregisterNetworkedEntity {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::network_unregister_networked_entity(
            entity_,
        );
        
        
        ResultOfNetworkUnregisterNetworkedEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_transition_members(&self, data_: shared::MemoryBufferId,
data_count_: i32) -> ResultOfNetworkGetTransitionMembers {
    unsafe {
        let mut native_return = Default::default();
let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
let mut data_count_ = data_count_;
        let success = sdk::natives::network_get_transition_members(
            &mut native_return,
data_,
data_count_,
        );
        let native_return = native_return;
let data_ = 0;
        
        ResultOfNetworkGetTransitionMembers {
            success,
            ret: native_return,
            data_
        }
    }
}

    fn native_network_get_activity_player_num(&self, p0_: bool) -> ResultOfNetworkGetActivityPlayerNum {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_activity_player_num(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetActivityPlayerNum {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_request_to_be_host_of_this_script(&self, ) -> ResultOfNetworkRequestToBeHostOfThisScript {
    unsafe {
        
        let success = sdk::natives::network_request_to_be_host_of_this_script(
            
        );
        
        
        ResultOfNetworkRequestToBeHostOfThisScript {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_add_ped_to_synchronised_scene(&self, ped_: u32,
net_scene_: i32,
anim_dict_: Option<String>,
animn_name_: Option<String>,
speed_: f32,
speed_multiplier_: f32,
duration_: i32,
flag_: i32,
playback_rate_: f32,
p9_: i32) -> ResultOfNetworkAddPedToSynchronisedScene {
    unsafe {
        let mut ped_ = ped_;
let mut net_scene_ = net_scene_;
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut animn_name_ = sdk_helpers::create_c_string_ptr(animn_name_);
let mut speed_ = speed_;
let mut speed_multiplier_ = speed_multiplier_;
let mut duration_ = duration_;
let mut flag_ = flag_;
let mut playback_rate_ = playback_rate_;
let mut p9_ = p9_;
        let success = sdk::natives::network_add_ped_to_synchronised_scene(
            ped_,
net_scene_,
anim_dict_.as_ref().unwrap(),
animn_name_.as_ref().unwrap(),
speed_,
speed_multiplier_,
duration_,
flag_,
playback_rate_,
p9_,
        );
        
        
        ResultOfNetworkAddPedToSynchronisedScene {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_presence_invite_index_by_id(&self, p0_: i32) -> ResultOfNetworkGetPresenceInviteIndexById {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_presence_invite_index_by_id(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetPresenceInviteIndexById {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_offline_invite_pending(&self, ) -> ResultOfNetworkIsOfflineInvitePending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_offline_invite_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsOfflineInvitePending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_is_closed_crew(&self, ) -> ResultOfNetworkSessionIsClosedCrew {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_is_closed_crew(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionIsClosedCrew {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_currently_selected_gamer_handle_from_invite_menu(&self, p0_: shared::MemoryBufferId) -> ResultOfNetworkGetCurrentlySelectedGamerHandleFromInviteMenu {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
        let success = sdk::natives::network_get_currently_selected_gamer_handle_from_invite_menu(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfNetworkGetCurrentlySelectedGamerHandleFromInviteMenu {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_get_np_unavailable_reason(&self, ) -> ResultOfNetworkGetNpUnavailableReason {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_np_unavailable_reason(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetNpUnavailableReason {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_activity_spectator(&self, toggle_: bool) -> ResultOfNetworkSetActivitySpectator {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_activity_spectator(
            toggle_,
        );
        
        
        ResultOfNetworkSetActivitySpectator {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_remove_transition_invite(&self, p0_: shared::MemoryBufferId) -> ResultOfNetworkRemoveTransitionInvite {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
        let success = sdk::natives::network_remove_transition_invite(
            p0_,
        );
        let p0_ = 0;
        
        ResultOfNetworkRemoveTransitionInvite {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_network_clan_is_rockstar_clan(&self, clan_desc_: shared::MemoryBufferId,
buffer_size_: i32) -> ResultOfNetworkClanIsRockstarClan {
    unsafe {
        let mut native_return = Default::default();
let mut clan_desc_ = self.memory_buffers.borrow_mut().get_mut_ptr(clan_desc_) as *mut c_void;
let mut buffer_size_ = buffer_size_;
        let success = sdk::natives::network_clan_is_rockstar_clan(
            &mut native_return,
clan_desc_,
buffer_size_,
        );
        let native_return = native_return;
let clan_desc_ = 0;
        
        ResultOfNetworkClanIsRockstarClan {
            success,
            ret: native_return,
            clan_desc_
        }
    }
}

    fn native_get_user_premium_access(&self, ) -> ResultOfGetUserPremiumAccess {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_user_premium_access(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetUserPremiumAccess {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_content_rating_count(&self, p0_: i32,
p1_: i32) -> ResultOfUgcGetContentRatingCount {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::ugc_get_content_rating_count(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfUgcGetContentRatingCount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_local_player_visible_locally(&self, b_include_players_vehicle_: bool) -> ResultOfSetLocalPlayerVisibleLocally {
    unsafe {
        let mut b_include_players_vehicle_ = b_include_players_vehicle_;
        let success = sdk::natives::set_local_player_visible_locally(
            b_include_players_vehicle_,
        );
        
        
        ResultOfSetLocalPlayerVisibleLocally {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_content_total(&self, ) -> ResultOfUgcGetContentTotal {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_get_content_total(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfUgcGetContentTotal {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reserve_network_mission_vehicles(&self, amount_: i32) -> ResultOfReserveNetworkMissionVehicles {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::reserve_network_mission_vehicles(
            amount_,
        );
        
        
        ResultOfReserveNetworkMissionVehicles {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_network_id_visible_in_cutscene_remain_hack(&self, p0_: i32,
p1_: i32) -> ResultOfSetNetworkIdVisibleInCutsceneRemainHack {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_network_id_visible_in_cutscene_remain_hack(
            p0_,
p1_,
        );
        
        
        ResultOfSetNetworkIdVisibleInCutsceneRemainHack {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_has_social_networking_sharing_priv(&self, ) -> ResultOfNetworkHasSocialNetworkingSharingPriv {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_social_networking_sharing_priv(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkHasSocialNetworkingSharingPriv {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_follow_invite(&self, ) -> ResultOfNetworkHasFollowInvite {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_follow_invite(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkHasFollowInvite {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_player_get_name(&self, player_: u32) -> ResultOfNetworkPlayerGetName {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut player_ = player_;
        let success = sdk::natives::network_player_get_name(
            native_return.pin_mut(),
player_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfNetworkPlayerGetName {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_use_player_colour_instead_of_team_colour(&self, toggle_: bool) -> ResultOfUsePlayerColourInsteadOfTeamColour {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::use_player_colour_instead_of_team_colour(
            toggle_,
        );
        
        
        ResultOfUsePlayerColourInsteadOfTeamColour {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_showing_system_ui_or_recently_requested_upsell(&self, ) -> ResultOfNetworkIsShowingSystemUiOrRecentlyRequestedUpsell {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_showing_system_ui_or_recently_requested_upsell(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsShowingSystemUiOrRecentlyRequestedUpsell {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_conneted_to_np_presence(&self, ) -> ResultOfNetworkIsConnetedToNpPresence {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_conneted_to_np_presence(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsConnetedToNpPresence {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_check_online_privileges(&self, p0_: i32,
p1_: bool) -> ResultOfNetworkCheckOnlinePrivileges {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_check_online_privileges(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfNetworkCheckOnlinePrivileges {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_remove_invalid_object_model(&self, model_hash_: u32) -> ResultOfNetworkRemoveInvalidObjectModel {
    unsafe {
        let mut model_hash_ = model_hash_;
        let success = sdk::natives::network_remove_invalid_object_model(
            model_hash_,
        );
        
        
        ResultOfNetworkRemoveInvalidObjectModel {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_did_modify_succeed(&self, ) -> ResultOfUgcDidModifySucceed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_did_modify_succeed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfUgcDidModifySucceed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_current_data_manager_handle(&self, p0_: shared::MemoryBufferId) -> ResultOfNetworkSetCurrentDataManagerHandle {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
        let success = sdk::natives::network_set_current_data_manager_handle(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfNetworkSetCurrentDataManagerHandle {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_reserve_local_network_mission_objects(&self, amount_: i32) -> ResultOfReserveLocalNetworkMissionObjects {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::reserve_local_network_mission_objects(
            amount_,
        );
        
        
        ResultOfReserveLocalNetworkMissionObjects {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_destroyer_of_network_id(&self, net_id_: i32,
weapon_hash_: u32) -> ResultOfNetworkGetDestroyerOfNetworkId {
    unsafe {
        let mut native_return = Default::default();
let mut net_id_ = net_id_;
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::network_get_destroyer_of_network_id(
            &mut native_return,
&mut weapon_hash_,
net_id_,
        );
        let native_return = native_return;
let weapon_hash_ = weapon_hash_;
        
        ResultOfNetworkGetDestroyerOfNetworkId {
            success,
            ret: native_return,
            weapon_hash_
        }
    }
}

    fn native_get_network_time(&self, ) -> ResultOfGetNetworkTime {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_network_time(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetNetworkTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_script_ready_for_events(&self, toggle_: bool) -> ResultOfNetworkSetScriptReadyForEvents {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_script_ready_for_events(
            toggle_,
        );
        
        
        ResultOfNetworkSetScriptReadyForEvents {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_create_synchronised_scene(&self, x_: f32,
y_: f32,
z_: f32,
x_rot_: f32,
y_rot_: f32,
z_rot_: f32,
rotation_order_: i32,
use_occlusion_portal_: bool,
looped_: bool,
p9_: f32,
anim_time_: f32,
p11_: f32) -> ResultOfNetworkCreateSynchronisedScene {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut x_rot_ = x_rot_;
let mut y_rot_ = y_rot_;
let mut z_rot_ = z_rot_;
let mut rotation_order_ = rotation_order_;
let mut use_occlusion_portal_ = use_occlusion_portal_;
let mut looped_ = looped_;
let mut p9_ = p9_;
let mut anim_time_ = anim_time_;
let mut p11_ = p11_;
        let success = sdk::natives::network_create_synchronised_scene(
            &mut native_return,
x_,
y_,
z_,
x_rot_,
y_rot_,
z_rot_,
rotation_order_,
use_occlusion_portal_,
looped_,
p9_,
anim_time_,
p11_,
        );
        let native_return = native_return;
        
        ResultOfNetworkCreateSynchronisedScene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_content_description_hash(&self, p0_: i32) -> ResultOfUgcGetContentDescriptionHash {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_description_hash(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfUgcGetContentDescriptionHash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_look_at_talkers(&self, p0_: bool) -> ResultOfNetworkSetLookAtTalkers {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_set_look_at_talkers(
            p0_,
        );
        
        
        ResultOfNetworkSetLookAtTalkers {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_bone_id_of_fatal_hit(&self, ) -> ResultOfNetworkGetBoneIdOfFatalHit {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_bone_id_of_fatal_hit(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetBoneIdOfFatalHit {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_inactive_profile(&self, p0_: shared::MemoryBufferId) -> ResultOfNetworkIsInactiveProfile {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
        let success = sdk::natives::network_is_inactive_profile(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfNetworkIsInactiveProfile {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_can_enter_multiplayer(&self, ) -> ResultOfNetworkCanEnterMultiplayer {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_can_enter_multiplayer(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkCanEnterMultiplayer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_in_ghost_collision(&self, entity_: u32) -> ResultOfIsEntityInGhostCollision {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_in_ghost_collision(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityInGhostCollision {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_add_invalid_object_model(&self, model_hash_: u32) -> ResultOfNetworkAddInvalidObjectModel {
    unsafe {
        let mut model_hash_ = model_hash_;
        let success = sdk::natives::network_add_invalid_object_model(
            model_hash_,
        );
        
        
        ResultOfNetworkAddInvalidObjectModel {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_voice_respond_to_request(&self, p0_: bool,
p1_: i32) -> ResultOfNetworkSessionVoiceRespondToRequest {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_session_voice_respond_to_request(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkSessionVoiceRespondToRequest {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_content_has_hi_res_photo(&self, p0_: i32) -> ResultOfUgcGetContentHasHiResPhoto {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_has_hi_res_photo(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfUgcGetContentHasHiResPhoto {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_request_content_data_from_params(&self, content_type_name_: Option<String>,
content_id_: Option<String>,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfUgcRequestContentDataFromParams {
    unsafe {
        let mut native_return = Default::default();
let mut content_type_name_ = sdk_helpers::create_c_string_ptr(content_type_name_);
let mut content_id_ = sdk_helpers::create_c_string_ptr(content_id_);
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::ugc_request_content_data_from_params(
            &mut native_return,
content_type_name_.as_ref().unwrap(),
content_id_.as_ref().unwrap(),
p2_,
p3_,
p4_,
        );
        let native_return = native_return;
        
        ResultOfUgcRequestContentDataFromParams {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_register_mission_objects(&self, amount_: i32) -> ResultOfCanRegisterMissionObjects {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
        let success = sdk::natives::can_register_mission_objects(
            &mut native_return,
amount_,
        );
        let native_return = native_return;
        
        ResultOfCanRegisterMissionObjects {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_have_ros_banned_priv(&self, ) -> ResultOfNetworkHaveRosBannedPriv {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_have_ros_banned_priv(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkHaveRosBannedPriv {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_cloud_background_script_request_pending(&self, ) -> ResultOfNetworkIsCloudBackgroundScriptRequestPending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_cloud_background_script_request_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsCloudBackgroundScriptRequestPending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_get_by_content_id(&self, content_id_: Option<String>,
content_type_name_: Option<String>) -> ResultOfUgcGetGetByContentId {
    unsafe {
        let mut native_return = Default::default();
let mut content_id_ = sdk_helpers::create_c_string_ptr(content_id_);
let mut content_type_name_ = sdk_helpers::create_c_string_ptr(content_type_name_);
        let success = sdk::natives::ugc_get_get_by_content_id(
            &mut native_return,
content_id_.as_ref().unwrap(),
content_type_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfUgcGetGetByContentId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_entity_get_object_id(&self, entity_: u32) -> ResultOfNetworkEntityGetObjectId {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::network_entity_get_object_id(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfNetworkEntityGetObjectId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_player_owns_waypoint(&self, player_: u32) -> ResultOfNetworkGetPlayerOwnsWaypoint {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_get_player_owns_waypoint(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetPlayerOwnsWaypoint {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_host_player_index(&self, ) -> ResultOfNetworkGetHostPlayerIndex {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_host_player_index(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetHostPlayerIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_should_show_strict_nat_warning(&self, ) -> ResultOfNetworkShouldShowStrictNatWarning {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_should_show_strict_nat_warning(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkShouldShowStrictNatWarning {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_assisted_kill_of_entity(&self, player_: u32,
entity_: u32,
p2_: i32) -> ResultOfNetworkGetAssistedKillOfEntity {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut entity_ = entity_;
let mut p2_ = p2_;
        let success = sdk::natives::network_get_assisted_kill_of_entity(
            &mut native_return,
&mut p2_,
player_,
entity_,
        );
        let native_return = native_return;
let p2_ = p2_;
        
        ResultOfNetworkGetAssistedKillOfEntity {
            success,
            ret: native_return,
            p2_
        }
    }
}

    fn native_set_network_enable_high_speed_edge_fall_detection(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetNetworkEnableHighSpeedEdgeFallDetection {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_network_enable_high_speed_edge_fall_detection(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetNetworkEnableHighSpeedEdgeFallDetection {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_host_of_this_script(&self, ) -> ResultOfNetworkIsHostOfThisScript {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_host_of_this_script(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsHostOfThisScript {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_check_communication_privileges(&self, p0_: i32,
p1_: i32,
p2_: bool) -> ResultOfNetworkCheckCommunicationPrivileges {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_check_communication_privileges(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfNetworkCheckCommunicationPrivileges {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_show_account_upgrade_ui(&self, ) -> ResultOfNetworkShowAccountUpgradeUi {
    unsafe {
        
        let success = sdk::natives::network_show_account_upgrade_ui(
            
        );
        
        
        ResultOfNetworkShowAccountUpgradeUi {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_talker_proximity(&self, ) -> ResultOfNetworkGetTalkerProximity {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_talker_proximity(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetTalkerProximity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_valid_ros_credentials(&self, ) -> ResultOfNetworkHasValidRosCredentials {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_valid_ros_credentials(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkHasValidRosCredentials {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_is_in_voice_session(&self, ) -> ResultOfNetworkSessionIsInVoiceSession {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_is_in_voice_session(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionIsInVoiceSession {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_show_profile_ui(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkShowProfileUi {
    unsafe {
        let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_show_profile_ui(
            gamer_handle_,
        );
        let gamer_handle_ = 0;
        
        ResultOfNetworkShowProfileUi {
            success,
            ret: (),
            gamer_handle_
        }
    }
}

    fn native_network_queue_gamer_for_status(&self, p0_: shared::MemoryBufferId) -> ResultOfNetworkQueueGamerForStatus {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
        let success = sdk::natives::network_queue_gamer_for_status(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfNetworkQueueGamerForStatus {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_does_tunable_exist(&self, tunable_context_: Option<String>,
tunable_name_: Option<String>) -> ResultOfNetworkDoesTunableExist {
    unsafe {
        let mut native_return = Default::default();
let mut tunable_context_ = sdk_helpers::create_c_string_ptr(tunable_context_);
let mut tunable_name_ = sdk_helpers::create_c_string_ptr(tunable_name_);
        let success = sdk::natives::network_does_tunable_exist(
            &mut native_return,
tunable_context_.as_ref().unwrap(),
tunable_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfNetworkDoesTunableExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clear_get_gamer_status(&self, ) -> ResultOfNetworkClearGetGamerStatus {
    unsafe {
        
        let success = sdk::natives::network_clear_get_gamer_status(
            
        );
        
        
        ResultOfNetworkClearGetGamerStatus {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_request_control_of_door(&self, door_i_d_: i32) -> ResultOfNetworkRequestControlOfDoor {
    unsafe {
        let mut native_return = Default::default();
let mut door_i_d_ = door_i_d_;
        let success = sdk::natives::network_request_control_of_door(
            &mut native_return,
door_i_d_,
        );
        let native_return = native_return;
        
        ResultOfNetworkRequestControlOfDoor {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_content_rating_positive_count(&self, p0_: i32,
p1_: i32) -> ResultOfUgcGetContentRatingPositiveCount {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::ugc_get_content_rating_positive_count(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfUgcGetContentRatingPositiveCount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_friend_handle_online(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkIsFriendHandleOnline {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_is_friend_handle_online(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkIsFriendHandleOnline {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_am_i_blocked_by_player(&self, player_: u32) -> ResultOfNetworkAmIblockedByPlayer {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_am_i_blocked_by_player(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkAmIblockedByPlayer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_presence_invite_is_tournament(&self, p0_: i32) -> ResultOfNetworkGetPresenceInviteIsTournament {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_presence_invite_is_tournament(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetPresenceInviteIsTournament {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_store_available_to_user(&self, ) -> ResultOfIsStoreAvailableToUser {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_store_available_to_user(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsStoreAvailableToUser {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_launch_from_live_area(&self, ) -> ResultOfGetIsLaunchFromLiveArea {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_launch_from_live_area(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetIsLaunchFromLiveArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_network_time_accurate(&self, ) -> ResultOfGetNetworkTimeAccurate {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_network_time_accurate(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetNetworkTimeAccurate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_trigger_damage_event_for_zero_damage(&self, entity_: u32,
toggle_: bool) -> ResultOfNetworkTriggerDamageEventForZeroDamage {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_trigger_damage_event_for_zero_damage(
            entity_,
toggle_,
        );
        
        
        ResultOfNetworkTriggerDamageEventForZeroDamage {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_local_player_invincible(&self, ) -> ResultOfNetworkIsLocalPlayerInvincible {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_local_player_invincible(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsLocalPlayerInvincible {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_content_to_load_type(&self, ) -> ResultOfGetContentToLoadType {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_content_to_load_type(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetContentToLoadType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_transition_start(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfNetworkTransitionStart {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_transition_start(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOfNetworkTransitionStart {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_set_matchmaking_group_max(&self, player_type_: i32,
player_count_: i32) -> ResultOfNetworkSessionSetMatchmakingGroupMax {
    unsafe {
        let mut player_type_ = player_type_;
let mut player_count_ = player_count_;
        let success = sdk::natives::network_session_set_matchmaking_group_max(
            player_type_,
player_count_,
        );
        
        
        ResultOfNetworkSessionSetMatchmakingGroupMax {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_status_of_texture_download(&self, p0_: i32) -> ResultOfGetStatusOfTextureDownload {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_status_of_texture_download(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfGetStatusOfTextureDownload {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_access_tunable_int(&self, tunable_context_: Option<String>,
tunable_name_: Option<String>,
value_: i32) -> ResultOfNetworkAccessTunableInt {
    unsafe {
        let mut native_return = Default::default();
let mut tunable_context_ = sdk_helpers::create_c_string_ptr(tunable_context_);
let mut tunable_name_ = sdk_helpers::create_c_string_ptr(tunable_name_);
let mut value_ = value_;
        let success = sdk::natives::network_access_tunable_int(
            &mut native_return,
&mut value_,
tunable_context_.as_ref().unwrap(),
tunable_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOfNetworkAccessTunableInt {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_network_set_vehicle_driven_in_test_drive(&self, toggle_: bool) -> ResultOfNetworkSetVehicleDrivenInTestDrive {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_vehicle_driven_in_test_drive(
            toggle_,
        );
        
        
        ResultOfNetworkSetVehicleDrivenInTestDrive {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_player_muted_by_me(&self, player_: u32) -> ResultOfNetworkIsPlayerMutedByMe {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_is_player_muted_by_me(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsPlayerMutedByMe {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_content_created_by_local_player(&self, p0_: i32) -> ResultOfUgcGetContentCreatedByLocalPlayer {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_created_by_local_player(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfUgcGetContentCreatedByLocalPlayer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_refreshing_ros_credentials(&self, ) -> ResultOfNetworkIsRefreshingRosCredentials {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_refreshing_ros_credentials(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsRefreshingRosCredentials {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_host(&self, ) -> ResultOfNetworkIsHost {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_host(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsHost {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_chatting_in_platform_party(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkIsChattingInPlatformParty {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_is_chatting_in_platform_party(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkIsChattingInPlatformParty {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_add_friend(&self, gamer_handle_: shared::MemoryBufferId,
message_: Option<String>) -> ResultOfNetworkAddFriend {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
let mut message_ = sdk_helpers::create_c_string_ptr(message_);
        let success = sdk::natives::network_add_friend(
            &mut native_return,
gamer_handle_,
message_.as_ref().unwrap(),
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkAddFriend {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_set_spectator_to_non_spectator_text_chat(&self, toggle_: bool) -> ResultOfNetworkSetSpectatorToNonSpectatorTextChat {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_spectator_to_non_spectator_text_chat(
            toggle_,
        );
        
        
        ResultOfNetworkSetSpectatorToNonSpectatorTextChat {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_can_communicate_with_gamer(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkCanCommunicateWithGamer {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_can_communicate_with_gamer(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkCanCommunicateWithGamer {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_is_using_online_promotion(&self, ) -> ResultOfNetworkIsUsingOnlinePromotion {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_using_online_promotion(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsUsingOnlinePromotion {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_participant_id(&self, ) -> ResultOfParticipantId {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::participant_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfParticipantId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_player_concealed(&self, player_: u32) -> ResultOfNetworkIsPlayerConcealed {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_is_player_concealed(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsPlayerConcealed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_ros_privilege_special_edition_content(&self, ) -> ResultOfNetworkHasRosPrivilegeSpecialEditionContent {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_ros_privilege_special_edition_content(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkHasRosPrivilegeSpecialEditionContent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_request_cloud_background_scripts(&self, ) -> ResultOfNetworkRequestCloudBackgroundScripts {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_request_cloud_background_scripts(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkRequestCloudBackgroundScripts {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_remove_entity_area(&self, area_handle_: i32) -> ResultOfNetworkRemoveEntityArea {
    unsafe {
        let mut native_return = Default::default();
let mut area_handle_ = area_handle_;
        let success = sdk::natives::network_remove_entity_area(
            &mut native_return,
area_handle_,
        );
        let native_return = native_return;
        
        ResultOfNetworkRemoveEntityArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_player_connected(&self, player_: u32) -> ResultOfNetworkIsPlayerConnected {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_is_player_connected(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsPlayerConnected {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_did_get_succeed(&self, ) -> ResultOfUgcDidGetSucceed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_did_get_succeed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfUgcDidGetSucceed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_minimum_rank_for_mission(&self, p0_: bool) -> ResultOfNetworkSetMinimumRankForMission {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_set_minimum_rank_for_mission(
            p0_,
        );
        
        
        ResultOfNetworkSetMinimumRankForMission {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_skip_radio_reset_next_close(&self, ) -> ResultOfNetworkSkipRadioResetNextClose {
    unsafe {
        
        let success = sdk::natives::network_skip_radio_reset_next_close(
            
        );
        
        
        ResultOfNetworkSkipRadioResetNextClose {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_getting_gamer_status(&self, ) -> ResultOfNetworkIsGettingGamerStatus {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_getting_gamer_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsGettingGamerStatus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_do_crew_matchmaking(&self, crew_id_: i32,
p1_: i32,
p2_: i32,
max_players_: i32) -> ResultOfNetworkSessionDoCrewMatchmaking {
    unsafe {
        let mut native_return = Default::default();
let mut crew_id_ = crew_id_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut max_players_ = max_players_;
        let success = sdk::natives::network_session_do_crew_matchmaking(
            &mut native_return,
crew_id_,
p1_,
p2_,
max_players_,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionDoCrewMatchmaking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_bail(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkBail {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_bail(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkBail {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_entity_use_high_precision_rotation(&self, net_id_: i32,
toggle_: bool) -> ResultOfNetworkEntityUseHighPrecisionRotation {
    unsafe {
        let mut net_id_ = net_id_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_entity_use_high_precision_rotation(
            net_id_,
toggle_,
        );
        
        
        ResultOfNetworkEntityUseHighPrecisionRotation {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_age_group(&self, ) -> ResultOfNetworkGetAgeGroup {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_age_group(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetAgeGroup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_remote_player_visible_in_cutscene(&self, player_: u32,
locally_visible_: bool) -> ResultOfSetRemotePlayerVisibleInCutscene {
    unsafe {
        let mut player_ = player_;
let mut locally_visible_ = locally_visible_;
        let success = sdk::natives::set_remote_player_visible_in_cutscene(
            player_,
locally_visible_,
        );
        
        
        ResultOfSetRemotePlayerVisibleInCutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_store_enabled(&self, toggle_: bool) -> ResultOfSetStoreEnabled {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_store_enabled(
            toggle_,
        );
        
        
        ResultOfSetStoreEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_service_event_arguments(&self, ) -> ResultOfClearServiceEventArguments {
    unsafe {
        
        let success = sdk::natives::clear_service_event_arguments(
            
        );
        
        
        ResultOfClearServiceEventArguments {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_access_tunable_float_hash(&self, tunable_context_: u32,
tunable_name_: u32,
value_: f32) -> ResultOfNetworkAccessTunableFloatHash {
    unsafe {
        let mut native_return = Default::default();
let mut tunable_context_ = tunable_context_;
let mut tunable_name_ = tunable_name_;
let mut value_ = value_;
        let success = sdk::natives::network_access_tunable_float_hash(
            &mut native_return,
&mut value_,
tunable_context_,
tunable_name_,
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOfNetworkAccessTunableFloatHash {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_network_transition_block_join_requests(&self, p0_: bool) -> ResultOfNetworkTransitionBlockJoinRequests {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_transition_block_join_requests(
            p0_,
        );
        
        
        ResultOfNetworkTransitionBlockJoinRequests {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_multiplayer_disabled(&self, ) -> ResultOfNetworkIsMultiplayerDisabled {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_multiplayer_disabled(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsMultiplayerDisabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_leave_ped_behind_before_warp(&self, player_: u32,
x_: f32,
y_: f32,
z_: f32,
p4_: bool,
p5_: bool) -> ResultOfNetworkLeavePedBehindBeforeWarp {
    unsafe {
        let mut player_ = player_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::network_leave_ped_behind_before_warp(
            player_,
x_,
y_,
z_,
p4_,
p5_,
        );
        
        
        ResultOfNetworkLeavePedBehindBeforeWarp {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_most_recently_played_content(&self, p0_: i32,
p1_: i32,
p2_: shared::MemoryBufferId,
p3_: shared::MemoryBufferId) -> ResultOfUgcGetMostRecentlyPlayedContent {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = self.memory_buffers.borrow_mut().get_mut_ptr(p2_) as *mut c_void;
let mut p3_ = self.memory_buffers.borrow_mut().get_mut_ptr(p3_) as *mut c_void;
        let success = sdk::natives::ugc_get_most_recently_played_content(
            &mut native_return,
p2_,
p3_,
p0_,
p1_,
        );
        let native_return = native_return;
let p2_ = 0;
let p3_ = 0;
        
        ResultOfUgcGetMostRecentlyPlayedContent {
            success,
            ret: native_return,
            p2_,
p3_
        }
    }
}

    fn native_network_override_send_restrictions(&self, player_: u32,
toggle_: bool) -> ResultOfNetworkOverrideSendRestrictions {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_override_send_restrictions(
            player_,
toggle_,
        );
        
        
        ResultOfNetworkOverrideSendRestrictions {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_content_has_player_bookmarked(&self, p0_: i32) -> ResultOfUgcGetContentHasPlayerBookmarked {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_has_player_bookmarked(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfUgcGetContentHasPlayerBookmarked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_apply_cached_player_head_blend_data(&self, ped_: u32,
player_: u32) -> ResultOfNetworkApplyCachedPlayerHeadBlendData {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut player_ = player_;
        let success = sdk::natives::network_apply_cached_player_head_blend_data(
            &mut native_return,
ped_,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkApplyCachedPlayerHeadBlendData {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_obj_to_net(&self, object_: u32) -> ResultOfObjToNet {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::obj_to_net(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOfObjToNet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_start_synchronised_scene(&self, net_scene_: i32) -> ResultOfNetworkStartSynchronisedScene {
    unsafe {
        let mut net_scene_ = net_scene_;
        let success = sdk::natives::network_start_synchronised_scene(
            net_scene_,
        );
        
        
        ResultOfNetworkStartSynchronisedScene {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_cloud_available(&self, ) -> ResultOfNetworkIsCloudAvailable {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_cloud_available(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsCloudAvailable {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cloud_time_as_int(&self, ) -> ResultOfGetCloudTimeAsInt {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_cloud_time_as_int(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetCloudTimeAsInt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_primary_clan_data_clear(&self, ) -> ResultOfNetworkGetPrimaryClanDataClear {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_primary_clan_data_clear(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetPrimaryClanDataClear {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_player_started_transition(&self, player_: u32) -> ResultOfNetworkHasPlayerStartedTransition {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_has_player_started_transition(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkHasPlayerStartedTransition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_query_my_content(&self, p0_: i32,
p1_: i32,
p2_: shared::MemoryBufferId,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOfUgcQueryMyContent {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = self.memory_buffers.borrow_mut().get_mut_ptr(p2_) as *mut c_void;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::ugc_query_my_content(
            &mut native_return,
p2_,
p0_,
p1_,
p3_,
p4_,
p5_,
        );
        let native_return = native_return;
let p2_ = 0;
        
        ResultOfUgcQueryMyContent {
            success,
            ret: native_return,
            p2_
        }
    }
}

    fn native_network_session_voice_host(&self, ) -> ResultOfNetworkSessionVoiceHost {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_voice_host(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionVoiceHost {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_do_transition_quickmatch_with_group(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: shared::MemoryBufferId,
p5_: i32,
p6_: i32,
p7_: i32) -> ResultOfNetworkDoTransitionQuickmatchWithGroup {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = self.memory_buffers.borrow_mut().get_mut_ptr(p4_) as *mut c_void;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::network_do_transition_quickmatch_with_group(
            &mut native_return,
p4_,
p0_,
p1_,
p2_,
p3_,
p5_,
p6_,
p7_,
        );
        let native_return = native_return;
let p4_ = 0;
        
        ResultOfNetworkDoTransitionQuickmatchWithGroup {
            success,
            ret: native_return,
            p4_
        }
    }
}

    fn native_network_set_in_mp_cutscene(&self, p0_: bool,
p1_: bool) -> ResultOfNetworkSetInMpCutscene {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_set_in_mp_cutscene(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkSetInMpCutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_join_transition(&self, player_: u32) -> ResultOfNetworkJoinTransition {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_join_transition(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkJoinTransition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_activity_spectator_max(&self, max_spectators_: i32) -> ResultOfNetworkSetActivitySpectatorMax {
    unsafe {
        let mut max_spectators_ = max_spectators_;
        let success = sdk::natives::network_set_activity_spectator_max(
            max_spectators_,
        );
        
        
        ResultOfNetworkSetActivitySpectatorMax {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_script_active(&self, script_name_: Option<String>,
instance_id_: i32,
p2_: bool,
position_hash_: i32) -> ResultOfNetworkIsScriptActive {
    unsafe {
        let mut native_return = Default::default();
let mut script_name_ = sdk_helpers::create_c_string_ptr(script_name_);
let mut instance_id_ = instance_id_;
let mut p2_ = p2_;
let mut position_hash_ = position_hash_;
        let success = sdk::natives::network_is_script_active(
            &mut native_return,
script_name_.as_ref().unwrap(),
instance_id_,
p2_,
position_hash_,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsScriptActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_am_i_muted_by_player(&self, player_: u32) -> ResultOfNetworkAmImutedByPlayer {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_am_i_muted_by_player(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkAmImutedByPlayer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_network_id_can_be_reassigned(&self, net_id_: i32,
toggle_: bool) -> ResultOfSetNetworkIdCanBeReassigned {
    unsafe {
        let mut net_id_ = net_id_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_network_id_can_be_reassigned(
            net_id_,
toggle_,
        );
        
        
        ResultOfSetNetworkIdCanBeReassigned {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_transition_to_game(&self, ) -> ResultOfNetworkIsTransitionToGame {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_to_game(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsTransitionToGame {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_proximity_affects_team(&self, toggle_: bool) -> ResultOfNetworkSetProximityAffectsTeam {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_proximity_affects_team(
            toggle_,
        );
        
        
        ResultOfNetworkSetProximityAffectsTeam {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_invite_gamers(&self, p0_: shared::MemoryBufferId,
p1_: i32,
p2_: shared::MemoryBufferId,
p3_: i32) -> ResultOfNetworkInviteGamers {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = p1_;
let mut p2_ = self.memory_buffers.borrow_mut().get_mut_ptr(p2_) as *mut c_void;
let mut p3_ = p3_;
        let success = sdk::natives::network_invite_gamers(
            &mut native_return,
p0_,
p2_,
p1_,
p3_,
        );
        let native_return = native_return;
let p0_ = 0;
let p2_ = 0;
        
        ResultOfNetworkInviteGamers {
            success,
            ret: native_return,
            p0_,
p2_
        }
    }
}

    fn native_network_get_found_gamer(&self, p0_: shared::MemoryBufferId,
p1_: i32) -> ResultOfNetworkGetFoundGamer {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = p1_;
        let success = sdk::natives::network_get_found_gamer(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfNetworkGetFoundGamer {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_disable_invincible_flashing(&self, player_: u32,
toggle_: bool) -> ResultOfNetworkDisableInvincibleFlashing {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_disable_invincible_flashing(
            player_,
toggle_,
        );
        
        
        ResultOfNetworkDisableInvincibleFlashing {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_session_started(&self, ) -> ResultOfNetworkIsSessionStarted {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_session_started(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsSessionStarted {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_are_players_in_same_tutorial_session(&self, player_: u32,
index_: i32) -> ResultOfNetworkArePlayersInSameTutorialSession {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut index_ = index_;
        let success = sdk::natives::network_are_players_in_same_tutorial_session(
            &mut native_return,
player_,
index_,
        );
        let native_return = native_return;
        
        ResultOfNetworkArePlayersInSameTutorialSession {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_time_as_string(&self, time_: i32) -> ResultOfGetTimeAsString {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut time_ = time_;
        let success = sdk::natives::get_time_as_string(
            native_return.pin_mut(),
time_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetTimeAsString {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_do_transition_to_new_freemode(&self, p0_: shared::MemoryBufferId,
p1_: i32,
players_: i32,
p3_: bool,
p4_: bool,
p5_: bool) -> ResultOfNetworkDoTransitionToNewFreemode {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = p1_;
let mut players_ = players_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::network_do_transition_to_new_freemode(
            &mut native_return,
p0_,
p1_,
players_,
p3_,
p4_,
p5_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfNetworkDoTransitionToNewFreemode {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_shutdown_and_load_most_recent_save(&self, ) -> ResultOfShutdownAndLoadMostRecentSave {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::shutdown_and_load_most_recent_save(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfShutdownAndLoadMostRecentSave {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_gamertag_from_handle_start(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkGamertagFromHandleStart {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_gamertag_from_handle_start(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkGamertagFromHandleStart {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_ugc_get_crew_content(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: Option<String>,
p4_: shared::MemoryBufferId) -> ResultOfUgcGetCrewContent {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = sdk_helpers::create_c_string_ptr(p3_);
let mut p4_ = self.memory_buffers.borrow_mut().get_mut_ptr(p4_) as *mut c_void;
        let success = sdk::natives::ugc_get_crew_content(
            &mut native_return,
p4_,
p0_,
p1_,
p2_,
p3_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p4_ = 0;
        
        ResultOfUgcGetCrewContent {
            success,
            ret: native_return,
            p4_
        }
    }
}

    fn native_network_clan_join(&self, clan_desc_: i32) -> ResultOfNetworkClanJoin {
    unsafe {
        let mut native_return = Default::default();
let mut clan_desc_ = clan_desc_;
        let success = sdk::natives::network_clan_join(
            &mut native_return,
clan_desc_,
        );
        let native_return = native_return;
        
        ResultOfNetworkClanJoin {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_is_creating(&self, ) -> ResultOfUgcIsCreating {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_is_creating(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfUgcIsCreating {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_end(&self, p0_: bool,
p1_: bool) -> ResultOfNetworkSessionEnd {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_session_end(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionEnd {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_join_group_activity(&self, ) -> ResultOfNetworkJoinGroupActivity {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_join_group_activity(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkJoinGroupActivity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_suppress_invite(&self, toggle_: bool) -> ResultOfNetworkSuppressInvite {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_suppress_invite(
            toggle_,
        );
        
        
        ResultOfNetworkSuppressInvite {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_do_transition_quickmatch_async(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOfNetworkDoTransitionQuickmatchAsync {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::network_do_transition_quickmatch_async(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        let native_return = native_return;
        
        ResultOfNetworkDoTransitionQuickmatchAsync {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_have_ros_create_ticket_priv(&self, ) -> ResultOfNetworkHaveRosCreateTicketPriv {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_have_ros_create_ticket_priv(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkHaveRosCreateTicketPriv {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_logged_in_to_psn(&self, ) -> ResultOfNetworkIsLoggedInToPsn {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_logged_in_to_psn(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsLoggedInToPsn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_handle_from_member_id(&self, member_id_: Option<String>,
gamer_handle_: shared::MemoryBufferId,
gamer_handle_size_: i32) -> ResultOfNetworkHandleFromMemberId {
    unsafe {
        let mut member_id_ = sdk_helpers::create_c_string_ptr(member_id_);
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
let mut gamer_handle_size_ = gamer_handle_size_;
        let success = sdk::natives::network_handle_from_member_id(
            gamer_handle_,
member_id_.as_ref().unwrap(),
gamer_handle_size_,
        );
        let gamer_handle_ = 0;
        
        ResultOfNetworkHandleFromMemberId {
            success,
            ret: (),
            gamer_handle_
        }
    }
}

    fn native_network_get_network_id_from_entity(&self, entity_: u32) -> ResultOfNetworkGetNetworkIdFromEntity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::network_get_network_id_from_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetNetworkIdFromEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_trigger_tuning_crc_hacker_check(&self, player_: u32,
p1_: Option<String>,
p2_: Option<String>) -> ResultOfTriggerTuningCrcHackerCheck {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
        let success = sdk::natives::trigger_tuning_crc_hacker_check(
            &mut native_return,
player_,
p1_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfTriggerTuningCrcHackerCheck {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_is_emblem_ready(&self, p0_: i32,
p1_: shared::MemoryBufferId) -> ResultOfNetworkClanIsEmblemReady {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
        let success = sdk::natives::network_clan_is_emblem_ready(
            &mut native_return,
p1_,
p0_,
        );
        let native_return = native_return;
let p1_ = 0;
        
        ResultOfNetworkClanIsEmblemReady {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_network_can_text_chat_with_gamer(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkCanTextChatWithGamer {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_can_text_chat_with_gamer(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkCanTextChatWithGamer {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_is_network_id_owned_by_participant(&self, net_id_: i32) -> ResultOfIsNetworkIdOwnedByParticipant {
    unsafe {
        let mut native_return = Default::default();
let mut net_id_ = net_id_;
        let success = sdk::natives::is_network_id_owned_by_participant(
            &mut native_return,
net_id_,
        );
        let native_return = native_return;
        
        ResultOfIsNetworkIdOwnedByParticipant {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_num_found_gamers(&self, ) -> ResultOfNetworkGetNumFoundGamers {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_num_found_gamers(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetNumFoundGamers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_clear_modify_result(&self, ) -> ResultOfUgcClearModifyResult {
    unsafe {
        
        let success = sdk::natives::ugc_clear_modify_result(
            
        );
        
        
        ResultOfUgcClearModifyResult {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_force_cancel_invite(&self, ) -> ResultOfNetworkSessionForceCancelInvite {
    unsafe {
        
        let success = sdk::natives::network_session_force_cancel_invite(
            
        );
        
        
        ResultOfNetworkSessionForceCancelInvite {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_network_vehicle_max_position_delta_multiplier(&self, vehicle_: u32,
multiplier_: f32) -> ResultOfSetNetworkVehicleMaxPositionDeltaMultiplier {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_network_vehicle_max_position_delta_multiplier(
            vehicle_,
multiplier_,
        );
        
        
        ResultOfSetNetworkVehicleMaxPositionDeltaMultiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_time_difference(&self, time_a_: i32,
time_b_: i32) -> ResultOfGetTimeDifference {
    unsafe {
        let mut native_return = Default::default();
let mut time_a_ = time_a_;
let mut time_b_ = time_b_;
        let success = sdk::natives::get_time_difference(
            &mut native_return,
time_a_,
time_b_,
        );
        let native_return = native_return;
        
        ResultOfGetTimeDifference {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_do_not_launch_from_join_as_migrated_host(&self, toggle_: bool) -> ResultOfNetworkSetDoNotLaunchFromJoinAsMigratedHost {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_do_not_launch_from_join_as_migrated_host(
            toggle_,
        );
        
        
        ResultOfNetworkSetDoNotLaunchFromJoinAsMigratedHost {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_commerce_item_image(&self, index_: i32) -> ResultOfRequestCommerceItemImage {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
        let success = sdk::natives::request_commerce_item_image(
            &mut native_return,
index_,
        );
        let native_return = native_return;
        
        ResultOfRequestCommerceItemImage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_num_connected_players(&self, ) -> ResultOfNetworkGetNumConnectedPlayers {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_num_connected_players(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetNumConnectedPlayers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_add_ped_to_synchronised_scene_with_ik(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32,
p8_: i32,
p9_: i32) -> ResultOfNetworkAddPedToSynchronisedSceneWithIk {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::network_add_ped_to_synchronised_scene_with_ik(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
        );
        
        
        ResultOfNetworkAddPedToSynchronisedSceneWithIk {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_host_transition(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: bool,
p6_: bool,
p7_: i32,
p8_: i32,
p9_: i32) -> ResultOfNetworkHostTransition {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::network_host_transition(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
        );
        let native_return = native_return;
        
        ResultOfNetworkHostTransition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_request_control_of_network_id(&self, net_id_: i32) -> ResultOfNetworkRequestControlOfNetworkId {
    unsafe {
        let mut native_return = Default::default();
let mut net_id_ = net_id_;
        let success = sdk::natives::network_request_control_of_network_id(
            &mut native_return,
net_id_,
        );
        let native_return = native_return;
        
        ResultOfNetworkRequestControlOfNetworkId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_network_id_visible_in_cutscene(&self, net_id_: i32,
p1_: bool,
p2_: bool) -> ResultOfSetNetworkIdVisibleInCutscene {
    unsafe {
        let mut net_id_ = net_id_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_network_id_visible_in_cutscene(
            net_id_,
p1_,
p2_,
        );
        
        
        ResultOfSetNetworkIdVisibleInCutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_has_ros_privilege(&self, index_: i32) -> ResultOfNetworkHasRosPrivilege {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
        let success = sdk::natives::network_has_ros_privilege(
            &mut native_return,
index_,
        );
        let native_return = native_return;
        
        ResultOfNetworkHasRosPrivilege {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_max_num_participants(&self, ) -> ResultOfNetworkGetMaxNumParticipants {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_max_num_participants(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetMaxNumParticipants {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_custom_arena_ball_params(&self, net_id_: i32) -> ResultOfNetworkSetCustomArenaBallParams {
    unsafe {
        let mut net_id_ = net_id_;
        let success = sdk::natives::network_set_custom_arena_ball_params(
            net_id_,
        );
        
        
        ResultOfNetworkSetCustomArenaBallParams {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_max_num_network_pickups(&self, ) -> ResultOfGetMaxNumNetworkPickups {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_max_num_network_pickups(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetMaxNumNetworkPickups {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_block_join_requests(&self, toggle_: bool) -> ResultOfNetworkSessionBlockJoinRequests {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_session_block_join_requests(
            toggle_,
        );
        
        
        ResultOfNetworkSessionBlockJoinRequests {
            success,
            ret: (),
            
        }
    }
}

    fn native_facebook_did_post_succeed(&self, ) -> ResultOfFacebookDidPostSucceed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::facebook_did_post_succeed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfFacebookDidPostSucceed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_most_recently_created_content(&self, p0_: i32,
p1_: i32,
p2_: shared::MemoryBufferId,
p3_: shared::MemoryBufferId) -> ResultOfUgcGetMostRecentlyCreatedContent {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = self.memory_buffers.borrow_mut().get_mut_ptr(p2_) as *mut c_void;
let mut p3_ = self.memory_buffers.borrow_mut().get_mut_ptr(p3_) as *mut c_void;
        let success = sdk::natives::ugc_get_most_recently_created_content(
            &mut native_return,
p2_,
p3_,
p0_,
p1_,
        );
        let native_return = native_return;
let p2_ = 0;
let p3_ = 0;
        
        ResultOfUgcGetMostRecentlyCreatedContent {
            success,
            ret: native_return,
            p2_,
p3_
        }
    }
}

    fn native_ugc_get_content_category(&self, p0_: i32) -> ResultOfUgcGetContentCategory {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_category(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfUgcGetContentCategory {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_remote_player_as_ghost(&self, player_: u32,
p1_: bool) -> ResultOfSetRemotePlayerAsGhost {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::set_remote_player_as_ghost(
            player_,
p1_,
        );
        
        
        ResultOfSetRemotePlayerAsGhost {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_override_coords_and_heading(&self, entity_: u32,
x_: f32,
y_: f32,
z_: f32,
heading_: f32) -> ResultOfNetworkOverrideCoordsAndHeading {
    unsafe {
        let mut entity_ = entity_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
        let success = sdk::natives::network_override_coords_and_heading(
            entity_,
x_,
y_,
z_,
heading_,
        );
        
        
        ResultOfNetworkOverrideCoordsAndHeading {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_network_id_always_exists_for_player(&self, net_id_: i32,
player_: u32,
toggle_: bool) -> ResultOfSetNetworkIdAlwaysExistsForPlayer {
    unsafe {
        let mut net_id_ = net_id_;
let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_network_id_always_exists_for_player(
            net_id_,
player_,
toggle_,
        );
        
        
        ResultOfSetNetworkIdAlwaysExistsForPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_platform_subscription_check_pending(&self, ) -> ResultOfNetworkIsPlatformSubscriptionCheckPending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_platform_subscription_check_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsPlatformSubscriptionCheckPending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_content_is_verified(&self, p0_: i32) -> ResultOfUgcGetContentIsVerified {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_is_verified(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfUgcGetContentIsVerified {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_download_membership(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkClanDownloadMembership {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_clan_download_membership(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkClanDownloadMembership {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_get_predicted_velocity(&self, entity_: u32) -> ResultOfNetworkGetPredictedVelocity {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
        let success = sdk::natives::network_get_predicted_velocity(
            native_return.pin_mut(),
entity_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfNetworkGetPredictedVelocity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_access_tunable_bool(&self, tunable_context_: Option<String>,
tunable_name_: Option<String>) -> ResultOfNetworkAccessTunableBool {
    unsafe {
        let mut native_return = Default::default();
let mut tunable_context_ = sdk_helpers::create_c_string_ptr(tunable_context_);
let mut tunable_name_ = sdk_helpers::create_c_string_ptr(tunable_name_);
        let success = sdk::natives::network_access_tunable_bool(
            &mut native_return,
tunable_context_.as_ref().unwrap(),
tunable_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfNetworkAccessTunableBool {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_current_spawn_location_option(&self, mp_setting_spawn_: u32) -> ResultOfNetworkSetCurrentSpawnLocationOption {
    unsafe {
        let mut mp_setting_spawn_ = mp_setting_spawn_;
        let success = sdk::natives::network_set_current_spawn_location_option(
            mp_setting_spawn_,
        );
        
        
        ResultOfNetworkSetCurrentSpawnLocationOption {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_num_reserved_mission_objects(&self, p0_: bool,
p1_: i32) -> ResultOfGetNumReservedMissionObjects {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::get_num_reserved_mission_objects(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfGetNumReservedMissionObjects {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_network_cutscene_entities(&self, toggle_: bool) -> ResultOfSetNetworkCutsceneEntities {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_network_cutscene_entities(
            toggle_,
        );
        
        
        ResultOfSetNetworkCutsceneEntities {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_clan_get_membership_count(&self, p0_: i32) -> ResultOfNetworkClanGetMembershipCount {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_clan_get_membership_count(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOfNetworkClanGetMembershipCount {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_session_voice_connect_to_player(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkSessionVoiceConnectToPlayer {
    unsafe {
        let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_session_voice_connect_to_player(
            gamer_handle_,
        );
        let gamer_handle_ = 0;
        
        ResultOfNetworkSessionVoiceConnectToPlayer {
            success,
            ret: (),
            gamer_handle_
        }
    }
}

    fn native_network_has_pending_invite(&self, ) -> ResultOfNetworkHasPendingInvite {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_pending_invite(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkHasPendingInvite {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_convert_posix_time(&self, posix_time_: i32,
time_structure_: shared::MemoryBufferId) -> ResultOfConvertPosixTime {
    unsafe {
        let mut posix_time_ = posix_time_;
let mut time_structure_ = self.memory_buffers.borrow_mut().get_mut_ptr(time_structure_) as *mut c_void;
        let success = sdk::natives::convert_posix_time(
            time_structure_,
posix_time_,
        );
        let time_structure_ = 0;
        
        ResultOfConvertPosixTime {
            success,
            ret: (),
            time_structure_
        }
    }
}

    fn native_network_is_player_on_blocklist(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkIsPlayerOnBlocklist {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_is_player_on_blocklist(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkIsPlayerOnBlocklist {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_is_in_tutorial_session(&self, ) -> ResultOfNetworkIsInTutorialSession {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_in_tutorial_session(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsInTutorialSession {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_mute_count_for_player(&self, p0_: u32,
p1_: f32,
p2_: f32) -> ResultOfNetworkGetMuteCountForPlayer {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_get_mute_count_for_player(
            &mut p1_,
&mut p2_,
p0_,
        );
        let p1_ = p1_;
let p2_ = p2_;
        
        ResultOfNetworkGetMuteCountForPlayer {
            success,
            ret: (),
            p1_,
p2_
        }
    }
}

    fn native_ugc_get_content_is_using_sc_nickname(&self, p0_: i32) -> ResultOfUgcGetContentIsUsingScNickname {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_is_using_sc_nickname(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfUgcGetContentIsUsingScNickname {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_dump_net_if_config(&self, ) -> ResultOfNetworkDumpNetIfConfig {
    unsafe {
        
        let success = sdk::natives::network_dump_net_if_config(
            
        );
        
        
        ResultOfNetworkDumpNetIfConfig {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_have_communication_privileges(&self, p0_: i32,
player_: u32) -> ResultOfNetworkHaveCommunicationPrivileges {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut player_ = player_;
        let success = sdk::natives::network_have_communication_privileges(
            &mut native_return,
p0_,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkHaveCommunicationPrivileges {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_can_access_multiplayer(&self, loading_state_: i32) -> ResultOfNetworkCanAccessMultiplayer {
    unsafe {
        let mut native_return = Default::default();
let mut loading_state_ = loading_state_;
        let success = sdk::natives::network_can_access_multiplayer(
            &mut native_return,
&mut loading_state_,
        );
        let native_return = native_return;
let loading_state_ = loading_state_;
        
        ResultOfNetworkCanAccessMultiplayer {
            success,
            ret: native_return,
            loading_state_
        }
    }
}

    fn native_network_override_transition_chat(&self, p0_: bool) -> ResultOfNetworkOverrideTransitionChat {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_override_transition_chat(
            p0_,
        );
        
        
        ResultOfNetworkOverrideTransitionChat {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_max_friends(&self, ) -> ResultOfNetworkGetMaxFriends {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_max_friends(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetMaxFriends {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_gamertag_from_handle_pending(&self, ) -> ResultOfNetworkGamertagFromHandlePending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_gamertag_from_handle_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGamertagFromHandlePending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_entity_been_registered_with_this_thread(&self, entity_: u32) -> ResultOfNetworkHasEntityBeenRegisteredWithThisThread {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::network_has_entity_been_registered_with_this_thread(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfNetworkHasEntityBeenRegisteredWithThisThread {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_player_is_active(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkClanPlayerIsActive {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_clan_player_is_active(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkClanPlayerIsActive {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_retain_activity_group(&self, ) -> ResultOfNetworkRetainActivityGroup {
    unsafe {
        
        let success = sdk::natives::network_retain_activity_group(
            
        );
        
        
        ResultOfNetworkRetainActivityGroup {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_damage_tracker_active_on_player(&self, player_: u32) -> ResultOfIsDamageTrackerActiveOnPlayer {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_damage_tracker_active_on_player(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfIsDamageTrackerActiveOnPlayer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_script_automuted(&self, p0_: i32) -> ResultOfNetworkSetScriptAutomuted {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_set_script_automuted(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkSetScriptAutomuted {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_waiting_pop_clear_tutorial_session(&self, ) -> ResultOfNetworkWaitingPopClearTutorialSession {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_waiting_pop_clear_tutorial_session(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkWaitingPopClearTutorialSession {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_any_download_membership_pending(&self, ) -> ResultOfNetworkClanAnyDownloadMembershipPending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_clan_any_download_membership_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkClanAnyDownloadMembershipPending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_commerce_item_name(&self, index_: i32) -> ResultOfGetCommerceItemName {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut index_ = index_;
        let success = sdk::natives::get_commerce_item_name(
            native_return.pin_mut(),
index_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetCommerceItemName {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_change_slots(&self, slots_: i32,
p1_: bool) -> ResultOfNetworkSessionChangeSlots {
    unsafe {
        let mut slots_ = slots_;
let mut p1_ = p1_;
        let success = sdk::natives::network_session_change_slots(
            slots_,
p1_,
        );
        
        
        ResultOfNetworkSessionChangeSlots {
            success,
            ret: (),
            
        }
    }
}

    fn native_veh_to_net(&self, vehicle_: u32) -> ResultOfVehToNet {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::veh_to_net(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfVehToNet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_primary_clan_data_pending(&self, ) -> ResultOfNetworkGetPrimaryClanDataPending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_primary_clan_data_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetPrimaryClanDataPending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_can_view_gamer_user_content(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkCanViewGamerUserContent {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_can_view_gamer_user_content(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkCanViewGamerUserContent {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_session_is_voice_session_active(&self, ) -> ResultOfNetworkSessionIsVoiceSessionActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_is_voice_session_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionIsVoiceSessionActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_trigger_commerce_data_fetch(&self, p0_: i32) -> ResultOfTriggerCommerceDataFetch {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::trigger_commerce_data_fetch(
            p0_,
        );
        
        
        ResultOfTriggerCommerceDataFetch {
            success,
            ret: (),
            
        }
    }
}

    fn native_reserve_network_mission_peds(&self, amount_: i32) -> ResultOfReserveNetworkMissionPeds {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::reserve_network_mission_peds(
            amount_,
        );
        
        
        ResultOfReserveNetworkMissionPeds {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_request_control_of_entity(&self, entity_: u32) -> ResultOfNetworkRequestControlOfEntity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::network_request_control_of_entity(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfNetworkRequestControlOfEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_creators_by_user_id(&self, p0_: shared::MemoryBufferId,
p1_: shared::MemoryBufferId) -> ResultOfUgcGetCreatorsByUserId {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
        let success = sdk::natives::ugc_get_creators_by_user_id(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
let p0_ = 0;
let p1_ = 0;
        
        ResultOfUgcGetCreatorsByUserId {
            success,
            ret: native_return,
            p0_,
p1_
        }
    }
}

    fn native_network_force_local_player_scar_sync(&self, ) -> ResultOfNetworkForceLocalPlayerScarSync {
    unsafe {
        
        let success = sdk::natives::network_force_local_player_scar_sync(
            
        );
        
        
        ResultOfNetworkForceLocalPlayerScarSync {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_get_by_content_ids(&self, data_: shared::MemoryBufferId,
data_count_: i32,
content_type_name_: Option<String>) -> ResultOfUgcGetGetByContentIds {
    unsafe {
        let mut native_return = Default::default();
let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
let mut data_count_ = data_count_;
let mut content_type_name_ = sdk_helpers::create_c_string_ptr(content_type_name_);
        let success = sdk::natives::ugc_get_get_by_content_ids(
            &mut native_return,
data_,
data_count_,
content_type_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
let data_ = 0;
        
        ResultOfUgcGetGetByContentIds {
            success,
            ret: native_return,
            data_
        }
    }
}

    fn native_network_is_player_active(&self, player_: u32) -> ResultOfNetworkIsPlayerActive {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_is_player_active(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsPlayerActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_leave(&self, p0_: i32) -> ResultOfNetworkSessionLeave {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_session_leave(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionLeave {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_host_friends_only(&self, p0_: i32,
max_players_: i32) -> ResultOfNetworkSessionHostFriendsOnly {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut max_players_ = max_players_;
        let success = sdk::natives::network_session_host_friends_only(
            &mut native_return,
p0_,
max_players_,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionHostFriendsOnly {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_is_visible(&self, ) -> ResultOfNetworkSessionIsVisible {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_is_visible(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionIsVisible {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_object_scope_distance(&self, object_: u32,
range_: f32) -> ResultOfNetworkSetObjectScopeDistance {
    unsafe {
        let mut object_ = object_;
let mut range_ = range_;
        let success = sdk::natives::network_set_object_scope_distance(
            object_,
range_,
        );
        
        
        ResultOfNetworkSetObjectScopeDistance {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_clear_query_results(&self, ) -> ResultOfUgcClearQueryResults {
    unsafe {
        
        let success = sdk::natives::ugc_clear_query_results(
            
        );
        
        
        ResultOfUgcClearQueryResults {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_are_social_club_policies_current(&self, ) -> ResultOfNetworkAreSocialClubPoliciesCurrent {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_are_social_club_policies_current(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkAreSocialClubPoliciesCurrent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_voice_active(&self, toggle_: bool) -> ResultOfNetworkSetVoiceActive {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_voice_active(
            toggle_,
        );
        
        
        ResultOfNetworkSetVoiceActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_friend_index_online(&self, friend_index_: i32) -> ResultOfNetworkIsFriendIndexOnline {
    unsafe {
        let mut native_return = Default::default();
let mut friend_index_ = friend_index_;
        let success = sdk::natives::network_is_friend_index_online(
            &mut native_return,
friend_index_,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsFriendIndexOnline {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_content_path(&self, p0_: i32,
p1_: i32) -> ResultOfUgcGetContentPath {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::ugc_get_content_path(
            native_return.pin_mut(),
p0_,
p1_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfUgcGetContentPath {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_remote_memberships_are_in_cache(&self, p0_: i32) -> ResultOfNetworkClanRemoteMembershipsAreInCache {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_clan_remote_memberships_are_in_cache(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOfNetworkClanRemoteMembershipsAreInCache {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_conceal_player(&self, player_: u32,
toggle_: bool,
p2_: bool) -> ResultOfNetworkConcealPlayer {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
        let success = sdk::natives::network_conceal_player(
            player_,
toggle_,
p2_,
        );
        
        
        ResultOfNetworkConcealPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_hash_from_player_handle(&self, player_: u32) -> ResultOfNetworkHashFromPlayerHandle {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_hash_from_player_handle(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkHashFromPlayerHandle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_register_mission_peds(&self, amount_: i32) -> ResultOfCanRegisterMissionPeds {
    unsafe {
        let mut native_return = Default::default();
let mut amount_ = amount_;
        let success = sdk::natives::can_register_mission_peds(
            &mut native_return,
amount_,
        );
        let native_return = native_return;
        
        ResultOfCanRegisterMissionPeds {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_cache_local_player_head_blend_data(&self, ) -> ResultOfNetworkCacheLocalPlayerHeadBlendData {
    unsafe {
        
        let success = sdk::natives::network_cache_local_player_head_blend_data(
            
        );
        
        
        ResultOfNetworkCacheLocalPlayerHeadBlendData {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_np_available(&self, ) -> ResultOfNetworkIsNpAvailable {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_np_available(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsNpAvailable {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_is_displaying_invite_confirmation(&self, ) -> ResultOfNetworkSessionIsDisplayingInviteConfirmation {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_is_displaying_invite_confirmation(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionIsDisplayingInviteConfirmation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_to_ped(&self, net_handle_: i32) -> ResultOfNetToPed {
    unsafe {
        let mut native_return = Default::default();
let mut net_handle_ = net_handle_;
        let success = sdk::natives::net_to_ped(
            &mut native_return,
net_handle_,
        );
        let native_return = native_return;
        
        ResultOfNetToPed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_do_activity_quickmatch(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfNetworkSessionDoActivityQuickmatch {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::network_session_do_activity_quickmatch(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionDoActivityQuickmatch {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_activate_damage_tracker_on_player(&self, player_: u32,
toggle_: bool) -> ResultOfActivateDamageTrackerOnPlayer {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::activate_damage_tracker_on_player(
            player_,
toggle_,
        );
        
        
        ResultOfActivateDamageTrackerOnPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_content_name(&self, p0_: i32) -> ResultOfUgcGetContentName {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_name(
            native_return.pin_mut(),
p0_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfUgcGetContentName {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_leave_ped_behind_before_cutscene(&self, player_: u32,
p1_: bool) -> ResultOfNetworkLeavePedBehindBeforeCutscene {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::network_leave_ped_behind_before_cutscene(
            player_,
p1_,
        );
        
        
        ResultOfNetworkLeavePedBehindBeforeCutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_net_to_ent(&self, net_handle_: i32) -> ResultOfNetToEnt {
    unsafe {
        let mut native_return = Default::default();
let mut net_handle_ = net_handle_;
        let success = sdk::natives::net_to_ent(
            &mut native_return,
net_handle_,
        );
        let native_return = native_return;
        
        ResultOfNetToEnt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_root_content_id(&self, p0_: i32) -> ResultOfUgcGetRootContentId {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_root_content_id(
            native_return.pin_mut(),
p0_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfUgcGetRootContentId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_door_networked(&self, door_hash_: u32) -> ResultOfNetworkIsDoorNetworked {
    unsafe {
        let mut native_return = Default::default();
let mut door_hash_ = door_hash_;
        let success = sdk::natives::network_is_door_networked(
            &mut native_return,
door_hash_,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsDoorNetworked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_primary_clan_data_new(&self, p0_: shared::MemoryBufferId,
p1_: shared::MemoryBufferId) -> ResultOfNetworkGetPrimaryClanDataNew {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
        let success = sdk::natives::network_get_primary_clan_data_new(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
let p0_ = 0;
let p1_ = 0;
        
        ResultOfNetworkGetPrimaryClanDataNew {
            success,
            ret: native_return,
            p0_,
p1_
        }
    }
}

    fn native_network_is_push_to_talk_active(&self, ) -> ResultOfNetworkIsPushToTalkActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_push_to_talk_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsPushToTalkActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_send_transition_invite_via_presence(&self, gamer_handle_: shared::MemoryBufferId,
p1_: Option<String>,
data_count_: i32,
p3_: i32) -> ResultOfNetworkSendTransitionInviteViaPresence {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut data_count_ = data_count_;
let mut p3_ = p3_;
        let success = sdk::natives::network_send_transition_invite_via_presence(
            &mut native_return,
gamer_handle_,
p1_.as_ref().unwrap(),
data_count_,
p3_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkSendTransitionInviteViaPresence {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_ugc_nav(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkUgcNav {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_ugc_nav(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkUgcNav {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_validate_join(&self, p0_: bool) -> ResultOfNetworkSessionValidateJoin {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_session_validate_join(
            p0_,
        );
        
        
        ResultOfNetworkSessionValidateJoin {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_has_ros_privilege_end_date(&self, privilege_: i32,
ban_type_: i32,
time_data_: shared::MemoryBufferId) -> ResultOfNetworkHasRosPrivilegeEndDate {
    unsafe {
        let mut native_return = Default::default();
let mut privilege_ = privilege_;
let mut ban_type_ = ban_type_;
let mut time_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(time_data_) as *mut c_void;
        let success = sdk::natives::network_has_ros_privilege_end_date(
            &mut native_return,
&mut ban_type_,
time_data_,
privilege_,
        );
        let native_return = native_return;
let ban_type_ = ban_type_;
let time_data_ = 0;
        
        ResultOfNetworkHasRosPrivilegeEndDate {
            success,
            ret: native_return,
            ban_type_,
time_data_
        }
    }
}

    fn native_network_stop_synchronised_scene(&self, net_scene_: i32) -> ResultOfNetworkStopSynchronisedScene {
    unsafe {
        let mut net_scene_ = net_scene_;
        let success = sdk::natives::network_stop_synchronised_scene(
            net_scene_,
        );
        
        
        ResultOfNetworkStopSynchronisedScene {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_clear_property_id(&self, ) -> ResultOfNetworkClearPropertyId {
    unsafe {
        
        let success = sdk::natives::network_clear_property_id(
            
        );
        
        
        ResultOfNetworkClearPropertyId {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_clan_has_crewinfo_metadata_been_received(&self, ) -> ResultOfNetworkClanHasCrewinfoMetadataBeenReceived {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_clan_has_crewinfo_metadata_been_received(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkClanHasCrewinfoMetadataBeenReceived {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_transition_add_stage(&self, hash_: u32,
p1_: i32,
p2_: i32,
state_: i32,
p4_: i32) -> ResultOfNetworkTransitionAddStage {
    unsafe {
        let mut native_return = Default::default();
let mut hash_ = hash_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut state_ = state_;
let mut p4_ = p4_;
        let success = sdk::natives::network_transition_add_stage(
            &mut native_return,
hash_,
p1_,
p2_,
state_,
p4_,
        );
        let native_return = native_return;
        
        ResultOfNetworkTransitionAddStage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_send_invite_via_presence(&self, gamer_handle_: shared::MemoryBufferId,
p1_: Option<String>,
data_count_: i32,
p3_: i32) -> ResultOfNetworkSendInviteViaPresence {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut data_count_ = data_count_;
let mut p3_ = p3_;
        let success = sdk::natives::network_send_invite_via_presence(
            &mut native_return,
gamer_handle_,
p1_.as_ref().unwrap(),
data_count_,
p3_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkSendInviteViaPresence {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_has_confirmed_invite(&self, ) -> ResultOfNetworkHasConfirmedInvite {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_confirmed_invite(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkHasConfirmedInvite {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_destroyer_of_entity(&self, entity_: u32,
weapon_hash_: u32) -> ResultOfNetworkGetDestroyerOfEntity {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::network_get_destroyer_of_entity(
            &mut native_return,
&mut weapon_hash_,
entity_,
        );
        let native_return = native_return;
let weapon_hash_ = weapon_hash_;
        
        ResultOfNetworkGetDestroyerOfEntity {
            success,
            ret: native_return,
            weapon_hash_
        }
    }
}

    fn native_network_disable_leave_remote_ped_behind(&self, toggle_: bool) -> ResultOfNetworkDisableLeaveRemotePedBehind {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_disable_leave_remote_ped_behind(
            toggle_,
        );
        
        
        ResultOfNetworkDisableLeaveRemotePedBehind {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_create_content_id(&self, ) -> ResultOfUgcGetCreateContentId {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
        let success = sdk::natives::ugc_get_create_content_id(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfUgcGetCreateContentId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_transition_leave_postponed(&self, ) -> ResultOfNetworkIsTransitionLeavePostponed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_leave_postponed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsTransitionLeavePostponed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_cloud_delete_member_file(&self, p0_: Option<String>) -> ResultOfCloudDeleteMemberFile {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::cloud_delete_member_file(
            &mut native_return,
p0_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfCloudDeleteMemberFile {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_join_invite(&self, ) -> ResultOfNetworkSessionJoinInvite {
    unsafe {
        
        let success = sdk::natives::network_session_join_invite(
            
        );
        
        
        ResultOfNetworkSessionJoinInvite {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_task_cutscene_inscope_multipler(&self, p0_: i32) -> ResultOfNetworkSetTaskCutsceneInscopeMultipler {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_set_task_cutscene_inscope_multipler(
            p0_,
        );
        
        
        ResultOfNetworkSetTaskCutsceneInscopeMultipler {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_query_by_content_ids(&self, data_: shared::MemoryBufferId,
count_: i32,
latest_version_: bool,
content_type_name_: Option<String>) -> ResultOfUgcQueryByContentIds {
    unsafe {
        let mut native_return = Default::default();
let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
let mut count_ = count_;
let mut latest_version_ = latest_version_;
let mut content_type_name_ = sdk_helpers::create_c_string_ptr(content_type_name_);
        let success = sdk::natives::ugc_query_by_content_ids(
            &mut native_return,
data_,
count_,
latest_version_,
content_type_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
let data_ = 0;
        
        ResultOfUgcQueryByContentIds {
            success,
            ret: native_return,
            data_
        }
    }
}

    fn native_network_try_access_tunable_bool_hash(&self, tunable_context_: u32,
tunable_name_: u32,
default_value_: bool) -> ResultOfNetworkTryAccessTunableBoolHash {
    unsafe {
        let mut native_return = Default::default();
let mut tunable_context_ = tunable_context_;
let mut tunable_name_ = tunable_name_;
let mut default_value_ = default_value_;
        let success = sdk::natives::network_try_access_tunable_bool_hash(
            &mut native_return,
tunable_context_,
tunable_name_,
default_value_,
        );
        let native_return = native_return;
        
        ResultOfNetworkTryAccessTunableBoolHash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_host_single_player(&self, p0_: i32) -> ResultOfNetworkSessionHostSinglePlayer {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_session_host_single_player(
            p0_,
        );
        
        
        ResultOfNetworkSessionHostSinglePlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_entity_is_networked(&self, entity_: u32) -> ResultOfNetworkGetEntityIsNetworked {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::network_get_entity_is_networked(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetEntityIsNetworked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_cloud_is_checking_availability(&self, ) -> ResultOfCloudIsCheckingAvailability {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::cloud_is_checking_availability(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfCloudIsCheckingAvailability {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_host_of_this_script(&self, ) -> ResultOfNetworkGetHostOfThisScript {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_host_of_this_script(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetHostOfThisScript {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_max_num_network_objects(&self, ) -> ResultOfGetMaxNumNetworkObjects {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_max_num_network_objects(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetMaxNumNetworkObjects {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_member_id_from_gamer_handle(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkMemberIdFromGamerHandle {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_member_id_from_gamer_handle(
            native_return.pin_mut(),
gamer_handle_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
let gamer_handle_ = 0;
        
        ResultOfNetworkMemberIdFromGamerHandle {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_ugc_was_query_force_cancelled(&self, ) -> ResultOfUgcWasQueryForceCancelled {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_was_query_force_cancelled(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfUgcWasQueryForceCancelled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_action_follow_invite(&self, ) -> ResultOfNetworkActionFollowInvite {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_action_follow_invite(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkActionFollowInvite {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_get_membership(&self, p0_: i32,
clan_membership_: shared::MemoryBufferId,
p2_: i32) -> ResultOfNetworkClanGetMembership {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut clan_membership_ = self.memory_buffers.borrow_mut().get_mut_ptr(clan_membership_) as *mut c_void;
let mut p2_ = p2_;
        let success = sdk::natives::network_clan_get_membership(
            &mut native_return,
&mut p0_,
clan_membership_,
p2_,
        );
        let native_return = native_return;
let p0_ = p0_;
let clan_membership_ = 0;
        
        ResultOfNetworkClanGetMembership {
            success,
            ret: native_return,
            p0_,
clan_membership_
        }
    }
}

    fn native_network_can_set_waypoint(&self, ) -> ResultOfNetworkCanSetWaypoint {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_can_set_waypoint(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkCanSetWaypoint {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_force_local_use_of_synced_scene_camera(&self, net_scene_: i32) -> ResultOfNetworkForceLocalUseOfSyncedSceneCamera {
    unsafe {
        let mut net_scene_ = net_scene_;
        let success = sdk::natives::network_force_local_use_of_synced_scene_camera(
            net_scene_,
        );
        
        
        ResultOfNetworkForceLocalUseOfSyncedSceneCamera {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_gamer_invited_to_transition(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkSetGamerInvitedToTransition {
    unsafe {
        let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_set_gamer_invited_to_transition(
            gamer_handle_,
        );
        let gamer_handle_ = 0;
        
        ResultOfNetworkSetGamerInvitedToTransition {
            success,
            ret: (),
            gamer_handle_
        }
    }
}

    fn native_network_disable_voice_bandwidth_restriction(&self, player_: u32) -> ResultOfNetworkDisableVoiceBandwidthRestriction {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::network_disable_voice_bandwidth_restriction(
            player_,
        );
        
        
        ResultOfNetworkDisableVoiceBandwidthRestriction {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_skip_radio_reset_next_open(&self, ) -> ResultOfNetworkSkipRadioResetNextOpen {
    unsafe {
        
        let success = sdk::natives::network_skip_radio_reset_next_open(
            
        );
        
        
        ResultOfNetworkSkipRadioResetNextOpen {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_commerce_product_price(&self, index_: i32) -> ResultOfGetCommerceProductPrice {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut index_ = index_;
        let success = sdk::natives::get_commerce_product_price(
            native_return.pin_mut(),
index_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetCommerceProductPrice {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_in_session(&self, ) -> ResultOfNetworkIsInSession {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_in_session(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsInSession {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_add_active_matchmaking_group(&self, group_id_: i32) -> ResultOfNetworkSessionAddActiveMatchmakingGroup {
    unsafe {
        let mut group_id_ = group_id_;
        let success = sdk::natives::network_session_add_active_matchmaking_group(
            group_id_,
        );
        
        
        ResultOfNetworkSessionAddActiveMatchmakingGroup {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_num_created_mission_peds(&self, p0_: bool) -> ResultOfGetNumCreatedMissionPeds {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_num_created_mission_peds(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfGetNumCreatedMissionPeds {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_time_less_than(&self, time_a_: i32,
time_b_: i32) -> ResultOfIsTimeLessThan {
    unsafe {
        let mut native_return = Default::default();
let mut time_a_ = time_a_;
let mut time_b_ = time_b_;
        let success = sdk::natives::is_time_less_than(
            &mut native_return,
time_a_,
time_b_,
        );
        let native_return = native_return;
        
        ResultOfIsTimeLessThan {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_has_control_of_door(&self, door_hash_: u32) -> ResultOfNetworkHasControlOfDoor {
    unsafe {
        let mut native_return = Default::default();
let mut door_hash_ = door_hash_;
        let success = sdk::natives::network_has_control_of_door(
            &mut native_return,
door_hash_,
        );
        let native_return = native_return;
        
        ResultOfNetworkHasControlOfDoor {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_fillout_pm_player_list(&self, gamer_handle_: shared::MemoryBufferId,
p1_: i32,
p2_: i32) -> ResultOfFilloutPmPlayerList {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::fillout_pm_player_list(
            &mut native_return,
gamer_handle_,
p1_,
p2_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfFilloutPmPlayerList {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_set_talker_proximity(&self, value_: f32) -> ResultOfNetworkSetTalkerProximity {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::network_set_talker_proximity(
            value_,
        );
        
        
        ResultOfNetworkSetTalkerProximity {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_has_view_gamer_user_content_result(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkHasViewGamerUserContentResult {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_has_view_gamer_user_content_result(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkHasViewGamerUserContentResult {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_ugc_get_content_user_id(&self, p0_: i32) -> ResultOfUgcGetContentUserId {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_get_content_user_id(
            native_return.pin_mut(),
p0_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfUgcGetContentUserId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_use_logarithmic_blending_this_frame(&self, entity_: u32) -> ResultOfNetworkUseLogarithmicBlendingThisFrame {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::network_use_logarithmic_blending_this_frame(
            entity_,
        );
        
        
        ResultOfNetworkUseLogarithmicBlendingThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_entity_from_network_id(&self, net_id_: i32) -> ResultOfNetworkGetEntityFromNetworkId {
    unsafe {
        let mut native_return = Default::default();
let mut net_id_ = net_id_;
        let success = sdk::natives::network_get_entity_from_network_id(
            &mut native_return,
net_id_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetEntityFromNetworkId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_player_from_gamer_handle(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkGetPlayerFromGamerHandle {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_get_player_from_gamer_handle(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkGetPlayerFromGamerHandle {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_is_gamer_muted_by_me(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkIsGamerMutedByMe {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_is_gamer_muted_by_me(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkIsGamerMutedByMe {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_get_primary_clan_data_start(&self, p0_: shared::MemoryBufferId,
p1_: i32) -> ResultOfNetworkGetPrimaryClanDataStart {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = p1_;
        let success = sdk::natives::network_get_primary_clan_data_start(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfNetworkGetPrimaryClanDataStart {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_session_is_private(&self, ) -> ResultOfNetworkSessionIsPrivate {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_is_private(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionIsPrivate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_num_presence_invites(&self, ) -> ResultOfNetworkGetNumPresenceInvites {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_num_presence_invites(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetNumPresenceInvites {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_num_reserved_mission_vehicles(&self, p0_: bool,
p1_: i32) -> ResultOfGetNumReservedMissionVehicles {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::get_num_reserved_mission_vehicles(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfGetNumReservedMissionVehicles {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_total_num_players(&self, ) -> ResultOfNetworkGetTotalNumPlayers {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_total_num_players(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetTotalNumPlayers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_add_synchronised_scene_camera(&self, net_scene_: i32,
anim_dict_: Option<String>,
anim_name_: Option<String>) -> ResultOfNetworkAddSynchronisedSceneCamera {
    unsafe {
        let mut net_scene_ = net_scene_;
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
        let success = sdk::natives::network_add_synchronised_scene_camera(
            net_scene_,
anim_dict_.as_ref().unwrap(),
anim_name_.as_ref().unwrap(),
        );
        
        
        ResultOfNetworkAddSynchronisedSceneCamera {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_content_updated_date(&self, p0_: i32,
p1_: shared::MemoryBufferId) -> ResultOfUgcGetContentUpdatedDate {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
        let success = sdk::natives::ugc_get_content_updated_date(
            p1_,
p0_,
        );
        let p1_ = 0;
        
        ResultOfUgcGetContentUpdatedDate {
            success,
            ret: (),
            p1_
        }
    }
}

    fn native_network_remain_in_game_chat(&self, p0_: bool) -> ResultOfNetworkRemainInGameChat {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_remain_in_game_chat(
            p0_,
        );
        
        
        ResultOfNetworkRemainInGameChat {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_block_join_queue_invites(&self, toggle_: bool) -> ResultOfNetworkBlockJoinQueueInvites {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_block_join_queue_invites(
            toggle_,
        );
        
        
        ResultOfNetworkBlockJoinQueueInvites {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_set_deleted(&self, p0_: shared::MemoryBufferId,
p1_: bool,
p2_: Option<String>) -> ResultOfUgcSetDeleted {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = p1_;
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
        let success = sdk::natives::ugc_set_deleted(
            &mut native_return,
p0_,
p1_,
p2_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfUgcSetDeleted {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_is_transition_visibility_locked(&self, ) -> ResultOfNetworkIsTransitionVisibilityLocked {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_transition_visibility_locked(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsTransitionVisibilityLocked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_end_tutorial_session(&self, ) -> ResultOfNetworkEndTutorialSession {
    unsafe {
        
        let success = sdk::natives::network_end_tutorial_session(
            
        );
        
        
        ResultOfNetworkEndTutorialSession {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_local_player_visible_in_cutscene(&self, p0_: bool,
p1_: bool) -> ResultOfSetLocalPlayerVisibleInCutscene {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_local_player_visible_in_cutscene(
            p0_,
p1_,
        );
        
        
        ResultOfSetLocalPlayerVisibleInCutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_try_to_set_this_script_is_network_script(&self, p0_: i32,
p1_: bool,
p2_: i32) -> ResultOfNetworkTryToSetThisScriptIsNetworkScript {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_try_to_set_this_script_is_network_script(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfNetworkTryToSetThisScriptIsNetworkScript {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_leave_transition(&self, ) -> ResultOfNetworkLeaveTransition {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_leave_transition(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkLeaveTransition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_is_awaiting_invite_response(&self, ) -> ResultOfNetworkSessionIsAwaitingInviteResponse {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_is_awaiting_invite_response(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionIsAwaitingInviteResponse {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_number_body_tracker_hits(&self, ) -> ResultOfNetworkGetNumberBodyTrackerHits {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_get_number_body_tracker_hits(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetNumberBodyTrackerHits {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_presence_invite_playlist_length(&self, p0_: i32) -> ResultOfNetworkGetPresenceInvitePlaylistLength {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_presence_invite_playlist_length(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetPresenceInvitePlaylistLength {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_average_latency(&self, player_: u32) -> ResultOfNetworkGetAverageLatency {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_get_average_latency(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetAverageLatency {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_activate_damage_tracker_on_network_id(&self, net_i_d_: i32,
toggle_: bool) -> ResultOfActivateDamageTrackerOnNetworkId {
    unsafe {
        let mut net_i_d_ = net_i_d_;
let mut toggle_ = toggle_;
        let success = sdk::natives::activate_damage_tracker_on_network_id(
            net_i_d_,
toggle_,
        );
        
        
        ResultOfActivateDamageTrackerOnNetworkId {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_handle_from_friend(&self, friend_index_: i32,
gamer_handle_: shared::MemoryBufferId,
gamer_handle_size_: i32) -> ResultOfNetworkHandleFromFriend {
    unsafe {
        let mut friend_index_ = friend_index_;
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
let mut gamer_handle_size_ = gamer_handle_size_;
        let success = sdk::natives::network_handle_from_friend(
            gamer_handle_,
friend_index_,
gamer_handle_size_,
        );
        let gamer_handle_ = 0;
        
        ResultOfNetworkHandleFromFriend {
            success,
            ret: (),
            gamer_handle_
        }
    }
}

    fn native_ugc_is_getting(&self, ) -> ResultOfUgcIsGetting {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_is_getting(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfUgcIsGetting {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_bookmarked_content(&self, p0_: i32,
p1_: i32,
p2_: Option<String>,
p3_: shared::MemoryBufferId) -> ResultOfUgcGetBookmarkedContent {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut p3_ = self.memory_buffers.borrow_mut().get_mut_ptr(p3_) as *mut c_void;
        let success = sdk::natives::ugc_get_bookmarked_content(
            &mut native_return,
p3_,
p0_,
p1_,
p2_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p3_ = 0;
        
        ResultOfUgcGetBookmarkedContent {
            success,
            ret: native_return,
            p3_
        }
    }
}

    fn native_network_set_team_only_chat(&self, toggle_: bool) -> ResultOfNetworkSetTeamOnlyChat {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_team_only_chat(
            toggle_,
        );
        
        
        ResultOfNetworkSetTeamOnlyChat {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_displaynames_from_handles_start(&self, p0_: shared::MemoryBufferId,
p1_: i32) -> ResultOfNetworkDisplaynamesFromHandlesStart {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = p1_;
        let success = sdk::natives::network_displaynames_from_handles_start(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfNetworkDisplaynamesFromHandlesStart {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_network_session_get_kick_vote(&self, player_: u32) -> ResultOfNetworkSessionGetKickVote {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_session_get_kick_vote(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionGetKickVote {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_register_high_frequency_player_broadcast_variables(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkRegisterHighFrequencyPlayerBroadcastVariables {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_register_high_frequency_player_broadcast_variables(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkRegisterHighFrequencyPlayerBroadcastVariables {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_invert_ghosting(&self, p0_: bool) -> ResultOfSetInvertGhosting {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_invert_ghosting(
            p0_,
        );
        
        
        ResultOfSetInvertGhosting {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_clock_time_overridden(&self, ) -> ResultOfNetworkIsClockTimeOverridden {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_clock_time_overridden(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsClockTimeOverridden {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_sphere_visible_to_another_machine(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32) -> ResultOfIsSphereVisibleToAnotherMachine {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::is_sphere_visible_to_another_machine(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOfIsSphereVisibleToAnotherMachine {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_entity_can_blend(&self, entity_: u32,
toggle_: bool) -> ResultOfNetworkSetEntityCanBlend {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_entity_can_blend(
            entity_,
toggle_,
        );
        
        
        ResultOfNetworkSetEntityCanBlend {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_session_active(&self, ) -> ResultOfNetworkIsSessionActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_session_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsSessionActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_net_to_obj(&self, net_handle_: i32) -> ResultOfNetToObj {
    unsafe {
        let mut native_return = Default::default();
let mut net_handle_ = net_handle_;
        let success = sdk::natives::net_to_obj(
            &mut native_return,
net_handle_,
        );
        let native_return = native_return;
        
        ResultOfNetToObj {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clear_clock_time_override(&self, ) -> ResultOfNetworkClearClockTimeOverride {
    unsafe {
        
        let success = sdk::natives::network_clear_clock_time_override(
            
        );
        
        
        ResultOfNetworkClearClockTimeOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_script_active_by_hash(&self, script_hash_: u32,
p1_: i32,
p2_: bool,
p3_: i32) -> ResultOfNetworkIsScriptActiveByHash {
    unsafe {
        let mut native_return = Default::default();
let mut script_hash_ = script_hash_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::network_is_script_active_by_hash(
            &mut native_return,
script_hash_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsScriptActiveByHash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_player_account_id(&self, player_: u32) -> ResultOfNetworkGetPlayerAccountId {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_get_player_account_id(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetPlayerAccountId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_apply_voice_proximity_override(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfNetworkApplyVoiceProximityOverride {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::network_apply_voice_proximity_override(
            x_,
y_,
z_,
        );
        
        
        ResultOfNetworkApplyVoiceProximityOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_sphere_visible_to_player(&self, p0_: i32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32) -> ResultOfIsSphereVisibleToPlayer {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::is_sphere_visible_to_player(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
        );
        let native_return = native_return;
        
        ResultOfIsSphereVisibleToPlayer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_facebook_post_create_character(&self, ) -> ResultOfFacebookPostCreateCharacter {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::facebook_post_create_character(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfFacebookPostCreateCharacter {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_handle_from_user_id(&self, user_id_: Option<String>,
gamer_handle_: shared::MemoryBufferId,
gamer_handle_size_: i32) -> ResultOfNetworkHandleFromUserId {
    unsafe {
        let mut user_id_ = sdk_helpers::create_c_string_ptr(user_id_);
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
let mut gamer_handle_size_ = gamer_handle_size_;
        let success = sdk::natives::network_handle_from_user_id(
            gamer_handle_,
user_id_.as_ref().unwrap(),
gamer_handle_size_,
        );
        let gamer_handle_ = 0;
        
        ResultOfNetworkHandleFromUserId {
            success,
            ret: (),
            gamer_handle_
        }
    }
}

    fn native_is_network_vehicle_running_respot_timer(&self, network_i_d_: i32) -> ResultOfIsNetworkVehicleRunningRespotTimer {
    unsafe {
        let mut native_return = Default::default();
let mut network_i_d_ = network_i_d_;
        let success = sdk::natives::is_network_vehicle_running_respot_timer(
            &mut native_return,
network_i_d_,
        );
        let native_return = native_return;
        
        ResultOfIsNetworkVehicleRunningRespotTimer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_finding_gamers(&self, ) -> ResultOfNetworkIsFindingGamers {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_finding_gamers(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsFindingGamers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_override_receive_restrictions(&self, player_: u32,
toggle_: bool) -> ResultOfNetworkOverrideReceiveRestrictions {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_override_receive_restrictions(
            player_,
toggle_,
        );
        
        
        ResultOfNetworkOverrideReceiveRestrictions {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_time_more_than(&self, time_a_: i32,
time_b_: i32) -> ResultOfIsTimeMoreThan {
    unsafe {
        let mut native_return = Default::default();
let mut time_a_ = time_a_;
let mut time_b_ = time_b_;
        let success = sdk::natives::is_time_more_than(
            &mut native_return,
time_a_,
time_b_,
        );
        let native_return = native_return;
        
        ResultOfIsTimeMoreThan {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_fade_out_entity(&self, entity_: u32,
normal_: bool,
slow_: bool) -> ResultOfNetworkFadeOutEntity {
    unsafe {
        let mut entity_ = entity_;
let mut normal_ = normal_;
let mut slow_ = slow_;
        let success = sdk::natives::network_fade_out_entity(
            entity_,
normal_,
slow_,
        );
        
        
        ResultOfNetworkFadeOutEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_resolve_privilege_user_content(&self, ) -> ResultOfNetworkResolvePrivilegeUserContent {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_resolve_privilege_user_content(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkResolvePrivilegeUserContent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_start_user_content_permissions_check(&self, net_handle_: shared::MemoryBufferId) -> ResultOfNetworkStartUserContentPermissionsCheck {
    unsafe {
        let mut native_return = Default::default();
let mut net_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(net_handle_) as *mut c_void;
        let success = sdk::natives::network_start_user_content_permissions_check(
            &mut native_return,
net_handle_,
        );
        let native_return = native_return;
let net_handle_ = 0;
        
        ResultOfNetworkStartUserContentPermissionsCheck {
            success,
            ret: native_return,
            net_handle_
        }
    }
}

    fn native_network_am_i_muted_by_gamer(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkAmImutedByGamer {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_am_i_muted_by_gamer(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkAmImutedByGamer {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_get_presence_invite_id(&self, p0_: i32) -> ResultOfNetworkGetPresenceInviteId {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_get_presence_invite_id(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetPresenceInviteId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_get_host_aim_preference(&self, ) -> ResultOfNetworkSessionGetHostAimPreference {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_get_host_aim_preference(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionGetHostAimPreference {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_visible_in_cutscene(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOfSetEntityVisibleInCutscene {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_entity_visible_in_cutscene(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfSetEntityVisibleInCutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_clear_voice_channel(&self, ) -> ResultOfNetworkClearVoiceChannel {
    unsafe {
        
        let success = sdk::natives::network_clear_voice_channel(
            
        );
        
        
        ResultOfNetworkClearVoiceChannel {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_network_id_exists_on_all_machines(&self, net_id_: i32,
toggle_: bool) -> ResultOfSetNetworkIdExistsOnAllMachines {
    unsafe {
        let mut net_id_ = net_id_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_network_id_exists_on_all_machines(
            net_id_,
toggle_,
        );
        
        
        ResultOfSetNetworkIdExistsOnAllMachines {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_content_num(&self, ) -> ResultOfUgcGetContentNum {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_get_content_num(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfUgcGetContentNum {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_friend_name(&self, friend_index_: i32) -> ResultOfNetworkGetFriendName {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut friend_index_ = friend_index_;
        let success = sdk::natives::network_get_friend_name(
            native_return.pin_mut(),
friend_index_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfNetworkGetFriendName {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_entity_locally_invisible(&self, entity_: u32) -> ResultOfSetEntityLocallyInvisible {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::set_entity_locally_invisible(
            entity_,
        );
        
        
        ResultOfSetEntityLocallyInvisible {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_register_mission_doors(&self, p0_: i32) -> ResultOfCanRegisterMissionDoors {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::can_register_mission_doors(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfCanRegisterMissionDoors {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_refresh_player_list_stats(&self, p0_: i32) -> ResultOfRefreshPlayerListStats {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::refresh_player_list_stats(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfRefreshPlayerListStats {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_random_int_ranged(&self, range_start_: i32,
range_end_: i32) -> ResultOfNetworkGetRandomIntRanged {
    unsafe {
        let mut native_return = Default::default();
let mut range_start_ = range_start_;
let mut range_end_ = range_end_;
        let success = sdk::natives::network_get_random_int_ranged(
            &mut native_return,
range_start_,
range_end_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetRandomIntRanged {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_reserved_mission_entities_in_area(&self, x_: f32,
y_: f32,
z_: f32,
p3_: i32,
out1_: shared::MemoryBufferId,
out2_: shared::MemoryBufferId,
out3_: shared::MemoryBufferId) -> ResultOfGetReservedMissionEntitiesInArea {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut out1_ = self.memory_buffers.borrow_mut().get_mut_ptr(out1_) as *mut c_void;
let mut out2_ = self.memory_buffers.borrow_mut().get_mut_ptr(out2_) as *mut c_void;
let mut out3_ = self.memory_buffers.borrow_mut().get_mut_ptr(out3_) as *mut c_void;
        let success = sdk::natives::get_reserved_mission_entities_in_area(
            out1_,
out2_,
out3_,
x_,
y_,
z_,
p3_,
        );
        let out1_ = 0;
let out2_ = 0;
let out3_ = 0;
        
        ResultOfGetReservedMissionEntitiesInArea {
            success,
            ret: (),
            out1_,
out2_,
out3_
        }
    }
}

    fn native_network_does_tunable_exist_hash(&self, tunable_context_: u32,
tunable_name_: u32) -> ResultOfNetworkDoesTunableExistHash {
    unsafe {
        let mut native_return = Default::default();
let mut tunable_context_ = tunable_context_;
let mut tunable_name_ = tunable_name_;
        let success = sdk::natives::network_does_tunable_exist_hash(
            &mut native_return,
tunable_context_,
tunable_name_,
        );
        let native_return = native_return;
        
        ResultOfNetworkDoesTunableExistHash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_find_gamers_in_crew(&self, crew_id_: i32) -> ResultOfNetworkFindGamersInCrew {
    unsafe {
        let mut native_return = Default::default();
let mut crew_id_ = crew_id_;
        let success = sdk::natives::network_find_gamers_in_crew(
            &mut native_return,
crew_id_,
        );
        let native_return = native_return;
        
        ResultOfNetworkFindGamersInCrew {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_access_tunable_float(&self, tunable_context_: Option<String>,
tunable_name_: Option<String>,
value_: f32) -> ResultOfNetworkAccessTunableFloat {
    unsafe {
        let mut native_return = Default::default();
let mut tunable_context_ = sdk_helpers::create_c_string_ptr(tunable_context_);
let mut tunable_name_ = sdk_helpers::create_c_string_ptr(tunable_name_);
let mut value_ = value_;
        let success = sdk::natives::network_access_tunable_float(
            &mut native_return,
&mut value_,
tunable_context_.as_ref().unwrap(),
tunable_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOfNetworkAccessTunableFloat {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_network_session_get_inviter(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkSessionGetInviter {
    unsafe {
        let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_session_get_inviter(
            gamer_handle_,
        );
        let gamer_handle_ = 0;
        
        ResultOfNetworkSessionGetInviter {
            success,
            ret: (),
            gamer_handle_
        }
    }
}

    fn native_set_local_player_invisible_locally(&self, b_include_players_vehicle_: bool) -> ResultOfSetLocalPlayerInvisibleLocally {
    unsafe {
        let mut b_include_players_vehicle_ = b_include_players_vehicle_;
        let success = sdk::natives::set_local_player_invisible_locally(
            b_include_players_vehicle_,
        );
        
        
        ResultOfSetLocalPlayerInvisibleLocally {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_entity_area_does_exist(&self, area_handle_: i32) -> ResultOfNetworkEntityAreaDoesExist {
    unsafe {
        let mut native_return = Default::default();
let mut area_handle_ = area_handle_;
        let success = sdk::natives::network_entity_area_does_exist(
            &mut native_return,
area_handle_,
        );
        let native_return = native_return;
        
        ResultOfNetworkEntityAreaDoesExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_apply_ped_scar_data(&self, ped_: u32,
p1_: i32) -> ResultOfNetworkApplyPedScarData {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::network_apply_ped_scar_data(
            ped_,
p1_,
        );
        
        
        ResultOfNetworkApplyPedScarData {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_enable_extra_vehicle_orientation_blend_checks(&self, net_id_: i32,
toggle_: bool) -> ResultOfNetworkEnableExtraVehicleOrientationBlendChecks {
    unsafe {
        let mut net_id_ = net_id_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_enable_extra_vehicle_orientation_blend_checks(
            net_id_,
toggle_,
        );
        
        
        ResultOfNetworkEnableExtraVehicleOrientationBlendChecks {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_override_clock_time(&self, hours_: i32,
minutes_: i32,
seconds_: i32) -> ResultOfNetworkOverrideClockTime {
    unsafe {
        let mut hours_ = hours_;
let mut minutes_ = minutes_;
let mut seconds_ = seconds_;
        let success = sdk::natives::network_override_clock_time(
            hours_,
minutes_,
seconds_,
        );
        
        
        ResultOfNetworkOverrideClockTime {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_in_cutscene(&self, player_: u32) -> ResultOfIsPlayerInCutscene {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_in_cutscene(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerInCutscene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_get_local_handle(&self, gamer_handle_: shared::MemoryBufferId,
gamer_handle_size_: i32) -> ResultOfNetworkGetLocalHandle {
    unsafe {
        let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
let mut gamer_handle_size_ = gamer_handle_size_;
        let success = sdk::natives::network_get_local_handle(
            gamer_handle_,
gamer_handle_size_,
        );
        let gamer_handle_ = 0;
        
        ResultOfNetworkGetLocalHandle {
            success,
            ret: (),
            gamer_handle_
        }
    }
}

    fn native_network_has_headset(&self, ) -> ResultOfNetworkHasHeadset {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_has_headset(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkHasHeadset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_gamer_blocked_by_me(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkIsGamerBlockedByMe {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_is_gamer_blocked_by_me(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkIsGamerBlockedByMe {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_ugc_cancel_query(&self, ) -> ResultOfUgcCancelQuery {
    unsafe {
        
        let success = sdk::natives::ugc_cancel_query(
            
        );
        
        
        ResultOfUgcCancelQuery {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_commerce_data_valid(&self, ) -> ResultOfIsCommerceDataValid {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_commerce_data_valid(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsCommerceDataValid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_access_tunable_bool_hash(&self, tunable_context_: u32,
tunable_name_: u32) -> ResultOfNetworkAccessTunableBoolHash {
    unsafe {
        let mut native_return = Default::default();
let mut tunable_context_ = tunable_context_;
let mut tunable_name_ = tunable_name_;
        let success = sdk::natives::network_access_tunable_bool_hash(
            &mut native_return,
tunable_context_,
tunable_name_,
        );
        let native_return = native_return;
        
        ResultOfNetworkAccessTunableBoolHash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_resurrect_local_player(&self, x_: f32,
y_: f32,
z_: f32,
heading_: f32,
p4_: bool,
changetime_: bool,
p6_: bool,
p7_: i32,
p8_: i32) -> ResultOfNetworkResurrectLocalPlayer {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut p4_ = p4_;
let mut changetime_ = changetime_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::network_resurrect_local_player(
            x_,
y_,
z_,
heading_,
p4_,
changetime_,
p6_,
p7_,
p8_,
        );
        
        
        ResultOfNetworkResurrectLocalPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_register_high_frequency_host_broadcast_variables(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkRegisterHighFrequencyHostBroadcastVariables {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_register_high_frequency_host_broadcast_variables(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkRegisterHighFrequencyHostBroadcastVariables {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_bail_transition(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfNetworkBailTransition {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::network_bail_transition(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfNetworkBailTransition {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_np_pending(&self, ) -> ResultOfNetworkIsNpPending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_np_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsNpPending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_apply_transition_parameter_string(&self, p0_: i32,
string_: Option<String>,
p2_: bool) -> ResultOfNetworkApplyTransitionParameterString {
    unsafe {
        let mut p0_ = p0_;
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
let mut p2_ = p2_;
        let success = sdk::natives::network_apply_transition_parameter_string(
            p0_,
string_.as_ref().unwrap(),
p2_,
        );
        
        
        ResultOfNetworkApplyTransitionParameterString {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_remove_and_cancel_all_invites(&self, ) -> ResultOfNetworkRemoveAndCancelAllInvites {
    unsafe {
        
        let success = sdk::natives::network_remove_and_cancel_all_invites(
            
        );
        
        
        ResultOfNetworkRemoveAndCancelAllInvites {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_has_description_request_finished(&self, p0_: i32) -> ResultOfUgcHasDescriptionRequestFinished {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_has_description_request_finished(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfUgcHasDescriptionRequestFinished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_network_vehicle_respot_timer(&self, net_id_: i32,
time_: i32,
p2_: i32,
p3_: i32) -> ResultOfSetNetworkVehicleRespotTimer {
    unsafe {
        let mut net_id_ = net_id_;
let mut time_ = time_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_network_vehicle_respot_timer(
            net_id_,
time_,
p2_,
p3_,
        );
        
        
        ResultOfSetNetworkVehicleRespotTimer {
            success,
            ret: (),
            
        }
    }
}

    fn native_bad_sport_player_left_detected(&self, gamer_handle_: shared::MemoryBufferId,
event_: i32,
amount_received_: i32) -> ResultOfBadSportPlayerLeftDetected {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
let mut event_ = event_;
let mut amount_received_ = amount_received_;
        let success = sdk::natives::bad_sport_player_left_detected(
            &mut native_return,
gamer_handle_,
event_,
amount_received_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfBadSportPlayerLeftDetected {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_session_host_closed(&self, p0_: i32,
max_players_: i32) -> ResultOfNetworkSessionHostClosed {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut max_players_ = max_players_;
        let success = sdk::natives::network_session_host_closed(
            &mut native_return,
p0_,
max_players_,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionHostClosed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_query_result(&self, ) -> ResultOfUgcGetQueryResult {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_get_query_result(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfUgcGetQueryResult {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_player_get_desc(&self, clan_desc_: shared::MemoryBufferId,
buffer_size_: i32,
gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkClanPlayerGetDesc {
    unsafe {
        let mut native_return = Default::default();
let mut clan_desc_ = self.memory_buffers.borrow_mut().get_mut_ptr(clan_desc_) as *mut c_void;
let mut buffer_size_ = buffer_size_;
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_clan_player_get_desc(
            &mut native_return,
clan_desc_,
gamer_handle_,
buffer_size_,
        );
        let native_return = native_return;
let clan_desc_ = 0;
let gamer_handle_ = 0;
        
        ResultOfNetworkClanPlayerGetDesc {
            success,
            ret: native_return,
            clan_desc_,
gamer_handle_
        }
    }
}

    fn native_network_change_transition_slots(&self, p0_: i32,
p1_: bool) -> ResultOfNetworkChangeTransitionSlots {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_change_transition_slots(
            p0_,
p1_,
        );
        
        
        ResultOfNetworkChangeTransitionSlots {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_is_voice_session_busy(&self, ) -> ResultOfNetworkSessionIsVoiceSessionBusy {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_is_voice_session_busy(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionIsVoiceSessionBusy {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_transition_creator_handle(&self, p0_: shared::MemoryBufferId) -> ResultOfNetworkSetTransitionCreatorHandle {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
        let success = sdk::natives::network_set_transition_creator_handle(
            p0_,
        );
        let p0_ = 0;
        
        ResultOfNetworkSetTransitionCreatorHandle {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_network_set_voice_channel(&self, channel_: i32) -> ResultOfNetworkSetVoiceChannel {
    unsafe {
        let mut channel_ = channel_;
        let success = sdk::natives::network_set_voice_channel(
            channel_,
        );
        
        
        ResultOfNetworkSetVoiceChannel {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_cable_connected(&self, ) -> ResultOfNetworkIsCableConnected {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_cable_connected(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsCableConnected {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_remove_presence_invite(&self, p0_: i32) -> ResultOfNetworkRemovePresenceInvite {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_remove_presence_invite(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkRemovePresenceInvite {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clear_voice_proximity_override(&self, ) -> ResultOfNetworkClearVoiceProximityOverride {
    unsafe {
        
        let success = sdk::natives::network_clear_voice_proximity_override(
            
        );
        
        
        ResultOfNetworkClearVoiceProximityOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_remove_and_cancel_all_transition_invites(&self, ) -> ResultOfNetworkRemoveAndCancelAllTransitionInvites {
    unsafe {
        
        let success = sdk::natives::network_remove_and_cancel_all_transition_invites(
            
        );
        
        
        ResultOfNetworkRemoveAndCancelAllTransitionInvites {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_patch_post_cutscene_hs4f_tun_ent(&self, ped_: u32) -> ResultOfNetworkPatchPostCutsceneHs4fTunEnt {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::network_patch_post_cutscene_hs4f_tun_ent(
            ped_,
        );
        
        
        ResultOfNetworkPatchPostCutsceneHs4fTunEnt {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cloud_time_as_string(&self, ) -> ResultOfGetCloudTimeAsString {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
        let success = sdk::natives::get_cloud_time_as_string(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetCloudTimeAsString {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_seed_random_number_generator(&self, seed_: i32) -> ResultOfNetworkSeedRandomNumberGenerator {
    unsafe {
        let mut seed_ = seed_;
        let success = sdk::natives::network_seed_random_number_generator(
            seed_,
        );
        
        
        ResultOfNetworkSeedRandomNumberGenerator {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_set_entity_only_exists_for_participants(&self, entity_: u32,
toggle_: bool) -> ResultOfNetworkSetEntityOnlyExistsForParticipants {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_entity_only_exists_for_participants(
            entity_,
toggle_,
        );
        
        
        ResultOfNetworkSetEntityOnlyExistsForParticipants {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_set_matchmaking_mental_state(&self, p0_: i32) -> ResultOfNetworkSessionSetMatchmakingMentalState {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_session_set_matchmaking_mental_state(
            p0_,
        );
        
        
        ResultOfNetworkSessionSetMatchmakingMentalState {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_add_entity_to_synchronised_scene(&self, entity_: u32,
net_scene_: i32,
anim_dict_: Option<String>,
anim_name_: Option<String>,
speed_: f32,
speed_mulitiplier_: f32,
flag_: i32) -> ResultOfNetworkAddEntityToSynchronisedScene {
    unsafe {
        let mut entity_ = entity_;
let mut net_scene_ = net_scene_;
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
let mut speed_ = speed_;
let mut speed_mulitiplier_ = speed_mulitiplier_;
let mut flag_ = flag_;
        let success = sdk::natives::network_add_entity_to_synchronised_scene(
            entity_,
net_scene_,
anim_dict_.as_ref().unwrap(),
anim_name_.as_ref().unwrap(),
speed_,
speed_mulitiplier_,
flag_,
        );
        
        
        ResultOfNetworkAddEntityToSynchronisedScene {
            success,
            ret: (),
            
        }
    }
}

    fn native_trigger_file_crc_hacker_check(&self, player_: u32,
p1_: Option<String>) -> ResultOfTriggerFileCrcHackerCheck {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::trigger_file_crc_hacker_check(
            &mut native_return,
player_,
p1_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfTriggerFileCrcHackerCheck {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_num_commerce_items(&self, ) -> ResultOfGetNumCommerceItems {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_num_commerce_items(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetNumCommerceItems {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_gamer_has_headset(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfNetworkGamerHasHeadset {
    unsafe {
        let mut native_return = Default::default();
let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::network_gamer_has_headset(
            &mut native_return,
gamer_handle_,
        );
        let native_return = native_return;
let gamer_handle_ = 0;
        
        ResultOfNetworkGamerHasHeadset {
            success,
            ret: native_return,
            gamer_handle_
        }
    }
}

    fn native_network_session_is_solo(&self, ) -> ResultOfNetworkSessionIsSolo {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_is_solo(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionIsSolo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_is_session_busy(&self, ) -> ResultOfNetworkIsSessionBusy {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_session_busy(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsSessionBusy {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clan_get_ui_formatted_tag(&self, clan_desc_: shared::MemoryBufferId,
buffer_size_: i32,
formatted_tag_: Option<String>) -> ResultOfNetworkClanGetUiFormattedTag {
    unsafe {
        let mut clan_desc_ = self.memory_buffers.borrow_mut().get_mut_ptr(clan_desc_) as *mut c_void;
let mut buffer_size_ = buffer_size_;
let mut formatted_tag_ = sdk_helpers::create_c_string_ptr(formatted_tag_);
        let success = sdk::natives::network_clan_get_ui_formatted_tag(
            clan_desc_,
formatted_tag_.pin_mut(),
buffer_size_,
        );
        let clan_desc_ = 0;
let formatted_tag_ = sdk_helpers::read_c_string_ptr(formatted_tag_);
        
        ResultOfNetworkClanGetUiFormattedTag {
            success,
            ret: (),
            clan_desc_,
formatted_tag_
        }
    }
}

    fn native_network_set_no_spectator_chat(&self, toggle_: bool) -> ResultOfNetworkSetNoSpectatorChat {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_no_spectator_chat(
            toggle_,
        );
        
        
        ResultOfNetworkSetNoSpectatorChat {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_set_unique_crew_limit(&self, p0_: i32) -> ResultOfNetworkSessionSetUniqueCrewLimit {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_session_set_unique_crew_limit(
            p0_,
        );
        
        
        ResultOfNetworkSessionSetUniqueCrewLimit {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_is_language_supported(&self, p0_: i32) -> ResultOfUgcIsLanguageSupported {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::ugc_is_language_supported(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfUgcIsLanguageSupported {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_time_equal_to(&self, time_a_: i32,
time_b_: i32) -> ResultOfIsTimeEqualTo {
    unsafe {
        let mut native_return = Default::default();
let mut time_a_ = time_a_;
let mut time_b_ = time_b_;
        let success = sdk::natives::is_time_equal_to(
            &mut native_return,
time_a_,
time_b_,
        );
        let native_return = native_return;
        
        ResultOfIsTimeEqualTo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_transition_set_activity_island(&self, p0_: i32) -> ResultOfNetworkTransitionSetActivityIsland {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_transition_set_activity_island(
            p0_,
        );
        
        
        ResultOfNetworkTransitionSetActivityIsland {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_find_matched_gamers(&self, attribute_: i32,
fallback_limit_: f32,
lower_limit_: f32,
upper_limit_: f32) -> ResultOfNetworkFindMatchedGamers {
    unsafe {
        let mut native_return = Default::default();
let mut attribute_ = attribute_;
let mut fallback_limit_ = fallback_limit_;
let mut lower_limit_ = lower_limit_;
let mut upper_limit_ = upper_limit_;
        let success = sdk::natives::network_find_matched_gamers(
            &mut native_return,
attribute_,
fallback_limit_,
lower_limit_,
upper_limit_,
        );
        let native_return = native_return;
        
        ResultOfNetworkFindMatchedGamers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_friendly_fire_option(&self, toggle_: bool) -> ResultOfNetworkSetFriendlyFireOption {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_friendly_fire_option(
            toggle_,
        );
        
        
        ResultOfNetworkSetFriendlyFireOption {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_store_invite_through_restart(&self, ) -> ResultOfNetworkStoreInviteThroughRestart {
    unsafe {
        
        let success = sdk::natives::network_store_invite_through_restart(
            
        );
        
        
        ResultOfNetworkStoreInviteThroughRestart {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_set_query_data_from_offline(&self, p0_: bool) -> ResultOfUgcSetQueryDataFromOffline {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::ugc_set_query_data_from_offline(
            p0_,
        );
        
        
        ResultOfUgcSetQueryDataFromOffline {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_did_find_gamers_succeed(&self, ) -> ResultOfNetworkDidFindGamersSucceed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_did_find_gamers_succeed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkDidFindGamersSucceed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_get_friend_content(&self, p0_: i32,
p1_: i32,
p2_: Option<String>,
p3_: shared::MemoryBufferId) -> ResultOfUgcGetFriendContent {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
let mut p3_ = self.memory_buffers.borrow_mut().get_mut_ptr(p3_) as *mut c_void;
        let success = sdk::natives::ugc_get_friend_content(
            &mut native_return,
p3_,
p0_,
p1_,
p2_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p3_ = 0;
        
        ResultOfUgcGetFriendContent {
            success,
            ret: native_return,
            p3_
        }
    }
}

    fn native_network_send_queued_join_request(&self, ) -> ResultOfNetworkSendQueuedJoinRequest {
    unsafe {
        
        let success = sdk::natives::network_send_queued_join_request(
            
        );
        
        
        ResultOfNetworkSendQueuedJoinRequest {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_session_kick_player(&self, player_: u32) -> ResultOfNetworkSessionKickPlayer {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::network_session_kick_player(
            player_,
        );
        
        
        ResultOfNetworkSessionKickPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_accept_presence_invite(&self, p0_: i32) -> ResultOfNetworkAcceptPresenceInvite {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::network_accept_presence_invite(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfNetworkAcceptPresenceInvite {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_visible_locally(&self, player_: u32,
b_include_players_vehicle_: bool) -> ResultOfSetPlayerVisibleLocally {
    unsafe {
        let mut player_ = player_;
let mut b_include_players_vehicle_ = b_include_players_vehicle_;
        let success = sdk::natives::set_player_visible_locally(
            player_,
b_include_players_vehicle_,
        );
        
        
        ResultOfSetPlayerVisibleLocally {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_hide_projectile_in_cutscene(&self, ) -> ResultOfNetworkHideProjectileInCutscene {
    unsafe {
        
        let success = sdk::natives::network_hide_projectile_in_cutscene(
            
        );
        
        
        ResultOfNetworkHideProjectileInCutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_last_viewed_shop_item(&self, p0_: u32,
p1_: i32,
p2_: u32) -> ResultOfSetLastViewedShopItem {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_last_viewed_shop_item(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfSetLastViewedShopItem {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_access_tunable_modification_detection_clear(&self, ) -> ResultOfNetworkAccessTunableModificationDetectionClear {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_access_tunable_modification_detection_clear(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkAccessTunableModificationDetectionClear {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_find_largest_bunch_of_players(&self, p0_: i32,
p1_: i32) -> ResultOfNetworkFindLargestBunchOfPlayers {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::network_find_largest_bunch_of_players(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfNetworkFindLargestBunchOfPlayers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_clear_transition_creator_handle(&self, ) -> ResultOfNetworkClearTransitionCreatorHandle {
    unsafe {
        
        let success = sdk::natives::network_clear_transition_creator_handle(
            
        );
        
        
        ResultOfNetworkClearTransitionCreatorHandle {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_allow_gang_to_join_tutorial_session(&self, team_id_: i32,
instance_id_: i32) -> ResultOfNetworkAllowGangToJoinTutorialSession {
    unsafe {
        let mut team_id_ = team_id_;
let mut instance_id_ = instance_id_;
        let success = sdk::natives::network_allow_gang_to_join_tutorial_session(
            team_id_,
instance_id_,
        );
        
        
        ResultOfNetworkAllowGangToJoinTutorialSession {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_cancel_respawn_search(&self, ) -> ResultOfNetworkCancelRespawnSearch {
    unsafe {
        
        let success = sdk::natives::network_cancel_respawn_search(
            
        );
        
        
        ResultOfNetworkCancelRespawnSearch {
            success,
            ret: (),
            
        }
    }
}

    fn native_ugc_get_create_result(&self, ) -> ResultOfUgcGetCreateResult {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ugc_get_create_result(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfUgcGetCreateResult {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_session_is_closed_friends(&self, ) -> ResultOfNetworkSessionIsClosedFriends {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_session_is_closed_friends(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkSessionIsClosedFriends {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_set_in_free_cam_mode(&self, toggle_: bool) -> ResultOfNetworkSetInFreeCamMode {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_set_in_free_cam_mode(
            toggle_,
        );
        
        
        ResultOfNetworkSetInFreeCamMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_online_version(&self, ) -> ResultOfGetOnlineVersion {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
        let success = sdk::natives::get_online_version(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetOnlineVersion {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_gamertag_from_handle_succeeded(&self, ) -> ResultOfNetworkGamertagFromHandleSucceeded {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_gamertag_from_handle_succeeded(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkGamertagFromHandleSucceeded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ugc_set_using_offline_content(&self, p0_: bool) -> ResultOfUgcSetUsingOfflineContent {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::ugc_set_using_offline_content(
            p0_,
        );
        
        
        ResultOfUgcSetUsingOfflineContent {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_is_in_platform_party_chat(&self, ) -> ResultOfNetworkIsInPlatformPartyChat {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_is_in_platform_party_chat(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkIsInPlatformPartyChat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_block_proxy_migration_between_tutorial_sessions(&self, p0_: i32) -> ResultOfNetworkBlockProxyMigrationBetweenTutorialSessions {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_block_proxy_migration_between_tutorial_sessions(
            p0_,
        );
        
        
        ResultOfNetworkBlockProxyMigrationBetweenTutorialSessions {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_get_num_unacked_reliables(&self, player_: u32) -> ResultOfNetworkGetNumUnackedReliables {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::network_get_num_unacked_reliables(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfNetworkGetNumUnackedReliables {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_network_join_previously_failed_transition(&self, ) -> ResultOfNetworkJoinPreviouslyFailedTransition {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_join_previously_failed_transition(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkJoinPreviouslyFailedTransition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_play_object_auto_start_anim(&self, p0_: i32) -> ResultOfPlayObjectAutoStartAnim {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::play_object_auto_start_anim(
            p0_,
        );
        
        
        ResultOfPlayObjectAutoStartAnim {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_entirely_inside_garage(&self, garage_hash_: u32,
player_: u32,
p2_: f32,
p3_: i32) -> ResultOfIsPlayerEntirelyInsideGarage {
    unsafe {
        let mut native_return = Default::default();
let mut garage_hash_ = garage_hash_;
let mut player_ = player_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::is_player_entirely_inside_garage(
            &mut native_return,
garage_hash_,
player_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerEntirelyInsideGarage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_object_a_portable_pickup(&self, object_: u32) -> ResultOfIsObjectAportablePickup {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::is_object_a_portable_pickup(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOfIsObjectAportablePickup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_door_system_set_automatic_rate(&self, door_hash_: u32,
rate_: f32,
request_door_: bool,
force_update_: bool) -> ResultOfDoorSystemSetAutomaticRate {
    unsafe {
        let mut door_hash_ = door_hash_;
let mut rate_ = rate_;
let mut request_door_ = request_door_;
let mut force_update_ = force_update_;
        let success = sdk::natives::door_system_set_automatic_rate(
            door_hash_,
rate_,
request_door_,
force_update_,
        );
        
        
        ResultOfDoorSystemSetAutomaticRate {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_money_pickups(&self, x_: f32,
y_: f32,
z_: f32,
value_: i32,
amount_: i32,
model_: u32) -> ResultOfCreateMoneyPickups {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut value_ = value_;
let mut amount_ = amount_;
let mut model_ = model_;
        let success = sdk::natives::create_money_pickups(
            x_,
y_,
z_,
value_,
amount_,
model_,
        );
        
        
        ResultOfCreateMoneyPickups {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pickup_glow_offset(&self, pickup_: i32,
p1_: f32) -> ResultOfSetPickupGlowOffset {
    unsafe {
        let mut pickup_ = pickup_;
let mut p1_ = p1_;
        let success = sdk::natives::set_pickup_glow_offset(
            pickup_,
p1_,
        );
        
        
        ResultOfSetPickupGlowOffset {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_weapon_type_from_pickup_type(&self, pickup_hash_: u32) -> ResultOfGetWeaponTypeFromPickupType {
    unsafe {
        let mut native_return = Default::default();
let mut pickup_hash_ = pickup_hash_;
        let success = sdk::natives::get_weapon_type_from_pickup_type(
            &mut native_return,
pickup_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetWeaponTypeFromPickupType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_max_num_portable_pickups_carried_by_player(&self, model_hash_: u32,
number_: i32) -> ResultOfSetMaxNumPortablePickupsCarriedByPlayer {
    unsafe {
        let mut model_hash_ = model_hash_;
let mut number_ = number_;
        let success = sdk::natives::set_max_num_portable_pickups_carried_by_player(
            model_hash_,
number_,
        );
        
        
        ResultOfSetMaxNumPortablePickupsCarriedByPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_pickup_weapon_object_valid(&self, object_: u32) -> ResultOfIsPickupWeaponObjectValid {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::is_pickup_weapon_object_valid(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOfIsPickupWeaponObjectValid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_non_networked_portable_pickup(&self, pickup_hash_: u32,
x_: f32,
y_: f32,
z_: f32,
place_on_ground_: bool,
model_hash_: u32) -> ResultOfCreateNonNetworkedPortablePickup {
    unsafe {
        let mut native_return = Default::default();
let mut pickup_hash_ = pickup_hash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut place_on_ground_ = place_on_ground_;
let mut model_hash_ = model_hash_;
        let success = sdk::natives::create_non_networked_portable_pickup(
            &mut native_return,
pickup_hash_,
x_,
y_,
z_,
place_on_ground_,
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfCreateNonNetworkedPortablePickup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_door_system_get_door_state(&self, door_hash_: u32) -> ResultOfDoorSystemGetDoorState {
    unsafe {
        let mut native_return = Default::default();
let mut door_hash_ = door_hash_;
        let success = sdk::natives::door_system_get_door_state(
            &mut native_return,
door_hash_,
        );
        let native_return = native_return;
        
        ResultOfDoorSystemGetDoorState {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_offset_from_coord_and_heading_in_world_coords(&self, x_pos_: f32,
y_pos_: f32,
z_pos_: f32,
heading_: f32,
x_offset_: f32,
y_offset_: f32,
z_offset_: f32) -> ResultOfGetOffsetFromCoordAndHeadingInWorldCoords {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut x_pos_ = x_pos_;
let mut y_pos_ = y_pos_;
let mut z_pos_ = z_pos_;
let mut heading_ = heading_;
let mut x_offset_ = x_offset_;
let mut y_offset_ = y_offset_;
let mut z_offset_ = z_offset_;
        let success = sdk::natives::get_offset_from_coord_and_heading_in_world_coords(
            native_return.pin_mut(),
x_pos_,
y_pos_,
z_pos_,
heading_,
x_offset_,
y_offset_,
z_offset_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetOffsetFromCoordAndHeadingInWorldCoords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_coords_and_rotation_of_closest_object_of_type(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
model_hash_: u32,
out_position_: Option<shared::Vector3>,
out_rotation_: Option<shared::Vector3>,
rotation_order_: i32) -> ResultOfGetCoordsAndRotationOfClosestObjectOfType {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut model_hash_ = model_hash_;
let mut out_position_ = sdk_helpers::create_vector3_ptr(out_position_);
let mut out_rotation_ = sdk_helpers::create_vector3_ptr(out_rotation_);
let mut rotation_order_ = rotation_order_;
        let success = sdk::natives::get_coords_and_rotation_of_closest_object_of_type(
            &mut native_return,
out_position_.pin_mut(),
out_rotation_.pin_mut(),
x_,
y_,
z_,
radius_,
model_hash_,
rotation_order_,
        );
        let native_return = native_return;
let out_position_ = sdk_helpers::read_cpp_vector3(out_position_);
let out_rotation_ = sdk_helpers::read_cpp_vector3(out_rotation_);
        
        ResultOfGetCoordsAndRotationOfClosestObjectOfType {
            success,
            ret: native_return,
            out_position_,
out_rotation_
        }
    }
}

    fn native_is_player_partially_inside_garage(&self, garage_hash_: u32,
player_: u32,
p2_: i32) -> ResultOfIsPlayerPartiallyInsideGarage {
    unsafe {
        let mut native_return = Default::default();
let mut garage_hash_ = garage_hash_;
let mut player_ = player_;
let mut p2_ = p2_;
        let success = sdk::natives::is_player_partially_inside_garage(
            &mut native_return,
garage_hash_,
player_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerPartiallyInsideGarage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_objects_inside_garage(&self, garage_hash_: u32,
vehicles_: bool,
peds_: bool,
objects_: bool,
is_network_: bool) -> ResultOfClearObjectsInsideGarage {
    unsafe {
        let mut garage_hash_ = garage_hash_;
let mut vehicles_ = vehicles_;
let mut peds_ = peds_;
let mut objects_ = objects_;
let mut is_network_ = is_network_;
        let success = sdk::natives::clear_objects_inside_garage(
            garage_hash_,
vehicles_,
peds_,
objects_,
is_network_,
        );
        
        
        ResultOfClearObjectsInsideGarage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_weapon_impacts_apply_greater_force(&self, object_: u32,
p1_: bool) -> ResultOfSetWeaponImpactsApplyGreaterForce {
    unsafe {
        let mut object_ = object_;
let mut p1_ = p1_;
        let success = sdk::natives::set_weapon_impacts_apply_greater_force(
            object_,
p1_,
        );
        
        
        ResultOfSetWeaponImpactsApplyGreaterForce {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pickup_uncollectable(&self, pickup_: i32,
toggle_: bool) -> ResultOfSetPickupUncollectable {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_pickup_uncollectable(
            pickup_,
toggle_,
        );
        
        
        ResultOfSetPickupUncollectable {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_is_object_articulated(&self, object_: u32,
toggle_: bool) -> ResultOfSetIsObjectArticulated {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_is_object_articulated(
            object_,
toggle_,
        );
        
        
        ResultOfSetIsObjectArticulated {
            success,
            ret: (),
            
        }
    }
}

    fn native_block_players_for_ambient_pickup(&self, p0_: i32,
p1_: i32) -> ResultOfBlockPlayersForAmbientPickup {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::block_players_for_ambient_pickup(
            p0_,
p1_,
        );
        
        
        ResultOfBlockPlayersForAmbientPickup {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_pickup_coords(&self, pickup_: i32) -> ResultOfGetPickupCoords {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut pickup_ = pickup_;
        let success = sdk::natives::get_pickup_coords(
            native_return.pin_mut(),
pickup_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetPickupCoords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_has_object_been_completely_destroyed(&self, p0_: i32) -> ResultOfGetHasObjectBeenCompletelyDestroyed {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_has_object_been_completely_destroyed(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfGetHasObjectBeenCompletelyDestroyed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_rayfire_map_object_anim_phase(&self, object_: u32) -> ResultOfGetRayfireMapObjectAnimPhase {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::get_rayfire_map_object_anim_phase(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOfGetRayfireMapObjectAnimPhase {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_pickup_object_glow_when_uncollectable(&self, pickup_: i32,
toggle_: bool) -> ResultOfSetPickupObjectGlowWhenUncollectable {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_pickup_object_glow_when_uncollectable(
            pickup_,
toggle_,
        );
        
        
        ResultOfSetPickupObjectGlowWhenUncollectable {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_all_pickups_of_type(&self, pickup_hash_: u32) -> ResultOfRemoveAllPickupsOfType {
    unsafe {
        let mut pickup_hash_ = pickup_hash_;
        let success = sdk::natives::remove_all_pickups_of_type(
            pickup_hash_,
        );
        
        
        ResultOfRemoveAllPickupsOfType {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_point_in_angled_area(&self, x_pos_: f32,
y_pos_: f32,
z_pos_: f32,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32,
debug_: bool,
include_z_: bool) -> ResultOfIsPointInAngledArea {
    unsafe {
        let mut native_return = Default::default();
let mut x_pos_ = x_pos_;
let mut y_pos_ = y_pos_;
let mut z_pos_ = z_pos_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
let mut debug_ = debug_;
let mut include_z_ = include_z_;
        let success = sdk::natives::is_point_in_angled_area(
            &mut native_return,
x_pos_,
y_pos_,
z_pos_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
debug_,
include_z_,
        );
        let native_return = native_return;
        
        ResultOfIsPointInAngledArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_portable_pickup(&self, pickup_hash_: u32,
x_: f32,
y_: f32,
z_: f32,
place_on_ground_: bool,
model_hash_: u32) -> ResultOfCreatePortablePickup {
    unsafe {
        let mut native_return = Default::default();
let mut pickup_hash_ = pickup_hash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut place_on_ground_ = place_on_ground_;
let mut model_hash_ = model_hash_;
        let success = sdk::natives::create_portable_pickup(
            &mut native_return,
pickup_hash_,
x_,
y_,
z_,
place_on_ground_,
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfCreatePortablePickup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_slide_object(&self, object_: u32,
to_x_: f32,
to_y_: f32,
to_z_: f32,
speed_x_: f32,
speed_y_: f32,
speed_z_: f32,
collision_: bool) -> ResultOfSlideObject {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
let mut to_x_ = to_x_;
let mut to_y_ = to_y_;
let mut to_z_ = to_z_;
let mut speed_x_ = speed_x_;
let mut speed_y_ = speed_y_;
let mut speed_z_ = speed_z_;
let mut collision_ = collision_;
        let success = sdk::natives::slide_object(
            &mut native_return,
object_,
to_x_,
to_y_,
to_z_,
speed_x_,
speed_y_,
speed_z_,
collision_,
        );
        let native_return = native_return;
        
        ResultOfSlideObject {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_prop_tint_index(&self, p0_: i32,
p1_: i32) -> ResultOfSetPropTintIndex {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_prop_tint_index(
            p0_,
p1_,
        );
        
        
        ResultOfSetPropTintIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pickup_generation_range_multiplier(&self, multiplier_: f32) -> ResultOfSetPickupGenerationRangeMultiplier {
    unsafe {
        let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_pickup_generation_range_multiplier(
            multiplier_,
        );
        
        
        ResultOfSetPickupGenerationRangeMultiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_only_allow_ammo_collection_when_low(&self, p0_: bool) -> ResultOfSetOnlyAllowAmmoCollectionWhenLow {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_only_allow_ammo_collection_when_low(
            p0_,
        );
        
        
        ResultOfSetOnlyAllowAmmoCollectionWhenLow {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_pickup(&self, pickup_: i32) -> ResultOfRemovePickup {
    unsafe {
        let mut pickup_ = pickup_;
        let success = sdk::natives::remove_pickup(
            pickup_,
        );
        
        
        ResultOfRemovePickup {
            success,
            ret: (),
            
        }
    }
}

    fn native_render_fake_pickup_glow(&self, x_: f32,
y_: f32,
z_: f32,
color_index_: i32) -> ResultOfRenderFakePickupGlow {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut color_index_ = color_index_;
        let success = sdk::natives::render_fake_pickup_glow(
            x_,
y_,
z_,
color_index_,
        );
        
        
        ResultOfRenderFakePickupGlow {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_object_entirely_inside_garage(&self, garage_hash_: u32,
entity_: u32,
p2_: f32,
p3_: i32) -> ResultOfIsObjectEntirelyInsideGarage {
    unsafe {
        let mut native_return = Default::default();
let mut garage_hash_ = garage_hash_;
let mut entity_ = entity_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::is_object_entirely_inside_garage(
            &mut native_return,
garage_hash_,
entity_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOfIsObjectEntirelyInsideGarage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_pickup_rotate_face_up(&self, ) -> ResultOfForcePickupRotateFaceUp {
    unsafe {
        
        let success = sdk::natives::force_pickup_rotate_face_up(
            
        );
        
        
        ResultOfForcePickupRotateFaceUp {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_any_object_near_point(&self, x_: f32,
y_: f32,
z_: f32,
range_: f32,
p4_: bool) -> ResultOfIsAnyObjectNearPoint {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut range_ = range_;
let mut p4_ = p4_;
        let success = sdk::natives::is_any_object_near_point(
            &mut native_return,
x_,
y_,
z_,
range_,
p4_,
        );
        let native_return = native_return;
        
        ResultOfIsAnyObjectNearPoint {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_pickup_object_arrow_marker(&self, pickup_: i32,
toggle_: bool) -> ResultOfSetPickupObjectArrowMarker {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_pickup_object_arrow_marker(
            pickup_,
toggle_,
        );
        
        
        ResultOfSetPickupObjectArrowMarker {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_object_is_visible_in_mirrors(&self, object_: u32,
toggle_: bool) -> ResultOfSetObjectIsVisibleInMirrors {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_object_is_visible_in_mirrors(
            object_,
toggle_,
        );
        
        
        ResultOfSetObjectIsVisibleInMirrors {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_articulated_joint_at_max_angle(&self, p0_: i32,
p1_: i32) -> ResultOfGetIsArticulatedJointAtMaxAngle {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::get_is_articulated_joint_at_max_angle(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfGetIsArticulatedJointAtMaxAngle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_pickup_hidden_when_uncollectable(&self, pickup_: i32,
toggle_: bool) -> ResultOfSetPickupHiddenWhenUncollectable {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_pickup_hidden_when_uncollectable(
            pickup_,
toggle_,
        );
        
        
        ResultOfSetPickupHiddenWhenUncollectable {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_activate_object_physics_as_soon_as_it_is_unfrozen(&self, object_: u32,
toggle_: bool) -> ResultOfSetActivateObjectPhysicsAsSoonAsItIsUnfrozen {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_activate_object_physics_as_soon_as_it_is_unfrozen(
            object_,
toggle_,
        );
        
        
        ResultOfSetActivateObjectPhysicsAsSoonAsItIsUnfrozen {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_articulated_joint_at_min_angle(&self, object_: u32,
p1_: i32) -> ResultOfGetIsArticulatedJointAtMinAngle {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
let mut p1_ = p1_;
        let success = sdk::natives::get_is_articulated_joint_at_min_angle(
            &mut native_return,
object_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfGetIsArticulatedJointAtMinAngle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_closest_object_of_type_been_completely_destroyed(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
model_hash_: u32,
p5_: bool) -> ResultOfHasClosestObjectOfTypeBeenCompletelyDestroyed {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut model_hash_ = model_hash_;
let mut p5_ = p5_;
        let success = sdk::natives::has_closest_object_of_type_been_completely_destroyed(
            &mut native_return,
x_,
y_,
z_,
radius_,
model_hash_,
p5_,
        );
        let native_return = native_return;
        
        ResultOfHasClosestObjectOfTypeBeenCompletelyDestroyed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_door_from_system(&self, door_hash_: u32,
p1_: i32) -> ResultOfRemoveDoorFromSystem {
    unsafe {
        let mut door_hash_ = door_hash_;
let mut p1_ = p1_;
        let success = sdk::natives::remove_door_from_system(
            door_hash_,
p1_,
        );
        
        
        ResultOfRemoveDoorFromSystem {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_portable_pickup_persist(&self, pickup_: i32,
toggle_: bool) -> ResultOfSetPortablePickupPersist {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_portable_pickup_persist(
            pickup_,
toggle_,
        );
        
        
        ResultOfSetPortablePickupPersist {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_object_high_detail_model(&self, object_: u32) -> ResultOfRemoveObjectHighDetailModel {
    unsafe {
        let mut object_ = object_;
        let success = sdk::natives::remove_object_high_detail_model(
            object_,
        );
        
        
        ResultOfRemoveObjectHighDetailModel {
            success,
            ret: (),
            
        }
    }
}

    fn native_door_system_get_door_pending_state(&self, door_hash_: u32) -> ResultOfDoorSystemGetDoorPendingState {
    unsafe {
        let mut native_return = Default::default();
let mut door_hash_ = door_hash_;
        let success = sdk::natives::door_system_get_door_pending_state(
            &mut native_return,
door_hash_,
        );
        let native_return = native_return;
        
        ResultOfDoorSystemGetDoorPendingState {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_activate_physics_on_unfixed_pickup(&self, pickup_: i32,
toggle_: bool) -> ResultOfForceActivatePhysicsOnUnfixedPickup {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::force_activate_physics_on_unfixed_pickup(
            pickup_,
toggle_,
        );
        
        
        ResultOfForceActivatePhysicsOnUnfixedPickup {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_object_allow_low_lod_buoyancy(&self, object_: u32,
toggle_: bool) -> ResultOfSetObjectAllowLowLodBuoyancy {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_object_allow_low_lod_buoyancy(
            object_,
toggle_,
        );
        
        
        ResultOfSetObjectAllowLowLodBuoyancy {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_pickup_object(&self, pickup_: i32) -> ResultOfGetPickupObject {
    unsafe {
        let mut native_return = Default::default();
let mut pickup_ = pickup_;
        let success = sdk::natives::get_pickup_object(
            &mut native_return,
pickup_,
        );
        let native_return = native_return;
        
        ResultOfGetPickupObject {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_object(&self, model_hash_: u32,
x_: f32,
y_: f32,
z_: f32,
is_network_: bool,
b_script_host_obj_: bool,
dynamic_: bool) -> ResultOfCreateObject {
    unsafe {
        let mut native_return = Default::default();
let mut model_hash_ = model_hash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut is_network_ = is_network_;
let mut b_script_host_obj_ = b_script_host_obj_;
let mut dynamic_ = dynamic_;
        let success = sdk::natives::create_object(
            &mut native_return,
model_hash_,
x_,
y_,
z_,
is_network_,
b_script_host_obj_,
dynamic_,
        );
        let native_return = native_return;
        
        ResultOfCreateObject {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_rayfire_map_object_exist(&self, object_: u32) -> ResultOfDoesRayfireMapObjectExist {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::does_rayfire_map_object_exist(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOfDoesRayfireMapObjectExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_delete_object(&self, object_: u32) -> ResultOfDeleteObject {
    unsafe {
        let mut object_ = object_;
        let success = sdk::natives::delete_object(
            &mut object_,
        );
        let object_ = object_;
        
        ResultOfDeleteObject {
            success,
            ret: (),
            object_
        }
    }
}

    fn native_set_team_pickup_object(&self, object_: u32,
p1_: i32,
p2_: bool) -> ResultOfSetTeamPickupObject {
    unsafe {
        let mut object_ = object_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_team_pickup_object(
            object_,
p1_,
p2_,
        );
        
        
        ResultOfSetTeamPickupObject {
            success,
            ret: (),
            
        }
    }
}

    fn native_door_system_find_existing_door(&self, x_: f32,
y_: f32,
z_: f32,
model_hash_: u32,
out_door_hash_: u32) -> ResultOfDoorSystemFindExistingDoor {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut model_hash_ = model_hash_;
let mut out_door_hash_ = out_door_hash_;
        let success = sdk::natives::door_system_find_existing_door(
            &mut native_return,
&mut out_door_hash_,
x_,
y_,
z_,
model_hash_,
        );
        let native_return = native_return;
let out_door_hash_ = out_door_hash_;
        
        ResultOfDoorSystemFindExistingDoor {
            success,
            ret: native_return,
            out_door_hash_
        }
    }
}

    fn native_place_object_on_ground_properly(&self, object_: u32) -> ResultOfPlaceObjectOnGroundProperly {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::place_object_on_ground_properly(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOfPlaceObjectOnGroundProperly {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_state_of_rayfire_map_object(&self, object_: u32,
state_: i32) -> ResultOfSetStateOfRayfireMapObject {
    unsafe {
        let mut object_ = object_;
let mut state_ = state_;
        let success = sdk::natives::set_state_of_rayfire_map_object(
            object_,
state_,
        );
        
        
        ResultOfSetStateOfRayfireMapObject {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_portable_pickup_last_accessible_position_setting(&self, object_: u32) -> ResultOfForcePortablePickupLastAccessiblePositionSetting {
    unsafe {
        let mut object_ = object_;
        let success = sdk::natives::force_portable_pickup_last_accessible_position_setting(
            object_,
        );
        
        
        ResultOfForcePortablePickupLastAccessiblePositionSetting {
            success,
            ret: (),
            
        }
    }
}

    fn native_convert_old_pickup_type_to_new(&self, pickup_hash_: u32) -> ResultOfConvertOldPickupTypeToNew {
    unsafe {
        let mut native_return = Default::default();
let mut pickup_hash_ = pickup_hash_;
        let success = sdk::natives::convert_old_pickup_type_to_new(
            &mut native_return,
pickup_hash_,
        );
        let native_return = native_return;
        
        ResultOfConvertOldPickupTypeToNew {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_prop_light_color(&self, object_: u32,
p1_: bool,
r_: i32,
g_: i32,
b_: i32) -> ResultOfSetPropLightColor {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
let mut p1_ = p1_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::set_prop_light_color(
            &mut native_return,
object_,
p1_,
r_,
g_,
b_,
        );
        let native_return = native_return;
        
        ResultOfSetPropLightColor {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_permitted_to_collect_pickups_of_type(&self, player_: u32,
pickup_hash_: u32,
toggle_: bool) -> ResultOfSetPlayerPermittedToCollectPickupsOfType {
    unsafe {
        let mut player_ = player_;
let mut pickup_hash_ = pickup_hash_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_permitted_to_collect_pickups_of_type(
            player_,
pickup_hash_,
toggle_,
        );
        
        
        ResultOfSetPlayerPermittedToCollectPickupsOfType {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_object_glow_in_same_team(&self, pickup_: i32) -> ResultOfSetObjectGlowInSameTeam {
    unsafe {
        let mut pickup_ = pickup_;
        let success = sdk::natives::set_object_glow_in_same_team(
            pickup_,
        );
        
        
        ResultOfSetObjectGlowInSameTeam {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_projectiles_should_explode_on_contact(&self, entity_: u32,
p1_: i32) -> ResultOfSetProjectilesShouldExplodeOnContact {
    unsafe {
        let mut entity_ = entity_;
let mut p1_ = p1_;
        let success = sdk::natives::set_projectiles_should_explode_on_contact(
            entity_,
p1_,
        );
        
        
        ResultOfSetProjectilesShouldExplodeOnContact {
            success,
            ret: (),
            
        }
    }
}

    fn native_allow_portable_pickup_to_migrate_to_non_participants(&self, pickup_: i32,
toggle_: bool) -> ResultOfAllowPortablePickupToMigrateToNonParticipants {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::allow_portable_pickup_to_migrate_to_non_participants(
            pickup_,
toggle_,
        );
        
        
        ResultOfAllowPortablePickupToMigrateToNonParticipants {
            success,
            ret: (),
            
        }
    }
}

    fn native_door_system_get_open_ratio(&self, door_hash_: u32) -> ResultOfDoorSystemGetOpenRatio {
    unsafe {
        let mut native_return = Default::default();
let mut door_hash_ = door_hash_;
        let success = sdk::natives::door_system_get_open_ratio(
            &mut native_return,
door_hash_,
        );
        let native_return = native_return;
        
        ResultOfDoorSystemGetOpenRatio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_tidying_up_in_garage(&self, id_: i32,
toggle_: bool) -> ResultOfDisableTidyingUpInGarage {
    unsafe {
        let mut id_ = id_;
let mut toggle_ = toggle_;
        let success = sdk::natives::disable_tidying_up_in_garage(
            id_,
toggle_,
        );
        
        
        ResultOfDisableTidyingUpInGarage {
            success,
            ret: (),
            
        }
    }
}

    fn native_close_safehouse_garages(&self, ) -> ResultOfCloseSafehouseGarages {
    unsafe {
        
        let success = sdk::natives::close_safehouse_garages(
            
        );
        
        
        ResultOfCloseSafehouseGarages {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_ambient_pickup(&self, pickup_hash_: u32,
pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
flags_: i32,
value_: i32,
model_hash_: u32,
p7_: bool,
p8_: bool) -> ResultOfCreateAmbientPickup {
    unsafe {
        let mut native_return = Default::default();
let mut pickup_hash_ = pickup_hash_;
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut flags_ = flags_;
let mut value_ = value_;
let mut model_hash_ = model_hash_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::create_ambient_pickup(
            &mut native_return,
pickup_hash_,
pos_x_,
pos_y_,
pos_z_,
flags_,
value_,
model_hash_,
p7_,
p8_,
        );
        let native_return = native_return;
        
        ResultOfCreateAmbientPickup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_any_entity_entirely_inside_garage(&self, garage_hash_: u32,
p1_: bool,
p2_: bool,
p3_: bool,
p4_: i32) -> ResultOfIsAnyEntityEntirelyInsideGarage {
    unsafe {
        let mut native_return = Default::default();
let mut garage_hash_ = garage_hash_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::is_any_entity_entirely_inside_garage(
            &mut native_return,
garage_hash_,
p1_,
p2_,
p3_,
p4_,
        );
        let native_return = native_return;
        
        ResultOfIsAnyEntityEntirelyInsideGarage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_door_system_set_door_state(&self, door_hash_: u32,
state_: i32,
request_door_: bool,
force_update_: bool) -> ResultOfDoorSystemSetDoorState {
    unsafe {
        let mut door_hash_ = door_hash_;
let mut state_ = state_;
let mut request_door_ = request_door_;
let mut force_update_ = force_update_;
        let success = sdk::natives::door_system_set_door_state(
            door_hash_,
state_,
request_door_,
force_update_,
        );
        
        
        ResultOfDoorSystemSetDoorState {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_safe_pickup_coords(&self, x_: f32,
y_: f32,
z_: f32,
p3_: f32,
p4_: f32) -> ResultOfGetSafePickupCoords {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::get_safe_pickup_coords(
            native_return.pin_mut(),
x_,
y_,
z_,
p3_,
p4_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetSafePickupCoords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_door_to_system(&self, door_hash_: u32,
model_hash_: u32,
x_: f32,
y_: f32,
z_: f32,
p5_: bool,
script_door_: bool,
is_local_: bool) -> ResultOfAddDoorToSystem {
    unsafe {
        let mut door_hash_ = door_hash_;
let mut model_hash_ = model_hash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p5_ = p5_;
let mut script_door_ = script_door_;
let mut is_local_ = is_local_;
        let success = sdk::natives::add_door_to_system(
            door_hash_,
model_hash_,
x_,
y_,
z_,
p5_,
script_door_,
is_local_,
        );
        
        
        ResultOfAddDoorToSystem {
            success,
            ret: (),
            
        }
    }
}

    fn native_close_all_barriers_for_race(&self, ) -> ResultOfCloseAllBarriersForRace {
    unsafe {
        
        let success = sdk::natives::close_all_barriers_for_race(
            
        );
        
        
        ResultOfCloseAllBarriersForRace {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_object_is_a_pressure_plate(&self, object_: u32,
toggle_: bool) -> ResultOfSetObjectIsApressurePlate {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_object_is_a_pressure_plate(
            object_,
toggle_,
        );
        
        
        ResultOfSetObjectIsApressurePlate {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_pickup_regenerate(&self, p0_: i32) -> ResultOfForcePickupRegenerate {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::force_pickup_regenerate(
            p0_,
        );
        
        
        ResultOfForcePickupRegenerate {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_closest_object_of_type_been_broken(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
model_hash_: u32,
p5_: i32) -> ResultOfHasClosestObjectOfTypeBeenBroken {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut model_hash_ = model_hash_;
let mut p5_ = p5_;
        let success = sdk::natives::has_closest_object_of_type_been_broken(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
model_hash_,
p5_,
        );
        let native_return = native_return;
        
        ResultOfHasClosestObjectOfTypeBeenBroken {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_pickup_reward_type_suppression(&self, reward_type_: i32) -> ResultOfClearPickupRewardTypeSuppression {
    unsafe {
        let mut reward_type_ = reward_type_;
        let success = sdk::natives::clear_pickup_reward_type_suppression(
            reward_type_,
        );
        
        
        ResultOfClearPickupRewardTypeSuppression {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_object_force_vehicles_to_avoid(&self, object_: u32,
toggle_: bool) -> ResultOfSetObjectForceVehiclesToAvoid {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_object_force_vehicles_to_avoid(
            object_,
toggle_,
        );
        
        
        ResultOfSetObjectForceVehiclesToAvoid {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pickup_regeneration_time(&self, pickup_: i32,
duration_: i32) -> ResultOfSetPickupRegenerationTime {
    unsafe {
        let mut pickup_ = pickup_;
let mut duration_ = duration_;
        let success = sdk::natives::set_pickup_regeneration_time(
            pickup_,
duration_,
        );
        
        
        ResultOfSetPickupRegenerationTime {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pickup_object_collectable_in_vehicle(&self, pickup_: i32) -> ResultOfSetPickupObjectCollectableInVehicle {
    unsafe {
        let mut pickup_ = pickup_;
        let success = sdk::natives::set_pickup_object_collectable_in_vehicle(
            pickup_,
        );
        
        
        ResultOfSetPickupObjectCollectableInVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_local_player_can_collect_portable_pickups(&self, toggle_: bool) -> ResultOfSetLocalPlayerCanCollectPortablePickups {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_local_player_can_collect_portable_pickups(
            toggle_,
        );
        
        
        ResultOfSetLocalPlayerCanCollectPortablePickups {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_pickup_been_collected(&self, pickup_: i32) -> ResultOfHasPickupBeenCollected {
    unsafe {
        let mut native_return = Default::default();
let mut pickup_ = pickup_;
        let success = sdk::natives::has_pickup_been_collected(
            &mut native_return,
pickup_,
        );
        let native_return = native_return;
        
        ResultOfHasPickupBeenCollected {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_custom_pickup_weapon_hash(&self, pickup_hash_: u32,
pickup_: i32) -> ResultOfSetCustomPickupWeaponHash {
    unsafe {
        let mut pickup_hash_ = pickup_hash_;
let mut pickup_ = pickup_;
        let success = sdk::natives::set_custom_pickup_weapon_hash(
            pickup_hash_,
pickup_,
        );
        
        
        ResultOfSetCustomPickupWeaponHash {
            success,
            ret: (),
            
        }
    }
}

    fn native_allow_pickup_arrow_marker_when_uncollectable(&self, pickup_: i32,
toggle_: bool) -> ResultOfAllowPickupArrowMarkerWhenUncollectable {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::allow_pickup_arrow_marker_when_uncollectable(
            pickup_,
toggle_,
        );
        
        
        ResultOfAllowPickupArrowMarkerWhenUncollectable {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pickup_transparent_when_uncollectable(&self, pickup_: i32,
toggle_: bool) -> ResultOfSetPickupTransparentWhenUncollectable {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_pickup_transparent_when_uncollectable(
            pickup_,
toggle_,
        );
        
        
        ResultOfSetPickupTransparentWhenUncollectable {
            success,
            ret: (),
            
        }
    }
}

    fn native_are_entities_entirely_inside_garage(&self, garage_hash_: u32,
p1_: bool,
p2_: bool,
p3_: bool,
p4_: i32) -> ResultOfAreEntitiesEntirelyInsideGarage {
    unsafe {
        let mut native_return = Default::default();
let mut garage_hash_ = garage_hash_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::are_entities_entirely_inside_garage(
            &mut native_return,
garage_hash_,
p1_,
p2_,
p3_,
p4_,
        );
        let native_return = native_return;
        
        ResultOfAreEntitiesEntirelyInsideGarage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_hide_portable_pickup_when_detached(&self, pickup_object_: u32,
toggle_: bool) -> ResultOfHidePortablePickupWhenDetached {
    unsafe {
        let mut pickup_object_ = pickup_object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::hide_portable_pickup_when_detached(
            pickup_object_,
toggle_,
        );
        
        
        ResultOfHidePortablePickupWhenDetached {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pickup_object_transparent_when_uncollectable(&self, pickup_: i32,
toggle_: bool) -> ResultOfSetPickupObjectTransparentWhenUncollectable {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_pickup_object_transparent_when_uncollectable(
            pickup_,
toggle_,
        );
        
        
        ResultOfSetPickupObjectTransparentWhenUncollectable {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_local_player_permitted_to_collect_pickups_with_model(&self, model_hash_: u32,
toggle_: bool) -> ResultOfSetLocalPlayerPermittedToCollectPickupsWithModel {
    unsafe {
        let mut model_hash_ = model_hash_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_local_player_permitted_to_collect_pickups_with_model(
            model_hash_,
toggle_,
        );
        
        
        ResultOfSetLocalPlayerPermittedToCollectPickupsWithModel {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_pickup_rotate(&self, pickup_hash_: u32,
pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
rot_x_: f32,
rot_y_: f32,
rot_z_: f32,
flag_: i32,
amount_: i32,
p9_: i32,
p10_: bool,
model_hash_: u32) -> ResultOfCreatePickupRotate {
    unsafe {
        let mut native_return = Default::default();
let mut pickup_hash_ = pickup_hash_;
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
let mut flag_ = flag_;
let mut amount_ = amount_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut model_hash_ = model_hash_;
        let success = sdk::natives::create_pickup_rotate(
            &mut native_return,
pickup_hash_,
pos_x_,
pos_y_,
pos_z_,
rot_x_,
rot_y_,
rot_z_,
flag_,
amount_,
p9_,
p10_,
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfCreatePickupRotate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_state_of_rayfire_map_object(&self, object_: u32) -> ResultOfGetStateOfRayfireMapObject {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::get_state_of_rayfire_map_object(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOfGetStateOfRayfireMapObject {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_object_targettable(&self, object_: u32,
targettable_: bool) -> ResultOfSetObjectTargettable {
    unsafe {
        let mut object_ = object_;
let mut targettable_ = targettable_;
        let success = sdk::natives::set_object_targettable(
            object_,
targettable_,
        );
        
        
        ResultOfSetObjectTargettable {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_object_been_broken(&self, object_: u32,
p1_: i32) -> ResultOfHasObjectBeenBroken {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
let mut p1_ = p1_;
        let success = sdk::natives::has_object_been_broken(
            &mut native_return,
object_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfHasObjectBeenBroken {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_object_visible(&self, object_: u32) -> ResultOfIsObjectVisible {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::is_object_visible(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOfIsObjectVisible {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_object_near_point(&self, object_hash_: u32,
x_: f32,
y_: f32,
z_: f32,
range_: f32) -> ResultOfIsObjectNearPoint {
    unsafe {
        let mut native_return = Default::default();
let mut object_hash_ = object_hash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut range_ = range_;
        let success = sdk::natives::is_object_near_point(
            &mut native_return,
object_hash_,
x_,
y_,
z_,
range_,
        );
        let native_return = native_return;
        
        ResultOfIsObjectNearPoint {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_disable_collisions_between_cars_and_car_parachute(&self, p0_: i32) -> ResultOfSetDisableCollisionsBetweenCarsAndCarParachute {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_disable_collisions_between_cars_and_car_parachute(
            p0_,
        );
        
        
        ResultOfSetDisableCollisionsBetweenCarsAndCarParachute {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pickup_object_alpha_when_transparent(&self, p0_: i32) -> ResultOfSetPickupObjectAlphaWhenTransparent {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_pickup_object_alpha_when_transparent(
            p0_,
        );
        
        
        ResultOfSetPickupObjectAlphaWhenTransparent {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_portable_pickup_to_ped(&self, pickup_object_: u32,
ped_: u32) -> ResultOfAttachPortablePickupToPed {
    unsafe {
        let mut pickup_object_ = pickup_object_;
let mut ped_ = ped_;
        let success = sdk::natives::attach_portable_pickup_to_ped(
            pickup_object_,
ped_,
        );
        
        
        ResultOfAttachPortablePickupToPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_suppress_pickup_sound_for_pickup(&self, p0_: i32,
p1_: i32) -> ResultOfSuppressPickupSoundForPickup {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::suppress_pickup_sound_for_pickup(
            p0_,
p1_,
        );
        
        
        ResultOfSuppressPickupSoundForPickup {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_garage_empty(&self, garage_hash_: u32,
p1_: bool,
p2_: i32) -> ResultOfIsGarageEmpty {
    unsafe {
        let mut native_return = Default::default();
let mut garage_hash_ = garage_hash_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::is_garage_empty(
            &mut native_return,
garage_hash_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfIsGarageEmpty {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_drive_articulated_joint(&self, object_: u32,
toggle_: bool,
p2_: i32) -> ResultOfSetDriveArticulatedJoint {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
        let success = sdk::natives::set_drive_articulated_joint(
            object_,
toggle_,
p2_,
        );
        
        
        ResultOfSetDriveArticulatedJoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_prevent_collection_of_portable_pickup(&self, object_: u32,
p1_: bool,
p2_: bool) -> ResultOfPreventCollectionOfPortablePickup {
    unsafe {
        let mut object_ = object_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::prevent_collection_of_portable_pickup(
            object_,
p1_,
p2_,
        );
        
        
        ResultOfPreventCollectionOfPortablePickup {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_object_speed_boost_amount(&self, object_: u32,
p1_: i32) -> ResultOfSetObjectSpeedBoostAmount {
    unsafe {
        let mut object_ = object_;
let mut p1_ = p1_;
        let success = sdk::natives::set_object_speed_boost_amount(
            object_,
p1_,
        );
        
        
        ResultOfSetObjectSpeedBoostAmount {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_object_tint_index(&self, object_: u32,
texture_variation_: i32) -> ResultOfSetObjectTintIndex {
    unsafe {
        let mut object_ = object_;
let mut texture_variation_ = texture_variation_;
        let success = sdk::natives::set_object_tint_index(
            object_,
texture_variation_,
        );
        
        
        ResultOfSetObjectTintIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_object_no_offset(&self, model_hash_: u32,
x_: f32,
y_: f32,
z_: f32,
is_network_: bool,
b_script_host_obj_: bool,
dynamic_: bool) -> ResultOfCreateObjectNoOffset {
    unsafe {
        let mut native_return = Default::default();
let mut model_hash_ = model_hash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut is_network_ = is_network_;
let mut b_script_host_obj_ = b_script_host_obj_;
let mut dynamic_ = dynamic_;
        let success = sdk::natives::create_object_no_offset(
            &mut native_return,
model_hash_,
x_,
y_,
z_,
is_network_,
b_script_host_obj_,
dynamic_,
        );
        let native_return = native_return;
        
        ResultOfCreateObjectNoOffset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_locked_unstreamed_in_door_of_type(&self, model_hash_: u32,
x_: f32,
y_: f32,
z_: f32,
locked_: bool,
x_rot_mult_: f32,
y_rot_mult_: f32,
z_rot_mult_: f32) -> ResultOfSetLockedUnstreamedInDoorOfType {
    unsafe {
        let mut model_hash_ = model_hash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut locked_ = locked_;
let mut x_rot_mult_ = x_rot_mult_;
let mut y_rot_mult_ = y_rot_mult_;
let mut z_rot_mult_ = z_rot_mult_;
        let success = sdk::natives::set_locked_unstreamed_in_door_of_type(
            model_hash_,
x_,
y_,
z_,
locked_,
x_rot_mult_,
y_rot_mult_,
z_rot_mult_,
        );
        
        
        ResultOfSetLockedUnstreamedInDoorOfType {
            success,
            ret: (),
            
        }
    }
}

    fn native_door_system_set_automatic_distance(&self, door_hash_: u32,
distance_: f32,
request_door_: bool,
force_update_: bool) -> ResultOfDoorSystemSetAutomaticDistance {
    unsafe {
        let mut door_hash_ = door_hash_;
let mut distance_ = distance_;
let mut request_door_ = request_door_;
let mut force_update_ = force_update_;
        let success = sdk::natives::door_system_set_automatic_distance(
            door_hash_,
distance_,
request_door_,
force_update_,
        );
        
        
        ResultOfDoorSystemSetAutomaticDistance {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_non_networked_ambient_pickup(&self, pickup_hash_: u32,
pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
flags_: i32,
value_: i32,
model_hash_: u32,
p7_: bool,
p8_: bool) -> ResultOfCreateNonNetworkedAmbientPickup {
    unsafe {
        let mut native_return = Default::default();
let mut pickup_hash_ = pickup_hash_;
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut flags_ = flags_;
let mut value_ = value_;
let mut model_hash_ = model_hash_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::create_non_networked_ambient_pickup(
            &mut native_return,
pickup_hash_,
pos_x_,
pos_y_,
pos_z_,
flags_,
value_,
model_hash_,
p7_,
p8_,
        );
        let native_return = native_return;
        
        ResultOfCreateNonNetworkedAmbientPickup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_pickup_object_glow_offset(&self, pickup_: i32,
p1_: f32,
p2_: bool) -> ResultOfSetPickupObjectGlowOffset {
    unsafe {
        let mut pickup_ = pickup_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_pickup_object_glow_offset(
            pickup_,
p1_,
p2_,
        );
        
        
        ResultOfSetPickupObjectGlowOffset {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_all_pickup_reward_type_suppression(&self, ) -> ResultOfClearAllPickupRewardTypeSuppression {
    unsafe {
        
        let success = sdk::natives::clear_all_pickup_reward_type_suppression(
            
        );
        
        
        ResultOfClearAllPickupRewardTypeSuppression {
            success,
            ret: (),
            
        }
    }
}

    fn native_door_system_set_door_open_for_races(&self, door_hash_: u32,
p1_: bool) -> ResultOfDoorSystemSetDoorOpenForRaces {
    unsafe {
        let mut door_hash_ = door_hash_;
let mut p1_ = p1_;
        let success = sdk::natives::door_system_set_door_open_for_races(
            door_hash_,
p1_,
        );
        
        
        ResultOfDoorSystemSetDoorOpenForRaces {
            success,
            ret: (),
            
        }
    }
}

    fn native_allow_pickup_by_none_participant(&self, pickup_: i32,
toggle_: bool) -> ResultOfAllowPickupByNoneParticipant {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::allow_pickup_by_none_participant(
            pickup_,
toggle_,
        );
        
        
        ResultOfAllowPickupByNoneParticipant {
            success,
            ret: (),
            
        }
    }
}

    fn native_allow_damage_events_for_non_networked_objects(&self, value_: bool) -> ResultOfAllowDamageEventsForNonNetworkedObjects {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::allow_damage_events_for_non_networked_objects(
            value_,
        );
        
        
        ResultOfAllowDamageEventsForNonNetworkedObjects {
            success,
            ret: (),
            
        }
    }
}

    fn native_only_clean_up_object_when_out_of_range(&self, object_: u32) -> ResultOfOnlyCleanUpObjectWhenOutOfRange {
    unsafe {
        let mut object_ = object_;
        let success = sdk::natives::only_clean_up_object_when_out_of_range(
            object_,
        );
        
        
        ResultOfOnlyCleanUpObjectWhenOutOfRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_prop_light_overriden(&self, object_: u32) -> ResultOfIsPropLightOverriden {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::is_prop_light_overriden(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOfIsPropLightOverriden {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_pickup_exist(&self, pickup_: i32) -> ResultOfDoesPickupExist {
    unsafe {
        let mut native_return = Default::default();
let mut pickup_ = pickup_;
        let success = sdk::natives::does_pickup_exist(
            &mut native_return,
pickup_,
        );
        let native_return = native_return;
        
        ResultOfDoesPickupExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_rotate_object(&self, object_: u32,
p1_: f32,
p2_: f32,
p3_: bool) -> ResultOfRotateObject {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::rotate_object(
            &mut native_return,
object_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOfRotateObject {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_drive_articulated_joint_with_inflictor(&self, object_: u32,
toggle_: bool,
p2_: i32,
ped_: u32) -> ResultOfSetDriveArticulatedJointWithInflictor {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
let mut ped_ = ped_;
        let success = sdk::natives::set_drive_articulated_joint_with_inflictor(
            object_,
toggle_,
p2_,
ped_,
        );
        
        
        ResultOfSetDriveArticulatedJointWithInflictor {
            success,
            ret: (),
            
        }
    }
}

    fn native_track_object_visibility(&self, object_: u32) -> ResultOfTrackObjectVisibility {
    unsafe {
        let mut object_ = object_;
        let success = sdk::natives::track_object_visibility(
            object_,
        );
        
        
        ResultOfTrackObjectVisibility {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_flag_render_small_shadow(&self, object_: u32,
toggle_: bool) -> ResultOfSetEntityFlagRenderSmallShadow {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_flag_render_small_shadow(
            object_,
toggle_,
        );
        
        
        ResultOfSetEntityFlagRenderSmallShadow {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_pickup_generation_range_multiplier(&self, ) -> ResultOfGetPickupGenerationRangeMultiplier {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_pickup_generation_range_multiplier(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetPickupGenerationRangeMultiplier {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_rayfire_map_object(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
name_: Option<String>) -> ResultOfGetRayfireMapObject {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::get_rayfire_map_object(
            &mut native_return,
x_,
y_,
z_,
radius_,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfGetRayfireMapObject {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_is_object_ball(&self, object_: u32,
toggle_: bool) -> ResultOfSetIsObjectBall {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_is_object_ball(
            object_,
toggle_,
        );
        
        
        ResultOfSetIsObjectBall {
            success,
            ret: (),
            
        }
    }
}

    fn native_door_system_set_open_ratio(&self, door_hash_: u32,
ajar_: f32,
request_door_: bool,
force_update_: bool) -> ResultOfDoorSystemSetOpenRatio {
    unsafe {
        let mut door_hash_ = door_hash_;
let mut ajar_ = ajar_;
let mut request_door_ = request_door_;
let mut force_update_ = force_update_;
        let success = sdk::natives::door_system_set_open_ratio(
            door_hash_,
ajar_,
request_door_,
force_update_,
        );
        
        
        ResultOfDoorSystemSetOpenRatio {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_object_fragment_damage_health(&self, p0_: i32,
p1_: bool) -> ResultOfGetObjectFragmentDamageHealth {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::get_object_fragment_damage_health(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfGetObjectFragmentDamageHealth {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_extended_pickup_probe_areas(&self, ) -> ResultOfClearExtendedPickupProbeAreas {
    unsafe {
        
        let success = sdk::natives::clear_extended_pickup_probe_areas(
            
        );
        
        
        ResultOfClearExtendedPickupProbeAreas {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cutscenes_weapon_flashlight_on_this_frame(&self, object_: u32,
toggle_: bool) -> ResultOfSetCutscenesWeaponFlashlightOnThisFrame {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_cutscenes_weapon_flashlight_on_this_frame(
            object_,
toggle_,
        );
        
        
        ResultOfSetCutscenesWeaponFlashlightOnThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_object_of_type_exist_at_coords(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
hash_: u32,
p5_: bool) -> ResultOfDoesObjectOfTypeExistAtCoords {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut hash_ = hash_;
let mut p5_ = p5_;
        let success = sdk::natives::does_object_of_type_exist_at_coords(
            &mut native_return,
x_,
y_,
z_,
radius_,
hash_,
p5_,
        );
        let native_return = native_return;
        
        ResultOfDoesObjectOfTypeExistAtCoords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_pickup_track_damage_events(&self, pickup_: i32,
toggle_: bool) -> ResultOfSetPickupTrackDamageEvents {
    unsafe {
        let mut pickup_ = pickup_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_pickup_track_damage_events(
            pickup_,
toggle_,
        );
        
        
        ResultOfSetPickupTrackDamageEvents {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_door_registered_with_system(&self, door_hash_: u32) -> ResultOfIsDoorRegisteredWithSystem {
    unsafe {
        let mut native_return = Default::default();
let mut door_hash_ = door_hash_;
        let success = sdk::natives::is_door_registered_with_system(
            &mut native_return,
door_hash_,
        );
        let native_return = native_return;
        
        ResultOfIsDoorRegisteredWithSystem {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_door_system_set_spring_removed(&self, door_hash_: u32,
removed_: bool,
request_door_: bool,
force_update_: bool) -> ResultOfDoorSystemSetSpringRemoved {
    unsafe {
        let mut door_hash_ = door_hash_;
let mut removed_ = removed_;
let mut request_door_ = request_door_;
let mut force_update_ = force_update_;
        let success = sdk::natives::door_system_set_spring_removed(
            door_hash_,
removed_,
request_door_,
force_update_,
        );
        
        
        ResultOfDoorSystemSetSpringRemoved {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_door_closed(&self, door_hash_: u32) -> ResultOfIsDoorClosed {
    unsafe {
        let mut native_return = Default::default();
let mut door_hash_ = door_hash_;
        let success = sdk::natives::is_door_closed(
            &mut native_return,
door_hash_,
        );
        let native_return = native_return;
        
        ResultOfIsDoorClosed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_object_is_special_golfball(&self, object_: u32,
toggle_: bool) -> ResultOfSetObjectIsSpecialGolfball {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_object_is_special_golfball(
            object_,
toggle_,
        );
        
        
        ResultOfSetObjectIsSpecialGolfball {
            success,
            ret: (),
            
        }
    }
}

    fn native_open_all_barriers_for_race(&self, p0_: bool) -> ResultOfOpenAllBarriersForRace {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::open_all_barriers_for_race(
            p0_,
        );
        
        
        ResultOfOpenAllBarriersForRace {
            success,
            ret: (),
            
        }
    }
}

    fn native_detach_portable_pickup_from_ped(&self, pickup_object_: u32) -> ResultOfDetachPortablePickupFromPed {
    unsafe {
        let mut pickup_object_ = pickup_object_;
        let success = sdk::natives::detach_portable_pickup_from_ped(
            pickup_object_,
        );
        
        
        ResultOfDetachPortablePickupFromPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_entity_flag_suppress_shadow(&self, entity_: u32,
toggle_: bool) -> ResultOfSetEntityFlagSuppressShadow {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_entity_flag_suppress_shadow(
            entity_,
toggle_,
        );
        
        
        ResultOfSetEntityFlagSuppressShadow {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_extended_pickup_probe_area(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOfAddExtendedPickupProbeArea {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::add_extended_pickup_probe_area(
            x_,
y_,
z_,
radius_,
        );
        
        
        ResultOfAddExtendedPickupProbeArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_pickup_type_from_weapon_hash(&self, weapon_hash_: u32) -> ResultOfGetPickupTypeFromWeaponHash {
    unsafe {
        let mut native_return = Default::default();
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::get_pickup_type_from_weapon_hash(
            &mut native_return,
weapon_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetPickupTypeFromWeaponHash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_place_object_on_ground_or_object_properly(&self, object_: u32) -> ResultOfPlaceObjectOnGroundOrObjectProperly {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::place_object_on_ground_or_object_properly(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOfPlaceObjectOnGroundOrObjectProperly {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_door_system_set_hold_open(&self, door_hash_: u32,
toggle_: bool) -> ResultOfDoorSystemSetHoldOpen {
    unsafe {
        let mut door_hash_ = door_hash_;
let mut toggle_ = toggle_;
        let success = sdk::natives::door_system_set_hold_open(
            door_hash_,
toggle_,
        );
        
        
        ResultOfDoorSystemSetHoldOpen {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_pickup_object_exist(&self, pickup_object_: u32) -> ResultOfDoesPickupObjectExist {
    unsafe {
        let mut native_return = Default::default();
let mut pickup_object_ = pickup_object_;
        let success = sdk::natives::does_pickup_object_exist(
            &mut native_return,
pickup_object_,
        );
        let native_return = native_return;
        
        ResultOfDoesPickupObjectExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_garage(&self, garage_hash_: u32,
is_network_: bool) -> ResultOfClearGarage {
    unsafe {
        let mut garage_hash_ = garage_hash_;
let mut is_network_ = is_network_;
        let success = sdk::natives::clear_garage(
            garage_hash_,
is_network_,
        );
        
        
        ResultOfClearGarage {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_default_ammo_for_weapon_pickup(&self, pickup_hash_: u32) -> ResultOfGetDefaultAmmoForWeaponPickup {
    unsafe {
        let mut native_return = Default::default();
let mut pickup_hash_ = pickup_hash_;
        let success = sdk::natives::get_default_ammo_for_weapon_pickup(
            &mut native_return,
pickup_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetDefaultAmmoForWeaponPickup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_object_speed_boost_duration(&self, object_: u32,
duration_: f32) -> ResultOfSetObjectSpeedBoostDuration {
    unsafe {
        let mut object_ = object_;
let mut duration_ = duration_;
        let success = sdk::natives::set_object_speed_boost_duration(
            object_,
duration_,
        );
        
        
        ResultOfSetObjectSpeedBoostDuration {
            success,
            ret: (),
            
        }
    }
}

    fn native_door_system_get_is_physics_loaded(&self, p0_: i32) -> ResultOfDoorSystemGetIsPhysicsLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::door_system_get_is_physics_loaded(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfDoorSystemGetIsPhysicsLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_damage_object_fragment_child(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfDamageObjectFragmentChild {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::damage_object_fragment_child(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfDamageObjectFragmentChild {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_closest_object_of_type(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
model_hash_: u32,
is_mission_: bool,
p6_: bool,
p7_: bool) -> ResultOfGetClosestObjectOfType {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut model_hash_ = model_hash_;
let mut is_mission_ = is_mission_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::get_closest_object_of_type(
            &mut native_return,
x_,
y_,
z_,
radius_,
model_hash_,
is_mission_,
p6_,
p7_,
        );
        let native_return = native_return;
        
        ResultOfGetClosestObjectOfType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_break_object_fragment_child(&self, p0_: u32,
p1_: i32,
p2_: bool) -> ResultOfBreakObjectFragmentChild {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::break_object_fragment_child(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfBreakObjectFragmentChild {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_object_tint_index(&self, object_: u32) -> ResultOfGetObjectTintIndex {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::get_object_tint_index(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOfGetObjectTintIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_door_system_get_automatic_distance(&self, door_hash_: u32) -> ResultOfDoorSystemGetAutomaticDistance {
    unsafe {
        let mut native_return = Default::default();
let mut door_hash_ = door_hash_;
        let success = sdk::natives::door_system_get_automatic_distance(
            &mut native_return,
door_hash_,
        );
        let native_return = native_return;
        
        ResultOfDoorSystemGetAutomaticDistance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_object_takes_damage_from_colliding_with_buildings(&self, p0_: i32,
p1_: bool) -> ResultOfSetObjectTakesDamageFromCollidingWithBuildings {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_object_takes_damage_from_colliding_with_buildings(
            p0_,
p1_,
        );
        
        
        ResultOfSetObjectTakesDamageFromCollidingWithBuildings {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_state_of_closest_door_of_type(&self, type_: u32,
x_: f32,
y_: f32,
z_: f32,
locked_: bool,
heading_: f32) -> ResultOfGetStateOfClosestDoorOfType {
    unsafe {
        let mut type_ = type_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut locked_ = locked_;
let mut heading_ = heading_;
        let success = sdk::natives::get_state_of_closest_door_of_type(
            &mut locked_,
&mut heading_,
type_,
x_,
y_,
z_,
        );
        let locked_ = locked_;
let heading_ = heading_;
        
        ResultOfGetStateOfClosestDoorOfType {
            success,
            ret: (),
            locked_,
heading_
        }
    }
}

    fn native_is_object_partially_inside_garage(&self, garage_hash_: u32,
entity_: u32,
p2_: i32) -> ResultOfIsObjectPartiallyInsideGarage {
    unsafe {
        let mut native_return = Default::default();
let mut garage_hash_ = garage_hash_;
let mut entity_ = entity_;
let mut p2_ = p2_;
        let success = sdk::natives::is_object_partially_inside_garage(
            &mut native_return,
garage_hash_,
entity_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfIsObjectPartiallyInsideGarage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_tint_index_closest_building_of_type(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
model_hash_: u32,
texture_variation_: i32) -> ResultOfSetTintIndexClosestBuildingOfType {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut model_hash_ = model_hash_;
let mut texture_variation_ = texture_variation_;
        let success = sdk::natives::set_tint_index_closest_building_of_type(
            &mut native_return,
x_,
y_,
z_,
radius_,
model_hash_,
texture_variation_,
        );
        let native_return = native_return;
        
        ResultOfSetTintIndexClosestBuildingOfType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_enable_saving_in_garage(&self, garage_hash_: u32,
toggle_: bool) -> ResultOfEnableSavingInGarage {
    unsafe {
        let mut garage_hash_ = garage_hash_;
let mut toggle_ = toggle_;
        let success = sdk::natives::enable_saving_in_garage(
            garage_hash_,
toggle_,
        );
        
        
        ResultOfEnableSavingInGarage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_force_object_this_frame(&self, x_: f32,
y_: f32,
z_: f32,
p3_: f32) -> ResultOfSetForceObjectThisFrame {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
        let success = sdk::natives::set_force_object_this_frame(
            x_,
y_,
z_,
p3_,
        );
        
        
        ResultOfSetForceObjectThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_object_physics_params(&self, object_: u32,
weight_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
gravity_: f32,
p7_: f32,
p8_: f32,
p9_: f32,
p10_: f32,
buoyancy_: f32) -> ResultOfSetObjectPhysicsParams {
    unsafe {
        let mut object_ = object_;
let mut weight_ = weight_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut gravity_ = gravity_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut buoyancy_ = buoyancy_;
        let success = sdk::natives::set_object_physics_params(
            object_,
weight_,
p2_,
p3_,
p4_,
p5_,
gravity_,
p7_,
p8_,
p9_,
p10_,
buoyancy_,
        );
        
        
        ResultOfSetObjectPhysicsParams {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_state_of_closest_door_of_type(&self, type_: u32,
x_: f32,
y_: f32,
z_: f32,
locked_: bool,
heading_: f32,
p6_: bool) -> ResultOfSetStateOfClosestDoorOfType {
    unsafe {
        let mut type_ = type_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut locked_ = locked_;
let mut heading_ = heading_;
let mut p6_ = p6_;
        let success = sdk::natives::set_state_of_closest_door_of_type(
            type_,
x_,
y_,
z_,
locked_,
heading_,
p6_,
        );
        
        
        ResultOfSetStateOfClosestDoorOfType {
            success,
            ret: (),
            
        }
    }
}

    fn native_suppress_pickup_reward_type(&self, reward_type_: i32,
suppress_: bool) -> ResultOfSuppressPickupRewardType {
    unsafe {
        let mut reward_type_ = reward_type_;
let mut suppress_ = suppress_;
        let success = sdk::natives::suppress_pickup_reward_type(
            reward_type_,
suppress_,
        );
        
        
        ResultOfSuppressPickupRewardType {
            success,
            ret: (),
            
        }
    }
}

    fn native_fix_object_fragment(&self, object_: u32) -> ResultOfFixObjectFragment {
    unsafe {
        let mut object_ = object_;
        let success = sdk::natives::fix_object_fragment(
            object_,
        );
        
        
        ResultOfFixObjectFragment {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_pickup_of_type_exist_in_area(&self, pickup_hash_: u32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOfDoesPickupOfTypeExistInArea {
    unsafe {
        let mut native_return = Default::default();
let mut pickup_hash_ = pickup_hash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::does_pickup_of_type_exist_in_area(
            &mut native_return,
pickup_hash_,
x_,
y_,
z_,
radius_,
        );
        let native_return = native_return;
        
        ResultOfDoesPickupOfTypeExistInArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_pickup(&self, pickup_hash_: u32,
pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
p4_: i32,
value_: i32,
p6_: bool,
model_hash_: u32) -> ResultOfCreatePickup {
    unsafe {
        let mut native_return = Default::default();
let mut pickup_hash_ = pickup_hash_;
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut p4_ = p4_;
let mut value_ = value_;
let mut p6_ = p6_;
let mut model_hash_ = model_hash_;
        let success = sdk::natives::create_pickup(
            &mut native_return,
pickup_hash_,
pos_x_,
pos_y_,
pos_z_,
p4_,
value_,
p6_,
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfCreatePickup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_object_a_pickup(&self, object_: u32) -> ResultOfIsObjectApickup {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::is_object_a_pickup(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOfIsObjectApickup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_allow_all_players_to_collect_pickups_of_type(&self, pickup_hash_: u32) -> ResultOfAllowAllPlayersToCollectPickupsOfType {
    unsafe {
        let mut pickup_hash_ = pickup_hash_;
        let success = sdk::natives::allow_all_players_to_collect_pickups_of_type(
            pickup_hash_,
        );
        
        
        ResultOfAllowAllPlayersToCollectPickupsOfType {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_control_instructional_buttons_string(&self, control_: i32,
action_: i32,
allow_x_o_swap_: bool) -> ResultOfGetControlInstructionalButtonsString {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut control_ = control_;
let mut action_ = action_;
let mut allow_x_o_swap_ = allow_x_o_swap_;
        let success = sdk::natives::get_control_instructional_buttons_string(
            native_return.pin_mut(),
control_,
action_,
allow_x_o_swap_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetControlInstructionalButtonsString {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_using_alternate_driveby(&self, ) -> ResultOfGetIsUsingAlternateDriveby {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_using_alternate_driveby(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetIsUsingAlternateDriveby {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_disabled_control_normal(&self, control_: i32,
action_: i32) -> ResultOfGetDisabledControlNormal {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::get_disabled_control_normal(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOfGetDisabledControlNormal {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_using_cursor(&self, control_: i32) -> ResultOfIsUsingCursor {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
        let success = sdk::natives::is_using_cursor(
            &mut native_return,
control_,
        );
        let native_return = native_return;
        
        ResultOfIsUsingCursor {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_control_trigger_shake(&self, control_: i32,
left_duration_: i32,
left_frequency_: i32,
right_duration_: i32,
right_frequency_: i32) -> ResultOfSetControlTriggerShake {
    unsafe {
        let mut control_ = control_;
let mut left_duration_ = left_duration_;
let mut left_frequency_ = left_frequency_;
let mut right_duration_ = right_duration_;
let mut right_frequency_ = right_frequency_;
        let success = sdk::natives::set_control_trigger_shake(
            control_,
left_duration_,
left_frequency_,
right_duration_,
right_frequency_,
        );
        
        
        ResultOfSetControlTriggerShake {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_control_enabled(&self, control_: i32,
action_: i32) -> ResultOfIsControlEnabled {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::is_control_enabled(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOfIsControlEnabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_using_remote_play(&self, control_: i32) -> ResultOfIsUsingRemotePlay {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
        let success = sdk::natives::is_using_remote_play(
            &mut native_return,
control_,
        );
        let native_return = native_return;
        
        ResultOfIsUsingRemotePlay {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_using_alternate_handbrake(&self, ) -> ResultOfGetIsUsingAlternateHandbrake {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_using_alternate_handbrake(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetIsUsingAlternateHandbrake {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_disabled_control_just_released(&self, control_: i32,
action_: i32) -> ResultOfIsDisabledControlJustReleased {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::is_disabled_control_just_released(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOfIsDisabledControlJustReleased {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_enable_control_action(&self, control_: i32,
action_: i32,
enable_related_actions_: bool) -> ResultOfEnableControlAction {
    unsafe {
        let mut control_ = control_;
let mut action_ = action_;
let mut enable_related_actions_ = enable_related_actions_;
        let success = sdk::natives::enable_control_action(
            control_,
action_,
enable_related_actions_,
        );
        
        
        ResultOfEnableControlAction {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_control_shake(&self, control_: i32) -> ResultOfStopControlShake {
    unsafe {
        let mut control_ = control_;
        let success = sdk::natives::stop_control_shake(
            control_,
        );
        
        
        ResultOfStopControlShake {
            success,
            ret: (),
            
        }
    }
}

    fn native_init_pc_scripted_controls(&self, scheme_name_: Option<String>) -> ResultOfInitPcScriptedControls {
    unsafe {
        let mut native_return = Default::default();
let mut scheme_name_ = sdk_helpers::create_c_string_ptr(scheme_name_);
        let success = sdk::natives::init_pc_scripted_controls(
            &mut native_return,
scheme_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfInitPcScriptedControls {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_switch_pc_scripted_controls(&self, scheme_name_: Option<String>) -> ResultOfSwitchPcScriptedControls {
    unsafe {
        let mut native_return = Default::default();
let mut scheme_name_ = sdk_helpers::create_c_string_ptr(scheme_name_);
        let success = sdk::natives::switch_pc_scripted_controls(
            &mut native_return,
scheme_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfSwitchPcScriptedControls {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_control_shake(&self, control_: i32,
duration_: i32,
frequency_: i32) -> ResultOfSetControlShake {
    unsafe {
        let mut control_ = control_;
let mut duration_ = duration_;
let mut frequency_ = frequency_;
        let success = sdk::natives::set_control_shake(
            control_,
duration_,
frequency_,
        );
        
        
        ResultOfSetControlShake {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_disabled_control_unbound_normal(&self, control_: i32,
action_: i32) -> ResultOfGetDisabledControlUnboundNormal {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::get_disabled_control_unbound_normal(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOfGetDisabledControlUnboundNormal {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_control_just_released(&self, control_: i32,
action_: i32) -> ResultOfIsControlJustReleased {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::is_control_just_released(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOfIsControlJustReleased {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_control_just_pressed(&self, control_: i32,
action_: i32) -> ResultOfIsControlJustPressed {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::is_control_just_pressed(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOfIsControlJustPressed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_local_player_gamepad_aim_state(&self, ) -> ResultOfGetLocalPlayerGamepadAimState {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_local_player_gamepad_aim_state(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetLocalPlayerGamepadAimState {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_use_adjusted_mouse_coords(&self, toggle_: bool) -> ResultOfSetUseAdjustedMouseCoords {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_use_adjusted_mouse_coords(
            toggle_,
        );
        
        
        ResultOfSetUseAdjustedMouseCoords {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_control_unbound_normal(&self, control_: i32,
action_: i32) -> ResultOfGetControlUnboundNormal {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::get_control_unbound_normal(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOfGetControlUnboundNormal {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_all_control_actions(&self, control_: i32) -> ResultOfDisableAllControlActions {
    unsafe {
        let mut control_ = control_;
        let success = sdk::natives::disable_all_control_actions(
            control_,
        );
        
        
        ResultOfDisableAllControlActions {
            success,
            ret: (),
            
        }
    }
}

    fn native_shutdown_pc_scripted_controls(&self, ) -> ResultOfShutdownPcScriptedControls {
    unsafe {
        
        let success = sdk::natives::shutdown_pc_scripted_controls(
            
        );
        
        
        ResultOfShutdownPcScriptedControls {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_control_released(&self, control_: i32,
action_: i32) -> ResultOfIsControlReleased {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::is_control_released(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOfIsControlReleased {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_have_controls_changed(&self, control_: i32) -> ResultOfHaveControlsChanged {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
        let success = sdk::natives::have_controls_changed(
            &mut native_return,
control_,
        );
        let native_return = native_return;
        
        ResultOfHaveControlsChanged {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_look_inverted(&self, ) -> ResultOfIsLookInverted {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_look_inverted(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsLookInverted {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_playerpad_shakes_when_controller_disabled(&self, toggle_: bool) -> ResultOfSetPlayerpadShakesWhenControllerDisabled {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_playerpad_shakes_when_controller_disabled(
            toggle_,
        );
        
        
        ResultOfSetPlayerpadShakesWhenControllerDisabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_allow_alternative_script_controls_layout(&self, control_: i32) -> ResultOfAllowAlternativeScriptControlsLayout {
    unsafe {
        let mut control_ = control_;
        let success = sdk::natives::allow_alternative_script_controls_layout(
            control_,
        );
        
        
        ResultOfAllowAlternativeScriptControlsLayout {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_control_group_instructional_buttons_string(&self, control_: i32,
control_group_: i32,
allow_x_o_swap_: bool) -> ResultOfGetControlGroupInstructionalButtonsString {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut control_ = control_;
let mut control_group_ = control_group_;
let mut allow_x_o_swap_ = allow_x_o_swap_;
        let success = sdk::natives::get_control_group_instructional_buttons_string(
            native_return.pin_mut(),
control_,
control_group_,
allow_x_o_swap_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetControlGroupInstructionalButtonsString {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_control_light_effect_color(&self, control_: i32,
red_: i32,
green_: i32,
blue_: i32) -> ResultOfSetControlLightEffectColor {
    unsafe {
        let mut control_ = control_;
let mut red_ = red_;
let mut green_ = green_;
let mut blue_ = blue_;
        let success = sdk::natives::set_control_light_effect_color(
            control_,
red_,
green_,
blue_,
        );
        
        
        ResultOfSetControlLightEffectColor {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_disabled_control_just_pressed(&self, control_: i32,
action_: i32) -> ResultOfIsDisabledControlJustPressed {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::is_disabled_control_just_pressed(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOfIsDisabledControlJustPressed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_control_shake_suppressed_id(&self, control_: i32) -> ResultOfClearControlShakeSuppressedId {
    unsafe {
        let mut control_ = control_;
        let success = sdk::natives::clear_control_shake_suppressed_id(
            control_,
        );
        
        
        ResultOfClearControlShakeSuppressedId {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_using_keyboard_and_mouse(&self, control_: i32) -> ResultOfIsUsingKeyboardAndMouse {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
        let success = sdk::natives::is_using_keyboard_and_mouse(
            &mut native_return,
control_,
        );
        let native_return = native_return;
        
        ResultOfIsUsingKeyboardAndMouse {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_enable_all_control_actions(&self, control_: i32) -> ResultOfEnableAllControlActions {
    unsafe {
        let mut control_ = control_;
        let success = sdk::natives::enable_all_control_actions(
            control_,
        );
        
        
        ResultOfEnableAllControlActions {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_local_player_aim_state(&self, ) -> ResultOfGetLocalPlayerAimState {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_local_player_aim_state(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetLocalPlayerAimState {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_control_light_effect(&self, control_: i32) -> ResultOfClearControlLightEffect {
    unsafe {
        let mut control_ = control_;
        let success = sdk::natives::clear_control_light_effect(
            control_,
        );
        
        
        ResultOfClearControlLightEffect {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_control_how_long_ago(&self, control_: i32) -> ResultOfGetControlHowLongAgo {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
        let success = sdk::natives::get_control_how_long_ago(
            &mut native_return,
control_,
        );
        let native_return = native_return;
        
        ResultOfGetControlHowLongAgo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_control_value(&self, control_: i32,
action_: i32) -> ResultOfGetControlValue {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::get_control_value(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOfGetControlValue {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_mouse_look_inverted(&self, ) -> ResultOfIsMouseLookInverted {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_mouse_look_inverted(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsMouseLookInverted {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_disabled_control_pressed(&self, control_: i32,
action_: i32) -> ResultOfIsDisabledControlPressed {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::is_disabled_control_pressed(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOfIsDisabledControlPressed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_control_value_next_frame(&self, control_: i32,
action_: i32,
value_: f32) -> ResultOfSetControlValueNextFrame {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
let mut value_ = value_;
        let success = sdk::natives::set_control_value_next_frame(
            &mut native_return,
control_,
action_,
value_,
        );
        let native_return = native_return;
        
        ResultOfSetControlValueNextFrame {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_control_normal(&self, control_: i32,
action_: i32) -> ResultOfGetControlNormal {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::get_control_normal(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOfGetControlNormal {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_input_exclusive(&self, control_: i32,
action_: i32) -> ResultOfSetInputExclusive {
    unsafe {
        let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::set_input_exclusive(
            control_,
action_,
        );
        
        
        ResultOfSetInputExclusive {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_control_shake_suppressed_id(&self, control_: i32,
unique_id_: i32) -> ResultOfSetControlShakeSuppressedId {
    unsafe {
        let mut control_ = control_;
let mut unique_id_ = unique_id_;
        let success = sdk::natives::set_control_shake_suppressed_id(
            control_,
unique_id_,
        );
        
        
        ResultOfSetControlShakeSuppressedId {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_control_pressed(&self, control_: i32,
action_: i32) -> ResultOfIsControlPressed {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::is_control_pressed(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOfIsControlPressed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_disabled_control_released(&self, control_: i32,
action_: i32) -> ResultOfIsDisabledControlReleased {
    unsafe {
        let mut native_return = Default::default();
let mut control_ = control_;
let mut action_ = action_;
        let success = sdk::natives::is_disabled_control_released(
            &mut native_return,
control_,
action_,
        );
        let native_return = native_return;
        
        ResultOfIsDisabledControlReleased {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cursor_position(&self, x_: f32,
y_: f32) -> ResultOfSetCursorPosition {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
        let success = sdk::natives::set_cursor_position(
            &mut native_return,
x_,
y_,
        );
        let native_return = native_return;
        
        ResultOfSetCursorPosition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_allow_movement_while_zoomed(&self, ) -> ResultOfGetAllowMovementWhileZoomed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_allow_movement_while_zoomed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetAllowMovementWhileZoomed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_control_action(&self, control_: i32,
action_: i32,
disable_related_actions_: bool) -> ResultOfDisableControlAction {
    unsafe {
        let mut control_ = control_;
let mut action_ = action_;
let mut disable_related_actions_ = disable_related_actions_;
        let success = sdk::natives::disable_control_action(
            control_,
action_,
disable_related_actions_,
        );
        
        
        ResultOfDisableControlAction {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_roads_back_to_original_in_angled_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32,
p7_: i32) -> ResultOfSetRoadsBackToOriginalInAngledArea {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
let mut p7_ = p7_;
        let success = sdk::natives::set_roads_back_to_original_in_angled_area(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
p7_,
        );
        
        
        ResultOfSetRoadsBackToOriginalInAngledArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_num_navmeshes_existing_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOfGetNumNavmeshesExistingInArea {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::get_num_navmeshes_existing_in_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOfGetNumNavmeshesExistingInArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_node_properties(&self, x_: f32,
y_: f32,
z_: f32,
density_: i32,
flags_: i32) -> ResultOfGetVehicleNodeProperties {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut density_ = density_;
let mut flags_ = flags_;
        let success = sdk::natives::get_vehicle_node_properties(
            &mut native_return,
&mut density_,
&mut flags_,
x_,
y_,
z_,
        );
        let native_return = native_return;
let density_ = density_;
let flags_ = flags_;
        
        ResultOfGetVehicleNodeProperties {
            success,
            ret: native_return,
            density_,
flags_
        }
    }
}

    fn native_request_path_nodes_in_area_this_frame(&self, x1_: f32,
y1_: f32,
x2_: f32,
y2_: f32) -> ResultOfRequestPathNodesInAreaThisFrame {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
        let success = sdk::natives::request_path_nodes_in_area_this_frame(
            &mut native_return,
x1_,
y1_,
x2_,
y2_,
        );
        let native_return = native_return;
        
        ResultOfRequestPathNodesInAreaThisFrame {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ambient_ped_range_multiplier_this_frame(&self, multiplier_: f32) -> ResultOfSetAmbientPedRangeMultiplierThisFrame {
    unsafe {
        let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_ambient_ped_range_multiplier_this_frame(
            multiplier_,
        );
        
        
        ResultOfSetAmbientPedRangeMultiplierThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_navmesh_blocking_object_exist(&self, p0_: i32) -> ResultOfDoesNavmeshBlockingObjectExist {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::does_navmesh_blocking_object_exist(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfDoesNavmeshBlockingObjectExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_update_navmesh_blocking_object(&self, p0_: i32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: f32,
p8_: i32) -> ResultOfUpdateNavmeshBlockingObject {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::update_navmesh_blocking_object(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
        );
        
        
        ResultOfUpdateNavmeshBlockingObject {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_point_on_road(&self, x_: f32,
y_: f32,
z_: f32,
vehicle_: u32) -> ResultOfIsPointOnRoad {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_point_on_road(
            &mut native_return,
x_,
y_,
z_,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsPointOnRoad {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_closest_road(&self, x_: f32,
y_: f32,
z_: f32,
p3_: f32,
p4_: i32,
p5_: Option<shared::Vector3>,
p6_: Option<shared::Vector3>,
p7_: shared::MemoryBufferId,
p8_: shared::MemoryBufferId,
p9_: f32,
p10_: bool) -> ResultOfGetClosestRoad {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = sdk_helpers::create_vector3_ptr(p5_);
let mut p6_ = sdk_helpers::create_vector3_ptr(p6_);
let mut p7_ = self.memory_buffers.borrow_mut().get_mut_ptr(p7_) as *mut c_void;
let mut p8_ = self.memory_buffers.borrow_mut().get_mut_ptr(p8_) as *mut c_void;
let mut p9_ = p9_;
let mut p10_ = p10_;
        let success = sdk::natives::get_closest_road(
            &mut native_return,
p5_.pin_mut(),
p6_.pin_mut(),
p7_,
p8_,
&mut p9_,
x_,
y_,
z_,
p3_,
p4_,
p10_,
        );
        let native_return = native_return;
let p5_ = sdk_helpers::read_cpp_vector3(p5_);
let p6_ = sdk_helpers::read_cpp_vector3(p6_);
let p7_ = 0;
let p8_ = 0;
let p9_ = p9_;
        
        ResultOfGetClosestRoad {
            success,
            ret: native_return,
            p5_,
p6_,
p7_,
p8_,
p9_
        }
    }
}

    fn native_get_position_by_side_of_road(&self, x_: f32,
y_: f32,
z_: f32,
p3_: i32,
out_position_: Option<shared::Vector3>) -> ResultOfGetPositionBySideOfRoad {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut out_position_ = sdk_helpers::create_vector3_ptr(out_position_);
        let success = sdk::natives::get_position_by_side_of_road(
            &mut native_return,
out_position_.pin_mut(),
x_,
y_,
z_,
p3_,
        );
        let native_return = native_return;
let out_position_ = sdk_helpers::read_cpp_vector3(out_position_);
        
        ResultOfGetPositionBySideOfRoad {
            success,
            ret: native_return,
            out_position_
        }
    }
}

    fn native_set_roads_in_angled_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32,
unknown1_: bool,
unknown2_: bool,
unknown3_: bool) -> ResultOfSetRoadsInAngledArea {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
let mut unknown1_ = unknown1_;
let mut unknown2_ = unknown2_;
let mut unknown3_ = unknown3_;
        let success = sdk::natives::set_roads_in_angled_area(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
unknown1_,
unknown2_,
unknown3_,
        );
        
        
        ResultOfSetRoadsInAngledArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_node_id_valid(&self, vehicle_node_id_: i32) -> ResultOfIsVehicleNodeIdValid {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_node_id_ = vehicle_node_id_;
        let success = sdk::natives::is_vehicle_node_id_valid(
            &mut native_return,
vehicle_node_id_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleNodeIdValid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_roads_back_to_original(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: i32) -> ResultOfSetRoadsBackToOriginal {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::set_roads_back_to_original(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        
        
        ResultOfSetRoadsBackToOriginal {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ignore_no_gps_flag_until_first_normal_node(&self, toggle_: bool) -> ResultOfSetIgnoreNoGpsFlagUntilFirstNormalNode {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_ignore_no_gps_flag_until_first_normal_node(
            toggle_,
        );
        
        
        ResultOfSetIgnoreNoGpsFlagUntilFirstNormalNode {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_allow_stream_prologue_nodes(&self, toggle_: bool) -> ResultOfSetAllowStreamPrologueNodes {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_allow_stream_prologue_nodes(
            toggle_,
        );
        
        
        ResultOfSetAllowStreamPrologueNodes {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_nth_closest_vehicle_node_id(&self, x_: f32,
y_: f32,
z_: f32,
nth_: i32,
node_flags_: i32,
p5_: f32,
p6_: f32) -> ResultOfGetNthClosestVehicleNodeId {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut nth_ = nth_;
let mut node_flags_ = node_flags_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::get_nth_closest_vehicle_node_id(
            &mut native_return,
x_,
y_,
z_,
nth_,
node_flags_,
p5_,
p6_,
        );
        let native_return = native_return;
        
        ResultOfGetNthClosestVehicleNodeId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_closest_vehicle_node(&self, x_: f32,
y_: f32,
z_: f32,
out_position_: Option<shared::Vector3>,
node_flags_: i32,
p5_: f32,
p6_: f32) -> ResultOfGetClosestVehicleNode {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut out_position_ = sdk_helpers::create_vector3_ptr(out_position_);
let mut node_flags_ = node_flags_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::get_closest_vehicle_node(
            &mut native_return,
out_position_.pin_mut(),
x_,
y_,
z_,
node_flags_,
p5_,
p6_,
        );
        let native_return = native_return;
let out_position_ = sdk_helpers::read_cpp_vector3(out_position_);
        
        ResultOfGetClosestVehicleNode {
            success,
            ret: native_return,
            out_position_
        }
    }
}

    fn native_clear_gps_disabled_zone_at_index(&self, index_: i32) -> ResultOfClearGpsDisabledZoneAtIndex {
    unsafe {
        let mut index_ = index_;
        let success = sdk::natives::clear_gps_disabled_zone_at_index(
            index_,
        );
        
        
        ResultOfClearGpsDisabledZoneAtIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_approx_height_for_point(&self, x_: f32,
y_: f32) -> ResultOfGetApproxHeightForPoint {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
        let success = sdk::natives::get_approx_height_for_point(
            &mut native_return,
x_,
y_,
        );
        let native_return = native_return;
        
        ResultOfGetApproxHeightForPoint {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_closest_major_vehicle_node(&self, x_: f32,
y_: f32,
z_: f32,
out_position_: Option<shared::Vector3>,
unknown1_: f32,
unknown2_: f32) -> ResultOfGetClosestMajorVehicleNode {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut out_position_ = sdk_helpers::create_vector3_ptr(out_position_);
let mut unknown1_ = unknown1_;
let mut unknown2_ = unknown2_;
        let success = sdk::natives::get_closest_major_vehicle_node(
            &mut native_return,
out_position_.pin_mut(),
x_,
y_,
z_,
unknown1_,
unknown2_,
        );
        let native_return = native_return;
let out_position_ = sdk_helpers::read_cpp_vector3(out_position_);
        
        ResultOfGetClosestMajorVehicleNode {
            success,
            ret: native_return,
            out_position_
        }
    }
}

    fn native_get_street_name_at_coord(&self, x_: f32,
y_: f32,
z_: f32,
street_name_: u32,
crossing_road_: u32) -> ResultOfGetStreetNameAtCoord {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut street_name_ = street_name_;
let mut crossing_road_ = crossing_road_;
        let success = sdk::natives::get_street_name_at_coord(
            &mut street_name_,
&mut crossing_road_,
x_,
y_,
z_,
        );
        let street_name_ = street_name_;
let crossing_road_ = crossing_road_;
        
        ResultOfGetStreetNameAtCoord {
            success,
            ret: (),
            street_name_,
crossing_road_
        }
    }
}

    fn native_get_approx_floor_for_point(&self, x_: f32,
y_: f32) -> ResultOfGetApproxFloorForPoint {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
        let success = sdk::natives::get_approx_floor_for_point(
            &mut native_return,
x_,
y_,
        );
        let native_return = native_return;
        
        ResultOfGetApproxFloorForPoint {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_paths_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
p6_: bool,
p7_: i32) -> ResultOfSetPedPathsInArea {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::set_ped_paths_in_area(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
p6_,
p7_,
        );
        
        
        ResultOfSetPedPathsInArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_approx_floor_for_area(&self, x1_: f32,
y1_: f32,
x2_: f32,
y2_: f32) -> ResultOfGetApproxFloorForArea {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
        let success = sdk::natives::get_approx_floor_for_area(
            &mut native_return,
x1_,
y1_,
x2_,
y2_,
        );
        let native_return = native_return;
        
        ResultOfGetApproxFloorForArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_navmesh_required_region(&self, x_: f32,
y_: f32,
radius_: f32) -> ResultOfAddNavmeshRequiredRegion {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut radius_ = radius_;
        let success = sdk::natives::add_navmesh_required_region(
            x_,
y_,
radius_,
        );
        
        
        ResultOfAddNavmeshRequiredRegion {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_nth_closest_vehicle_node_favour_direction(&self, x_: f32,
y_: f32,
z_: f32,
desired_x_: f32,
desired_y_: f32,
desired_z_: f32,
nth_closest_: i32,
out_position_: Option<shared::Vector3>,
out_heading_: f32,
node_flags_: i32,
p10_: f32,
p11_: f32) -> ResultOfGetNthClosestVehicleNodeFavourDirection {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut desired_x_ = desired_x_;
let mut desired_y_ = desired_y_;
let mut desired_z_ = desired_z_;
let mut nth_closest_ = nth_closest_;
let mut out_position_ = sdk_helpers::create_vector3_ptr(out_position_);
let mut out_heading_ = out_heading_;
let mut node_flags_ = node_flags_;
let mut p10_ = p10_;
let mut p11_ = p11_;
        let success = sdk::natives::get_nth_closest_vehicle_node_favour_direction(
            &mut native_return,
out_position_.pin_mut(),
&mut out_heading_,
x_,
y_,
z_,
desired_x_,
desired_y_,
desired_z_,
nth_closest_,
node_flags_,
p10_,
p11_,
        );
        let native_return = native_return;
let out_position_ = sdk_helpers::read_cpp_vector3(out_position_);
let out_heading_ = out_heading_;
        
        ResultOfGetNthClosestVehicleNodeFavourDirection {
            success,
            ret: native_return,
            out_position_,
out_heading_
        }
    }
}

    fn native_remove_navmesh_blocking_object(&self, p0_: i32) -> ResultOfRemoveNavmeshBlockingObject {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::remove_navmesh_blocking_object(
            p0_,
        );
        
        
        ResultOfRemoveNavmeshBlockingObject {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_navmesh_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
toggle_: bool) -> ResultOfDisableNavmeshInArea {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut toggle_ = toggle_;
        let success = sdk::natives::disable_navmesh_in_area(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
toggle_,
        );
        
        
        ResultOfDisableNavmeshInArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_node_is_switched_off(&self, node_i_d_: i32) -> ResultOfGetVehicleNodeIsSwitchedOff {
    unsafe {
        let mut native_return = Default::default();
let mut node_i_d_ = node_i_d_;
        let success = sdk::natives::get_vehicle_node_is_switched_off(
            &mut native_return,
node_i_d_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleNodeIsSwitchedOff {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_nth_closest_vehicle_node_id_with_heading(&self, x_: f32,
y_: f32,
z_: f32,
nth_closest_: i32,
out_position_: Option<shared::Vector3>,
out_heading_: f32,
node_flags_: i32,
p7_: f32,
p8_: f32) -> ResultOfGetNthClosestVehicleNodeIdWithHeading {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut nth_closest_ = nth_closest_;
let mut out_position_ = sdk_helpers::create_vector3_ptr(out_position_);
let mut out_heading_ = out_heading_;
let mut node_flags_ = node_flags_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::get_nth_closest_vehicle_node_id_with_heading(
            &mut native_return,
out_position_.pin_mut(),
&mut out_heading_,
x_,
y_,
z_,
nth_closest_,
node_flags_,
p7_,
p8_,
        );
        let native_return = native_return;
let out_position_ = sdk_helpers::read_cpp_vector3(out_position_);
let out_heading_ = out_heading_;
        
        ResultOfGetNthClosestVehicleNodeIdWithHeading {
            success,
            ret: native_return,
            out_position_,
out_heading_
        }
    }
}

    fn native_get_vehicle_node_position(&self, node_id_: i32,
out_position_: Option<shared::Vector3>) -> ResultOfGetVehicleNodePosition {
    unsafe {
        let mut node_id_ = node_id_;
let mut out_position_ = sdk_helpers::create_vector3_ptr(out_position_);
        let success = sdk::natives::get_vehicle_node_position(
            out_position_.pin_mut(),
node_id_,
        );
        let out_position_ = sdk_helpers::read_cpp_vector3(out_position_);
        
        ResultOfGetVehicleNodePosition {
            success,
            ret: (),
            out_position_
        }
    }
}

    fn native_is_navmesh_required_region_in_use(&self, ) -> ResultOfIsNavmeshRequiredRegionInUse {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_navmesh_required_region_in_use(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsNavmeshRequiredRegionInUse {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ignore_no_gps_flag(&self, toggle_: bool) -> ResultOfSetIgnoreNoGpsFlag {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_ignore_no_gps_flag(
            toggle_,
        );
        
        
        ResultOfSetIgnoreNoGpsFlag {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_nth_closest_vehicle_node_with_heading(&self, x_: f32,
y_: f32,
z_: f32,
nth_closest_: i32,
out_position_: Option<shared::Vector3>,
out_heading_: f32,
out_num_lanes_: i32,
node_flags_: i32,
unknown3_: f32,
unknown4_: f32) -> ResultOfGetNthClosestVehicleNodeWithHeading {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut nth_closest_ = nth_closest_;
let mut out_position_ = sdk_helpers::create_vector3_ptr(out_position_);
let mut out_heading_ = out_heading_;
let mut out_num_lanes_ = out_num_lanes_;
let mut node_flags_ = node_flags_;
let mut unknown3_ = unknown3_;
let mut unknown4_ = unknown4_;
        let success = sdk::natives::get_nth_closest_vehicle_node_with_heading(
            &mut native_return,
out_position_.pin_mut(),
&mut out_heading_,
&mut out_num_lanes_,
x_,
y_,
z_,
nth_closest_,
node_flags_,
unknown3_,
unknown4_,
        );
        let native_return = native_return;
let out_position_ = sdk_helpers::read_cpp_vector3(out_position_);
let out_heading_ = out_heading_;
let out_num_lanes_ = out_num_lanes_;
        
        ResultOfGetNthClosestVehicleNodeWithHeading {
            success,
            ret: native_return,
            out_position_,
out_heading_,
out_num_lanes_
        }
    }
}

    fn native_are_all_navmesh_regions_loaded(&self, ) -> ResultOfAreAllNavmeshRegionsLoaded {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::are_all_navmesh_regions_loaded(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfAreAllNavmeshRegionsLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_gps_blip_route_found(&self, ) -> ResultOfGetGpsBlipRouteFound {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_gps_blip_route_found(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetGpsBlipRouteFound {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_approx_height_for_area(&self, x1_: f32,
y1_: f32,
x2_: f32,
y2_: f32) -> ResultOfGetApproxHeightForArea {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
        let success = sdk::natives::get_approx_height_for_area(
            &mut native_return,
x1_,
y1_,
x2_,
y2_,
        );
        let native_return = native_return;
        
        ResultOfGetApproxHeightForArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_navmesh_required_regions(&self, ) -> ResultOfRemoveNavmeshRequiredRegions {
    unsafe {
        
        let success = sdk::natives::remove_navmesh_required_regions(
            
        );
        
        
        ResultOfRemoveNavmeshRequiredRegions {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_random_vehicle_node(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
p4_: bool,
p5_: bool,
p6_: bool,
out_position_: Option<shared::Vector3>,
node_id_: i32) -> ResultOfGetRandomVehicleNode {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut out_position_ = sdk_helpers::create_vector3_ptr(out_position_);
let mut node_id_ = node_id_;
        let success = sdk::natives::get_random_vehicle_node(
            &mut native_return,
out_position_.pin_mut(),
&mut node_id_,
x_,
y_,
z_,
radius_,
p4_,
p5_,
p6_,
        );
        let native_return = native_return;
let out_position_ = sdk_helpers::read_cpp_vector3(out_position_);
let node_id_ = node_id_;
        
        ResultOfGetRandomVehicleNode {
            success,
            ret: native_return,
            out_position_,
node_id_
        }
    }
}

    fn native_get_road_boundary_using_heading(&self, x_: f32,
y_: f32,
z_: f32,
heading_: f32,
out_position_: Option<shared::Vector3>) -> ResultOfGetRoadBoundaryUsingHeading {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut out_position_ = sdk_helpers::create_vector3_ptr(out_position_);
        let success = sdk::natives::get_road_boundary_using_heading(
            &mut native_return,
out_position_.pin_mut(),
x_,
y_,
z_,
heading_,
        );
        let native_return = native_return;
let out_position_ = sdk_helpers::read_cpp_vector3(out_position_);
        
        ResultOfGetRoadBoundaryUsingHeading {
            success,
            ret: native_return,
            out_position_
        }
    }
}

    fn native_get_vehicle_node_is_gps_allowed(&self, node_i_d_: i32) -> ResultOfGetVehicleNodeIsGpsAllowed {
    unsafe {
        let mut native_return = Default::default();
let mut node_i_d_ = node_i_d_;
        let success = sdk::natives::get_vehicle_node_is_gps_allowed(
            &mut native_return,
node_i_d_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleNodeIsGpsAllowed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_adjust_ambient_ped_spawn_densities_this_frame(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32) -> ResultOfAdjustAmbientPedSpawnDensitiesThisFrame {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::adjust_ambient_ped_spawn_densities_this_frame(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        
        
        ResultOfAdjustAmbientPedSpawnDensitiesThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_calculate_travel_distance_between_points(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOfCalculateTravelDistanceBetweenPoints {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::calculate_travel_distance_between_points(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOfCalculateTravelDistanceBetweenPoints {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_safe_coord_for_ped(&self, x_: f32,
y_: f32,
z_: f32,
on_ground_: bool,
out_position_: Option<shared::Vector3>,
flags_: i32) -> ResultOfGetSafeCoordForPed {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut on_ground_ = on_ground_;
let mut out_position_ = sdk_helpers::create_vector3_ptr(out_position_);
let mut flags_ = flags_;
        let success = sdk::natives::get_safe_coord_for_ped(
            &mut native_return,
out_position_.pin_mut(),
x_,
y_,
z_,
on_ground_,
flags_,
        );
        let native_return = native_return;
let out_position_ = sdk_helpers::read_cpp_vector3(out_position_);
        
        ResultOfGetSafeCoordForPed {
            success,
            ret: native_return,
            out_position_
        }
    }
}

    fn native_get_gps_blip_route_length(&self, ) -> ResultOfGetGpsBlipRouteLength {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_gps_blip_route_length(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetGpsBlipRouteLength {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_roads_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
node_enabled_: bool,
unknown2_: bool) -> ResultOfSetRoadsInArea {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut node_enabled_ = node_enabled_;
let mut unknown2_ = unknown2_;
        let success = sdk::natives::set_roads_in_area(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
node_enabled_,
unknown2_,
        );
        
        
        ResultOfSetRoadsInArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_load_all_path_nodes(&self, set_: bool) -> ResultOfLoadAllPathNodes {
    unsafe {
        let mut native_return = Default::default();
let mut set_ = set_;
        let success = sdk::natives::load_all_path_nodes(
            &mut native_return,
set_,
        );
        let native_return = native_return;
        
        ResultOfLoadAllPathNodes {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gps_disabled_zone_at_index(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
index_: i32) -> ResultOfSetGpsDisabledZoneAtIndex {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut index_ = index_;
        let success = sdk::natives::set_gps_disabled_zone_at_index(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
index_,
        );
        
        
        ResultOfSetGpsDisabledZoneAtIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_next_gps_disabled_zone_index(&self, ) -> ResultOfGetNextGpsDisabledZoneIndex {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_next_gps_disabled_zone_index(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetNextGpsDisabledZoneIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_gps_disabled_zone(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z3_: f32) -> ResultOfSetGpsDisabledZone {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z3_ = z3_;
        let success = sdk::natives::set_gps_disabled_zone(
            x1_,
y1_,
z1_,
x2_,
y2_,
z3_,
        );
        
        
        ResultOfSetGpsDisabledZone {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_paths_back_to_original(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
p6_: i32) -> ResultOfSetPedPathsBackToOriginal {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut p6_ = p6_;
        let success = sdk::natives::set_ped_paths_back_to_original(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
p6_,
        );
        
        
        ResultOfSetPedPathsBackToOriginal {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_nth_closest_vehicle_node(&self, x_: f32,
y_: f32,
z_: f32,
nth_closest_: i32,
out_position_: Option<shared::Vector3>,
node_flags_: i32,
unknown1_: f32,
unknown2_: f32) -> ResultOfGetNthClosestVehicleNode {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut nth_closest_ = nth_closest_;
let mut out_position_ = sdk_helpers::create_vector3_ptr(out_position_);
let mut node_flags_ = node_flags_;
let mut unknown1_ = unknown1_;
let mut unknown2_ = unknown2_;
        let success = sdk::natives::get_nth_closest_vehicle_node(
            &mut native_return,
out_position_.pin_mut(),
x_,
y_,
z_,
nth_closest_,
node_flags_,
unknown1_,
unknown2_,
        );
        let native_return = native_return;
let out_position_ = sdk_helpers::read_cpp_vector3(out_position_);
        
        ResultOfGetNthClosestVehicleNode {
            success,
            ret: native_return,
            out_position_
        }
    }
}

    fn native_get_pos_along_gps_type_route(&self, result_: Option<shared::Vector3>,
p1_: bool,
p2_: f32,
p3_: i32) -> ResultOfGetPosAlongGpsTypeRoute {
    unsafe {
        let mut native_return = Default::default();
let mut result_ = sdk_helpers::create_vector3_ptr(result_);
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::get_pos_along_gps_type_route(
            &mut native_return,
result_.pin_mut(),
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
let result_ = sdk_helpers::read_cpp_vector3(result_);
        
        ResultOfGetPosAlongGpsTypeRoute {
            success,
            ret: native_return,
            result_
        }
    }
}

    fn native_set_allow_stream_heist_island_nodes(&self, type_: i32) -> ResultOfSetAllowStreamHeistIslandNodes {
    unsafe {
        let mut type_ = type_;
        let success = sdk::natives::set_allow_stream_heist_island_nodes(
            type_,
        );
        
        
        ResultOfSetAllowStreamHeistIslandNodes {
            success,
            ret: (),
            
        }
    }
}

    fn native_are_nodes_loaded_for_area(&self, x1_: f32,
y1_: f32,
x2_: f32,
y2_: f32) -> ResultOfAreNodesLoadedForArea {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
        let success = sdk::natives::are_nodes_loaded_for_area(
            &mut native_return,
x1_,
y1_,
x2_,
y2_,
        );
        let native_return = native_return;
        
        ResultOfAreNodesLoadedForArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_navmesh_loaded_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOfIsNavmeshLoadedInArea {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::is_navmesh_loaded_in_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOfIsNavmeshLoadedInArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_generate_directions_to_coord(&self, x_: f32,
y_: f32,
z_: f32,
p3_: bool,
direction_: i32,
p5_: f32,
dist_to_nx_junction_: f32) -> ResultOfGenerateDirectionsToCoord {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p3_ = p3_;
let mut direction_ = direction_;
let mut p5_ = p5_;
let mut dist_to_nx_junction_ = dist_to_nx_junction_;
        let success = sdk::natives::generate_directions_to_coord(
            &mut native_return,
&mut direction_,
&mut p5_,
&mut dist_to_nx_junction_,
x_,
y_,
z_,
p3_,
        );
        let native_return = native_return;
let direction_ = direction_;
let p5_ = p5_;
let dist_to_nx_junction_ = dist_to_nx_junction_;
        
        ResultOfGenerateDirectionsToCoord {
            success,
            ret: native_return,
            direction_,
p5_,
dist_to_nx_junction_
        }
    }
}

    fn native_add_navmesh_blocking_object(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: bool,
p8_: i32) -> ResultOfAddNavmeshBlockingObject {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::add_navmesh_blocking_object(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
        );
        let native_return = native_return;
        
        ResultOfAddNavmeshBlockingObject {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_closest_vehicle_node_with_heading(&self, x_: f32,
y_: f32,
z_: f32,
out_position_: Option<shared::Vector3>,
out_heading_: f32,
node_type_: i32,
p6_: f32,
p7_: f32) -> ResultOfGetClosestVehicleNodeWithHeading {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut out_position_ = sdk_helpers::create_vector3_ptr(out_position_);
let mut out_heading_ = out_heading_;
let mut node_type_ = node_type_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::get_closest_vehicle_node_with_heading(
            &mut native_return,
out_position_.pin_mut(),
&mut out_heading_,
x_,
y_,
z_,
node_type_,
p6_,
p7_,
        );
        let native_return = native_return;
let out_position_ = sdk_helpers::read_cpp_vector3(out_position_);
let out_heading_ = out_heading_;
        
        ResultOfGetClosestVehicleNodeWithHeading {
            success,
            ret: native_return,
            out_position_,
out_heading_
        }
    }
}

    fn native_reset_facial_idle_anim(&self, ped_: u32) -> ResultOfResetFacialIdleAnim {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::reset_facial_idle_anim(
            ped_,
        );
        
        
        ResultOfResetFacialIdleAnim {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_using_action_mode(&self, ped_: u32) -> ResultOfIsPedUsingActionMode {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_using_action_mode(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedUsingActionMode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_makeup_tint_color(&self, makeup_color_index_: i32,
out_r_: i32,
out_g_: i32,
out_b_: i32) -> ResultOfGetPedMakeupTintColor {
    unsafe {
        let mut makeup_color_index_ = makeup_color_index_;
let mut out_r_ = out_r_;
let mut out_g_ = out_g_;
let mut out_b_ = out_b_;
        let success = sdk::natives::get_ped_makeup_tint_color(
            &mut out_r_,
&mut out_g_,
&mut out_b_,
makeup_color_index_,
        );
        let out_r_ = out_r_;
let out_g_ = out_g_;
let out_b_ = out_b_;
        
        ResultOfGetPedMakeupTintColor {
            success,
            ret: (),
            out_r_,
out_g_,
out_b_
        }
    }
}

    fn native_set_ped_min_move_blend_ratio(&self, ped_: u32,
value_: f32) -> ResultOfSetPedMinMoveBlendRatio {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_min_move_blend_ratio(
            ped_,
value_,
        );
        
        
        ResultOfSetPedMinMoveBlendRatio {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_ragdoll_force_fall(&self, ped_: u32) -> ResultOfSetPedRagdollForceFall {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_ragdoll_force_fall(
            ped_,
        );
        
        
        ResultOfSetPedRagdollForceFall {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_on_foot(&self, ped_: u32) -> ResultOfIsPedOnFoot {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_on_foot(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedOnFoot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_as_enemy(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedAsEnemy {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_as_enemy(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedAsEnemy {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_ducking(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedDucking {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_ducking(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedDucking {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_can_ped_be_grabbed_by_script(&self, ped_: u32,
p1_: bool,
p2_: bool,
p3_: bool,
p4_: bool,
p5_: bool,
p6_: bool,
p7_: bool,
p8_: i32) -> ResultOfGetCanPedBeGrabbedByScript {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::get_can_ped_be_grabbed_by_script(
            &mut native_return,
ped_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
        );
        let native_return = native_return;
        
        ResultOfGetCanPedBeGrabbedByScript {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_texture_variation(&self, ped_: u32,
component_id_: i32) -> ResultOfGetPedTextureVariation {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut component_id_ = component_id_;
        let success = sdk::natives::get_ped_texture_variation(
            &mut native_return,
ped_,
component_id_,
        );
        let native_return = native_return;
        
        ResultOfGetPedTextureVariation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_lipstick_tint_for_barber(&self, color_i_d_: i32) -> ResultOfIsPedLipstickTintForBarber {
    unsafe {
        let mut native_return = Default::default();
let mut color_i_d_ = color_i_d_;
        let success = sdk::natives::is_ped_lipstick_tint_for_barber(
            &mut native_return,
color_i_d_,
        );
        let native_return = native_return;
        
        ResultOfIsPedLipstickTintForBarber {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_target_ped_in_perception_area(&self, ped_: u32,
target_ped_: u32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32) -> ResultOfIsTargetPedInPerceptionArea {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut target_ped_ = target_ped_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::is_target_ped_in_perception_area(
            &mut native_return,
ped_,
target_ped_,
p2_,
p3_,
p4_,
p5_,
        );
        let native_return = native_return;
        
        ResultOfIsTargetPedInPerceptionArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_allow_lockon_to_ped_if_friendly(&self, ped_: u32,
toggle_: bool) -> ResultOfSetAllowLockonToPedIfFriendly {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_allow_lockon_to_ped_if_friendly(
            ped_,
toggle_,
        );
        
        
        ResultOfSetAllowLockonToPedIfFriendly {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_target_loss_response(&self, ped_: u32,
response_type_: i32) -> ResultOfSetPedTargetLossResponse {
    unsafe {
        let mut ped_ = ped_;
let mut response_type_ = response_type_;
        let success = sdk::natives::set_ped_target_loss_response(
            ped_,
response_type_,
        );
        
        
        ResultOfSetPedTargetLossResponse {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_any_ped_near_point(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOfIsAnyPedNearPoint {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::is_any_ped_near_point(
            &mut native_return,
x_,
y_,
z_,
radius_,
        );
        let native_return = native_return;
        
        ResultOfIsAnyPedNearPoint {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_move_rate_override(&self, ped_: u32,
value_: f32) -> ResultOfSetPedMoveRateOverride {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_move_rate_override(
            ped_,
value_,
        );
        
        
        ResultOfSetPedMoveRateOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_prop(&self, ped_: u32,
prop_id_: i32,
p2_: i32) -> ResultOfClearPedProp {
    unsafe {
        let mut ped_ = ped_;
let mut prop_id_ = prop_id_;
let mut p2_ = p2_;
        let success = sdk::natives::clear_ped_prop(
            ped_,
prop_id_,
p2_,
        );
        
        
        ResultOfClearPedProp {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_blush_facepaint_tint_for_barber(&self, color_id_: i32) -> ResultOfIsPedBlushFacepaintTintForBarber {
    unsafe {
        let mut native_return = Default::default();
let mut color_id_ = color_id_;
        let success = sdk::natives::is_ped_blush_facepaint_tint_for_barber(
            &mut native_return,
color_id_,
        );
        let native_return = native_return;
        
        ResultOfIsPedBlushFacepaintTintForBarber {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_motion_blur(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedMotionBlur {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_motion_blur(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedMotionBlur {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_move_rate_in_water_override(&self, ped_: u32,
p1_: f32) -> ResultOfSetPedMoveRateInWaterOverride {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_move_rate_in_water_override(
            ped_,
p1_,
        );
        
        
        ResultOfSetPedMoveRateInWaterOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_in_any_police_vehicle(&self, ped_: u32) -> ResultOfIsPedInAnyPoliceVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_any_police_vehicle(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedInAnyPoliceVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_group_member_passenger_index(&self, ped_: u32,
index_: i32) -> ResultOfSetPedGroupMemberPassengerIndex {
    unsafe {
        let mut ped_ = ped_;
let mut index_ = index_;
        let success = sdk::natives::set_ped_group_member_passenger_index(
            ped_,
index_,
        );
        
        
        ResultOfSetPedGroupMemberPassengerIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_decorations(&self, ped_: u32) -> ResultOfClearPedDecorations {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_decorations(
            ped_,
        );
        
        
        ResultOfClearPedDecorations {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_play_ambient_base_anims(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedCanPlayAmbientBaseAnims {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_play_ambient_base_anims(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedCanPlayAmbientBaseAnims {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_treated_as_friendly(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfSetPedTreatedAsFriendly {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_ped_treated_as_friendly(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfSetPedTreatedAsFriendly {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_create_random_cops(&self, toggle_: bool) -> ResultOfSetCreateRandomCops {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_create_random_cops(
            toggle_,
        );
        
        
        ResultOfSetCreateRandomCops {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_enveff_cpv_add(&self, ped_: u32,
p1_: f32) -> ResultOfSetPedEnveffCpvAdd {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_enveff_cpv_add(
            ped_,
p1_,
        );
        
        
        ResultOfSetPedEnveffCpvAdd {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_to_inform_respected_friends(&self, ped_: u32,
radius_: f32,
max_friends_: i32) -> ResultOfSetPedToInformRespectedFriends {
    unsafe {
        let mut ped_ = ped_;
let mut radius_ = radius_;
let mut max_friends_ = max_friends_;
        let success = sdk::natives::set_ped_to_inform_respected_friends(
            ped_,
radius_,
max_friends_,
        );
        
        
        ResultOfSetPedToInformRespectedFriends {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_vaulting(&self, ped_: u32) -> ResultOfIsPedVaulting {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_vaulting(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedVaulting {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_was_ped_skeleton_updated(&self, ped_: u32) -> ResultOfWasPedSkeletonUpdated {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::was_ped_skeleton_updated(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfWasPedSkeletonUpdated {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_ragdoll_bounds_update(&self, p0_: i32,
p1_: i32) -> ResultOfRequestRagdollBoundsUpdate {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::request_ragdoll_bounds_update(
            p0_,
p1_,
        );
        
        
        ResultOfRequestRagdollBoundsUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_a_player(&self, ped_: u32) -> ResultOfIsPedAplayer {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_a_player(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedAplayer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_ped_parachute_pack_variation(&self, ped_: u32) -> ResultOfClearPedParachutePackVariation {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_parachute_pack_variation(
            ped_,
        );
        
        
        ResultOfClearPedParachutePackVariation {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_ped_ragdoll(&self, ped_: u32) -> ResultOfCanPedRagdoll {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::can_ped_ragdoll(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfCanPedRagdoll {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_force_footstep_update(&self, ped_: u32,
toggle_: bool) -> ResultOfSetForceFootstepUpdate {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_force_footstep_update(
            ped_,
toggle_,
        );
        
        
        ResultOfSetForceFootstepUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_blend_from_parents(&self, ped_: u32,
p1_: i32,
p2_: i32,
p3_: f32,
p4_: f32) -> ResultOfSetPedBlendFromParents {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::set_ped_blend_from_parents(
            ped_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfSetPedBlendFromParents {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_action_mode_asset(&self, asset_: Option<String>) -> ResultOfRemoveActionModeAsset {
    unsafe {
        let mut asset_ = sdk_helpers::create_c_string_ptr(asset_);
        let success = sdk::natives::remove_action_mode_asset(
            asset_.as_ref().unwrap(),
        );
        
        
        ResultOfRemoveActionModeAsset {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_taking_off_helmet(&self, ped_: u32) -> ResultOfIsPedTakingOffHelmet {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_taking_off_helmet(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedTakingOffHelmet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_emissive_scale(&self, ped_: u32) -> ResultOfGetPedEmissiveScale {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_emissive_scale(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedEmissiveScale {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clone_ped_to_target_alt(&self, ped_: u32,
target_ped_: u32,
p2_: bool) -> ResultOfClonePedToTargetAlt {
    unsafe {
        let mut ped_ = ped_;
let mut target_ped_ = target_ped_;
let mut p2_ = p2_;
        let success = sdk::natives::clone_ped_to_target_alt(
            ped_,
target_ped_,
p2_,
        );
        
        
        ResultOfClonePedToTargetAlt {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_scenario_peds_to_be_returned_by_next_command(&self, value_: bool) -> ResultOfSetScenarioPedsToBeReturnedByNextCommand {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_scenario_peds_to_be_returned_by_next_command(
            value_,
        );
        
        
        ResultOfSetScenarioPedsToBeReturnedByNextCommand {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_steers_around_objects(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedSteersAroundObjects {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_steers_around_objects(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedSteersAroundObjects {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_ped_to_open_parachute(&self, ped_: u32) -> ResultOfForcePedToOpenParachute {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::force_ped_to_open_parachute(
            ped_,
        );
        
        
        ResultOfForcePedToOpenParachute {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_cop_ped_in_area3d(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOfIsCopPedInArea3d {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::is_cop_ped_in_area3d(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOfIsCopPedInArea3d {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_cause_of_death(&self, ped_: u32) -> ResultOfGetPedCauseOfDeath {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_cause_of_death(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedCauseOfDeath {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_bone_coords(&self, ped_: u32,
bone_id_: i32,
offset_x_: f32,
offset_y_: f32,
offset_z_: f32) -> ResultOfGetPedBoneCoords {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut ped_ = ped_;
let mut bone_id_ = bone_id_;
let mut offset_x_ = offset_x_;
let mut offset_y_ = offset_y_;
let mut offset_z_ = offset_z_;
        let success = sdk::natives::get_ped_bone_coords(
            native_return.pin_mut(),
ped_,
bone_id_,
offset_x_,
offset_y_,
offset_z_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetPedBoneCoords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_melee_target_for_ped(&self, ped_: u32) -> ResultOfGetMeleeTargetForPed {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_melee_target_for_ped(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetMeleeTargetForPed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_config_flag(&self, ped_: u32,
flag_id_: i32,
value_: bool) -> ResultOfSetPedConfigFlag {
    unsafe {
        let mut ped_ = ped_;
let mut flag_id_ = flag_id_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_config_flag(
            ped_,
flag_id_,
value_,
        );
        
        
        ResultOfSetPedConfigFlag {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ladder_climb_input_state(&self, ped_: u32,
p1_: i32) -> ResultOfSetLadderClimbInputState {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ladder_climb_input_state(
            ped_,
p1_,
        );
        
        
        ResultOfSetLadderClimbInputState {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ai_weapon_damage_modifier(&self, value_: f32) -> ResultOfSetAiWeaponDamageModifier {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_ai_weapon_damage_modifier(
            value_,
        );
        
        
        ResultOfSetAiWeaponDamageModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_scenario_blocking_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
p6_: bool,
p7_: bool,
p8_: bool,
p9_: bool) -> ResultOfAddScenarioBlockingArea {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::add_scenario_blocking_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
p6_,
p7_,
p8_,
p9_,
        );
        let native_return = native_return;
        
        ResultOfAddScenarioBlockingArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_using_scenario(&self, ped_: u32,
scenario_: Option<String>) -> ResultOfIsPedUsingScenario {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut scenario_ = sdk_helpers::create_c_string_ptr(scenario_);
        let success = sdk::natives::is_ped_using_scenario(
            &mut native_return,
ped_,
scenario_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfIsPedUsingScenario {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_hanging_on_to_vehicle(&self, ped_: u32) -> ResultOfIsPedHangingOnToVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_hanging_on_to_vehicle(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedHangingOnToVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_smash_glass(&self, ped_: u32,
p1_: bool,
p2_: bool) -> ResultOfSetPedCanSmashGlass {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_ped_can_smash_glass(
            ped_,
p1_,
p2_,
        );
        
        
        ResultOfSetPedCanSmashGlass {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_group_formation_spacing(&self, group_id_: i32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfSetGroupFormationSpacing {
    unsafe {
        let mut group_id_ = group_id_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_group_formation_spacing(
            group_id_,
x_,
y_,
z_,
        );
        
        
        ResultOfSetGroupFormationSpacing {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_fm_male_shop_ped_apparel_item_index(&self, p0_: i32) -> ResultOfGetFmMaleShopPedApparelItemIndex {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_fm_male_shop_ped_apparel_item_index(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfGetFmMaleShopPedApparelItemIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_time_of_death(&self, ped_: u32) -> ResultOfGetPedTimeOfDeath {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_time_of_death(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedTimeOfDeath {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_steers_around_dead_bodies(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedSteersAroundDeadBodies {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_steers_around_dead_bodies(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedSteersAroundDeadBodies {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_ped_strafe_clipset(&self, ped_: u32) -> ResultOfResetPedStrafeClipset {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::reset_ped_strafe_clipset(
            ped_,
        );
        
        
        ResultOfResetPedStrafeClipset {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_ragdoll_bone_index(&self, ped_: u32,
bone_: i32) -> ResultOfGetPedRagdollBoneIndex {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut bone_ = bone_;
        let success = sdk::natives::get_ped_ragdoll_bone_index(
            &mut native_return,
ped_,
bone_,
        );
        let native_return = native_return;
        
        ResultOfGetPedRagdollBoneIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_ped_ai_and_animation_update(&self, ped_: u32,
p1_: bool,
p2_: bool) -> ResultOfForcePedAiAndAnimationUpdate {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::force_ped_ai_and_animation_update(
            ped_,
p1_,
p2_,
        );
        
        
        ResultOfForcePedAiAndAnimationUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_ped_in_vehicle_context(&self, ped_: u32) -> ResultOfResetPedInVehicleContext {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::reset_ped_in_vehicle_context(
            ped_,
        );
        
        
        ResultOfResetPedInVehicleContext {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_nearby_peds(&self, ped_: u32,
size_and_peds_: shared::MemoryBufferId,
ignore_: i32) -> ResultOfGetPedNearbyPeds {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut size_and_peds_ = self.memory_buffers.borrow_mut().get_mut_ptr(size_and_peds_) as *mut c_void;
let mut ignore_ = ignore_;
        let success = sdk::natives::get_ped_nearby_peds(
            &mut native_return,
size_and_peds_,
ped_,
ignore_,
        );
        let native_return = native_return;
let size_and_peds_ = 0;
        
        ResultOfGetPedNearbyPeds {
            success,
            ret: native_return,
            size_and_peds_
        }
    }
}

    fn native_is_ped_reloading(&self, ped_: u32) -> ResultOfIsPedReloading {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_reloading(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedReloading {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_trigger_ped_scenario_panicexittoflee(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfTriggerPedScenarioPanicexittoflee {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::trigger_ped_scenario_panicexittoflee(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOfTriggerPedScenarioPanicexittoflee {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_synchronized_scene_running(&self, scene_id_: i32) -> ResultOfIsSynchronizedSceneRunning {
    unsafe {
        let mut native_return = Default::default();
let mut scene_id_ = scene_id_;
        let success = sdk::natives::is_synchronized_scene_running(
            &mut native_return,
scene_id_,
        );
        let native_return = native_return;
        
        ResultOfIsSynchronizedSceneRunning {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_weapon_movement_clipset(&self, ped_: u32,
clip_set_: Option<String>) -> ResultOfSetPedWeaponMovementClipset {
    unsafe {
        let mut ped_ = ped_;
let mut clip_set_ = sdk_helpers::create_c_string_ptr(clip_set_);
        let success = sdk::natives::set_ped_weapon_movement_clipset(
            ped_,
clip_set_.as_ref().unwrap(),
        );
        
        
        ResultOfSetPedWeaponMovementClipset {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_component_variation(&self, ped_: u32,
component_id_: i32,
drawable_id_: i32,
texture_id_: i32,
palette_id_: i32) -> ResultOfSetPedComponentVariation {
    unsafe {
        let mut ped_ = ped_;
let mut component_id_ = component_id_;
let mut drawable_id_ = drawable_id_;
let mut texture_id_ = texture_id_;
let mut palette_id_ = palette_id_;
        let success = sdk::natives::set_ped_component_variation(
            ped_,
component_id_,
drawable_id_,
texture_id_,
palette_id_,
        );
        
        
        ResultOfSetPedComponentVariation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ragdoll_blocking_flags(&self, ped_: u32,
blocking_flag_: i32) -> ResultOfSetRagdollBlockingFlags {
    unsafe {
        let mut ped_ = ped_;
let mut blocking_flag_ = blocking_flag_;
        let success = sdk::natives::set_ragdoll_blocking_flags(
            ped_,
blocking_flag_,
        );
        
        
        ResultOfSetRagdollBlockingFlags {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_opening_door(&self, ped_: u32) -> ResultOfIsPedOpeningDoor {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_opening_door(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedOpeningDoor {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_helmet_prop_index(&self, ped_: u32,
prop_index_: i32,
p2_: bool) -> ResultOfSetPedHelmetPropIndex {
    unsafe {
        let mut ped_ = ped_;
let mut prop_index_ = prop_index_;
let mut p2_ = p2_;
        let success = sdk::natives::set_ped_helmet_prop_index(
            ped_,
prop_index_,
p2_,
        );
        
        
        ResultOfSetPedHelmetPropIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_synchronized_scene_to_entity(&self, scene_i_d_: i32,
entity_: u32,
bone_index_: i32) -> ResultOfAttachSynchronizedSceneToEntity {
    unsafe {
        let mut scene_i_d_ = scene_i_d_;
let mut entity_ = entity_;
let mut bone_index_ = bone_index_;
        let success = sdk::natives::attach_synchronized_scene_to_entity(
            scene_i_d_,
entity_,
bone_index_,
        );
        
        
        ResultOfAttachSynchronizedSceneToEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_corpse_ragdoll_friction(&self, ped_: u32,
p1_: f32) -> ResultOfSetCorpseRagdollFriction {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_corpse_ragdoll_friction(
            ped_,
p1_,
        );
        
        
        ResultOfSetCorpseRagdollFriction {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_head_blend_data(&self, ped_: u32,
head_blend_data_: shared::MemoryBufferId) -> ResultOfGetPedHeadBlendData {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut head_blend_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(head_blend_data_) as *mut c_void;
        let success = sdk::natives::get_ped_head_blend_data(
            &mut native_return,
head_blend_data_,
ped_,
        );
        let native_return = native_return;
let head_blend_data_ = 0;
        
        ResultOfGetPedHeadBlendData {
            success,
            ret: native_return,
            head_blend_data_
        }
    }
}

    fn native_get_number_of_ped_drawable_variations(&self, ped_: u32,
component_id_: i32) -> ResultOfGetNumberOfPedDrawableVariations {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut component_id_ = component_id_;
        let success = sdk::natives::get_number_of_ped_drawable_variations(
            &mut native_return,
ped_,
component_id_,
        );
        let native_return = native_return;
        
        ResultOfGetNumberOfPedDrawableVariations {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_sweat(&self, ped_: u32,
sweat_: f32) -> ResultOfSetPedSweat {
    unsafe {
        let mut ped_ = ped_;
let mut sweat_ = sweat_;
        let success = sdk::natives::set_ped_sweat(
            ped_,
sweat_,
        );
        
        
        ResultOfSetPedSweat {
            success,
            ret: (),
            
        }
    }
}

    fn native_spawnpoints_get_search_result(&self, random_int_: i32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfSpawnpointsGetSearchResult {
    unsafe {
        let mut random_int_ = random_int_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::spawnpoints_get_search_result(
            &mut x_,
&mut y_,
&mut z_,
random_int_,
        );
        let x_ = x_;
let y_ = y_;
let z_ = z_;
        
        ResultOfSpawnpointsGetSearchResult {
            success,
            ret: (),
            x_,
y_,
z_
        }
    }
}

    fn native_set_scenario_peds_spawn_in_sphere_area(&self, x_: f32,
y_: f32,
z_: f32,
range_: f32,
p4_: i32) -> ResultOfSetScenarioPedsSpawnInSphereArea {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut range_ = range_;
let mut p4_ = p4_;
        let success = sdk::natives::set_scenario_peds_spawn_in_sphere_area(
            x_,
y_,
z_,
range_,
p4_,
        );
        
        
        ResultOfSetScenarioPedsSpawnInSphereArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_steer_bias(&self, ped_: u32,
value_: f32) -> ResultOfSetPedSteerBias {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_steer_bias(
            ped_,
value_,
        );
        
        
        ResultOfSetPedSteerBias {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_action_mode_asset(&self, asset_: Option<String>) -> ResultOfRequestActionModeAsset {
    unsafe {
        let mut asset_ = sdk_helpers::create_c_string_ptr(asset_);
        let success = sdk::natives::request_action_mode_asset(
            asset_.as_ref().unwrap(),
        );
        
        
        ResultOfRequestActionModeAsset {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_in_any_heli(&self, ped_: u32) -> ResultOfIsPedInAnyHeli {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_any_heli(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedInAnyHeli {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_strafe_clipset(&self, ped_: u32,
clip_set_: Option<String>) -> ResultOfSetPedStrafeClipset {
    unsafe {
        let mut ped_ = ped_;
let mut clip_set_ = sdk_helpers::create_c_string_ptr(clip_set_);
        let success = sdk::natives::set_ped_strafe_clipset(
            ped_,
clip_set_.as_ref().unwrap(),
        );
        
        
        ResultOfSetPedStrafeClipset {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_stealth_mode_asset(&self, asset_: Option<String>) -> ResultOfRequestStealthModeAsset {
    unsafe {
        let mut asset_ = sdk_helpers::create_c_string_ptr(asset_);
        let success = sdk::natives::request_stealth_mode_asset(
            asset_.as_ref().unwrap(),
        );
        
        
        ResultOfRequestStealthModeAsset {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_dies_in_vehicle(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedDiesInVehicle {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_dies_in_vehicle(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedDiesInVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_as_group_leader(&self, ped_: u32,
group_id_: i32) -> ResultOfSetPedAsGroupLeader {
    unsafe {
        let mut ped_ = ped_;
let mut group_id_ = group_id_;
        let success = sdk::natives::set_ped_as_group_leader(
            ped_,
group_id_,
        );
        
        
        ResultOfSetPedAsGroupLeader {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_running_mobile_phone_task(&self, ped_: u32) -> ResultOfIsPedRunningMobilePhoneTask {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_running_mobile_phone_task(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedRunningMobilePhoneTask {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_preload_prop_data(&self, ped_: u32,
component_id_: i32,
drawable_id_: i32,
texture_id_: i32) -> ResultOfSetPedPreloadPropData {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut component_id_ = component_id_;
let mut drawable_id_ = drawable_id_;
let mut texture_id_ = texture_id_;
        let success = sdk::natives::set_ped_preload_prop_data(
            &mut native_return,
ped_,
component_id_,
drawable_id_,
texture_id_,
        );
        let native_return = native_return;
        
        ResultOfSetPedPreloadPropData {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_ao_blob_rendering(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedAoBlobRendering {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_ao_blob_rendering(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedAoBlobRendering {
            success,
            ret: (),
            
        }
    }
}

    fn native_mark_ped_decorations_as_cloned_from_local_player(&self, ped_: u32,
p1_: bool) -> ResultOfMarkPedDecorationsAsClonedFromLocalPlayer {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::mark_ped_decorations_as_cloned_from_local_player(
            ped_,
p1_,
        );
        
        
        ResultOfMarkPedDecorationsAsClonedFromLocalPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_ped_vehicle_visibility_tracking(&self, ped_: u32,
p1_: bool) -> ResultOfRequestPedVehicleVisibilityTracking {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::request_ped_vehicle_visibility_tracking(
            ped_,
p1_,
        );
        
        
        ResultOfRequestPedVehicleVisibilityTracking {
            success,
            ret: (),
            
        }
    }
}

    fn native_explode_ped_head(&self, ped_: u32,
weapon_hash_: u32) -> ResultOfExplodePedHead {
    unsafe {
        let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::explode_ped_head(
            ped_,
weapon_hash_,
        );
        
        
        ResultOfExplodePedHead {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_visual_field_min_angle(&self, ped_: u32,
value_: f32) -> ResultOfSetPedVisualFieldMinAngle {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_visual_field_min_angle(
            ped_,
value_,
        );
        
        
        ResultOfSetPedVisualFieldMinAngle {
            success,
            ret: (),
            
        }
    }
}

    fn native_spawnpoints_start_search(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
interior_flags_: i32,
scale_: f32,
duration_: i32) -> ResultOfSpawnpointsStartSearch {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut interior_flags_ = interior_flags_;
let mut scale_ = scale_;
let mut duration_ = duration_;
        let success = sdk::natives::spawnpoints_start_search(
            p0_,
p1_,
p2_,
p3_,
p4_,
interior_flags_,
scale_,
duration_,
        );
        
        
        ResultOfSpawnpointsStartSearch {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_ped_shuffle_to_or_from_extra_seat(&self, ped_: u32,
p1_: i32) -> ResultOfCanPedShuffleToOrFromExtraSeat {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::can_ped_shuffle_to_or_from_extra_seat(
            &mut native_return,
&mut p1_,
ped_,
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOfCanPedShuffleToOrFromExtraSeat {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_clear_ped_non_creation_area(&self, ) -> ResultOfClearPedNonCreationArea {
    unsafe {
        
        let success = sdk::natives::clear_ped_non_creation_area(
            
        );
        
        
        ResultOfClearPedNonCreationArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_in_any_boat(&self, ped_: u32) -> ResultOfIsPedInAnyBoat {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_any_boat(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedInAnyBoat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_teleport_to_group_leader(&self, ped_handle_: u32,
group_handle_: i32,
toggle_: bool) -> ResultOfSetPedCanTeleportToGroupLeader {
    unsafe {
        let mut ped_handle_ = ped_handle_;
let mut group_handle_ = group_handle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_teleport_to_group_leader(
            ped_handle_,
group_handle_,
toggle_,
        );
        
        
        ResultOfSetPedCanTeleportToGroupLeader {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cop_perception_overrides(&self, seeing_range_: f32,
seeing_range_peripheral_: f32,
hearing_range_: f32,
visual_field_min_azimuth_angle_: f32,
visual_field_max_azimuth_angle_: f32,
field_of_gaze_max_angle_: f32,
p6_: f32) -> ResultOfSetCopPerceptionOverrides {
    unsafe {
        let mut seeing_range_ = seeing_range_;
let mut seeing_range_peripheral_ = seeing_range_peripheral_;
let mut hearing_range_ = hearing_range_;
let mut visual_field_min_azimuth_angle_ = visual_field_min_azimuth_angle_;
let mut visual_field_max_azimuth_angle_ = visual_field_max_azimuth_angle_;
let mut field_of_gaze_max_angle_ = field_of_gaze_max_angle_;
let mut p6_ = p6_;
        let success = sdk::natives::set_cop_perception_overrides(
            seeing_range_,
seeing_range_peripheral_,
hearing_range_,
visual_field_min_azimuth_angle_,
visual_field_max_azimuth_angle_,
field_of_gaze_max_angle_,
p6_,
        );
        
        
        ResultOfSetCopPerceptionOverrides {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_target(&self, ped_: u32,
target_: u32) -> ResultOfRegisterTarget {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
        let success = sdk::natives::register_target(
            ped_,
target_,
        );
        
        
        ResultOfRegisterTarget {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_treat_as_ambient_ped_for_driver_lockon(&self, ped_: u32,
p1_: bool) -> ResultOfSetTreatAsAmbientPedForDriverLockon {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_treat_as_ambient_ped_for_driver_lockon(
            ped_,
p1_,
        );
        
        
        ResultOfSetTreatAsAmbientPedForDriverLockon {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_scenario_blocking_area(&self, p0_: i32,
p1_: bool) -> ResultOfRemoveScenarioBlockingArea {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::remove_scenario_blocking_area(
            p0_,
p1_,
        );
        
        
        ResultOfRemoveScenarioBlockingArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_target_from_combat_ped(&self, ped_: u32,
p1_: i32) -> ResultOfGetPedTargetFromCombatPed {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::get_ped_target_from_combat_ped(
            &mut native_return,
ped_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfGetPedTargetFromCombatPed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_apply_ped_blood_by_zone(&self, ped_: u32,
p1_: i32,
p2_: f32,
p3_: f32,
p4_: Option<String>) -> ResultOfApplyPedBloodByZone {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = sdk_helpers::create_c_string_ptr(p4_);
        let success = sdk::natives::apply_ped_blood_by_zone(
            ped_,
p1_,
p2_,
p3_,
p4_.as_ref().unwrap(),
        );
        
        
        ResultOfApplyPedBloodByZone {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_dead_or_dying(&self, ped_: u32,
p1_: bool) -> ResultOfIsPedDeadOrDying {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::is_ped_dead_or_dying(
            &mut native_return,
ped_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfIsPedDeadOrDying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_to_load_cover(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedToLoadCover {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_to_load_cover(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedToLoadCover {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_parachute_tint_index(&self, ped_: u32,
tint_index_: i32) -> ResultOfSetPedParachuteTintIndex {
    unsafe {
        let mut ped_ = ped_;
let mut tint_index_ = tint_index_;
        let success = sdk::natives::set_ped_parachute_tint_index(
            ped_,
tint_index_,
        );
        
        
        ResultOfSetPedParachuteTintIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_count_peds_in_combat_with_target_within_radius(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOfCountPedsInCombatWithTargetWithinRadius {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::count_peds_in_combat_with_target_within_radius(
            &mut native_return,
ped_,
x_,
y_,
z_,
radius_,
        );
        let native_return = native_return;
        
        ResultOfCountPedsInCombatWithTargetWithinRadius {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_is_ignored_by_auto_open_doors(&self, ped_: u32,
p1_: bool) -> ResultOfSetPedIsIgnoredByAutoOpenDoors {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_is_ignored_by_auto_open_doors(
            ped_,
p1_,
        );
        
        
        ResultOfSetPedIsIgnoredByAutoOpenDoors {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_hearing_range(&self, ped_: u32,
value_: f32) -> ResultOfSetPedHearingRange {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_hearing_range(
            ped_,
value_,
        );
        
        
        ResultOfSetPedHearingRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_shooting(&self, ped_: u32) -> ResultOfIsPedShooting {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_shooting(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedShooting {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_capsule(&self, ped_: u32,
value_: f32) -> ResultOfSetPedCapsule {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_capsule(
            ped_,
value_,
        );
        
        
        ResultOfSetPedCapsule {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_time_ped_damaged_by_weapon(&self, ped_: u32,
weapon_hash_: u32) -> ResultOfGetTimePedDamagedByWeapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::get_time_ped_damaged_by_weapon(
            &mut native_return,
ped_,
weapon_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetTimePedDamagedByWeapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_scuba_gear_variation(&self, ped_: u32) -> ResultOfSetPedScubaGearVariation {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_scuba_gear_variation(
            ped_,
        );
        
        
        ResultOfSetPedScubaGearVariation {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_switching_weapon(&self, ped_: u32) -> ResultOfIsPedSwitchingWeapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_switching_weapon(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedSwitchingWeapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_accuracy(&self, ped_: u32) -> ResultOfGetPedAccuracy {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_accuracy(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedAccuracy {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_synchronized_scene_hold_last_frame(&self, scene_i_d_: i32,
toggle_: bool) -> ResultOfSetSynchronizedSceneHoldLastFrame {
    unsafe {
        let mut scene_i_d_ = scene_i_d_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_synchronized_scene_hold_last_frame(
            scene_i_d_,
toggle_,
        );
        
        
        ResultOfSetSynchronizedSceneHoldLastFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_apply_ped_damage_decal(&self, ped_: u32,
damage_zone_: i32,
x_offset_: f32,
y_offset_: f32,
heading_: f32,
scale_: f32,
alpha_: f32,
unk_variation_: i32,
fade_in_: bool,
decal_name_: Option<String>) -> ResultOfApplyPedDamageDecal {
    unsafe {
        let mut ped_ = ped_;
let mut damage_zone_ = damage_zone_;
let mut x_offset_ = x_offset_;
let mut y_offset_ = y_offset_;
let mut heading_ = heading_;
let mut scale_ = scale_;
let mut alpha_ = alpha_;
let mut unk_variation_ = unk_variation_;
let mut fade_in_ = fade_in_;
let mut decal_name_ = sdk_helpers::create_c_string_ptr(decal_name_);
        let success = sdk::natives::apply_ped_damage_decal(
            ped_,
damage_zone_,
x_offset_,
y_offset_,
heading_,
scale_,
alpha_,
unk_variation_,
fade_in_,
decal_name_.as_ref().unwrap(),
        );
        
        
        ResultOfApplyPedDamageDecal {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_aiming_from_cover(&self, ped_: u32) -> ResultOfIsPedAimingFromCover {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_aiming_from_cover(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedAimingFromCover {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_preload_variation_data(&self, ped_: u32,
slot_: i32,
drawable_id_: i32,
texture_id_: i32) -> ResultOfSetPedPreloadVariationData {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut slot_ = slot_;
let mut drawable_id_ = drawable_id_;
let mut texture_id_ = texture_id_;
        let success = sdk::natives::set_ped_preload_variation_data(
            &mut native_return,
ped_,
slot_,
drawable_id_,
texture_id_,
        );
        let native_return = native_return;
        
        ResultOfSetPedPreloadVariationData {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_ped_visible_damage(&self, ped_: u32) -> ResultOfResetPedVisibleDamage {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::reset_ped_visible_damage(
            ped_,
        );
        
        
        ResultOfResetPedVisibleDamage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_visual_field_center_angle(&self, ped_: u32,
angle_: f32) -> ResultOfSetPedVisualFieldCenterAngle {
    unsafe {
        let mut ped_ = ped_;
let mut angle_ = angle_;
        let success = sdk::natives::set_ped_visual_field_center_angle(
            ped_,
angle_,
        );
        
        
        ResultOfSetPedVisualFieldCenterAngle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_allow_vehicles_override(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedAllowVehiclesOverride {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_allow_vehicles_override(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedAllowVehiclesOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_defensive_area_position(&self, ped_: u32,
p1_: bool) -> ResultOfGetPedDefensiveAreaPosition {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::get_ped_defensive_area_position(
            native_return.pin_mut(),
ped_,
p1_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetPedDefensiveAreaPosition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_combat_range(&self, ped_: u32,
combat_range_: i32) -> ResultOfSetPedCombatRange {
    unsafe {
        let mut ped_ = ped_;
let mut combat_range_ = combat_range_;
        let success = sdk::natives::set_ped_combat_range(
            ped_,
combat_range_,
        );
        
        
        ResultOfSetPedCombatRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_spawnpoints_is_search_active(&self, ) -> ResultOfSpawnpointsIsSearchActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::spawnpoints_is_search_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfSpawnpointsIsSearchActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_never_leaves_group(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedNeverLeavesGroup {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_never_leaves_group(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedNeverLeavesGroup {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_lipstick_tint_for_creator(&self, color_id_: i32) -> ResultOfIsPedLipstickTintForCreator {
    unsafe {
        let mut native_return = Default::default();
let mut color_id_ = color_id_;
        let success = sdk::natives::is_ped_lipstick_tint_for_creator(
            &mut native_return,
color_id_,
        );
        let native_return = native_return;
        
        ResultOfIsPedLipstickTintForCreator {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_create_random_ped(&self, p0_: bool) -> ResultOfCanCreateRandomPed {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::can_create_random_ped(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfCanCreateRandomPed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_will_only_attack_wanted_player(&self, p0_: i32,
p1_: i32) -> ResultOfSetPedWillOnlyAttackWantedPlayer {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_will_only_attack_wanted_player(
            p0_,
p1_,
        );
        
        
        ResultOfSetPedWillOnlyAttackWantedPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_bone_index(&self, ped_: u32,
bone_id_: i32) -> ResultOfGetPedBoneIndex {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut bone_id_ = bone_id_;
        let success = sdk::natives::get_ped_bone_index(
            &mut native_return,
ped_,
bone_id_,
        );
        let native_return = native_return;
        
        ResultOfGetPedBoneIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_money(&self, ped_: u32) -> ResultOfGetPedMoney {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_money(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedMoney {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_helmet_visor_prop_indices(&self, ped_: u32,
p1_: bool,
p2_: i32,
p3_: i32) -> ResultOfSetPedHelmetVisorPropIndices {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_ped_helmet_visor_prop_indices(
            ped_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfSetPedHelmetVisorPropIndices {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_group_separation_range(&self, group_handle_: i32,
separation_range_: f32) -> ResultOfSetGroupSeparationRange {
    unsafe {
        let mut group_handle_ = group_handle_;
let mut separation_range_ = separation_range_;
        let success = sdk::natives::set_group_separation_range(
            group_handle_,
separation_range_,
        );
        
        
        ResultOfSetGroupSeparationRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_landing(&self, p0_: i32) -> ResultOfIsPedLanding {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::is_ped_landing(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfIsPedLanding {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_defensive_area_direction(&self, ped_: u32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: bool) -> ResultOfSetPedDefensiveAreaDirection {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::set_ped_defensive_area_direction(
            ped_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfSetPedDefensiveAreaDirection {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_evasive_diving(&self, ped_: u32,
evading_entity_: u32) -> ResultOfIsPedEvasiveDiving {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut evading_entity_ = evading_entity_;
        let success = sdk::natives::is_ped_evasive_diving(
            &mut native_return,
&mut evading_entity_,
ped_,
        );
        let native_return = native_return;
let evading_entity_ = evading_entity_;
        
        ResultOfIsPedEvasiveDiving {
            success,
            ret: native_return,
            evading_entity_
        }
    }
}

    fn native_create_nm_message(&self, start_immediately_: bool,
message_id_: i32) -> ResultOfCreateNmMessage {
    unsafe {
        let mut start_immediately_ = start_immediately_;
let mut message_id_ = message_id_;
        let success = sdk::natives::create_nm_message(
            start_immediately_,
message_id_,
        );
        
        
        ResultOfCreateNmMessage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_should_ignore_scenario_exit_collision_checks(&self, ped_: u32,
p1_: bool) -> ResultOfSetPedShouldIgnoreScenarioExitCollisionChecks {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_should_ignore_scenario_exit_collision_checks(
            ped_,
p1_,
        );
        
        
        ResultOfSetPedShouldIgnoreScenarioExitCollisionChecks {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_relationship_group_default_hash(&self, ped_: u32) -> ResultOfGetPedRelationshipGroupDefaultHash {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_relationship_group_default_hash(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedRelationshipGroupDefaultHash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_be_targeted_without_los(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedCanBeTargetedWithoutLos {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_be_targeted_without_los(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedCanBeTargetedWithoutLos {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_max_move_blend_ratio(&self, ped_: u32,
value_: f32) -> ResultOfSetPedMaxMoveBlendRatio {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_max_move_blend_ratio(
            ped_,
value_,
        );
        
        
        ResultOfSetPedMaxMoveBlendRatio {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_jumping_out_of_vehicle(&self, ped_: u32) -> ResultOfIsPedJumpingOutOfVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_jumping_out_of_vehicle(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedJumpingOutOfVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_max_time_in_water(&self, ped_: u32,
value_: f32) -> ResultOfSetPedMaxTimeInWater {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_max_time_in_water(
            ped_,
value_,
        );
        
        
        ResultOfSetPedMaxTimeInWater {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_create_random_cops_on_scenarios(&self, toggle_: bool) -> ResultOfSetCreateRandomCopsOnScenarios {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_create_random_cops_on_scenarios(
            toggle_,
        );
        
        
        ResultOfSetCreateRandomCopsOnScenarios {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_pedheadshot(&self, ped_: u32) -> ResultOfRegisterPedheadshot {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::register_pedheadshot(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfRegisterPedheadshot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_wetness_height(&self, ped_: u32,
height_: f32) -> ResultOfSetPedWetnessHeight {
    unsafe {
        let mut ped_ = ped_;
let mut height_ = height_;
        let success = sdk::natives::set_ped_wetness_height(
            ped_,
height_,
        );
        
        
        ResultOfSetPedWetnessHeight {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_trying_to_enter_a_locked_vehicle(&self, ped_: u32) -> ResultOfIsPedTryingToEnterAlockedVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_trying_to_enter_a_locked_vehicle(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedTryingToEnterAlockedVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_helmet_stored_hat_prop_index(&self, ped_: u32) -> ResultOfGetPedHelmetStoredHatPropIndex {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_helmet_stored_hat_prop_index(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedHelmetStoredHatPropIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_doing_a_beast_jump(&self, p0_: i32) -> ResultOfIsPedDoingAbeastJump {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::is_ped_doing_a_beast_jump(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfIsPedDoingAbeastJump {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_knock_ped_off_vehicle(&self, ped_: u32) -> ResultOfKnockPedOffVehicle {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::knock_ped_off_vehicle(
            ped_,
        );
        
        
        ResultOfKnockPedOffVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_default_component_variation(&self, ped_: u32) -> ResultOfSetPedDefaultComponentVariation {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_default_component_variation(
            ped_,
        );
        
        
        ResultOfSetPedDefaultComponentVariation {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_on_mount(&self, ped_: u32) -> ResultOfIsPedOnMount {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_on_mount(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedOnMount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_finalize_head_blend(&self, ped_: u32) -> ResultOfFinalizeHeadBlend {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::finalize_head_blend(
            ped_,
        );
        
        
        ResultOfFinalizeHeadBlend {
            success,
            ret: (),
            
        }
    }
}

    fn native_ped_has_sexiness_flag_set(&self, ped_: u32,
sexiness_flag_: i32) -> ResultOfPedHasSexinessFlagSet {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut sexiness_flag_ = sexiness_flag_;
        let success = sdk::natives::ped_has_sexiness_flag_set(
            &mut native_return,
ped_,
sexiness_flag_,
        );
        let native_return = native_return;
        
        ResultOfPedHasSexinessFlagSet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_apply_ped_damage_pack(&self, ped_: u32,
damage_pack_: Option<String>,
damage_: f32,
mult_: f32) -> ResultOfApplyPedDamagePack {
    unsafe {
        let mut ped_ = ped_;
let mut damage_pack_ = sdk_helpers::create_c_string_ptr(damage_pack_);
let mut damage_ = damage_;
let mut mult_ = mult_;
        let success = sdk::natives::apply_ped_damage_pack(
            ped_,
damage_pack_.as_ref().unwrap(),
damage_,
mult_,
        );
        
        
        ResultOfApplyPedDamagePack {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_ai_melee_weapon_damage_modifier(&self, ) -> ResultOfResetAiMeleeWeaponDamageModifier {
    unsafe {
        
        let success = sdk::natives::reset_ai_melee_weapon_damage_modifier(
            
        );
        
        
        ResultOfResetAiMeleeWeaponDamageModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_steers_around_peds(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedSteersAroundPeds {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_steers_around_peds(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedSteersAroundPeds {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_max_health(&self, ped_: u32) -> ResultOfGetPedMaxHealth {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_max_health(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedMaxHealth {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_instantly_fill_ped_population(&self, ) -> ResultOfInstantlyFillPedPopulation {
    unsafe {
        
        let success = sdk::natives::instantly_fill_ped_population(
            
        );
        
        
        ResultOfInstantlyFillPedPopulation {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_ragdoll(&self, ped_: u32) -> ResultOfIsPedRagdoll {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_ragdoll(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedRagdoll {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_hair_tint_color(&self, hair_color_index_: i32,
out_r_: i32,
out_g_: i32,
out_b_: i32) -> ResultOfGetPedHairTintColor {
    unsafe {
        let mut hair_color_index_ = hair_color_index_;
let mut out_r_ = out_r_;
let mut out_g_ = out_g_;
let mut out_b_ = out_b_;
        let success = sdk::natives::get_ped_hair_tint_color(
            &mut out_r_,
&mut out_g_,
&mut out_b_,
hair_color_index_,
        );
        let out_r_ = out_r_;
let out_g_ = out_g_;
let out_b_ = out_b_;
        
        ResultOfGetPedHairTintColor {
            success,
            ret: (),
            out_r_,
out_g_,
out_b_
        }
    }
}

    fn native_is_ped_in_combat(&self, ped_: u32,
target_: u32) -> ResultOfIsPedInCombat {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut target_ = target_;
        let success = sdk::natives::is_ped_in_combat(
            &mut native_return,
ped_,
target_,
        );
        let native_return = native_return;
        
        ResultOfIsPedInCombat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_head_overlay(&self, ped_: u32,
overlay_i_d_: i32,
index_: i32,
opacity_: f32) -> ResultOfSetPedHeadOverlay {
    unsafe {
        let mut ped_ = ped_;
let mut overlay_i_d_ = overlay_i_d_;
let mut index_ = index_;
let mut opacity_ = opacity_;
        let success = sdk::natives::set_ped_head_overlay(
            ped_,
overlay_i_d_,
index_,
opacity_,
        );
        
        
        ResultOfSetPedHeadOverlay {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_head_overlay_tint(&self, ped_: u32,
overlay_i_d_: i32,
color_type_: i32,
color_i_d_: i32,
second_color_i_d_: i32) -> ResultOfSetPedHeadOverlayTint {
    unsafe {
        let mut ped_ = ped_;
let mut overlay_i_d_ = overlay_i_d_;
let mut color_type_ = color_type_;
let mut color_i_d_ = color_i_d_;
let mut second_color_i_d_ = second_color_i_d_;
        let success = sdk::natives::set_ped_head_overlay_tint(
            ped_,
overlay_i_d_,
color_type_,
color_i_d_,
second_color_i_d_,
        );
        
        
        ResultOfSetPedHeadOverlayTint {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_allow_minor_reactions_as_mission_ped(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedAllowMinorReactionsAsMissionPed {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_allow_minor_reactions_as_mission_ped(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedAllowMinorReactionsAsMissionPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_jacking(&self, ped_: u32) -> ResultOfIsPedJacking {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_jacking(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedJacking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_ped_drive_by_clipset_override(&self, ped_: u32) -> ResultOfClearPedDriveByClipsetOverride {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_drive_by_clipset_override(
            ped_,
        );
        
        
        ResultOfClearPedDriveByClipsetOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_anim_initial_offset_rotation(&self, anim_dict_: Option<String>,
anim_name_: Option<String>,
x_: f32,
y_: f32,
z_: f32,
x_rot_: f32,
y_rot_: f32,
z_rot_: f32,
p8_: f32,
p9_: i32) -> ResultOfGetAnimInitialOffsetRotation {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut x_rot_ = x_rot_;
let mut y_rot_ = y_rot_;
let mut z_rot_ = z_rot_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::get_anim_initial_offset_rotation(
            native_return.pin_mut(),
anim_dict_.as_ref().unwrap(),
anim_name_.as_ref().unwrap(),
x_,
y_,
z_,
x_rot_,
y_rot_,
z_rot_,
p8_,
p9_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetAnimInitialOffsetRotation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_tracked(&self, ped_: u32) -> ResultOfIsPedTracked {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_tracked(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedTracked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_hair_tint(&self, ped_: u32,
color_i_d_: i32,
highlight_color_i_d_: i32) -> ResultOfSetPedHairTint {
    unsafe {
        let mut ped_ = ped_;
let mut color_i_d_ = color_i_d_;
let mut highlight_color_i_d_ = highlight_color_i_d_;
        let success = sdk::natives::set_ped_hair_tint(
            ped_,
color_i_d_,
highlight_color_i_d_,
        );
        
        
        ResultOfSetPedHairTint {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_combat_movement(&self, ped_: u32,
combat_movement_: i32) -> ResultOfSetPedCombatMovement {
    unsafe {
        let mut ped_ = ped_;
let mut combat_movement_ = combat_movement_;
        let success = sdk::natives::set_ped_combat_movement(
            ped_,
combat_movement_,
        );
        
        
        ResultOfSetPedCombatMovement {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_in_melee_combat(&self, ped_: u32) -> ResultOfIsPedInMeleeCombat {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_melee_combat(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedInMeleeCombat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_emissive_scale(&self, ped_: u32,
intensity_: f32) -> ResultOfSetPedEmissiveScale {
    unsafe {
        let mut ped_ = ped_;
let mut intensity_ = intensity_;
        let success = sdk::natives::set_ped_emissive_scale(
            ped_,
intensity_,
        );
        
        
        ResultOfSetPedEmissiveScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_defensive_area_attached_to_ped(&self, ped_: u32,
attach_ped_: u32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: f32,
p8_: f32,
p9_: bool,
p10_: bool) -> ResultOfSetPedDefensiveAreaAttachedToPed {
    unsafe {
        let mut ped_ = ped_;
let mut attach_ped_ = attach_ped_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
        let success = sdk::natives::set_ped_defensive_area_attached_to_ped(
            ped_,
attach_ped_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
        );
        
        
        ResultOfSetPedDefensiveAreaAttachedToPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_bounds_orientation(&self, ped_: u32,
p1_: f32,
p2_: f32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfSetPedBoundsOrientation {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_ped_bounds_orientation(
            ped_,
p1_,
p2_,
x_,
y_,
z_,
        );
        
        
        ResultOfSetPedBoundsOrientation {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_being_stunned(&self, ped_: u32,
p1_: i32) -> ResultOfIsPedBeingStunned {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::is_ped_being_stunned(
            &mut native_return,
ped_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfIsPedBeingStunned {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_scripted_conversion_coord_this_frame(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfSetScriptedConversionCoordThisFrame {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_scripted_conversion_coord_this_frame(
            x_,
y_,
z_,
        );
        
        
        ResultOfSetScriptedConversionCoordThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_head_blend_eye_color(&self, ped_: u32,
index_: i32) -> ResultOfSetHeadBlendEyeColor {
    unsafe {
        let mut ped_ = ped_;
let mut index_ = index_;
        let success = sdk::natives::set_head_blend_eye_color(
            ped_,
index_,
        );
        
        
        ResultOfSetHeadBlendEyeColor {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_tracked_ped_pixelcount(&self, ped_: u32) -> ResultOfGetTrackedPedPixelcount {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_tracked_ped_pixelcount(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetTrackedPedPixelcount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_as_group_member(&self, group_i_d_: i32,
member_number_: i32) -> ResultOfGetPedAsGroupMember {
    unsafe {
        let mut native_return = Default::default();
let mut group_i_d_ = group_i_d_;
let mut member_number_ = member_number_;
        let success = sdk::natives::get_ped_as_group_member(
            &mut native_return,
group_i_d_,
member_number_,
        );
        let native_return = native_return;
        
        ResultOfGetPedAsGroupMember {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_knock_ped_off_vehicle(&self, ped_: u32) -> ResultOfCanKnockPedOffVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::can_knock_ped_off_vehicle(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfCanKnockPedOffVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_ped_damage_decal_by_zone(&self, ped_: u32,
p1_: i32,
p2_: Option<String>) -> ResultOfClearPedDamageDecalByZone {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
        let success = sdk::natives::clear_ped_damage_decal_by_zone(
            ped_,
p1_,
p2_.as_ref().unwrap(),
        );
        
        
        ResultOfClearPedDamageDecalByZone {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_highly_perceptive(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedHighlyPerceptive {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_highly_perceptive(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedHighlyPerceptive {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_combat_float(&self, ped_: u32,
p1_: i32) -> ResultOfGetCombatFloat {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::get_combat_float(
            &mut native_return,
ped_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfGetCombatFloat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_in_vehicle_context(&self, ped_: u32,
context_: u32) -> ResultOfSetPedInVehicleContext {
    unsafe {
        let mut ped_ = ped_;
let mut context_ = context_;
        let success = sdk::natives::set_ped_in_vehicle_context(
            ped_,
context_,
        );
        
        
        ResultOfSetPedInVehicleContext {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_stopped(&self, ped_: u32) -> ResultOfIsPedStopped {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_stopped(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedStopped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_climbing(&self, ped_: u32) -> ResultOfIsPedClimbing {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_climbing(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedClimbing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_count_peds_in_combat_with_target(&self, ped_: u32) -> ResultOfCountPedsInCombatWithTarget {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::count_peds_in_combat_with_target(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfCountPedsInCombatWithTarget {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_jack_target(&self, ped_: u32) -> ResultOfGetJackTarget {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_jack_target(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetJackTarget {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_give_ped_helmet(&self, ped_: u32,
cannot_remove_: bool,
helmet_flag_: i32,
texture_index_: i32) -> ResultOfGivePedHelmet {
    unsafe {
        let mut ped_ = ped_;
let mut cannot_remove_ = cannot_remove_;
let mut helmet_flag_ = helmet_flag_;
let mut texture_index_ = texture_index_;
        let success = sdk::natives::give_ped_helmet(
            ped_,
cannot_remove_,
helmet_flag_,
texture_index_,
        );
        
        
        ResultOfGivePedHelmet {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_diving(&self, ped_: u32) -> ResultOfIsPedDiving {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_diving(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedDiving {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_helmet(&self, ped_: u32,
can_wear_helmet_: bool) -> ResultOfSetPedHelmet {
    unsafe {
        let mut ped_ = ped_;
let mut can_wear_helmet_ = can_wear_helmet_;
        let success = sdk::natives::set_ped_helmet(
            ped_,
can_wear_helmet_,
        );
        
        
        ResultOfSetPedHelmet {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_relationship_group_affects_wanted_level(&self, group_: u32,
p1_: bool) -> ResultOfSetRelationshipGroupAffectsWantedLevel {
    unsafe {
        let mut group_ = group_;
let mut p1_ = p1_;
        let success = sdk::natives::set_relationship_group_affects_wanted_level(
            group_,
p1_,
        );
        
        
        ResultOfSetRelationshipGroupAffectsWantedLevel {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_ped_decoration_from_hashes_in_corona(&self, ped_: u32,
collection_: u32,
overlay_: u32) -> ResultOfAddPedDecorationFromHashesInCorona {
    unsafe {
        let mut ped_ = ped_;
let mut collection_ = collection_;
let mut overlay_ = overlay_;
        let success = sdk::natives::add_ped_decoration_from_hashes_in_corona(
            ped_,
collection_,
overlay_,
        );
        
        
        ResultOfAddPedDecorationFromHashesInCorona {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_facial_clipset(&self, ped_: u32,
anim_dict_: Option<String>) -> ResultOfSetFacialClipset {
    unsafe {
        let mut ped_ = ped_;
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
        let success = sdk::natives::set_facial_clipset(
            ped_,
anim_dict_.as_ref().unwrap(),
        );
        
        
        ResultOfSetFacialClipset {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_dies_in_water(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedDiesInWater {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_dies_in_water(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedDiesInWater {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_blood_damage_by_zone(&self, ped_: u32,
p1_: i32) -> ResultOfClearPedBloodDamageByZone {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::clear_ped_blood_damage_by_zone(
            ped_,
p1_,
        );
        
        
        ResultOfClearPedBloodDamageByZone {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_increased_avoidance_radius(&self, ped_: u32) -> ResultOfSetPedIncreasedAvoidanceRadius {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_increased_avoidance_radius(
            ped_,
        );
        
        
        ResultOfSetPedIncreasedAvoidanceRadius {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_blocks_pathing_when_dead(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedBlocksPathingWhenDead {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_blocks_pathing_when_dead(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedBlocksPathingWhenDead {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_using_any_scenario(&self, ped_: u32) -> ResultOfIsPedUsingAnyScenario {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_using_any_scenario(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedUsingAnyScenario {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_in_group(&self, ped_: u32) -> ResultOfIsPedInGroup {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_group(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedInGroup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_scripted_anim_seat_offset(&self, ped_: u32,
p1_: f32) -> ResultOfSetScriptedAnimSeatOffset {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_scripted_anim_seat_offset(
            ped_,
p1_,
        );
        
        
        ResultOfSetScriptedAnimSeatOffset {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_hurt(&self, ped_: u32) -> ResultOfIsPedHurt {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_hurt(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedHurt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_suppress_ambient_ped_aggressive_cleanup_this_frame(&self, ) -> ResultOfSuppressAmbientPedAggressiveCleanupThisFrame {
    unsafe {
        
        let success = sdk::natives::suppress_ambient_ped_aggressive_cleanup_this_frame(
            
        );
        
        
        ResultOfSuppressAmbientPedAggressiveCleanupThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_release_ped_preload_variation_data(&self, ped_: u32) -> ResultOfReleasePedPreloadVariationData {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::release_ped_preload_variation_data(
            ped_,
        );
        
        
        ResultOfReleasePedPreloadVariationData {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_should_ignore_scenario_nav_checks(&self, p0_: i32,
p1_: bool) -> ResultOfSetPedShouldIgnoreScenarioNavChecks {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_should_ignore_scenario_nav_checks(
            p0_,
p1_,
        );
        
        
        ResultOfSetPedShouldIgnoreScenarioNavChecks {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_armour_to_ped(&self, ped_: u32,
amount_: i32) -> ResultOfAddArmourToPed {
    unsafe {
        let mut ped_ = ped_;
let mut amount_ = amount_;
        let success = sdk::natives::add_armour_to_ped(
            ped_,
amount_,
        );
        
        
        ResultOfAddArmourToPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_dies_when_injured(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedDiesWhenInjured {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_dies_when_injured(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedDiesWhenInjured {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_as_group_leader(&self, group_i_d_: i32) -> ResultOfGetPedAsGroupLeader {
    unsafe {
        let mut native_return = Default::default();
let mut group_i_d_ = group_i_d_;
        let success = sdk::natives::get_ped_as_group_leader(
            &mut native_return,
group_i_d_,
        );
        let native_return = native_return;
        
        ResultOfGetPedAsGroupLeader {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_headtracking_ped(&self, ped1_: u32,
ped2_: u32) -> ResultOfIsPedHeadtrackingPed {
    unsafe {
        let mut native_return = Default::default();
let mut ped1_ = ped1_;
let mut ped2_ = ped2_;
        let success = sdk::natives::is_ped_headtracking_ped(
            &mut native_return,
ped1_,
ped2_,
        );
        let native_return = native_return;
        
        ResultOfIsPedHeadtrackingPed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_release_pedheadshot_img_upload(&self, id_: i32) -> ResultOfReleasePedheadshotImgUpload {
    unsafe {
        let mut id_ = id_;
        let success = sdk::natives::release_pedheadshot_img_upload(
            id_,
        );
        
        
        ResultOfReleasePedheadshotImgUpload {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_relationship_between_groups(&self, relationship_: i32,
group1_: u32,
group2_: u32) -> ResultOfClearRelationshipBetweenGroups {
    unsafe {
        let mut relationship_ = relationship_;
let mut group1_ = group1_;
let mut group2_ = group2_;
        let success = sdk::natives::clear_relationship_between_groups(
            relationship_,
group1_,
group2_,
        );
        
        
        ResultOfClearRelationshipBetweenGroups {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_create_random_cops(&self, ) -> ResultOfCanCreateRandomCops {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::can_create_random_cops(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfCanCreateRandomCops {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_head_blend_num_heads(&self, type_: i32) -> ResultOfGetPedHeadBlendNumHeads {
    unsafe {
        let mut native_return = Default::default();
let mut type_ = type_;
        let success = sdk::natives::get_ped_head_blend_num_heads(
            &mut native_return,
type_,
        );
        let native_return = native_return;
        
        ResultOfGetPedHeadBlendNumHeads {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_ped_decoration_from_hashes(&self, ped_: u32,
collection_: u32,
overlay_: u32) -> ResultOfAddPedDecorationFromHashes {
    unsafe {
        let mut ped_ = ped_;
let mut collection_ = collection_;
let mut overlay_ = overlay_;
        let success = sdk::natives::add_ped_decoration_from_hashes(
            ped_,
collection_,
overlay_,
        );
        
        
        ResultOfAddPedDecorationFromHashes {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_number_of_ped_prop_drawable_variations(&self, ped_: u32,
prop_id_: i32) -> ResultOfGetNumberOfPedPropDrawableVariations {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut prop_id_ = prop_id_;
        let success = sdk::natives::get_number_of_ped_prop_drawable_variations(
            &mut native_return,
ped_,
prop_id_,
        );
        let native_return = native_return;
        
        ResultOfGetNumberOfPedPropDrawableVariations {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_in_any_plane(&self, ped_: u32) -> ResultOfIsPedInAnyPlane {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_any_plane(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedInAnyPlane {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_ped_heatscale_override(&self, ped_: u32) -> ResultOfDisablePedHeatscaleOverride {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::disable_ped_heatscale_override(
            ped_,
        );
        
        
        ResultOfDisablePedHeatscaleOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_blush_tint_for_barber(&self, color_i_d_: i32) -> ResultOfIsPedBlushTintForBarber {
    unsafe {
        let mut native_return = Default::default();
let mut color_i_d_ = color_i_d_;
        let success = sdk::natives::is_ped_blush_tint_for_barber(
            &mut native_return,
color_i_d_,
        );
        let native_return = native_return;
        
        ResultOfIsPedBlushTintForBarber {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_ped_is_using(&self, ped_: u32) -> ResultOfGetVehiclePedIsUsing {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_vehicle_ped_is_using(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetVehiclePedIsUsing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_in_cover(&self, ped_: u32,
except_use_weapon_: bool) -> ResultOfIsPedInCover {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut except_use_weapon_ = except_use_weapon_;
        let success = sdk::natives::is_ped_in_cover(
            &mut native_return,
ped_,
except_use_weapon_,
        );
        let native_return = native_return;
        
        ResultOfIsPedInCover {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_shoot_rate(&self, ped_: u32,
shoot_rate_: i32) -> ResultOfSetPedShootRate {
    unsafe {
        let mut ped_ = ped_;
let mut shoot_rate_ = shoot_rate_;
        let success = sdk::natives::set_ped_shoot_rate(
            ped_,
shoot_rate_,
        );
        
        
        ResultOfSetPedShootRate {
            success,
            ret: (),
            
        }
    }
}

    fn native_was_ped_knocked_out(&self, ped_: u32) -> ResultOfWasPedKnockedOut {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::was_ped_knocked_out(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfWasPedKnockedOut {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_synchronized_scene_looped(&self, scene_i_d_: i32) -> ResultOfIsSynchronizedSceneLooped {
    unsafe {
        let mut native_return = Default::default();
let mut scene_i_d_ = scene_i_d_;
        let success = sdk::natives::is_synchronized_scene_looped(
            &mut native_return,
scene_i_d_,
        );
        let native_return = native_return;
        
        ResultOfIsSynchronizedSceneLooped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_responding_to_event(&self, ped_: u32,
event_: i32) -> ResultOfIsPedRespondingToEvent {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut event_ = event_;
        let success = sdk::natives::is_ped_responding_to_event(
            &mut native_return,
ped_,
event_,
        );
        let native_return = native_return;
        
        ResultOfIsPedRespondingToEvent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_hide_ped_blood_damage_by_zone(&self, ped_: u32,
p1_: i32,
p2_: bool) -> ResultOfHidePedBloodDamageByZone {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::hide_ped_blood_damage_by_zone(
            ped_,
p1_,
p2_,
        );
        
        
        ResultOfHidePedBloodDamageByZone {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_synchronized_scene_at_map_object(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
object_: u32) -> ResultOfCreateSynchronizedSceneAtMapObject {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut object_ = object_;
        let success = sdk::natives::create_synchronized_scene_at_map_object(
            &mut native_return,
x_,
y_,
z_,
radius_,
object_,
        );
        let native_return = native_return;
        
        ResultOfCreateSynchronizedSceneAtMapObject {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_play_ambient_anims(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedCanPlayAmbientAnims {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_play_ambient_anims(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedCanPlayAmbientAnims {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_cover_point_for_ped(&self, ped_: u32) -> ResultOfClearCoverPointForPed {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_cover_point_for_ped(
            ped_,
        );
        
        
        ResultOfClearCoverPointForPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_be_targeted_when_injured(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedCanBeTargetedWhenInjured {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_be_targeted_when_injured(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedCanBeTargetedWhenInjured {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_group_formation_default_spacing(&self, group_handle_: i32) -> ResultOfResetGroupFormationDefaultSpacing {
    unsafe {
        let mut group_handle_ = group_handle_;
        let success = sdk::natives::reset_group_formation_default_spacing(
            group_handle_,
        );
        
        
        ResultOfResetGroupFormationDefaultSpacing {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_be_targetted(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedCanBeTargetted {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_be_targetted(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedCanBeTargetted {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_ped_head_blend_finished(&self, ped_: u32) -> ResultOfHasPedHeadBlendFinished {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::has_ped_head_blend_finished(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfHasPedHeadBlendFinished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_dies_in_water(&self, ped_: u32) -> ResultOfGetPedDiesInWater {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_dies_in_water(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedDiesInWater {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_ped_env_dirt(&self, ped_: u32) -> ResultOfClearPedEnvDirt {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_env_dirt(
            ped_,
        );
        
        
        ResultOfClearPedEnvDirt {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ai_melee_weapon_damage_modifier(&self, modifier_: f32) -> ResultOfSetAiMeleeWeaponDamageModifier {
    unsafe {
        let mut modifier_ = modifier_;
        let success = sdk::natives::set_ai_melee_weapon_damage_modifier(
            modifier_,
        );
        
        
        ResultOfSetAiMeleeWeaponDamageModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_torso_vehicle_ik(&self, ped_: u32,
p1_: bool) -> ResultOfSetPedCanTorsoVehicleIk {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_can_torso_vehicle_ik(
            ped_,
p1_,
        );
        
        
        ResultOfSetPedCanTorsoVehicleIk {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_ped_preload_variation_data_finished(&self, ped_: u32) -> ResultOfHasPedPreloadVariationDataFinished {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::has_ped_preload_variation_data_finished(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfHasPedPreloadVariationDataFinished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clone_ped_alt(&self, ped_: u32,
is_network_: bool,
b_script_host_ped_: bool,
copy_head_blend_flag_: bool,
p4_: bool) -> ResultOfClonePedAlt {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut is_network_ = is_network_;
let mut b_script_host_ped_ = b_script_host_ped_;
let mut copy_head_blend_flag_ = copy_head_blend_flag_;
let mut p4_ = p4_;
        let success = sdk::natives::clone_ped_alt(
            &mut native_return,
ped_,
is_network_,
b_script_host_ped_,
copy_head_blend_flag_,
p4_,
        );
        let native_return = native_return;
        
        ResultOfClonePedAlt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_be_targetted_by_player(&self, ped_: u32,
player_: u32,
toggle_: bool) -> ResultOfSetPedCanBeTargettedByPlayer {
    unsafe {
        let mut ped_ = ped_;
let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_be_targetted_by_player(
            ped_,
player_,
toggle_,
        );
        
        
        ResultOfSetPedCanBeTargettedByPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_on_vehicle(&self, ped_: u32) -> ResultOfIsPedOnVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_on_vehicle(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedOnVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_drawable_variation(&self, ped_: u32,
component_id_: i32) -> ResultOfGetPedDrawableVariation {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut component_id_ = component_id_;
        let success = sdk::natives::get_ped_drawable_variation(
            &mut native_return,
ped_,
component_id_,
        );
        let native_return = native_return;
        
        ResultOfGetPedDrawableVariation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_any_hostile_ped_near_point(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOfIsAnyHostilePedNearPoint {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::is_any_hostile_ped_near_point(
            &mut native_return,
ped_,
x_,
y_,
z_,
radius_,
        );
        let native_return = native_return;
        
        ResultOfIsAnyHostilePedNearPoint {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_ped_stored_hat_prop(&self, ped_: u32) -> ResultOfClearPedStoredHatProp {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_stored_hat_prop(
            ped_,
        );
        
        
        ResultOfClearPedStoredHatProp {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_head_blend_first_index(&self, type_: i32) -> ResultOfGetPedHeadBlendFirstIndex {
    unsafe {
        let mut native_return = Default::default();
let mut type_ = type_;
        let success = sdk::natives::get_ped_head_blend_first_index(
            &mut native_return,
type_,
        );
        let native_return = native_return;
        
        ResultOfGetPedHeadBlendFirstIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_apply_damage_to_ped(&self, ped_: u32,
damage_amount_: i32,
p2_: bool,
p3_: i32) -> ResultOfApplyDamageToPed {
    unsafe {
        let mut ped_ = ped_;
let mut damage_amount_ = damage_amount_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::apply_damage_to_ped(
            ped_,
damage_amount_,
p2_,
p3_,
        );
        
        
        ResultOfApplyDamageToPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_in_high_cover(&self, ped_: u32) -> ResultOfIsPedInHighCover {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_high_cover(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedInHighCover {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_ped_is_following(&self, ped_: u32) -> ResultOfGetPlayerPedIsFollowing {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_player_ped_is_following(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerPedIsFollowing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_synchronized_scene_origin(&self, scene_i_d_: i32,
x_: f32,
y_: f32,
z_: f32,
roll_: f32,
pitch_: f32,
yaw_: f32,
p7_: bool) -> ResultOfSetSynchronizedSceneOrigin {
    unsafe {
        let mut scene_i_d_ = scene_i_d_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut roll_ = roll_;
let mut pitch_ = pitch_;
let mut yaw_ = yaw_;
let mut p7_ = p7_;
        let success = sdk::natives::set_synchronized_scene_origin(
            scene_i_d_,
x_,
y_,
z_,
roll_,
pitch_,
yaw_,
p7_,
        );
        
        
        ResultOfSetSynchronizedSceneOrigin {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ambient_peds_drop_money(&self, p0_: bool) -> ResultOfSetAmbientPedsDropMoney {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_ambient_peds_drop_money(
            p0_,
        );
        
        
        ResultOfSetAmbientPedsDropMoney {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_evasive_dive(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedCanEvasiveDive {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_evasive_dive(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedCanEvasiveDive {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_max_time_underwater(&self, ped_: u32,
value_: f32) -> ResultOfSetPedMaxTimeUnderwater {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_max_time_underwater(
            ped_,
value_,
        );
        
        
        ResultOfSetPedMaxTimeUnderwater {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_arm_ik(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedCanArmIk {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_arm_ik(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedCanArmIk {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_alternate_walk_anim(&self, ped_: u32,
anim_dict_: Option<String>,
anim_name_: Option<String>,
p3_: f32,
p4_: bool) -> ResultOfSetPedAlternateWalkAnim {
    unsafe {
        let mut ped_ = ped_;
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::set_ped_alternate_walk_anim(
            ped_,
anim_dict_.as_ref().unwrap(),
anim_name_.as_ref().unwrap(),
p3_,
p4_,
        );
        
        
        ResultOfSetPedAlternateWalkAnim {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_ped_see_hated_ped(&self, ped1_: u32,
ped2_: u32) -> ResultOfCanPedSeeHatedPed {
    unsafe {
        let mut native_return = Default::default();
let mut ped1_ = ped1_;
let mut ped2_ = ped2_;
        let success = sdk::natives::can_ped_see_hated_ped(
            &mut native_return,
ped1_,
ped2_,
        );
        let native_return = native_return;
        
        ResultOfCanPedSeeHatedPed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_detach_synchronized_scene(&self, scene_i_d_: i32) -> ResultOfDetachSynchronizedScene {
    unsafe {
        let mut scene_i_d_ = scene_i_d_;
        let success = sdk::natives::detach_synchronized_scene(
            scene_i_d_,
        );
        
        
        ResultOfDetachSynchronizedScene {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_male(&self, ped_: u32) -> ResultOfIsPedMale {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_male(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedMale {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_in_any_taxi(&self, ped_: u32) -> ResultOfIsPedInAnyTaxi {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_any_taxi(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedInAnyTaxi {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_scripted_scenario_ped_using_conditional_anim(&self, ped_: u32,
anim_dict_: Option<String>,
anim_: Option<String>) -> ResultOfIsScriptedScenarioPedUsingConditionalAnim {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut anim_ = sdk_helpers::create_c_string_ptr(anim_);
        let success = sdk::natives::is_scripted_scenario_ped_using_conditional_anim(
            &mut native_return,
ped_,
anim_dict_.as_ref().unwrap(),
anim_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfIsScriptedScenarioPedUsingConditionalAnim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_seat_ped_is_trying_to_enter(&self, ped_: u32) -> ResultOfGetSeatPedIsTryingToEnter {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_seat_ped_is_trying_to_enter(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetSeatPedIsTryingToEnter {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_in_any_train(&self, ped_: u32) -> ResultOfIsPedInAnyTrain {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_any_train(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedInAnyTrain {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_knock_off_ped_prop(&self, ped_: u32,
p1_: bool,
p2_: bool,
p3_: bool,
p4_: bool) -> ResultOfKnockOffPedProp {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::knock_off_ped_prop(
            ped_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfKnockOffPedProp {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_visual_field_max_angle(&self, ped_: u32,
value_: f32) -> ResultOfSetPedVisualFieldMaxAngle {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_visual_field_max_angle(
            ped_,
value_,
        );
        
        
        ResultOfSetPedVisualFieldMaxAngle {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_pedheadshot_ready(&self, id_: i32) -> ResultOfIsPedheadshotReady {
    unsafe {
        let mut native_return = Default::default();
let mut id_ = id_;
        let success = sdk::natives::is_pedheadshot_ready(
            &mut native_return,
id_,
        );
        let native_return = native_return;
        
        ResultOfIsPedheadshotReady {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_flee_attributes(&self, ped_: u32,
attribute_flags_: i32,
enable_: bool) -> ResultOfSetPedFleeAttributes {
    unsafe {
        let mut ped_ = ped_;
let mut attribute_flags_ = attribute_flags_;
let mut enable_ = enable_;
        let success = sdk::natives::set_ped_flee_attributes(
            ped_,
attribute_flags_,
enable_,
        );
        
        
        ResultOfSetPedFleeAttributes {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_high_fall_death(&self, ped_: u32,
toggle_: bool) -> ResultOfSetDisableHighFallDeath {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_high_fall_death(
            ped_,
toggle_,
        );
        
        
        ResultOfSetDisableHighFallDeath {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_micro_morph(&self, ped_: u32,
index_: i32,
scale_: f32) -> ResultOfSetPedMicroMorph {
    unsafe {
        let mut ped_ = ped_;
let mut index_ = index_;
let mut scale_ = scale_;
        let success = sdk::natives::set_ped_micro_morph(
            ped_,
index_,
scale_,
        );
        
        
        ResultOfSetPedMicroMorph {
            success,
            ret: (),
            
        }
    }
}

    fn native_resurrect_ped(&self, ped_: u32) -> ResultOfResurrectPed {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::resurrect_ped(
            ped_,
        );
        
        
        ResultOfResurrectPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_decorations_state(&self, ped_: u32) -> ResultOfGetPedDecorationsState {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_decorations_state(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedDecorationsState {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_update_ped_head_blend_data(&self, ped_: u32,
shape_mix_: f32,
skin_mix_: f32,
third_mix_: f32) -> ResultOfUpdatePedHeadBlendData {
    unsafe {
        let mut ped_ = ped_;
let mut shape_mix_ = shape_mix_;
let mut skin_mix_ = skin_mix_;
let mut third_mix_ = third_mix_;
        let success = sdk::natives::update_ped_head_blend_data(
            ped_,
shape_mix_,
skin_mix_,
third_mix_,
        );
        
        
        ResultOfUpdatePedHeadBlendData {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_facial_idle_anim_override(&self, ped_: u32) -> ResultOfClearFacialIdleAnimOverride {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_facial_idle_anim_override(
            ped_,
        );
        
        
        ResultOfClearFacialIdleAnimOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_ped_injured_on_ground_behaviour(&self, ped_: u32) -> ResultOfDisablePedInjuredOnGroundBehaviour {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::disable_ped_injured_on_ground_behaviour(
            ped_,
        );
        
        
        ResultOfDisablePedInjuredOnGroundBehaviour {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_synchronized_scene_phase(&self, scene_i_d_: i32,
phase_: f32) -> ResultOfSetSynchronizedScenePhase {
    unsafe {
        let mut scene_i_d_ = scene_i_d_;
let mut phase_ = phase_;
        let success = sdk::natives::set_synchronized_scene_phase(
            scene_i_d_,
phase_,
        );
        
        
        ResultOfSetSynchronizedScenePhase {
            success,
            ret: (),
            
        }
    }
}

    fn native_have_all_streaming_requests_completed(&self, ped_: u32) -> ResultOfHaveAllStreamingRequestsCompleted {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::have_all_streaming_requests_completed(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfHaveAllStreamingRequestsCompleted {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_leg_ik(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedCanLegIk {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_leg_ik(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedCanLegIk {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_ped_defensive_area(&self, ped_: u32,
toggle_: bool) -> ResultOfRemovePedDefensiveArea {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::remove_ped_defensive_area(
            ped_,
toggle_,
        );
        
        
        ResultOfRemovePedDefensiveArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_ped_use_small_bbox_visibility_tracking(&self, ped_: u32,
p1_: bool) -> ResultOfRequestPedUseSmallBboxVisibilityTracking {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::request_ped_use_small_bbox_visibility_tracking(
            ped_,
p1_,
        );
        
        
        ResultOfRequestPedUseSmallBboxVisibilityTracking {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_head_blend_eye_color(&self, ped_: u32) -> ResultOfGetHeadBlendEyeColor {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_head_blend_eye_color(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetHeadBlendEyeColor {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_movement_mode_override(&self, ped_: u32,
name_: Option<String>) -> ResultOfSetMovementModeOverride {
    unsafe {
        let mut ped_ = ped_;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::set_movement_mode_override(
            ped_,
name_.as_ref().unwrap(),
        );
        
        
        ResultOfSetMovementModeOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_ped_preload_prop_data_finished(&self, ped_: u32) -> ResultOfHasPedPreloadPropDataFinished {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::has_ped_preload_prop_data_finished(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfHasPedPreloadPropDataFinished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_cloth_pin_frames(&self, p0_: i32,
p1_: i32) -> ResultOfSetPedClothPinFrames {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_cloth_pin_frames(
            p0_,
p1_,
        );
        
        
        ResultOfSetPedClothPinFrames {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_visual_field_max_elevation_angle(&self, ped_: u32,
angle_: f32) -> ResultOfSetPedVisualFieldMaxElevationAngle {
    unsafe {
        let mut ped_ = ped_;
let mut angle_ = angle_;
        let success = sdk::natives::set_ped_visual_field_max_elevation_angle(
            ped_,
angle_,
        );
        
        
        ResultOfSetPedVisualFieldMaxElevationAngle {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_in_model(&self, ped_: u32,
model_hash_: u32) -> ResultOfIsPedInModel {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut model_hash_ = model_hash_;
        let success = sdk::natives::is_ped_in_model(
            &mut native_return,
ped_,
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfIsPedInModel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_parachute_state(&self, ped_: u32) -> ResultOfGetPedParachuteState {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_parachute_state(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedParachuteState {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_visual_field_min_elevation_angle(&self, ped_: u32,
angle_: f32) -> ResultOfSetPedVisualFieldMinElevationAngle {
    unsafe {
        let mut ped_ = ped_;
let mut angle_ = angle_;
        let success = sdk::natives::set_ped_visual_field_min_elevation_angle(
            ped_,
angle_,
        );
        
        
        ResultOfSetPedVisualFieldMinElevationAngle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_scenario_ped_density_multiplier_this_frame(&self, p0_: f32,
p1_: f32) -> ResultOfSetScenarioPedDensityMultiplierThisFrame {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_scenario_ped_density_multiplier_this_frame(
            p0_,
p1_,
        );
        
        
        ResultOfSetScenarioPedDensityMultiplierThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_be_knocked_off_vehicle(&self, ped_: u32,
state_: i32) -> ResultOfSetPedCanBeKnockedOffVehicle {
    unsafe {
        let mut ped_ = ped_;
let mut state_ = state_;
        let success = sdk::natives::set_ped_can_be_knocked_off_vehicle(
            ped_,
state_,
        );
        
        
        ResultOfSetPedCanBeKnockedOffVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_accuracy(&self, ped_: u32,
accuracy_: i32) -> ResultOfSetPedAccuracy {
    unsafe {
        let mut ped_ = ped_;
let mut accuracy_ = accuracy_;
        let success = sdk::natives::set_ped_accuracy(
            ped_,
accuracy_,
        );
        
        
        ResultOfSetPedAccuracy {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_stealth_movement(&self, ped_: u32) -> ResultOfGetPedStealthMovement {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_stealth_movement(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedStealthMovement {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_group_exist(&self, group_id_: i32) -> ResultOfDoesGroupExist {
    unsafe {
        let mut native_return = Default::default();
let mut group_id_ = group_id_;
        let success = sdk::natives::does_group_exist(
            &mut native_return,
group_id_,
        );
        let native_return = native_return;
        
        ResultOfDoesGroupExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_ped_visibility_tracking(&self, ped_: u32) -> ResultOfRequestPedVisibilityTracking {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::request_ped_visibility_tracking(
            ped_,
        );
        
        
        ResultOfRequestPedVisibilityTracking {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_relationship_group_hash(&self, ped_: u32) -> ResultOfGetPedRelationshipGroupHash {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_relationship_group_hash(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedRelationshipGroupHash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_in_parachute_free_fall(&self, ped_: u32) -> ResultOfIsPedInParachuteFreeFall {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_parachute_free_fall(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedInParachuteFreeFall {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_ped_inside_vehicle(&self, vehicle_: u32,
ped_type_: i32,
model_hash_: u32,
seat_: i32,
is_network_: bool,
b_script_host_ped_: bool) -> ResultOfCreatePedInsideVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut ped_type_ = ped_type_;
let mut model_hash_ = model_hash_;
let mut seat_ = seat_;
let mut is_network_ = is_network_;
let mut b_script_host_ped_ = b_script_host_ped_;
        let success = sdk::natives::create_ped_inside_vehicle(
            &mut native_return,
vehicle_,
ped_type_,
model_hash_,
seat_,
is_network_,
b_script_host_ped_,
        );
        let native_return = native_return;
        
        ResultOfCreatePedInsideVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_shooting_in_area(&self, ped_: u32,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
p7_: bool,
p8_: bool) -> ResultOfIsPedShootingInArea {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::is_ped_shooting_in_area(
            &mut native_return,
ped_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
p7_,
p8_,
        );
        let native_return = native_return;
        
        ResultOfIsPedShootingInArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_config_flag(&self, ped_: u32,
flag_id_: i32,
p2_: bool) -> ResultOfGetPedConfigFlag {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut flag_id_ = flag_id_;
let mut p2_ = p2_;
        let success = sdk::natives::get_ped_config_flag(
            &mut native_return,
ped_,
flag_id_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfGetPedConfigFlag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_was_ped_killed_by_takedown(&self, ped_: u32) -> ResultOfWasPedKilledByTakedown {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::was_ped_killed_by_takedown(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfWasPedKilledByTakedown {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_synchronized_scene_hold_last_frame(&self, scene_i_d_: i32) -> ResultOfIsSynchronizedSceneHoldLastFrame {
    unsafe {
        let mut native_return = Default::default();
let mut scene_i_d_ = scene_i_d_;
        let success = sdk::natives::is_synchronized_scene_hold_last_frame(
            &mut native_return,
scene_i_d_,
        );
        let native_return = native_return;
        
        ResultOfIsSynchronizedSceneHoldLastFrame {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_generates_dead_body_events(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedGeneratesDeadBodyEvents {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_generates_dead_body_events(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedGeneratesDeadBodyEvents {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_fall_upper_body_clipset_override(&self, ped_: u32) -> ResultOfClearPedFallUpperBodyClipsetOverride {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_fall_upper_body_clipset_override(
            ped_,
        );
        
        
        ResultOfClearPedFallUpperBodyClipsetOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_headtracking_entity(&self, ped_: u32,
entity_: u32) -> ResultOfIsPedHeadtrackingEntity {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut entity_ = entity_;
        let success = sdk::natives::is_ped_headtracking_entity(
            &mut native_return,
ped_,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsPedHeadtrackingEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_ped_is_trying_to_enter(&self, ped_: u32) -> ResultOfGetVehiclePedIsTryingToEnter {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_vehicle_ped_is_trying_to_enter(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetVehiclePedIsTryingToEnter {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_apply_ped_blood_damage_by_zone(&self, ped_: u32,
p1_: i32,
p2_: f32,
p3_: f32,
p4_: i32) -> ResultOfApplyPedBloodDamageByZone {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::apply_ped_blood_damage_by_zone(
            ped_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfApplyPedBloodDamageByZone {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_shader_ready(&self, ped_: u32) -> ResultOfIsPedShaderReady {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_shader_ready(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedShaderReady {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_play_in_car_idles(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedCanPlayInCarIdles {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_play_in_car_idles(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedCanPlayInCarIdles {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_sitting_in_any_vehicle(&self, ped_: u32) -> ResultOfIsPedSittingInAnyVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_sitting_in_any_vehicle(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedSittingInAnyVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_cloth_package_index(&self, p0_: i32,
p1_: i32) -> ResultOfSetPedClothPackageIndex {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_cloth_package_index(
            p0_,
p1_,
        );
        
        
        ResultOfSetPedClothPackageIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_phone_palette_idx(&self, p0_: i32,
p1_: i32) -> ResultOfSetPedPhonePaletteIdx {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_phone_palette_idx(
            p0_,
p1_,
        );
        
        
        ResultOfSetPedPhonePaletteIdx {
            success,
            ret: (),
            
        }
    }
}

    fn native_apply_ped_blood(&self, ped_: u32,
bone_index_: i32,
x_rot_: f32,
y_rot_: f32,
z_rot_: f32,
wound_type_: Option<String>) -> ResultOfApplyPedBlood {
    unsafe {
        let mut ped_ = ped_;
let mut bone_index_ = bone_index_;
let mut x_rot_ = x_rot_;
let mut y_rot_ = y_rot_;
let mut z_rot_ = z_rot_;
let mut wound_type_ = sdk_helpers::create_c_string_ptr(wound_type_);
        let success = sdk::natives::apply_ped_blood(
            ped_,
bone_index_,
x_rot_,
y_rot_,
z_rot_,
wound_type_.as_ref().unwrap(),
        );
        
        
        ResultOfApplyPedBlood {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_preferred_cover_set(&self, ped_: u32,
item_set_: i32) -> ResultOfSetPedPreferredCoverSet {
    unsafe {
        let mut ped_ = ped_;
let mut item_set_ = item_set_;
        let success = sdk::natives::set_ped_preferred_cover_set(
            ped_,
item_set_,
        );
        
        
        ResultOfSetPedPreferredCoverSet {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_in_cover_facing_left(&self, ped_: u32) -> ResultOfIsPedInCoverFacingLeft {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_cover_facing_left(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedInCoverFacingLeft {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_injured(&self, ped_: u32) -> ResultOfIsPedInjured {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_injured(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedInjured {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_ped_received_event(&self, ped_: u32,
event_id_: i32) -> ResultOfHasPedReceivedEvent {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut event_id_ = event_id_;
        let success = sdk::natives::has_ped_received_event(
            &mut native_return,
ped_,
event_id_,
        );
        let native_return = native_return;
        
        ResultOfHasPedReceivedEvent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_being_stealth_killed(&self, ped_: u32) -> ResultOfIsPedBeingStealthKilled {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_being_stealth_killed(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedBeingStealthKilled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_coords_no_gang(&self, ped_: u32,
pos_x_: f32,
pos_y_: f32,
pos_z_: f32) -> ResultOfSetPedCoordsNoGang {
    unsafe {
        let mut ped_ = ped_;
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
        let success = sdk::natives::set_ped_coords_no_gang(
            ped_,
pos_x_,
pos_y_,
pos_z_,
        );
        
        
        ResultOfSetPedCoordsNoGang {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_random_ped_at_coord(&self, x_: f32,
y_: f32,
z_: f32,
x_radius_: f32,
y_radius_: f32,
z_radius_: f32,
ped_type_: i32) -> ResultOfGetRandomPedAtCoord {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut x_radius_ = x_radius_;
let mut y_radius_ = y_radius_;
let mut z_radius_ = z_radius_;
let mut ped_type_ = ped_type_;
        let success = sdk::natives::get_random_ped_at_coord(
            &mut native_return,
x_,
y_,
z_,
x_radius_,
y_radius_,
z_radius_,
ped_type_,
        );
        let native_return = native_return;
        
        ResultOfGetRandomPedAtCoord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_pedheadshot_img_upload_failed(&self, ) -> ResultOfHasPedheadshotImgUploadFailed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_pedheadshot_img_upload_failed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfHasPedheadshotImgUploadFailed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ambient_law_ped_accuracy_modifier(&self, multiplier_: f32) -> ResultOfSetAmbientLawPedAccuracyModifier {
    unsafe {
        let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_ambient_law_ped_accuracy_modifier(
            multiplier_,
        );
        
        
        ResultOfSetAmbientLawPedAccuracyModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_mp_light_enabled(&self, ped_: u32) -> ResultOfGetMpLightEnabled {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_mp_light_enabled(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetMpLightEnabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_ped_alternate_walk_anim(&self, ped_: u32,
p1_: f32) -> ResultOfClearPedAlternateWalkAnim {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::clear_ped_alternate_walk_anim(
            ped_,
p1_,
        );
        
        
        ResultOfClearPedAlternateWalkAnim {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_stealth_movement(&self, ped_: u32,
p1_: bool,
action_: Option<String>) -> ResultOfSetPedStealthMovement {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut action_ = sdk_helpers::create_c_string_ptr(action_);
        let success = sdk::natives::set_ped_stealth_movement(
            ped_,
p1_,
action_.as_ref().unwrap(),
        );
        
        
        ResultOfSetPedStealthMovement {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_prop_index(&self, ped_: u32,
component_id_: i32,
p2_: i32) -> ResultOfGetPedPropIndex {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut component_id_ = component_id_;
let mut p2_ = p2_;
        let success = sdk::natives::get_ped_prop_index(
            &mut native_return,
ped_,
component_id_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfGetPedPropIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_scenario_blocking_area_exists(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOfDoesScenarioBlockingAreaExists {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::does_scenario_blocking_area_exists(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOfDoesScenarioBlockingAreaExists {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_create_random_cops_not_on_scenarios(&self, toggle_: bool) -> ResultOfSetCreateRandomCopsNotOnScenarios {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_create_random_cops_not_on_scenarios(
            toggle_,
        );
        
        
        ResultOfSetCreateRandomCopsNotOnScenarios {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_parachute_landing_type(&self, ped_: u32) -> ResultOfGetPedParachuteLandingType {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_parachute_landing_type(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedParachuteLandingType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_synchronized_scene(&self, x_: f32,
y_: f32,
z_: f32,
roll_: f32,
pitch_: f32,
yaw_: f32,
p6_: i32) -> ResultOfCreateSynchronizedScene {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut roll_ = roll_;
let mut pitch_ = pitch_;
let mut yaw_ = yaw_;
let mut p6_ = p6_;
        let success = sdk::natives::create_synchronized_scene(
            &mut native_return,
x_,
y_,
z_,
roll_,
pitch_,
yaw_,
p6_,
        );
        let native_return = native_return;
        
        ResultOfCreateSynchronizedScene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_parachute_bag_object(&self, ped_: u32,
p1_: bool,
p2_: bool) -> ResultOfCreateParachuteBagObject {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::create_parachute_bag_object(
            &mut native_return,
ped_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfCreateParachuteBagObject {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_revive_injured_ped(&self, ped_: u32) -> ResultOfReviveInjuredPed {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::revive_injured_ped(
            ped_,
        );
        
        
        ResultOfReviveInjuredPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_group_size(&self, group_i_d_: i32,
p1_: shared::MemoryBufferId,
size_in_members_: i32) -> ResultOfGetGroupSize {
    unsafe {
        let mut group_i_d_ = group_i_d_;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
let mut size_in_members_ = size_in_members_;
        let success = sdk::natives::get_group_size(
            p1_,
&mut size_in_members_,
group_i_d_,
        );
        let p1_ = 0;
let size_in_members_ = size_in_members_;
        
        ResultOfGetGroupSize {
            success,
            ret: (),
            p1_,
size_in_members_
        }
    }
}

    fn native_remove_group(&self, group_id_: i32) -> ResultOfRemoveGroup {
    unsafe {
        let mut group_id_ = group_id_;
        let success = sdk::natives::remove_group(
            group_id_,
        );
        
        
        ResultOfRemoveGroup {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_last_damage_bone(&self, ped_: u32) -> ResultOfClearPedLastDamageBone {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_last_damage_bone(
            ped_,
        );
        
        
        ResultOfClearPedLastDamageBone {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_number_of_ped_texture_variations(&self, ped_: u32,
component_id_: i32,
drawable_id_: i32) -> ResultOfGetNumberOfPedTextureVariations {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut component_id_ = component_id_;
let mut drawable_id_ = drawable_id_;
        let success = sdk::natives::get_number_of_ped_texture_variations(
            &mut native_return,
ped_,
component_id_,
drawable_id_,
        );
        let native_return = native_return;
        
        ResultOfGetNumberOfPedTextureVariations {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_ped_blood_damage(&self, ped_: u32) -> ResultOfClearPedBloodDamage {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_blood_damage(
            ped_,
        );
        
        
        ResultOfClearPedBloodDamage {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_group(&self, unused_: i32) -> ResultOfCreateGroup {
    unsafe {
        let mut native_return = Default::default();
let mut unused_ = unused_;
        let success = sdk::natives::create_group(
            &mut native_return,
unused_,
        );
        let native_return = native_return;
        
        ResultOfCreateGroup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_alternate_movement_anim(&self, ped_: u32,
stance_: i32,
anim_dictionary_: Option<String>,
animation_name_: Option<String>,
p4_: f32,
p5_: bool) -> ResultOfSetPedAlternateMovementAnim {
    unsafe {
        let mut ped_ = ped_;
let mut stance_ = stance_;
let mut anim_dictionary_ = sdk_helpers::create_c_string_ptr(anim_dictionary_);
let mut animation_name_ = sdk_helpers::create_c_string_ptr(animation_name_);
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::set_ped_alternate_movement_anim(
            ped_,
stance_,
anim_dictionary_.as_ref().unwrap(),
animation_name_.as_ref().unwrap(),
p4_,
p5_,
        );
        
        
        ResultOfSetPedAlternateMovementAnim {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_in_flying_vehicle(&self, ped_: u32) -> ResultOfIsPedInFlyingVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_flying_vehicle(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedInFlyingVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_tracked_ped_visible(&self, ped_: u32) -> ResultOfIsTrackedPedVisible {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_tracked_ped_visible(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsTrackedPedVisible {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_stealth_mode_asset(&self, asset_: Option<String>) -> ResultOfRemoveStealthModeAsset {
    unsafe {
        let mut asset_ = sdk_helpers::create_c_string_ptr(asset_);
        let success = sdk::natives::remove_stealth_mode_asset(
            asset_.as_ref().unwrap(),
        );
        
        
        ResultOfRemoveStealthModeAsset {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_hated_targets_around_ped(&self, ped_: u32,
radius_: f32) -> ResultOfRegisterHatedTargetsAroundPed {
    unsafe {
        let mut ped_ = ped_;
let mut radius_ = radius_;
        let success = sdk::natives::register_hated_targets_around_ped(
            ped_,
radius_,
        );
        
        
        ResultOfRegisterHatedTargetsAroundPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_prop_index(&self, ped_: u32,
component_id_: i32,
drawable_id_: i32,
texture_id_: i32,
attach_: bool,
p5_: i32) -> ResultOfSetPedPropIndex {
    unsafe {
        let mut ped_ = ped_;
let mut component_id_ = component_id_;
let mut drawable_id_ = drawable_id_;
let mut texture_id_ = texture_id_;
let mut attach_ = attach_;
let mut p5_ = p5_;
        let success = sdk::natives::set_ped_prop_index(
            ped_,
component_id_,
drawable_id_,
texture_id_,
attach_,
p5_,
        );
        
        
        ResultOfSetPedPropIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_source_of_death(&self, ped_: u32) -> ResultOfGetPedSourceOfDeath {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_source_of_death(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedSourceOfDeath {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_head_blend_data(&self, ped_: u32,
shape_first_i_d_: i32,
shape_second_i_d_: i32,
shape_third_i_d_: i32,
skin_first_i_d_: i32,
skin_second_i_d_: i32,
skin_third_i_d_: i32,
shape_mix_: f32,
skin_mix_: f32,
third_mix_: f32,
is_parent_: bool) -> ResultOfSetPedHeadBlendData {
    unsafe {
        let mut ped_ = ped_;
let mut shape_first_i_d_ = shape_first_i_d_;
let mut shape_second_i_d_ = shape_second_i_d_;
let mut shape_third_i_d_ = shape_third_i_d_;
let mut skin_first_i_d_ = skin_first_i_d_;
let mut skin_second_i_d_ = skin_second_i_d_;
let mut skin_third_i_d_ = skin_third_i_d_;
let mut shape_mix_ = shape_mix_;
let mut skin_mix_ = skin_mix_;
let mut third_mix_ = third_mix_;
let mut is_parent_ = is_parent_;
        let success = sdk::natives::set_ped_head_blend_data(
            ped_,
shape_first_i_d_,
shape_second_i_d_,
shape_third_i_d_,
skin_first_i_d_,
skin_second_i_d_,
skin_third_i_d_,
shape_mix_,
skin_mix_,
third_mix_,
is_parent_,
        );
        
        
        ResultOfSetPedHeadBlendData {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_on_any_bike(&self, ped_: u32) -> ResultOfIsPedOnAnyBike {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_on_any_bike(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedOnAnyBike {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_armour(&self, ped_: u32) -> ResultOfGetPedArmour {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_armour(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedArmour {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_plays_head_on_horn_anim_when_dies_in_vehicle(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedPlaysHeadOnHornAnimWhenDiesInVehicle {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_plays_head_on_horn_anim_when_dies_in_vehicle(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedPlaysHeadOnHornAnimWhenDiesInVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_vehicle_forced_seat_usage(&self, ped_: u32,
vehicle_: u32,
seat_index_: i32,
flags_: i32,
p4_: i32) -> ResultOfSetPedVehicleForcedSeatUsage {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut seat_index_ = seat_index_;
let mut flags_ = flags_;
let mut p4_ = p4_;
        let success = sdk::natives::set_ped_vehicle_forced_seat_usage(
            ped_,
vehicle_,
seat_index_,
flags_,
p4_,
        );
        
        
        ResultOfSetPedVehicleForcedSeatUsage {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_pedheadshot_transparent(&self, ped_: u32) -> ResultOfRegisterPedheadshotTransparent {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::register_pedheadshot_transparent(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfRegisterPedheadshotTransparent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_density_multiplier_this_frame(&self, multiplier_: f32) -> ResultOfSetPedDensityMultiplierThisFrame {
    unsafe {
        let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_ped_density_multiplier_this_frame(
            multiplier_,
        );
        
        
        ResultOfSetPedDensityMultiplierThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_delete_ped(&self, ped_: u32) -> ResultOfDeletePed {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::delete_ped(
            &mut ped_,
        );
        let ped_ = ped_;
        
        ResultOfDeletePed {
            success,
            ret: (),
            ped_
        }
    }
}

    fn native_set_ped_shoots_at_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
toggle_: bool) -> ResultOfSetPedShootsAtCoord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_shoots_at_coord(
            ped_,
x_,
y_,
z_,
toggle_,
        );
        
        
        ResultOfSetPedShootsAtCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_unregister_pedheadshot(&self, id_: i32) -> ResultOfUnregisterPedheadshot {
    unsafe {
        let mut id_ = id_;
        let success = sdk::natives::unregister_pedheadshot(
            id_,
        );
        
        
        ResultOfUnregisterPedheadshot {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_keep_task(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedKeepTask {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_keep_task(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedKeepTask {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_enable_weapon_blocking(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedEnableWeaponBlocking {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_enable_weapon_blocking(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedEnableWeaponBlocking {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_ped_weapon_movement_clipset(&self, ped_: u32) -> ResultOfResetPedWeaponMovementClipset {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::reset_ped_weapon_movement_clipset(
            ped_,
        );
        
        
        ResultOfResetPedWeaponMovementClipset {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_name_debug(&self, ped_: u32,
name_: Option<String>) -> ResultOfSetPedNameDebug {
    unsafe {
        let mut ped_ = ped_;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::set_ped_name_debug(
            ped_,
name_.as_ref().unwrap(),
        );
        
        
        ResultOfSetPedNameDebug {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blocking_of_non_temporary_events_for_ambient_peds_this_frame(&self, p0_: bool) -> ResultOfSetBlockingOfNonTemporaryEventsForAmbientPedsThisFrame {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_blocking_of_non_temporary_events_for_ambient_peds_this_frame(
            p0_,
        );
        
        
        ResultOfSetBlockingOfNonTemporaryEventsForAmbientPedsThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_in_any_vehicle(&self, ped_: u32,
at_get_in_: bool) -> ResultOfIsPedInAnyVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut at_get_in_ = at_get_in_;
        let success = sdk::natives::is_ped_in_any_vehicle(
            &mut native_return,
ped_,
at_get_in_,
        );
        let native_return = native_return;
        
        ResultOfIsPedInAnyVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_being_jacked(&self, ped_: u32) -> ResultOfIsPedBeingJacked {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_being_jacked(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedBeingJacked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_toggle_scenario_ped_cower_in_place(&self, ped_: u32,
toggle_: bool) -> ResultOfToggleScenarioPedCowerInPlace {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::toggle_scenario_ped_cower_in_place(
            ped_,
toggle_,
        );
        
        
        ResultOfToggleScenarioPedCowerInPlace {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_ped_is_in(&self, ped_: u32,
include_entering_: bool) -> ResultOfGetVehiclePedIsIn {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut include_entering_ = include_entering_;
        let success = sdk::natives::get_vehicle_ped_is_in(
            &mut native_return,
ped_,
include_entering_,
        );
        let native_return = native_return;
        
        ResultOfGetVehiclePedIsIn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_firing_pattern(&self, ped_: u32,
pattern_hash_: u32) -> ResultOfSetPedFiringPattern {
    unsafe {
        let mut ped_ = ped_;
let mut pattern_hash_ = pattern_hash_;
        let success = sdk::natives::set_ped_firing_pattern(
            ped_,
pattern_hash_,
        );
        
        
        ResultOfSetPedFiringPattern {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_coords_keep_vehicle(&self, ped_: u32,
pos_x_: f32,
pos_y_: f32,
pos_z_: f32) -> ResultOfSetPedCoordsKeepVehicle {
    unsafe {
        let mut ped_ = ped_;
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
        let success = sdk::natives::set_ped_coords_keep_vehicle(
            ped_,
pos_x_,
pos_y_,
pos_z_,
        );
        
        
        ResultOfSetPedCoordsKeepVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_peds_jacker(&self, ped_: u32) -> ResultOfGetPedsJacker {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_peds_jacker(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedsJacker {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_random_ped_as_driver(&self, vehicle_: u32,
return_handle_: bool) -> ResultOfCreateRandomPedAsDriver {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut return_handle_ = return_handle_;
        let success = sdk::natives::create_random_ped_as_driver(
            &mut native_return,
vehicle_,
return_handle_,
        );
        let native_return = native_return;
        
        ResultOfCreateRandomPedAsDriver {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_group_member(&self, ped_: u32,
group_id_: i32) -> ResultOfIsPedGroupMember {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut group_id_ = group_id_;
        let success = sdk::natives::is_ped_group_member(
            &mut native_return,
ped_,
group_id_,
        );
        let native_return = native_return;
        
        ResultOfIsPedGroupMember {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_enveff_scale(&self, ped_: u32) -> ResultOfGetPedEnveffScale {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_enveff_scale(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedEnveffScale {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_ped_shuffle_to_or_from_turret_seat(&self, ped_: u32,
p1_: i32) -> ResultOfCanPedShuffleToOrFromTurretSeat {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::can_ped_shuffle_to_or_from_turret_seat(
            &mut native_return,
&mut p1_,
ped_,
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOfCanPedShuffleToOrFromTurretSeat {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_clear_ped_wetness(&self, ped_: u32) -> ResultOfClearPedWetness {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_wetness(
            ped_,
        );
        
        
        ResultOfClearPedWetness {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_visual_field_peripheral_range(&self, ped_: u32,
range_: f32) -> ResultOfSetPedVisualFieldPeripheralRange {
    unsafe {
        let mut ped_ = ped_;
let mut range_ = range_;
        let success = sdk::natives::set_ped_visual_field_peripheral_range(
            ped_,
range_,
        );
        
        
        ResultOfSetPedVisualFieldPeripheralRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_sphere_defensive_area(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32,
p5_: bool,
p6_: bool) -> ResultOfSetPedSphereDefensiveArea {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::set_ped_sphere_defensive_area(
            ped_,
x_,
y_,
z_,
radius_,
p5_,
p6_,
        );
        
        
        ResultOfSetPedSphereDefensiveArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_helmet_stored_hat_tex_index(&self, ped_: u32) -> ResultOfGetPedHelmetStoredHatTexIndex {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_helmet_stored_hat_tex_index(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedHelmetStoredHatTexIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_motion_in_cover_clipset_override(&self, ped_: u32,
p1_: Option<String>) -> ResultOfSetPedMotionInCoverClipsetOverride {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::set_ped_motion_in_cover_clipset_override(
            ped_,
p1_.as_ref().unwrap(),
        );
        
        
        ResultOfSetPedMotionInCoverClipsetOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_swimming(&self, ped_: u32) -> ResultOfIsPedSwimming {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_swimming(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedSwimming {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_mp_outfit_data_from_metadata(&self, p0_: shared::MemoryBufferId,
p1_: shared::MemoryBufferId) -> ResultOfGetMpOutfitDataFromMetadata {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
        let success = sdk::natives::get_mp_outfit_data_from_metadata(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
let p0_ = 0;
let p1_ = 0;
        
        ResultOfGetMpOutfitDataFromMetadata {
            success,
            ret: native_return,
            p0_,
p1_
        }
    }
}

    fn native_get_relationship_between_groups(&self, group1_: u32,
group2_: u32) -> ResultOfGetRelationshipBetweenGroups {
    unsafe {
        let mut native_return = Default::default();
let mut group1_ = group1_;
let mut group2_ = group2_;
        let success = sdk::natives::get_relationship_between_groups(
            &mut native_return,
group1_,
group2_,
        );
        let native_return = native_return;
        
        ResultOfGetRelationshipBetweenGroups {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_move_anims_blend_out(&self, ped_: u32) -> ResultOfSetPedMoveAnimsBlendOut {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_move_anims_blend_out(
            ped_,
        );
        
        
        ResultOfSetPedMoveAnimsBlendOut {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_as_group_member(&self, ped_: u32,
group_id_: i32) -> ResultOfSetPedAsGroupMember {
    unsafe {
        let mut ped_ = ped_;
let mut group_id_ = group_id_;
        let success = sdk::natives::set_ped_as_group_member(
            ped_,
group_id_,
        );
        
        
        ResultOfSetPedAsGroupMember {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_going_into_cover(&self, ped_: u32) -> ResultOfIsPedGoingIntoCover {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_going_into_cover(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedGoingIntoCover {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_combat_attributes(&self, ped_: u32,
attribute_id_: i32,
enabled_: bool) -> ResultOfSetPedCombatAttributes {
    unsafe {
        let mut ped_ = ped_;
let mut attribute_id_ = attribute_id_;
let mut enabled_ = enabled_;
        let success = sdk::natives::set_ped_combat_attributes(
            ped_,
attribute_id_,
enabled_,
        );
        
        
        ResultOfSetPedCombatAttributes {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_blocking_of_non_temporary_events(&self, ped_: u32,
toggle_: bool) -> ResultOfSetBlockingOfNonTemporaryEvents {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_blocking_of_non_temporary_events(
            ped_,
toggle_,
        );
        
        
        ResultOfSetBlockingOfNonTemporaryEvents {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_ped_ragdoll_timer(&self, ped_: u32) -> ResultOfResetPedRagdollTimer {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::reset_ped_ragdoll_timer(
            ped_,
        );
        
        
        ResultOfResetPedRagdollTimer {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_decoration_zone_from_hashes(&self, collection_: u32,
overlay_: u32) -> ResultOfGetPedDecorationZoneFromHashes {
    unsafe {
        let mut native_return = Default::default();
let mut collection_ = collection_;
let mut overlay_ = overlay_;
        let success = sdk::natives::get_ped_decoration_zone_from_hashes(
            &mut native_return,
collection_,
overlay_,
        );
        let native_return = native_return;
        
        ResultOfGetPedDecorationZoneFromHashes {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_gravity(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedGravity {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_gravity(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedGravity {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_pedheadshot_valid(&self, id_: i32) -> ResultOfIsPedheadshotValid {
    unsafe {
        let mut native_return = Default::default();
let mut id_ = id_;
        let success = sdk::natives::is_pedheadshot_valid(
            &mut native_return,
id_,
        );
        let native_return = native_return;
        
        ResultOfIsPedheadshotValid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_any_ped_shooting_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
p6_: bool,
p7_: bool) -> ResultOfIsAnyPedShootingInArea {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::is_any_ped_shooting_in_area(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
p6_,
p7_,
        );
        let native_return = native_return;
        
        ResultOfIsAnyPedShootingInArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_head_blend_palette_color(&self, ped_: u32) -> ResultOfDisableHeadBlendPaletteColor {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::disable_head_blend_palette_color(
            ped_,
        );
        
        
        ResultOfDisableHeadBlendPaletteColor {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_should_play_normal_scenario_exit(&self, ped_: u32) -> ResultOfSetPedShouldPlayNormalScenarioExit {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_should_play_normal_scenario_exit(
            ped_,
        );
        
        
        ResultOfSetPedShouldPlayNormalScenarioExit {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_in_vehicle(&self, ped_: u32,
vehicle_: u32,
at_get_in_: bool) -> ResultOfIsPedInVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut at_get_in_ = at_get_in_;
        let success = sdk::natives::is_ped_in_vehicle(
            &mut native_return,
ped_,
vehicle_,
at_get_in_,
        );
        let native_return = native_return;
        
        ResultOfIsPedInVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_mobile_phone_to_ped_ear(&self, ped_: u32) -> ResultOfIsMobilePhoneToPedEar {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_mobile_phone_to_ped_ear(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsMobilePhoneToPedEar {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_no_time_delay_before_shot(&self, p0_: i32) -> ResultOfSetPedNoTimeDelayBeforeShot {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_ped_no_time_delay_before_shot(
            p0_,
        );
        
        
        ResultOfSetPedNoTimeDelayBeforeShot {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_cower_hash(&self, ped_: u32,
p1_: Option<String>) -> ResultOfSetPedCowerHash {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::set_ped_cower_hash(
            ped_,
p1_.as_ref().unwrap(),
        );
        
        
        ResultOfSetPedCowerHash {
            success,
            ret: (),
            
        }
    }
}

    fn native_spawnpoints_is_search_complete(&self, ) -> ResultOfSpawnpointsIsSearchComplete {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::spawnpoints_is_search_complete(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfSpawnpointsIsSearchComplete {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_head_overlay(&self, ped_: u32,
overlay_i_d_: i32) -> ResultOfGetPedHeadOverlay {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut overlay_i_d_ = overlay_i_d_;
        let success = sdk::natives::get_ped_head_overlay(
            &mut native_return,
ped_,
overlay_i_d_,
        );
        let native_return = native_return;
        
        ResultOfGetPedHeadOverlay {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_spawnpoints_get_num_search_results(&self, ) -> ResultOfSpawnpointsGetNumSearchResults {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::spawnpoints_get_num_search_results(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfSpawnpointsGetNumSearchResults {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_cloth_prone(&self, p0_: i32,
p1_: bool) -> ResultOfSetPedClothProne {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_cloth_prone(
            p0_,
p1_,
        );
        
        
        ResultOfSetPedClothProne {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_number_of_ped_prop_texture_variations(&self, ped_: u32,
prop_id_: i32,
drawable_id_: i32) -> ResultOfGetNumberOfPedPropTextureVariations {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut prop_id_ = prop_id_;
let mut drawable_id_ = drawable_id_;
        let success = sdk::natives::get_number_of_ped_prop_texture_variations(
            &mut native_return,
ped_,
prop_id_,
drawable_id_,
        );
        let native_return = native_return;
        
        ResultOfGetNumberOfPedPropTextureVariations {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_driver_aggressiveness(&self, driver_: u32,
aggressiveness_: f32) -> ResultOfSetDriverAggressiveness {
    unsafe {
        let mut driver_ = driver_;
let mut aggressiveness_ = aggressiveness_;
        let success = sdk::natives::set_driver_aggressiveness(
            driver_,
aggressiveness_,
        );
        
        
        ResultOfSetDriverAggressiveness {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_ped_helmet(&self, ped_: u32,
instantly_: bool) -> ResultOfRemovePedHelmet {
    unsafe {
        let mut ped_ = ped_;
let mut instantly_ = instantly_;
        let success = sdk::natives::remove_ped_helmet(
            ped_,
instantly_,
        );
        
        
        ResultOfRemovePedHelmet {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_sitting_in_vehicle(&self, ped_: u32,
vehicle_: u32) -> ResultOfIsPedSittingInVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_ped_sitting_in_vehicle(
            &mut native_return,
ped_,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsPedSittingInVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_is_avoided_by_others(&self, p0_: i32,
p1_: bool) -> ResultOfSetPedIsAvoidedByOthers {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_is_avoided_by_others(
            p0_,
p1_,
        );
        
        
        ResultOfSetPedIsAvoidedByOthers {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_money(&self, ped_: u32,
amount_: i32) -> ResultOfSetPedMoney {
    unsafe {
        let mut ped_ = ped_;
let mut amount_ = amount_;
        let success = sdk::natives::set_ped_money(
            ped_,
amount_,
        );
        
        
        ResultOfSetPedMoney {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_desired_heading(&self, ped_: u32,
heading_: f32) -> ResultOfSetPedDesiredHeading {
    unsafe {
        let mut ped_ = ped_;
let mut heading_ = heading_;
        let success = sdk::natives::set_ped_desired_heading(
            ped_,
heading_,
        );
        
        
        ResultOfSetPedDesiredHeading {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_ped_movement_clipset(&self, ped_: u32,
p1_: f32) -> ResultOfResetPedMovementClipset {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::reset_ped_movement_clipset(
            ped_,
p1_,
        );
        
        
        ResultOfResetPedMovementClipset {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_default_secondary_tint_for_barber(&self, color_i_d_: i32) -> ResultOfGetDefaultSecondaryTintForBarber {
    unsafe {
        let mut native_return = Default::default();
let mut color_i_d_ = color_i_d_;
        let success = sdk::natives::get_default_secondary_tint_for_barber(
            &mut native_return,
color_i_d_,
        );
        let native_return = native_return;
        
        ResultOfGetDefaultSecondaryTintForBarber {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_pinned_down(&self, ped_: u32,
pinned_: bool,
i_: i32) -> ResultOfSetPedPinnedDown {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut pinned_ = pinned_;
let mut i_ = i_;
        let success = sdk::natives::set_ped_pinned_down(
            &mut native_return,
ped_,
pinned_,
i_,
        );
        let native_return = native_return;
        
        ResultOfSetPedPinnedDown {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_wetness(&self, ped_: u32,
wet_level_: f32) -> ResultOfSetPedWetness {
    unsafe {
        let mut ped_ = ped_;
let mut wet_level_ = wet_level_;
        let success = sdk::natives::set_ped_wetness(
            ped_,
wet_level_,
        );
        
        
        ResultOfSetPedWetness {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_ped_elegantly(&self, ped_: u32) -> ResultOfRemovePedElegantly {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::remove_ped_elegantly(
            &mut ped_,
        );
        let ped_ = ped_;
        
        ResultOfRemovePedElegantly {
            success,
            ret: (),
            ped_
        }
    }
}

    fn native_tell_group_peds_in_area_to_attack(&self, ped_: u32,
p1_: i32,
p2_: f32,
hash_: u32,
p4_: i32,
p5_: i32) -> ResultOfTellGroupPedsInAreaToAttack {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut hash_ = hash_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::tell_group_peds_in_area_to_attack(
            ped_,
p1_,
p2_,
hash_,
p4_,
p5_,
        );
        
        
        ResultOfTellGroupPedsInAreaToAttack {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_relationship_group_default_hash(&self, ped_: u32,
hash_: u32) -> ResultOfSetPedRelationshipGroupDefaultHash {
    unsafe {
        let mut ped_ = ped_;
let mut hash_ = hash_;
        let success = sdk::natives::set_ped_relationship_group_default_hash(
            ped_,
hash_,
        );
        
        
        ResultOfSetPedRelationshipGroupDefaultHash {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_to_ragdoll(&self, ped_: u32,
time1_: i32,
time2_: i32,
ragdoll_type_: i32,
p4_: bool,
p5_: bool,
p6_: bool) -> ResultOfSetPedToRagdoll {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut time1_ = time1_;
let mut time2_ = time2_;
let mut ragdoll_type_ = ragdoll_type_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::set_ped_to_ragdoll(
            &mut native_return,
ped_,
time1_,
time2_,
ragdoll_type_,
p4_,
p5_,
p6_,
        );
        let native_return = native_return;
        
        ResultOfSetPedToRagdoll {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_movement_clipset(&self, ped_: u32,
clip_set_: Option<String>,
transition_speed_: f32) -> ResultOfSetPedMovementClipset {
    unsafe {
        let mut ped_ = ped_;
let mut clip_set_ = sdk_helpers::create_c_string_ptr(clip_set_);
let mut transition_speed_ = transition_speed_;
        let success = sdk::natives::set_ped_movement_clipset(
            ped_,
clip_set_.as_ref().unwrap(),
transition_speed_,
        );
        
        
        ResultOfSetPedMovementClipset {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_reset_flag(&self, ped_: u32,
flag_id_: i32) -> ResultOfGetPedResetFlag {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut flag_id_ = flag_id_;
        let success = sdk::natives::get_ped_reset_flag(
            &mut native_return,
ped_,
flag_id_,
        );
        let native_return = native_return;
        
        ResultOfGetPedResetFlag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_upper_body_damage_only(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedUpperBodyDamageOnly {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_upper_body_damage_only(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedUpperBodyDamageOnly {
            success,
            ret: (),
            
        }
    }
}

    fn native_drop_ambient_prop(&self, ped_: u32) -> ResultOfDropAmbientProp {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::drop_ambient_prop(
            ped_,
        );
        
        
        ResultOfDropAmbientProp {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_ragdoll(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedCanRagdoll {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_ragdoll(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedCanRagdoll {
            success,
            ret: (),
            
        }
    }
}

    fn native_give_ped_nm_message(&self, ped_: u32) -> ResultOfGivePedNmMessage {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::give_ped_nm_message(
            ped_,
        );
        
        
        ResultOfGivePedNmMessage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_driver_ability(&self, driver_: u32,
ability_: f32) -> ResultOfSetDriverAbility {
    unsafe {
        let mut driver_ = driver_;
let mut ability_ = ability_;
        let success = sdk::natives::set_driver_ability(
            driver_,
ability_,
        );
        
        
        ResultOfSetDriverAbility {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_be_knocked_off_bike(&self, p0_: i32,
p1_: i32) -> ResultOfSetPedCanBeKnockedOffBike {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_can_be_knocked_off_bike(
            p0_,
p1_,
        );
        
        
        ResultOfSetPedCanBeKnockedOffBike {
            success,
            ret: (),
            
        }
    }
}

    fn native_spawnpoints_start_search_in_angled_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
width_: f32,
interior_flags_: i32,
scale_: f32,
duration_: i32) -> ResultOfSpawnpointsStartSearchInAngledArea {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut width_ = width_;
let mut interior_flags_ = interior_flags_;
let mut scale_ = scale_;
let mut duration_ = duration_;
        let success = sdk::natives::spawnpoints_start_search_in_angled_area(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
width_,
interior_flags_,
scale_,
duration_,
        );
        
        
        ResultOfSpawnpointsStartSearchInAngledArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_doing_driveby(&self, ped_: u32) -> ResultOfIsPedDoingDriveby {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_doing_driveby(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedDoingDriveby {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_health_pending_last_damage_event_override_flag(&self, toggle_: bool) -> ResultOfSetPedHealthPendingLastDamageEventOverrideFlag {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_health_pending_last_damage_event_override_flag(
            toggle_,
        );
        
        
        ResultOfSetPedHealthPendingLastDamageEventOverrideFlag {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_can_attack_friendly(&self, ped_: u32,
toggle_: bool,
p2_: bool) -> ResultOfSetCanAttackFriendly {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
        let success = sdk::natives::set_can_attack_friendly(
            ped_,
toggle_,
p2_,
        );
        
        
        ResultOfSetCanAttackFriendly {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_any_ped_model_being_suppressed(&self, ) -> ResultOfStopAnyPedModelBeingSuppressed {
    unsafe {
        
        let success = sdk::natives::stop_any_ped_model_being_suppressed(
            
        );
        
        
        ResultOfStopAnyPedModelBeingSuppressed {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_random_ped(&self, pos_x_: f32,
pos_y_: f32,
pos_z_: f32) -> ResultOfCreateRandomPed {
    unsafe {
        let mut native_return = Default::default();
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
        let success = sdk::natives::create_random_ped(
            &mut native_return,
pos_x_,
pos_y_,
pos_z_,
        );
        let native_return = native_return;
        
        ResultOfCreateRandomPed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_ped_scuba_gear_variation(&self, ped_: u32) -> ResultOfClearPedScubaGearVariation {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_scuba_gear_variation(
            ped_,
        );
        
        
        ResultOfClearPedScubaGearVariation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_wetness_enabled_this_frame(&self, ped_: u32) -> ResultOfSetPedWetnessEnabledThisFrame {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_wetness_enabled_this_frame(
            ped_,
        );
        
        
        ResultOfSetPedWetnessEnabledThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_relationship_group(&self, group_hash_: u32) -> ResultOfRemoveRelationshipGroup {
    unsafe {
        let mut group_hash_ = group_hash_;
        let success = sdk::natives::remove_relationship_group(
            group_hash_,
        );
        
        
        ResultOfRemoveRelationshipGroup {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_synchronized_scene_rate(&self, scene_i_d_: i32,
rate_: f32) -> ResultOfSetSynchronizedSceneRate {
    unsafe {
        let mut scene_i_d_ = scene_i_d_;
let mut rate_ = rate_;
        let success = sdk::natives::set_synchronized_scene_rate(
            scene_i_d_,
rate_,
        );
        
        
        ResultOfSetSynchronizedSceneRate {
            success,
            ret: (),
            
        }
    }
}

    fn native_spawnpoints_get_search_result_flags(&self, p0_: i32,
p1_: i32) -> ResultOfSpawnpointsGetSearchResultFlags {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::spawnpoints_get_search_result_flags(
            &mut p1_,
p0_,
        );
        let p1_ = p1_;
        
        ResultOfSpawnpointsGetSearchResultFlags {
            success,
            ret: (),
            p1_
        }
    }
}

    fn native_is_ped_sheltered(&self, ped_: u32) -> ResultOfIsPedSheltered {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_sheltered(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedSheltered {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_create_random_driver(&self, ) -> ResultOfCanCreateRandomDriver {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::can_create_random_driver(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfCanCreateRandomDriver {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_helmet_visor_up(&self, ped_: u32) -> ResultOfIsPedHelmetVisorUp {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_helmet_visor_up(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedHelmetVisorUp {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_human(&self, ped_: u32) -> ResultOfIsPedHuman {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_human(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedHuman {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_defensive_area_active(&self, ped_: u32,
p1_: bool) -> ResultOfIsPedDefensiveAreaActive {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::is_ped_defensive_area_active(
            &mut native_return,
ped_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfIsPedDefensiveAreaActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_pos_from_fired_event(&self, ped_: u32,
event_type_: i32,
out_data_: shared::MemoryBufferId) -> ResultOfGetPosFromFiredEvent {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut event_type_ = event_type_;
let mut out_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(out_data_) as *mut c_void;
        let success = sdk::natives::get_pos_from_fired_event(
            &mut native_return,
out_data_,
ped_,
event_type_,
        );
        let native_return = native_return;
let out_data_ = 0;
        
        ResultOfGetPosFromFiredEvent {
            success,
            ret: native_return,
            out_data_
        }
    }
}

    fn native_register_pedheadshot_hires(&self, ped_: u32) -> ResultOfRegisterPedheadshotHires {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::register_pedheadshot_hires(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfRegisterPedheadshotHires {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_play_gesture_anims(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedCanPlayGestureAnims {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_play_gesture_anims(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedCanPlayGestureAnims {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_as_cop(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedAsCop {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_as_cop(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedAsCop {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_getting_into_a_vehicle(&self, ped_: u32) -> ResultOfIsPedGettingIntoAvehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_getting_into_a_vehicle(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedGettingIntoAvehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_ped_last_vehicle(&self, ped_: u32) -> ResultOfResetPedLastVehicle {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::reset_ped_last_vehicle(
            ped_,
        );
        
        
        ResultOfResetPedLastVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_fleeing(&self, ped_: u32) -> ResultOfIsPedFleeing {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_fleeing(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedFleeing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_get_out_upside_down_vehicle(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedGetOutUpsideDownVehicle {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_get_out_upside_down_vehicle(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedGetOutUpsideDownVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_anim_initial_offset_position(&self, anim_dict_: Option<String>,
anim_name_: Option<String>,
x_: f32,
y_: f32,
z_: f32,
x_rot_: f32,
y_rot_: f32,
z_rot_: f32,
p8_: f32,
p9_: i32) -> ResultOfGetAnimInitialOffsetPosition {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut x_rot_ = x_rot_;
let mut y_rot_ = y_rot_;
let mut z_rot_ = z_rot_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::get_anim_initial_offset_position(
            native_return.pin_mut(),
anim_dict_.as_ref().unwrap(),
anim_name_.as_ref().unwrap(),
x_,
y_,
z_,
x_rot_,
y_rot_,
z_rot_,
p8_,
p9_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetAnimInitialOffsetPosition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_be_targetted_by_team(&self, ped_: u32,
team_: i32,
toggle_: bool) -> ResultOfSetPedCanBeTargettedByTeam {
    unsafe {
        let mut ped_ = ped_;
let mut team_ = team_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_be_targetted_by_team(
            ped_,
team_,
toggle_,
        );
        
        
        ResultOfSetPedCanBeTargettedByTeam {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_relationship_between_groups(&self, relationship_: i32,
group1_: u32,
group2_: u32) -> ResultOfSetRelationshipBetweenGroups {
    unsafe {
        let mut relationship_ = relationship_;
let mut group1_ = group1_;
let mut group2_ = group2_;
        let success = sdk::natives::set_relationship_between_groups(
            relationship_,
group1_,
group2_,
        );
        
        
        ResultOfSetRelationshipBetweenGroups {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_enveff_scale(&self, ped_: u32,
value_: f32) -> ResultOfSetPedEnveffScale {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_enveff_scale(
            ped_,
value_,
        );
        
        
        ResultOfSetPedEnveffScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_swimming_under_water(&self, ped_: u32) -> ResultOfIsPedSwimmingUnderWater {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_swimming_under_water(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedSwimmingUnderWater {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_helmet_flag(&self, ped_: u32,
helmet_flag_: i32) -> ResultOfSetPedHelmetFlag {
    unsafe {
        let mut ped_ = ped_;
let mut helmet_flag_ = helmet_flag_;
        let success = sdk::natives::set_ped_helmet_flag(
            ped_,
helmet_flag_,
        );
        
        
        ResultOfSetPedHelmetFlag {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_head_ik(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedCanHeadIk {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_head_ik(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedCanHeadIk {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_ped_weapon_firing_when_dropped(&self, ped_: u32) -> ResultOfStopPedWeaponFiringWhenDropped {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::stop_ped_weapon_firing_when_dropped(
            ped_,
        );
        
        
        ResultOfStopPedWeaponFiringWhenDropped {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_be_dragged_out(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedCanBeDraggedOut {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_be_dragged_out(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedCanBeDraggedOut {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_reset_flag(&self, ped_: u32,
flag_id_: i32,
do_reset_: bool) -> ResultOfSetPedResetFlag {
    unsafe {
        let mut ped_ = ped_;
let mut flag_id_ = flag_id_;
let mut do_reset_ = do_reset_;
        let success = sdk::natives::set_ped_reset_flag(
            ped_,
flag_id_,
do_reset_,
        );
        
        
        ResultOfSetPedResetFlag {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_heatscale_override(&self, ped_: u32,
heat_scale_: f32) -> ResultOfSetPedHeatscaleOverride {
    unsafe {
        let mut ped_ = ped_;
let mut heat_scale_ = heat_scale_;
        let success = sdk::natives::set_ped_heatscale_override(
            ped_,
heat_scale_,
        );
        
        
        ResultOfSetPedHeatscaleOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_trigger_idle_animation_on_ped(&self, ped_: u32) -> ResultOfTriggerIdleAnimationOnPed {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::trigger_idle_animation_on_ped(
            ped_,
        );
        
        
        ResultOfTriggerIdleAnimationOnPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_gesturing(&self, p0_: i32) -> ResultOfIsPedGesturing {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::is_ped_gesturing(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfIsPedGesturing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ik_target(&self, ped_: u32,
ik_index_: i32,
entity_look_at_: u32,
bone_look_at_: i32,
offset_x_: f32,
offset_y_: f32,
offset_z_: f32,
p7_: i32,
blend_in_duration_: i32,
blend_out_duration_: i32) -> ResultOfSetIkTarget {
    unsafe {
        let mut ped_ = ped_;
let mut ik_index_ = ik_index_;
let mut entity_look_at_ = entity_look_at_;
let mut bone_look_at_ = bone_look_at_;
let mut offset_x_ = offset_x_;
let mut offset_y_ = offset_y_;
let mut offset_z_ = offset_z_;
let mut p7_ = p7_;
let mut blend_in_duration_ = blend_in_duration_;
let mut blend_out_duration_ = blend_out_duration_;
        let success = sdk::natives::set_ik_target(
            ped_,
ik_index_,
entity_look_at_,
bone_look_at_,
offset_x_,
offset_y_,
offset_z_,
p7_,
blend_in_duration_,
blend_out_duration_,
        );
        
        
        ResultOfSetIkTarget {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_closest_ped(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
p4_: bool,
p5_: bool,
out_ped_: u32,
p7_: bool,
p8_: bool,
ped_type_: i32) -> ResultOfGetClosestPed {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut out_ped_ = out_ped_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut ped_type_ = ped_type_;
        let success = sdk::natives::get_closest_ped(
            &mut native_return,
&mut out_ped_,
x_,
y_,
z_,
radius_,
p4_,
p5_,
p7_,
p8_,
ped_type_,
        );
        let native_return = native_return;
let out_ped_ = out_ped_;
        
        ResultOfGetClosestPed {
            success,
            ret: native_return,
            out_ped_
        }
    }
}

    fn native_set_ped_leg_ik_mode(&self, ped_: u32,
mode_: i32) -> ResultOfSetPedLegIkMode {
    unsafe {
        let mut ped_ = ped_;
let mut mode_ = mode_;
        let success = sdk::natives::set_ped_leg_ik_mode(
            ped_,
mode_,
        );
        
        
        ResultOfSetPedLegIkMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_random_props(&self, ped_: u32) -> ResultOfSetPedRandomProps {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_random_props(
            ped_,
        );
        
        
        ResultOfSetPedRandomProps {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_peek_in_cover(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedCanPeekInCover {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_peek_in_cover(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedCanPeekInCover {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_enable_bound_ankles(&self, ped_: u32,
toggle_: bool) -> ResultOfSetEnableBoundAnkles {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_enable_bound_ankles(
            ped_,
toggle_,
        );
        
        
        ResultOfSetEnableBoundAnkles {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_tint_index_for_last_gen_hair_texture(&self, model_hash_: u32,
drawable_id_: i32,
texture_id_: i32) -> ResultOfGetTintIndexForLastGenHairTexture {
    unsafe {
        let mut native_return = Default::default();
let mut model_hash_ = model_hash_;
let mut drawable_id_ = drawable_id_;
let mut texture_id_ = texture_id_;
        let success = sdk::natives::get_tint_index_for_last_gen_hair_texture(
            &mut native_return,
model_hash_,
drawable_id_,
texture_id_,
        );
        let native_return = native_return;
        
        ResultOfGetTintIndexForLastGenHairTexture {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_planting_bomb(&self, ped_: u32) -> ResultOfIsPedPlantingBomb {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_planting_bomb(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedPlantingBomb {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_combat_ability(&self, ped_: u32,
ability_level_: i32) -> ResultOfSetPedCombatAbility {
    unsafe {
        let mut ped_ = ped_;
let mut ability_level_ = ability_level_;
        let success = sdk::natives::set_ped_combat_ability(
            ped_,
ability_level_,
        );
        
        
        ResultOfSetPedCombatAbility {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_motion_in_cover_clipset_override(&self, ped_: u32) -> ResultOfClearPedMotionInCoverClipsetOverride {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_motion_in_cover_clipset_override(
            ped_,
        );
        
        
        ResultOfClearPedMotionInCoverClipsetOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_be_shot_in_vehicle(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedCanBeShotInVehicle {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_be_shot_in_vehicle(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedCanBeShotInVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_angled_defensive_area(&self, ped_: u32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: f32,
p8_: bool,
p9_: bool) -> ResultOfSetPedAngledDefensiveArea {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::set_ped_angled_defensive_area(
            ped_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
        );
        
        
        ResultOfSetPedAngledDefensiveArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_relationship_group_hash(&self, ped_: u32,
hash_: u32) -> ResultOfSetPedRelationshipGroupHash {
    unsafe {
        let mut ped_ = ped_;
let mut hash_ = hash_;
        let success = sdk::natives::set_ped_relationship_group_hash(
            ped_,
hash_,
        );
        
        
        ResultOfSetPedRelationshipGroupHash {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_random_component_variation(&self, ped_: u32,
p1_: i32) -> ResultOfSetPedRandomComponentVariation {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_random_component_variation(
            ped_,
p1_,
        );
        
        
        ResultOfSetPedRandomComponentVariation {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_model(&self, ped_: u32,
model_hash_: u32) -> ResultOfIsPedModel {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut model_hash_ = model_hash_;
        let success = sdk::natives::is_ped_model(
            &mut native_return,
ped_,
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfIsPedModel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_cower_in_cover(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedCanCowerInCover {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_cower_in_cover(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedCanCowerInCover {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_force_step_type(&self, ped_: u32,
p1_: bool,
type_: i32,
p3_: i32) -> ResultOfSetForceStepType {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut type_ = type_;
let mut p3_ = p3_;
        let success = sdk::natives::set_force_step_type(
            ped_,
p1_,
type_,
p3_,
        );
        
        
        ResultOfSetForceStepType {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_relationship_group_exist(&self, group_hash_: u32) -> ResultOfDoesRelationshipGroupExist {
    unsafe {
        let mut native_return = Default::default();
let mut group_hash_ = group_hash_;
        let success = sdk::natives::does_relationship_group_exist(
            &mut native_return,
group_hash_,
        );
        let native_return = native_return;
        
        ResultOfDoesRelationshipGroupExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_head_blend_palette_color(&self, ped_: u32,
r_: i32,
g_: i32,
b_: i32,
id_: i32) -> ResultOfSetHeadBlendPaletteColor {
    unsafe {
        let mut ped_ = ped_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
let mut id_ = id_;
        let success = sdk::natives::set_head_blend_palette_color(
            ped_,
r_,
g_,
b_,
id_,
        );
        
        
        ResultOfSetHeadBlendPaletteColor {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_ped_restricted_vehicle_visibility_tracking(&self, ped_: u32,
p1_: bool) -> ResultOfRequestPedRestrictedVehicleVisibilityTracking {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::request_ped_restricted_vehicle_visibility_tracking(
            ped_,
p1_,
        );
        
        
        ResultOfRequestPedRestrictedVehicleVisibilityTracking {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_primary_lookat(&self, ped_: u32,
look_at_: u32) -> ResultOfSetPedPrimaryLookat {
    unsafe {
        let mut ped_ = ped_;
let mut look_at_ = look_at_;
        let success = sdk::natives::set_ped_primary_lookat(
            ped_,
look_at_,
        );
        
        
        ResultOfSetPedPrimaryLookat {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_dead_ped_pickup_coords(&self, ped_: u32,
p1_: f32,
p2_: f32) -> ResultOfGetDeadPedPickupCoords {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::get_dead_ped_pickup_coords(
            native_return.pin_mut(),
ped_,
p1_,
p2_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetDeadPedPickupCoords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_all_ped_props(&self, ped_: u32,
p1_: i32) -> ResultOfClearAllPedProps {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::clear_all_ped_props(
            ped_,
p1_,
        );
        
        
        ResultOfClearAllPedProps {
            success,
            ret: (),
            
        }
    }
}

    fn native_take_ownership_of_synchronized_scene(&self, scene_: i32) -> ResultOfTakeOwnershipOfSynchronizedScene {
    unsafe {
        let mut scene_ = scene_;
        let success = sdk::natives::take_ownership_of_synchronized_scene(
            scene_,
        );
        
        
        ResultOfTakeOwnershipOfSynchronizedScene {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_group_formation(&self, group_id_: i32,
formation_type_: i32) -> ResultOfSetGroupFormation {
    unsafe {
        let mut group_id_ = group_id_;
let mut formation_type_ = formation_type_;
        let success = sdk::natives::set_group_formation(
            group_id_,
formation_type_,
        );
        
        
        ResultOfSetGroupFormation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_armour(&self, ped_: u32,
amount_: i32) -> ResultOfSetPedArmour {
    unsafe {
        let mut ped_ = ped_;
let mut amount_ = amount_;
        let success = sdk::natives::set_ped_armour(
            ped_,
amount_,
        );
        
        
        ResultOfSetPedArmour {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_should_probe_for_scenario_exits_in_one_frame(&self, p0_: i32,
p1_: bool) -> ResultOfSetPedShouldProbeForScenarioExitsInOneFrame {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_should_probe_for_scenario_exits_in_one_frame(
            p0_,
p1_,
        );
        
        
        ResultOfSetPedShouldProbeForScenarioExitsInOneFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_jumping(&self, ped_: u32) -> ResultOfIsPedJumping {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_jumping(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedJumping {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_head_overlay_num(&self, overlay_i_d_: i32) -> ResultOfGetPedHeadOverlayNum {
    unsafe {
        let mut native_return = Default::default();
let mut overlay_i_d_ = overlay_i_d_;
        let success = sdk::natives::get_ped_head_overlay_num(
            &mut native_return,
overlay_i_d_,
        );
        let native_return = native_return;
        
        ResultOfGetPedHeadOverlayNum {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_nearby_vehicles(&self, ped_: u32,
size_and_vehs_: shared::MemoryBufferId) -> ResultOfGetPedNearbyVehicles {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut size_and_vehs_ = self.memory_buffers.borrow_mut().get_mut_ptr(size_and_vehs_) as *mut c_void;
        let success = sdk::natives::get_ped_nearby_vehicles(
            &mut native_return,
size_and_vehs_,
ped_,
        );
        let native_return = native_return;
let size_and_vehs_ = 0;
        
        ResultOfGetPedNearbyVehicles {
            success,
            ret: native_return,
            size_and_vehs_
        }
    }
}

    fn native_is_ped_ducking(&self, ped_: u32) -> ResultOfIsPedDucking {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_ducking(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedDucking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_running_melee_task(&self, ped_: u32) -> ResultOfIsPedRunningMeleeTask {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_running_melee_task(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedRunningMeleeTask {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_num_ped_makeup_tints(&self, ) -> ResultOfGetNumPedMakeupTints {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_num_ped_makeup_tints(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetNumPedMakeupTints {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_enable_ped_enveff_scale(&self, ped_: u32,
toggle_: bool) -> ResultOfSetEnablePedEnveffScale {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_enable_ped_enveff_scale(
            ped_,
toggle_,
        );
        
        
        ResultOfSetEnablePedEnveffScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_zero_mass_in_collisions(&self, ped_: u32) -> ResultOfForceZeroMassInCollisions {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::force_zero_mass_in_collisions(
            ped_,
        );
        
        
        ResultOfForceZeroMassInCollisions {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_scenario_blocking_areas(&self, ) -> ResultOfRemoveScenarioBlockingAreas {
    unsafe {
        
        let success = sdk::natives::remove_scenario_blocking_areas(
            
        );
        
        
        ResultOfRemoveScenarioBlockingAreas {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_ped(&self, ped_type_: i32,
model_hash_: u32,
x_: f32,
y_: f32,
z_: f32,
heading_: f32,
is_network_: bool,
b_script_host_ped_: bool) -> ResultOfCreatePed {
    unsafe {
        let mut native_return = Default::default();
let mut ped_type_ = ped_type_;
let mut model_hash_ = model_hash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut is_network_ = is_network_;
let mut b_script_host_ped_ = b_script_host_ped_;
        let success = sdk::natives::create_ped(
            &mut native_return,
ped_type_,
model_hash_,
x_,
y_,
z_,
heading_,
is_network_,
b_script_host_ped_,
        );
        let native_return = native_return;
        
        ResultOfCreatePed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_enveff_color_modulator(&self, ped_: u32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfSetPedEnveffColorModulator {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_ped_enveff_color_modulator(
            ped_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfSetPedEnveffColorModulator {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_prone(&self, ped_: u32) -> ResultOfIsPedProne {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_prone(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedProne {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_facing_ped(&self, ped_: u32,
other_ped_: u32,
angle_: f32) -> ResultOfIsPedFacingPed {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut other_ped_ = other_ped_;
let mut angle_ = angle_;
        let success = sdk::natives::is_ped_facing_ped(
            &mut native_return,
ped_,
other_ped_,
angle_,
        );
        let native_return = native_return;
        
        ResultOfIsPedFacingPed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_dies_in_sinking_vehicle(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedDiesInSinkingVehicle {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_dies_in_sinking_vehicle(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedDiesInSinkingVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_last_damage_bone(&self, ped_: u32,
out_bone_: i32) -> ResultOfGetPedLastDamageBone {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut out_bone_ = out_bone_;
        let success = sdk::natives::get_ped_last_damage_bone(
            &mut native_return,
&mut out_bone_,
ped_,
        );
        let native_return = native_return;
let out_bone_ = out_bone_;
        
        ResultOfGetPedLastDamageBone {
            success,
            ret: native_return,
            out_bone_
        }
    }
}

    fn native_set_ped_using_action_mode(&self, ped_: u32,
p1_: bool,
p2_: i32,
action_: Option<String>) -> ResultOfSetPedUsingActionMode {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut action_ = sdk_helpers::create_c_string_ptr(action_);
        let success = sdk::natives::set_ped_using_action_mode(
            ped_,
p1_,
p2_,
action_.as_ref().unwrap(),
        );
        
        
        ResultOfSetPedUsingActionMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_to_ragdoll_with_fall(&self, ped_: u32,
time_: i32,
p2_: i32,
ragdoll_type_: i32,
x_: f32,
y_: f32,
z_: f32,
velocity_: f32,
p8_: f32,
p9_: f32,
p10_: f32,
p11_: f32,
p12_: f32,
p13_: f32) -> ResultOfSetPedToRagdollWithFall {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut time_ = time_;
let mut p2_ = p2_;
let mut ragdoll_type_ = ragdoll_type_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut velocity_ = velocity_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
let mut p12_ = p12_;
let mut p13_ = p13_;
        let success = sdk::natives::set_ped_to_ragdoll_with_fall(
            &mut native_return,
ped_,
time_,
p2_,
ragdoll_type_,
x_,
y_,
z_,
velocity_,
p8_,
p9_,
p10_,
p11_,
p12_,
p13_,
        );
        let native_return = native_return;
        
        ResultOfSetPedToRagdollWithFall {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_synchronized_scene_rate(&self, scene_i_d_: i32) -> ResultOfGetSynchronizedSceneRate {
    unsafe {
        let mut native_return = Default::default();
let mut scene_i_d_ = scene_i_d_;
        let success = sdk::natives::get_synchronized_scene_rate(
            &mut native_return,
scene_i_d_,
        );
        let native_return = native_return;
        
        ResultOfGetSynchronizedSceneRate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_fatally_injured(&self, ped_: u32) -> ResultOfIsPedFatallyInjured {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_fatally_injured(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedFatallyInjured {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_ragdoll_blocking_flags(&self, ped_: u32,
blocking_flag_: i32) -> ResultOfClearRagdollBlockingFlags {
    unsafe {
        let mut ped_ = ped_;
let mut blocking_flag_ = blocking_flag_;
        let success = sdk::natives::clear_ragdoll_blocking_flags(
            ped_,
blocking_flag_,
        );
        
        
        ResultOfClearRagdollBlockingFlags {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pop_control_sphere_this_frame(&self, x_: f32,
y_: f32,
z_: f32,
min_: f32,
max_: f32) -> ResultOfSetPopControlSphereThisFrame {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut min_ = min_;
let mut max_ = max_;
        let success = sdk::natives::set_pop_control_sphere_this_frame(
            x_,
y_,
z_,
min_,
max_,
        );
        
        
        ResultOfSetPopControlSphereThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_alternate_movement_anim(&self, ped_: u32,
stance_: i32,
p2_: f32) -> ResultOfClearPedAlternateMovementAnim {
    unsafe {
        let mut ped_ = ped_;
let mut stance_ = stance_;
let mut p2_ = p2_;
        let success = sdk::natives::clear_ped_alternate_movement_anim(
            ped_,
stance_,
p2_,
        );
        
        
        ResultOfClearPedAlternateMovementAnim {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_synchronized_scene_looped(&self, scene_i_d_: i32,
toggle_: bool) -> ResultOfSetSynchronizedSceneLooped {
    unsafe {
        let mut scene_i_d_ = scene_i_d_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_synchronized_scene_looped(
            scene_i_d_,
toggle_,
        );
        
        
        ResultOfSetSynchronizedSceneLooped {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_allowed_to_duck(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedAllowedToDuck {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_allowed_to_duck(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedAllowedToDuck {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_pedheadshot_txd_string(&self, id_: i32) -> ResultOfGetPedheadshotTxdString {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut id_ = id_;
        let success = sdk::natives::get_pedheadshot_txd_string(
            native_return.pin_mut(),
id_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetPedheadshotTxdString {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_alertness(&self, ped_: u32,
value_: i32) -> ResultOfSetPedAlertness {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_alertness(
            ped_,
value_,
        );
        
        
        ResultOfSetPedAlertness {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_lod_multiplier(&self, ped_: u32,
multiplier_: f32) -> ResultOfSetPedLodMultiplier {
    unsafe {
        let mut ped_ = ped_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_ped_lod_multiplier(
            ped_,
multiplier_,
        );
        
        
        ResultOfSetPedLodMultiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_performing_melee_action(&self, ped_: u32) -> ResultOfIsPedPerformingMeleeAction {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_performing_melee_action(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedPerformingMeleeAction {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_gesture_group(&self, ped_: u32,
anim_group_gesture_: Option<String>) -> ResultOfSetPedGestureGroup {
    unsafe {
        let mut ped_ = ped_;
let mut anim_group_gesture_ = sdk_helpers::create_c_string_ptr(anim_group_gesture_);
        let success = sdk::natives::set_ped_gesture_group(
            ped_,
anim_group_gesture_.as_ref().unwrap(),
        );
        
        
        ResultOfSetPedGestureGroup {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_combat_movement(&self, ped_: u32) -> ResultOfGetPedCombatMovement {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_combat_movement(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedCombatMovement {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_driver_racing_modifier(&self, driver_: u32,
modifier_: f32) -> ResultOfSetDriverRacingModifier {
    unsafe {
        let mut driver_ = driver_;
let mut modifier_ = modifier_;
        let success = sdk::natives::set_driver_racing_modifier(
            driver_,
modifier_,
        );
        
        
        ResultOfSetDriverRacingModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_enable_handcuffs(&self, ped_: u32,
toggle_: bool) -> ResultOfSetEnableHandcuffs {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_enable_handcuffs(
            ped_,
toggle_,
        );
        
        
        ResultOfSetEnableHandcuffs {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_ragdoll_from_player_impact(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedCanRagdollFromPlayerImpact {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_ragdoll_from_player_impact(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedCanRagdollFromPlayerImpact {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_ped_map_collision(&self, ped_: u32) -> ResultOfSetDisablePedMapCollision {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_disable_ped_map_collision(
            ped_,
        );
        
        
        ResultOfSetDisablePedMapCollision {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_conversation_ped_dead(&self, ped_: u32) -> ResultOfIsConversationPedDead {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_conversation_ped_dead(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsConversationPedDead {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_extracted_displacement(&self, ped_: u32,
world_space_: bool) -> ResultOfGetPedExtractedDisplacement {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut ped_ = ped_;
let mut world_space_ = world_space_;
        let success = sdk::natives::get_ped_extracted_displacement(
            native_return.pin_mut(),
ped_,
world_space_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetPedExtractedDisplacement {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_hair_tint_for_barber(&self, color_i_d_: i32) -> ResultOfIsPedHairTintForBarber {
    unsafe {
        let mut native_return = Default::default();
let mut color_i_d_ = color_i_d_;
        let success = sdk::natives::is_ped_hair_tint_for_barber(
            &mut native_return,
color_i_d_,
        );
        let native_return = native_return;
        
        ResultOfIsPedHairTintForBarber {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_prop_texture_index(&self, ped_: u32,
component_id_: i32) -> ResultOfGetPedPropTextureIndex {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut component_id_ = component_id_;
        let success = sdk::natives::get_ped_prop_texture_index(
            &mut native_return,
ped_,
component_id_,
        );
        let native_return = native_return;
        
        ResultOfGetPedPropTextureIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_model_is_suppressed(&self, model_hash_: u32,
toggle_: bool) -> ResultOfSetPedModelIsSuppressed {
    unsafe {
        let mut model_hash_ = model_hash_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_model_is_suppressed(
            model_hash_,
toggle_,
        );
        
        
        ResultOfSetPedModelIsSuppressed {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_facial_anim(&self, ped_: u32,
anim_name_: Option<String>,
anim_dict_: Option<String>) -> ResultOfPlayFacialAnim {
    unsafe {
        let mut ped_ = ped_;
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
        let success = sdk::natives::play_facial_anim(
            ped_,
anim_name_.as_ref().unwrap(),
anim_dict_.as_ref().unwrap(),
        );
        
        
        ResultOfPlayFacialAnim {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_decorations_leave_scars(&self, ped_: u32) -> ResultOfClearPedDecorationsLeaveScars {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_decorations_leave_scars(
            ped_,
        );
        
        
        ResultOfClearPedDecorationsLeaveScars {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_running_ragdoll_task(&self, ped_: u32) -> ResultOfIsPedRunningRagdollTask {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_running_ragdoll_task(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedRunningRagdollTask {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_palette_variation(&self, ped_: u32,
component_id_: i32) -> ResultOfGetPedPaletteVariation {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut component_id_ = component_id_;
        let success = sdk::natives::get_ped_palette_variation(
            &mut native_return,
ped_,
component_id_,
        );
        let native_return = native_return;
        
        ResultOfGetPedPaletteVariation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_block_ped_from_generating_dead_body_events_when_dead(&self, ped_: u32,
toggle_: bool) -> ResultOfBlockPedFromGeneratingDeadBodyEventsWhenDead {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::block_ped_from_generating_dead_body_events_when_dead(
            ped_,
toggle_,
        );
        
        
        ResultOfBlockPedFromGeneratingDeadBodyEventsWhenDead {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_defensive_sphere_attached_to_vehicle(&self, ped_: u32,
target_: u32,
x_offset_: f32,
y_offset_: f32,
z_offset_: f32,
radius_: f32,
p6_: bool) -> ResultOfSetPedDefensiveSphereAttachedToVehicle {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
let mut x_offset_ = x_offset_;
let mut y_offset_ = y_offset_;
let mut z_offset_ = z_offset_;
let mut radius_ = radius_;
let mut p6_ = p6_;
        let success = sdk::natives::set_ped_defensive_sphere_attached_to_vehicle(
            ped_,
target_,
x_offset_,
y_offset_,
z_offset_,
radius_,
p6_,
        );
        
        
        ResultOfSetPedDefensiveSphereAttachedToVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_synchronized_scene_phase(&self, scene_i_d_: i32) -> ResultOfGetSynchronizedScenePhase {
    unsafe {
        let mut native_return = Default::default();
let mut scene_i_d_ = scene_i_d_;
        let success = sdk::natives::get_synchronized_scene_phase(
            &mut native_return,
scene_i_d_,
        );
        let native_return = native_return;
        
        ResultOfGetSynchronizedScenePhase {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_action_mode_asset_loaded(&self, asset_: Option<String>) -> ResultOfHasActionModeAssetLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut asset_ = sdk_helpers::create_c_string_ptr(asset_);
        let success = sdk::natives::has_action_mode_asset_loaded(
            &mut native_return,
asset_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfHasActionModeAssetLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_num_ped_hair_tints(&self, ) -> ResultOfGetNumPedHairTints {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_num_ped_hair_tints(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetNumPedHairTints {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_all_ped_vehicle_forced_seat_usage(&self, ped_: u32) -> ResultOfClearAllPedVehicleForcedSeatUsage {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_all_ped_vehicle_forced_seat_usage(
            ped_,
        );
        
        
        ResultOfClearAllPedVehicleForcedSeatUsage {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_mount(&self, ped_: u32) -> ResultOfGetMount {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_mount(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetMount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_component_variation_valid(&self, ped_: u32,
component_id_: i32,
drawable_id_: i32,
texture_id_: i32) -> ResultOfIsPedComponentVariationValid {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut component_id_ = component_id_;
let mut drawable_id_ = drawable_id_;
let mut texture_id_ = texture_id_;
        let success = sdk::natives::is_ped_component_variation_valid(
            &mut native_return,
ped_,
component_id_,
drawable_id_,
texture_id_,
        );
        let native_return = native_return;
        
        ResultOfIsPedComponentVariationValid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_lose_props_on_damage(&self, ped_: u32,
toggle_: bool,
p2_: i32) -> ResultOfSetPedCanLosePropsOnDamage {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
        let success = sdk::natives::set_ped_can_lose_props_on_damage(
            ped_,
toggle_,
p2_,
        );
        
        
        ResultOfSetPedCanLosePropsOnDamage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_reserve_parachute_tint_index(&self, ped_: u32,
p1_: i32) -> ResultOfSetPedReserveParachuteTintIndex {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_reserve_parachute_tint_index(
            ped_,
p1_,
        );
        
        
        ResultOfSetPedReserveParachuteTintIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_pedheadshot_img_upload_succeeded(&self, ) -> ResultOfHasPedheadshotImgUploadSucceeded {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_pedheadshot_img_upload_succeeded(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfHasPedheadshotImgUploadSucceeded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_enable_crew_emblem(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedEnableCrewEmblem {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_enable_crew_emblem(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedEnableCrewEmblem {
            success,
            ret: (),
            
        }
    }
}

    fn native_clone_ped_to_target(&self, ped_: u32,
target_ped_: u32) -> ResultOfClonePedToTarget {
    unsafe {
        let mut ped_ = ped_;
let mut target_ped_ = target_ped_;
        let success = sdk::natives::clone_ped_to_target(
            ped_,
target_ped_,
        );
        
        
        ResultOfClonePedToTarget {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_stealth_mode_asset_loaded(&self, asset_: Option<String>) -> ResultOfHasStealthModeAssetLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut asset_ = sdk_helpers::create_c_string_ptr(asset_);
        let success = sdk::natives::has_stealth_mode_asset_loaded(
            &mut native_return,
asset_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfHasStealthModeAssetLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_ai_weapon_damage_modifier(&self, ) -> ResultOfResetAiWeaponDamageModifier {
    unsafe {
        
        let success = sdk::natives::reset_ai_weapon_damage_modifier(
            
        );
        
        
        ResultOfResetAiWeaponDamageModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_default_secondary_tint_for_creator(&self, color_id_: i32) -> ResultOfGetDefaultSecondaryTintForCreator {
    unsafe {
        let mut native_return = Default::default();
let mut color_id_ = color_id_;
        let success = sdk::natives::get_default_secondary_tint_for_creator(
            &mut native_return,
color_id_,
        );
        let native_return = native_return;
        
        ResultOfGetDefaultSecondaryTintForCreator {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_create_random_bike_rider(&self, ) -> ResultOfCanCreateRandomBikeRider {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::can_create_random_bike_rider(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfCanCreateRandomBikeRider {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_ped_in_combat_see_target(&self, ped_: u32,
target_: u32) -> ResultOfCanPedInCombatSeeTarget {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut target_ = target_;
        let success = sdk::natives::can_ped_in_combat_see_target(
            &mut native_return,
ped_,
target_,
        );
        let native_return = native_return;
        
        ResultOfCanPedInCombatSeeTarget {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_parachute_tint_index(&self, ped_: u32,
out_tint_index_: i32) -> ResultOfGetPedParachuteTintIndex {
    unsafe {
        let mut ped_ = ped_;
let mut out_tint_index_ = out_tint_index_;
        let success = sdk::natives::get_ped_parachute_tint_index(
            &mut out_tint_index_,
ped_,
        );
        let out_tint_index_ = out_tint_index_;
        
        ResultOfGetPedParachuteTintIndex {
            success,
            ret: (),
            out_tint_index_
        }
    }
}

    fn native_set_ped_steers_around_vehicles(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedSteersAroundVehicles {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_steers_around_vehicles(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedSteersAroundVehicles {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_relationship_between_peds(&self, ped1_: u32,
ped2_: u32) -> ResultOfGetRelationshipBetweenPeds {
    unsafe {
        let mut native_return = Default::default();
let mut ped1_ = ped1_;
let mut ped2_ = ped2_;
        let success = sdk::natives::get_relationship_between_peds(
            &mut native_return,
ped1_,
ped2_,
        );
        let native_return = native_return;
        
        ResultOfGetRelationshipBetweenPeds {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_pedheadshot_img_upload_available(&self, ) -> ResultOfIsPedheadshotImgUploadAvailable {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_pedheadshot_img_upload_available(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsPedheadshotImgUploadAvailable {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_performing_a_counter_attack(&self, ped_: u32) -> ResultOfIsPedPerformingAcounterAttack {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_performing_a_counter_attack(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedPerformingAcounterAttack {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_suffers_critical_hits(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedSuffersCriticalHits {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_suffers_critical_hits(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedSuffersCriticalHits {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_use_auto_conversation_lookat(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedCanUseAutoConversationLookat {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_use_auto_conversation_lookat(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedCanUseAutoConversationLookat {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_injured_on_ground_behaviour(&self, ped_: u32,
p1_: f32) -> ResultOfSetPedInjuredOnGroundBehaviour {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_injured_on_ground_behaviour(
            ped_,
p1_,
        );
        
        
        ResultOfSetPedInjuredOnGroundBehaviour {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_on_specific_vehicle(&self, ped_: u32,
vehicle_: u32) -> ResultOfIsPedOnSpecificVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_ped_on_specific_vehicle(
            &mut native_return,
ped_,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsPedOnSpecificVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_should_play_directed_normal_scenario_exit(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfSetPedShouldPlayDirectedNormalScenarioExit {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_ped_should_play_directed_normal_scenario_exit(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOfSetPedShouldPlayDirectedNormalScenarioExit {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_drive_by_clipset_override(&self, ped_: u32,
clipset_: Option<String>) -> ResultOfSetPedDriveByClipsetOverride {
    unsafe {
        let mut ped_ = ped_;
let mut clipset_ = sdk_helpers::create_c_string_ptr(clipset_);
        let success = sdk::natives::set_ped_drive_by_clipset_override(
            ped_,
clipset_.as_ref().unwrap(),
        );
        
        
        ResultOfSetPedDriveByClipsetOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_instant_leg_ik_setup(&self, ped_: u32) -> ResultOfForceInstantLegIkSetup {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::force_instant_leg_ik_setup(
            ped_,
        );
        
        
        ResultOfForceInstantLegIkSetup {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_hair_tint_for_creator(&self, color_id_: i32) -> ResultOfIsPedHairTintForCreator {
    unsafe {
        let mut native_return = Default::default();
let mut color_id_ = color_id_;
        let success = sdk::natives::is_ped_hair_tint_for_creator(
            &mut native_return,
color_id_,
        );
        let native_return = native_return;
        
        ResultOfIsPedHairTintForCreator {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_ped_from_group(&self, ped_: u32) -> ResultOfRemovePedFromGroup {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::remove_ped_from_group(
            ped_,
        );
        
        
        ResultOfRemovePedFromGroup {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_switch_weapon(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedCanSwitchWeapon {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_switch_weapon(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedCanSwitchWeapon {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_stay_in_vehicle_when_jacked(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedStayInVehicleWhenJacked {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_stay_in_vehicle_when_jacked(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedStayInVehicleWhenJacked {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_non_creation_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOfSetPedNonCreationArea {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::set_ped_non_creation_area(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        
        
        ResultOfSetPedNonCreationArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_mp_light(&self, ped_: u32,
toggle_: bool) -> ResultOfEnableMpLight {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::enable_mp_light(
            ped_,
toggle_,
        );
        
        
        ResultOfEnableMpLight {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_dies_instantly_in_water(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedDiesInstantlyInWater {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_dies_instantly_in_water(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedDiesInstantlyInWater {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_should_play_flee_scenario_exit(&self, ped_: u32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfSetPedShouldPlayFleeScenarioExit {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_ped_should_play_flee_scenario_exit(
            &mut native_return,
ped_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOfSetPedShouldPlayFleeScenarioExit {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_apply_ped_blood_specific(&self, ped_: u32,
p1_: i32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: i32,
p7_: f32,
p8_: Option<String>) -> ResultOfApplyPedBloodSpecific {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = sdk_helpers::create_c_string_ptr(p8_);
        let success = sdk::natives::apply_ped_blood_specific(
            ped_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_.as_ref().unwrap(),
        );
        
        
        ResultOfApplyPedBloodSpecific {
            success,
            ret: (),
            
        }
    }
}

    fn native_clone_ped(&self, ped_: u32,
is_network_: bool,
b_script_host_ped_: bool,
copy_head_blend_flag_: bool) -> ResultOfClonePed {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut is_network_ = is_network_;
let mut b_script_host_ped_ = b_script_host_ped_;
let mut copy_head_blend_flag_ = copy_head_blend_flag_;
        let success = sdk::natives::clone_ped(
            &mut native_return,
ped_,
is_network_,
b_script_host_ped_,
copy_head_blend_flag_,
        );
        let native_return = native_return;
        
        ResultOfClonePed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_visual_field_center_angle(&self, ped_: u32) -> ResultOfGetPedVisualFieldCenterAngle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_visual_field_center_angle(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedVisualFieldCenterAngle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_fm_female_shop_ped_apparel_item_index(&self, p0_: i32) -> ResultOfGetFmFemaleShopPedApparelItemIndex {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_fm_female_shop_ped_apparel_item_index(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfGetFmFemaleShopPedApparelItemIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_ragdoll_on_collision(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedRagdollOnCollision {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_ragdoll_on_collision(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedRagdollOnCollision {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_pedheadshot_img_upload(&self, id_: i32) -> ResultOfRequestPedheadshotImgUpload {
    unsafe {
        let mut native_return = Default::default();
let mut id_ = id_;
        let success = sdk::natives::request_pedheadshot_img_upload(
            &mut native_return,
id_,
        );
        let native_return = native_return;
        
        ResultOfRequestPedheadshotImgUpload {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_id_range(&self, ped_: u32,
value_: f32) -> ResultOfSetPedIdRange {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_id_range(
            ped_,
value_,
        );
        
        
        ResultOfSetPedIdRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_helmet_texture_index(&self, ped_: u32,
texture_index_: i32) -> ResultOfSetPedHelmetTextureIndex {
    unsafe {
        let mut ped_ = ped_;
let mut texture_index_ = texture_index_;
        let success = sdk::natives::set_ped_helmet_texture_index(
            ped_,
texture_index_,
        );
        
        
        ResultOfSetPedHelmetTextureIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_group_index(&self, ped_: u32) -> ResultOfGetPedGroupIndex {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_group_index(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedGroupIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_should_play_immediate_scenario_exit(&self, ped_: u32) -> ResultOfSetPedShouldPlayImmediateScenarioExit {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_should_play_immediate_scenario_exit(
            ped_,
        );
        
        
        ResultOfSetPedShouldPlayImmediateScenarioExit {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_current_head_prop_a_helmet(&self, p0_: i32) -> ResultOfIsCurrentHeadPropAhelmet {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::is_current_head_prop_a_helmet(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfIsCurrentHeadPropAhelmet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_ped_motion_state(&self, ped_: u32,
motion_state_hash_: u32,
p2_: bool,
p3_: i32,
p4_: bool) -> ResultOfForcePedMotionState {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut motion_state_hash_ = motion_state_hash_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::force_ped_motion_state(
            &mut native_return,
ped_,
motion_state_hash_,
p2_,
p3_,
p4_,
        );
        let native_return = native_return;
        
        ResultOfForcePedMotionState {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_seeing_range(&self, ped_: u32,
value_: f32) -> ResultOfSetPedSeeingRange {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_seeing_range(
            ped_,
value_,
        );
        
        
        ResultOfSetPedSeeingRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_torso_ik(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedCanTorsoIk {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_can_torso_ik(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedCanTorsoIk {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_allow_hurt_combat_for_all_mission_peds(&self, toggle_: bool) -> ResultOfSetPedAllowHurtCombatForAllMissionPeds {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_allow_hurt_combat_for_all_mission_peds(
            toggle_,
        );
        
        
        ResultOfSetPedAllowHurtCombatForAllMissionPeds {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_wearing_helmet(&self, ped_: u32) -> ResultOfIsPedWearingHelmet {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_wearing_helmet(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedWearingHelmet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_relationship_group(&self, name_: Option<String>,
group_hash_: u32) -> ResultOfAddRelationshipGroup {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut group_hash_ = group_hash_;
        let success = sdk::natives::add_relationship_group(
            &mut native_return,
&mut group_hash_,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
let group_hash_ = group_hash_;
        
        ResultOfAddRelationshipGroup {
            success,
            ret: native_return,
            group_hash_
        }
    }
}

    fn native_is_ped_blush_tint_for_creator(&self, color_id_: i32) -> ResultOfIsPedBlushTintForCreator {
    unsafe {
        let mut native_return = Default::default();
let mut color_id_ = color_id_;
        let success = sdk::natives::is_ped_blush_tint_for_creator(
            &mut native_return,
color_id_,
        );
        let native_return = native_return;
        
        ResultOfIsPedBlushTintForCreator {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_spawnpoints_is_search_failed(&self, ) -> ResultOfSpawnpointsIsSearchFailed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::spawnpoints_is_search_failed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfSpawnpointsIsSearchFailed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_can_torso_react_ik(&self, ped_: u32,
p1_: bool) -> ResultOfSetPedCanTorsoReactIk {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_can_torso_react_ik(
            ped_,
p1_,
        );
        
        
        ResultOfSetPedCanTorsoReactIk {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_max_health(&self, ped_: u32,
value_: i32) -> ResultOfSetPedMaxHealth {
    unsafe {
        let mut ped_ = ped_;
let mut value_ = value_;
        let success = sdk::natives::set_ped_max_health(
            ped_,
value_,
        );
        
        
        ResultOfSetPedMaxHealth {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_current_move_blend_ratio(&self, ped_: u32,
speed_x_: f32,
speed_y_: f32) -> ResultOfGetPedCurrentMoveBlendRatio {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut speed_x_ = speed_x_;
let mut speed_y_ = speed_y_;
        let success = sdk::natives::get_ped_current_move_blend_ratio(
            &mut native_return,
&mut speed_x_,
&mut speed_y_,
ped_,
        );
        let native_return = native_return;
let speed_x_ = speed_x_;
let speed_y_ = speed_y_;
        
        ResultOfGetPedCurrentMoveBlendRatio {
            success,
            ret: native_return,
            speed_x_,
speed_y_
        }
    }
}

    fn native_get_ped_alertness(&self, ped_: u32) -> ResultOfGetPedAlertness {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_alertness(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedAlertness {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_into_vehicle(&self, ped_: u32,
vehicle_: u32,
seat_index_: i32) -> ResultOfSetPedIntoVehicle {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut seat_index_ = seat_index_;
        let success = sdk::natives::set_ped_into_vehicle(
            ped_,
vehicle_,
seat_index_,
        );
        
        
        ResultOfSetPedIntoVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_release_ped_preload_prop_data(&self, ped_: u32) -> ResultOfReleasePedPreloadPropData {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::release_ped_preload_prop_data(
            ped_,
        );
        
        
        ResultOfReleasePedPreloadPropData {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_play_viseme_anims(&self, ped_: u32,
toggle_: bool,
p2_: bool) -> ResultOfSetPedCanPlayVisemeAnims {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
        let success = sdk::natives::set_ped_can_play_viseme_anims(
            ped_,
toggle_,
p2_,
        );
        
        
        ResultOfSetPedCanPlayVisemeAnims {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_ped_is_entering(&self, ped_: u32) -> ResultOfGetVehiclePedIsEntering {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_vehicle_ped_is_entering(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetVehiclePedIsEntering {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_was_ped_killed_by_stealth(&self, ped_: u32) -> ResultOfWasPedKilledByStealth {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::was_ped_killed_by_stealth(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfWasPedKilledByStealth {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_enable_scuba(&self, ped_: u32,
toggle_: bool) -> ResultOfSetEnableScuba {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_enable_scuba(
            ped_,
toggle_,
        );
        
        
        ResultOfSetEnableScuba {
            success,
            ret: (),
            
        }
    }
}

    fn native_special_function_do_not_use(&self, ped_: u32,
p1_: bool) -> ResultOfSpecialFunctionDoNotUse {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::special_function_do_not_use(
            ped_,
p1_,
        );
        
        
        ResultOfSpecialFunctionDoNotUse {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_defensive_sphere_attached_to_ped(&self, ped_: u32,
target_: u32,
x_offset_: f32,
y_offset_: f32,
z_offset_: f32,
radius_: f32,
p6_: bool) -> ResultOfSetPedDefensiveSphereAttachedToPed {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
let mut x_offset_ = x_offset_;
let mut y_offset_ = y_offset_;
let mut z_offset_ = z_offset_;
let mut radius_ = radius_;
let mut p6_ = p6_;
        let success = sdk::natives::set_ped_defensive_sphere_attached_to_ped(
            ped_,
target_,
x_offset_,
y_offset_,
z_offset_,
radius_,
p6_,
        );
        
        
        ResultOfSetPedDefensiveSphereAttachedToPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_combat_range(&self, ped_: u32) -> ResultOfGetPedCombatRange {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_combat_range(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedCombatRange {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_min_ground_time_for_stungun(&self, ped_: u32,
ms_: i32) -> ResultOfSetPedMinGroundTimeForStungun {
    unsafe {
        let mut ped_ = ped_;
let mut ms_ = ms_;
        let success = sdk::natives::set_ped_min_ground_time_for_stungun(
            ped_,
ms_,
        );
        
        
        ResultOfSetPedMinGroundTimeForStungun {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_allow_stunt_jump_camera(&self, ped_: u32,
toggle_: bool) -> ResultOfSetAllowStuntJumpCamera {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_allow_stunt_jump_camera(
            ped_,
toggle_,
        );
        
        
        ResultOfSetAllowStuntJumpCamera {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_falling(&self, ped_: u32) -> ResultOfIsPedFalling {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_falling(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedFalling {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_in_any_sub(&self, ped_: u32) -> ResultOfIsPedInAnySub {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_any_sub(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedInAnySub {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_heading_towards_position(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
p4_: f32) -> ResultOfIsPedHeadingTowardsPosition {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p4_ = p4_;
        let success = sdk::natives::is_ped_heading_towards_position(
            &mut native_return,
ped_,
x_,
y_,
z_,
p4_,
        );
        let native_return = native_return;
        
        ResultOfIsPedHeadingTowardsPosition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_use_camera_heading_for_desired_direction_lock_on_test(&self, ped_: u32,
toggle_: bool) -> ResultOfSetUseCameraHeadingForDesiredDirectionLockOnTest {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_use_camera_heading_for_desired_direction_lock_on_test(
            ped_,
toggle_,
        );
        
        
        ResultOfSetUseCameraHeadingForDesiredDirectionLockOnTest {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_performing_stealth_kill(&self, ped_: u32) -> ResultOfIsPedPerformingStealthKill {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_performing_stealth_kill(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedPerformingStealthKill {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_ped_preferred_cover_set(&self, ped_: u32) -> ResultOfRemovePedPreferredCoverSet {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::remove_ped_preferred_cover_set(
            ped_,
        );
        
        
        ResultOfRemovePedPreferredCoverSet {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_panic_exit_scenario(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfSetPedPanicExitScenario {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_ped_panic_exit_scenario(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOfSetPedPanicExitScenario {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_using_ped_scuba_gear_variation(&self, p0_: i32) -> ResultOfIsUsingPedScubaGearVariation {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::is_using_ped_scuba_gear_variation(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfIsUsingPedScubaGearVariation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_spawnpoints_cancel_search(&self, ) -> ResultOfSpawnpointsCancelSearch {
    unsafe {
        
        let success = sdk::natives::spawnpoints_cancel_search(
            
        );
        
        
        ResultOfSpawnpointsCancelSearch {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_type(&self, ped_: u32) -> ResultOfGetPedType {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_type(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_all_heading_values_to_align(&self, ped_: u32) -> ResultOfForceAllHeadingValuesToAlign {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::force_all_heading_values_to_align(
            ped_,
        );
        
        
        ResultOfForceAllHeadingValuesToAlign {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_combat_float(&self, ped_: u32,
combat_type_: i32,
p2_: f32) -> ResultOfSetCombatFloat {
    unsafe {
        let mut ped_ = ped_;
let mut combat_type_ = combat_type_;
let mut p2_ = p2_;
        let success = sdk::natives::set_combat_float(
            ped_,
combat_type_,
p2_,
        );
        
        
        ResultOfSetCombatFloat {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_health_snacks_carried_by_all_new_peds(&self, p0_: f32,
p1_: i32) -> ResultOfSetHealthSnacksCarriedByAllNewPeds {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_health_snacks_carried_by_all_new_peds(
            p0_,
p1_,
        );
        
        
        ResultOfSetHealthSnacksCarriedByAllNewPeds {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_facial_idle_anim_override(&self, ped_: u32,
anim_name_: Option<String>,
anim_dict_: Option<String>) -> ResultOfSetFacialIdleAnimOverride {
    unsafe {
        let mut ped_ = ped_;
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
        let success = sdk::natives::set_facial_idle_anim_override(
            ped_,
anim_name_.as_ref().unwrap(),
anim_dict_.as_ref().unwrap(),
        );
        
        
        ResultOfSetFacialIdleAnimOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_frag_damage(&self, object_: u32,
toggle_: bool) -> ResultOfSetDisableFragDamage {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_frag_damage(
            object_,
toggle_,
        );
        
        
        ResultOfSetDisableFragDamage {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_entity_a_frag(&self, object_: u32) -> ResultOfGetIsEntityAfrag {
    unsafe {
        let mut native_return = Default::default();
let mut object_ = object_;
        let success = sdk::natives::get_is_entity_a_frag(
            &mut native_return,
object_,
        );
        let native_return = native_return;
        
        ResultOfGetIsEntityAfrag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_rope_winding(&self, rope_id_: i32) -> ResultOfStartRopeWinding {
    unsafe {
        let mut rope_id_ = rope_id_;
        let success = sdk::natives::start_rope_winding(
            rope_id_,
        );
        
        
        ResultOfStartRopeWinding {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_use_kinematic_physics(&self, entity_: u32,
toggle_: bool) -> ResultOfSetUseKinematicPhysics {
    unsafe {
        let mut entity_ = entity_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_use_kinematic_physics(
            entity_,
toggle_,
        );
        
        
        ResultOfSetUseKinematicPhysics {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_rope_last_vertex_coord(&self, rope_id_: i32) -> ResultOfGetRopeLastVertexCoord {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut rope_id_ = rope_id_;
        let success = sdk::natives::get_rope_last_vertex_coord(
            native_return.pin_mut(),
rope_id_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetRopeLastVertexCoord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_script_own_rope(&self, rope_id_: i32) -> ResultOfDoesScriptOwnRope {
    unsafe {
        let mut native_return = Default::default();
let mut rope_id_ = rope_id_;
        let success = sdk::natives::does_script_own_rope(
            &mut native_return,
rope_id_,
        );
        let native_return = native_return;
        
        ResultOfDoesScriptOwnRope {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pin_rope_vertex(&self, rope_id_: i32,
vertex_: i32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfPinRopeVertex {
    unsafe {
        let mut rope_id_ = rope_id_;
let mut vertex_ = vertex_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::pin_rope_vertex(
            rope_id_,
vertex_,
x_,
y_,
z_,
        );
        
        
        ResultOfPinRopeVertex {
            success,
            ret: (),
            
        }
    }
}

    fn native_break_entity_glass(&self, entity_: u32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: f32,
p8_: f32,
p9_: i32,
p10_: bool) -> ResultOfBreakEntityGlass {
    unsafe {
        let mut entity_ = entity_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
        let success = sdk::natives::break_entity_glass(
            entity_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
        );
        
        
        ResultOfBreakEntityGlass {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_rope_vertex_count(&self, rope_id_: i32) -> ResultOfGetRopeVertexCount {
    unsafe {
        let mut native_return = Default::default();
let mut rope_id_ = rope_id_;
        let success = sdk::natives::get_rope_vertex_count(
            &mut native_return,
rope_id_,
        );
        let native_return = native_return;
        
        ResultOfGetRopeVertexCount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_rope_set_smooth_reelin(&self, rope_id_: i32,
p1_: bool) -> ResultOfRopeSetSmoothReelin {
    unsafe {
        let mut rope_id_ = rope_id_;
let mut p1_ = p1_;
        let success = sdk::natives::rope_set_smooth_reelin(
            rope_id_,
p1_,
        );
        
        
        ResultOfRopeSetSmoothReelin {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_entities_to_rope(&self, rope_id_: i32,
ent1_: u32,
ent2_: u32,
ent1_x_: f32,
ent1_y_: f32,
ent1_z_: f32,
ent2_x_: f32,
ent2_y_: f32,
ent2_z_: f32,
length_: f32,
p10_: bool,
p11_: bool,
p12_: shared::MemoryBufferId,
p13_: shared::MemoryBufferId) -> ResultOfAttachEntitiesToRope {
    unsafe {
        let mut rope_id_ = rope_id_;
let mut ent1_ = ent1_;
let mut ent2_ = ent2_;
let mut ent1_x_ = ent1_x_;
let mut ent1_y_ = ent1_y_;
let mut ent1_z_ = ent1_z_;
let mut ent2_x_ = ent2_x_;
let mut ent2_y_ = ent2_y_;
let mut ent2_z_ = ent2_z_;
let mut length_ = length_;
let mut p10_ = p10_;
let mut p11_ = p11_;
let mut p12_ = self.memory_buffers.borrow_mut().get_mut_ptr(p12_) as *mut c_void;
let mut p13_ = self.memory_buffers.borrow_mut().get_mut_ptr(p13_) as *mut c_void;
        let success = sdk::natives::attach_entities_to_rope(
            p12_,
p13_,
rope_id_,
ent1_,
ent2_,
ent1_x_,
ent1_y_,
ent1_z_,
ent2_x_,
ent2_y_,
ent2_z_,
length_,
p10_,
p11_,
        );
        let p12_ = 0;
let p13_ = 0;
        
        ResultOfAttachEntitiesToRope {
            success,
            ret: (),
            p12_,
p13_
        }
    }
}

    fn native_attach_rope_to_entity(&self, rope_id_: i32,
entity_: u32,
x_: f32,
y_: f32,
z_: f32,
p5_: bool) -> ResultOfAttachRopeToEntity {
    unsafe {
        let mut rope_id_ = rope_id_;
let mut entity_ = entity_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p5_ = p5_;
        let success = sdk::natives::attach_rope_to_entity(
            rope_id_,
entity_,
x_,
y_,
z_,
p5_,
        );
        
        
        ResultOfAttachRopeToEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_unpin_rope_vertex(&self, rope_id_: i32,
vertex_: i32) -> ResultOfUnpinRopeVertex {
    unsafe {
        let mut rope_id_ = rope_id_;
let mut vertex_ = vertex_;
        let success = sdk::natives::unpin_rope_vertex(
            rope_id_,
vertex_,
        );
        
        
        ResultOfUnpinRopeVertex {
            success,
            ret: (),
            
        }
    }
}

    fn native_delete_rope(&self, rope_id_: i32) -> ResultOfDeleteRope {
    unsafe {
        let mut rope_id_ = rope_id_;
        let success = sdk::natives::delete_rope(
            &mut rope_id_,
        );
        let rope_id_ = rope_id_;
        
        ResultOfDeleteRope {
            success,
            ret: (),
            rope_id_
        }
    }
}

    fn native_rope_convert_to_simple(&self, rope_id_: i32) -> ResultOfRopeConvertToSimple {
    unsafe {
        let mut rope_id_ = rope_id_;
        let success = sdk::natives::rope_convert_to_simple(
            rope_id_,
        );
        
        
        ResultOfRopeConvertToSimple {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_rope_unwinding_front(&self, rope_id_: i32) -> ResultOfStartRopeUnwindingFront {
    unsafe {
        let mut rope_id_ = rope_id_;
        let success = sdk::natives::start_rope_unwinding_front(
            rope_id_,
        );
        
        
        ResultOfStartRopeUnwindingFront {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_breaking(&self, object_: u32,
toggle_: bool) -> ResultOfSetDisableBreaking {
    unsafe {
        let mut object_ = object_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_breaking(
            object_,
toggle_,
        );
        
        
        ResultOfSetDisableBreaking {
            success,
            ret: (),
            
        }
    }
}

    fn native_rope_unload_textures(&self, ) -> ResultOfRopeUnloadTextures {
    unsafe {
        
        let success = sdk::natives::rope_unload_textures(
            
        );
        
        
        ResultOfRopeUnloadTextures {
            success,
            ret: (),
            
        }
    }
}

    fn native_activate_physics(&self, entity_: u32) -> ResultOfActivatePhysics {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::activate_physics(
            entity_,
        );
        
        
        ResultOfActivatePhysics {
            success,
            ret: (),
            
        }
    }
}

    fn native_rope_get_distance_between_ends(&self, rope_id_: i32) -> ResultOfRopeGetDistanceBetweenEnds {
    unsafe {
        let mut native_return = Default::default();
let mut rope_id_ = rope_id_;
        let success = sdk::natives::rope_get_distance_between_ends(
            &mut native_return,
rope_id_,
        );
        let native_return = native_return;
        
        ResultOfRopeGetDistanceBetweenEnds {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_cgoffset(&self, entity_: u32) -> ResultOfGetCgoffset {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut entity_ = entity_;
        let success = sdk::natives::get_cgoffset(
            native_return.pin_mut(),
entity_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetCgoffset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_rope_attached_at_both_ends(&self, rope_id_: i32) -> ResultOfIsRopeAttachedAtBothEnds {
    unsafe {
        let mut native_return = Default::default();
let mut rope_id_ = rope_id_;
        let success = sdk::natives::is_rope_attached_at_both_ends(
            &mut native_return,
&mut rope_id_,
        );
        let native_return = native_return;
let rope_id_ = rope_id_;
        
        ResultOfIsRopeAttachedAtBothEnds {
            success,
            ret: native_return,
            rope_id_
        }
    }
}

    fn native_rope_load_textures(&self, ) -> ResultOfRopeLoadTextures {
    unsafe {
        
        let success = sdk::natives::rope_load_textures(
            
        );
        
        
        ResultOfRopeLoadTextures {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_in_stunt_mode(&self, p0_: bool) -> ResultOfSetInStuntMode {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_in_stunt_mode(
            p0_,
        );
        
        
        ResultOfSetInStuntMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_rope_draw_enabled(&self, rope_id_: i32,
p1_: bool) -> ResultOfRopeDrawEnabled {
    unsafe {
        let mut rope_id_ = rope_id_;
let mut p1_ = p1_;
        let success = sdk::natives::rope_draw_enabled(
            &mut rope_id_,
p1_,
        );
        let rope_id_ = rope_id_;
        
        ResultOfRopeDrawEnabled {
            success,
            ret: (),
            rope_id_
        }
    }
}

    fn native_delete_child_rope(&self, rope_id_: i32) -> ResultOfDeleteChildRope {
    unsafe {
        let mut rope_id_ = rope_id_;
        let success = sdk::natives::delete_child_rope(
            rope_id_,
        );
        
        
        ResultOfDeleteChildRope {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_in_arena_mode(&self, toggle_: bool) -> ResultOfSetInArenaMode {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_in_arena_mode(
            toggle_,
        );
        
        
        ResultOfSetInArenaMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_rope_change_script_owner(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOfRopeChangeScriptOwner {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::rope_change_script_owner(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfRopeChangeScriptOwner {
            success,
            ret: (),
            
        }
    }
}

    fn native_rope_set_refframevelocity_colliderorder(&self, rope_id_: i32,
p1_: i32) -> ResultOfRopeSetRefframevelocityColliderorder {
    unsafe {
        let mut rope_id_ = rope_id_;
let mut p1_ = p1_;
        let success = sdk::natives::rope_set_refframevelocity_colliderorder(
            rope_id_,
p1_,
        );
        
        
        ResultOfRopeSetRefframevelocityColliderorder {
            success,
            ret: (),
            
        }
    }
}

    fn native_rope_attach_virtual_bound_geom(&self, rope_id_: i32,
p1_: i32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: f32,
p8_: f32,
p9_: f32,
p10_: f32,
p11_: f32,
p12_: f32,
p13_: f32) -> ResultOfRopeAttachVirtualBoundGeom {
    unsafe {
        let mut rope_id_ = rope_id_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
let mut p12_ = p12_;
let mut p13_ = p13_;
        let success = sdk::natives::rope_attach_virtual_bound_geom(
            rope_id_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
p11_,
p12_,
p13_,
        );
        
        
        ResultOfRopeAttachVirtualBoundGeom {
            success,
            ret: (),
            
        }
    }
}

    fn native_detach_rope_from_entity(&self, rope_id_: i32,
entity_: u32) -> ResultOfDetachRopeFromEntity {
    unsafe {
        let mut rope_id_ = rope_id_;
let mut entity_ = entity_;
        let success = sdk::natives::detach_rope_from_entity(
            rope_id_,
entity_,
        );
        
        
        ResultOfDetachRopeFromEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cg_at_boundcenter(&self, entity_: u32) -> ResultOfSetCgAtBoundcenter {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::set_cg_at_boundcenter(
            entity_,
        );
        
        
        ResultOfSetCgAtBoundcenter {
            success,
            ret: (),
            
        }
    }
}

    fn native_rope_reset_length(&self, rope_id_: i32,
length_: f32) -> ResultOfRopeResetLength {
    unsafe {
        let mut rope_id_ = rope_id_;
let mut length_ = length_;
        let success = sdk::natives::rope_reset_length(
            rope_id_,
length_,
        );
        
        
        ResultOfRopeResetLength {
            success,
            ret: (),
            
        }
    }
}

    fn native_rope_set_update_pinverts(&self, rope_id_: i32) -> ResultOfRopeSetUpdatePinverts {
    unsafe {
        let mut rope_id_ = rope_id_;
        let success = sdk::natives::rope_set_update_pinverts(
            rope_id_,
        );
        
        
        ResultOfRopeSetUpdatePinverts {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_rope_winding(&self, rope_id_: i32) -> ResultOfStopRopeWinding {
    unsafe {
        let mut rope_id_ = rope_id_;
        let success = sdk::natives::stop_rope_winding(
            rope_id_,
        );
        
        
        ResultOfStopRopeWinding {
            success,
            ret: (),
            
        }
    }
}

    fn native_load_rope_data(&self, rope_id_: i32,
rope_preset_: Option<String>) -> ResultOfLoadRopeData {
    unsafe {
        let mut rope_id_ = rope_id_;
let mut rope_preset_ = sdk_helpers::create_c_string_ptr(rope_preset_);
        let success = sdk::natives::load_rope_data(
            rope_id_,
rope_preset_.as_ref().unwrap(),
        );
        
        
        ResultOfLoadRopeData {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_disable_breaking(&self, object_: u32) -> ResultOfResetDisableBreaking {
    unsafe {
        let mut object_ = object_;
        let success = sdk::natives::reset_disable_breaking(
            object_,
        );
        
        
        ResultOfResetDisableBreaking {
            success,
            ret: (),
            
        }
    }
}

    fn native_rope_force_length(&self, rope_id_: i32,
length_: f32) -> ResultOfRopeForceLength {
    unsafe {
        let mut rope_id_ = rope_id_;
let mut length_ = length_;
        let success = sdk::natives::rope_force_length(
            rope_id_,
length_,
        );
        
        
        ResultOfRopeForceLength {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cgoffset(&self, entity_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfSetCgoffset {
    unsafe {
        let mut entity_ = entity_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_cgoffset(
            entity_,
x_,
y_,
z_,
        );
        
        
        ResultOfSetCgoffset {
            success,
            ret: (),
            
        }
    }
}

    fn native_rope_set_update_order(&self, rope_id_: i32,
p1_: i32) -> ResultOfRopeSetUpdateOrder {
    unsafe {
        let mut rope_id_ = rope_id_;
let mut p1_ = p1_;
        let success = sdk::natives::rope_set_update_order(
            rope_id_,
p1_,
        );
        
        
        ResultOfRopeSetUpdateOrder {
            success,
            ret: (),
            
        }
    }
}

    fn native_apply_impulse_to_cloth(&self, pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
vec_x_: f32,
vec_y_: f32,
vec_z_: f32,
impulse_: f32) -> ResultOfApplyImpulseToCloth {
    unsafe {
        let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut vec_x_ = vec_x_;
let mut vec_y_ = vec_y_;
let mut vec_z_ = vec_z_;
let mut impulse_ = impulse_;
        let success = sdk::natives::apply_impulse_to_cloth(
            pos_x_,
pos_y_,
pos_z_,
vec_x_,
vec_y_,
vec_z_,
impulse_,
        );
        
        
        ResultOfApplyImpulseToCloth {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_rope(&self, x_: f32,
y_: f32,
z_: f32,
rot_x_: f32,
rot_y_: f32,
rot_z_: f32,
length_: f32,
rope_type_: i32,
max_length_: f32,
min_length_: f32,
winding_speed_: f32,
p11_: bool,
p12_: bool,
rigid_: bool,
p14_: f32,
break_when_shot_: bool,
unk_ptr_: shared::MemoryBufferId) -> ResultOfAddRope {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
let mut length_ = length_;
let mut rope_type_ = rope_type_;
let mut max_length_ = max_length_;
let mut min_length_ = min_length_;
let mut winding_speed_ = winding_speed_;
let mut p11_ = p11_;
let mut p12_ = p12_;
let mut rigid_ = rigid_;
let mut p14_ = p14_;
let mut break_when_shot_ = break_when_shot_;
let mut unk_ptr_ = self.memory_buffers.borrow_mut().get_mut_ptr(unk_ptr_) as *mut c_void;
        let success = sdk::natives::add_rope(
            &mut native_return,
unk_ptr_,
x_,
y_,
z_,
rot_x_,
rot_y_,
rot_z_,
length_,
rope_type_,
max_length_,
min_length_,
winding_speed_,
p11_,
p12_,
rigid_,
p14_,
break_when_shot_,
        );
        let native_return = native_return;
let unk_ptr_ = 0;
        
        ResultOfAddRope {
            success,
            ret: native_return,
            unk_ptr_
        }
    }
}

    fn native_get_rope_vertex_coord(&self, rope_id_: i32,
vertex_: i32) -> ResultOfGetRopeVertexCoord {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut rope_id_ = rope_id_;
let mut vertex_ = vertex_;
        let success = sdk::natives::get_rope_vertex_coord(
            native_return.pin_mut(),
rope_id_,
vertex_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetRopeVertexCoord {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_damping(&self, entity_: u32,
vertex_: i32,
value_: f32) -> ResultOfSetDamping {
    unsafe {
        let mut entity_ = entity_;
let mut vertex_ = vertex_;
let mut value_ = value_;
        let success = sdk::natives::set_damping(
            entity_,
vertex_,
value_,
        );
        
        
        ResultOfSetDamping {
            success,
            ret: (),
            
        }
    }
}

    fn native_rope_draw_shadow_enabled(&self, rope_id_: i32,
toggle_: bool) -> ResultOfRopeDrawShadowEnabled {
    unsafe {
        let mut rope_id_ = rope_id_;
let mut toggle_ = toggle_;
        let success = sdk::natives::rope_draw_shadow_enabled(
            &mut rope_id_,
toggle_,
        );
        let rope_id_ = rope_id_;
        
        ResultOfRopeDrawShadowEnabled {
            success,
            ret: (),
            rope_id_
        }
    }
}

    fn native_rope_are_textures_loaded(&self, ) -> ResultOfRopeAreTexturesLoaded {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::rope_are_textures_loaded(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfRopeAreTexturesLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_rope_exist(&self, rope_id_: i32) -> ResultOfDoesRopeExist {
    unsafe {
        let mut native_return = Default::default();
let mut rope_id_ = rope_id_;
        let success = sdk::natives::does_rope_exist(
            &mut native_return,
&mut rope_id_,
        );
        let native_return = native_return;
let rope_id_ = rope_id_;
        
        ResultOfDoesRopeExist {
            success,
            ret: native_return,
            rope_id_
        }
    }
}

    fn native_stop_rope_unwinding_front(&self, rope_id_: i32) -> ResultOfStopRopeUnwindingFront {
    unsafe {
        let mut rope_id_ = rope_id_;
        let success = sdk::natives::stop_rope_unwinding_front(
            rope_id_,
        );
        
        
        ResultOfStopRopeUnwindingFront {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_law_response_delay_override(&self, ) -> ResultOfResetLawResponseDelayOverride {
    unsafe {
        
        let success = sdk::natives::reset_law_response_delay_override(
            
        );
        
        
        ResultOfResetLawResponseDelayOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_model(&self, player_: u32,
model_: u32) -> ResultOfSetPlayerModel {
    unsafe {
        let mut player_ = player_;
let mut model_ = model_;
        let success = sdk::natives::set_player_model(
            player_,
model_,
        );
        
        
        ResultOfSetPlayerModel {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_wanted_level_multiplier(&self, multiplier_: f32) -> ResultOfSetWantedLevelMultiplier {
    unsafe {
        let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_wanted_level_multiplier(
            multiplier_,
        );
        
        
        ResultOfSetWantedLevelMultiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_team(&self, player_: u32,
team_: i32) -> ResultOfSetPlayerTeam {
    unsafe {
        let mut player_ = player_;
let mut team_ = team_;
        let success = sdk::natives::set_player_team(
            player_,
team_,
        );
        
        
        ResultOfSetPlayerTeam {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_teleport_active(&self, ) -> ResultOfIsPlayerTeleportActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_player_teleport_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerTeleportActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_change_player_ped(&self, player_: u32,
ped_: u32,
p2_: bool,
reset_damage_: bool) -> ResultOfChangePlayerPed {
    unsafe {
        let mut player_ = player_;
let mut ped_ = ped_;
let mut p2_ = p2_;
let mut reset_damage_ = reset_damage_;
        let success = sdk::natives::change_player_ped(
            player_,
ped_,
p2_,
reset_damage_,
        );
        
        
        ResultOfChangePlayerPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_all_random_peds_flee(&self, player_: u32,
toggle_: bool) -> ResultOfSetAllRandomPedsFlee {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_all_random_peds_flee(
            player_,
toggle_,
        );
        
        
        ResultOfSetAllRandomPedsFlee {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_special_ability_meter_full(&self, player_: u32,
p1_: i32) -> ResultOfIsSpecialAbilityMeterFull {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::is_special_ability_meter_full(
            &mut native_return,
player_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfIsSpecialAbilityMeterFull {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_reserve_parachute_model_override(&self, player_: u32,
model_: u32) -> ResultOfSetPlayerReserveParachuteModelOverride {
    unsafe {
        let mut player_ = player_;
let mut model_ = model_;
        let success = sdk::natives::set_player_reserve_parachute_model_override(
            player_,
model_,
        );
        
        
        ResultOfSetPlayerReserveParachuteModelOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_wanted_level_radius(&self, player_: u32) -> ResultOfGetWantedLevelRadius {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_wanted_level_radius(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetWantedLevelRadius {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_are_player_stars_greyed_out(&self, player_: u32) -> ResultOfArePlayerStarsGreyedOut {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::are_player_stars_greyed_out(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfArePlayerStarsGreyedOut {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_wanted_centre_position(&self, player_: u32) -> ResultOfGetPlayerWantedCentrePosition {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut player_ = player_;
        let success = sdk::natives::get_player_wanted_centre_position(
            native_return.pin_mut(),
player_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetPlayerWantedCentrePosition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_group(&self, player_: u32) -> ResultOfGetPlayerGroup {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_group(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerGroup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_player_parachute_variation_override(&self, player_: u32) -> ResultOfClearPlayerParachuteVariationOverride {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::clear_player_parachute_variation_override(
            player_,
        );
        
        
        ResultOfClearPlayerParachuteVariationOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_forced_aim(&self, player_: u32,
toggle_: bool) -> ResultOfSetPlayerForcedAim {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_forced_aim(
            player_,
toggle_,
        );
        
        
        ResultOfSetPlayerForcedAim {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_player_parachute_pack_model_override(&self, player_: u32) -> ResultOfClearPlayerParachutePackModelOverride {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::clear_player_parachute_pack_model_override(
            player_,
        );
        
        
        ResultOfClearPlayerParachutePackModelOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_phone_palette_idx(&self, player_: u32,
flags_: i32) -> ResultOfSetPlayerPhonePaletteIdx {
    unsafe {
        let mut player_ = player_;
let mut flags_ = flags_;
        let success = sdk::natives::set_player_phone_palette_idx(
            player_,
flags_,
        );
        
        
        ResultOfSetPlayerPhonePaletteIdx {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_target_entity(&self, player_: u32,
entity_: u32) -> ResultOfGetPlayerTargetEntity {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut entity_ = entity_;
        let success = sdk::natives::get_player_target_entity(
            &mut native_return,
&mut entity_,
player_,
        );
        let native_return = native_return;
let entity_ = entity_;
        
        ResultOfGetPlayerTargetEntity {
            success,
            ret: native_return,
            entity_
        }
    }
}

    fn native_set_player_cloth_lock_counter(&self, value_: i32) -> ResultOfSetPlayerClothLockCounter {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_player_cloth_lock_counter(
            value_,
        );
        
        
        ResultOfSetPlayerClothLockCounter {
            success,
            ret: (),
            
        }
    }
}

    fn native_special_ability_deactivate_mp(&self, player_: u32,
p1_: i32) -> ResultOfSpecialAbilityDeactivateMp {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::special_ability_deactivate_mp(
            player_,
p1_,
        );
        
        
        ResultOfSpecialAbilityDeactivateMp {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_special_ability(&self, player_: u32,
toggle_: bool,
p2_: i32) -> ResultOfEnableSpecialAbility {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
        let success = sdk::natives::enable_special_ability(
            player_,
toggle_,
p2_,
        );
        
        
        ResultOfEnableSpecialAbility {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_sprint_time_remaining(&self, player_: u32) -> ResultOfGetPlayerSprintTimeRemaining {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_sprint_time_remaining(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerSprintTimeRemaining {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_player_input_gait(&self, player_: u32) -> ResultOfResetPlayerInputGait {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::reset_player_input_gait(
            player_,
        );
        
        
        ResultOfResetPlayerInputGait {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_achievement_progress(&self, achievement_id_: i32) -> ResultOfGetAchievementProgress {
    unsafe {
        let mut native_return = Default::default();
let mut achievement_id_ = achievement_id_;
        let success = sdk::natives::get_achievement_progress(
            &mut native_return,
achievement_id_,
        );
        let native_return = native_return;
        
        ResultOfGetAchievementProgress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_special_ability_deplete_meter(&self, player_: u32,
p1_: bool,
p2_: i32) -> ResultOfSpecialAbilityDepleteMeter {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::special_ability_deplete_meter(
            player_,
p1_,
p2_,
        );
        
        
        ResultOfSpecialAbilityDepleteMeter {
            success,
            ret: (),
            
        }
    }
}

    fn native_player_detach_virtual_bound(&self, ) -> ResultOfPlayerDetachVirtualBound {
    unsafe {
        
        let success = sdk::natives::player_detach_virtual_bound(
            
        );
        
        
        ResultOfPlayerDetachVirtualBound {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_may_not_enter_any_vehicle(&self, player_: u32) -> ResultOfSetPlayerMayNotEnterAnyVehicle {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::set_player_may_not_enter_any_vehicle(
            player_,
        );
        
        
        ResultOfSetPlayerMayNotEnterAnyVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_number_of_players_in_team(&self, team_: i32) -> ResultOfGetNumberOfPlayersInTeam {
    unsafe {
        let mut native_return = Default::default();
let mut team_ = team_;
        let success = sdk::natives::get_number_of_players_in_team(
            &mut native_return,
team_,
        );
        let native_return = native_return;
        
        ResultOfGetNumberOfPlayersInTeam {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_player_damaged_at_least_one_ped(&self, player_: u32) -> ResultOfHasPlayerDamagedAtLeastOnePed {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::has_player_damaged_at_least_one_ped(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfHasPlayerDamagedAtLeastOnePed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_vehicle_weapon_to_non_homing(&self, p0_: i32) -> ResultOfSetPlayerVehicleWeaponToNonHoming {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_player_vehicle_weapon_to_non_homing(
            p0_,
        );
        
        
        ResultOfSetPlayerVehicleWeaponToNonHoming {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_apply_waypoint_of_player(&self, player_: u32,
hud_color_: i32) -> ResultOfSetApplyWaypointOfPlayer {
    unsafe {
        let mut player_ = player_;
let mut hud_color_ = hud_color_;
        let success = sdk::natives::set_apply_waypoint_of_player(
            player_,
hud_color_,
        );
        
        
        ResultOfSetApplyWaypointOfPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_wanted_level_greater(&self, player_: u32,
wanted_level_: i32) -> ResultOfIsPlayerWantedLevelGreater {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut wanted_level_ = wanted_level_;
        let success = sdk::natives::is_player_wanted_level_greater(
            &mut native_return,
player_,
wanted_level_,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerWantedLevelGreater {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_invincible(&self, player_: u32,
toggle_: bool) -> ResultOfSetPlayerInvincible {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_invincible(
            player_,
toggle_,
        );
        
        
        ResultOfSetPlayerInvincible {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_player_reserve_parachute_model_override(&self, player_: u32) -> ResultOfClearPlayerReserveParachuteModelOverride {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::clear_player_reserve_parachute_model_override(
            player_,
        );
        
        
        ResultOfClearPlayerReserveParachuteModelOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_player_is_free_aiming_at(&self, player_: u32,
entity_: u32) -> ResultOfGetEntityPlayerIsFreeAimingAt {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut entity_ = entity_;
        let success = sdk::natives::get_entity_player_is_free_aiming_at(
            &mut native_return,
&mut entity_,
player_,
        );
        let native_return = native_return;
let entity_ = entity_;
        
        ResultOfGetEntityPlayerIsFreeAimingAt {
            success,
            ret: native_return,
            entity_
        }
    }
}

    fn native_set_player_lockon_range_override(&self, player_: u32,
range_: f32) -> ResultOfSetPlayerLockonRangeOverride {
    unsafe {
        let mut player_ = player_;
let mut range_ = range_;
        let success = sdk::natives::set_player_lockon_range_override(
            player_,
range_,
        );
        
        
        ResultOfSetPlayerLockonRangeOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_player_arrest_state(&self, player_: u32) -> ResultOfResetPlayerArrestState {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::reset_player_arrest_state(
            player_,
        );
        
        
        ResultOfResetPlayerArrestState {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_weapon_defense_modifier(&self, player_: u32,
modifier_: f32) -> ResultOfSetPlayerWeaponDefenseModifier {
    unsafe {
        let mut player_ = player_;
let mut modifier_ = modifier_;
        let success = sdk::natives::set_player_weapon_defense_modifier(
            player_,
modifier_,
        );
        
        
        ResultOfSetPlayerWeaponDefenseModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_free_aiming(&self, player_: u32) -> ResultOfIsPlayerFreeAiming {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_free_aiming(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerFreeAiming {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_special_ability_charge_small(&self, player_: u32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfSpecialAbilityChargeSmall {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::special_ability_charge_small(
            player_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfSpecialAbilityChargeSmall {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_ambient_melee_move(&self, player_: u32,
toggle_: bool) -> ResultOfSetDisableAmbientMeleeMove {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_ambient_melee_move(
            player_,
toggle_,
        );
        
        
        ResultOfSetDisableAmbientMeleeMove {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_current_stealth_noise(&self, player_: u32) -> ResultOfGetPlayerCurrentStealthNoise {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_current_stealth_noise(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerCurrentStealthNoise {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_allow_evasion_hud_if_disabling_hidden_evasion_this_frame(&self, player_: u32,
p1_: i32) -> ResultOfAllowEvasionHudIfDisablingHiddenEvasionThisFrame {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::allow_evasion_hud_if_disabling_hidden_evasion_this_frame(
            player_,
p1_,
        );
        
        
        ResultOfAllowEvasionHudIfDisablingHiddenEvasionThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_spectated_vehicle_radio_override(&self, p0_: bool) -> ResultOfSetPlayerSpectatedVehicleRadioOverride {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_player_spectated_vehicle_radio_override(
            p0_,
        );
        
        
        ResultOfSetPlayerSpectatedVehicleRadioOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_weapon_takedown_defense_modifier(&self, player_: u32,
p1_: f32) -> ResultOfSetPlayerWeaponTakedownDefenseModifier {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::set_player_weapon_takedown_defense_modifier(
            player_,
p1_,
        );
        
        
        ResultOfSetPlayerWeaponTakedownDefenseModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_police_ignore_player(&self, player_: u32,
toggle_: bool) -> ResultOfSetPoliceIgnorePlayer {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_police_ignore_player(
            player_,
toggle_,
        );
        
        
        ResultOfSetPoliceIgnorePlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_wanted_level_no_drop(&self, player_: u32,
wanted_level_: i32,
p2_: bool) -> ResultOfSetPlayerWantedLevelNoDrop {
    unsafe {
        let mut player_ = player_;
let mut wanted_level_ = wanted_level_;
let mut p2_ = p2_;
        let success = sdk::natives::set_player_wanted_level_no_drop(
            player_,
wanted_level_,
p2_,
        );
        
        
        ResultOfSetPlayerWantedLevelNoDrop {
            success,
            ret: (),
            
        }
    }
}

    fn native_suppress_witnesses_calling_police_this_frame(&self, player_: u32) -> ResultOfSuppressWitnessesCallingPoliceThisFrame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::suppress_witnesses_calling_police_this_frame(
            player_,
        );
        
        
        ResultOfSuppressWitnessesCallingPoliceThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_team(&self, player_: u32) -> ResultOfGetPlayerTeam {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_team(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerTeam {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_special_ability_reset(&self, player_: u32,
p1_: i32) -> ResultOfSpecialAbilityReset {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::special_ability_reset(
            player_,
p1_,
        );
        
        
        ResultOfSpecialAbilityReset {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_reserve_parachute_model_override(&self, player_: u32) -> ResultOfGetPlayerReserveParachuteModelOverride {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_reserve_parachute_model_override(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerReserveParachuteModelOverride {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_player_being_arrested(&self, player_: u32,
at_arresting_: bool) -> ResultOfIsPlayerBeingArrested {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut at_arresting_ = at_arresting_;
        let success = sdk::natives::is_player_being_arrested(
            &mut native_return,
player_,
at_arresting_,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerBeingArrested {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_player_battle_aware(&self, player_: u32) -> ResultOfIsPlayerBattleAware {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_battle_aware(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerBattleAware {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_wanted_level(&self, player_: u32,
wanted_level_: i32,
disable_no_mission_: bool) -> ResultOfSetPlayerWantedLevel {
    unsafe {
        let mut player_ = player_;
let mut wanted_level_ = wanted_level_;
let mut disable_no_mission_ = disable_no_mission_;
        let success = sdk::natives::set_player_wanted_level(
            player_,
wanted_level_,
disable_no_mission_,
        );
        
        
        ResultOfSetPlayerWantedLevel {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_free_aiming_at_entity(&self, player_: u32,
entity_: u32) -> ResultOfIsPlayerFreeAimingAtEntity {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut entity_ = entity_;
        let success = sdk::natives::is_player_free_aiming_at_entity(
            &mut native_return,
player_,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerFreeAimingAtEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_give_player_ragdoll_control(&self, player_: u32,
toggle_: bool) -> ResultOfGivePlayerRagdollControl {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::give_player_ragdoll_control(
            player_,
toggle_,
        );
        
        
        ResultOfGivePlayerRagdollControl {
            success,
            ret: (),
            
        }
    }
}

    fn native_special_ability_fill_meter(&self, player_: u32,
p1_: bool,
p2_: i32) -> ResultOfSpecialAbilityFillMeter {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::special_ability_fill_meter(
            player_,
p1_,
p2_,
        );
        
        
        ResultOfSpecialAbilityFillMeter {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_special_ability_active(&self, player_: u32,
p1_: i32) -> ResultOfIsSpecialAbilityActive {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::is_special_ability_active(
            &mut native_return,
player_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfIsSpecialAbilityActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_sprint_stamina_remaining(&self, player_: u32) -> ResultOfGetPlayerSprintStaminaRemaining {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_sprint_stamina_remaining(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerSprintStaminaRemaining {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_number_of_players(&self, ) -> ResultOfGetNumberOfPlayers {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_number_of_players(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetNumberOfPlayers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_int_to_playerindex(&self, value_: i32) -> ResultOfIntToPlayerindex {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::int_to_playerindex(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOfIntToPlayerindex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_player_dead(&self, player_: u32) -> ResultOfIsPlayerDead {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_dead(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerDead {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_police_radar_blips(&self, toggle_: bool) -> ResultOfSetPoliceRadarBlips {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_police_radar_blips(
            toggle_,
        );
        
        
        ResultOfSetPoliceRadarBlips {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_ped(&self, player_: u32) -> ResultOfGetPlayerPed {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_ped(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerPed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_max_wanted_level(&self, ) -> ResultOfGetMaxWantedLevel {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_max_wanted_level(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetMaxWantedLevel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_suppress_losing_wanted_level_if_hidden_this_frame(&self, player_: u32) -> ResultOfSuppressLosingWantedLevelIfHiddenThisFrame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::suppress_losing_wanted_level_if_hidden_this_frame(
            player_,
        );
        
        
        ResultOfSuppressLosingWantedLevelIfHiddenThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_all_random_peds_flee_this_frame(&self, player_: u32) -> ResultOfSetAllRandomPedsFleeThisFrame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::set_all_random_peds_flee_this_frame(
            player_,
        );
        
        
        ResultOfSetAllRandomPedsFleeThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_simulate_player_input_gait(&self, player_: u32,
amount_: f32,
gait_type_: i32,
speed_: f32,
p4_: bool,
p5_: bool) -> ResultOfSimulatePlayerInputGait {
    unsafe {
        let mut player_ = player_;
let mut amount_ = amount_;
let mut gait_type_ = gait_type_;
let mut speed_ = speed_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::simulate_player_input_gait(
            player_,
amount_,
gait_type_,
speed_,
p4_,
p5_,
        );
        
        
        ResultOfSimulatePlayerInputGait {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_wanted_level_hidden_escape_time(&self, player_: u32,
wanted_level_: i32,
loss_time_: i32) -> ResultOfSetWantedLevelHiddenEscapeTime {
    unsafe {
        let mut player_ = player_;
let mut wanted_level_ = wanted_level_;
let mut loss_time_ = loss_time_;
        let success = sdk::natives::set_wanted_level_hidden_escape_time(
            player_,
wanted_level_,
loss_time_,
        );
        
        
        ResultOfSetWantedLevelHiddenEscapeTime {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_control_on(&self, player_: u32) -> ResultOfIsPlayerControlOn {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_control_on(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerControlOn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_melee_weapon_damage_modifier(&self, player_: u32,
modifier_: f32,
p2_: bool) -> ResultOfSetPlayerMeleeWeaponDamageModifier {
    unsafe {
        let mut player_ = player_;
let mut modifier_ = modifier_;
let mut p2_ = p2_;
        let success = sdk::natives::set_player_melee_weapon_damage_modifier(
            player_,
modifier_,
p2_,
        );
        
        
        ResultOfSetPlayerMeleeWeaponDamageModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_player_has_damaged_at_least_one_non_animal_ped(&self, player_: u32) -> ResultOfClearPlayerHasDamagedAtLeastOneNonAnimalPed {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::clear_player_has_damaged_at_least_one_non_animal_ped(
            player_,
        );
        
        
        ResultOfClearPlayerHasDamagedAtLeastOneNonAnimalPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_vehicle_defense_modifier(&self, player_: u32,
modifier_: f32) -> ResultOfSetPlayerVehicleDefenseModifier {
    unsafe {
        let mut player_ = player_;
let mut modifier_ = modifier_;
        let success = sdk::natives::set_player_vehicle_defense_modifier(
            player_,
modifier_,
        );
        
        
        ResultOfSetPlayerVehicleDefenseModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_cleanup_for_all_threads_with_this_name(&self, name_: Option<String>,
cleanup_flags_: i32) -> ResultOfForceCleanupForAllThreadsWithThisName {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut cleanup_flags_ = cleanup_flags_;
        let success = sdk::natives::force_cleanup_for_all_threads_with_this_name(
            name_.as_ref().unwrap(),
cleanup_flags_,
        );
        
        
        ResultOfForceCleanupForAllThreadsWithThisName {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_stealth_perception_modifier(&self, player_: u32,
value_: f32) -> ResultOfSetPlayerStealthPerceptionModifier {
    unsafe {
        let mut player_ = player_;
let mut value_ = value_;
        let success = sdk::natives::set_player_stealth_perception_modifier(
            player_,
value_,
        );
        
        
        ResultOfSetPlayerStealthPerceptionModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_riding_train(&self, player_: u32) -> ResultOfIsPlayerRidingTrain {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_riding_train(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerRidingTrain {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_player_id(&self, ) -> ResultOfPlayerId {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::player_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfPlayerId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_extend_world_boundary_for_player(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfExtendWorldBoundaryForPlayer {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::extend_world_boundary_for_player(
            x_,
y_,
z_,
        );
        
        
        ResultOfExtendWorldBoundaryForPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_time_since_last_arrest(&self, ) -> ResultOfGetTimeSinceLastArrest {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_time_since_last_arrest(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetTimeSinceLastArrest {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_ped_script_index(&self, player_: u32) -> ResultOfGetPlayerPedScriptIndex {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_ped_script_index(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerPedScriptIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_wanted_centre_position(&self, player_: u32,
position_: Option<shared::Vector3>,
p2_: bool,
p3_: bool) -> ResultOfSetPlayerWantedCentrePosition {
    unsafe {
        let mut player_ = player_;
let mut position_ = sdk_helpers::create_vector3_ptr(position_);
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_player_wanted_centre_position(
            position_.pin_mut(),
player_,
p2_,
p3_,
        );
        let position_ = sdk_helpers::read_cpp_vector3(position_);
        
        ResultOfSetPlayerWantedCentrePosition {
            success,
            ret: (),
            position_
        }
    }
}

    fn native_disable_camera_view_mode_cycle(&self, player_: u32) -> ResultOfDisableCameraViewModeCycle {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::disable_camera_view_mode_cycle(
            player_,
        );
        
        
        ResultOfDisableCameraViewModeCycle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_can_damage_player(&self, player1_: u32,
player2_: u32,
toggle_: bool) -> ResultOfSetPlayerCanDamagePlayer {
    unsafe {
        let mut player1_ = player1_;
let mut player2_ = player2_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_can_damage_player(
            player1_,
player2_,
toggle_,
        );
        
        
        ResultOfSetPlayerCanDamagePlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_fake_wanted_level(&self, player_: u32) -> ResultOfGetPlayerFakeWantedLevel {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_fake_wanted_level(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerFakeWantedLevel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_target_level(&self, target_level_: i32) -> ResultOfSetPlayerTargetLevel {
    unsafe {
        let mut target_level_ = target_level_;
        let success = sdk::natives::set_player_target_level(
            target_level_,
        );
        
        
        ResultOfSetPlayerTargetLevel {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ignore_low_priority_shocking_events(&self, player_: u32,
toggle_: bool) -> ResultOfSetIgnoreLowPriorityShockingEvents {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ignore_low_priority_shocking_events(
            player_,
toggle_,
        );
        
        
        ResultOfSetIgnoreLowPriorityShockingEvents {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_lockon(&self, player_: u32,
toggle_: bool) -> ResultOfSetPlayerLockon {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_lockon(
            player_,
toggle_,
        );
        
        
        ResultOfSetPlayerLockon {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_time_since_player_hit_vehicle(&self, player_: u32) -> ResultOfGetTimeSincePlayerHitVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_time_since_player_hit_vehicle(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetTimeSincePlayerHitVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_system_ui_being_displayed(&self, ) -> ResultOfIsSystemUiBeingDisplayed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_system_ui_being_displayed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsSystemUiBeingDisplayed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_health_recharge_multiplier(&self, player_: u32,
regen_rate_: f32) -> ResultOfSetPlayerHealthRechargeMultiplier {
    unsafe {
        let mut player_ = player_;
let mut regen_rate_ = regen_rate_;
        let success = sdk::natives::set_player_health_recharge_multiplier(
            player_,
regen_rate_,
        );
        
        
        ResultOfSetPlayerHealthRechargeMultiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_bluetooth_state(&self, player_: u32,
state_: bool) -> ResultOfSetPlayerBluetoothState {
    unsafe {
        let mut player_ = player_;
let mut state_ = state_;
        let success = sdk::natives::set_player_bluetooth_state(
            player_,
state_,
        );
        
        
        ResultOfSetPlayerBluetoothState {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_has_reserve_parachute(&self, player_: u32) -> ResultOfGetPlayerHasReserveParachute {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_has_reserve_parachute(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerHasReserveParachute {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_player_firing(&self, player_: u32,
toggle_: bool) -> ResultOfDisablePlayerFiring {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::disable_player_firing(
            player_,
toggle_,
        );
        
        
        ResultOfDisablePlayerFiring {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_playing(&self, player_: u32) -> ResultOfIsPlayerPlaying {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_playing(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerPlaying {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_player_driving_on_highway(&self, player_: u32) -> ResultOfGetIsPlayerDrivingOnHighway {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_is_player_driving_on_highway(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetIsPlayerDrivingOnHighway {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_player_bluetooth_enable(&self, player_: u32) -> ResultOfIsPlayerBluetoothEnable {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_bluetooth_enable(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerBluetoothEnable {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_remote_player_in_non_cloned_vehicle(&self, player_: u32) -> ResultOfIsRemotePlayerInNonClonedVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_remote_player_in_non_cloned_vehicle(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfIsRemotePlayerInNonClonedVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_special_ability_lock(&self, player_model_: u32,
p1_: i32) -> ResultOfSpecialAbilityLock {
    unsafe {
        let mut player_model_ = player_model_;
let mut p1_ = p1_;
        let success = sdk::natives::special_ability_lock(
            player_model_,
p1_,
        );
        
        
        ResultOfSpecialAbilityLock {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_invincible_but_has_reactions(&self, player_: u32,
toggle_: bool) -> ResultOfSetPlayerInvincibleButHasReactions {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_invincible_but_has_reactions(
            player_,
toggle_,
        );
        
        
        ResultOfSetPlayerInvincibleButHasReactions {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_name(&self, player_: u32) -> ResultOfGetPlayerName {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut player_ = player_;
        let success = sdk::natives::get_player_name(
            native_return.pin_mut(),
player_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetPlayerName {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_run_sprint_multiplier_for_player(&self, player_: u32,
multiplier_: f32) -> ResultOfSetRunSprintMultiplierForPlayer {
    unsafe {
        let mut player_ = player_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_run_sprint_multiplier_for_player(
            player_,
multiplier_,
        );
        
        
        ResultOfSetRunSprintMultiplierForPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_vehicle_weapon_toggled_to_non_homing(&self, p0_: i32) -> ResultOfIsPlayerVehicleWeaponToggledToNonHoming {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::is_player_vehicle_weapon_toggled_to_non_homing(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerVehicleWeaponToggledToNonHoming {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_can_do_drive_by(&self, player_: u32,
toggle_: bool) -> ResultOfSetPlayerCanDoDriveBy {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_can_do_drive_by(
            player_,
toggle_,
        );
        
        
        ResultOfSetPlayerCanDoDriveBy {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_parachute_pack_tint_index(&self, player_: u32,
tint_index_: i32) -> ResultOfGetPlayerParachutePackTintIndex {
    unsafe {
        let mut player_ = player_;
let mut tint_index_ = tint_index_;
        let success = sdk::natives::get_player_parachute_pack_tint_index(
            &mut tint_index_,
player_,
        );
        let tint_index_ = tint_index_;
        
        ResultOfGetPlayerParachutePackTintIndex {
            success,
            ret: (),
            tint_index_
        }
    }
}

    fn native_set_script_fire_position(&self, coord_x_: f32,
coord_y_: f32,
coord_z_: f32) -> ResultOfSetScriptFirePosition {
    unsafe {
        let mut coord_x_ = coord_x_;
let mut coord_y_ = coord_y_;
let mut coord_z_ = coord_z_;
        let success = sdk::natives::set_script_fire_position(
            coord_x_,
coord_y_,
coord_z_,
        );
        
        
        ResultOfSetScriptFirePosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_script_fire_position(&self, ) -> ResultOfRemoveScriptFirePosition {
    unsafe {
        
        let success = sdk::natives::remove_script_fire_position(
            
        );
        
        
        ResultOfRemoveScriptFirePosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_logging_in_np(&self, ) -> ResultOfIsPlayerLoggingInNp {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_player_logging_in_np(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerLoggingInNp {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_cloth_pin_frames(&self, player_: u32,
p1_: i32) -> ResultOfSetPlayerClothPinFrames {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::set_player_cloth_pin_frames(
            player_,
p1_,
        );
        
        
        ResultOfSetPlayerClothPinFrames {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_parachute_tint_index(&self, player_: u32,
tint_index_: i32) -> ResultOfGetPlayerParachuteTintIndex {
    unsafe {
        let mut player_ = player_;
let mut tint_index_ = tint_index_;
        let success = sdk::natives::get_player_parachute_tint_index(
            &mut tint_index_,
player_,
        );
        let tint_index_ = tint_index_;
        
        ResultOfGetPlayerParachuteTintIndex {
            success,
            ret: (),
            tint_index_
        }
    }
}

    fn native_set_player_forced_zoom(&self, player_: u32,
toggle_: bool) -> ResultOfSetPlayerForcedZoom {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_forced_zoom(
            player_,
toggle_,
        );
        
        
        ResultOfSetPlayerForcedZoom {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_force_skip_aim_intro(&self, player_: u32,
toggle_: bool) -> ResultOfSetPlayerForceSkipAimIntro {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_force_skip_aim_intro(
            player_,
toggle_,
        );
        
        
        ResultOfSetPlayerForceSkipAimIntro {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_max_armour(&self, player_: u32,
value_: i32) -> ResultOfSetPlayerMaxArmour {
    unsafe {
        let mut player_ = player_;
let mut value_ = value_;
        let success = sdk::natives::set_player_max_armour(
            player_,
value_,
        );
        
        
        ResultOfSetPlayerMaxArmour {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_targetting_anything(&self, player_: u32) -> ResultOfIsPlayerTargettingAnything {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_targetting_anything(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerTargettingAnything {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_player_targetting_entity(&self, player_: u32,
entity_: u32) -> ResultOfIsPlayerTargettingEntity {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut entity_ = entity_;
        let success = sdk::natives::is_player_targetting_entity(
            &mut native_return,
player_,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerTargettingEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_previous_variation_data(&self, player_: u32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOfSetPlayerPreviousVariationData {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::set_player_previous_variation_data(
            player_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOfSetPlayerPreviousVariationData {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_are_camera_controls_disabled(&self, ) -> ResultOfGetAreCameraControlsDisabled {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_are_camera_controls_disabled(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetAreCameraControlsDisabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_has_reserve_parachute(&self, player_: u32) -> ResultOfSetPlayerHasReserveParachute {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::set_player_has_reserve_parachute(
            player_,
        );
        
        
        ResultOfSetPlayerHasReserveParachute {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_wanted_and_has_been_seen_by_cops(&self, player_: u32) -> ResultOfIsWantedAndHasBeenSeenByCops {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_wanted_and_has_been_seen_by_cops(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfIsWantedAndHasBeenSeenByCops {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_may_only_enter_this_vehicle(&self, player_: u32,
vehicle_: u32) -> ResultOfSetPlayerMayOnlyEnterThisVehicle {
    unsafe {
        let mut player_ = player_;
let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_player_may_only_enter_this_vehicle(
            player_,
vehicle_,
        );
        
        
        ResultOfSetPlayerMayOnlyEnterThisVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_parachute_smoke_trail_color(&self, player_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOfSetPlayerParachuteSmokeTrailColor {
    unsafe {
        let mut player_ = player_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::set_player_parachute_smoke_trail_color(
            player_,
r_,
g_,
b_,
        );
        
        
        ResultOfSetPlayerParachuteSmokeTrailColor {
            success,
            ret: (),
            
        }
    }
}

    fn native_special_ability_activate(&self, player_: u32,
p1_: i32) -> ResultOfSpecialAbilityActivate {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::special_ability_activate(
            player_,
p1_,
        );
        
        
        ResultOfSpecialAbilityActivate {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_wanted_level_hidden_escape_time(&self, player_: u32) -> ResultOfResetWantedLevelHiddenEscapeTime {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::reset_wanted_level_hidden_escape_time(
            player_,
        );
        
        
        ResultOfResetWantedLevelHiddenEscapeTime {
            success,
            ret: (),
            
        }
    }
}

    fn native_assisted_movement_flush_route(&self, ) -> ResultOfAssistedMovementFlushRoute {
    unsafe {
        
        let success = sdk::natives::assisted_movement_flush_route(
            
        );
        
        
        ResultOfAssistedMovementFlushRoute {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_achievement_been_passed(&self, achievement_id_: i32) -> ResultOfHasAchievementBeenPassed {
    unsafe {
        let mut native_return = Default::default();
let mut achievement_id_ = achievement_id_;
        let success = sdk::natives::has_achievement_been_passed(
            &mut native_return,
achievement_id_,
        );
        let native_return = native_return;
        
        ResultOfHasAchievementBeenPassed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_player_parachute_model_override(&self, player_: u32) -> ResultOfClearPlayerParachuteModelOverride {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::clear_player_parachute_model_override(
            player_,
        );
        
        
        ResultOfClearPlayerParachuteModelOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_script_control_on(&self, player_: u32) -> ResultOfIsPlayerScriptControlOn {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_script_control_on(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerScriptControlOn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_health_recharge_max_percent(&self, player_: u32) -> ResultOfGetPlayerHealthRechargeMaxPercent {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_health_recharge_max_percent(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerHealthRechargeMaxPercent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_control(&self, player_: u32,
b_has_control_: bool,
flags_: i32) -> ResultOfSetPlayerControl {
    unsafe {
        let mut player_ = player_;
let mut b_has_control_ = b_has_control_;
let mut flags_ = flags_;
        let success = sdk::natives::set_player_control(
            player_,
b_has_control_,
flags_,
        );
        
        
        ResultOfSetPlayerControl {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_max_explosive_damage(&self, player_: u32,
p1_: f32) -> ResultOfSetPlayerMaxExplosiveDamage {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::set_player_max_explosive_damage(
            player_,
p1_,
        );
        
        
        ResultOfSetPlayerMaxExplosiveDamage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_everyone_ignore_player(&self, player_: u32,
toggle_: bool) -> ResultOfSetEveryoneIgnorePlayer {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_everyone_ignore_player(
            player_,
toggle_,
        );
        
        
        ResultOfSetEveryoneIgnorePlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_ready_for_cutscene(&self, player_: u32) -> ResultOfIsPlayerReadyForCutscene {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_ready_for_cutscene(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerReadyForCutscene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_player_targetable_entity(&self, player_: u32,
entity_: u32) -> ResultOfAddPlayerTargetableEntity {
    unsafe {
        let mut player_ = player_;
let mut entity_ = entity_;
        let success = sdk::natives::add_player_targetable_entity(
            player_,
entity_,
        );
        
        
        ResultOfAddPlayerTargetableEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_max_armour(&self, player_: u32) -> ResultOfGetPlayerMaxArmour {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_max_armour(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerMaxArmour {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_parachute_pack_tint_index(&self, player_: u32,
tint_index_: i32) -> ResultOfSetPlayerParachutePackTintIndex {
    unsafe {
        let mut player_ = player_;
let mut tint_index_ = tint_index_;
        let success = sdk::natives::set_player_parachute_pack_tint_index(
            player_,
tint_index_,
        );
        
        
        ResultOfSetPlayerParachutePackTintIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_display_system_signin_ui(&self, p0_: bool) -> ResultOfDisplaySystemSigninUi {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::display_system_signin_ui(
            p0_,
        );
        
        
        ResultOfDisplaySystemSigninUi {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_climbing(&self, player_: u32) -> ResultOfIsPlayerClimbing {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_climbing(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerClimbing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_parachute_model_override(&self, player_: u32,
model_: u32) -> ResultOfSetPlayerParachuteModelOverride {
    unsafe {
        let mut player_ = player_;
let mut model_ = model_;
        let success = sdk::natives::set_player_parachute_model_override(
            player_,
model_,
        );
        
        
        ResultOfSetPlayerParachuteModelOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_cause_of_most_recent_force_cleanup(&self, ) -> ResultOfGetCauseOfMostRecentForceCleanup {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_cause_of_most_recent_force_cleanup(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetCauseOfMostRecentForceCleanup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_suppress_crime_this_frame(&self, player_: u32,
crime_type_: i32) -> ResultOfSuppressCrimeThisFrame {
    unsafe {
        let mut player_ = player_;
let mut crime_type_ = crime_type_;
        let success = sdk::natives::suppress_crime_this_frame(
            player_,
crime_type_,
        );
        
        
        ResultOfSuppressCrimeThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_wanted_level_difficulty(&self, player_: u32,
difficulty_: f32) -> ResultOfSetWantedLevelDifficulty {
    unsafe {
        let mut player_ = player_;
let mut difficulty_ = difficulty_;
        let success = sdk::natives::set_wanted_level_difficulty(
            player_,
difficulty_,
        );
        
        
        ResultOfSetWantedLevelDifficulty {
            success,
            ret: (),
            
        }
    }
}

    fn native_special_ability_deactivate_fast(&self, player_: u32,
p1_: i32) -> ResultOfSpecialAbilityDeactivateFast {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::special_ability_deactivate_fast(
            player_,
p1_,
        );
        
        
        ResultOfSpecialAbilityDeactivateFast {
            success,
            ret: (),
            
        }
    }
}

    fn native_int_to_participantindex(&self, value_: i32) -> ResultOfIntToParticipantindex {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::int_to_participantindex(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOfIntToParticipantindex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_increase_player_jump_suppression_range(&self, player_: u32) -> ResultOfIncreasePlayerJumpSuppressionRange {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::increase_player_jump_suppression_range(
            player_,
        );
        
        
        ResultOfIncreasePlayerJumpSuppressionRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_player_targetable_entity(&self, player_: u32,
entity_: u32) -> ResultOfRemovePlayerTargetableEntity {
    unsafe {
        let mut player_ = player_;
let mut entity_ = entity_;
        let success = sdk::natives::remove_player_targetable_entity(
            player_,
entity_,
        );
        
        
        ResultOfRemovePlayerTargetableEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_auto_give_parachute_when_enter_plane(&self, player_: u32,
toggle_: bool) -> ResultOfSetAutoGiveParachuteWhenEnterPlane {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_auto_give_parachute_when_enter_plane(
            player_,
toggle_,
        );
        
        
        ResultOfSetAutoGiveParachuteWhenEnterPlane {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_cloth_package_index(&self, index_: i32) -> ResultOfSetPlayerClothPackageIndex {
    unsafe {
        let mut index_ = index_;
        let success = sdk::natives::set_player_cloth_package_index(
            index_,
        );
        
        
        ResultOfSetPlayerClothPackageIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_sprint(&self, player_: u32,
toggle_: bool) -> ResultOfSetPlayerSprint {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_sprint(
            player_,
toggle_,
        );
        
        
        ResultOfSetPlayerSprint {
            success,
            ret: (),
            
        }
    }
}

    fn native_special_ability_charge_normalized(&self, player_: u32,
normalized_value_: f32,
p2_: bool,
p3_: i32) -> ResultOfSpecialAbilityChargeNormalized {
    unsafe {
        let mut player_ = player_;
let mut normalized_value_ = normalized_value_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::special_ability_charge_normalized(
            player_,
normalized_value_,
p2_,
p3_,
        );
        
        
        ResultOfSpecialAbilityChargeNormalized {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_underwater_breath_percent_remaining(&self, player_: u32,
time_: f32) -> ResultOfSetPlayerUnderwaterBreathPercentRemaining {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut time_ = time_;
        let success = sdk::natives::set_player_underwater_breath_percent_remaining(
            &mut native_return,
player_,
time_,
        );
        let native_return = native_return;
        
        ResultOfSetPlayerUnderwaterBreathPercentRemaining {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_underwater_time_remaining(&self, player_: u32) -> ResultOfGetPlayerUnderwaterTimeRemaining {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_underwater_time_remaining(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerUnderwaterTimeRemaining {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_restore_player_stamina(&self, player_: u32,
p1_: f32) -> ResultOfRestorePlayerStamina {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::restore_player_stamina(
            player_,
p1_,
        );
        
        
        ResultOfRestorePlayerStamina {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_parachute_tint_index(&self, player_: u32,
tint_index_: i32) -> ResultOfSetPlayerParachuteTintIndex {
    unsafe {
        let mut player_ = player_;
let mut tint_index_ = tint_index_;
        let success = sdk::natives::set_player_parachute_tint_index(
            player_,
tint_index_,
        );
        
        
        ResultOfSetPlayerParachuteTintIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_special_ability_multiplier(&self, multiplier_: f32) -> ResultOfSetSpecialAbilityMultiplier {
    unsafe {
        let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_special_ability_multiplier(
            multiplier_,
        );
        
        
        ResultOfSetSpecialAbilityMultiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_vehicle_damage_modifier(&self, player_: u32,
modifier_: f32) -> ResultOfSetPlayerVehicleDamageModifier {
    unsafe {
        let mut player_ = player_;
let mut modifier_ = modifier_;
        let success = sdk::natives::set_player_vehicle_damage_modifier(
            player_,
modifier_,
        );
        
        
        ResultOfSetPlayerVehicleDamageModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_index(&self, ) -> ResultOfGetPlayerIndex {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_player_index(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_player_stamina(&self, player_: u32) -> ResultOfResetPlayerStamina {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::reset_player_stamina(
            player_,
        );
        
        
        ResultOfResetPlayerStamina {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_wanted_level_time_to_escape(&self, ) -> ResultOfGetWantedLevelTimeToEscape {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_wanted_level_time_to_escape(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetWantedLevelTimeToEscape {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_swim_multiplier_for_player(&self, player_: u32,
multiplier_: f32) -> ResultOfSetSwimMultiplierForPlayer {
    unsafe {
        let mut player_ = player_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_swim_multiplier_for_player(
            player_,
multiplier_,
        );
        
        
        ResultOfSetSwimMultiplierForPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_max_wanted_level(&self, max_wanted_level_: i32) -> ResultOfSetMaxWantedLevel {
    unsafe {
        let mut max_wanted_level_ = max_wanted_level_;
        let success = sdk::natives::set_max_wanted_level(
            max_wanted_level_,
        );
        
        
        ResultOfSetMaxWantedLevel {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_player_teleport(&self, player_: u32,
x_: f32,
y_: f32,
z_: f32,
heading_: f32,
p5_: bool,
find_collision_land_: bool,
p7_: bool) -> ResultOfStartPlayerTeleport {
    unsafe {
        let mut player_ = player_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut p5_ = p5_;
let mut find_collision_land_ = find_collision_land_;
let mut p7_ = p7_;
        let success = sdk::natives::start_player_teleport(
            player_,
x_,
y_,
z_,
heading_,
p5_,
find_collision_land_,
p7_,
        );
        
        
        ResultOfStartPlayerTeleport {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_start_hidden_evasion(&self, player_: u32) -> ResultOfForceStartHiddenEvasion {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::force_start_hidden_evasion(
            player_,
        );
        
        
        ResultOfForceStartHiddenEvasion {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_melee_weapon_defense_modifier(&self, player_: u32,
modifier_: f32) -> ResultOfSetPlayerMeleeWeaponDefenseModifier {
    unsafe {
        let mut player_ = player_;
let mut modifier_ = modifier_;
        let success = sdk::natives::set_player_melee_weapon_defense_modifier(
            player_,
modifier_,
        );
        
        
        ResultOfSetPlayerMeleeWeaponDefenseModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_assisted_movement_close_route(&self, ) -> ResultOfAssistedMovementCloseRoute {
    unsafe {
        
        let success = sdk::natives::assisted_movement_close_route(
            
        );
        
        
        ResultOfAssistedMovementCloseRoute {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_reserve_parachute_tint_index(&self, player_: u32,
index_: i32) -> ResultOfSetPlayerReserveParachuteTintIndex {
    unsafe {
        let mut player_ = player_;
let mut index_ = index_;
        let success = sdk::natives::set_player_reserve_parachute_tint_index(
            player_,
index_,
        );
        
        
        ResultOfSetPlayerReserveParachuteTintIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_are_player_flashing_stars_about_to_drop(&self, player_: u32) -> ResultOfArePlayerFlashingStarsAboutToDrop {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::are_player_flashing_stars_about_to_drop(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfArePlayerFlashingStarsAboutToDrop {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_targeting_mode(&self, target_mode_: i32) -> ResultOfSetPlayerTargetingMode {
    unsafe {
        let mut target_mode_ = target_mode_;
        let success = sdk::natives::set_player_targeting_mode(
            target_mode_,
        );
        
        
        ResultOfSetPlayerTargetingMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_special_ability_enabled(&self, player_: u32,
p1_: i32) -> ResultOfIsSpecialAbilityEnabled {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::is_special_ability_enabled(
            &mut native_return,
player_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfIsSpecialAbilityEnabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_special_ability_mp(&self, player_: u32,
p1_: i32,
p2_: i32) -> ResultOfSetSpecialAbilityMp {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_special_ability_mp(
            player_,
p1_,
p2_,
        );
        
        
        ResultOfSetSpecialAbilityMp {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_sneaking_noise_multiplier(&self, player_: u32,
multiplier_: f32) -> ResultOfSetPlayerSneakingNoiseMultiplier {
    unsafe {
        let mut player_ = player_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_player_sneaking_noise_multiplier(
            player_,
multiplier_,
        );
        
        
        ResultOfSetPlayerSneakingNoiseMultiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_player_wanted_level(&self, player_: u32) -> ResultOfClearPlayerWantedLevel {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::clear_player_wanted_level(
            player_,
        );
        
        
        ResultOfClearPlayerWantedLevel {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_law_response_delay_override(&self, p0_: f32) -> ResultOfSetLawResponseDelayOverride {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_law_response_delay_override(
            p0_,
        );
        
        
        ResultOfSetLawResponseDelayOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_players_last_vehicle(&self, ) -> ResultOfGetPlayersLastVehicle {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_players_last_vehicle(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetPlayersLastVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_invincible(&self, player_: u32) -> ResultOfGetPlayerInvincible {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_invincible(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerInvincible {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_special_ability_charge_absolute(&self, player_: u32,
p1_: i32,
p2_: bool,
p3_: i32) -> ResultOfSpecialAbilityChargeAbsolute {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::special_ability_charge_absolute(
            player_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfSpecialAbilityChargeAbsolute {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_player_throw_grenade_while_using_gun(&self, ) -> ResultOfDisablePlayerThrowGrenadeWhileUsingGun {
    unsafe {
        
        let success = sdk::natives::disable_player_throw_grenade_while_using_gun(
            
        );
        
        
        ResultOfDisablePlayerThrowGrenadeWhileUsingGun {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_using_fps_third_person_cover(&self, ) -> ResultOfGetIsUsingFpsThirdPersonCover {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_using_fps_third_person_cover(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetIsUsingFpsThirdPersonCover {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_wanted_level_difficulty(&self, player_: u32) -> ResultOfResetWantedLevelDifficulty {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::reset_wanted_level_difficulty(
            player_,
        );
        
        
        ResultOfResetWantedLevelDifficulty {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_received_battle_event_recently(&self, player_: u32,
p1_: i32,
p2_: bool) -> ResultOfGetPlayerReceivedBattleEventRecently {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::get_player_received_battle_event_recently(
            &mut native_return,
player_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerReceivedBattleEventRecently {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_cleanup(&self, cleanup_flags_: i32) -> ResultOfForceCleanup {
    unsafe {
        let mut cleanup_flags_ = cleanup_flags_;
        let success = sdk::natives::force_cleanup(
            cleanup_flags_,
        );
        
        
        ResultOfForceCleanup {
            success,
            ret: (),
            
        }
    }
}

    fn native_update_wanted_position_this_frame(&self, player_: u32) -> ResultOfUpdateWantedPositionThisFrame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::update_wanted_position_this_frame(
            player_,
        );
        
        
        ResultOfUpdateWantedPositionThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_player_health_recharge(&self, player_: u32) -> ResultOfDisablePlayerHealthRecharge {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::disable_player_health_recharge(
            player_,
        );
        
        
        ResultOfDisablePlayerHealthRecharge {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_weapon_minigun_defense_modifier(&self, player_: u32,
modifier_: f32) -> ResultOfSetPlayerWeaponMinigunDefenseModifier {
    unsafe {
        let mut player_ = player_;
let mut modifier_ = modifier_;
        let success = sdk::natives::set_player_weapon_minigun_defense_modifier(
            player_,
modifier_,
        );
        
        
        ResultOfSetPlayerWeaponMinigunDefenseModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_give_achievement_to_player(&self, achievement_id_: i32) -> ResultOfGiveAchievementToPlayer {
    unsafe {
        let mut native_return = Default::default();
let mut achievement_id_ = achievement_id_;
        let success = sdk::natives::give_achievement_to_player(
            &mut native_return,
achievement_id_,
        );
        let native_return = native_return;
        
        ResultOfGiveAchievementToPlayer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_firing_amnesty(&self, duration_: i32) -> ResultOfStartFiringAmnesty {
    unsafe {
        let mut duration_ = duration_;
        let success = sdk::natives::start_firing_amnesty(
            duration_,
        );
        
        
        ResultOfStartFiringAmnesty {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_player_vehicle_rewards(&self, player_: u32) -> ResultOfDisablePlayerVehicleRewards {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::disable_player_vehicle_rewards(
            player_,
        );
        
        
        ResultOfDisablePlayerVehicleRewards {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_parachute_model_override(&self, player_: u32) -> ResultOfGetPlayerParachuteModelOverride {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_parachute_model_override(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerParachuteModelOverride {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_achievement_progress(&self, achievement_id_: i32,
progress_: i32) -> ResultOfSetAchievementProgress {
    unsafe {
        let mut native_return = Default::default();
let mut achievement_id_ = achievement_id_;
let mut progress_ = progress_;
        let success = sdk::natives::set_achievement_progress(
            &mut native_return,
achievement_id_,
progress_,
        );
        let native_return = native_return;
        
        ResultOfSetAchievementProgress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_all_neutral_random_peds_flee_this_frame(&self, player_: u32) -> ResultOfSetAllNeutralRandomPedsFleeThisFrame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::set_all_neutral_random_peds_flee_this_frame(
            player_,
        );
        
        
        ResultOfSetAllNeutralRandomPedsFleeThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_health_recharge_max_percent(&self, player_: u32,
limit_: f32) -> ResultOfSetPlayerHealthRechargeMaxPercent {
    unsafe {
        let mut player_ = player_;
let mut limit_ = limit_;
        let success = sdk::natives::set_player_health_recharge_max_percent(
            player_,
limit_,
        );
        
        
        ResultOfSetPlayerHealthRechargeMaxPercent {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_player_teleport(&self, ) -> ResultOfStopPlayerTeleport {
    unsafe {
        
        let success = sdk::natives::stop_player_teleport(
            
        );
        
        
        ResultOfStopPlayerTeleport {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_simulate_aiming(&self, player_: u32,
toggle_: bool) -> ResultOfSetPlayerSimulateAiming {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_simulate_aiming(
            player_,
toggle_,
        );
        
        
        ResultOfSetPlayerSimulateAiming {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_special_ability_unlocked(&self, player_model_: u32) -> ResultOfIsSpecialAbilityUnlocked {
    unsafe {
        let mut native_return = Default::default();
let mut player_model_ = player_model_;
        let success = sdk::natives::is_special_ability_unlocked(
            &mut native_return,
player_model_,
        );
        let native_return = native_return;
        
        ResultOfIsSpecialAbilityUnlocked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_time_since_last_death(&self, ) -> ResultOfGetTimeSinceLastDeath {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_time_since_last_death(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetTimeSinceLastDeath {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_force_cleanup_occurred(&self, cleanup_flags_: i32) -> ResultOfHasForceCleanupOccurred {
    unsafe {
        let mut native_return = Default::default();
let mut cleanup_flags_ = cleanup_flags_;
        let success = sdk::natives::has_force_cleanup_occurred(
            &mut native_return,
cleanup_flags_,
        );
        let native_return = native_return;
        
        ResultOfHasForceCleanupOccurred {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_special_ability_charge_on_mission_failed(&self, player_: u32,
p1_: i32) -> ResultOfSpecialAbilityChargeOnMissionFailed {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::special_ability_charge_on_mission_failed(
            player_,
p1_,
        );
        
        
        ResultOfSpecialAbilityChargeOnMissionFailed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_air_drag_multiplier_for_players_vehicle(&self, player_: u32,
multiplier_: f32) -> ResultOfSetAirDragMultiplierForPlayersVehicle {
    unsafe {
        let mut player_ = player_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_air_drag_multiplier_for_players_vehicle(
            player_,
multiplier_,
        );
        
        
        ResultOfSetAirDragMultiplierForPlayersVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_can_collect_dropped_money(&self, player_: u32,
p1_: bool) -> ResultOfSetPlayerCanCollectDroppedMoney {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::set_player_can_collect_dropped_money(
            player_,
p1_,
        );
        
        
        ResultOfSetPlayerCanCollectDroppedMoney {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_using_hood_camera(&self, ) -> ResultOfGetIsUsingHoodCamera {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_is_using_hood_camera(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetIsUsingHoodCamera {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_weapon_damage_modifier(&self, player_: u32,
modifier_: f32) -> ResultOfSetPlayerWeaponDamageModifier {
    unsafe {
        let mut player_ = player_;
let mut modifier_ = modifier_;
        let success = sdk::natives::set_player_weapon_damage_modifier(
            player_,
modifier_,
        );
        
        
        ResultOfSetPlayerWeaponDamageModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_auto_give_scuba_gear_when_exit_vehicle(&self, player_: u32,
toggle_: bool) -> ResultOfSetAutoGiveScubaGearWhenExitVehicle {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_auto_give_scuba_gear_when_exit_vehicle(
            player_,
toggle_,
        );
        
        
        ResultOfSetAutoGiveScubaGearWhenExitVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_can_use_cover(&self, player_: u32,
toggle_: bool) -> ResultOfSetPlayerCanUseCover {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_can_use_cover(
            player_,
toggle_,
        );
        
        
        ResultOfSetPlayerCanUseCover {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_time_since_player_drove_on_pavement(&self, player_: u32) -> ResultOfGetTimeSincePlayerDroveOnPavement {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_time_since_player_drove_on_pavement(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetTimeSincePlayerDroveOnPavement {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_player_left_the_world(&self, player_: u32) -> ResultOfHasPlayerLeftTheWorld {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::has_player_left_the_world(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfHasPlayerLeftTheWorld {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_reserve_parachute_tint_index(&self, player_: u32,
index_: i32) -> ResultOfGetPlayerReserveParachuteTintIndex {
    unsafe {
        let mut player_ = player_;
let mut index_ = index_;
        let success = sdk::natives::get_player_reserve_parachute_tint_index(
            &mut index_,
player_,
        );
        let index_ = index_;
        
        ResultOfGetPlayerReserveParachuteTintIndex {
            success,
            ret: (),
            index_
        }
    }
}

    fn native_set_player_can_be_hassled_by_gangs(&self, player_: u32,
toggle_: bool) -> ResultOfSetPlayerCanBeHassledByGangs {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_can_be_hassled_by_gangs(
            player_,
toggle_,
        );
        
        
        ResultOfSetPlayerCanBeHassledByGangs {
            success,
            ret: (),
            
        }
    }
}

    fn native_special_ability_deactivate(&self, player_: u32,
p1_: i32) -> ResultOfSpecialAbilityDeactivate {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::special_ability_deactivate(
            player_,
p1_,
        );
        
        
        ResultOfSpecialAbilityDeactivate {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_player_been_spotted_in_stolen_vehicle(&self, player_: u32) -> ResultOfHasPlayerBeenSpottedInStolenVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::has_player_been_spotted_in_stolen_vehicle(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfHasPlayerBeenSpottedInStolenVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_player_ped_id(&self, ) -> ResultOfPlayerPedId {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::player_ped_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfPlayerPedId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_explosive_damage_modifier(&self, player_: u32,
p1_: i32) -> ResultOfSetPlayerExplosiveDamageModifier {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::set_player_explosive_damage_modifier(
            player_,
p1_,
        );
        
        
        ResultOfSetPlayerExplosiveDamageModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_parachute_variation_override(&self, player_: u32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: bool) -> ResultOfSetPlayerParachuteVariationOverride {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::set_player_parachute_variation_override(
            player_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfSetPlayerParachuteVariationOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_world_boundary_for_player(&self, ) -> ResultOfResetWorldBoundaryForPlayer {
    unsafe {
        
        let success = sdk::natives::reset_world_boundary_for_player(
            
        );
        
        
        ResultOfResetWorldBoundaryForPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_dispatch_cops_for_player(&self, player_: u32,
toggle_: bool) -> ResultOfSetDispatchCopsForPlayer {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_dispatch_cops_for_player(
            player_,
toggle_,
        );
        
        
        ResultOfSetDispatchCopsForPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_time_since_player_drove_against_traffic(&self, player_: u32) -> ResultOfGetTimeSincePlayerDroveAgainstTraffic {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_time_since_player_drove_against_traffic(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetTimeSincePlayerDroveAgainstTraffic {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_noise_multiplier(&self, player_: u32,
multiplier_: f32) -> ResultOfSetPlayerNoiseMultiplier {
    unsafe {
        let mut player_ = player_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_player_noise_multiplier(
            player_,
multiplier_,
        );
        
        
        ResultOfSetPlayerNoiseMultiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_report_police_spotted_player(&self, player_: u32) -> ResultOfReportPoliceSpottedPlayer {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::report_police_spotted_player(
            player_,
        );
        
        
        ResultOfReportPoliceSpottedPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_parachute_pack_model_override(&self, player_: u32,
model_: u32) -> ResultOfSetPlayerParachutePackModelOverride {
    unsafe {
        let mut player_ = player_;
let mut model_ = model_;
        let success = sdk::natives::set_player_parachute_pack_model_override(
            player_,
model_,
        );
        
        
        ResultOfSetPlayerParachutePackModelOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_debug_invincible(&self, player_: u32) -> ResultOfGetPlayerDebugInvincible {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_debug_invincible(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerDebugInvincible {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_player_free_for_ambient_task(&self, player_: u32) -> ResultOfIsPlayerFreeForAmbientTask {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_free_for_ambient_task(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerFreeForAmbientTask {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_mopping_area_free_in_front_of_player(&self, player_: u32,
p1_: f32) -> ResultOfGetIsMoppingAreaFreeInFrontOfPlayer {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::get_is_mopping_area_free_in_front_of_player(
            &mut native_return,
player_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfGetIsMoppingAreaFreeInFrontOfPlayer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_all_neutral_random_peds_flee(&self, player_: u32,
toggle_: bool) -> ResultOfSetAllNeutralRandomPedsFlee {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_all_neutral_random_peds_flee(
            player_,
toggle_,
        );
        
        
        ResultOfSetAllNeutralRandomPedsFlee {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_player_start_mission(&self, player_: u32) -> ResultOfCanPlayerStartMission {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::can_player_start_mission(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfCanPlayerStartMission {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_wanted_level_now(&self, player_: u32,
p1_: bool) -> ResultOfSetPlayerWantedLevelNow {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::set_player_wanted_level_now(
            player_,
p1_,
        );
        
        
        ResultOfSetPlayerWantedLevelNow {
            success,
            ret: (),
            
        }
    }
}

    fn native_update_player_teleport(&self, player_: u32) -> ResultOfUpdatePlayerTeleport {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::update_player_teleport(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfUpdatePlayerTeleport {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_wanted_level(&self, player_: u32) -> ResultOfGetPlayerWantedLevel {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_player_wanted_level(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerWantedLevel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_time_since_player_hit_ped(&self, player_: u32) -> ResultOfGetTimeSincePlayerHitPed {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::get_time_since_player_hit_ped(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetTimeSincePlayerHitPed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_player_damaged_at_least_one_non_animal_ped(&self, player_: u32) -> ResultOfHasPlayerDamagedAtLeastOneNonAnimalPed {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::has_player_damaged_at_least_one_non_animal_ped(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfHasPlayerDamagedAtLeastOneNonAnimalPed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_rgb_colour(&self, player_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOfGetPlayerRgbColour {
    unsafe {
        let mut player_ = player_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::get_player_rgb_colour(
            &mut r_,
&mut g_,
&mut b_,
player_,
        );
        let r_ = r_;
let g_ = g_;
let b_ = b_;
        
        ResultOfGetPlayerRgbColour {
            success,
            ret: (),
            r_,
g_,
b_
        }
    }
}

    fn native_report_crime(&self, player_: u32,
crime_type_: i32,
wanted_lvl_thresh_: i32) -> ResultOfReportCrime {
    unsafe {
        let mut player_ = player_;
let mut crime_type_ = crime_type_;
let mut wanted_lvl_thresh_ = wanted_lvl_thresh_;
        let success = sdk::natives::report_crime(
            player_,
crime_type_,
wanted_lvl_thresh_,
        );
        
        
        ResultOfReportCrime {
            success,
            ret: (),
            
        }
    }
}

    fn native_special_ability_charge_continuous(&self, player_: u32,
p1_: u32,
p2_: i32) -> ResultOfSpecialAbilityChargeContinuous {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::special_ability_charge_continuous(
            player_,
p1_,
p2_,
        );
        
        
        ResultOfSpecialAbilityChargeContinuous {
            success,
            ret: (),
            
        }
    }
}

    fn native_player_attach_virtual_bound(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: f32) -> ResultOfPlayerAttachVirtualBound {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::player_attach_virtual_bound(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
        );
        
        
        ResultOfPlayerAttachVirtualBound {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_homing_disabled_for_all_vehicle_weapons(&self, p0_: i32,
p1_: i32) -> ResultOfSetPlayerHomingDisabledForAllVehicleWeapons {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_player_homing_disabled_for_all_vehicle_weapons(
            p0_,
p1_,
        );
        
        
        ResultOfSetPlayerHomingDisabledForAllVehicleWeapons {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_player_id_to_int(&self, ) -> ResultOfNetworkPlayerIdToInt {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_player_id_to_int(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkPlayerIdToInt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_parachute_smoke_trail_color(&self, player_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOfGetPlayerParachuteSmokeTrailColor {
    unsafe {
        let mut player_ = player_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::get_player_parachute_smoke_trail_color(
            &mut r_,
&mut g_,
&mut b_,
player_,
        );
        let r_ = r_;
let g_ = g_;
let b_ = b_;
        
        ResultOfGetPlayerParachuteSmokeTrailColor {
            success,
            ret: (),
            r_,
g_,
b_
        }
    }
}

    fn native_set_player_fall_distance_to_trigger_ragdoll_override(&self, player_: u32,
p1_: f32) -> ResultOfSetPlayerFallDistanceToTriggerRagdollOverride {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::set_player_fall_distance_to_trigger_ragdoll_override(
            player_,
p1_,
        );
        
        
        ResultOfSetPlayerFallDistanceToTriggerRagdollOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_player_has_damaged_at_least_one_ped(&self, player_: u32) -> ResultOfClearPlayerHasDamagedAtLeastOnePed {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::clear_player_has_damaged_at_least_one_ped(
            player_,
        );
        
        
        ResultOfClearPlayerHasDamagedAtLeastOnePed {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_player_driving_wreckless(&self, player_: u32,
p1_: i32) -> ResultOfGetIsPlayerDrivingWreckless {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::get_is_player_driving_wreckless(
            &mut native_return,
player_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfGetIsPlayerDrivingWreckless {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_special_ability_charge_medium(&self, player_: u32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfSpecialAbilityChargeMedium {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::special_ability_charge_medium(
            player_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfSpecialAbilityChargeMedium {
            success,
            ret: (),
            
        }
    }
}

    fn native_special_ability_unlock(&self, player_model_: u32,
p1_: i32) -> ResultOfSpecialAbilityUnlock {
    unsafe {
        let mut player_model_ = player_model_;
let mut p1_ = p1_;
        let success = sdk::natives::special_ability_unlock(
            player_model_,
p1_,
        );
        
        
        ResultOfSpecialAbilityUnlock {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_online(&self, ) -> ResultOfIsPlayerOnline {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_player_online(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerOnline {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_ped_hear_player(&self, player_: u32,
ped_: u32) -> ResultOfCanPedHearPlayer {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
let mut ped_ = ped_;
        let success = sdk::natives::can_ped_hear_player(
            &mut native_return,
player_,
ped_,
        );
        let native_return = native_return;
        
        ResultOfCanPedHearPlayer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_player_helmet(&self, player_: u32,
p2_: bool) -> ResultOfRemovePlayerHelmet {
    unsafe {
        let mut player_ = player_;
let mut p2_ = p2_;
        let success = sdk::natives::remove_player_helmet(
            player_,
p2_,
        );
        
        
        ResultOfRemovePlayerHelmet {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_can_leave_parachute_smoke_trail(&self, player_: u32,
enabled_: bool) -> ResultOfSetPlayerCanLeaveParachuteSmokeTrail {
    unsafe {
        let mut player_ = player_;
let mut enabled_ = enabled_;
        let success = sdk::natives::set_player_can_leave_parachute_smoke_trail(
            player_,
enabled_,
        );
        
        
        ResultOfSetPlayerCanLeaveParachuteSmokeTrail {
            success,
            ret: (),
            
        }
    }
}

    fn native_special_ability_charge_large(&self, player_: u32,
p1_: bool,
p2_: bool,
p3_: i32) -> ResultOfSpecialAbilityChargeLarge {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::special_ability_charge_large(
            player_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfSpecialAbilityChargeLarge {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_cleanup_for_thread_with_this_id(&self, id_: i32,
cleanup_flags_: i32) -> ResultOfForceCleanupForThreadWithThisId {
    unsafe {
        let mut id_ = id_;
let mut cleanup_flags_ = cleanup_flags_;
        let success = sdk::natives::force_cleanup_for_thread_with_this_id(
            id_,
cleanup_flags_,
        );
        
        
        ResultOfForceCleanupForThreadWithThisId {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_pressing_horn(&self, player_: u32) -> ResultOfIsPlayerPressingHorn {
    unsafe {
        let mut native_return = Default::default();
let mut player_ = player_;
        let success = sdk::natives::is_player_pressing_horn(
            &mut native_return,
player_,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerPressingHorn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_law_peds_can_attack_non_wanted_player_this_frame(&self, player_: u32) -> ResultOfSetLawPedsCanAttackNonWantedPlayerThisFrame {
    unsafe {
        let mut player_ = player_;
        let success = sdk::natives::set_law_peds_can_attack_non_wanted_player_this_frame(
            player_,
        );
        
        
        ResultOfSetLawPedsCanAttackNonWantedPlayerThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_wanted_level_threshold(&self, wanted_level_: i32) -> ResultOfGetWantedLevelThreshold {
    unsafe {
        let mut native_return = Default::default();
let mut wanted_level_ = wanted_level_;
        let success = sdk::natives::get_wanted_level_threshold(
            &mut native_return,
wanted_level_,
        );
        let native_return = native_return;
        
        ResultOfGetWantedLevelThreshold {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_leave_ped_behind(&self, player_: u32,
toggle_: bool) -> ResultOfSetPlayerLeavePedBehind {
    unsafe {
        let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_player_leave_ped_behind(
            player_,
toggle_,
        );
        
        
        ResultOfSetPlayerLeavePedBehind {
            success,
            ret: (),
            
        }
    }
}

    fn native_update_special_ability_from_stat(&self, player_: u32,
p1_: i32) -> ResultOfUpdateSpecialAbilityFromStat {
    unsafe {
        let mut player_ = player_;
let mut p1_ = p1_;
        let success = sdk::natives::update_special_ability_from_stat(
            player_,
p1_,
        );
        
        
        ResultOfUpdateSpecialAbilityFromStat {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_replay_recording(&self, ) -> ResultOfStopReplayRecording {
    unsafe {
        
        let success = sdk::natives::stop_replay_recording(
            
        );
        
        
        ResultOfStopReplayRecording {
            success,
            ret: (),
            
        }
    }
}

    fn native_replay_cancel_event(&self, ) -> ResultOfReplayCancelEvent {
    unsafe {
        
        let success = sdk::natives::replay_cancel_event(
            
        );
        
        
        ResultOfReplayCancelEvent {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_replay_recording(&self, ) -> ResultOfIsReplayRecording {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_replay_recording(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsReplayRecording {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_replay_check_for_event_this_frame(&self, mission_name_label_: Option<String>,
p1_: i32) -> ResultOfReplayCheckForEventThisFrame {
    unsafe {
        let mut mission_name_label_ = sdk_helpers::create_c_string_ptr(mission_name_label_);
let mut p1_ = p1_;
        let success = sdk::natives::replay_check_for_event_this_frame(
            mission_name_label_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOfReplayCheckForEventThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_replay_record_back_for_time(&self, p0_: f32,
p1_: f32,
p2_: i32) -> ResultOfReplayRecordBackForTime {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::replay_record_back_for_time(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfReplayRecordBackForTime {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_replay_record_space_available(&self, p0_: bool) -> ResultOfIsReplayRecordSpaceAvailable {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::is_replay_record_space_available(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfIsReplayRecordSpaceAvailable {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_replay_available(&self, ) -> ResultOfIsReplayAvailable {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_replay_available(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsReplayAvailable {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_replay_start_event(&self, p0_: i32) -> ResultOfReplayStartEvent {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::replay_start_event(
            p0_,
        );
        
        
        ResultOfReplayStartEvent {
            success,
            ret: (),
            
        }
    }
}

    fn native_save_replay_recording(&self, ) -> ResultOfSaveReplayRecording {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::save_replay_recording(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfSaveReplayRecording {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_record_greatest_moment(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfRecordGreatestMoment {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::record_greatest_moment(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfRecordGreatestMoment {
            success,
            ret: (),
            
        }
    }
}

    fn native_replay_stop_event(&self, ) -> ResultOfReplayStopEvent {
    unsafe {
        
        let success = sdk::natives::replay_stop_event(
            
        );
        
        
        ResultOfReplayStopEvent {
            success,
            ret: (),
            
        }
    }
}

    fn native_cancel_replay_recording(&self, ) -> ResultOfCancelReplayRecording {
    unsafe {
        
        let success = sdk::natives::cancel_replay_recording(
            
        );
        
        
        ResultOfCancelReplayRecording {
            success,
            ret: (),
            
        }
    }
}

    fn native_replay_disable_camera_movement_this_frame(&self, ) -> ResultOfReplayDisableCameraMovementThisFrame {
    unsafe {
        
        let success = sdk::natives::replay_disable_camera_movement_this_frame(
            
        );
        
        
        ResultOfReplayDisableCameraMovementThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_replay_recording(&self, mode_: i32) -> ResultOfStartReplayRecording {
    unsafe {
        let mut mode_ = mode_;
        let success = sdk::natives::start_replay_recording(
            mode_,
        );
        
        
        ResultOfStartReplayRecording {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_replay_initialized(&self, ) -> ResultOfIsReplayInitialized {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_replay_initialized(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsReplayInitialized {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_replay_prevent_recording_this_frame(&self, ) -> ResultOfReplayPreventRecordingThisFrame {
    unsafe {
        
        let success = sdk::natives::replay_prevent_recording_this_frame(
            
        );
        
        
        ResultOfReplayPreventRecordingThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_replay_reset_event_info(&self, ) -> ResultOfReplayResetEventInfo {
    unsafe {
        
        let success = sdk::natives::replay_reset_event_info(
            
        );
        
        
        ResultOfReplayResetEventInfo {
            success,
            ret: (),
            
        }
    }
}

    fn native_replay_control_shutdown(&self, ) -> ResultOfReplayControlShutdown {
    unsafe {
        
        let success = sdk::natives::replay_control_shutdown(
            
        );
        
        
        ResultOfReplayControlShutdown {
            success,
            ret: (),
            
        }
    }
}

    fn native_activate_rockstar_editor(&self, p0_: i32) -> ResultOfActivateRockstarEditor {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::activate_rockstar_editor(
            p0_,
        );
        
        
        ResultOfActivateRockstarEditor {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_scripts_have_cleaned_up_for_replay_system(&self, ) -> ResultOfSetScriptsHaveCleanedUpForReplaySystem {
    unsafe {
        
        let success = sdk::natives::set_scripts_have_cleaned_up_for_replay_system(
            
        );
        
        
        ResultOfSetScriptsHaveCleanedUpForReplaySystem {
            success,
            ret: (),
            
        }
    }
}

    fn native_register_effect_for_replay_editor(&self, p0_: Option<String>,
p1_: bool) -> ResultOfRegisterEffectForReplayEditor {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
        let success = sdk::natives::register_effect_for_replay_editor(
            p0_.as_ref().unwrap(),
p1_,
        );
        
        
        ResultOfRegisterEffectForReplayEditor {
            success,
            ret: (),
            
        }
    }
}

    fn native_replay_system_has_requested_a_script_cleanup(&self, ) -> ResultOfReplaySystemHasRequestedAscriptCleanup {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::replay_system_has_requested_a_script_cleanup(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfReplaySystemHasRequestedAscriptCleanup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_replay_system_paused_for_save(&self, p0_: bool) -> ResultOfSetReplaySystemPausedForSave {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_replay_system_paused_for_save(
            p0_,
        );
        
        
        ResultOfSetReplaySystemPausedForSave {
            success,
            ret: (),
            
        }
    }
}

    fn native_savemigration_mp_get_status(&self, ) -> ResultOfSavemigrationMpGetStatus {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::savemigration_mp_get_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfSavemigrationMpGetStatus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_savemigration_mp_num_accounts(&self, ) -> ResultOfSavemigrationMpNumAccounts {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::savemigration_mp_num_accounts(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfSavemigrationMpNumAccounts {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_savemigration_is_mp_enabled(&self, ) -> ResultOfSavemigrationIsMpEnabled {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::savemigration_is_mp_enabled(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfSavemigrationIsMpEnabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_savemigration_mp_request_accounts(&self, ) -> ResultOfSavemigrationMpRequestAccounts {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::savemigration_mp_request_accounts(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfSavemigrationMpRequestAccounts {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_savemigration_mp_get_accounts_status(&self, ) -> ResultOfSavemigrationMpGetAccountsStatus {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::savemigration_mp_get_accounts_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfSavemigrationMpGetAccountsStatus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_savemigration_mp_request_status(&self, ) -> ResultOfSavemigrationMpRequestStatus {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::savemigration_mp_request_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfSavemigrationMpRequestStatus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_savemigration_mp_get_account(&self, p0_: i32,
p1_: shared::MemoryBufferId) -> ResultOfSavemigrationMpGetAccount {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
        let success = sdk::natives::savemigration_mp_get_account(
            &mut native_return,
p1_,
p0_,
        );
        let native_return = native_return;
let p1_ = 0;
        
        ResultOfSavemigrationMpGetAccount {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_get_name_of_script_with_this_id(&self, thread_id_: i32) -> ResultOfGetNameOfScriptWithThisId {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut thread_id_ = thread_id_;
        let success = sdk::natives::get_name_of_script_with_this_id(
            native_return.pin_mut(),
thread_id_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetNameOfScriptWithThisId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_shutdown_loading_screen(&self, ) -> ResultOfShutdownLoadingScreen {
    unsafe {
        
        let success = sdk::natives::shutdown_loading_screen(
            
        );
        
        
        ResultOfShutdownLoadingScreen {
            success,
            ret: (),
            
        }
    }
}

    fn native_bg_does_launch_param_exist(&self, script_index_: i32,
p1_: Option<String>) -> ResultOfBgDoesLaunchParamExist {
    unsafe {
        let mut native_return = Default::default();
let mut script_index_ = script_index_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::bg_does_launch_param_exist(
            &mut native_return,
script_index_,
p1_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfBgDoesLaunchParamExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_bg_end_context_hash(&self, context_hash_: u32) -> ResultOfBgEndContextHash {
    unsafe {
        let mut context_hash_ = context_hash_;
        let success = sdk::natives::bg_end_context_hash(
            context_hash_,
        );
        
        
        ResultOfBgEndContextHash {
            success,
            ret: (),
            
        }
    }
}

    fn native_terminate_this_thread(&self, ) -> ResultOfTerminateThisThread {
    unsafe {
        
        let success = sdk::natives::terminate_this_thread(
            
        );
        
        
        ResultOfTerminateThisThread {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_no_loading_screen(&self, ) -> ResultOfGetNoLoadingScreen {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_no_loading_screen(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetNoLoadingScreen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_bg_get_launch_param_value(&self, script_index_: i32,
p1_: Option<String>) -> ResultOfBgGetLaunchParamValue {
    unsafe {
        let mut native_return = Default::default();
let mut script_index_ = script_index_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::bg_get_launch_param_value(
            &mut native_return,
script_index_,
p1_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfBgGetLaunchParamValue {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_event_data(&self, event_group_: i32,
event_index_: i32,
event_data_: shared::MemoryBufferId,
event_data_size_: i32) -> ResultOfGetEventData {
    unsafe {
        let mut native_return = Default::default();
let mut event_group_ = event_group_;
let mut event_index_ = event_index_;
let mut event_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(event_data_) as *mut c_void;
let mut event_data_size_ = event_data_size_;
        let success = sdk::natives::get_event_data(
            &mut native_return,
event_data_,
event_group_,
event_index_,
event_data_size_,
        );
        let native_return = native_return;
let event_data_ = 0;
        
        ResultOfGetEventData {
            success,
            ret: native_return,
            event_data_
        }
    }
}

    fn native_get_number_of_threads_running_the_script_with_this_hash(&self, script_hash_: u32) -> ResultOfGetNumberOfThreadsRunningTheScriptWithThisHash {
    unsafe {
        let mut native_return = Default::default();
let mut script_hash_ = script_hash_;
        let success = sdk::natives::get_number_of_threads_running_the_script_with_this_hash(
            &mut native_return,
script_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetNumberOfThreadsRunningTheScriptWithThisHash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_script_thread_iterator_get_next_thread_id(&self, ) -> ResultOfScriptThreadIteratorGetNextThreadId {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::script_thread_iterator_get_next_thread_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfScriptThreadIteratorGetNextThreadId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_this_script_name(&self, ) -> ResultOfGetThisScriptName {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
        let success = sdk::natives::get_this_script_name(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetThisScriptName {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_thread_active(&self, thread_id_: i32) -> ResultOfIsThreadActive {
    unsafe {
        let mut native_return = Default::default();
let mut thread_id_ = thread_id_;
        let success = sdk::natives::is_thread_active(
            &mut native_return,
thread_id_,
        );
        let native_return = native_return;
        
        ResultOfIsThreadActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_no_loading_screen(&self, toggle_: bool) -> ResultOfSetNoLoadingScreen {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_no_loading_screen(
            toggle_,
        );
        
        
        ResultOfSetNoLoadingScreen {
            success,
            ret: (),
            
        }
    }
}

    fn native_trigger_script_event(&self, event_group_: i32,
event_data_: shared::MemoryBufferId,
event_data_size_: i32,
player_bits_: i32) -> ResultOfTriggerScriptEvent {
    unsafe {
        let mut event_group_ = event_group_;
let mut event_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(event_data_) as *mut c_void;
let mut event_data_size_ = event_data_size_;
let mut player_bits_ = player_bits_;
        let success = sdk::natives::trigger_script_event(
            event_data_,
event_group_,
event_data_size_,
player_bits_,
        );
        let event_data_ = 0;
        
        ResultOfTriggerScriptEvent {
            success,
            ret: (),
            event_data_
        }
    }
}

    fn native_has_script_with_name_hash_loaded(&self, script_hash_: u32) -> ResultOfHasScriptWithNameHashLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut script_hash_ = script_hash_;
        let success = sdk::natives::has_script_with_name_hash_loaded(
            &mut native_return,
script_hash_,
        );
        let native_return = native_return;
        
        ResultOfHasScriptWithNameHashLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_number_of_events(&self, event_group_: i32) -> ResultOfGetNumberOfEvents {
    unsafe {
        let mut native_return = Default::default();
let mut event_group_ = event_group_;
        let success = sdk::natives::get_number_of_events(
            &mut native_return,
event_group_,
        );
        let native_return = native_return;
        
        ResultOfGetNumberOfEvents {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_script(&self, script_name_: Option<String>) -> ResultOfRequestScript {
    unsafe {
        let mut script_name_ = sdk_helpers::create_c_string_ptr(script_name_);
        let success = sdk::natives::request_script(
            script_name_.as_ref().unwrap(),
        );
        
        
        ResultOfRequestScript {
            success,
            ret: (),
            
        }
    }
}

    fn native_bg_start_context_hash(&self, context_hash_: u32) -> ResultOfBgStartContextHash {
    unsafe {
        let mut context_hash_ = context_hash_;
        let success = sdk::natives::bg_start_context_hash(
            context_hash_,
        );
        
        
        ResultOfBgStartContextHash {
            success,
            ret: (),
            
        }
    }
}

    fn native_bg_set_exitflag_response(&self, ) -> ResultOfBgSetExitflagResponse {
    unsafe {
        
        let success = sdk::natives::bg_set_exitflag_response(
            
        );
        
        
        ResultOfBgSetExitflagResponse {
            success,
            ret: (),
            
        }
    }
}

    fn native_bg_get_script_id_from_name_hash(&self, p0_: u32) -> ResultOfBgGetScriptIdFromNameHash {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::bg_get_script_id_from_name_hash(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfBgGetScriptIdFromNameHash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_bg_is_exitflag_set(&self, ) -> ResultOfBgIsExitflagSet {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::bg_is_exitflag_set(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfBgIsExitflagSet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_hash_of_this_script_name(&self, ) -> ResultOfGetHashOfThisScriptName {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_hash_of_this_script_name(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetHashOfThisScriptName {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_event_exists(&self, event_group_: i32,
event_index_: i32) -> ResultOfGetEventExists {
    unsafe {
        let mut native_return = Default::default();
let mut event_group_ = event_group_;
let mut event_index_ = event_index_;
        let success = sdk::natives::get_event_exists(
            &mut native_return,
event_group_,
event_index_,
        );
        let native_return = native_return;
        
        ResultOfGetEventExists {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_bg_start_context(&self, context_name_: Option<String>) -> ResultOfBgStartContext {
    unsafe {
        let mut context_name_ = sdk_helpers::create_c_string_ptr(context_name_);
        let success = sdk::natives::bg_start_context(
            context_name_.as_ref().unwrap(),
        );
        
        
        ResultOfBgStartContext {
            success,
            ret: (),
            
        }
    }
}

    fn native_send_tu_script_event(&self, event_group_: i32,
event_data_: shared::MemoryBufferId,
event_data_size_: i32,
player_bits_: i32) -> ResultOfSendTuScriptEvent {
    unsafe {
        let mut event_group_ = event_group_;
let mut event_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(event_data_) as *mut c_void;
let mut event_data_size_ = event_data_size_;
let mut player_bits_ = player_bits_;
        let success = sdk::natives::send_tu_script_event(
            event_data_,
event_group_,
event_data_size_,
player_bits_,
        );
        let event_data_ = 0;
        
        ResultOfSendTuScriptEvent {
            success,
            ret: (),
            event_data_
        }
    }
}

    fn native_commit_to_loadingscreen_selction(&self, ) -> ResultOfCommitToLoadingscreenSelction {
    unsafe {
        
        let success = sdk::natives::commit_to_loadingscreen_selction(
            
        );
        
        
        ResultOfCommitToLoadingscreenSelction {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_id_of_this_thread(&self, ) -> ResultOfGetIdOfThisThread {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_id_of_this_thread(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetIdOfThisThread {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_script_with_name_hash_as_no_longer_needed(&self, script_hash_: u32) -> ResultOfSetScriptWithNameHashAsNoLongerNeeded {
    unsafe {
        let mut script_hash_ = script_hash_;
        let success = sdk::natives::set_script_with_name_hash_as_no_longer_needed(
            script_hash_,
        );
        
        
        ResultOfSetScriptWithNameHashAsNoLongerNeeded {
            success,
            ret: (),
            
        }
    }
}

    fn native_terminate_thread(&self, thread_id_: i32) -> ResultOfTerminateThread {
    unsafe {
        let mut thread_id_ = thread_id_;
        let success = sdk::natives::terminate_thread(
            thread_id_,
        );
        
        
        ResultOfTerminateThread {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_script_as_no_longer_needed(&self, script_name_: Option<String>) -> ResultOfSetScriptAsNoLongerNeeded {
    unsafe {
        let mut script_name_ = sdk_helpers::create_c_string_ptr(script_name_);
        let success = sdk::natives::set_script_as_no_longer_needed(
            script_name_.as_ref().unwrap(),
        );
        
        
        ResultOfSetScriptAsNoLongerNeeded {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_script_with_name_hash(&self, script_hash_: u32) -> ResultOfRequestScriptWithNameHash {
    unsafe {
        let mut script_hash_ = script_hash_;
        let success = sdk::natives::request_script_with_name_hash(
            script_hash_,
        );
        
        
        ResultOfRequestScriptWithNameHash {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_event_at_index(&self, event_group_: i32,
event_index_: i32) -> ResultOfGetEventAtIndex {
    unsafe {
        let mut native_return = Default::default();
let mut event_group_ = event_group_;
let mut event_index_ = event_index_;
        let success = sdk::natives::get_event_at_index(
            &mut native_return,
event_group_,
event_index_,
        );
        let native_return = native_return;
        
        ResultOfGetEventAtIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_script_thread_iterator_reset(&self, ) -> ResultOfScriptThreadIteratorReset {
    unsafe {
        
        let success = sdk::natives::script_thread_iterator_reset(
            
        );
        
        
        ResultOfScriptThreadIteratorReset {
            success,
            ret: (),
            
        }
    }
}

    fn native_bg_end_context(&self, context_name_: Option<String>) -> ResultOfBgEndContext {
    unsafe {
        let mut context_name_ = sdk_helpers::create_c_string_ptr(context_name_);
        let success = sdk::natives::bg_end_context(
            context_name_.as_ref().unwrap(),
        );
        
        
        ResultOfBgEndContext {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_script_loaded(&self, script_name_: Option<String>) -> ResultOfHasScriptLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut script_name_ = sdk_helpers::create_c_string_ptr(script_name_);
        let success = sdk::natives::has_script_loaded(
            &mut native_return,
script_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfHasScriptLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_script_with_name_hash_exist(&self, script_hash_: u32) -> ResultOfDoesScriptWithNameHashExist {
    unsafe {
        let mut native_return = Default::default();
let mut script_hash_ = script_hash_;
        let success = sdk::natives::does_script_with_name_hash_exist(
            &mut native_return,
script_hash_,
        );
        let native_return = native_return;
        
        ResultOfDoesScriptWithNameHashExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_script_exist(&self, script_name_: Option<String>) -> ResultOfDoesScriptExist {
    unsafe {
        let mut native_return = Default::default();
let mut script_name_ = sdk_helpers::create_c_string_ptr(script_name_);
        let success = sdk::natives::does_script_exist(
            &mut native_return,
script_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfDoesScriptExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_unregister_script_variable(&self, unk_variable_: shared::MemoryBufferId) -> ResultOfUnregisterScriptVariable {
    unsafe {
        let mut unk_variable_ = self.memory_buffers.borrow_mut().get_mut_ptr(unk_variable_) as *mut c_void;
        let success = sdk::natives::unregister_script_variable(
            unk_variable_,
        );
        let unk_variable_ = 0;
        
        ResultOfUnregisterScriptVariable {
            success,
            ret: (),
            unk_variable_
        }
    }
}

    fn native_register_script_variable(&self, unk_variable_: shared::MemoryBufferId) -> ResultOfRegisterScriptVariable {
    unsafe {
        let mut unk_variable_ = self.memory_buffers.borrow_mut().get_mut_ptr(unk_variable_) as *mut c_void;
        let success = sdk::natives::register_script_variable(
            unk_variable_,
        );
        let unk_variable_ = 0;
        
        ResultOfRegisterScriptVariable {
            success,
            ret: (),
            unk_variable_
        }
    }
}

    fn native_force_check_script_variables(&self, ) -> ResultOfForceCheckScriptVariables {
    unsafe {
        
        let success = sdk::natives::force_check_script_variables(
            
        );
        
        
        ResultOfForceCheckScriptVariables {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_shape_test_bounding_box(&self, entity_: u32,
flags1_: i32,
flags2_: i32) -> ResultOfStartShapeTestBoundingBox {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut flags1_ = flags1_;
let mut flags2_ = flags2_;
        let success = sdk::natives::start_shape_test_bounding_box(
            &mut native_return,
entity_,
flags1_,
flags2_,
        );
        let native_return = native_return;
        
        ResultOfStartShapeTestBoundingBox {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_shape_test_capsule(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
radius_: f32,
flags_: i32,
entity_: u32,
p9_: i32) -> ResultOfStartShapeTestCapsule {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut radius_ = radius_;
let mut flags_ = flags_;
let mut entity_ = entity_;
let mut p9_ = p9_;
        let success = sdk::natives::start_shape_test_capsule(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
radius_,
flags_,
entity_,
p9_,
        );
        let native_return = native_return;
        
        ResultOfStartShapeTestCapsule {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_release_script_guid_from_entity(&self, entity_hit_: u32) -> ResultOfReleaseScriptGuidFromEntity {
    unsafe {
        let mut entity_hit_ = entity_hit_;
        let success = sdk::natives::release_script_guid_from_entity(
            entity_hit_,
        );
        
        
        ResultOfReleaseScriptGuidFromEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_shape_test_bound(&self, entity_: u32,
flags1_: i32,
flags2_: i32) -> ResultOfStartShapeTestBound {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut flags1_ = flags1_;
let mut flags2_ = flags2_;
        let success = sdk::natives::start_shape_test_bound(
            &mut native_return,
entity_,
flags1_,
flags2_,
        );
        let native_return = native_return;
        
        ResultOfStartShapeTestBound {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_expensive_synchronous_shape_test_los_probe(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
flags_: i32,
entity_: u32,
p8_: i32) -> ResultOfStartExpensiveSynchronousShapeTestLosProbe {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut flags_ = flags_;
let mut entity_ = entity_;
let mut p8_ = p8_;
        let success = sdk::natives::start_expensive_synchronous_shape_test_los_probe(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
flags_,
entity_,
p8_,
        );
        let native_return = native_return;
        
        ResultOfStartExpensiveSynchronousShapeTestLosProbe {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_shape_test_result(&self, shape_test_handle_: i32,
hit_: bool,
end_coords_: Option<shared::Vector3>,
surface_normal_: Option<shared::Vector3>,
entity_hit_: u32) -> ResultOfGetShapeTestResult {
    unsafe {
        let mut native_return = Default::default();
let mut shape_test_handle_ = shape_test_handle_;
let mut hit_ = hit_;
let mut end_coords_ = sdk_helpers::create_vector3_ptr(end_coords_);
let mut surface_normal_ = sdk_helpers::create_vector3_ptr(surface_normal_);
let mut entity_hit_ = entity_hit_;
        let success = sdk::natives::get_shape_test_result(
            &mut native_return,
&mut hit_,
end_coords_.pin_mut(),
surface_normal_.pin_mut(),
&mut entity_hit_,
shape_test_handle_,
        );
        let native_return = native_return;
let hit_ = hit_;
let end_coords_ = sdk_helpers::read_cpp_vector3(end_coords_);
let surface_normal_ = sdk_helpers::read_cpp_vector3(surface_normal_);
let entity_hit_ = entity_hit_;
        
        ResultOfGetShapeTestResult {
            success,
            ret: native_return,
            hit_,
end_coords_,
surface_normal_,
entity_hit_
        }
    }
}

    fn native_get_shape_test_result_including_material(&self, shape_test_handle_: i32,
hit_: bool,
end_coords_: Option<shared::Vector3>,
surface_normal_: Option<shared::Vector3>,
material_hash_: u32,
entity_hit_: u32) -> ResultOfGetShapeTestResultIncludingMaterial {
    unsafe {
        let mut native_return = Default::default();
let mut shape_test_handle_ = shape_test_handle_;
let mut hit_ = hit_;
let mut end_coords_ = sdk_helpers::create_vector3_ptr(end_coords_);
let mut surface_normal_ = sdk_helpers::create_vector3_ptr(surface_normal_);
let mut material_hash_ = material_hash_;
let mut entity_hit_ = entity_hit_;
        let success = sdk::natives::get_shape_test_result_including_material(
            &mut native_return,
&mut hit_,
end_coords_.pin_mut(),
surface_normal_.pin_mut(),
&mut material_hash_,
&mut entity_hit_,
shape_test_handle_,
        );
        let native_return = native_return;
let hit_ = hit_;
let end_coords_ = sdk_helpers::read_cpp_vector3(end_coords_);
let surface_normal_ = sdk_helpers::read_cpp_vector3(surface_normal_);
let material_hash_ = material_hash_;
let entity_hit_ = entity_hit_;
        
        ResultOfGetShapeTestResultIncludingMaterial {
            success,
            ret: native_return,
            hit_,
end_coords_,
surface_normal_,
material_hash_,
entity_hit_
        }
    }
}

    fn native_start_shape_test_los_probe(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
flags_: i32,
entity_: u32,
p8_: i32) -> ResultOfStartShapeTestLosProbe {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut flags_ = flags_;
let mut entity_ = entity_;
let mut p8_ = p8_;
        let success = sdk::natives::start_shape_test_los_probe(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
flags_,
entity_,
p8_,
        );
        let native_return = native_return;
        
        ResultOfStartShapeTestLosProbe {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_shape_test_swept_sphere(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
radius_: f32,
flags_: i32,
entity_: u32,
p9_: i32) -> ResultOfStartShapeTestSweptSphere {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut radius_ = radius_;
let mut flags_ = flags_;
let mut entity_ = entity_;
let mut p9_ = p9_;
        let success = sdk::natives::start_shape_test_swept_sphere(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
radius_,
flags_,
entity_,
p9_,
        );
        let native_return = native_return;
        
        ResultOfStartShapeTestSweptSphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_shape_test_box(&self, x_: f32,
y_: f32,
z_: f32,
dim_x_: f32,
dim_y_: f32,
dim_z_: f32,
rot_x_: f32,
rot_y_: f32,
rot_z_: f32,
p9_: i32,
flags_: i32,
entity_: u32,
p12_: i32) -> ResultOfStartShapeTestBox {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut dim_x_ = dim_x_;
let mut dim_y_ = dim_y_;
let mut dim_z_ = dim_z_;
let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
let mut p9_ = p9_;
let mut flags_ = flags_;
let mut entity_ = entity_;
let mut p12_ = p12_;
        let success = sdk::natives::start_shape_test_box(
            &mut native_return,
x_,
y_,
z_,
dim_x_,
dim_y_,
dim_z_,
rot_x_,
rot_y_,
rot_z_,
p9_,
flags_,
entity_,
p12_,
        );
        let native_return = native_return;
        
        ResultOfStartShapeTestBox {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_shape_test_mouse_cursor_los_probe(&self, p_vec1_: Option<shared::Vector3>,
p_vec2_: Option<shared::Vector3>,
flag_: i32,
entity_: u32,
flag2_: i32) -> ResultOfStartShapeTestMouseCursorLosProbe {
    unsafe {
        let mut native_return = Default::default();
let mut p_vec1_ = sdk_helpers::create_vector3_ptr(p_vec1_);
let mut p_vec2_ = sdk_helpers::create_vector3_ptr(p_vec2_);
let mut flag_ = flag_;
let mut entity_ = entity_;
let mut flag2_ = flag2_;
        let success = sdk::natives::start_shape_test_mouse_cursor_los_probe(
            &mut native_return,
p_vec1_.pin_mut(),
p_vec2_.pin_mut(),
flag_,
entity_,
flag2_,
        );
        let native_return = native_return;
let p_vec1_ = sdk_helpers::read_cpp_vector3(p_vec1_);
let p_vec2_ = sdk_helpers::read_cpp_vector3(p_vec2_);
        
        ResultOfStartShapeTestMouseCursorLosProbe {
            success,
            ret: native_return,
            p_vec1_,
p_vec2_
        }
    }
}

    fn native_sc_inbox_get_total_num_messages(&self, ) -> ResultOfScInboxGetTotalNumMessages {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::sc_inbox_get_total_num_messages(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfScInboxGetTotalNumMessages {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_email_retrieve_emails(&self, offset_: i32,
limit_: i32) -> ResultOfScEmailRetrieveEmails {
    unsafe {
        let mut offset_ = offset_;
let mut limit_ = limit_;
        let success = sdk::natives::sc_email_retrieve_emails(
            offset_,
limit_,
        );
        
        
        ResultOfScEmailRetrieveEmails {
            success,
            ret: (),
            
        }
    }
}

    fn native_sc_licenseplate_get_add_is_pending(&self, token_: i32) -> ResultOfScLicenseplateGetAddIsPending {
    unsafe {
        let mut native_return = Default::default();
let mut token_ = token_;
        let success = sdk::natives::sc_licenseplate_get_add_is_pending(
            &mut native_return,
token_,
        );
        let native_return = native_return;
        
        ResultOfScLicenseplateGetAddIsPending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_email_set_current_email_tag(&self, p0_: i32) -> ResultOfScEmailSetCurrentEmailTag {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::sc_email_set_current_email_tag(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfScEmailSetCurrentEmailTag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_licenseplate_isvalid(&self, plate_text_: Option<String>,
token_: i32) -> ResultOfScLicenseplateIsvalid {
    unsafe {
        let mut native_return = Default::default();
let mut plate_text_ = sdk_helpers::create_c_string_ptr(plate_text_);
let mut token_ = token_;
        let success = sdk::natives::sc_licenseplate_isvalid(
            &mut native_return,
&mut token_,
plate_text_.as_ref().unwrap(),
        );
        let native_return = native_return;
let token_ = token_;
        
        ResultOfScLicenseplateIsvalid {
            success,
            ret: native_return,
            token_
        }
    }
}

    fn native_sc_email_send_email(&self, p0_: Option<String>) -> ResultOfScEmailSendEmail {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::sc_email_send_email(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOfScEmailSendEmail {
            success,
            ret: (),
            
        }
    }
}

    fn native_sc_email_get_retrieval_status(&self, ) -> ResultOfScEmailGetRetrievalStatus {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::sc_email_get_retrieval_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfScEmailGetRetrievalStatus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_profanity_get_check_is_valid(&self, token_: i32) -> ResultOfScProfanityGetCheckIsValid {
    unsafe {
        let mut native_return = Default::default();
let mut token_ = token_;
        let success = sdk::natives::sc_profanity_get_check_is_valid(
            &mut native_return,
token_,
        );
        let native_return = native_return;
        
        ResultOfScProfanityGetCheckIsValid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_get_display_name_by_id(&self, p0_: i32,
p1_: Option<String>) -> ResultOfScCommunityEventGetDisplayNameById {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::sc_community_event_get_display_name_by_id(
            &mut native_return,
p1_.pin_mut(),
p0_,
        );
        let native_return = native_return;
let p1_ = sdk_helpers::read_c_string_ptr(p1_);
        
        ResultOfScCommunityEventGetDisplayNameById {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_sc_licenseplate_add(&self, plate_text_: Option<String>,
plate_data_: shared::MemoryBufferId,
token_: i32) -> ResultOfScLicenseplateAdd {
    unsafe {
        let mut native_return = Default::default();
let mut plate_text_ = sdk_helpers::create_c_string_ptr(plate_text_);
let mut plate_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(plate_data_) as *mut c_void;
let mut token_ = token_;
        let success = sdk::natives::sc_licenseplate_add(
            &mut native_return,
plate_data_,
&mut token_,
plate_text_.as_ref().unwrap(),
        );
        let native_return = native_return;
let plate_data_ = 0;
let token_ = token_;
        
        ResultOfScLicenseplateAdd {
            success,
            ret: native_return,
            plate_data_,
token_
        }
    }
}

    fn native_sc_account_info_get_nickname(&self, ) -> ResultOfScAccountInfoGetNickname {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
        let success = sdk::natives::sc_account_info_get_nickname(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfScAccountInfoGetNickname {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_get_extra_data_string_for_type(&self, p0_: Option<String>,
p1_: Option<String>,
p2_: Option<String>) -> ResultOfScCommunityEventGetExtraDataStringForType {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
        let success = sdk::natives::sc_community_event_get_extra_data_string_for_type(
            &mut native_return,
p1_.pin_mut(),
p0_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p1_ = sdk_helpers::read_c_string_ptr(p1_);
        
        ResultOfScCommunityEventGetExtraDataStringForType {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_sc_licenseplate_get_plate(&self, token_: i32,
plate_index_: i32) -> ResultOfScLicenseplateGetPlate {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut token_ = token_;
let mut plate_index_ = plate_index_;
        let success = sdk::natives::sc_licenseplate_get_plate(
            native_return.pin_mut(),
token_,
plate_index_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfScLicenseplateGetPlate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_presence_attr_set_int(&self, attr_hash_: u32,
value_: i32) -> ResultOfScPresenceAttrSetInt {
    unsafe {
        let mut native_return = Default::default();
let mut attr_hash_ = attr_hash_;
let mut value_ = value_;
        let success = sdk::natives::sc_presence_attr_set_int(
            &mut native_return,
attr_hash_,
value_,
        );
        let native_return = native_return;
        
        ResultOfScPresenceAttrSetInt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_achievement_info_status(&self, p0_: i32) -> ResultOfScAchievementInfoStatus {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::sc_achievement_info_status(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOfScAchievementInfoStatus {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_sc_email_message_push_gamer_to_recip_list(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfScEmailMessagePushGamerToRecipList {
    unsafe {
        let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::sc_email_message_push_gamer_to_recip_list(
            gamer_handle_,
        );
        let gamer_handle_ = 0;
        
        ResultOfScEmailMessagePushGamerToRecipList {
            success,
            ret: (),
            gamer_handle_
        }
    }
}

    fn native_sc_community_event_get_extra_data_float_for_type(&self, p0_: Option<String>,
p1_: f32,
p2_: Option<String>) -> ResultOfScCommunityEventGetExtraDataFloatForType {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
        let success = sdk::natives::sc_community_event_get_extra_data_float_for_type(
            &mut native_return,
&mut p1_,
p0_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOfScCommunityEventGetExtraDataFloatForType {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_sc_presence_attr_set_string(&self, attr_hash_: u32,
value_: Option<String>) -> ResultOfScPresenceAttrSetString {
    unsafe {
        let mut native_return = Default::default();
let mut attr_hash_ = attr_hash_;
let mut value_ = sdk_helpers::create_c_string_ptr(value_);
        let success = sdk::natives::sc_presence_attr_set_string(
            &mut native_return,
attr_hash_,
value_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfScPresenceAttrSetString {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_inbox_set_message_as_read_at_index(&self, msg_index_: i32) -> ResultOfScInboxSetMessageAsReadAtIndex {
    unsafe {
        let mut native_return = Default::default();
let mut msg_index_ = msg_index_;
        let success = sdk::natives::sc_inbox_set_message_as_read_at_index(
            &mut native_return,
msg_index_,
        );
        let native_return = native_return;
        
        ResultOfScInboxSetMessageAsReadAtIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_gamerdata_get_active_xp_bonus(&self, value_: f32) -> ResultOfScGamerdataGetActiveXpBonus {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::sc_gamerdata_get_active_xp_bonus(
            &mut native_return,
&mut value_,
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOfScGamerdataGetActiveXpBonus {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_sc_licenseplate_get_plate_data(&self, token_: i32,
plate_index_: i32) -> ResultOfScLicenseplateGetPlateData {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut token_ = token_;
let mut plate_index_ = plate_index_;
        let success = sdk::natives::sc_licenseplate_get_plate_data(
            native_return.pin_mut(),
token_,
plate_index_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfScLicenseplateGetPlateData {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_transition_news_has_extra_data_tu(&self, ) -> ResultOfScTransitionNewsHasExtraDataTu {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::sc_transition_news_has_extra_data_tu(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfScTransitionNewsHasExtraDataTu {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_get_display_name_for_type(&self, p0_: Option<String>,
p1_: Option<String>) -> ResultOfScCommunityEventGetDisplayNameForType {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::sc_community_event_get_display_name_for_type(
            &mut native_return,
p0_.pin_mut(),
p1_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p0_ = sdk_helpers::read_c_string_ptr(p0_);
        
        ResultOfScCommunityEventGetDisplayNameForType {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_sc_has_achievement_been_passed(&self, achievement_id_: i32) -> ResultOfScHasAchievementBeenPassed {
    unsafe {
        let mut native_return = Default::default();
let mut achievement_id_ = achievement_id_;
        let success = sdk::natives::sc_has_achievement_been_passed(
            &mut native_return,
achievement_id_,
        );
        let native_return = native_return;
        
        ResultOfScHasAchievementBeenPassed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_email_delete_emails(&self, p0_: shared::MemoryBufferId,
p1_: i32) -> ResultOfScEmailDeleteEmails {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = p1_;
        let success = sdk::natives::sc_email_delete_emails(
            p0_,
p1_,
        );
        let p0_ = 0;
        
        ResultOfScEmailDeleteEmails {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_sc_community_event_is_active_for_type(&self, p0_: Option<String>) -> ResultOfScCommunityEventIsActiveForType {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::sc_community_event_is_active_for_type(
            &mut native_return,
p0_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfScCommunityEventIsActiveForType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_email_get_email_at_index(&self, p0_: i32,
p1_: shared::MemoryBufferId) -> ResultOfScEmailGetEmailAtIndex {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
        let success = sdk::natives::sc_email_get_email_at_index(
            &mut native_return,
p1_,
p0_,
        );
        let native_return = native_return;
let p1_ = 0;
        
        ResultOfScEmailGetEmailAtIndex {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_sc_presence_set_activity_rating(&self, p0_: i32,
p1_: f32) -> ResultOfScPresenceSetActivityRating {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::sc_presence_set_activity_rating(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfScPresenceSetActivityRating {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_get_event_id_for_type(&self, p0_: Option<String>) -> ResultOfScCommunityEventGetEventIdForType {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::sc_community_event_get_event_id_for_type(
            &mut native_return,
p0_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfScCommunityEventGetEventIdForType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_get_event_id(&self, ) -> ResultOfScCommunityEventGetEventId {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::sc_community_event_get_event_id(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfScCommunityEventGetEventId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_get_extra_data_float(&self, p0_: Option<String>,
p1_: f32) -> ResultOfScCommunityEventGetExtraDataFloat {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
        let success = sdk::natives::sc_community_event_get_extra_data_float(
            &mut native_return,
&mut p1_,
p0_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOfScCommunityEventGetExtraDataFloat {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_sc_email_message_clear_recip_list(&self, ) -> ResultOfScEmailMessageClearRecipList {
    unsafe {
        
        let success = sdk::natives::sc_email_message_clear_recip_list(
            
        );
        
        
        ResultOfScEmailMessageClearRecipList {
            success,
            ret: (),
            
        }
    }
}

    fn native_sc_licenseplate_get_isvalid_status(&self, token_: i32) -> ResultOfScLicenseplateGetIsvalidStatus {
    unsafe {
        let mut native_return = Default::default();
let mut token_ = token_;
        let success = sdk::natives::sc_licenseplate_get_isvalid_status(
            &mut native_return,
token_,
        );
        let native_return = native_return;
        
        ResultOfScLicenseplateGetIsvalidStatus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_transition_news_end(&self, ) -> ResultOfScTransitionNewsEnd {
    unsafe {
        
        let success = sdk::natives::sc_transition_news_end(
            
        );
        
        
        ResultOfScTransitionNewsEnd {
            success,
            ret: (),
            
        }
    }
}

    fn native_sc_community_event_get_extra_data_string_by_id(&self, p0_: i32,
p1_: Option<String>,
p2_: Option<String>) -> ResultOfScCommunityEventGetExtraDataStringById {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
        let success = sdk::natives::sc_community_event_get_extra_data_string_by_id(
            &mut native_return,
p2_.pin_mut(),
p0_,
p1_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p2_ = sdk_helpers::read_c_string_ptr(p2_);
        
        ResultOfScCommunityEventGetExtraDataStringById {
            success,
            ret: native_return,
            p2_
        }
    }
}

    fn native_sc_inbox_message_get_ugcdata(&self, p0_: i32,
p1_: shared::MemoryBufferId) -> ResultOfScInboxMessageGetUgcdata {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
        let success = sdk::natives::sc_inbox_message_get_ugcdata(
            &mut native_return,
p1_,
p0_,
        );
        let native_return = native_return;
let p1_ = 0;
        
        ResultOfScInboxMessageGetUgcdata {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_sc_inbox_send_bounty_to_recip_list(&self, data_: shared::MemoryBufferId) -> ResultOfScInboxSendBountyToRecipList {
    unsafe {
        let mut native_return = Default::default();
let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
        let success = sdk::natives::sc_inbox_send_bounty_to_recip_list(
            &mut native_return,
data_,
        );
        let native_return = native_return;
let data_ = 0;
        
        ResultOfScInboxSendBountyToRecipList {
            success,
            ret: native_return,
            data_
        }
    }
}

    fn native_sc_transition_news_show(&self, p0_: i32) -> ResultOfScTransitionNewsShow {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::sc_transition_news_show(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfScTransitionNewsShow {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_licenseplate_get_count(&self, token_: i32) -> ResultOfScLicenseplateGetCount {
    unsafe {
        let mut native_return = Default::default();
let mut token_ = token_;
        let success = sdk::natives::sc_licenseplate_get_count(
            &mut native_return,
token_,
        );
        let native_return = native_return;
        
        ResultOfScLicenseplateGetCount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_get_extra_data_int(&self, p0_: Option<String>,
p1_: i32) -> ResultOfScCommunityEventGetExtraDataInt {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
        let success = sdk::natives::sc_community_event_get_extra_data_int(
            &mut native_return,
&mut p1_,
p0_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOfScCommunityEventGetExtraDataInt {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_sc_profanity_check_string(&self, string_: Option<String>,
token_: i32) -> ResultOfScProfanityCheckString {
    unsafe {
        let mut native_return = Default::default();
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
let mut token_ = token_;
        let success = sdk::natives::sc_profanity_check_string(
            &mut native_return,
&mut token_,
string_.as_ref().unwrap(),
        );
        let native_return = native_return;
let token_ = token_;
        
        ResultOfScProfanityCheckString {
            success,
            ret: native_return,
            token_
        }
    }
}

    fn native_sc_inbox_message_get_data_string(&self, p0_: i32,
context_: Option<String>,
out_: Option<String>) -> ResultOfScInboxMessageGetDataString {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut context_ = sdk_helpers::create_c_string_ptr(context_);
let mut out_ = sdk_helpers::create_c_string_ptr(out_);
        let success = sdk::natives::sc_inbox_message_get_data_string(
            &mut native_return,
out_.pin_mut(),
p0_,
context_.as_ref().unwrap(),
        );
        let native_return = native_return;
let out_ = sdk_helpers::read_c_string_ptr(out_);
        
        ResultOfScInboxMessageGetDataString {
            success,
            ret: native_return,
            out_
        }
    }
}

    fn native_sc_email_get_num_retrieved_emails(&self, ) -> ResultOfScEmailGetNumRetrievedEmails {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::sc_email_get_num_retrieved_emails(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfScEmailGetNumRetrievedEmails {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_gamerdata_get_string(&self, name_: Option<String>,
value_: Option<String>) -> ResultOfScGamerdataGetString {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut value_ = sdk_helpers::create_c_string_ptr(value_);
        let success = sdk::natives::sc_gamerdata_get_string(
            &mut native_return,
value_.pin_mut(),
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
let value_ = sdk_helpers::read_c_string_ptr(value_);
        
        ResultOfScGamerdataGetString {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_sc_licenseplate_get_add_status(&self, token_: i32) -> ResultOfScLicenseplateGetAddStatus {
    unsafe {
        let mut native_return = Default::default();
let mut token_ = token_;
        let success = sdk::natives::sc_licenseplate_get_add_status(
            &mut native_return,
token_,
        );
        let native_return = native_return;
        
        ResultOfScLicenseplateGetAddStatus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_profanity_get_check_is_pending(&self, token_: i32) -> ResultOfScProfanityGetCheckIsPending {
    unsafe {
        let mut native_return = Default::default();
let mut token_ = token_;
        let success = sdk::natives::sc_profanity_get_check_is_pending(
            &mut native_return,
token_,
        );
        let native_return = native_return;
        
        ResultOfScProfanityGetCheckIsPending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_gamerdata_get_bool(&self, name_: Option<String>) -> ResultOfScGamerdataGetBool {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::sc_gamerdata_get_bool(
            &mut native_return,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfScGamerdataGetBool {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_profanity_get_string_passed(&self, token_: i32) -> ResultOfScProfanityGetStringPassed {
    unsafe {
        let mut native_return = Default::default();
let mut token_ = token_;
        let success = sdk::natives::sc_profanity_get_string_passed(
            &mut native_return,
token_,
        );
        let native_return = native_return;
        
        ResultOfScProfanityGetStringPassed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_inbox_get_bounty_data_at_index(&self, index_: i32,
out_data_: shared::MemoryBufferId) -> ResultOfScInboxGetBountyDataAtIndex {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
let mut out_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(out_data_) as *mut c_void;
        let success = sdk::natives::sc_inbox_get_bounty_data_at_index(
            &mut native_return,
out_data_,
index_,
        );
        let native_return = native_return;
let out_data_ = 0;
        
        ResultOfScInboxGetBountyDataAtIndex {
            success,
            ret: native_return,
            out_data_
        }
    }
}

    fn native_sc_pause_news_get_pending_story(&self, p0_: i32) -> ResultOfScPauseNewsGetPendingStory {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::sc_pause_news_get_pending_story(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfScPauseNewsGetPendingStory {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_get_extra_data_int_by_id(&self, p0_: i32,
p1_: Option<String>,
p2_: i32) -> ResultOfScCommunityEventGetExtraDataIntById {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = p2_;
        let success = sdk::natives::sc_community_event_get_extra_data_int_by_id(
            &mut native_return,
&mut p2_,
p0_,
p1_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p2_ = p2_;
        
        ResultOfScCommunityEventGetExtraDataIntById {
            success,
            ret: native_return,
            p2_
        }
    }
}

    fn native_sc_licenseplate_get_check_is_pending(&self, p0_: i32) -> ResultOfScLicenseplateGetCheckIsPending {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::sc_licenseplate_get_check_is_pending(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfScLicenseplateGetCheckIsPending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_transition_news_get_extra_data_int_tu(&self, p0_: Option<String>,
p1_: i32) -> ResultOfScTransitionNewsGetExtraDataIntTu {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
        let success = sdk::natives::sc_transition_news_get_extra_data_int_tu(
            &mut native_return,
&mut p1_,
p0_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOfScTransitionNewsGetExtraDataIntTu {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_sc_inbox_get_message_is_read_at_index(&self, msg_index_: i32) -> ResultOfScInboxGetMessageIsReadAtIndex {
    unsafe {
        let mut native_return = Default::default();
let mut msg_index_ = msg_index_;
        let success = sdk::natives::sc_inbox_get_message_is_read_at_index(
            &mut native_return,
msg_index_,
        );
        let native_return = native_return;
        
        ResultOfScInboxGetMessageIsReadAtIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_profanity_get_string_status(&self, token_: i32) -> ResultOfScProfanityGetStringStatus {
    unsafe {
        let mut native_return = Default::default();
let mut token_ = token_;
        let success = sdk::natives::sc_profanity_get_string_status(
            &mut native_return,
token_,
        );
        let native_return = native_return;
        
        ResultOfScProfanityGetStringStatus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_inbox_message_do_apply(&self, p0_: i32) -> ResultOfScInboxMessageDoApply {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::sc_inbox_message_do_apply(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfScInboxMessageDoApply {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_get_extra_data_string(&self, p0_: Option<String>,
p1_: Option<String>) -> ResultOfScCommunityEventGetExtraDataString {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::sc_community_event_get_extra_data_string(
            &mut native_return,
p1_.pin_mut(),
p0_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p1_ = sdk_helpers::read_c_string_ptr(p1_);
        
        ResultOfScCommunityEventGetExtraDataString {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_sc_inbox_message_get_data_int(&self, p0_: i32,
context_: Option<String>,
out_: i32) -> ResultOfScInboxMessageGetDataInt {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut context_ = sdk_helpers::create_c_string_ptr(context_);
let mut out_ = out_;
        let success = sdk::natives::sc_inbox_message_get_data_int(
            &mut native_return,
&mut out_,
p0_,
context_.as_ref().unwrap(),
        );
        let native_return = native_return;
let out_ = out_;
        
        ResultOfScInboxMessageGetDataInt {
            success,
            ret: native_return,
            out_
        }
    }
}

    fn native_sc_community_event_is_active_by_id(&self, p0_: i32) -> ResultOfScCommunityEventIsActiveById {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::sc_community_event_is_active_by_id(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfScCommunityEventIsActiveById {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_inbox_send_ugcstatupdate_to_recip_list(&self, data_: shared::MemoryBufferId) -> ResultOfScInboxSendUgcstatupdateToRecipList {
    unsafe {
        let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
        let success = sdk::natives::sc_inbox_send_ugcstatupdate_to_recip_list(
            data_,
        );
        let data_ = 0;
        
        ResultOfScInboxSendUgcstatupdateToRecipList {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_sc_gamerdata_get_float(&self, name_: Option<String>,
value_: f32) -> ResultOfScGamerdataGetFloat {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut value_ = value_;
        let success = sdk::natives::sc_gamerdata_get_float(
            &mut native_return,
&mut value_,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOfScGamerdataGetFloat {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_sc_inbox_get_message_type_at_index(&self, msg_index_: i32) -> ResultOfScInboxGetMessageTypeAtIndex {
    unsafe {
        let mut native_return = Default::default();
let mut msg_index_ = msg_index_;
        let success = sdk::natives::sc_inbox_get_message_type_at_index(
            &mut native_return,
msg_index_,
        );
        let native_return = native_return;
        
        ResultOfScInboxGetMessageTypeAtIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_has_new_rockstar_msg(&self, ) -> ResultOfScHasNewRockstarMsg {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::sc_has_new_rockstar_msg(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfScHasNewRockstarMsg {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_cache_new_rockstar_msgs(&self, toggle_: bool) -> ResultOfScCacheNewRockstarMsgs {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::sc_cache_new_rockstar_msgs(
            toggle_,
        );
        
        
        ResultOfScCacheNewRockstarMsgs {
            success,
            ret: (),
            
        }
    }
}

    fn native_sc_community_event_get_display_name(&self, p0_: Option<String>) -> ResultOfScCommunityEventGetDisplayName {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::sc_community_event_get_display_name(
            &mut native_return,
p0_.pin_mut(),
        );
        let native_return = native_return;
let p0_ = sdk_helpers::read_c_string_ptr(p0_);
        
        ResultOfScCommunityEventGetDisplayName {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_sc_presence_attr_set_float(&self, attr_hash_: u32,
value_: f32) -> ResultOfScPresenceAttrSetFloat {
    unsafe {
        let mut native_return = Default::default();
let mut attr_hash_ = attr_hash_;
let mut value_ = value_;
        let success = sdk::natives::sc_presence_attr_set_float(
            &mut native_return,
attr_hash_,
value_,
        );
        let native_return = native_return;
        
        ResultOfScPresenceAttrSetFloat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_get_extra_data_float_by_id(&self, p0_: i32,
p1_: Option<String>,
p2_: f32) -> ResultOfScCommunityEventGetExtraDataFloatById {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
let mut p2_ = p2_;
        let success = sdk::natives::sc_community_event_get_extra_data_float_by_id(
            &mut native_return,
&mut p2_,
p0_,
p1_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p2_ = p2_;
        
        ResultOfScCommunityEventGetExtraDataFloatById {
            success,
            ret: native_return,
            p2_
        }
    }
}

    fn native_sc_gamerdata_get_int(&self, name_: Option<String>,
value_: i32) -> ResultOfScGamerdataGetInt {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut value_ = value_;
        let success = sdk::natives::sc_gamerdata_get_int(
            &mut native_return,
&mut value_,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOfScGamerdataGetInt {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_sc_licenseplate_set_plate_data(&self, old_plate_text_: Option<String>,
new_plate_text_: Option<String>,
plate_data_: shared::MemoryBufferId) -> ResultOfScLicenseplateSetPlateData {
    unsafe {
        let mut native_return = Default::default();
let mut old_plate_text_ = sdk_helpers::create_c_string_ptr(old_plate_text_);
let mut new_plate_text_ = sdk_helpers::create_c_string_ptr(new_plate_text_);
let mut plate_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(plate_data_) as *mut c_void;
        let success = sdk::natives::sc_licenseplate_set_plate_data(
            &mut native_return,
plate_data_,
old_plate_text_.as_ref().unwrap(),
new_plate_text_.as_ref().unwrap(),
        );
        let native_return = native_return;
let plate_data_ = 0;
        
        ResultOfScLicenseplateSetPlateData {
            success,
            ret: native_return,
            plate_data_
        }
    }
}

    fn native_sc_licenseplate_get_isvalid_is_pending(&self, token_: i32) -> ResultOfScLicenseplateGetIsvalidIsPending {
    unsafe {
        let mut native_return = Default::default();
let mut token_ = token_;
        let success = sdk::natives::sc_licenseplate_get_isvalid_is_pending(
            &mut native_return,
token_,
        );
        let native_return = native_return;
        
        ResultOfScLicenseplateGetIsvalidIsPending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_transition_news_show_next_item(&self, ) -> ResultOfScTransitionNewsShowNextItem {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::sc_transition_news_show_next_item(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfScTransitionNewsShowNextItem {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_inbox_message_push_gamer_t0_recip_list(&self, gamer_handle_: shared::MemoryBufferId) -> ResultOfScInboxMessagePushGamerT0RecipList {
    unsafe {
        let mut gamer_handle_ = self.memory_buffers.borrow_mut().get_mut_ptr(gamer_handle_) as *mut c_void;
        let success = sdk::natives::sc_inbox_message_push_gamer_t0_recip_list(
            gamer_handle_,
        );
        let gamer_handle_ = 0;
        
        ResultOfScInboxMessagePushGamerT0RecipList {
            success,
            ret: (),
            gamer_handle_
        }
    }
}

    fn native_sc_get_new_rockstar_msg(&self, ) -> ResultOfScGetNewRockstarMsg {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
        let success = sdk::natives::sc_get_new_rockstar_msg(
            native_return.pin_mut(),
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfScGetNewRockstarMsg {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_pause_news_init_starter_pack(&self, p0_: i32) -> ResultOfScPauseNewsInitStarterPack {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::sc_pause_news_init_starter_pack(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfScPauseNewsInitStarterPack {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_get_extra_data_int_for_type(&self, p0_: Option<String>,
p1_: i32,
p2_: Option<String>) -> ResultOfScCommunityEventGetExtraDataIntForType {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
let mut p2_ = sdk_helpers::create_c_string_ptr(p2_);
        let success = sdk::natives::sc_community_event_get_extra_data_int_for_type(
            &mut native_return,
&mut p1_,
p0_.as_ref().unwrap(),
p2_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOfScCommunityEventGetExtraDataIntForType {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_sc_pause_news_shutdown(&self, ) -> ResultOfScPauseNewsShutdown {
    unsafe {
        
        let success = sdk::natives::sc_pause_news_shutdown(
            
        );
        
        
        ResultOfScPauseNewsShutdown {
            success,
            ret: (),
            
        }
    }
}

    fn native_sc_profanity_check_string_ugc(&self, string_: Option<String>,
token_: i32) -> ResultOfScProfanityCheckStringUgc {
    unsafe {
        let mut native_return = Default::default();
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
let mut token_ = token_;
        let success = sdk::natives::sc_profanity_check_string_ugc(
            &mut native_return,
&mut token_,
string_.as_ref().unwrap(),
        );
        let native_return = native_return;
let token_ = token_;
        
        ResultOfScProfanityCheckStringUgc {
            success,
            ret: native_return,
            token_
        }
    }
}

    fn native_sc_licenseplate_get_check_is_valid(&self, p0_: i32) -> ResultOfScLicenseplateGetCheckIsValid {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::sc_licenseplate_get_check_is_valid(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfScLicenseplateGetCheckIsValid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_inbox_message_get_raw_type_at_index(&self, p0_: i32) -> ResultOfScInboxMessageGetRawTypeAtIndex {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut p0_ = p0_;
        let success = sdk::natives::sc_inbox_message_get_raw_type_at_index(
            native_return.pin_mut(),
p0_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfScInboxMessageGetRawTypeAtIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_licenseplate_check_string(&self, p0_: Option<String>,
p1_: i32) -> ResultOfScLicenseplateCheckString {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
        let success = sdk::natives::sc_licenseplate_check_string(
            &mut native_return,
&mut p1_,
p0_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p1_ = p1_;
        
        ResultOfScLicenseplateCheckString {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_sc_transition_news_show_timed(&self, p0_: i32,
p1_: i32) -> ResultOfScTransitionNewsShowTimed {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::sc_transition_news_show_timed(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfScTransitionNewsShowTimed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_community_event_is_active(&self, ) -> ResultOfScCommunityEventIsActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::sc_community_event_is_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfScCommunityEventIsActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sc_inbox_message_get_data_bool(&self, p0_: i32,
p1_: Option<String>) -> ResultOfScInboxMessageGetDataBool {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = sdk_helpers::create_c_string_ptr(p1_);
        let success = sdk::natives::sc_inbox_message_get_data_bool(
            &mut native_return,
p0_,
p1_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfScInboxMessageGetDataBool {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_npc_phone(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32,
p8_: i32,
p9_: i32,
p10_: i32,
p11_: i32,
p12_: i32) -> ResultOfPlaystatsNpcPhone {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
let mut p12_ = p12_;
        let success = sdk::natives::playstats_npc_phone(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
p11_,
p12_,
        );
        
        
        ResultOfPlaystatsNpcPhone {
            success,
            ret: (),
            
        }
    }
}

    fn native_send_metric_punish_bodyguard(&self, p0_: i32) -> ResultOfSendMetricPunishBodyguard {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::send_metric_punish_bodyguard(
            p0_,
        );
        
        
        ResultOfSendMetricPunishBodyguard {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_mc_formation_ends(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32) -> ResultOfPlaystatsMcFormationEnds {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::playstats_mc_formation_ends(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        
        
        ResultOfPlaystatsMcFormationEnds {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_cheat_is_active(&self, ) -> ResultOfStatSetCheatIsActive {
    unsafe {
        
        let success = sdk::natives::stat_set_cheat_is_active(
            
        );
        
        
        ResultOfStatSetCheatIsActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_casino_inside_track(&self, p0_: i32) -> ResultOfPlaystatsCasinoInsideTrack {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_inside_track(
            p0_,
        );
        
        
        ResultOfPlaystatsCasinoInsideTrack {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_recover_contraband_mission(&self, data_: shared::MemoryBufferId) -> ResultOfPlaystatsRecoverContrabandMission {
    unsafe {
        let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
        let success = sdk::natives::playstats_recover_contraband_mission(
            data_,
        );
        let data_ = 0;
        
        ResultOfPlaystatsRecoverContrabandMission {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_playstats_bc_smash_and_grab(&self, p0_: i32) -> ResultOfPlaystatsBcSmashAndGrab {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bc_smash_and_grab(
            p0_,
        );
        
        
        ResultOfPlaystatsBcSmashAndGrab {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_started_session_in_offlinemode(&self, ) -> ResultOfPlaystatsStartedSessionInOfflinemode {
    unsafe {
        
        let success = sdk::natives::playstats_started_session_in_offlinemode(
            
        );
        
        
        ResultOfPlaystatsStartedSessionInOfflinemode {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_casino_chip(&self, p0_: i32) -> ResultOfPlaystatsCasinoChip {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_chip(
            p0_,
        );
        
        
        ResultOfPlaystatsCasinoChip {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_switch_mc_emblem(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfPlaystatsSwitchMcEmblem {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_switch_mc_emblem(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfPlaystatsSwitchMcEmblem {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_fm_event_deaddrop(&self, p0_: i32) -> ResultOfPlaystatsFmEventDeaddrop {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_deaddrop(
            p0_,
        );
        
        
        ResultOfPlaystatsFmEventDeaddrop {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_change_mc_role(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
role_: i32,
p5_: i32,
p6_: i32) -> ResultOfPlaystatsChangeMcRole {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut role_ = role_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::playstats_change_mc_role(
            p0_,
p1_,
p2_,
p3_,
role_,
p5_,
p6_,
        );
        
        
        ResultOfPlaystatsChangeMcRole {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_vehicle_bail_distance(&self, ) -> ResultOfStatGetVehicleBailDistance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_vehicle_bail_distance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatGetVehicleBailDistance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_dar_checkpoint(&self, data_: shared::MemoryBufferId) -> ResultOfPlaystatsDarCheckpoint {
    unsafe {
        let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
        let success = sdk::natives::playstats_dar_checkpoint(
            data_,
        );
        let data_ = 0;
        
        ResultOfPlaystatsDarCheckpoint {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_get_packed_stat_int_code(&self, index_: i32,
character_slot_: i32) -> ResultOfGetPackedStatIntCode {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
let mut character_slot_ = character_slot_;
        let success = sdk::natives::get_packed_stat_int_code(
            &mut native_return,
index_,
character_slot_,
        );
        let native_return = native_return;
        
        ResultOfGetPackedStatIntCode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_leaderboards_write_add_column(&self, p0_: i32,
p1_: i32,
p2_: f32) -> ResultOfLeaderboardsWriteAddColumn {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::leaderboards_write_add_column(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfLeaderboardsWriteAddColumn {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_casino_lucky_seven(&self, p0_: i32) -> ResultOfPlaystatsCasinoLuckySeven {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_lucky_seven(
            p0_,
        );
        
        
        ResultOfPlaystatsCasinoLuckySeven {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_freemode_prologue_done(&self, p0_: i32,
character_slot_: i32) -> ResultOfSetFreemodePrologueDone {
    unsafe {
        let mut p0_ = p0_;
let mut character_slot_ = character_slot_;
        let success = sdk::natives::set_freemode_prologue_done(
            p0_,
character_slot_,
        );
        
        
        ResultOfSetFreemodePrologueDone {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_slot_is_loaded(&self, stat_slot_: i32) -> ResultOfStatSlotIsLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut stat_slot_ = stat_slot_;
        let success = sdk::natives::stat_slot_is_loaded(
            &mut native_return,
stat_slot_,
        );
        let native_return = native_return;
        
        ResultOfStatSlotIsLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_gunrunning_mission_ended(&self, data_: shared::MemoryBufferId) -> ResultOfPlaystatsGunrunningMissionEnded {
    unsafe {
        let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
        let success = sdk::natives::playstats_gunrunning_mission_ended(
            data_,
        );
        let data_ = 0;
        
        ResultOfPlaystatsGunrunningMissionEnded {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_playstats_friend_activity(&self, p0_: i32,
p1_: bool) -> ResultOfPlaystatsFriendActivity {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::playstats_friend_activity(
            p0_,
p1_,
        );
        
        
        ResultOfPlaystatsFriendActivity {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_get_number_of_columns(&self, p0_: i32,
p1_: i32) -> ResultOfLeaderboardsGetNumberOfColumns {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::leaderboards_get_number_of_columns(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfLeaderboardsGetNumberOfColumns {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_carclub_challenge(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfPlaystatsCarclubChallenge {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_carclub_challenge(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfPlaystatsCarclubChallenge {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_bool(&self, stat_hash_: u32,
out_value_: bool,
p2_: i32) -> ResultOfStatGetBool {
    unsafe {
        let mut native_return = Default::default();
let mut stat_hash_ = stat_hash_;
let mut out_value_ = out_value_;
let mut p2_ = p2_;
        let success = sdk::natives::stat_get_bool(
            &mut native_return,
&mut out_value_,
stat_hash_,
p2_,
        );
        let native_return = native_return;
let out_value_ = out_value_;
        
        ResultOfStatGetBool {
            success,
            ret: native_return,
            out_value_
        }
    }
}

    fn native_presence_event_updatestat_int(&self, stat_hash_: u32,
value_: i32,
p2_: i32) -> ResultOfPresenceEventUpdatestatInt {
    unsafe {
        let mut stat_hash_ = stat_hash_;
let mut value_ = value_;
let mut p2_ = p2_;
        let success = sdk::natives::presence_event_updatestat_int(
            stat_hash_,
value_,
p2_,
        );
        
        
        ResultOfPresenceEventUpdatestatInt {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_ros_bet(&self, amount_: i32,
act_: i32,
player_: u32,
cm_: f32) -> ResultOfPlaystatsRosBet {
    unsafe {
        let mut amount_ = amount_;
let mut act_ = act_;
let mut player_ = player_;
let mut cm_ = cm_;
        let success = sdk::natives::playstats_ros_bet(
            amount_,
act_,
player_,
cm_,
        );
        
        
        ResultOfPlaystatsRosBet {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_job_lts_round_end(&self, p0_: shared::MemoryBufferId,
p1_: shared::MemoryBufferId,
p2_: shared::MemoryBufferId,
p3_: shared::MemoryBufferId) -> ResultOfPlaystatsJobLtsRoundEnd {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
let mut p2_ = self.memory_buffers.borrow_mut().get_mut_ptr(p2_) as *mut c_void;
let mut p3_ = self.memory_buffers.borrow_mut().get_mut_ptr(p3_) as *mut c_void;
        let success = sdk::natives::playstats_job_lts_round_end(
            p0_,
p1_,
p2_,
p3_,
        );
        let p0_ = 0;
let p1_ = 0;
let p2_ = 0;
let p3_ = 0;
        
        ResultOfPlaystatsJobLtsRoundEnd {
            success,
            ret: (),
            p0_,
p1_,
p2_,
p3_
        }
    }
}

    fn native_playstats_bc_protection_racket(&self, p0_: i32) -> ResultOfPlaystatsBcProtectionRacket {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bc_protection_racket(
            p0_,
        );
        
        
        ResultOfPlaystatsBcProtectionRacket {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_packed_stat_int_code(&self, index_: i32,
value_: i32,
character_slot_: i32) -> ResultOfSetPackedStatIntCode {
    unsafe {
        let mut index_ = index_;
let mut value_ = value_;
let mut character_slot_ = character_slot_;
        let success = sdk::natives::set_packed_stat_int_code(
            index_,
value_,
character_slot_,
        );
        
        
        ResultOfSetPackedStatIntCode {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_fm_event_kingofthecastle(&self, p0_: i32) -> ResultOfPlaystatsFmEventKingofthecastle {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_kingofthecastle(
            p0_,
        );
        
        
        ResultOfPlaystatsFmEventKingofthecastle {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_shop_item(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfPlaystatsShopItem {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_shop_item(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfPlaystatsShopItem {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_gxt_label(&self, stat_name_: u32,
value_: Option<String>,
save_: bool) -> ResultOfStatSetGxtLabel {
    unsafe {
        let mut native_return = Default::default();
let mut stat_name_ = stat_name_;
let mut value_ = sdk_helpers::create_c_string_ptr(value_);
let mut save_ = save_;
        let success = sdk::natives::stat_set_gxt_label(
            &mut native_return,
stat_name_,
value_.as_ref().unwrap(),
save_,
        );
        let native_return = native_return;
        
        ResultOfStatSetGxtLabel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_freemode_casino_mission_ended(&self, data_: shared::MemoryBufferId) -> ResultOfPlaystatsFreemodeCasinoMissionEnded {
    unsafe {
        let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
        let success = sdk::natives::playstats_freemode_casino_mission_ended(
            data_,
        );
        let data_ = 0;
        
        ResultOfPlaystatsFreemodeCasinoMissionEnded {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_playstats_robbery_prep(&self, p0_: i32) -> ResultOfPlaystatsRobberyPrep {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_robbery_prep(
            p0_,
        );
        
        
        ResultOfPlaystatsRobberyPrep {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_fm_event_pennedin(&self, p0_: i32) -> ResultOfPlaystatsFmEventPennedin {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_pennedin(
            p0_,
        );
        
        
        ResultOfPlaystatsFmEventPennedin {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_flying_altitude(&self, out_value_: f32) -> ResultOfStatGetFlyingAltitude {
    unsafe {
        let mut native_return = Default::default();
let mut out_value_ = out_value_;
        let success = sdk::natives::stat_get_flying_altitude(
            &mut native_return,
&mut out_value_,
        );
        let native_return = native_return;
let out_value_ = out_value_;
        
        ResultOfStatGetFlyingAltitude {
            success,
            ret: native_return,
            out_value_
        }
    }
}

    fn native_playstats_crate_drop_mission_done(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32) -> ResultOfPlaystatsCrateDropMissionDone {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::playstats_crate_drop_mission_done(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
        );
        
        
        ResultOfPlaystatsCrateDropMissionDone {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_instanced_heist_ended(&self, data_: shared::MemoryBufferId,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfPlaystatsInstancedHeistEnded {
    unsafe {
        let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_instanced_heist_ended(
            data_,
p1_,
p2_,
p3_,
        );
        let data_ = 0;
        
        ResultOfPlaystatsInstancedHeistEnded {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_playstats_pimenu_hide_options(&self, data_: shared::MemoryBufferId) -> ResultOfPlaystatsPimenuHideOptions {
    unsafe {
        let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
        let success = sdk::natives::playstats_pimenu_hide_options(
            data_,
        );
        let data_ = 0;
        
        ResultOfPlaystatsPimenuHideOptions {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_stat_get_user_id(&self, stat_hash_: u32) -> ResultOfStatGetUserId {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut stat_hash_ = stat_hash_;
        let success = sdk::natives::stat_get_user_id(
            native_return.pin_mut(),
stat_hash_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfStatGetUserId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_casino_inside_track_light(&self, p0_: i32) -> ResultOfPlaystatsCasinoInsideTrackLight {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_inside_track_light(
            p0_,
        );
        
        
        ResultOfPlaystatsCasinoInsideTrackLight {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_defend_contraband_mission(&self, data_: shared::MemoryBufferId) -> ResultOfPlaystatsDefendContrabandMission {
    unsafe {
        let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
        let success = sdk::natives::playstats_defend_contraband_mission(
            data_,
        );
        let data_ = 0;
        
        ResultOfPlaystatsDefendContrabandMission {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_stat_reset_all_online_character_stats(&self, p0_: i32) -> ResultOfStatResetAllOnlineCharacterStats {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stat_reset_all_online_character_stats(
            p0_,
        );
        
        
        ResultOfStatResetAllOnlineCharacterStats {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_rival_behavior(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32,
p8_: i32,
p9_: i32) -> ResultOfPlaystatsRivalBehavior {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::playstats_rival_behavior(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
        );
        
        
        ResultOfPlaystatsRivalBehavior {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_hub_entry(&self, p0_: i32) -> ResultOfPlaystatsHubEntry {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_hub_entry(
            p0_,
        );
        
        
        ResultOfPlaystatsHubEntry {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_bw_fragile_goods(&self, p0_: i32) -> ResultOfPlaystatsBwFragileGoods {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bw_fragile_goods(
            p0_,
        );
        
        
        ResultOfPlaystatsBwFragileGoods {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_change_mc_outfit(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfPlaystatsChangeMcOutfit {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_change_mc_outfit(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfPlaystatsChangeMcOutfit {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_packed_ng_int_stat_key(&self, index_: i32,
sp_stat_: bool,
char_stat_: bool,
character_: i32,
section_: Option<String>) -> ResultOfGetPackedNgIntStatKey {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
let mut sp_stat_ = sp_stat_;
let mut char_stat_ = char_stat_;
let mut character_ = character_;
let mut section_ = sdk_helpers::create_c_string_ptr(section_);
        let success = sdk::natives::get_packed_ng_int_stat_key(
            &mut native_return,
index_,
sp_stat_,
char_stat_,
character_,
section_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfGetPackedNgIntStatKey {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_import_export_mission_done(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfPlaystatsImportExportMissionDone {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_import_export_mission_done(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfPlaystatsImportExportMissionDone {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_date(&self, stat_name_: u32,
value_: shared::MemoryBufferId,
num_fields_: i32,
save_: bool) -> ResultOfStatSetDate {
    unsafe {
        let mut native_return = Default::default();
let mut stat_name_ = stat_name_;
let mut value_ = self.memory_buffers.borrow_mut().get_mut_ptr(value_) as *mut c_void;
let mut num_fields_ = num_fields_;
let mut save_ = save_;
        let success = sdk::natives::stat_set_date(
            &mut native_return,
value_,
stat_name_,
num_fields_,
save_,
        );
        let native_return = native_return;
let value_ = 0;
        
        ResultOfStatSetDate {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_playstats_fm_event_huntbeast(&self, p0_: i32) -> ResultOfPlaystatsFmEventHuntbeast {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_huntbeast(
            p0_,
        );
        
        
        ResultOfPlaystatsFmEventHuntbeast {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_number_of_seconds(&self, stat_name_: u32) -> ResultOfStatGetNumberOfSeconds {
    unsafe {
        let mut native_return = Default::default();
let mut stat_name_ = stat_name_;
        let success = sdk::natives::stat_get_number_of_seconds(
            &mut native_return,
stat_name_,
        );
        let native_return = native_return;
        
        ResultOfStatGetNumberOfSeconds {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_warehouse_mission_ended(&self, p0_: i32) -> ResultOfPlaystatsWarehouseMissionEnded {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_warehouse_mission_ended(
            p0_,
        );
        
        
        ResultOfPlaystatsWarehouseMissionEnded {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_heist3_finale(&self, p0_: i32) -> ResultOfPlaystatsHeist3Finale {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_heist3_finale(
            p0_,
        );
        
        
        ResultOfPlaystatsHeist3Finale {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_write_add_column_long(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfLeaderboardsWriteAddColumnLong {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::leaderboards_write_add_column_long(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfLeaderboardsWriteAddColumnLong {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_heist4_hack(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfPlaystatsHeist4Hack {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_heist4_hack(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfPlaystatsHeist4Hack {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_read_successful(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfLeaderboardsReadSuccessful {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::leaderboards_read_successful(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfLeaderboardsReadSuccessful {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_presence_event_updatestat_float(&self, stat_hash_: u32,
value_: f32,
p2_: i32) -> ResultOfPresenceEventUpdatestatFloat {
    unsafe {
        let mut stat_hash_ = stat_hash_;
let mut value_ = value_;
let mut p2_ = p2_;
        let success = sdk::natives::presence_event_updatestat_float(
            stat_hash_,
value_,
p2_,
        );
        
        
        ResultOfPresenceEventUpdatestatFloat {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_business_battle_ended(&self, p0_: i32) -> ResultOfPlaystatsBusinessBattleEnded {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_business_battle_ended(
            p0_,
        );
        
        
        ResultOfPlaystatsBusinessBattleEnded {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_smuggler_mission_ended(&self, data_: shared::MemoryBufferId) -> ResultOfPlaystatsSmugglerMissionEnded {
    unsafe {
        let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
        let success = sdk::natives::playstats_smuggler_mission_ended(
            data_,
        );
        let data_ = 0;
        
        ResultOfPlaystatsSmugglerMissionEnded {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_stat_save_migration_consume_content(&self, content_id_: u32,
src_platform_: Option<String>,
src_gamer_handle_: Option<String>) -> ResultOfStatSaveMigrationConsumeContent {
    unsafe {
        let mut native_return = Default::default();
let mut content_id_ = content_id_;
let mut src_platform_ = sdk_helpers::create_c_string_ptr(src_platform_);
let mut src_gamer_handle_ = sdk_helpers::create_c_string_ptr(src_gamer_handle_);
        let success = sdk::natives::stat_save_migration_consume_content(
            &mut native_return,
content_id_,
src_platform_.as_ref().unwrap(),
src_gamer_handle_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfStatSaveMigrationConsumeContent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_get_current_driving_reverse_distance(&self, ) -> ResultOfStatGetCurrentDrivingReverseDistance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_current_driving_reverse_distance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatGetCurrentDrivingReverseDistance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_start_record_stat(&self, stat_type_: i32,
value_type_: i32) -> ResultOfStatStartRecordStat {
    unsafe {
        let mut native_return = Default::default();
let mut stat_type_ = stat_type_;
let mut value_type_ = value_type_;
        let success = sdk::natives::stat_start_record_stat(
            &mut native_return,
stat_type_,
value_type_,
        );
        let native_return = native_return;
        
        ResultOfStatStartRecordStat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_leaderboards2_read_get_row_data_info(&self, p0_: i32,
p1_: shared::MemoryBufferId) -> ResultOfLeaderboards2ReadGetRowDataInfo {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
        let success = sdk::natives::leaderboards2_read_get_row_data_info(
            &mut native_return,
p1_,
p0_,
        );
        let native_return = native_return;
let p1_ = 0;
        
        ResultOfLeaderboards2ReadGetRowDataInfo {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_playstats_cloth_change(&self, p0_: u32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfPlaystatsClothChange {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_cloth_change(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfPlaystatsClothChange {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_pos(&self, stat_name_: u32,
out_x_: f32,
out_y_: f32,
out_z_: f32,
p4_: i32) -> ResultOfStatGetPos {
    unsafe {
        let mut native_return = Default::default();
let mut stat_name_ = stat_name_;
let mut out_x_ = out_x_;
let mut out_y_ = out_y_;
let mut out_z_ = out_z_;
let mut p4_ = p4_;
        let success = sdk::natives::stat_get_pos(
            &mut native_return,
&mut out_x_,
&mut out_y_,
&mut out_z_,
stat_name_,
p4_,
        );
        let native_return = native_return;
let out_x_ = out_x_;
let out_y_ = out_y_;
let out_z_ = out_z_;
        
        ResultOfStatGetPos {
            success,
            ret: native_return,
            out_x_,
out_y_,
out_z_
        }
    }
}

    fn native_playstats_stone_hatchet_ended(&self, data_: shared::MemoryBufferId) -> ResultOfPlaystatsStoneHatchetEnded {
    unsafe {
        let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
        let success = sdk::natives::playstats_stone_hatchet_ended(
            data_,
        );
        let data_ = 0;
        
        ResultOfPlaystatsStoneHatchetEnded {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_playstats_switch_passive_mode(&self, p0_: bool,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfPlaystatsSwitchPassiveMode {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_switch_passive_mode(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfPlaystatsSwitchPassiveMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards2_read_get_row_data_float(&self, p0_: i32,
p1_: i32) -> ResultOfLeaderboards2ReadGetRowDataFloat {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::leaderboards2_read_get_row_data_float(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfLeaderboards2ReadGetRowDataFloat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_profile_setting_creator_dm_done(&self, value_: i32) -> ResultOfSetProfileSettingCreatorDmDone {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_profile_setting_creator_dm_done(
            value_,
        );
        
        
        ResultOfSetProfileSettingCreatorDmDone {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_fm_event_checkpointcollection(&self, p0_: i32) -> ResultOfPlaystatsFmEventCheckpointcollection {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_checkpointcollection(
            p0_,
        );
        
        
        ResultOfPlaystatsFmEventCheckpointcollection {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_casino_blackjack(&self, p0_: i32) -> ResultOfPlaystatsCasinoBlackjack {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_blackjack(
            p0_,
        );
        
        
        ResultOfPlaystatsCasinoBlackjack {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_being_boss(&self, p0_: i32) -> ResultOfStartBeingBoss {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::start_being_boss(
            p0_,
        );
        
        
        ResultOfStartBeingBoss {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_fm_event_passtheparcel(&self, p0_: i32) -> ResultOfPlaystatsFmEventPasstheparcel {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_passtheparcel(
            p0_,
        );
        
        
        ResultOfPlaystatsFmEventPasstheparcel {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_network_increment_on_suicide(&self, p0_: i32,
p1_: f32) -> ResultOfStatNetworkIncrementOnSuicide {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::stat_network_increment_on_suicide(
            p0_,
p1_,
        );
        
        
        ResultOfStatNetworkIncrementOnSuicide {
            success,
            ret: (),
            
        }
    }
}

    fn native_change_goon_looking_for_work(&self, p0_: i32) -> ResultOfChangeGoonLookingForWork {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::change_goon_looking_for_work(
            p0_,
        );
        
        
        ResultOfChangeGoonLookingForWork {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_append_director_metric(&self, p0_: shared::MemoryBufferId) -> ResultOfPlaystatsAppendDirectorMetric {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
        let success = sdk::natives::playstats_append_director_metric(
            p0_,
        );
        let p0_ = 0;
        
        ResultOfPlaystatsAppendDirectorMetric {
            success,
            ret: (),
            p0_
        }
    }
}

    fn native_playstats_fm_mission_end(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfPlaystatsFmMissionEnd {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::playstats_fm_mission_end(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfPlaystatsFmMissionEnd {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_award_xp(&self, amount_: i32,
type_: u32,
category_: u32) -> ResultOfPlaystatsAwardXp {
    unsafe {
        let mut amount_ = amount_;
let mut type_ = type_;
let mut category_ = category_;
        let success = sdk::natives::playstats_award_xp(
            amount_,
type_,
category_,
        );
        
        
        ResultOfPlaystatsAwardXp {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_award_bad_sport(&self, id_: i32) -> ResultOfPlaystatsAwardBadSport {
    unsafe {
        let mut id_ = id_;
        let success = sdk::natives::playstats_award_bad_sport(
            id_,
        );
        
        
        ResultOfPlaystatsAwardBadSport {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_float(&self, stat_name_: u32,
value_: f32,
save_: bool) -> ResultOfStatSetFloat {
    unsafe {
        let mut native_return = Default::default();
let mut stat_name_ = stat_name_;
let mut value_ = value_;
let mut save_ = save_;
        let success = sdk::natives::stat_set_float(
            &mut native_return,
stat_name_,
value_,
save_,
        );
        let native_return = native_return;
        
        ResultOfStatSetFloat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_player_style(&self, p0_: i32) -> ResultOfPlaystatsPlayerStyle {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_player_style(
            p0_,
        );
        
        
        ResultOfPlaystatsPlayerStyle {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_delete_slot(&self, p0_: i32) -> ResultOfStatDeleteSlot {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::stat_delete_slot(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfStatDeleteSlot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_kill_yourself(&self, ) -> ResultOfPlaystatsKillYourself {
    unsafe {
        
        let success = sdk::natives::playstats_kill_yourself(
            
        );
        
        
        ResultOfPlaystatsKillYourself {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_bool(&self, stat_name_: u32,
value_: bool,
save_: bool) -> ResultOfStatSetBool {
    unsafe {
        let mut native_return = Default::default();
let mut stat_name_ = stat_name_;
let mut value_ = value_;
let mut save_ = save_;
        let success = sdk::natives::stat_set_bool(
            &mut native_return,
stat_name_,
value_,
save_,
        );
        let native_return = native_return;
        
        ResultOfStatSetBool {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_migrate_check_already_done(&self, ) -> ResultOfStatMigrateCheckAlreadyDone {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_migrate_check_already_done(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatMigrateCheckAlreadyDone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_fast_trvl(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32,
p8_: i32,
p9_: i32,
p10_: i32) -> ResultOfPlaystatsFastTrvl {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
        let success = sdk::natives::playstats_fast_trvl(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
p10_,
        );
        
        
        ResultOfPlaystatsFastTrvl {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_arcade_love_match(&self, p0_: i32,
p1_: i32) -> ResultOfPlaystatsArcadeLoveMatch {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::playstats_arcade_love_match(
            p0_,
p1_,
        );
        
        
        ResultOfPlaystatsArcadeLoveMatch {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_save_migration_cancel_pending_operation(&self, ) -> ResultOfStatSaveMigrationCancelPendingOperation {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_save_migration_cancel_pending_operation(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatSaveMigrationCancelPendingOperation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_background_script_action(&self, action_: Option<String>,
value_: i32) -> ResultOfPlaystatsBackgroundScriptAction {
    unsafe {
        let mut action_ = sdk_helpers::create_c_string_ptr(action_);
let mut value_ = value_;
        let success = sdk::natives::playstats_background_script_action(
            action_.as_ref().unwrap(),
value_,
        );
        
        
        ResultOfPlaystatsBackgroundScriptAction {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_earned_mc_points(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOfPlaystatsEarnedMcPoints {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::playstats_earned_mc_points(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOfPlaystatsEarnedMcPoints {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_ban_alert(&self, p0_: i32) -> ResultOfPlaystatsBanAlert {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_ban_alert(
            p0_,
        );
        
        
        ResultOfPlaystatsBanAlert {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_arcade_game(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32) -> ResultOfPlaystatsArcadeGame {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::playstats_arcade_game(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        
        
        ResultOfPlaystatsArcadeGame {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_heist3_prep(&self, p0_: i32) -> ResultOfPlaystatsHeist3Prep {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_heist3_prep(
            p0_,
        );
        
        
        ResultOfPlaystatsHeist3Prep {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_bc_cashing(&self, p0_: i32) -> ResultOfPlaystatsBcCashing {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bc_cashing(
            p0_,
        );
        
        
        ResultOfPlaystatsBcCashing {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_license_plate(&self, stat_name_: u32) -> ResultOfStatGetLicensePlate {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut stat_name_ = stat_name_;
        let success = sdk::natives::stat_get_license_plate(
            native_return.pin_mut(),
stat_name_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfStatGetLicensePlate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_profile_setting_creator_ctf_done(&self, value_: i32) -> ResultOfSetProfileSettingCreatorCtfDone {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_profile_setting_creator_ctf_done(
            value_,
        );
        
        
        ResultOfSetProfileSettingCreatorCtfDone {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_current_speed(&self, ) -> ResultOfStatGetCurrentSpeed {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_current_speed(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatGetCurrentSpeed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_get_cancel_save_migration_status(&self, ) -> ResultOfStatGetCancelSaveMigrationStatus {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_cancel_save_migration_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatGetCancelSaveMigrationStatus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_set_open_savetype_in_job(&self, p0_: i32) -> ResultOfStatSetOpenSavetypeInJob {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stat_set_open_savetype_in_job(
            p0_,
        );
        
        
        ResultOfStatSetOpenSavetypeInJob {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_get_cache_number_of_rows(&self, p0_: i32) -> ResultOfLeaderboardsGetCacheNumberOfRows {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::leaderboards_get_cache_number_of_rows(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfLeaderboardsGetCacheNumberOfRows {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_hub_exit(&self, p0_: i32) -> ResultOfPlaystatsHubExit {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_hub_exit(
            p0_,
        );
        
        
        ResultOfPlaystatsHubExit {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_community_start_synch(&self, ) -> ResultOfStatCommunityStartSynch {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_community_start_synch(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatCommunityStartSynch {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_migrate_check_get_is_platform_available(&self, p0_: i32) -> ResultOfStatMigrateCheckGetIsPlatformAvailable {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::stat_migrate_check_get_is_platform_available(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfStatMigrateCheckGetIsPlatformAvailable {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_quit_mode(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfPlaystatsQuitMode {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_quit_mode(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfPlaystatsQuitMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_njvs_vote(&self, p0_: i32) -> ResultOfPlaystatsNjvsVote {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_njvs_vote(
            p0_,
        );
        
        
        ResultOfPlaystatsNjvsVote {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards2_read_by_radius(&self, p0_: shared::MemoryBufferId,
p1_: i32,
p2_: shared::MemoryBufferId) -> ResultOfLeaderboards2ReadByRadius {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = p1_;
let mut p2_ = self.memory_buffers.borrow_mut().get_mut_ptr(p2_) as *mut c_void;
        let success = sdk::natives::leaderboards2_read_by_radius(
            &mut native_return,
p0_,
p2_,
p1_,
        );
        let native_return = native_return;
let p0_ = 0;
let p2_ = 0;
        
        ResultOfLeaderboards2ReadByRadius {
            success,
            ret: native_return,
            p0_,
p2_
        }
    }
}

    fn native_playstats_idle_kick(&self, ms_stood_idle_: i32) -> ResultOfPlaystatsIdleKick {
    unsafe {
        let mut ms_stood_idle_ = ms_stood_idle_;
        let success = sdk::natives::playstats_idle_kick(
            ms_stood_idle_,
        );
        
        
        ResultOfPlaystatsIdleKick {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_has_driven_all_vehicles(&self, ) -> ResultOfGetPlayerHasDrivenAllVehicles {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_player_has_driven_all_vehicles(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerHasDrivenAllVehicles {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_bw_head_hunter(&self, p0_: i32) -> ResultOfPlaystatsBwHeadHunter {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bw_head_hunter(
            p0_,
        );
        
        
        ResultOfPlaystatsBwHeadHunter {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_cheat_applied(&self, cheat_: Option<String>) -> ResultOfPlaystatsCheatApplied {
    unsafe {
        let mut cheat_ = sdk_helpers::create_c_string_ptr(cheat_);
        let success = sdk::natives::playstats_cheat_applied(
            cheat_.as_ref().unwrap(),
        );
        
        
        ResultOfPlaystatsCheatApplied {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_hit_contraband_destroy_limit(&self, p0_: i32) -> ResultOfPlaystatsHitContrabandDestroyLimit {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_hit_contraband_destroy_limit(
            p0_,
        );
        
        
        ResultOfPlaystatsHitContrabandDestroyLimit {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_packed_int_stat_key(&self, index_: i32,
sp_stat_: bool,
char_stat_: bool,
character_: i32) -> ResultOfGetPackedIntStatKey {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
let mut sp_stat_ = sp_stat_;
let mut char_stat_ = char_stat_;
let mut character_ = character_;
        let success = sdk::natives::get_packed_int_stat_key(
            &mut native_return,
index_,
sp_stat_,
char_stat_,
character_,
        );
        let native_return = native_return;
        
        ResultOfGetPackedIntStatKey {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_disable_stats_tracking(&self, ) -> ResultOfStatDisableStatsTracking {
    unsafe {
        
        let success = sdk::natives::stat_disable_stats_tracking(
            
        );
        
        
        ResultOfStatDisableStatsTracking {
            success,
            ret: (),
            
        }
    }
}

    fn native_presence_event_updatestat_int_with_string(&self, stat_hash_: u32,
value_: i32,
p2_: i32,
string_: Option<String>) -> ResultOfPresenceEventUpdatestatIntWithString {
    unsafe {
        let mut stat_hash_ = stat_hash_;
let mut value_ = value_;
let mut p2_ = p2_;
let mut string_ = sdk_helpers::create_c_string_ptr(string_);
        let success = sdk::natives::presence_event_updatestat_int_with_string(
            stat_hash_,
value_,
p2_,
string_.as_ref().unwrap(),
        );
        
        
        ResultOfPresenceEventUpdatestatIntWithString {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_masked_int(&self, stat_hash_: u32,
out_value_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfStatGetMaskedInt {
    unsafe {
        let mut native_return = Default::default();
let mut stat_hash_ = stat_hash_;
let mut out_value_ = out_value_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::stat_get_masked_int(
            &mut native_return,
&mut out_value_,
stat_hash_,
p2_,
p3_,
p4_,
        );
        let native_return = native_return;
let out_value_ = out_value_;
        
        ResultOfStatGetMaskedInt {
            success,
            ret: native_return,
            out_value_
        }
    }
}

    fn native_playstats_fm_event_competitiveurbanwarfare(&self, p0_: i32) -> ResultOfPlaystatsFmEventCompetitiveurbanwarfare {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_competitiveurbanwarfare(
            p0_,
        );
        
        
        ResultOfPlaystatsFmEventCompetitiveurbanwarfare {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_casino_roulette_light(&self, p0_: i32) -> ResultOfPlaystatsCasinoRouletteLight {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_roulette_light(
            p0_,
        );
        
        
        ResultOfPlaystatsCasinoRouletteLight {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_drone_usage(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfPlaystatsDroneUsage {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::playstats_drone_usage(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfPlaystatsDroneUsage {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_spin_wheel(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfPlaystatsSpinWheel {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_spin_wheel(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfPlaystatsSpinWheel {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_bw_assault(&self, p0_: i32) -> ResultOfPlaystatsBwAssault {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bw_assault(
            p0_,
        );
        
        
        ResultOfPlaystatsBwAssault {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_profile_setting_value(&self, profile_setting_: i32,
value_: i32) -> ResultOfStatSetProfileSettingValue {
    unsafe {
        let mut profile_setting_ = profile_setting_;
let mut value_ = value_;
        let success = sdk::natives::stat_set_profile_setting_value(
            profile_setting_,
value_,
        );
        
        
        ResultOfStatSetProfileSettingValue {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_carclub_prize(&self, p0_: i32,
vehicle_model_: u32) -> ResultOfPlaystatsCarclubPrize {
    unsafe {
        let mut p0_ = p0_;
let mut vehicle_model_ = vehicle_model_;
        let success = sdk::natives::playstats_carclub_prize(
            p0_,
vehicle_model_,
        );
        
        
        ResultOfPlaystatsCarclubPrize {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_oddjob_done(&self, total_time_ms_: i32,
p1_: i32,
p2_: bool) -> ResultOfPlaystatsOddjobDone {
    unsafe {
        let mut total_time_ms_ = total_time_ms_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::playstats_oddjob_done(
            total_time_ms_,
p1_,
p2_,
        );
        
        
        ResultOfPlaystatsOddjobDone {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_license_plate(&self, stat_name_: u32,
str_: Option<String>) -> ResultOfStatSetLicensePlate {
    unsafe {
        let mut native_return = Default::default();
let mut stat_name_ = stat_name_;
let mut str_ = sdk_helpers::create_c_string_ptr(str_);
        let success = sdk::natives::stat_set_license_plate(
            &mut native_return,
stat_name_,
str_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfStatSetLicensePlate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_fm_event_challenges(&self, p0_: i32) -> ResultOfPlaystatsFmEventChallenges {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_challenges(
            p0_,
        );
        
        
        ResultOfPlaystatsFmEventChallenges {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_block_saves(&self, ) -> ResultOfStatGetBlockSaves {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_block_saves(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatGetBlockSaves {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_boss_goon_uuid(&self, character_slot_: i32,
p1_: i32,
p2_: i32) -> ResultOfGetBossGoonUuid {
    unsafe {
        let mut character_slot_ = character_slot_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::get_boss_goon_uuid(
            character_slot_,
p1_,
p2_,
        );
        
        
        ResultOfGetBossGoonUuid {
            success,
            ret: (),
            
        }
    }
}

    fn native_end_being_goon(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfEndBeingGoon {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::end_being_goon(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfEndBeingGoon {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_create_match_history_id2(&self, player_account_id_: i32,
posix_time_: i32) -> ResultOfPlaystatsCreateMatchHistoryId2 {
    unsafe {
        let mut native_return = Default::default();
let mut player_account_id_ = player_account_id_;
let mut posix_time_ = posix_time_;
        let success = sdk::natives::playstats_create_match_history_id2(
            &mut native_return,
&mut player_account_id_,
&mut posix_time_,
        );
        let native_return = native_return;
let player_account_id_ = player_account_id_;
let posix_time_ = posix_time_;
        
        ResultOfPlaystatsCreateMatchHistoryId2 {
            success,
            ret: native_return,
            player_account_id_,
posix_time_
        }
    }
}

    fn native_stat_get_challenge_flying_dist(&self, ) -> ResultOfStatGetChallengeFlyingDist {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_challenge_flying_dist(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatGetChallengeFlyingDist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_force_cloud_mp_stats_download_and_overwrite_local_save(&self, ) -> ResultOfForceCloudMpStatsDownloadAndOverwriteLocalSave {
    unsafe {
        
        let success = sdk::natives::force_cloud_mp_stats_download_and_overwrite_local_save(
            
        );
        
        
        ResultOfForceCloudMpStatsDownloadAndOverwriteLocalSave {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_arena_wars_spectator(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfPlaystatsArenaWarsSpectator {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_arena_wars_spectator(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfPlaystatsArenaWarsSpectator {
            success,
            ret: (),
            
        }
    }
}

    fn native_send_metric_ghosting_to_player(&self, p0_: i32) -> ResultOfSendMetricGhostingToPlayer {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::send_metric_ghosting_to_player(
            p0_,
        );
        
        
        ResultOfSendMetricGhostingToPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_award_nav(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfPlaystatsAwardNav {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_award_nav(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfPlaystatsAwardNav {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_random_mission_done(&self, name_: Option<String>,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfPlaystatsRandomMissionDone {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_random_mission_done(
            name_.as_ref().unwrap(),
p1_,
p2_,
p3_,
        );
        
        
        ResultOfPlaystatsRandomMissionDone {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards2_read_get_row_data_end(&self, ) -> ResultOfLeaderboards2ReadGetRowDataEnd {
    unsafe {
        
        let success = sdk::natives::leaderboards2_read_get_row_data_end(
            
        );
        
        
        ResultOfLeaderboards2ReadGetRowDataEnd {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_job_activity_id_started(&self, p0_: i32,
character_slot_: i32) -> ResultOfSetJobActivityIdStarted {
    unsafe {
        let mut p0_ = p0_;
let mut character_slot_ = character_slot_;
        let success = sdk::natives::set_job_activity_id_started(
            p0_,
character_slot_,
        );
        
        
        ResultOfSetJobActivityIdStarted {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_bc_point_to_point(&self, p0_: i32) -> ResultOfPlaystatsBcPointToPoint {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bc_point_to_point(
            p0_,
        );
        
        
        ResultOfPlaystatsBcPointToPoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_number_of_minutes(&self, stat_name_: u32) -> ResultOfStatGetNumberOfMinutes {
    unsafe {
        let mut native_return = Default::default();
let mut stat_name_ = stat_name_;
        let success = sdk::natives::stat_get_number_of_minutes(
            &mut native_return,
stat_name_,
        );
        let native_return = native_return;
        
        ResultOfStatGetNumberOfMinutes {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_get_int(&self, stat_hash_: u32,
out_value_: i32,
p2_: i32) -> ResultOfStatGetInt {
    unsafe {
        let mut native_return = Default::default();
let mut stat_hash_ = stat_hash_;
let mut out_value_ = out_value_;
let mut p2_ = p2_;
        let success = sdk::natives::stat_get_int(
            &mut native_return,
&mut out_value_,
stat_hash_,
p2_,
        );
        let native_return = native_return;
let out_value_ = out_value_;
        
        ResultOfStatGetInt {
            success,
            ret: native_return,
            out_value_
        }
    }
}

    fn native_hired_limo(&self, p0_: i32,
p1_: i32) -> ResultOfHiredLimo {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::hired_limo(
            p0_,
p1_,
        );
        
        
        ResultOfHiredLimo {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_acquired_hidden_package(&self, p0_: i32) -> ResultOfPlaystatsAcquiredHiddenPackage {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_acquired_hidden_package(
            p0_,
        );
        
        
        ResultOfPlaystatsAcquiredHiddenPackage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_freemode_strand_progression_status(&self, profile_setting_: i32,
setting_value_: i32) -> ResultOfSetFreemodeStrandProgressionStatus {
    unsafe {
        let mut profile_setting_ = profile_setting_;
let mut setting_value_ = setting_value_;
        let success = sdk::natives::set_freemode_strand_progression_status(
            profile_setting_,
setting_value_,
        );
        
        
        ResultOfSetFreemodeStrandProgressionStatus {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_bc_car_jacking(&self, p0_: i32) -> ResultOfPlaystatsBcCarJacking {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bc_car_jacking(
            p0_,
        );
        
        
        ResultOfPlaystatsBcCarJacking {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_masked_int(&self, stat_name_: u32,
p1_: i32,
p2_: i32,
p3_: i32,
save_: bool) -> ResultOfStatSetMaskedInt {
    unsafe {
        let mut native_return = Default::default();
let mut stat_name_ = stat_name_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut save_ = save_;
        let success = sdk::natives::stat_set_masked_int(
            &mut native_return,
stat_name_,
p1_,
p2_,
p3_,
save_,
        );
        let native_return = native_return;
        
        ResultOfStatSetMaskedInt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_mission_over(&self, p0_: Option<String>,
p1_: i32,
p2_: i32,
p3_: bool,
p4_: bool,
p5_: bool) -> ResultOfPlaystatsMissionOver {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::playstats_mission_over(
            p0_.as_ref().unwrap(),
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOfPlaystatsMissionOver {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_read_clear(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfLeaderboardsReadClear {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::leaderboards_read_clear(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfLeaderboardsReadClear {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_bc_salvage(&self, p0_: i32) -> ResultOfPlaystatsBcSalvage {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bc_salvage(
            p0_,
        );
        
        
        ResultOfPlaystatsBcSalvage {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_save_pending(&self, ) -> ResultOfStatSavePending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_save_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatSavePending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_impexp_mission_ended(&self, p0_: i32) -> ResultOfPlaystatsImpexpMissionEnded {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_impexp_mission_ended(
            p0_,
        );
        
        
        ResultOfPlaystatsImpexpMissionEnded {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_cloud_slot_save_failed(&self, p0_: i32) -> ResultOfStatCloudSlotSaveFailed {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::stat_cloud_slot_save_failed(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfStatCloudSlotSaveFailed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_leaderboards2_read_by_score_int(&self, p0_: shared::MemoryBufferId,
p1_: i32,
p2_: i32) -> ResultOfLeaderboards2ReadByScoreInt {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::leaderboards2_read_by_score_int(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfLeaderboards2ReadByScoreInt {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_stat_cloud_slot_load_failed(&self, p0_: i32) -> ResultOfStatCloudSlotLoadFailed {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::stat_cloud_slot_load_failed(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfStatCloudSlotLoadFailed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_master_control(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfPlaystatsMasterControl {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_master_control(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfPlaystatsMasterControl {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_nightclub_mission_ended(&self, p0_: i32) -> ResultOfPlaystatsNightclubMissionEnded {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_nightclub_mission_ended(
            p0_,
        );
        
        
        ResultOfPlaystatsNightclubMissionEnded {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_dupe_detected(&self, data_: shared::MemoryBufferId) -> ResultOfPlaystatsDupeDetected {
    unsafe {
        let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
        let success = sdk::natives::playstats_dupe_detected(
            data_,
        );
        let data_ = 0;
        
        ResultOfPlaystatsDupeDetected {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_stat_get_current_front_wheel_distance(&self, ) -> ResultOfStatGetCurrentFrontWheelDistance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_current_front_wheel_distance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatGetCurrentFrontWheelDistance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_fm_event_hotproperty(&self, p0_: i32) -> ResultOfPlaystatsFmEventHotproperty {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_hotproperty(
            p0_,
        );
        
        
        ResultOfPlaystatsFmEventHotproperty {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_enter_session_pack(&self, data_: shared::MemoryBufferId) -> ResultOfPlaystatsEnterSessionPack {
    unsafe {
        let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
        let success = sdk::natives::playstats_enter_session_pack(
            data_,
        );
        let data_ = 0;
        
        ResultOfPlaystatsEnterSessionPack {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_playstats_bw_hunt_the_boss(&self, p0_: i32) -> ResultOfPlaystatsBwHuntTheBoss {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bw_hunt_the_boss(
            p0_,
        );
        
        
        ResultOfPlaystatsBwHuntTheBoss {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards2_read_get_row_data_int(&self, p0_: i32,
p1_: i32) -> ResultOfLeaderboards2ReadGetRowDataInt {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::leaderboards2_read_get_row_data_int(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfLeaderboards2ReadGetRowDataInt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_get_save_migration_status(&self, data_: shared::MemoryBufferId) -> ResultOfStatGetSaveMigrationStatus {
    unsafe {
        let mut native_return = Default::default();
let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
        let success = sdk::natives::stat_get_save_migration_status(
            &mut native_return,
data_,
        );
        let native_return = native_return;
let data_ = 0;
        
        ResultOfStatGetSaveMigrationStatus {
            success,
            ret: native_return,
            data_
        }
    }
}

    fn native_playstats_inventory(&self, p0_: i32) -> ResultOfPlaystatsInventory {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_inventory(
            p0_,
        );
        
        
        ResultOfPlaystatsInventory {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_mc_clubhouse_activity(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32) -> ResultOfPlaystatsMcClubhouseActivity {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
        let success = sdk::natives::playstats_mc_clubhouse_activity(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
        );
        
        
        ResultOfPlaystatsMcClubhouseActivity {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_acid_mission_end(&self, p0_: i32) -> ResultOfPlaystatsAcidMissionEnd {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_acid_mission_end(
            p0_,
        );
        
        
        ResultOfPlaystatsAcidMissionEnd {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_stop_tracking_stunts(&self, ) -> ResultOfPlaystatsStopTrackingStunts {
    unsafe {
        
        let success = sdk::natives::playstats_stop_tracking_stunts(
            
        );
        
        
        ResultOfPlaystatsStopTrackingStunts {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_date(&self, stat_hash_: u32,
out_value_: shared::MemoryBufferId,
num_fields_: i32,
p3_: i32) -> ResultOfStatGetDate {
    unsafe {
        let mut native_return = Default::default();
let mut stat_hash_ = stat_hash_;
let mut out_value_ = self.memory_buffers.borrow_mut().get_mut_ptr(out_value_) as *mut c_void;
let mut num_fields_ = num_fields_;
let mut p3_ = p3_;
        let success = sdk::natives::stat_get_date(
            &mut native_return,
out_value_,
stat_hash_,
num_fields_,
p3_,
        );
        let native_return = native_return;
let out_value_ = 0;
        
        ResultOfStatGetDate {
            success,
            ret: native_return,
            out_value_
        }
    }
}

    fn native_stat_is_recording_stat(&self, ) -> ResultOfStatIsRecordingStat {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_is_recording_stat(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatIsRecordingStat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_fm_event_urbanwarfare(&self, p0_: i32) -> ResultOfPlaystatsFmEventUrbanwarfare {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_urbanwarfare(
            p0_,
        );
        
        
        ResultOfPlaystatsFmEventUrbanwarfare {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_user_id(&self, stat_name_: u32,
value_: Option<String>,
save_: bool) -> ResultOfStatSetUserId {
    unsafe {
        let mut native_return = Default::default();
let mut stat_name_ = stat_name_;
let mut value_ = sdk_helpers::create_c_string_ptr(value_);
let mut save_ = save_;
        let success = sdk::natives::stat_set_user_id(
            &mut native_return,
stat_name_,
value_.as_ref().unwrap(),
save_,
        );
        let native_return = native_return;
        
        ResultOfStatSetUserId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_bw_bossonbossdeathmatch(&self, p0_: i32) -> ResultOfPlaystatsBwBossonbossdeathmatch {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bw_bossonbossdeathmatch(
            p0_,
        );
        
        
        ResultOfPlaystatsBwBossonbossdeathmatch {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_clear_cache_data_id(&self, p0_: i32) -> ResultOfLeaderboardsClearCacheDataId {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::leaderboards_clear_cache_data_id(
            p0_,
        );
        
        
        ResultOfLeaderboardsClearCacheDataId {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_quickfix_tool(&self, element_: i32,
item_: Option<String>) -> ResultOfPlaystatsQuickfixTool {
    unsafe {
        let mut element_ = element_;
let mut item_ = sdk_helpers::create_c_string_ptr(item_);
        let success = sdk::natives::playstats_quickfix_tool(
            element_,
item_.as_ref().unwrap(),
        );
        
        
        ResultOfPlaystatsQuickfixTool {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_get_cache_data_row(&self, p0_: i32,
p1_: i32,
p2_: shared::MemoryBufferId) -> ResultOfLeaderboardsGetCacheDataRow {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = self.memory_buffers.borrow_mut().get_mut_ptr(p2_) as *mut c_void;
        let success = sdk::natives::leaderboards_get_cache_data_row(
            &mut native_return,
p2_,
p0_,
p1_,
        );
        let native_return = native_return;
let p2_ = 0;
        
        ResultOfLeaderboardsGetCacheDataRow {
            success,
            ret: native_return,
            p2_
        }
    }
}

    fn native_leaderboards2_read_friends_by_row(&self, p0_: shared::MemoryBufferId,
p1_: shared::MemoryBufferId,
p2_: i32,
p3_: bool,
p4_: i32,
p5_: i32) -> ResultOfLeaderboards2ReadFriendsByRow {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::leaderboards2_read_friends_by_row(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        let native_return = native_return;
let p0_ = 0;
let p1_ = 0;
        
        ResultOfLeaderboards2ReadFriendsByRow {
            success,
            ret: native_return,
            p0_,
p1_
        }
    }
}

    fn native_playstats_start_tracking_stunts(&self, ) -> ResultOfPlaystatsStartTrackingStunts {
    unsafe {
        
        let success = sdk::natives::playstats_start_tracking_stunts(
            
        );
        
        
        ResultOfPlaystatsStartTrackingStunts {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_heist3_hack(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOfPlaystatsHeist3Hack {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::playstats_heist3_hack(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOfPlaystatsHeist3Hack {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_npc_invite(&self, p0_: Option<String>) -> ResultOfPlaystatsNpcInvite {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
        let success = sdk::natives::playstats_npc_invite(
            p0_.as_ref().unwrap(),
        );
        
        
        ResultOfPlaystatsNpcInvite {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_bc_most_wanted(&self, p0_: i32) -> ResultOfPlaystatsBcMostWanted {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bc_most_wanted(
            p0_,
        );
        
        
        ResultOfPlaystatsBcMostWanted {
            success,
            ret: (),
            
        }
    }
}

    fn native_packed_stat_get_int_stat_index(&self, p0_: i32) -> ResultOfPackedStatGetIntStatIndex {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::packed_stat_get_int_stat_index(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfPackedStatGetIntStatIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_casino_roulette(&self, p0_: i32) -> ResultOfPlaystatsCasinoRoulette {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_roulette(
            p0_,
        );
        
        
        ResultOfPlaystatsCasinoRoulette {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_pegasus_as_personal_aircraft(&self, model_hash_: u32) -> ResultOfPlaystatsPegasusAsPersonalAircraft {
    unsafe {
        let mut model_hash_ = model_hash_;
        let success = sdk::natives::playstats_pegasus_as_personal_aircraft(
            model_hash_,
        );
        
        
        ResultOfPlaystatsPegasusAsPersonalAircraft {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_being_goon(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfStartBeingGoon {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::start_being_goon(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfStartBeingGoon {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_enable_stats_tracking(&self, ) -> ResultOfStatEnableStatsTracking {
    unsafe {
        
        let success = sdk::natives::stat_enable_stats_tracking(
            
        );
        
        
        ResultOfStatEnableStatsTracking {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_migrate_savegame_get_status(&self, ) -> ResultOfStatMigrateSavegameGetStatus {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_migrate_savegame_get_status(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatMigrateSavegameGetStatus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_clear_dirty_read_detected(&self, ) -> ResultOfStatClearDirtyReadDetected {
    unsafe {
        
        let success = sdk::natives::stat_clear_dirty_read_detected(
            
        );
        
        
        ResultOfStatClearDirtyReadDetected {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_increment(&self, stat_name_: u32,
value_: f32) -> ResultOfStatIncrement {
    unsafe {
        let mut stat_name_ = stat_name_;
let mut value_ = value_;
        let success = sdk::natives::stat_increment(
            stat_name_,
value_,
        );
        
        
        ResultOfStatIncrement {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_race_checkpoint(&self, p0_: u32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfPlaystatsRaceCheckpoint {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_race_checkpoint(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfPlaystatsRaceCheckpoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_get_cache_exists(&self, p0_: i32) -> ResultOfLeaderboardsGetCacheExists {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::leaderboards_get_cache_exists(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfLeaderboardsGetCacheExists {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_get_current_jump_distance(&self, ) -> ResultOfStatGetCurrentJumpDistance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_current_jump_distance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatGetCurrentJumpDistance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_activity_done(&self, p0_: i32,
activity_id_: i32) -> ResultOfPlaystatsActivityDone {
    unsafe {
        let mut p0_ = p0_;
let mut activity_id_ = activity_id_;
        let success = sdk::natives::playstats_activity_done(
            p0_,
activity_id_,
        );
        
        
        ResultOfPlaystatsActivityDone {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards2_read_get_row_data_start(&self, p0_: shared::MemoryBufferId) -> ResultOfLeaderboards2ReadGetRowDataStart {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
        let success = sdk::natives::leaderboards2_read_get_row_data_start(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfLeaderboards2ReadGetRowDataStart {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_stat_load_pending(&self, stat_slot_: i32) -> ResultOfStatLoadPending {
    unsafe {
        let mut native_return = Default::default();
let mut stat_slot_ = stat_slot_;
        let success = sdk::natives::stat_load_pending(
            &mut native_return,
stat_slot_,
        );
        let native_return = native_return;
        
        ResultOfStatLoadPending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_leaderboards_read_any_pending(&self, ) -> ResultOfLeaderboardsReadAnyPending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::leaderboards_read_any_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfLeaderboardsReadAnyPending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_leaderboards_read_clear_all(&self, ) -> ResultOfLeaderboardsReadClearAll {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::leaderboards_read_clear_all(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfLeaderboardsReadClearAll {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_end_being_boss(&self, p0_: i32,
p1_: i32) -> ResultOfEndBeingBoss {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::end_being_boss(
            p0_,
p1_,
        );
        
        
        ResultOfEndBeingBoss {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_migrate_savegame_start(&self, platform_name_: Option<String>) -> ResultOfStatMigrateSavegameStart {
    unsafe {
        let mut native_return = Default::default();
let mut platform_name_ = sdk_helpers::create_c_string_ptr(platform_name_);
        let success = sdk::natives::stat_migrate_savegame_start(
            &mut native_return,
platform_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfStatMigrateSavegameStart {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_load(&self, stat_slot_: i32) -> ResultOfStatLoad {
    unsafe {
        let mut native_return = Default::default();
let mut stat_slot_ = stat_slot_;
        let success = sdk::natives::stat_load(
            &mut native_return,
stat_slot_,
        );
        let native_return = native_return;
        
        ResultOfStatLoad {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_bw_belly_of_the_beast(&self, p0_: i32) -> ResultOfPlaystatsBwBellyOfTheBeast {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bw_belly_of_the_beast(
            p0_,
        );
        
        
        ResultOfPlaystatsBwBellyOfTheBeast {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_job_lts_end(&self, p0_: shared::MemoryBufferId,
p1_: shared::MemoryBufferId,
p2_: shared::MemoryBufferId,
p3_: shared::MemoryBufferId) -> ResultOfPlaystatsJobLtsEnd {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
let mut p2_ = self.memory_buffers.borrow_mut().get_mut_ptr(p2_) as *mut c_void;
let mut p3_ = self.memory_buffers.borrow_mut().get_mut_ptr(p3_) as *mut c_void;
        let success = sdk::natives::playstats_job_lts_end(
            p0_,
p1_,
p2_,
p3_,
        );
        let p0_ = 0;
let p1_ = 0;
let p2_ = 0;
let p3_ = 0;
        
        ResultOfPlaystatsJobLtsEnd {
            success,
            ret: (),
            p0_,
p1_,
p2_,
p3_
        }
    }
}

    fn native_stat_stop_record_stat(&self, ) -> ResultOfStatStopRecordStat {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_stop_record_stat(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatStopRecordStat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_local_reset_all_online_character_stats(&self, p0_: i32) -> ResultOfStatLocalResetAllOnlineCharacterStats {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stat_local_reset_all_online_character_stats(
            p0_,
        );
        
        
        ResultOfStatLocalResetAllOnlineCharacterStats {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_clear_pending_saves(&self, p0_: i32) -> ResultOfStatClearPendingSaves {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stat_clear_pending_saves(
            p0_,
        );
        
        
        ResultOfStatClearPendingSaves {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_string(&self, stat_name_: u32,
value_: Option<String>,
save_: bool) -> ResultOfStatSetString {
    unsafe {
        let mut native_return = Default::default();
let mut stat_name_ = stat_name_;
let mut value_ = sdk_helpers::create_c_string_ptr(value_);
let mut save_ = save_;
        let success = sdk::natives::stat_set_string(
            &mut native_return,
stat_name_,
value_.as_ref().unwrap(),
save_,
        );
        let native_return = native_return;
        
        ResultOfStatSetString {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_get_current_rear_wheel_distance(&self, ) -> ResultOfStatGetCurrentRearWheelDistance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_current_rear_wheel_distance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatGetCurrentRearWheelDistance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_leaderboards2_read_by_row(&self, p0_: shared::MemoryBufferId,
p1_: shared::MemoryBufferId,
p2_: i32,
p3_: shared::MemoryBufferId,
p4_: i32,
p5_: shared::MemoryBufferId,
p6_: i32) -> ResultOfLeaderboards2ReadByRow {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
let mut p2_ = p2_;
let mut p3_ = self.memory_buffers.borrow_mut().get_mut_ptr(p3_) as *mut c_void;
let mut p4_ = p4_;
let mut p5_ = self.memory_buffers.borrow_mut().get_mut_ptr(p5_) as *mut c_void;
let mut p6_ = p6_;
        let success = sdk::natives::leaderboards2_read_by_row(
            &mut native_return,
p0_,
p1_,
p3_,
p5_,
p2_,
p4_,
p6_,
        );
        let native_return = native_return;
let p0_ = 0;
let p1_ = 0;
let p3_ = 0;
let p5_ = 0;
        
        ResultOfLeaderboards2ReadByRow {
            success,
            ret: native_return,
            p0_,
p1_,
p3_,
p5_
        }
    }
}

    fn native_send_metric_vip_poach(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfSendMetricVipPoach {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::send_metric_vip_poach(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfSendMetricVipPoach {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_read_pending(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfLeaderboardsReadPending {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::leaderboards_read_pending(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfLeaderboardsReadPending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_race_to_point_mission_done(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfPlaystatsRaceToPointMissionDone {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_race_to_point_mission_done(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfPlaystatsRaceToPointMissionDone {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards2_write_data(&self, p0_: shared::MemoryBufferId) -> ResultOfLeaderboards2WriteData {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
        let success = sdk::natives::leaderboards2_write_data(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfLeaderboards2WriteData {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_playstats_crate_created(&self, p0_: f32,
p1_: f32,
p2_: f32) -> ResultOfPlaystatsCrateCreated {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::playstats_crate_created(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfPlaystatsCrateCreated {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_current_skydiving_distance(&self, ) -> ResultOfStatGetCurrentSkydivingDistance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_current_skydiving_distance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatGetCurrentSkydivingDistance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_community_synch_is_pending(&self, ) -> ResultOfStatCommunitySynchIsPending {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_community_synch_is_pending(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatCommunitySynchIsPending {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_dj_usage(&self, p0_: i32,
p1_: i32) -> ResultOfPlaystatsDjUsage {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::playstats_dj_usage(
            p0_,
p1_,
        );
        
        
        ResultOfPlaystatsDjUsage {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_int(&self, stat_name_: u32,
value_: i32,
save_: bool) -> ResultOfStatSetInt {
    unsafe {
        let mut native_return = Default::default();
let mut stat_name_ = stat_name_;
let mut value_ = value_;
let mut save_ = save_;
        let success = sdk::natives::stat_set_int(
            &mut native_return,
stat_name_,
value_,
save_,
        );
        let native_return = native_return;
        
        ResultOfStatSetInt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_rollback_save_migration(&self, ) -> ResultOfStatRollbackSaveMigration {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_rollback_save_migration(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatRollbackSaveMigration {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_profile_setting_prologue_complete(&self, ) -> ResultOfSetProfileSettingPrologueComplete {
    unsafe {
        
        let success = sdk::natives::set_profile_setting_prologue_complete(
            
        );
        
        
        ResultOfSetProfileSettingPrologueComplete {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_arena_wars_ended(&self, data_: shared::MemoryBufferId) -> ResultOfPlaystatsArenaWarsEnded {
    unsafe {
        let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
        let success = sdk::natives::playstats_arena_wars_ended(
            data_,
        );
        let data_ = 0;
        
        ResultOfPlaystatsArenaWarsEnded {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_playstats_copy_rank_into_new_slot(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32) -> ResultOfPlaystatsCopyRankIntoNewSlot {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::playstats_copy_rank_into_new_slot(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        
        
        ResultOfPlaystatsCopyRankIntoNewSlot {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_cache_data_row(&self, p0_: shared::MemoryBufferId) -> ResultOfLeaderboardsCacheDataRow {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
        let success = sdk::natives::leaderboards_cache_data_row(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfLeaderboardsCacheDataRow {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_leaderboards2_read_by_rank(&self, p0_: shared::MemoryBufferId,
p1_: i32,
p2_: i32) -> ResultOfLeaderboards2ReadByRank {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::leaderboards2_read_by_rank(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfLeaderboards2ReadByRank {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_playstats_prop_change(&self, p0_: u32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfPlaystatsPropChange {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_prop_change(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfPlaystatsPropChange {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_current_drive_nocrash_distance(&self, ) -> ResultOfStatGetCurrentDriveNocrashDistance {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_current_drive_nocrash_distance(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatGetCurrentDriveNocrashDistance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_fm_event_atob(&self, p0_: i32) -> ResultOfPlaystatsFmEventAtob {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_atob(
            p0_,
        );
        
        
        ResultOfPlaystatsFmEventAtob {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_robbery_finale(&self, p0_: i32) -> ResultOfPlaystatsRobberyFinale {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_robbery_finale(
            p0_,
        );
        
        
        ResultOfPlaystatsRobberyFinale {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_save_pending_or_requested(&self, ) -> ResultOfStatSavePendingOrRequested {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_save_pending_or_requested(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatSavePendingOrRequested {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_match_started(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfPlaystatsMatchStarted {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::playstats_match_started(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfPlaystatsMatchStarted {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_is_stats_tracking_enabled(&self, ) -> ResultOfStatIsStatsTrackingEnabled {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_is_stats_tracking_enabled(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatIsStatsTrackingEnabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_spent_pi_custom_loadout(&self, amount_: i32) -> ResultOfPlaystatsSpentPiCustomLoadout {
    unsafe {
        let mut amount_ = amount_;
        let success = sdk::natives::playstats_spent_pi_custom_loadout(
            amount_,
        );
        
        
        ResultOfPlaystatsSpentPiCustomLoadout {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_community_get_history(&self, stat_name_: u32,
p1_: i32,
out_value_: f32) -> ResultOfStatCommunityGetHistory {
    unsafe {
        let mut native_return = Default::default();
let mut stat_name_ = stat_name_;
let mut p1_ = p1_;
let mut out_value_ = out_value_;
        let success = sdk::natives::stat_community_get_history(
            &mut native_return,
&mut out_value_,
stat_name_,
p1_,
        );
        let native_return = native_return;
let out_value_ = out_value_;
        
        ResultOfStatCommunityGetHistory {
            success,
            ret: native_return,
            out_value_
        }
    }
}

    fn native_playstats_mission_ended(&self, p0_: i32) -> ResultOfPlaystatsMissionEnded {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_mission_ended(
            p0_,
        );
        
        
        ResultOfPlaystatsMissionEnded {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_get_column_type(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfLeaderboardsGetColumnType {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::leaderboards_get_column_type(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfLeaderboardsGetColumnType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_fm_event_vehicletarget(&self, p0_: i32) -> ResultOfPlaystatsFmEventVehicletarget {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_vehicletarget(
            p0_,
        );
        
        
        ResultOfPlaystatsFmEventVehicletarget {
            success,
            ret: (),
            
        }
    }
}

    fn native_stats_completed_character_creation(&self, p0_: i32) -> ResultOfStatsCompletedCharacterCreation {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::stats_completed_character_creation(
            p0_,
        );
        
        
        ResultOfStatsCompletedCharacterCreation {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_mission_vote(&self, p0_: i32) -> ResultOfPlaystatsMissionVote {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_mission_vote(
            p0_,
        );
        
        
        ResultOfPlaystatsMissionVote {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_load_safe_to_progress_to_mp_from_sp(&self, ) -> ResultOfStatGetLoadSafeToProgressToMpFromSp {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_load_safe_to_progress_to_mp_from_sp(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatGetLoadSafeToProgressToMpFromSp {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_has_posted_all_vehicles_driven(&self, ) -> ResultOfSetHasPostedAllVehiclesDriven {
    unsafe {
        
        let success = sdk::natives::set_has_posted_all_vehicles_driven(
            
        );
        
        
        ResultOfSetHasPostedAllVehiclesDriven {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_minigame_usage(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfPlaystatsMinigameUsage {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::playstats_minigame_usage(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfPlaystatsMinigameUsage {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_mission_started(&self, p0_: Option<String>,
p1_: i32,
p2_: i32,
p3_: bool) -> ResultOfPlaystatsMissionStarted {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_mission_started(
            p0_.as_ref().unwrap(),
p1_,
p2_,
p3_,
        );
        
        
        ResultOfPlaystatsMissionStarted {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_heist4_finale(&self, p0_: i32) -> ResultOfPlaystatsHeist4Finale {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_heist4_finale(
            p0_,
        );
        
        
        ResultOfPlaystatsHeist4Finale {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_current_posix_time(&self, stat_name_: u32,
p1_: bool) -> ResultOfStatSetCurrentPosixTime {
    unsafe {
        let mut native_return = Default::default();
let mut stat_name_ = stat_name_;
let mut p1_ = p1_;
        let success = sdk::natives::stat_set_current_posix_time(
            &mut native_return,
stat_name_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfStatSetCurrentPosixTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_leaderboards2_read_by_handle(&self, p0_: shared::MemoryBufferId,
p1_: shared::MemoryBufferId) -> ResultOfLeaderboards2ReadByHandle {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
        let success = sdk::natives::leaderboards2_read_by_handle(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
let p0_ = 0;
let p1_ = 0;
        
        ResultOfLeaderboards2ReadByHandle {
            success,
            ret: native_return,
            p0_,
p1_
        }
    }
}

    fn native_leaderboards2_read_rank_prediction(&self, p0_: shared::MemoryBufferId,
p1_: shared::MemoryBufferId,
p2_: shared::MemoryBufferId) -> ResultOfLeaderboards2ReadRankPrediction {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
let mut p2_ = self.memory_buffers.borrow_mut().get_mut_ptr(p2_) as *mut c_void;
        let success = sdk::natives::leaderboards2_read_rank_prediction(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
let p0_ = 0;
let p1_ = 0;
let p2_ = 0;
        
        ResultOfLeaderboards2ReadRankPrediction {
            success,
            ret: native_return,
            p0_,
p1_,
p2_
        }
    }
}

    fn native_leaderboards_get_column_id(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfLeaderboardsGetColumnId {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::leaderboards_get_column_id(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfLeaderboardsGetColumnId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_leave_job_chain(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfPlaystatsLeaveJobChain {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_leave_job_chain(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfPlaystatsLeaveJobChain {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_profile_setting_sp_chop_mission_complete(&self, ) -> ResultOfSetProfileSettingSpChopMissionComplete {
    unsafe {
        
        let success = sdk::natives::set_profile_setting_sp_chop_mission_complete(
            
        );
        
        
        ResultOfSetProfileSettingSpChopMissionComplete {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_migrate_check_start(&self, ) -> ResultOfStatMigrateCheckStart {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_migrate_check_start(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatMigrateCheckStart {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_sell_contraband_mission(&self, data_: shared::MemoryBufferId) -> ResultOfPlaystatsSellContrabandMission {
    unsafe {
        let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
        let success = sdk::natives::playstats_sell_contraband_mission(
            data_,
        );
        let data_ = 0;
        
        ResultOfPlaystatsSellContrabandMission {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_playstats_rank_up(&self, rank_: i32) -> ResultOfPlaystatsRankUp {
    unsafe {
        let mut rank_ = rank_;
        let success = sdk::natives::playstats_rank_up(
            rank_,
        );
        
        
        ResultOfPlaystatsRankUp {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_migrate_clear_for_restart(&self, ) -> ResultOfStatMigrateClearForRestart {
    unsafe {
        
        let success = sdk::natives::stat_migrate_clear_for_restart(
            
        );
        
        
        ResultOfStatMigrateClearForRestart {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_casino_three_card_poker_light(&self, p0_: i32) -> ResultOfPlaystatsCasinoThreeCardPokerLight {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_three_card_poker_light(
            p0_,
        );
        
        
        ResultOfPlaystatsCasinoThreeCardPokerLight {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_mission_checkpoint(&self, p0_: Option<String>,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfPlaystatsMissionCheckpoint {
    unsafe {
        let mut p0_ = sdk_helpers::create_c_string_ptr(p0_);
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_mission_checkpoint(
            p0_.as_ref().unwrap(),
p1_,
p2_,
p3_,
        );
        
        
        ResultOfPlaystatsMissionCheckpoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards2_write_data_for_event_type(&self, p0_: shared::MemoryBufferId,
p1_: shared::MemoryBufferId) -> ResultOfLeaderboards2WriteDataForEventType {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
        let success = sdk::natives::leaderboards2_write_data_for_event_type(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
let p0_ = 0;
let p1_ = 0;
        
        ResultOfLeaderboards2WriteDataForEventType {
            success,
            ret: native_return,
            p0_,
p1_
        }
    }
}

    fn native_playstats_hold_up_mission_done(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfPlaystatsHoldUpMissionDone {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_hold_up_mission_done(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfPlaystatsHoldUpMissionDone {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_mc_request_bike(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfPlaystatsMcRequestBike {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_mc_request_bike(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfPlaystatsMcRequestBike {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_collectible_picked_up(&self, p0_: i32,
object_hash_: u32,
p2_: i32,
p3_: i32,
money_amount_: i32,
rp_amount_: i32,
chips_amount_: i32,
p7_: i32,
p8_: i32,
p9_: i32,
p10_: i32) -> ResultOfPlaystatsCollectiblePickedUp {
    unsafe {
        let mut p0_ = p0_;
let mut object_hash_ = object_hash_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut money_amount_ = money_amount_;
let mut rp_amount_ = rp_amount_;
let mut chips_amount_ = chips_amount_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
        let success = sdk::natives::playstats_collectible_picked_up(
            p0_,
object_hash_,
p2_,
p3_,
money_amount_,
rp_amount_,
chips_amount_,
p7_,
p8_,
p9_,
p10_,
        );
        
        
        ResultOfPlaystatsCollectiblePickedUp {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_save_migration_consume_content_status(&self, p0_: i32) -> ResultOfStatGetSaveMigrationConsumeContentStatus {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::stat_get_save_migration_consume_content_status(
            &mut native_return,
&mut p0_,
        );
        let native_return = native_return;
let p0_ = p0_;
        
        ResultOfStatGetSaveMigrationConsumeContentStatus {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_order_boss_vehicle(&self, p0_: i32,
p1_: i32,
vehicle_hash_: u32) -> ResultOfOrderBossVehicle {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut vehicle_hash_ = vehicle_hash_;
        let success = sdk::natives::order_boss_vehicle(
            p0_,
p1_,
vehicle_hash_,
        );
        
        
        ResultOfOrderBossVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_acid_rnd(&self, p0_: i32) -> ResultOfPlaystatsAcidRnd {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_acid_rnd(
            p0_,
        );
        
        
        ResultOfPlaystatsAcidRnd {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_set_join_type(&self, join_type_: i32) -> ResultOfPlaystatsSetJoinType {
    unsafe {
        let mut join_type_ = join_type_;
        let success = sdk::natives::playstats_set_join_type(
            join_type_,
        );
        
        
        ResultOfPlaystatsSetJoinType {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_packed_tu_int_stat_key(&self, index_: i32,
sp_stat_: bool,
char_stat_: bool,
character_: i32) -> ResultOfGetPackedTuIntStatKey {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
let mut sp_stat_ = sp_stat_;
let mut char_stat_ = char_stat_;
let mut character_ = character_;
        let success = sdk::natives::get_packed_tu_int_stat_key(
            &mut native_return,
index_,
sp_stat_,
char_stat_,
character_,
        );
        let native_return = native_return;
        
        ResultOfGetPackedTuIntStatKey {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_bw_yatchattack(&self, p0_: i32) -> ResultOfPlaystatsBwYatchattack {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bw_yatchattack(
            p0_,
        );
        
        
        ResultOfPlaystatsBwYatchattack {
            success,
            ret: (),
            
        }
    }
}

    fn native_change_uniform(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfChangeUniform {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::change_uniform(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfChangeUniform {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_sub_weap(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfPlaystatsSubWeap {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::playstats_sub_weap(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfPlaystatsSubWeap {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_clear_cache_data(&self, ) -> ResultOfLeaderboardsClearCacheData {
    unsafe {
        
        let success = sdk::natives::leaderboards_clear_cache_data(
            
        );
        
        
        ResultOfLeaderboardsClearCacheData {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_casino_blackjack_light(&self, p0_: i32) -> ResultOfPlaystatsCasinoBlackjackLight {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_blackjack_light(
            p0_,
        );
        
        
        ResultOfPlaystatsCasinoBlackjackLight {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_abandoned_mc(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfPlaystatsAbandonedMc {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_abandoned_mc(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfPlaystatsAbandonedMc {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_buy_contraband_mission(&self, data_: shared::MemoryBufferId) -> ResultOfPlaystatsBuyContrabandMission {
    unsafe {
        let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
        let success = sdk::natives::playstats_buy_contraband_mission(
            data_,
        );
        let data_ = 0;
        
        ResultOfPlaystatsBuyContrabandMission {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_playstats_dj_mission_ended(&self, p0_: i32) -> ResultOfPlaystatsDjMissionEnded {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_dj_mission_ended(
            p0_,
        );
        
        
        ResultOfPlaystatsDjMissionEnded {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_float(&self, stat_hash_: u32,
out_value_: f32,
p2_: i32) -> ResultOfStatGetFloat {
    unsafe {
        let mut native_return = Default::default();
let mut stat_hash_ = stat_hash_;
let mut out_value_ = out_value_;
let mut p2_ = p2_;
        let success = sdk::natives::stat_get_float(
            &mut native_return,
&mut out_value_,
stat_hash_,
p2_,
        );
        let native_return = native_return;
let out_value_ = out_value_;
        
        ResultOfStatGetFloat {
            success,
            ret: native_return,
            out_value_
        }
    }
}

    fn native_playstats_fm_heist_prep_ended(&self, data_: shared::MemoryBufferId) -> ResultOfPlaystatsFmHeistPrepEnded {
    unsafe {
        let mut data_ = self.memory_buffers.borrow_mut().get_mut_ptr(data_) as *mut c_void;
        let success = sdk::natives::playstats_fm_heist_prep_ended(
            data_,
        );
        let data_ = 0;
        
        ResultOfPlaystatsFmHeistPrepEnded {
            success,
            ret: (),
            data_
        }
    }
}

    fn native_get_packed_stat_bool_code(&self, index_: i32,
character_slot_: i32) -> ResultOfGetPackedStatBoolCode {
    unsafe {
        let mut native_return = Default::default();
let mut index_ = index_;
let mut character_slot_ = character_slot_;
        let success = sdk::natives::get_packed_stat_bool_code(
            &mut native_return,
index_,
character_slot_,
        );
        let native_return = native_return;
        
        ResultOfGetPackedStatBoolCode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_has_specialedition_content(&self, value_: i32) -> ResultOfSetHasSpecialeditionContent {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_has_specialedition_content(
            value_,
        );
        
        
        ResultOfSetHasSpecialeditionContent {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_gunrunning_rnd(&self, p0_: i32) -> ResultOfPlaystatsGunrunningRnd {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_gunrunning_rnd(
            p0_,
        );
        
        
        ResultOfPlaystatsGunrunningRnd {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_set_pos(&self, stat_name_: u32,
x_: f32,
y_: f32,
z_: f32,
save_: bool) -> ResultOfStatSetPos {
    unsafe {
        let mut native_return = Default::default();
let mut stat_name_ = stat_name_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut save_ = save_;
        let success = sdk::natives::stat_set_pos(
            &mut native_return,
stat_name_,
x_,
y_,
z_,
save_,
        );
        let native_return = native_return;
        
        ResultOfStatSetPos {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_packed_stat_bool_code(&self, index_: i32,
value_: bool,
character_slot_: i32) -> ResultOfSetPackedStatBoolCode {
    unsafe {
        let mut index_ = index_;
let mut value_ = value_;
let mut character_slot_ = character_slot_;
        let success = sdk::natives::set_packed_stat_bool_code(
            index_,
value_,
character_slot_,
        );
        
        
        ResultOfSetPackedStatBoolCode {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_website_visited(&self, scaleform_hash_: u32,
p1_: i32) -> ResultOfPlaystatsWebsiteVisited {
    unsafe {
        let mut scaleform_hash_ = scaleform_hash_;
let mut p1_ = p1_;
        let success = sdk::natives::playstats_website_visited(
            scaleform_hash_,
p1_,
        );
        
        
        ResultOfPlaystatsWebsiteVisited {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_migrate_check_get_platform_status(&self, p0_: i32,
p1_: shared::MemoryBufferId) -> ResultOfStatMigrateCheckGetPlatformStatus {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
        let success = sdk::natives::stat_migrate_check_get_platform_status(
            &mut native_return,
p1_,
p0_,
        );
        let native_return = native_return;
let p1_ = 0;
        
        ResultOfStatMigrateCheckGetPlatformStatus {
            success,
            ret: native_return,
            p1_
        }
    }
}

    fn native_playstats_heist3_drone(&self, p0_: i32) -> ResultOfPlaystatsHeist3Drone {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_heist3_drone(
            p0_,
        );
        
        
        ResultOfPlaystatsHeist3Drone {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_heist4_prep(&self, p0_: i32) -> ResultOfPlaystatsHeist4Prep {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_heist4_prep(
            p0_,
        );
        
        
        ResultOfPlaystatsHeist4Prep {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_save(&self, p0_: i32,
p1_: bool,
p2_: i32,
p3_: bool) -> ResultOfStatSave {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::stat_save(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOfStatSave {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_get_number_of_days(&self, stat_name_: u32) -> ResultOfStatGetNumberOfDays {
    unsafe {
        let mut native_return = Default::default();
let mut stat_name_ = stat_name_;
        let success = sdk::natives::stat_get_number_of_days(
            &mut native_return,
stat_name_,
        );
        let native_return = native_return;
        
        ResultOfStatGetNumberOfDays {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_bc_finders_keepers(&self, p0_: i32) -> ResultOfPlaystatsBcFindersKeepers {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bc_finders_keepers(
            p0_,
        );
        
        
        ResultOfPlaystatsBcFindersKeepers {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_cloud_slot_load_failed_code(&self, p0_: i32) -> ResultOfStatCloudSlotLoadFailedCode {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::stat_cloud_slot_load_failed_code(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfStatCloudSlotLoadFailedCode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_get_string(&self, stat_hash_: u32,
p1_: i32) -> ResultOfStatGetString {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut stat_hash_ = stat_hash_;
let mut p1_ = p1_;
        let success = sdk::natives::stat_get_string(
            native_return.pin_mut(),
stat_hash_,
p1_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfStatGetString {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_casino_slot_machine_light(&self, p0_: i32) -> ResultOfPlaystatsCasinoSlotMachineLight {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_slot_machine_light(
            p0_,
        );
        
        
        ResultOfPlaystatsCasinoSlotMachineLight {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards2_read_by_score_float(&self, p0_: shared::MemoryBufferId,
p1_: f32,
p2_: i32) -> ResultOfLeaderboards2ReadByScoreFloat {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::leaderboards2_read_by_score_float(
            &mut native_return,
p0_,
p1_,
p2_,
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfLeaderboards2ReadByScoreFloat {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_stat_get_current_near_miss_nocrash_precise(&self, ) -> ResultOfStatGetCurrentNearMissNocrashPrecise {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_get_current_near_miss_nocrash_precise(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatGetCurrentNearMissNocrashPrecise {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_weapon_mode_change(&self, weapon_hash_: u32,
component_hash_to_: u32,
component_hash_from_: u32) -> ResultOfPlaystatsWeaponModeChange {
    unsafe {
        let mut weapon_hash_ = weapon_hash_;
let mut component_hash_to_ = component_hash_to_;
let mut component_hash_from_ = component_hash_from_;
        let success = sdk::natives::playstats_weapon_mode_change(
            weapon_hash_,
component_hash_to_,
component_hash_from_,
        );
        
        
        ResultOfPlaystatsWeaponModeChange {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_clear_slot_for_reload(&self, stat_slot_: i32) -> ResultOfStatClearSlotForReload {
    unsafe {
        let mut native_return = Default::default();
let mut stat_slot_ = stat_slot_;
        let success = sdk::natives::stat_clear_slot_for_reload(
            &mut native_return,
stat_slot_,
        );
        let native_return = native_return;
        
        ResultOfStatClearSlotForReload {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_idle(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfPlaystatsIdle {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::playstats_idle(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfPlaystatsIdle {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_load_dirty_read_detected(&self, ) -> ResultOfStatLoadDirtyReadDetected {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_load_dirty_read_detected(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatLoadDirtyReadDetected {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_fm_event_criminaldamage(&self, p0_: i32) -> ResultOfPlaystatsFmEventCriminaldamage {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_fm_event_criminaldamage(
            p0_,
        );
        
        
        ResultOfPlaystatsFmEventCriminaldamage {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_casino_slot_machine(&self, p0_: i32) -> ResultOfPlaystatsCasinoSlotMachine {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_slot_machine(
            p0_,
        );
        
        
        ResultOfPlaystatsCasinoSlotMachine {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards_get_cache_time(&self, p0_: i32) -> ResultOfLeaderboardsGetCacheTime {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::leaderboards_get_cache_time(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfLeaderboardsGetCacheTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_bw_air_freight(&self, p0_: i32) -> ResultOfPlaystatsBwAirFreight {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bw_air_freight(
            p0_,
        );
        
        
        ResultOfPlaystatsBwAirFreight {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_get_recorded_value(&self, value_: f32) -> ResultOfStatGetRecordedValue {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::stat_get_recorded_value(
            &mut native_return,
&mut value_,
        );
        let native_return = native_return;
let value_ = value_;
        
        ResultOfStatGetRecordedValue {
            success,
            ret: native_return,
            value_
        }
    }
}

    fn native_set_profile_setting_creator_races_done(&self, value_: i32) -> ResultOfSetProfileSettingCreatorRacesDone {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_profile_setting_creator_races_done(
            value_,
        );
        
        
        ResultOfSetProfileSettingCreatorRacesDone {
            success,
            ret: (),
            
        }
    }
}

    fn native_leaderboards2_read_by_plaform(&self, p0_: shared::MemoryBufferId,
gamer_handle_csv_: Option<String>,
platform_name_: Option<String>) -> ResultOfLeaderboards2ReadByPlaform {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut gamer_handle_csv_ = sdk_helpers::create_c_string_ptr(gamer_handle_csv_);
let mut platform_name_ = sdk_helpers::create_c_string_ptr(platform_name_);
        let success = sdk::natives::leaderboards2_read_by_plaform(
            &mut native_return,
p0_,
gamer_handle_csv_.as_ref().unwrap(),
platform_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
let p0_ = 0;
        
        ResultOfLeaderboards2ReadByPlaform {
            success,
            ret: native_return,
            p0_
        }
    }
}

    fn native_stat_get_number_of_hours(&self, stat_name_: u32) -> ResultOfStatGetNumberOfHours {
    unsafe {
        let mut native_return = Default::default();
let mut stat_name_ = stat_name_;
        let success = sdk::natives::stat_get_number_of_hours(
            &mut native_return,
stat_name_,
        );
        let native_return = native_return;
        
        ResultOfStatGetNumberOfHours {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stat_set_block_saves(&self, toggle_: bool) -> ResultOfStatSetBlockSaves {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::stat_set_block_saves(
            toggle_,
        );
        
        
        ResultOfStatSetBlockSaves {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_heist_save_cheat(&self, hash_: u32,
p1_: i32) -> ResultOfPlaystatsHeistSaveCheat {
    unsafe {
        let mut hash_ = hash_;
let mut p1_ = p1_;
        let success = sdk::natives::playstats_heist_save_cheat(
            hash_,
p1_,
        );
        
        
        ResultOfPlaystatsHeistSaveCheat {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_mc_killed_rival_mc_member(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfPlaystatsMcKilledRivalMcMember {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::playstats_mc_killed_rival_mc_member(
            p0_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfPlaystatsMcKilledRivalMcMember {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_job_bend(&self, p0_: shared::MemoryBufferId,
p1_: shared::MemoryBufferId,
p2_: shared::MemoryBufferId,
p3_: shared::MemoryBufferId) -> ResultOfPlaystatsJobBend {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
let mut p2_ = self.memory_buffers.borrow_mut().get_mut_ptr(p2_) as *mut c_void;
let mut p3_ = self.memory_buffers.borrow_mut().get_mut_ptr(p3_) as *mut c_void;
        let success = sdk::natives::playstats_job_bend(
            p0_,
p1_,
p2_,
p3_,
        );
        let p0_ = 0;
let p1_ = 0;
let p2_ = 0;
let p3_ = 0;
        
        ResultOfPlaystatsJobBend {
            success,
            ret: (),
            p0_,
p1_,
p2_,
p3_
        }
    }
}

    fn native_set_save_migration_transaction_id_warning(&self, transaction_id_: i32) -> ResultOfSetSaveMigrationTransactionIdWarning {
    unsafe {
        let mut transaction_id_ = transaction_id_;
        let success = sdk::natives::set_save_migration_transaction_id_warning(
            transaction_id_,
        );
        
        
        ResultOfSetSaveMigrationTransactionIdWarning {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_casino_three_card_poker(&self, p0_: i32) -> ResultOfPlaystatsCasinoThreeCardPoker {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_casino_three_card_poker(
            p0_,
        );
        
        
        ResultOfPlaystatsCasinoThreeCardPoker {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_job_activity_end(&self, p0_: shared::MemoryBufferId,
p1_: shared::MemoryBufferId,
p2_: shared::MemoryBufferId,
p3_: shared::MemoryBufferId) -> ResultOfPlaystatsJobActivityEnd {
    unsafe {
        let mut p0_ = self.memory_buffers.borrow_mut().get_mut_ptr(p0_) as *mut c_void;
let mut p1_ = self.memory_buffers.borrow_mut().get_mut_ptr(p1_) as *mut c_void;
let mut p2_ = self.memory_buffers.borrow_mut().get_mut_ptr(p2_) as *mut c_void;
let mut p3_ = self.memory_buffers.borrow_mut().get_mut_ptr(p3_) as *mut c_void;
        let success = sdk::natives::playstats_job_activity_end(
            p0_,
p1_,
p2_,
p3_,
        );
        let p0_ = 0;
let p1_ = 0;
let p2_ = 0;
let p3_ = 0;
        
        ResultOfPlaystatsJobActivityEnd {
            success,
            ret: (),
            p0_,
p1_,
p2_,
p3_
        }
    }
}

    fn native_playstats_arcade_cabinet(&self, p0_: i32) -> ResultOfPlaystatsArcadeCabinet {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_arcade_cabinet(
            p0_,
        );
        
        
        ResultOfPlaystatsArcadeCabinet {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_shopmenu_nav(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfPlaystatsShopmenuNav {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::playstats_shopmenu_nav(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfPlaystatsShopmenuNav {
            success,
            ret: (),
            
        }
    }
}

    fn native_stat_is_player_vehicle_above_ocean(&self, ) -> ResultOfStatIsPlayerVehicleAboveOcean {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::stat_is_player_vehicle_above_ocean(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfStatIsPlayerVehicleAboveOcean {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_playstats_extra_event(&self, p0_: i32) -> ResultOfPlaystatsExtraEvent {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_extra_event(
            p0_,
        );
        
        
        ResultOfPlaystatsExtraEvent {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_bw_sightseer(&self, p0_: i32) -> ResultOfPlaystatsBwSightseer {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_bw_sightseer(
            p0_,
        );
        
        
        ResultOfPlaystatsBwSightseer {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_casino_story_mission_ended(&self, p0_: i32,
p1_: i32) -> ResultOfPlaystatsCasinoStoryMissionEnded {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::playstats_casino_story_mission_ended(
            p0_,
p1_,
        );
        
        
        ResultOfPlaystatsCasinoStoryMissionEnded {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_inst_mission_end(&self, p0_: i32) -> ResultOfPlaystatsInstMissionEnd {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_inst_mission_end(
            p0_,
        );
        
        
        ResultOfPlaystatsInstMissionEnd {
            success,
            ret: (),
            
        }
    }
}

    fn native_playstats_carclub_points(&self, p0_: i32) -> ResultOfPlaystatsCarclubPoints {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::playstats_carclub_points(
            p0_,
        );
        
        
        ResultOfPlaystatsCarclubPoints {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_new_load_scene_loaded(&self, ) -> ResultOfIsNewLoadSceneLoaded {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_new_load_scene_loaded(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsNewLoadSceneLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_clip_set(&self, clip_set_: Option<String>) -> ResultOfRemoveClipSet {
    unsafe {
        let mut clip_set_ = sdk_helpers::create_c_string_ptr(clip_set_);
        let success = sdk::natives::remove_clip_set(
            clip_set_.as_ref().unwrap(),
        );
        
        
        ResultOfRemoveClipSet {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_allow_time_based_fading_this_frame(&self, ) -> ResultOfForceAllowTimeBasedFadingThisFrame {
    unsafe {
        
        let success = sdk::natives::force_allow_time_based_fading_this_frame(
            
        );
        
        
        ResultOfForceAllowTimeBasedFadingThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_collision_at_coord(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfRequestCollisionAtCoord {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::request_collision_at_coord(
            x_,
y_,
z_,
        );
        
        
        ResultOfRequestCollisionAtCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_streamvol_is_valid(&self, unused_: i32) -> ResultOfStreamvolIsValid {
    unsafe {
        let mut native_return = Default::default();
let mut unused_ = unused_;
        let success = sdk::natives::streamvol_is_valid(
            &mut native_return,
unused_,
        );
        let native_return = native_return;
        
        ResultOfStreamvolIsValid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_restore_focus_entity(&self, p0_: u32) -> ResultOfSetRestoreFocusEntity {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_restore_focus_entity(
            p0_,
        );
        
        
        ResultOfSetRestoreFocusEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_switch_interp_out_duration(&self, ) -> ResultOfGetPlayerSwitchInterpOutDuration {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_player_switch_interp_out_duration(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerSwitchInterpOutDuration {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_end_srl(&self, ) -> ResultOfEndSrl {
    unsafe {
        
        let success = sdk::natives::end_srl(
            
        );
        
        
        ResultOfEndSrl {
            success,
            ret: (),
            
        }
    }
}

    fn native_streamvol_create_line(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: i32) -> ResultOfStreamvolCreateLine {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::streamvol_create_line(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        let native_return = native_return;
        
        ResultOfStreamvolCreateLine {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_model_to_creator_budget(&self, model_hash_: u32) -> ResultOfAddModelToCreatorBudget {
    unsafe {
        let mut native_return = Default::default();
let mut model_hash_ = model_hash_;
        let success = sdk::natives::add_model_to_creator_budget(
            &mut native_return,
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfAddModelToCreatorBudget {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_lodscale(&self, ) -> ResultOfGetLodscale {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_lodscale(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetLodscale {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_switch_establishing_shot(&self, name_: Option<String>) -> ResultOfSetPlayerSwitchEstablishingShot {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::set_player_switch_establishing_shot(
            name_.as_ref().unwrap(),
        );
        
        
        ResultOfSetPlayerSwitchEstablishingShot {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_anim_set(&self, anim_set_: Option<String>) -> ResultOfRemoveAnimSet {
    unsafe {
        let mut anim_set_ = sdk_helpers::create_c_string_ptr(anim_set_);
        let success = sdk::natives::remove_anim_set(
            anim_set_.as_ref().unwrap(),
        );
        
        
        ResultOfRemoveAnimSet {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_focus_entity(&self, entity_: u32) -> ResultOfSetFocusEntity {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::set_focus_entity(
            entity_,
        );
        
        
        ResultOfSetFocusEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_model_a_vehicle(&self, model_: u32) -> ResultOfIsModelAvehicle {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_model_a_vehicle(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOfIsModelAvehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_scene_streaming_tracks_cam_pos_this_frame(&self, ) -> ResultOfSetSceneStreamingTracksCamPosThisFrame {
    unsafe {
        
        let success = sdk::natives::set_scene_streaming_tracks_cam_pos_this_frame(
            
        );
        
        
        ResultOfSetSceneStreamingTracksCamPosThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_streamvol_delete(&self, unused_: i32) -> ResultOfStreamvolDelete {
    unsafe {
        let mut unused_ = unused_;
        let success = sdk::natives::streamvol_delete(
            unused_,
        );
        
        
        ResultOfStreamvolDelete {
            success,
            ret: (),
            
        }
    }
}

    fn native_streamvol_create_frustum(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: i32,
p8_: i32) -> ResultOfStreamvolCreateFrustum {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::streamvol_create_frustum(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
        );
        let native_return = native_return;
        
        ResultOfStreamvolCreateFrustum {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_srl_long_jump_mode(&self, p0_: bool) -> ResultOfSetSrlLongJumpMode {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_srl_long_jump_mode(
            p0_,
        );
        
        
        ResultOfSetSrlLongJumpMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_short_switch_state(&self, ) -> ResultOfGetPlayerShortSwitchState {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_player_short_switch_state(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerShortSwitchState {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_new_load_scene_start(&self, pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
offset_x_: f32,
offset_y_: f32,
offset_z_: f32,
radius_: f32,
p7_: i32) -> ResultOfNewLoadSceneStart {
    unsafe {
        let mut native_return = Default::default();
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut offset_x_ = offset_x_;
let mut offset_y_ = offset_y_;
let mut offset_z_ = offset_z_;
let mut radius_ = radius_;
let mut p7_ = p7_;
        let success = sdk::natives::new_load_scene_start(
            &mut native_return,
pos_x_,
pos_y_,
pos_z_,
offset_x_,
offset_y_,
offset_z_,
radius_,
p7_,
        );
        let native_return = native_return;
        
        ResultOfNewLoadSceneStart {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_streamvol_create_sphere(&self, x_: f32,
y_: f32,
z_: f32,
rad_: f32,
p4_: i32,
p5_: i32) -> ResultOfStreamvolCreateSphere {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut rad_ = rad_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::streamvol_create_sphere(
            &mut native_return,
x_,
y_,
z_,
rad_,
p4_,
p5_,
        );
        let native_return = native_return;
        
        ResultOfStreamvolCreateSphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_collision_for_model_loaded(&self, model_: u32) -> ResultOfHasCollisionForModelLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::has_collision_for_model_loaded(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOfHasCollisionForModelLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_anim_dict_exist(&self, anim_dict_: Option<String>) -> ResultOfDoesAnimDictExist {
    unsafe {
        let mut native_return = Default::default();
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
        let success = sdk::natives::does_anim_dict_exist(
            &mut native_return,
anim_dict_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfDoesAnimDictExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_focus(&self, entity_: u32) -> ResultOfIsEntityFocus {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_focus(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityFocus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_clip_set_loaded(&self, clip_set_: Option<String>) -> ResultOfHasClipSetLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut clip_set_ = sdk_helpers::create_c_string_ptr(clip_set_);
        let success = sdk::natives::has_clip_set_loaded(
            &mut native_return,
clip_set_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfHasClipSetLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_focus(&self, ) -> ResultOfClearFocus {
    unsafe {
        
        let success = sdk::natives::clear_focus(
            
        );
        
        
        ResultOfClearFocus {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_model_in_cdimage(&self, model_: u32) -> ResultOfIsModelInCdimage {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_model_in_cdimage(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOfIsModelInCdimage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_prefetch_srl(&self, srl_: Option<String>) -> ResultOfPrefetchSrl {
    unsafe {
        let mut srl_ = sdk_helpers::create_c_string_ptr(srl_);
        let success = sdk::natives::prefetch_srl(
            srl_.as_ref().unwrap(),
        );
        
        
        ResultOfPrefetchSrl {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_used_creator_budget(&self, ) -> ResultOfGetUsedCreatorBudget {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_used_creator_budget(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetUsedCreatorBudget {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_number_of_streaming_requests(&self, ) -> ResultOfGetNumberOfStreamingRequests {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_number_of_streaming_requests(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetNumberOfStreamingRequests {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_render_hd_only(&self, toggle_: bool) -> ResultOfSetRenderHdOnly {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_render_hd_only(
            toggle_,
        );
        
        
        ResultOfSetRenderHdOnly {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_ipl(&self, ipl_name_: Option<String>) -> ResultOfRequestIpl {
    unsafe {
        let mut ipl_name_ = sdk_helpers::create_c_string_ptr(ipl_name_);
        let success = sdk::natives::request_ipl(
            ipl_name_.as_ref().unwrap(),
        );
        
        
        ResultOfRequestIpl {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_network_loading_scene(&self, ) -> ResultOfIsNetworkLoadingScene {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_network_loading_scene(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsNetworkLoadingScene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ditch_police_models(&self, toggle_: bool) -> ResultOfSetDitchPoliceModels {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_ditch_police_models(
            toggle_,
        );
        
        
        ResultOfSetDitchPoliceModels {
            success,
            ret: (),
            
        }
    }
}

    fn native_allow_player_switch_pan(&self, ) -> ResultOfAllowPlayerSwitchPan {
    unsafe {
        
        let success = sdk::natives::allow_player_switch_pan(
            
        );
        
        
        ResultOfAllowPlayerSwitchPan {
            success,
            ret: (),
            
        }
    }
}

    fn native_load_scene(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfLoadScene {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::load_scene(
            x_,
y_,
z_,
        );
        
        
        ResultOfLoadScene {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_switch_state(&self, ) -> ResultOfGetPlayerSwitchState {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_player_switch_state(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerSwitchState {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_suppress_hd_map_streaming_this_frame(&self, ) -> ResultOfSuppressHdMapStreamingThisFrame {
    unsafe {
        
        let success = sdk::natives::suppress_hd_map_streaming_this_frame(
            
        );
        
        
        ResultOfSuppressHdMapStreamingThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_all_mapdata_culled(&self, p0_: i32) -> ResultOfSetAllMapdataCulled {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_all_mapdata_culled(
            p0_,
        );
        
        
        ResultOfSetAllMapdataCulled {
            success,
            ret: (),
            
        }
    }
}

    fn native_ipl_group_swap_is_active(&self, ) -> ResultOfIplGroupSwapIsActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ipl_group_swap_is_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIplGroupSwapIsActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_player_switch_interp_out_current_time(&self, ) -> ResultOfGetPlayerSwitchInterpOutCurrentTime {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_player_switch_interp_out_current_time(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerSwitchInterpOutCurrentTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_switch_skipping_descent(&self, ) -> ResultOfIsSwitchSkippingDescent {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_switch_skipping_descent(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsSwitchSkippingDescent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_player_short_switch_style(&self, p0_: i32) -> ResultOfSetPlayerShortSwitchStyle {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_player_short_switch_style(
            p0_,
        );
        
        
        ResultOfSetPlayerShortSwitchStyle {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_named_ptfx_asset(&self, fx_name_: Option<String>) -> ResultOfRemoveNamedPtfxAsset {
    unsafe {
        let mut fx_name_ = sdk_helpers::create_c_string_ptr(fx_name_);
        let success = sdk::natives::remove_named_ptfx_asset(
            fx_name_.as_ref().unwrap(),
        );
        
        
        ResultOfRemoveNamedPtfxAsset {
            success,
            ret: (),
            
        }
    }
}

    fn native_ipl_group_swap_cancel(&self, ) -> ResultOfIplGroupSwapCancel {
    unsafe {
        
        let success = sdk::natives::ipl_group_swap_cancel(
            
        );
        
        
        ResultOfIplGroupSwapCancel {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_streaming(&self, toggle_: bool) -> ResultOfSetStreaming {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_streaming(
            toggle_,
        );
        
        
        ResultOfSetStreaming {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_anim_set(&self, anim_set_: Option<String>) -> ResultOfRequestAnimSet {
    unsafe {
        let mut anim_set_ = sdk_helpers::create_c_string_ptr(anim_set_);
        let success = sdk::natives::request_anim_set(
            anim_set_.as_ref().unwrap(),
        );
        
        
        ResultOfRequestAnimSet {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_game_pauses_for_streaming(&self, toggle_: bool) -> ResultOfSetGamePausesForStreaming {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_game_pauses_for_streaming(
            toggle_,
        );
        
        
        ResultOfSetGamePausesForStreaming {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_safe_to_start_player_switch(&self, ) -> ResultOfIsSafeToStartPlayerSwitch {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_safe_to_start_player_switch(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsSafeToStartPlayerSwitch {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_allow_player_switch_outro(&self, ) -> ResultOfAllowPlayerSwitchOutro {
    unsafe {
        
        let success = sdk::natives::allow_player_switch_outro(
            
        );
        
        
        ResultOfAllowPlayerSwitchOutro {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_model_a_ped(&self, model_: u32) -> ResultOfIsModelAped {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_model_a_ped(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOfIsModelAped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_reduce_ped_model_budget(&self, toggle_: bool) -> ResultOfSetReducePedModelBudget {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_reduce_ped_model_budget(
            toggle_,
        );
        
        
        ResultOfSetReducePedModelBudget {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_switch_jump_cut_index(&self, ) -> ResultOfGetPlayerSwitchJumpCutIndex {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_player_switch_jump_cut_index(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerSwitchJumpCutIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_streamvol_has_loaded(&self, unused_: i32) -> ResultOfStreamvolHasLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut unused_ = unused_;
        let success = sdk::natives::streamvol_has_loaded(
            &mut native_return,
unused_,
        );
        let native_return = native_return;
        
        ResultOfStreamvolHasLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_load_global_water_file(&self, water_type_: i32) -> ResultOfLoadGlobalWaterFile {
    unsafe {
        let mut water_type_ = water_type_;
        let success = sdk::natives::load_global_water_file(
            water_type_,
        );
        
        
        ResultOfLoadGlobalWaterFile {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_reduce_vehicle_model_budget(&self, toggle_: bool) -> ResultOfSetReduceVehicleModelBudget {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_reduce_vehicle_model_budget(
            toggle_,
        );
        
        
        ResultOfSetReduceVehicleModelBudget {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_named_ptfx_asset_loaded(&self, fx_name_: Option<String>) -> ResultOfHasNamedPtfxAssetLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut fx_name_ = sdk_helpers::create_c_string_ptr(fx_name_);
        let success = sdk::natives::has_named_ptfx_asset_loaded(
            &mut native_return,
fx_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfHasNamedPtfxAssetLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ipl_active(&self, ipl_name_: Option<String>) -> ResultOfIsIplActive {
    unsafe {
        let mut native_return = Default::default();
let mut ipl_name_ = sdk_helpers::create_c_string_ptr(ipl_name_);
        let success = sdk::natives::is_ipl_active(
            &mut native_return,
ipl_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfIsIplActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_ptfx_asset(&self, ) -> ResultOfRemovePtfxAsset {
    unsafe {
        
        let success = sdk::natives::remove_ptfx_asset(
            
        );
        
        
        ResultOfRemovePtfxAsset {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_models_in_room(&self, interior_: i32,
room_name_: Option<String>) -> ResultOfRequestModelsInRoom {
    unsafe {
        let mut interior_ = interior_;
let mut room_name_ = sdk_helpers::create_c_string_ptr(room_name_);
        let success = sdk::natives::request_models_in_room(
            interior_,
room_name_.as_ref().unwrap(),
        );
        
        
        ResultOfRequestModelsInRoom {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_population_budget(&self, p0_: i32) -> ResultOfSetPedPopulationBudget {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_ped_population_budget(
            p0_,
        );
        
        
        ResultOfSetPedPopulationBudget {
            success,
            ret: (),
            
        }
    }
}

    fn native_allow_player_switch_ascent(&self, ) -> ResultOfAllowPlayerSwitchAscent {
    unsafe {
        
        let success = sdk::natives::allow_player_switch_ascent(
            
        );
        
        
        ResultOfAllowPlayerSwitchAscent {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_collision_for_model(&self, model_: u32) -> ResultOfRequestCollisionForModel {
    unsafe {
        let mut model_ = model_;
        let success = sdk::natives::request_collision_for_model(
            model_,
        );
        
        
        ResultOfRequestCollisionForModel {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_switch_to_multi_firstpart_finished(&self, ) -> ResultOfIsSwitchToMultiFirstpartFinished {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_switch_to_multi_firstpart_finished(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsSwitchToMultiFirstpartFinished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_ptfx_asset(&self, ) -> ResultOfRequestPtfxAsset {
    unsafe {
        
        let success = sdk::natives::request_ptfx_asset(
            
        );
        
        
        ResultOfRequestPtfxAsset {
            success,
            ret: (),
            
        }
    }
}

    fn native_ipl_group_swap_start(&self, ipl_name1_: Option<String>,
ipl_name2_: Option<String>) -> ResultOfIplGroupSwapStart {
    unsafe {
        let mut ipl_name1_ = sdk_helpers::create_c_string_ptr(ipl_name1_);
let mut ipl_name2_ = sdk_helpers::create_c_string_ptr(ipl_name2_);
        let success = sdk::natives::ipl_group_swap_start(
            ipl_name1_.as_ref().unwrap(),
ipl_name2_.as_ref().unwrap(),
        );
        
        
        ResultOfIplGroupSwapStart {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_player_switch(&self, ) -> ResultOfStopPlayerSwitch {
    unsafe {
        
        let success = sdk::natives::stop_player_switch(
            
        );
        
        
        ResultOfStopPlayerSwitch {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_model(&self, model_: u32) -> ResultOfRequestModel {
    unsafe {
        let mut model_ = model_;
        let success = sdk::natives::request_model(
            model_,
        );
        
        
        ResultOfRequestModel {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_model_loaded(&self, model_: u32) -> ResultOfHasModelLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::has_model_loaded(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOfHasModelLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_island_enabled(&self, name_: Option<String>,
toggle_: bool) -> ResultOfSetIslandEnabled {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut toggle_ = toggle_;
        let success = sdk::natives::set_island_enabled(
            name_.as_ref().unwrap(),
toggle_,
        );
        
        
        ResultOfSetIslandEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_begin_srl(&self, ) -> ResultOfBeginSrl {
    unsafe {
        
        let success = sdk::natives::begin_srl(
            
        );
        
        
        ResultOfBeginSrl {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_menu_ped_model(&self, model_: u32) -> ResultOfRequestMenuPedModel {
    unsafe {
        let mut model_ = model_;
        let success = sdk::natives::request_menu_ped_model(
            model_,
        );
        
        
        ResultOfRequestMenuPedModel {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_new_load_scene_active(&self, ) -> ResultOfIsNewLoadSceneActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_new_load_scene_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsNewLoadSceneActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_srl_time(&self, p0_: f32) -> ResultOfSetSrlTime {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_srl_time(
            p0_,
        );
        
        
        ResultOfSetSrlTime {
            success,
            ret: (),
            
        }
    }
}

    fn native_override_lodscale_this_frame(&self, scaling_: f32) -> ResultOfOverrideLodscaleThisFrame {
    unsafe {
        let mut scaling_ = scaling_;
        let success = sdk::natives::override_lodscale_this_frame(
            scaling_,
        );
        
        
        ResultOfOverrideLodscaleThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_switch_to_multi_firstpart(&self, ped_: u32,
flags_: i32,
switch_type_: i32) -> ResultOfSwitchToMultiFirstpart {
    unsafe {
        let mut ped_ = ped_;
let mut flags_ = flags_;
let mut switch_type_ = switch_type_;
        let success = sdk::natives::switch_to_multi_firstpart(
            ped_,
flags_,
switch_type_,
        );
        
        
        ResultOfSwitchToMultiFirstpart {
            success,
            ret: (),
            
        }
    }
}

    fn native_new_load_scene_start_sphere(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
p4_: i32) -> ResultOfNewLoadSceneStartSphere {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut p4_ = p4_;
        let success = sdk::natives::new_load_scene_start_sphere(
            &mut native_return,
x_,
y_,
z_,
radius_,
p4_,
        );
        let native_return = native_return;
        
        ResultOfNewLoadSceneStartSphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_allow_player_switch_descent(&self, ) -> ResultOfAllowPlayerSwitchDescent {
    unsafe {
        
        let success = sdk::natives::allow_player_switch_descent(
            
        );
        
        
        ResultOfAllowPlayerSwitchDescent {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mapdatacullbox_enabled(&self, name_: Option<String>,
toggle_: bool) -> ResultOfSetMapdatacullboxEnabled {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut toggle_ = toggle_;
        let success = sdk::natives::set_mapdatacullbox_enabled(
            name_.as_ref().unwrap(),
toggle_,
        );
        
        
        ResultOfSetMapdatacullboxEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_player_switch_type(&self, ) -> ResultOfGetPlayerSwitchType {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_player_switch_type(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetPlayerSwitchType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_init_creator_budget(&self, ) -> ResultOfInitCreatorBudget {
    unsafe {
        
        let success = sdk::natives::init_creator_budget(
            
        );
        
        
        ResultOfInitCreatorBudget {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ideal_player_switch_type(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOfGetIdealPlayerSwitchType {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::get_ideal_player_switch_type(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOfGetIdealPlayerSwitchType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_named_ptfx_asset(&self, fx_name_: Option<String>) -> ResultOfRequestNamedPtfxAsset {
    unsafe {
        let mut fx_name_ = sdk_helpers::create_c_string_ptr(fx_name_);
        let success = sdk::natives::request_named_ptfx_asset(
            fx_name_.as_ref().unwrap(),
        );
        
        
        ResultOfRequestNamedPtfxAsset {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_hd_area(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOfSetHdArea {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::set_hd_area(
            x_,
y_,
z_,
radius_,
        );
        
        
        ResultOfSetHdArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_focus_pos_and_vel(&self, x_: f32,
y_: f32,
z_: f32,
offset_x_: f32,
offset_y_: f32,
offset_z_: f32) -> ResultOfSetFocusPosAndVel {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut offset_x_ = offset_x_;
let mut offset_y_ = offset_y_;
let mut offset_z_ = offset_z_;
        let success = sdk::natives::set_focus_pos_and_vel(
            x_,
y_,
z_,
offset_x_,
offset_y_,
offset_z_,
        );
        
        
        ResultOfSetFocusPosAndVel {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_streamvol_active(&self, ) -> ResultOfIsStreamvolActive {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_streamvol_active(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsStreamvolActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_switch_outro_fx(&self, ) -> ResultOfDisableSwitchOutroFx {
    unsafe {
        
        let success = sdk::natives::disable_switch_outro_fx(
            
        );
        
        
        ResultOfDisableSwitchOutroFx {
            success,
            ret: (),
            
        }
    }
}

    fn native_load_all_objects_now(&self, ) -> ResultOfLoadAllObjectsNow {
    unsafe {
        
        let success = sdk::natives::load_all_objects_now(
            
        );
        
        
        ResultOfLoadAllObjectsNow {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_srl_readahead_times(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32) -> ResultOfSetSrlReadaheadTimes {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_srl_readahead_times(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfSetSrlReadaheadTimes {
            success,
            ret: (),
            
        }
    }
}

    fn native_remap_lodscale_range_this_frame(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32) -> ResultOfRemapLodscaleRangeThisFrame {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::remap_lodscale_range_this_frame(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfRemapLodscaleRangeThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_model_valid(&self, model_: u32) -> ResultOfIsModelValid {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_model_valid(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOfIsModelValid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_new_load_scene_stop(&self, ) -> ResultOfNewLoadSceneStop {
    unsafe {
        
        let success = sdk::natives::new_load_scene_stop(
            
        );
        
        
        ResultOfNewLoadSceneStop {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_switch_outro(&self, camera_coord_x_: f32,
camera_coord_y_: f32,
camera_coord_z_: f32,
cam_rotation_x_: f32,
cam_rotation_y_: f32,
cam_rotation_z_: f32,
cam_fov_: f32,
cam_far_clip_: f32,
rotation_order_: i32) -> ResultOfSetPlayerSwitchOutro {
    unsafe {
        let mut camera_coord_x_ = camera_coord_x_;
let mut camera_coord_y_ = camera_coord_y_;
let mut camera_coord_z_ = camera_coord_z_;
let mut cam_rotation_x_ = cam_rotation_x_;
let mut cam_rotation_y_ = cam_rotation_y_;
let mut cam_rotation_z_ = cam_rotation_z_;
let mut cam_fov_ = cam_fov_;
let mut cam_far_clip_ = cam_far_clip_;
let mut rotation_order_ = rotation_order_;
        let success = sdk::natives::set_player_switch_outro(
            camera_coord_x_,
camera_coord_y_,
camera_coord_z_,
cam_rotation_x_,
cam_rotation_y_,
cam_rotation_z_,
cam_fov_,
cam_far_clip_,
rotation_order_,
        );
        
        
        ResultOfSetPlayerSwitchOutro {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_update_load_scene(&self, ) -> ResultOfNetworkUpdateLoadScene {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::network_update_load_scene(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfNetworkUpdateLoadScene {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_anim_set_loaded(&self, anim_set_: Option<String>) -> ResultOfHasAnimSetLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut anim_set_ = sdk_helpers::create_c_string_ptr(anim_set_);
        let success = sdk::natives::has_anim_set_loaded(
            &mut native_return,
anim_set_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfHasAnimSetLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_additional_collision_at_coord(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfRequestAdditionalCollisionAtCoord {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::request_additional_collision_at_coord(
            x_,
y_,
z_,
        );
        
        
        ResultOfRequestAdditionalCollisionAtCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_ptfx_asset_loaded(&self, ) -> ResultOfHasPtfxAssetLoaded {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_ptfx_asset_loaded(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfHasPtfxAssetLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_population_budget(&self, p0_: i32) -> ResultOfSetVehiclePopulationBudget {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_vehicle_population_budget(
            p0_,
        );
        
        
        ResultOfSetVehiclePopulationBudget {
            success,
            ret: (),
            
        }
    }
}

    fn native_shutdown_creator_budget(&self, ) -> ResultOfShutdownCreatorBudget {
    unsafe {
        
        let success = sdk::natives::shutdown_creator_budget(
            
        );
        
        
        ResultOfShutdownCreatorBudget {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_hd_area(&self, ) -> ResultOfClearHdArea {
    unsafe {
        
        let success = sdk::natives::clear_hd_area(
            
        );
        
        
        ResultOfClearHdArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_srl_loaded(&self, ) -> ResultOfIsSrlLoaded {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_srl_loaded(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsSrlLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_anim_dict_loaded(&self, anim_dict_: Option<String>) -> ResultOfHasAnimDictLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
        let success = sdk::natives::has_anim_dict_loaded(
            &mut native_return,
anim_dict_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfHasAnimDictLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_clip_set(&self, clip_set_: Option<String>) -> ResultOfRequestClipSet {
    unsafe {
        let mut clip_set_ = sdk_helpers::create_c_string_ptr(clip_set_);
        let success = sdk::natives::request_clip_set(
            clip_set_.as_ref().unwrap(),
        );
        
        
        ResultOfRequestClipSet {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_anim_dict(&self, anim_dict_: Option<String>) -> ResultOfRequestAnimDict {
    unsafe {
        let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
        let success = sdk::natives::request_anim_dict(
            anim_dict_.as_ref().unwrap(),
        );
        
        
        ResultOfRequestAnimDict {
            success,
            ret: (),
            
        }
    }
}

    fn native_enable_switch_pause_before_descent(&self, ) -> ResultOfEnableSwitchPauseBeforeDescent {
    unsafe {
        
        let success = sdk::natives::enable_switch_pause_before_descent(
            
        );
        
        
        ResultOfEnableSwitchPauseBeforeDescent {
            success,
            ret: (),
            
        }
    }
}

    fn native_switch_to_multi_secondpart(&self, ped_: u32) -> ResultOfSwitchToMultiSecondpart {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::switch_to_multi_secondpart(
            ped_,
        );
        
        
        ResultOfSwitchToMultiSecondpart {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_player_switch_in_progress(&self, ) -> ResultOfIsPlayerSwitchInProgress {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_player_switch_in_progress(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsPlayerSwitchInProgress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_switch_ready_for_descent(&self, ) -> ResultOfIsSwitchReadyForDescent {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::is_switch_ready_for_descent(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIsSwitchReadyForDescent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_interior_active(&self, interior_i_d_: i32,
toggle_: bool) -> ResultOfSetInteriorActive {
    unsafe {
        let mut interior_i_d_ = interior_i_d_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_interior_active(
            interior_i_d_,
toggle_,
        );
        
        
        ResultOfSetInteriorActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_model_as_no_longer_needed(&self, model_: u32) -> ResultOfSetModelAsNoLongerNeeded {
    unsafe {
        let mut model_ = model_;
        let success = sdk::natives::set_model_as_no_longer_needed(
            model_,
        );
        
        
        ResultOfSetModelAsNoLongerNeeded {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_ipl(&self, ipl_name_: Option<String>) -> ResultOfRemoveIpl {
    unsafe {
        let mut ipl_name_ = sdk_helpers::create_c_string_ptr(ipl_name_);
        let success = sdk::natives::remove_ipl(
            ipl_name_.as_ref().unwrap(),
        );
        
        
        ResultOfRemoveIpl {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_srl_post_cutscene_camera(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOfSetSrlPostCutsceneCamera {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::set_srl_post_cutscene_camera(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOfSetSrlPostCutsceneCamera {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_model_from_creator_budget(&self, model_hash_: u32) -> ResultOfRemoveModelFromCreatorBudget {
    unsafe {
        let mut model_hash_ = model_hash_;
        let success = sdk::natives::remove_model_from_creator_budget(
            model_hash_,
        );
        
        
        ResultOfRemoveModelFromCreatorBudget {
            success,
            ret: (),
            
        }
    }
}

    fn native_ipl_group_swap_finish(&self, ) -> ResultOfIplGroupSwapFinish {
    unsafe {
        
        let success = sdk::natives::ipl_group_swap_finish(
            
        );
        
        
        ResultOfIplGroupSwapFinish {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_anim_dict(&self, anim_dict_: Option<String>) -> ResultOfRemoveAnimDict {
    unsafe {
        let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
        let success = sdk::natives::remove_anim_dict(
            anim_dict_.as_ref().unwrap(),
        );
        
        
        ResultOfRemoveAnimDict {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_global_water_file(&self, ) -> ResultOfGetGlobalWaterFile {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_global_water_file(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetGlobalWaterFile {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_srl_force_prestream(&self, p0_: i32) -> ResultOfSetSrlForcePrestream {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_srl_force_prestream(
            p0_,
        );
        
        
        ResultOfSetSrlForcePrestream {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_player_switch(&self, from_: u32,
to_: u32,
flags_: i32,
switch_type_: i32) -> ResultOfStartPlayerSwitch {
    unsafe {
        let mut from_ = from_;
let mut to_ = to_;
let mut flags_ = flags_;
let mut switch_type_ = switch_type_;
        let success = sdk::natives::start_player_switch(
            from_,
to_,
flags_,
switch_type_,
        );
        
        
        ResultOfStartPlayerSwitch {
            success,
            ret: (),
            
        }
    }
}

    fn native_ipl_group_swap_is_ready(&self, ) -> ResultOfIplGroupSwapIsReady {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::ipl_group_swap_is_ready(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfIplGroupSwapIsReady {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_timestep(&self, ) -> ResultOfTimestep {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::timestep(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfTimestep {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sin(&self, value_: f32) -> ResultOfSin {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::sin(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOfSin {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_ceil(&self, value_: f32) -> ResultOfCeil {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::ceil(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOfCeil {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_vdist(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOfVdist {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::vdist(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOfVdist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_this_thread_priority(&self, priority_: i32) -> ResultOfSetThisThreadPriority {
    unsafe {
        let mut priority_ = priority_;
        let success = sdk::natives::set_this_thread_priority(
            priority_,
        );
        
        
        ResultOfSetThisThreadPriority {
            success,
            ret: (),
            
        }
    }
}

    fn native_wait(&self, ms_: i32) -> ResultOfWait {
    unsafe {
        let mut ms_ = ms_;
        let success = sdk::natives::wait(
            ms_,
        );
        
        
        ResultOfWait {
            success,
            ret: (),
            
        }
    }
}

    fn native_settimerb(&self, value_: i32) -> ResultOfSettimerb {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::settimerb(
            value_,
        );
        
        
        ResultOfSettimerb {
            success,
            ret: (),
            
        }
    }
}

    fn native_vmag(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfVmag {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::vmag(
            &mut native_return,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOfVmag {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_sqrt(&self, value_: f32) -> ResultOfSqrt {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::sqrt(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOfSqrt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_timera(&self, ) -> ResultOfTimera {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::timera(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfTimera {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_shift_right(&self, value_: i32,
bit_shift_: i32) -> ResultOfShiftRight {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
let mut bit_shift_ = bit_shift_;
        let success = sdk::natives::shift_right(
            &mut native_return,
value_,
bit_shift_,
        );
        let native_return = native_return;
        
        ResultOfShiftRight {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_vmag2(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfVmag2 {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::vmag2(
            &mut native_return,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOfVmag2 {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_vdist2(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32) -> ResultOfVdist2 {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
        let success = sdk::natives::vdist2(
            &mut native_return,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
        
        ResultOfVdist2 {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_new_script_with_args(&self, script_name_: Option<String>,
args_: shared::MemoryBufferId,
arg_count_: i32,
stack_size_: i32) -> ResultOfStartNewScriptWithArgs {
    unsafe {
        let mut native_return = Default::default();
let mut script_name_ = sdk_helpers::create_c_string_ptr(script_name_);
let mut args_ = self.memory_buffers.borrow_mut().get_mut_ptr(args_) as *mut c_void;
let mut arg_count_ = arg_count_;
let mut stack_size_ = stack_size_;
        let success = sdk::natives::start_new_script_with_args(
            &mut native_return,
args_,
script_name_.as_ref().unwrap(),
arg_count_,
stack_size_,
        );
        let native_return = native_return;
let args_ = 0;
        
        ResultOfStartNewScriptWithArgs {
            success,
            ret: native_return,
            args_
        }
    }
}

    fn native_to_float(&self, value_: i32) -> ResultOfToFloat {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::to_float(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOfToFloat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_settimera(&self, value_: i32) -> ResultOfSettimera {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::settimera(
            value_,
        );
        
        
        ResultOfSettimera {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_new_script_with_name_hash_and_args(&self, script_hash_: u32,
args_: shared::MemoryBufferId,
arg_count_: i32,
stack_size_: i32) -> ResultOfStartNewScriptWithNameHashAndArgs {
    unsafe {
        let mut native_return = Default::default();
let mut script_hash_ = script_hash_;
let mut args_ = self.memory_buffers.borrow_mut().get_mut_ptr(args_) as *mut c_void;
let mut arg_count_ = arg_count_;
let mut stack_size_ = stack_size_;
        let success = sdk::natives::start_new_script_with_name_hash_and_args(
            &mut native_return,
args_,
script_hash_,
arg_count_,
stack_size_,
        );
        let native_return = native_return;
let args_ = 0;
        
        ResultOfStartNewScriptWithNameHashAndArgs {
            success,
            ret: native_return,
            args_
        }
    }
}

    fn native_timerb(&self, ) -> ResultOfTimerb {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::timerb(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfTimerb {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_cos(&self, value_: f32) -> ResultOfCos {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::cos(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOfCos {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pow(&self, base_: f32,
exponent_: f32) -> ResultOfPow {
    unsafe {
        let mut native_return = Default::default();
let mut base_ = base_;
let mut exponent_ = exponent_;
        let success = sdk::natives::pow(
            &mut native_return,
base_,
exponent_,
        );
        let native_return = native_return;
        
        ResultOfPow {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_new_script(&self, script_name_: Option<String>,
stack_size_: i32) -> ResultOfStartNewScript {
    unsafe {
        let mut native_return = Default::default();
let mut script_name_ = sdk_helpers::create_c_string_ptr(script_name_);
let mut stack_size_ = stack_size_;
        let success = sdk::natives::start_new_script(
            &mut native_return,
script_name_.as_ref().unwrap(),
stack_size_,
        );
        let native_return = native_return;
        
        ResultOfStartNewScript {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_log10(&self, value_: f32) -> ResultOfLog10 {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::log10(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOfLog10 {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_new_script_with_name_hash(&self, script_hash_: u32,
stack_size_: i32) -> ResultOfStartNewScriptWithNameHash {
    unsafe {
        let mut native_return = Default::default();
let mut script_hash_ = script_hash_;
let mut stack_size_ = stack_size_;
        let success = sdk::natives::start_new_script_with_name_hash(
            &mut native_return,
script_hash_,
stack_size_,
        );
        let native_return = native_return;
        
        ResultOfStartNewScriptWithNameHash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_shift_left(&self, value_: i32,
bit_shift_: i32) -> ResultOfShiftLeft {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
let mut bit_shift_ = bit_shift_;
        let success = sdk::natives::shift_left(
            &mut native_return,
value_,
bit_shift_,
        );
        let native_return = native_return;
        
        ResultOfShiftLeft {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_round(&self, value_: f32) -> ResultOfRound {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::round(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOfRound {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_floor(&self, value_: f32) -> ResultOfFloor {
    unsafe {
        let mut native_return = Default::default();
let mut value_ = value_;
        let success = sdk::natives::floor(
            &mut native_return,
value_,
        );
        let native_return = native_return;
        
        ResultOfFloor {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_waypoint_recording_get_speed_at_point(&self, name_: Option<String>,
point_: i32) -> ResultOfWaypointRecordingGetSpeedAtPoint {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut point_ = point_;
        let success = sdk::natives::waypoint_recording_get_speed_at_point(
            &mut native_return,
name_.as_ref().unwrap(),
point_,
        );
        let native_return = native_return;
        
        ResultOfWaypointRecordingGetSpeedAtPoint {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_sequence_progress(&self, ped_: u32) -> ResultOfGetSequenceProgress {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_sequence_progress(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetSequenceProgress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_scenario_group_enabled(&self, scenario_group_: Option<String>,
enabled_: bool) -> ResultOfSetScenarioGroupEnabled {
    unsafe {
        let mut scenario_group_ = sdk_helpers::create_c_string_ptr(scenario_group_);
let mut enabled_ = enabled_;
        let success = sdk::natives::set_scenario_group_enabled(
            scenario_group_.as_ref().unwrap(),
enabled_,
        );
        
        
        ResultOfSetScenarioGroupEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_anim_rate(&self, entity_: u32,
rate_: f32,
priority_: i32,
secondary_: bool) -> ResultOfSetAnimRate {
    unsafe {
        let mut entity_ = entity_;
let mut rate_ = rate_;
let mut priority_ = priority_;
let mut secondary_ = secondary_;
        let success = sdk::natives::set_anim_rate(
            entity_,
rate_,
priority_,
secondary_,
        );
        
        
        ResultOfSetAnimRate {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_go_to_entity_while_aiming_at_coord(&self, ped_: u32,
entity_: u32,
aim_x_: f32,
aim_y_: f32,
aim_z_: f32,
move_blend_ratio_: f32,
shoot_: bool,
target_radius_: f32,
slow_distance_: f32,
use_nav_mesh_: bool,
instant_blend_to_aim_: bool,
firing_pattern_: u32) -> ResultOfTaskGoToEntityWhileAimingAtCoord {
    unsafe {
        let mut ped_ = ped_;
let mut entity_ = entity_;
let mut aim_x_ = aim_x_;
let mut aim_y_ = aim_y_;
let mut aim_z_ = aim_z_;
let mut move_blend_ratio_ = move_blend_ratio_;
let mut shoot_ = shoot_;
let mut target_radius_ = target_radius_;
let mut slow_distance_ = slow_distance_;
let mut use_nav_mesh_ = use_nav_mesh_;
let mut instant_blend_to_aim_ = instant_blend_to_aim_;
let mut firing_pattern_ = firing_pattern_;
        let success = sdk::natives::task_go_to_entity_while_aiming_at_coord(
            ped_,
entity_,
aim_x_,
aim_y_,
aim_z_,
move_blend_ratio_,
shoot_,
target_radius_,
slow_distance_,
use_nav_mesh_,
instant_blend_to_aim_,
firing_pattern_,
        );
        
        
        ResultOfTaskGoToEntityWhileAimingAtCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_waypoint_playback_start_shooting_at_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
p4_: bool,
firing_pattern_: u32) -> ResultOfWaypointPlaybackStartShootingAtCoord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p4_ = p4_;
let mut firing_pattern_ = firing_pattern_;
        let success = sdk::natives::waypoint_playback_start_shooting_at_coord(
            ped_,
x_,
y_,
z_,
p4_,
firing_pattern_,
        );
        
        
        ResultOfWaypointPlaybackStartShootingAtCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_parachute_task_thrust(&self, ped_: u32,
thrust_: f32) -> ResultOfSetParachuteTaskThrust {
    unsafe {
        let mut ped_ = ped_;
let mut thrust_ = thrust_;
        let success = sdk::natives::set_parachute_task_thrust(
            ped_,
thrust_,
        );
        
        
        ResultOfSetParachuteTaskThrust {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_follow_waypoint_recording(&self, ped_: u32,
name_: Option<String>,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfTaskFollowWaypointRecording {
    unsafe {
        let mut ped_ = ped_;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::task_follow_waypoint_recording(
            ped_,
name_.as_ref().unwrap(),
p2_,
p3_,
p4_,
        );
        
        
        ResultOfTaskFollowWaypointRecording {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_shoot_at_entity(&self, entity_: u32,
target_: u32,
duration_: i32,
firing_pattern_: u32) -> ResultOfTaskShootAtEntity {
    unsafe {
        let mut entity_ = entity_;
let mut target_ = target_;
let mut duration_ = duration_;
let mut firing_pattern_ = firing_pattern_;
        let success = sdk::natives::task_shoot_at_entity(
            entity_,
target_,
duration_,
firing_pattern_,
        );
        
        
        ResultOfTaskShootAtEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_rappel_from_heli(&self, ped_: u32,
min_height_above_ground_: f32) -> ResultOfTaskRappelFromHeli {
    unsafe {
        let mut ped_ = ped_;
let mut min_height_above_ground_ = min_height_above_ground_;
        let success = sdk::natives::task_rappel_from_heli(
            ped_,
min_height_above_ground_,
        );
        
        
        ResultOfTaskRappelFromHeli {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_scenario_of_type_exist_in_area(&self, x_: f32,
y_: f32,
z_: f32,
scenario_name_: Option<String>,
radius_: f32,
must_be_free_: bool) -> ResultOfDoesScenarioOfTypeExistInArea {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut scenario_name_ = sdk_helpers::create_c_string_ptr(scenario_name_);
let mut radius_ = radius_;
let mut must_be_free_ = must_be_free_;
        let success = sdk::natives::does_scenario_of_type_exist_in_area(
            &mut native_return,
x_,
y_,
z_,
scenario_name_.as_ref().unwrap(),
radius_,
must_be_free_,
        );
        let native_return = native_return;
        
        ResultOfDoesScenarioOfTypeExistInArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_jump(&self, ped_: u32,
use_player_launch_force_: bool,
do_super_jump_: bool,
use_full_super_jump_force_: bool) -> ResultOfTaskJump {
    unsafe {
        let mut ped_ = ped_;
let mut use_player_launch_force_ = use_player_launch_force_;
let mut do_super_jump_ = do_super_jump_;
let mut use_full_super_jump_force_ = use_full_super_jump_force_;
        let success = sdk::natives::task_jump(
            ped_,
use_player_launch_force_,
do_super_jump_,
use_full_super_jump_force_,
        );
        
        
        ResultOfTaskJump {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_scenario_types_enabled(&self, ) -> ResultOfResetScenarioTypesEnabled {
    unsafe {
        
        let success = sdk::natives::reset_scenario_types_enabled(
            
        );
        
        
        ResultOfResetScenarioTypesEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_waypoint_playback_pause(&self, p0_: i32,
p1_: bool,
p2_: bool) -> ResultOfWaypointPlaybackPause {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::waypoint_playback_pause(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfWaypointPlaybackPause {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_park(&self, ped_: u32,
vehicle_: u32,
x_: f32,
y_: f32,
z_: f32,
heading_: f32,
mode_: i32,
radius_: f32,
keep_engine_on_: bool) -> ResultOfTaskVehiclePark {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut mode_ = mode_;
let mut radius_ = radius_;
let mut keep_engine_on_ = keep_engine_on_;
        let success = sdk::natives::task_vehicle_park(
            ped_,
vehicle_,
x_,
y_,
z_,
heading_,
mode_,
radius_,
keep_engine_on_,
        );
        
        
        ResultOfTaskVehiclePark {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_clear_look_at(&self, ped_: u32) -> ResultOfTaskClearLookAt {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::task_clear_look_at(
            ped_,
        );
        
        
        ResultOfTaskClearLookAt {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_escort(&self, ped_: u32,
vehicle_: u32,
target_vehicle_: u32,
mode_: i32,
speed_: f32,
driving_style_: i32,
min_distance_: f32,
min_height_above_terrain_: i32,
no_roads_distance_: f32) -> ResultOfTaskVehicleEscort {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut target_vehicle_ = target_vehicle_;
let mut mode_ = mode_;
let mut speed_ = speed_;
let mut driving_style_ = driving_style_;
let mut min_distance_ = min_distance_;
let mut min_height_above_terrain_ = min_height_above_terrain_;
let mut no_roads_distance_ = no_roads_distance_;
        let success = sdk::natives::task_vehicle_escort(
            ped_,
vehicle_,
target_vehicle_,
mode_,
speed_,
driving_style_,
min_distance_,
min_height_above_terrain_,
no_roads_distance_,
        );
        
        
        ResultOfTaskVehicleEscort {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_task_move_network_enable_collision_on_network_clone_when_fixed(&self, ped_: u32,
enable_: bool) -> ResultOfSetTaskMoveNetworkEnableCollisionOnNetworkCloneWhenFixed {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut enable_ = enable_;
        let success = sdk::natives::set_task_move_network_enable_collision_on_network_clone_when_fixed(
            &mut native_return,
ped_,
enable_,
        );
        let native_return = native_return;
        
        ResultOfSetTaskMoveNetworkEnableCollisionOnNetworkCloneWhenFixed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_vehicle_shoot_at_ped(&self, ped_: u32,
target_: u32,
fire_tolerance_: f32) -> ResultOfTaskVehicleShootAtPed {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
let mut fire_tolerance_ = fire_tolerance_;
        let success = sdk::natives::task_vehicle_shoot_at_ped(
            ped_,
target_,
fire_tolerance_,
        );
        
        
        ResultOfTaskVehicleShootAtPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_go_to_coord_while_aiming_at_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
aim_at_x_: f32,
aim_at_y_: f32,
aim_at_z_: f32,
move_blend_ratio_: f32,
shoot_: bool,
target_radius_: f32,
slow_distance_: f32,
use_nav_mesh_: bool,
nav_flags_: i32,
instant_blend_to_aim_: bool,
firing_pattern_: u32) -> ResultOfTaskGoToCoordWhileAimingAtCoord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut aim_at_x_ = aim_at_x_;
let mut aim_at_y_ = aim_at_y_;
let mut aim_at_z_ = aim_at_z_;
let mut move_blend_ratio_ = move_blend_ratio_;
let mut shoot_ = shoot_;
let mut target_radius_ = target_radius_;
let mut slow_distance_ = slow_distance_;
let mut use_nav_mesh_ = use_nav_mesh_;
let mut nav_flags_ = nav_flags_;
let mut instant_blend_to_aim_ = instant_blend_to_aim_;
let mut firing_pattern_ = firing_pattern_;
        let success = sdk::natives::task_go_to_coord_while_aiming_at_coord(
            ped_,
x_,
y_,
z_,
aim_at_x_,
aim_at_y_,
aim_at_z_,
move_blend_ratio_,
shoot_,
target_radius_,
slow_distance_,
use_nav_mesh_,
nav_flags_,
instant_blend_to_aim_,
firing_pattern_,
        );
        
        
        ResultOfTaskGoToCoordWhileAimingAtCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_waypoint_playback_override_speed(&self, vehicle_: u32,
speed_: f32) -> ResultOfVehicleWaypointPlaybackOverrideSpeed {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut speed_ = speed_;
        let success = sdk::natives::vehicle_waypoint_playback_override_speed(
            vehicle_,
speed_,
        );
        
        
        ResultOfVehicleWaypointPlaybackOverrideSpeed {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_scripted_animation(&self, ped_: u32,
priority_low_data_: i32,
priority_mid_data_: i32,
priority_high_data_: i32,
blend_in_delta_: f32,
blend_out_delta_: f32) -> ResultOfTaskScriptedAnimation {
    unsafe {
        let mut ped_ = ped_;
let mut priority_low_data_ = priority_low_data_;
let mut priority_mid_data_ = priority_mid_data_;
let mut priority_high_data_ = priority_high_data_;
let mut blend_in_delta_ = blend_in_delta_;
let mut blend_out_delta_ = blend_out_delta_;
        let success = sdk::natives::task_scripted_animation(
            &mut priority_low_data_,
&mut priority_mid_data_,
&mut priority_high_data_,
ped_,
blend_in_delta_,
blend_out_delta_,
        );
        let priority_low_data_ = priority_low_data_;
let priority_mid_data_ = priority_mid_data_;
let priority_high_data_ = priority_high_data_;
        
        ResultOfTaskScriptedAnimation {
            success,
            ret: (),
            priority_low_data_,
priority_mid_data_,
priority_high_data_
        }
    }
}

    fn native_assisted_movement_override_load_distance_this_frame(&self, dist_: f32) -> ResultOfAssistedMovementOverrideLoadDistanceThisFrame {
    unsafe {
        let mut dist_ = dist_;
        let success = sdk::natives::assisted_movement_override_load_distance_this_frame(
            dist_,
        );
        
        
        ResultOfAssistedMovementOverrideLoadDistanceThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_start_scenario_in_place(&self, ped_: u32,
scenario_name_: Option<String>,
unk_delay_: i32,
play_enter_anim_: bool) -> ResultOfTaskStartScenarioInPlace {
    unsafe {
        let mut ped_ = ped_;
let mut scenario_name_ = sdk_helpers::create_c_string_ptr(scenario_name_);
let mut unk_delay_ = unk_delay_;
let mut play_enter_anim_ = play_enter_anim_;
        let success = sdk::natives::task_start_scenario_in_place(
            ped_,
scenario_name_.as_ref().unwrap(),
unk_delay_,
play_enter_anim_,
        );
        
        
        ResultOfTaskStartScenarioInPlace {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_drive_to_coord_longrange(&self, ped_: u32,
vehicle_: u32,
x_: f32,
y_: f32,
z_: f32,
speed_: f32,
drive_mode_: i32,
stop_range_: f32) -> ResultOfTaskVehicleDriveToCoordLongrange {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut speed_ = speed_;
let mut drive_mode_ = drive_mode_;
let mut stop_range_ = stop_range_;
        let success = sdk::natives::task_vehicle_drive_to_coord_longrange(
            ped_,
vehicle_,
x_,
y_,
z_,
speed_,
drive_mode_,
stop_range_,
        );
        
        
        ResultOfTaskVehicleDriveToCoordLongrange {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_boat_mission(&self, ped_driver_: u32,
vehicle_: u32,
target_vehicle_: u32,
target_ped_: u32,
x_: f32,
y_: f32,
z_: f32,
mission_: i32,
max_speed_: f32,
driving_style_: i32,
target_reached_: f32,
boat_flags_: i32) -> ResultOfTaskBoatMission {
    unsafe {
        let mut ped_driver_ = ped_driver_;
let mut vehicle_ = vehicle_;
let mut target_vehicle_ = target_vehicle_;
let mut target_ped_ = target_ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut mission_ = mission_;
let mut max_speed_ = max_speed_;
let mut driving_style_ = driving_style_;
let mut target_reached_ = target_reached_;
let mut boat_flags_ = boat_flags_;
        let success = sdk::natives::task_boat_mission(
            ped_driver_,
vehicle_,
target_vehicle_,
target_ped_,
x_,
y_,
z_,
mission_,
max_speed_,
driving_style_,
target_reached_,
boat_flags_,
        );
        
        
        ResultOfTaskBoatMission {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_follow_nav_mesh_to_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
move_blend_ratio_: f32,
time_: i32,
target_radius_: f32,
flags_: i32,
target_heading_: f32) -> ResultOfTaskFollowNavMeshToCoord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut move_blend_ratio_ = move_blend_ratio_;
let mut time_ = time_;
let mut target_radius_ = target_radius_;
let mut flags_ = flags_;
let mut target_heading_ = target_heading_;
        let success = sdk::natives::task_follow_nav_mesh_to_coord(
            ped_,
x_,
y_,
z_,
move_blend_ratio_,
time_,
target_radius_,
flags_,
target_heading_,
        );
        
        
        ResultOfTaskFollowNavMeshToCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_secondary_task(&self, ped_: u32) -> ResultOfClearPedSecondaryTask {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_secondary_task(
            ped_,
        );
        
        
        ResultOfClearPedSecondaryTask {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_follow_nav_mesh_to_coord_advanced(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
move_blend_ratio_: f32,
time_: i32,
target_radius_: f32,
flags_: i32,
slide_to_coord_heading_: f32,
max_slope_navigable_: f32,
clamp_max_search_distance_: f32,
target_heading_: f32) -> ResultOfTaskFollowNavMeshToCoordAdvanced {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut move_blend_ratio_ = move_blend_ratio_;
let mut time_ = time_;
let mut target_radius_ = target_radius_;
let mut flags_ = flags_;
let mut slide_to_coord_heading_ = slide_to_coord_heading_;
let mut max_slope_navigable_ = max_slope_navigable_;
let mut clamp_max_search_distance_ = clamp_max_search_distance_;
let mut target_heading_ = target_heading_;
        let success = sdk::natives::task_follow_nav_mesh_to_coord_advanced(
            ped_,
x_,
y_,
z_,
move_blend_ratio_,
time_,
target_radius_,
flags_,
slide_to_coord_heading_,
max_slope_navigable_,
clamp_max_search_distance_,
target_heading_,
        );
        
        
        ResultOfTaskFollowNavMeshToCoordAdvanced {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_goto_navmesh(&self, ped_: u32,
vehicle_: u32,
x_: f32,
y_: f32,
z_: f32,
speed_: f32,
behavior_flag_: i32,
stopping_range_: f32) -> ResultOfTaskVehicleGotoNavmesh {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut speed_ = speed_;
let mut behavior_flag_ = behavior_flag_;
let mut stopping_range_ = stopping_range_;
        let success = sdk::natives::task_vehicle_goto_navmesh(
            ped_,
vehicle_,
x_,
y_,
z_,
speed_,
behavior_flag_,
stopping_range_,
        );
        
        
        ResultOfTaskVehicleGotoNavmesh {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_agitated_action_confront_response(&self, ped_: u32,
ped2_: u32) -> ResultOfTaskAgitatedActionConfrontResponse {
    unsafe {
        let mut ped_ = ped_;
let mut ped2_ = ped2_;
        let success = sdk::natives::task_agitated_action_confront_response(
            ped_,
ped2_,
        );
        
        
        ResultOfTaskAgitatedActionConfrontResponse {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_put_ped_directly_into_melee(&self, ped_: u32,
melee_target_: u32,
blend_in_duration_: f32,
time_in_melee_: f32,
strafe_phase_sync_: f32,
ai_combat_flags_: i32) -> ResultOfTaskPutPedDirectlyIntoMelee {
    unsafe {
        let mut ped_ = ped_;
let mut melee_target_ = melee_target_;
let mut blend_in_duration_ = blend_in_duration_;
let mut time_in_melee_ = time_in_melee_;
let mut strafe_phase_sync_ = strafe_phase_sync_;
let mut ai_combat_flags_ = ai_combat_flags_;
        let success = sdk::natives::task_put_ped_directly_into_melee(
            ped_,
melee_target_,
blend_in_duration_,
time_in_melee_,
strafe_phase_sync_,
ai_combat_flags_,
        );
        
        
        ResultOfTaskPutPedDirectlyIntoMelee {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_go_to_coord_any_means_extra_params(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
move_blend_ratio_: f32,
vehicle_: u32,
use_long_range_vehicle_pathing_: bool,
driving_flags_: i32,
max_range_to_shoot_targets_: f32,
extra_veh_to_target_dist_to_prefer_vehicle_: f32,
drive_straight_line_distance_: f32,
extra_flags_: i32,
warp_timer_m_s_: f32) -> ResultOfTaskGoToCoordAnyMeansExtraParams {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut move_blend_ratio_ = move_blend_ratio_;
let mut vehicle_ = vehicle_;
let mut use_long_range_vehicle_pathing_ = use_long_range_vehicle_pathing_;
let mut driving_flags_ = driving_flags_;
let mut max_range_to_shoot_targets_ = max_range_to_shoot_targets_;
let mut extra_veh_to_target_dist_to_prefer_vehicle_ = extra_veh_to_target_dist_to_prefer_vehicle_;
let mut drive_straight_line_distance_ = drive_straight_line_distance_;
let mut extra_flags_ = extra_flags_;
let mut warp_timer_m_s_ = warp_timer_m_s_;
        let success = sdk::natives::task_go_to_coord_any_means_extra_params(
            ped_,
x_,
y_,
z_,
move_blend_ratio_,
vehicle_,
use_long_range_vehicle_pathing_,
driving_flags_,
max_range_to_shoot_targets_,
extra_veh_to_target_dist_to_prefer_vehicle_,
drive_straight_line_distance_,
extra_flags_,
warp_timer_m_s_,
        );
        
        
        ResultOfTaskGoToCoordAnyMeansExtraParams {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_turn_ped_to_face_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
duration_: i32) -> ResultOfTaskTurnPedToFaceCoord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut duration_ = duration_;
        let success = sdk::natives::task_turn_ped_to_face_coord(
            ped_,
x_,
y_,
z_,
duration_,
        );
        
        
        ResultOfTaskTurnPedToFaceCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_heli_protect(&self, pilot_: u32,
vehicle_: u32,
entity_to_follow_: u32,
target_speed_: f32,
driving_flags_: i32,
radius_: f32,
altitude_: i32,
heli_flags_: i32) -> ResultOfTaskVehicleHeliProtect {
    unsafe {
        let mut pilot_ = pilot_;
let mut vehicle_ = vehicle_;
let mut entity_to_follow_ = entity_to_follow_;
let mut target_speed_ = target_speed_;
let mut driving_flags_ = driving_flags_;
let mut radius_ = radius_;
let mut altitude_ = altitude_;
let mut heli_flags_ = heli_flags_;
        let success = sdk::natives::task_vehicle_heli_protect(
            pilot_,
vehicle_,
entity_to_follow_,
target_speed_,
driving_flags_,
radius_,
altitude_,
heli_flags_,
        );
        
        
        ResultOfTaskVehicleHeliProtect {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_extend_route(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfTaskExtendRoute {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::task_extend_route(
            x_,
y_,
z_,
        );
        
        
        ResultOfTaskExtendRoute {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_desired_move_blend_ratio(&self, ped_: u32,
new_move_blend_ratio_: f32) -> ResultOfSetPedDesiredMoveBlendRatio {
    unsafe {
        let mut ped_ = ped_;
let mut new_move_blend_ratio_ = new_move_blend_ratio_;
        let success = sdk::natives::set_ped_desired_move_blend_ratio(
            ped_,
new_move_blend_ratio_,
        );
        
        
        ResultOfSetPedDesiredMoveBlendRatio {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_phone_gesture_anim_total_time(&self, ped_: u32) -> ResultOfGetPhoneGestureAnimTotalTime {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_phone_gesture_anim_total_time(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPhoneGestureAnimTotalTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_specific_cover_blocking_areas(&self, start_x_: f32,
start_y_: f32,
start_z_: f32,
end_x_: f32,
end_y_: f32,
end_z_: f32,
block_objects_: bool,
block_vehicles_: bool,
block_map_: bool,
block_player_: bool) -> ResultOfRemoveSpecificCoverBlockingAreas {
    unsafe {
        let mut start_x_ = start_x_;
let mut start_y_ = start_y_;
let mut start_z_ = start_z_;
let mut end_x_ = end_x_;
let mut end_y_ = end_y_;
let mut end_z_ = end_z_;
let mut block_objects_ = block_objects_;
let mut block_vehicles_ = block_vehicles_;
let mut block_map_ = block_map_;
let mut block_player_ = block_player_;
        let success = sdk::natives::remove_specific_cover_blocking_areas(
            start_x_,
start_y_,
start_z_,
end_x_,
end_y_,
end_z_,
block_objects_,
block_vehicles_,
block_map_,
block_player_,
        );
        
        
        ResultOfRemoveSpecificCoverBlockingAreas {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_sweep_aim_entity(&self, ped_: u32,
anim_dict_: Option<String>,
low_anim_name_: Option<String>,
med_anim_name_: Option<String>,
hi_anim_name_: Option<String>,
runtime_: i32,
target_entity_: u32,
turn_rate_: f32,
blend_in_duration_: f32) -> ResultOfTaskSweepAimEntity {
    unsafe {
        let mut ped_ = ped_;
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut low_anim_name_ = sdk_helpers::create_c_string_ptr(low_anim_name_);
let mut med_anim_name_ = sdk_helpers::create_c_string_ptr(med_anim_name_);
let mut hi_anim_name_ = sdk_helpers::create_c_string_ptr(hi_anim_name_);
let mut runtime_ = runtime_;
let mut target_entity_ = target_entity_;
let mut turn_rate_ = turn_rate_;
let mut blend_in_duration_ = blend_in_duration_;
        let success = sdk::natives::task_sweep_aim_entity(
            ped_,
anim_dict_.as_ref().unwrap(),
low_anim_name_.as_ref().unwrap(),
med_anim_name_.as_ref().unwrap(),
hi_anim_name_.as_ref().unwrap(),
runtime_,
target_entity_,
turn_rate_,
blend_in_duration_,
        );
        
        
        ResultOfTaskSweepAimEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_anim_weight(&self, entity_: u32,
weight_: f32,
priority_: i32,
index_: i32,
secondary_: bool) -> ResultOfSetAnimWeight {
    unsafe {
        let mut entity_ = entity_;
let mut weight_ = weight_;
let mut priority_ = priority_;
let mut index_ = index_;
let mut secondary_ = secondary_;
        let success = sdk::natives::set_anim_weight(
            entity_,
weight_,
priority_,
index_,
secondary_,
        );
        
        
        ResultOfSetAnimWeight {
            success,
            ret: (),
            
        }
    }
}

    fn native_waypoint_playback_start_aiming_at_ped(&self, ped_: u32,
target_: u32,
p2_: bool) -> ResultOfWaypointPlaybackStartAimingAtPed {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
let mut p2_ = p2_;
        let success = sdk::natives::waypoint_playback_start_aiming_at_ped(
            ped_,
target_,
p2_,
        );
        
        
        ResultOfWaypointPlaybackStartAimingAtPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_smart_flee_ped(&self, ped_: u32,
flee_target_: u32,
safe_distance_: f32,
flee_time_: i32,
prefer_pavements_: bool,
update_to_nearest_hated_ped_: bool) -> ResultOfTaskSmartFleePed {
    unsafe {
        let mut ped_ = ped_;
let mut flee_target_ = flee_target_;
let mut safe_distance_ = safe_distance_;
let mut flee_time_ = flee_time_;
let mut prefer_pavements_ = prefer_pavements_;
let mut update_to_nearest_hated_ped_ = update_to_nearest_hated_ped_;
        let success = sdk::natives::task_smart_flee_ped(
            ped_,
flee_target_,
safe_distance_,
flee_time_,
prefer_pavements_,
update_to_nearest_hated_ped_,
        );
        
        
        ResultOfTaskSmartFleePed {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_patrol_route_link(&self, node_id1_: i32,
node_id2_: i32) -> ResultOfAddPatrolRouteLink {
    unsafe {
        let mut node_id1_ = node_id1_;
let mut node_id2_ = node_id2_;
        let success = sdk::natives::add_patrol_route_link(
            node_id1_,
node_id2_,
        );
        
        
        ResultOfAddPatrolRouteLink {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_plane_mission(&self, pilot_: u32,
aircraft_: u32,
target_vehicle_: u32,
target_ped_: u32,
destination_x_: f32,
destination_y_: f32,
destination_z_: f32,
mission_flag_: i32,
angular_drag_: f32,
target_reached_: f32,
target_heading_: f32,
max_z_: f32,
min_z_: f32,
precise_: bool) -> ResultOfTaskPlaneMission {
    unsafe {
        let mut pilot_ = pilot_;
let mut aircraft_ = aircraft_;
let mut target_vehicle_ = target_vehicle_;
let mut target_ped_ = target_ped_;
let mut destination_x_ = destination_x_;
let mut destination_y_ = destination_y_;
let mut destination_z_ = destination_z_;
let mut mission_flag_ = mission_flag_;
let mut angular_drag_ = angular_drag_;
let mut target_reached_ = target_reached_;
let mut target_heading_ = target_heading_;
let mut max_z_ = max_z_;
let mut min_z_ = min_z_;
let mut precise_ = precise_;
        let success = sdk::natives::task_plane_mission(
            pilot_,
aircraft_,
target_vehicle_,
target_ped_,
destination_x_,
destination_y_,
destination_z_,
mission_flag_,
angular_drag_,
target_reached_,
target_heading_,
max_z_,
min_z_,
precise_,
        );
        
        
        ResultOfTaskPlaneMission {
            success,
            ret: (),
            
        }
    }
}

    fn native_waypoint_playback_resume(&self, p0_: i32,
p1_: bool,
p2_: i32,
p3_: i32) -> ResultOfWaypointPlaybackResume {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::waypoint_playback_resume(
            p0_,
p1_,
p2_,
p3_,
        );
        
        
        ResultOfWaypointPlaybackResume {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_move_blend_ratio_sprinting(&self, ped_: u32) -> ResultOfIsMoveBlendRatioSprinting {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_move_blend_ratio_sprinting(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsMoveBlendRatioSprinting {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_waypoint_progress(&self, ped_: u32) -> ResultOfGetPedWaypointProgress {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_waypoint_progress(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedWaypointProgress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_use_nearest_scenario_to_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
distance_: f32,
duration_: i32) -> ResultOfTaskUseNearestScenarioToCoord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut distance_ = distance_;
let mut duration_ = duration_;
        let success = sdk::natives::task_use_nearest_scenario_to_coord(
            ped_,
x_,
y_,
z_,
distance_,
duration_,
        );
        
        
        ResultOfTaskUseNearestScenarioToCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_scripted_cover_area(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOfAddScriptedCoverArea {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::add_scripted_cover_area(
            x_,
y_,
z_,
radius_,
        );
        
        
        ResultOfAddScriptedCoverArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_ped_has_use_scenario_task(&self, ped_: u32) -> ResultOfPedHasUseScenarioTask {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::ped_has_use_scenario_task(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfPedHasUseScenarioTask {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_move_network_advanced_by_name_with_init_params(&self, ped_: u32,
network_: Option<String>,
initial_parameters_: i32,
x_: f32,
y_: f32,
z_: f32,
rot_x_: f32,
rot_y_: f32,
rot_z_: f32,
rot_order_: i32,
blend_duration_: f32,
allow_override_clone_update_: bool,
dictionary_: Option<String>,
flags_: i32) -> ResultOfTaskMoveNetworkAdvancedByNameWithInitParams {
    unsafe {
        let mut ped_ = ped_;
let mut network_ = sdk_helpers::create_c_string_ptr(network_);
let mut initial_parameters_ = initial_parameters_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
let mut rot_order_ = rot_order_;
let mut blend_duration_ = blend_duration_;
let mut allow_override_clone_update_ = allow_override_clone_update_;
let mut dictionary_ = sdk_helpers::create_c_string_ptr(dictionary_);
let mut flags_ = flags_;
        let success = sdk::natives::task_move_network_advanced_by_name_with_init_params(
            &mut initial_parameters_,
ped_,
network_.as_ref().unwrap(),
x_,
y_,
z_,
rot_x_,
rot_y_,
rot_z_,
rot_order_,
blend_duration_,
allow_override_clone_update_,
dictionary_.as_ref().unwrap(),
flags_,
        );
        let initial_parameters_ = initial_parameters_;
        
        ResultOfTaskMoveNetworkAdvancedByNameWithInitParams {
            success,
            ret: (),
            initial_parameters_
        }
    }
}

    fn native_is_ped_getting_up(&self, ped_: u32) -> ResultOfIsPedGettingUp {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_getting_up(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedGettingUp {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_combat_hated_targets_around_ped_timed(&self, ped_: u32,
radius_: f32,
time_: i32,
combat_flags_: i32) -> ResultOfTaskCombatHatedTargetsAroundPedTimed {
    unsafe {
        let mut ped_ = ped_;
let mut radius_ = radius_;
let mut time_ = time_;
let mut combat_flags_ = combat_flags_;
        let success = sdk::natives::task_combat_hated_targets_around_ped_timed(
            ped_,
radius_,
time_,
combat_flags_,
        );
        
        
        ResultOfTaskCombatHatedTargetsAroundPedTimed {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_plane_chase(&self, pilot_: u32,
entity_to_follow_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfTaskPlaneChase {
    unsafe {
        let mut pilot_ = pilot_;
let mut entity_to_follow_ = entity_to_follow_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::task_plane_chase(
            pilot_,
entity_to_follow_,
x_,
y_,
z_,
        );
        
        
        ResultOfTaskPlaneChase {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_move_network_by_name(&self, ped_: u32,
task_: Option<String>,
multiplier_: f32,
allow_override_clone_update_: bool,
anim_dict_: Option<String>,
flags_: i32) -> ResultOfTaskMoveNetworkByName {
    unsafe {
        let mut ped_ = ped_;
let mut task_ = sdk_helpers::create_c_string_ptr(task_);
let mut multiplier_ = multiplier_;
let mut allow_override_clone_update_ = allow_override_clone_update_;
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut flags_ = flags_;
        let success = sdk::natives::task_move_network_by_name(
            ped_,
task_.as_ref().unwrap(),
multiplier_,
allow_override_clone_update_,
anim_dict_.as_ref().unwrap(),
flags_,
        );
        
        
        ResultOfTaskMoveNetworkByName {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_drive_by(&self, driver_ped_: u32,
target_ped_: u32,
target_vehicle_: u32,
target_x_: f32,
target_y_: f32,
target_z_: f32,
distance_to_shoot_: f32,
ped_accuracy_: i32,
push_underneath_driving_task_if_driving_: bool,
firing_pattern_: u32) -> ResultOfTaskDriveBy {
    unsafe {
        let mut driver_ped_ = driver_ped_;
let mut target_ped_ = target_ped_;
let mut target_vehicle_ = target_vehicle_;
let mut target_x_ = target_x_;
let mut target_y_ = target_y_;
let mut target_z_ = target_z_;
let mut distance_to_shoot_ = distance_to_shoot_;
let mut ped_accuracy_ = ped_accuracy_;
let mut push_underneath_driving_task_if_driving_ = push_underneath_driving_task_if_driving_;
let mut firing_pattern_ = firing_pattern_;
        let success = sdk::natives::task_drive_by(
            driver_ped_,
target_ped_,
target_vehicle_,
target_x_,
target_y_,
target_z_,
distance_to_shoot_,
ped_accuracy_,
push_underneath_driving_task_if_driving_,
firing_pattern_,
        );
        
        
        ResultOfTaskDriveBy {
            success,
            ret: (),
            
        }
    }
}

    fn native_waypoint_recording_get_coord(&self, name_: Option<String>,
point_: i32,
coord_: Option<shared::Vector3>) -> ResultOfWaypointRecordingGetCoord {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut point_ = point_;
let mut coord_ = sdk_helpers::create_vector3_ptr(coord_);
        let success = sdk::natives::waypoint_recording_get_coord(
            &mut native_return,
coord_.pin_mut(),
name_.as_ref().unwrap(),
point_,
        );
        let native_return = native_return;
let coord_ = sdk_helpers::read_cpp_vector3(coord_);
        
        ResultOfWaypointRecordingGetCoord {
            success,
            ret: native_return,
            coord_
        }
    }
}

    fn native_task_follow_to_offset_of_entity(&self, ped_: u32,
entity_: u32,
offset_x_: f32,
offset_y_: f32,
offset_z_: f32,
movement_speed_: f32,
timeout_: i32,
stopping_range_: f32,
persist_following_: bool) -> ResultOfTaskFollowToOffsetOfEntity {
    unsafe {
        let mut ped_ = ped_;
let mut entity_ = entity_;
let mut offset_x_ = offset_x_;
let mut offset_y_ = offset_y_;
let mut offset_z_ = offset_z_;
let mut movement_speed_ = movement_speed_;
let mut timeout_ = timeout_;
let mut stopping_range_ = stopping_range_;
let mut persist_following_ = persist_following_;
        let success = sdk::natives::task_follow_to_offset_of_entity(
            ped_,
entity_,
offset_x_,
offset_y_,
offset_z_,
movement_speed_,
timeout_,
stopping_range_,
persist_following_,
        );
        
        
        ResultOfTaskFollowToOffsetOfEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_task_move_network_ready_for_transition(&self, ped_: u32) -> ResultOfIsTaskMoveNetworkReadyForTransition {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_task_move_network_ready_for_transition(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsTaskMoveNetworkReadyForTransition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_vehicle_follow_waypoint_recording(&self, ped_: u32,
vehicle_: u32,
w_p_recording_: Option<String>,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: f32,
p8_: bool,
p9_: f32) -> ResultOfTaskVehicleFollowWaypointRecording {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut w_p_recording_ = sdk_helpers::create_c_string_ptr(w_p_recording_);
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::task_vehicle_follow_waypoint_recording(
            ped_,
vehicle_,
w_p_recording_.as_ref().unwrap(),
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
p9_,
        );
        
        
        ResultOfTaskVehicleFollowWaypointRecording {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_goto_entity_offset_xy(&self, ped_: u32,
entity_: u32,
duration_: i32,
target_radius_: f32,
offset_x_: f32,
offset_y_: f32,
move_blend_ratio_: f32,
goto_entity_offset_flags_: i32) -> ResultOfTaskGotoEntityOffsetXy {
    unsafe {
        let mut ped_ = ped_;
let mut entity_ = entity_;
let mut duration_ = duration_;
let mut target_radius_ = target_radius_;
let mut offset_x_ = offset_x_;
let mut offset_y_ = offset_y_;
let mut move_blend_ratio_ = move_blend_ratio_;
let mut goto_entity_offset_flags_ = goto_entity_offset_flags_;
        let success = sdk::natives::task_goto_entity_offset_xy(
            ped_,
entity_,
duration_,
target_radius_,
offset_x_,
offset_y_,
move_blend_ratio_,
goto_entity_offset_flags_,
        );
        
        
        ResultOfTaskGotoEntityOffsetXy {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_move_blend_ratio_still(&self, ped_: u32) -> ResultOfIsMoveBlendRatioStill {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_move_blend_ratio_still(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsMoveBlendRatioStill {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_assisted_movement_remove_route(&self, route_: Option<String>) -> ResultOfAssistedMovementRemoveRoute {
    unsafe {
        let mut route_ = sdk_helpers::create_c_string_ptr(route_);
        let success = sdk::natives::assisted_movement_remove_route(
            route_.as_ref().unwrap(),
        );
        
        
        ResultOfAssistedMovementRemoveRoute {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_scenario_group_enabled(&self, scenario_group_: Option<String>) -> ResultOfIsScenarioGroupEnabled {
    unsafe {
        let mut native_return = Default::default();
let mut scenario_group_ = sdk_helpers::create_c_string_ptr(scenario_group_);
        let success = sdk::natives::is_scenario_group_enabled(
            &mut native_return,
scenario_group_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfIsScenarioGroupEnabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_task_move_network_signal_local_float(&self, ped_: u32,
signal_name_: Option<String>,
value_: f32) -> ResultOfSetTaskMoveNetworkSignalLocalFloat {
    unsafe {
        let mut ped_ = ped_;
let mut signal_name_ = sdk_helpers::create_c_string_ptr(signal_name_);
let mut value_ = value_;
        let success = sdk::natives::set_task_move_network_signal_local_float(
            ped_,
signal_name_.as_ref().unwrap(),
value_,
        );
        
        
        ResultOfSetTaskMoveNetworkSignalLocalFloat {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_sequence_task(&self, task_sequence_id_: i32) -> ResultOfClearSequenceTask {
    unsafe {
        let mut task_sequence_id_ = task_sequence_id_;
        let success = sdk::natives::clear_sequence_task(
            &mut task_sequence_id_,
        );
        let task_sequence_id_ = task_sequence_id_;
        
        ResultOfClearSequenceTask {
            success,
            ret: (),
            task_sequence_id_
        }
    }
}

    fn native_set_ped_path_prefer_to_avoid_water(&self, ped_: u32,
avoid_water_: bool) -> ResultOfSetPedPathPreferToAvoidWater {
    unsafe {
        let mut ped_ = ped_;
let mut avoid_water_ = avoid_water_;
        let success = sdk::natives::set_ped_path_prefer_to_avoid_water(
            ped_,
avoid_water_,
        );
        
        
        ResultOfSetPedPathPreferToAvoidWater {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_seek_cover_to_coords(&self, ped_: u32,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
timeout_: i32,
short_route_: bool) -> ResultOfTaskSeekCoverToCoords {
    unsafe {
        let mut ped_ = ped_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut timeout_ = timeout_;
let mut short_route_ = short_route_;
        let success = sdk::natives::task_seek_cover_to_coords(
            ped_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
timeout_,
short_route_,
        );
        
        
        ResultOfTaskSeekCoverToCoords {
            success,
            ret: (),
            
        }
    }
}

    fn native_close_sequence_task(&self, task_sequence_id_: i32) -> ResultOfCloseSequenceTask {
    unsafe {
        let mut task_sequence_id_ = task_sequence_id_;
        let success = sdk::natives::close_sequence_task(
            task_sequence_id_,
        );
        
        
        ResultOfCloseSequenceTask {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_scenario_type_enabled(&self, scenario_type_: Option<String>) -> ResultOfIsScenarioTypeEnabled {
    unsafe {
        let mut native_return = Default::default();
let mut scenario_type_ = sdk_helpers::create_c_string_ptr(scenario_type_);
        let success = sdk::natives::is_scenario_type_enabled(
            &mut native_return,
scenario_type_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfIsScenarioTypeEnabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_clip_set_for_scripted_gun_task(&self, gun_task_type_: i32) -> ResultOfGetClipSetForScriptedGunTask {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut gun_task_type_ = gun_task_type_;
        let success = sdk::natives::get_clip_set_for_scripted_gun_task(
            native_return.pin_mut(),
gun_task_type_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetClipSetForScriptedGunTask {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_vehicle_chase(&self, driver_: u32,
target_ent_: u32) -> ResultOfTaskVehicleChase {
    unsafe {
        let mut driver_ = driver_;
let mut target_ent_ = target_ent_;
        let success = sdk::natives::task_vehicle_chase(
            driver_,
target_ent_,
        );
        
        
        ResultOfTaskVehicleChase {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_move_network_by_name_with_init_params(&self, ped_: u32,
network_: Option<String>,
initial_parameters_: i32,
blend_duration_: f32,
allow_override_clone_update_: bool,
anim_dict_: Option<String>,
flags_: i32) -> ResultOfTaskMoveNetworkByNameWithInitParams {
    unsafe {
        let mut ped_ = ped_;
let mut network_ = sdk_helpers::create_c_string_ptr(network_);
let mut initial_parameters_ = initial_parameters_;
let mut blend_duration_ = blend_duration_;
let mut allow_override_clone_update_ = allow_override_clone_update_;
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut flags_ = flags_;
        let success = sdk::natives::task_move_network_by_name_with_init_params(
            &mut initial_parameters_,
ped_,
network_.as_ref().unwrap(),
blend_duration_,
allow_override_clone_update_,
anim_dict_.as_ref().unwrap(),
flags_,
        );
        let initial_parameters_ = initial_parameters_;
        
        ResultOfTaskMoveNetworkByNameWithInitParams {
            success,
            ret: (),
            initial_parameters_
        }
    }
}

    fn native_is_ped_running_arrest_task(&self, ped_: u32) -> ResultOfIsPedRunningArrestTask {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_running_arrest_task(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedRunningArrestTask {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_controlled_vehicle_unable_to_get_to_road(&self, ped_: u32) -> ResultOfIsControlledVehicleUnableToGetToRoad {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_controlled_vehicle_unable_to_get_to_road(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsControlledVehicleUnableToGetToRoad {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_cower(&self, ped_: u32,
duration_: i32) -> ResultOfTaskCower {
    unsafe {
        let mut ped_ = ped_;
let mut duration_ = duration_;
        let success = sdk::natives::task_cower(
            ped_,
duration_,
        );
        
        
        ResultOfTaskCower {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_stop_phone_gesture_animation(&self, ped_: u32,
blend_out_override_: f32) -> ResultOfTaskStopPhoneGestureAnimation {
    unsafe {
        let mut ped_ = ped_;
let mut blend_out_override_ = blend_out_override_;
        let success = sdk::natives::task_stop_phone_gesture_animation(
            ped_,
blend_out_override_,
        );
        
        
        ResultOfTaskStopPhoneGestureAnimation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_drive_task_max_cruise_speed(&self, ped_: u32,
speed_: f32) -> ResultOfSetDriveTaskMaxCruiseSpeed {
    unsafe {
        let mut ped_ = ped_;
let mut speed_ = speed_;
        let success = sdk::natives::set_drive_task_max_cruise_speed(
            ped_,
speed_,
        );
        
        
        ResultOfSetDriveTaskMaxCruiseSpeed {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_waypoint_target_point(&self, vehicle_: u32) -> ResultOfGetVehicleWaypointTargetPoint {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_waypoint_target_point(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleWaypointTargetPoint {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_put_ped_directly_into_cover(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
time_: i32,
allow_peeking_and_firing_: bool,
blend_in_duration_: f32,
force_initial_facing_direction_: bool,
force_face_left_: bool,
identifier_: i32,
do_entry_: bool) -> ResultOfTaskPutPedDirectlyIntoCover {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut time_ = time_;
let mut allow_peeking_and_firing_ = allow_peeking_and_firing_;
let mut blend_in_duration_ = blend_in_duration_;
let mut force_initial_facing_direction_ = force_initial_facing_direction_;
let mut force_face_left_ = force_face_left_;
let mut identifier_ = identifier_;
let mut do_entry_ = do_entry_;
        let success = sdk::natives::task_put_ped_directly_into_cover(
            ped_,
x_,
y_,
z_,
time_,
allow_peeking_and_firing_,
blend_in_duration_,
force_initial_facing_direction_,
force_face_left_,
identifier_,
do_entry_,
        );
        
        
        ResultOfTaskPutPedDirectlyIntoCover {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_exclusive_scenario_group(&self, ) -> ResultOfResetExclusiveScenarioGroup {
    unsafe {
        
        let success = sdk::natives::reset_exclusive_scenario_group(
            
        );
        
        
        ResultOfResetExclusiveScenarioGroup {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_path_avoid_fire(&self, ped_: u32,
avoid_fire_: bool) -> ResultOfSetPedPathAvoidFire {
    unsafe {
        let mut ped_ = ped_;
let mut avoid_fire_ = avoid_fire_;
        let success = sdk::natives::set_ped_path_avoid_fire(
            ped_,
avoid_fire_,
        );
        
        
        ResultOfSetPedPathAvoidFire {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_aim_at_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfTaskVehicleAimAtCoord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::task_vehicle_aim_at_coord(
            ped_,
x_,
y_,
z_,
        );
        
        
        ResultOfTaskVehicleAimAtCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_task_move_network_signal_float(&self, ped_: u32,
signal_name_: Option<String>) -> ResultOfGetTaskMoveNetworkSignalFloat {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut signal_name_ = sdk_helpers::create_c_string_ptr(signal_name_);
        let success = sdk::natives::get_task_move_network_signal_float(
            &mut native_return,
ped_,
signal_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfGetTaskMoveNetworkSignalFloat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_shocking_event_react(&self, ped_: u32,
event_handle_: i32) -> ResultOfTaskShockingEventReact {
    unsafe {
        let mut ped_ = ped_;
let mut event_handle_ = event_handle_;
        let success = sdk::natives::task_shocking_event_react(
            ped_,
event_handle_,
        );
        
        
        ResultOfTaskShockingEventReact {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_cover_blocking_area(&self, start_x_: f32,
start_y_: f32,
start_z_: f32,
end_x_: f32,
end_y_: f32,
end_z_: f32,
block_objects_: bool,
block_vehicles_: bool,
block_map_: bool,
block_player_: bool) -> ResultOfAddCoverBlockingArea {
    unsafe {
        let mut start_x_ = start_x_;
let mut start_y_ = start_y_;
let mut start_z_ = start_z_;
let mut end_x_ = end_x_;
let mut end_y_ = end_y_;
let mut end_z_ = end_z_;
let mut block_objects_ = block_objects_;
let mut block_vehicles_ = block_vehicles_;
let mut block_map_ = block_map_;
let mut block_player_ = block_player_;
        let success = sdk::natives::add_cover_blocking_area(
            start_x_,
start_y_,
start_z_,
end_x_,
end_y_,
end_z_,
block_objects_,
block_vehicles_,
block_map_,
block_player_,
        );
        
        
        ResultOfAddCoverBlockingArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_shoot_at_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
duration_: i32,
firing_pattern_: u32) -> ResultOfTaskShootAtCoord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut duration_ = duration_;
let mut firing_pattern_ = firing_pattern_;
        let success = sdk::natives::task_shoot_at_coord(
            ped_,
x_,
y_,
z_,
duration_,
firing_pattern_,
        );
        
        
        ResultOfTaskShootAtCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_phone_gesture_anim_current_time(&self, ped_: u32) -> ResultOfGetPhoneGestureAnimCurrentTime {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_phone_gesture_anim_current_time(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPhoneGestureAnimCurrentTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_waypoint_playback_stop_aiming_or_shooting(&self, ped_: u32) -> ResultOfWaypointPlaybackStopAimingOrShooting {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::waypoint_playback_stop_aiming_or_shooting(
            ped_,
        );
        
        
        ResultOfWaypointPlaybackStopAimingOrShooting {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_drive_wander(&self, ped_: u32,
vehicle_: u32,
speed_: f32,
driving_style_: i32) -> ResultOfTaskVehicleDriveWander {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut speed_ = speed_;
let mut driving_style_ = driving_style_;
        let success = sdk::natives::task_vehicle_drive_wander(
            ped_,
vehicle_,
speed_,
driving_style_,
        );
        
        
        ResultOfTaskVehicleDriveWander {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_guard_current_position(&self, ped_: u32,
max_patrol_proximity_: f32,
defensive_area_radius_: f32,
set_defensive_area_: bool) -> ResultOfTaskGuardCurrentPosition {
    unsafe {
        let mut ped_ = ped_;
let mut max_patrol_proximity_ = max_patrol_proximity_;
let mut defensive_area_radius_ = defensive_area_radius_;
let mut set_defensive_area_ = set_defensive_area_;
        let success = sdk::natives::task_guard_current_position(
            ped_,
max_patrol_proximity_,
defensive_area_radius_,
set_defensive_area_,
        );
        
        
        ResultOfTaskGuardCurrentPosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_combat_hated_targets_in_area(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32,
combat_flags_: i32) -> ResultOfTaskCombatHatedTargetsInArea {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut combat_flags_ = combat_flags_;
        let success = sdk::natives::task_combat_hated_targets_in_area(
            ped_,
x_,
y_,
z_,
radius_,
combat_flags_,
        );
        
        
        ResultOfTaskCombatHatedTargetsInArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_force_motion_state(&self, ped_: u32,
state_: u32,
force_restart_: bool) -> ResultOfTaskForceMotionState {
    unsafe {
        let mut ped_ = ped_;
let mut state_ = state_;
let mut force_restart_ = force_restart_;
        let success = sdk::natives::task_force_motion_state(
            ped_,
state_,
force_restart_,
        );
        
        
        ResultOfTaskForceMotionState {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_leave_any_vehicle(&self, ped_: u32,
delay_time_: i32,
flags_: i32) -> ResultOfTaskLeaveAnyVehicle {
    unsafe {
        let mut ped_ = ped_;
let mut delay_time_ = delay_time_;
let mut flags_ = flags_;
        let success = sdk::natives::task_leave_any_vehicle(
            ped_,
delay_time_,
flags_,
        );
        
        
        ResultOfTaskLeaveAnyVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_shoot_at_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
fire_tolerance_: f32) -> ResultOfTaskVehicleShootAtCoord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut fire_tolerance_ = fire_tolerance_;
        let success = sdk::natives::task_vehicle_shoot_at_coord(
            ped_,
x_,
y_,
z_,
fire_tolerance_,
        );
        
        
        ResultOfTaskVehicleShootAtCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_patrol_task_info(&self, ped_: u32,
time_left_at_node_: i32,
node_id_: i32) -> ResultOfGetPatrolTaskInfo {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut time_left_at_node_ = time_left_at_node_;
let mut node_id_ = node_id_;
        let success = sdk::natives::get_patrol_task_info(
            &mut native_return,
&mut time_left_at_node_,
&mut node_id_,
ped_,
        );
        let native_return = native_return;
let time_left_at_node_ = time_left_at_node_;
let node_id_ = node_id_;
        
        ResultOfGetPatrolTaskInfo {
            success,
            ret: native_return,
            time_left_at_node_,
node_id_
        }
    }
}

    fn native_waypoint_recording_get_num_points(&self, name_: Option<String>,
points_: i32) -> ResultOfWaypointRecordingGetNumPoints {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut points_ = points_;
        let success = sdk::natives::waypoint_recording_get_num_points(
            &mut native_return,
&mut points_,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
let points_ = points_;
        
        ResultOfWaypointRecordingGetNumPoints {
            success,
            ret: native_return,
            points_
        }
    }
}

    fn native_get_active_vehicle_mission_type(&self, vehicle_: u32) -> ResultOfGetActiveVehicleMissionType {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_active_vehicle_mission_type(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetActiveVehicleMissionType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_exclusive_scenario_group(&self, scenario_group_: Option<String>) -> ResultOfSetExclusiveScenarioGroup {
    unsafe {
        let mut scenario_group_ = sdk_helpers::create_c_string_ptr(scenario_group_);
        let success = sdk::natives::set_exclusive_scenario_group(
            scenario_group_.as_ref().unwrap(),
        );
        
        
        ResultOfSetExclusiveScenarioGroup {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_vehicle_crash_task(&self, vehicle_: u32) -> ResultOfClearVehicleCrashTask {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::clear_vehicle_crash_task(
            vehicle_,
        );
        
        
        ResultOfClearVehicleCrashTask {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_sprinting(&self, ped_: u32) -> ResultOfIsPedSprinting {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_sprinting(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedSprinting {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_sequence_to_repeat(&self, task_sequence_id_: i32,
repeat_: bool) -> ResultOfSetSequenceToRepeat {
    unsafe {
        let mut task_sequence_id_ = task_sequence_id_;
let mut repeat_ = repeat_;
        let success = sdk::natives::set_sequence_to_repeat(
            task_sequence_id_,
repeat_,
        );
        
        
        ResultOfSetSequenceToRepeat {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_use_nearest_scenario_to_coord_warp(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32,
time_to_leave_: i32) -> ResultOfTaskUseNearestScenarioToCoordWarp {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut time_to_leave_ = time_to_leave_;
        let success = sdk::natives::task_use_nearest_scenario_to_coord_warp(
            ped_,
x_,
y_,
z_,
radius_,
time_to_leave_,
        );
        
        
        ResultOfTaskUseNearestScenarioToCoordWarp {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_scripted_cover_point_coords(&self, coverpoint_: u32) -> ResultOfGetScriptedCoverPointCoords {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut coverpoint_ = coverpoint_;
        let success = sdk::natives::get_scripted_cover_point_coords(
            native_return.pin_mut(),
coverpoint_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetScriptedCoverPointCoords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_follow_point_route(&self, ped_: u32,
speed_: f32,
mode_: i32) -> ResultOfTaskFollowPointRoute {
    unsafe {
        let mut ped_ = ped_;
let mut speed_ = speed_;
let mut mode_ = mode_;
        let success = sdk::natives::task_follow_point_route(
            ped_,
speed_,
mode_,
        );
        
        
        ResultOfTaskFollowPointRoute {
            success,
            ret: (),
            
        }
    }
}

    fn native_use_waypoint_recording_as_assisted_movement_route(&self, name_: Option<String>,
p1_: bool,
p2_: f32,
p3_: f32) -> ResultOfUseWaypointRecordingAsAssistedMovementRoute {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::use_waypoint_recording_as_assisted_movement_route(
            name_.as_ref().unwrap(),
p1_,
p2_,
p3_,
        );
        
        
        ResultOfUseWaypointRecordingAsAssistedMovementRoute {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_ped_slide_to_coord_hdg_rate(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
heading_: f32,
speed_: f32,
heading_change_rate_: f32) -> ResultOfTaskPedSlideToCoordHdgRate {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut speed_ = speed_;
let mut heading_change_rate_ = heading_change_rate_;
        let success = sdk::natives::task_ped_slide_to_coord_hdg_rate(
            ped_,
x_,
y_,
z_,
heading_,
speed_,
heading_change_rate_,
        );
        
        
        ResultOfTaskPedSlideToCoordHdgRate {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_scenario_exist_in_area(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
must_be_free_: bool) -> ResultOfDoesScenarioExistInArea {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut must_be_free_ = must_be_free_;
        let success = sdk::natives::does_scenario_exist_in_area(
            &mut native_return,
x_,
y_,
z_,
radius_,
must_be_free_,
        );
        let native_return = native_return;
        
        ResultOfDoesScenarioExistInArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_perform_sequence(&self, ped_: u32,
task_sequence_id_: i32) -> ResultOfTaskPerformSequence {
    unsafe {
        let mut ped_ = ped_;
let mut task_sequence_id_ = task_sequence_id_;
        let success = sdk::natives::task_perform_sequence(
            ped_,
task_sequence_id_,
        );
        
        
        ResultOfTaskPerformSequence {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_turn_ped_to_face_entity(&self, ped_: u32,
entity_: u32,
duration_: i32) -> ResultOfTaskTurnPedToFaceEntity {
    unsafe {
        let mut ped_ = ped_;
let mut entity_ = entity_;
let mut duration_ = duration_;
        let success = sdk::natives::task_turn_ped_to_face_entity(
            ped_,
entity_,
duration_,
        );
        
        
        ResultOfTaskTurnPedToFaceEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_go_to_coord_any_means(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
move_blend_ratio_: f32,
vehicle_: u32,
use_long_range_vehicle_pathing_: bool,
driving_flags_: i32,
max_range_to_shoot_targets_: f32) -> ResultOfTaskGoToCoordAnyMeans {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut move_blend_ratio_ = move_blend_ratio_;
let mut vehicle_ = vehicle_;
let mut use_long_range_vehicle_pathing_ = use_long_range_vehicle_pathing_;
let mut driving_flags_ = driving_flags_;
let mut max_range_to_shoot_targets_ = max_range_to_shoot_targets_;
        let success = sdk::natives::task_go_to_coord_any_means(
            ped_,
x_,
y_,
z_,
move_blend_ratio_,
vehicle_,
use_long_range_vehicle_pathing_,
driving_flags_,
max_range_to_shoot_targets_,
        );
        
        
        ResultOfTaskGoToCoordAnyMeans {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_drive_task_cruise_speed(&self, driver_: u32,
cruise_speed_: f32) -> ResultOfSetDriveTaskCruiseSpeed {
    unsafe {
        let mut driver_ = driver_;
let mut cruise_speed_ = cruise_speed_;
        let success = sdk::natives::set_drive_task_cruise_speed(
            driver_,
cruise_speed_,
        );
        
        
        ResultOfSetDriveTaskCruiseSpeed {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_waypoint_playback_use_default_speed(&self, vehicle_: u32) -> ResultOfVehicleWaypointPlaybackUseDefaultSpeed {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::vehicle_waypoint_playback_use_default_speed(
            vehicle_,
        );
        
        
        ResultOfVehicleWaypointPlaybackUseDefaultSpeed {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_vehicle_subtask_attack_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfAddVehicleSubtaskAttackCoord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::add_vehicle_subtask_attack_coord(
            ped_,
x_,
y_,
z_,
        );
        
        
        ResultOfAddVehicleSubtaskAttackCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_use_mobile_phone_timed(&self, ped_: u32,
duration_: i32) -> ResultOfTaskUseMobilePhoneTimed {
    unsafe {
        let mut ped_ = ped_;
let mut duration_ = duration_;
        let success = sdk::natives::task_use_mobile_phone_timed(
            ped_,
duration_,
        );
        
        
        ResultOfTaskUseMobilePhoneTimed {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_sky_dive(&self, ped_: u32,
instant_: bool) -> ResultOfTaskSkyDive {
    unsafe {
        let mut ped_ = ped_;
let mut instant_ = instant_;
        let success = sdk::natives::task_sky_dive(
            ped_,
instant_,
        );
        
        
        ResultOfTaskSkyDive {
            success,
            ret: (),
            
        }
    }
}

    fn native_assisted_movement_is_route_loaded(&self, route_: Option<String>) -> ResultOfAssistedMovementIsRouteLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut route_ = sdk_helpers::create_c_string_ptr(route_);
        let success = sdk::natives::assisted_movement_is_route_loaded(
            &mut native_return,
route_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfAssistedMovementIsRouteLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_default_primary_task(&self, ped_: u32) -> ResultOfClearDefaultPrimaryTask {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_default_primary_task(
            ped_,
        );
        
        
        ResultOfClearDefaultPrimaryTask {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_go_straight_to_coord_relative_to_entity(&self, ped_: u32,
entity_: u32,
x_: f32,
y_: f32,
z_: f32,
move_blend_ratio_: f32,
time_: i32) -> ResultOfTaskGoStraightToCoordRelativeToEntity {
    unsafe {
        let mut ped_ = ped_;
let mut entity_ = entity_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut move_blend_ratio_ = move_blend_ratio_;
let mut time_ = time_;
        let success = sdk::natives::task_go_straight_to_coord_relative_to_entity(
            ped_,
entity_,
x_,
y_,
z_,
move_blend_ratio_,
time_,
        );
        
        
        ResultOfTaskGoStraightToCoordRelativeToEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_playing_base_clip_in_scenario(&self, ped_: u32) -> ResultOfIsPedPlayingBaseClipInScenario {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_playing_base_clip_in_scenario(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedPlayingBaseClipInScenario {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_reload_weapon(&self, ped_: u32,
draw_weapon_: bool) -> ResultOfTaskReloadWeapon {
    unsafe {
        let mut ped_ = ped_;
let mut draw_weapon_ = draw_weapon_;
        let success = sdk::natives::task_reload_weapon(
            ped_,
draw_weapon_,
        );
        
        
        ResultOfTaskReloadWeapon {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_navmesh_route_result(&self, ped_: u32) -> ResultOfGetNavmeshRouteResult {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_navmesh_route_result(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetNavmeshRouteResult {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_task_vehicle_chase_ideal_pursuit_distance(&self, ped_: u32,
distance_: f32) -> ResultOfSetTaskVehicleChaseIdealPursuitDistance {
    unsafe {
        let mut ped_ = ped_;
let mut distance_ = distance_;
        let success = sdk::natives::set_task_vehicle_chase_ideal_pursuit_distance(
            ped_,
distance_,
        );
        
        
        ResultOfSetTaskVehicleChaseIdealPursuitDistance {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_mission(&self, driver_: u32,
vehicle_: u32,
vehicle_target_: u32,
mission_type_: i32,
cruise_speed_: f32,
driving_style_: i32,
target_reached_: f32,
straight_line_distance_: f32,
drive_against_traffic_: bool) -> ResultOfTaskVehicleMission {
    unsafe {
        let mut driver_ = driver_;
let mut vehicle_ = vehicle_;
let mut vehicle_target_ = vehicle_target_;
let mut mission_type_ = mission_type_;
let mut cruise_speed_ = cruise_speed_;
let mut driving_style_ = driving_style_;
let mut target_reached_ = target_reached_;
let mut straight_line_distance_ = straight_line_distance_;
let mut drive_against_traffic_ = drive_against_traffic_;
        let success = sdk::natives::task_vehicle_mission(
            driver_,
vehicle_,
vehicle_target_,
mission_type_,
cruise_speed_,
driving_style_,
target_reached_,
straight_line_distance_,
drive_against_traffic_,
        );
        
        
        ResultOfTaskVehicleMission {
            success,
            ret: (),
            
        }
    }
}

    fn native_waypoint_playback_use_default_speed(&self, p0_: i32) -> ResultOfWaypointPlaybackUseDefaultSpeed {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::waypoint_playback_use_default_speed(
            p0_,
        );
        
        
        ResultOfWaypointPlaybackUseDefaultSpeed {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_aim_gun_at_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
time_: i32,
instant_blend_to_aim_: bool,
play_anim_intro_: bool) -> ResultOfTaskAimGunAtCoord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut time_ = time_;
let mut instant_blend_to_aim_ = instant_blend_to_aim_;
let mut play_anim_intro_ = play_anim_intro_;
        let success = sdk::natives::task_aim_gun_at_coord(
            ped_,
x_,
y_,
z_,
time_,
instant_blend_to_aim_,
play_anim_intro_,
        );
        
        
        ResultOfTaskAimGunAtCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_uncuff_ped(&self, ped_: u32) -> ResultOfUncuffPed {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::uncuff_ped(
            ped_,
        );
        
        
        ResultOfUncuffPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_wander_specific(&self, ped_: u32,
conditional_anim_group_str_: Option<String>,
conditional_anim_str_: Option<String>,
heading_: f32) -> ResultOfTaskWanderSpecific {
    unsafe {
        let mut ped_ = ped_;
let mut conditional_anim_group_str_ = sdk_helpers::create_c_string_ptr(conditional_anim_group_str_);
let mut conditional_anim_str_ = sdk_helpers::create_c_string_ptr(conditional_anim_str_);
let mut heading_ = heading_;
        let success = sdk::natives::task_wander_specific(
            ped_,
conditional_anim_group_str_.as_ref().unwrap(),
conditional_anim_str_.as_ref().unwrap(),
heading_,
        );
        
        
        ResultOfTaskWanderSpecific {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_look_at_entity(&self, ped_: u32,
look_at_: u32,
duration_: i32,
flags_: i32,
priority_: i32) -> ResultOfTaskLookAtEntity {
    unsafe {
        let mut ped_ = ped_;
let mut look_at_ = look_at_;
let mut duration_ = duration_;
let mut flags_ = flags_;
let mut priority_ = priority_;
        let success = sdk::natives::task_look_at_entity(
            ped_,
look_at_,
duration_,
flags_,
priority_,
        );
        
        
        ResultOfTaskLookAtEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_play_anim(&self, vehicle_: u32,
animation_set_: Option<String>,
animation_name_: Option<String>) -> ResultOfTaskVehiclePlayAnim {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut animation_set_ = sdk_helpers::create_c_string_ptr(animation_set_);
let mut animation_name_ = sdk_helpers::create_c_string_ptr(animation_name_);
        let success = sdk::natives::task_vehicle_play_anim(
            vehicle_,
animation_set_.as_ref().unwrap(),
animation_name_.as_ref().unwrap(),
        );
        
        
        ResultOfTaskVehiclePlayAnim {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_go_to_entity(&self, entity_: u32,
target_: u32,
duration_: i32,
distance_: f32,
move_blend_ratio_: f32,
slow_down_distance_: f32,
flags_: i32) -> ResultOfTaskGoToEntity {
    unsafe {
        let mut entity_ = entity_;
let mut target_ = target_;
let mut duration_ = duration_;
let mut distance_ = distance_;
let mut move_blend_ratio_ = move_blend_ratio_;
let mut slow_down_distance_ = slow_down_distance_;
let mut flags_ = flags_;
        let success = sdk::natives::task_go_to_entity(
            entity_,
target_,
duration_,
distance_,
move_blend_ratio_,
slow_down_distance_,
flags_,
        );
        
        
        ResultOfTaskGoToEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_global_min_bird_flight_height(&self, height_: f32) -> ResultOfSetGlobalMinBirdFlightHeight {
    unsafe {
        let mut height_ = height_;
        let success = sdk::natives::set_global_min_bird_flight_height(
            height_,
        );
        
        
        ResultOfSetGlobalMinBirdFlightHeight {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_warp_ped_directly_into_cover(&self, ped_: u32,
time_: i32,
allow_peeking_and_firing_: bool,
force_initial_facing_direction_: bool,
force_face_left_: bool,
identifier_: i32) -> ResultOfTaskWarpPedDirectlyIntoCover {
    unsafe {
        let mut ped_ = ped_;
let mut time_ = time_;
let mut allow_peeking_and_firing_ = allow_peeking_and_firing_;
let mut force_initial_facing_direction_ = force_initial_facing_direction_;
let mut force_face_left_ = force_face_left_;
let mut identifier_ = identifier_;
        let success = sdk::natives::task_warp_ped_directly_into_cover(
            ped_,
time_,
allow_peeking_and_firing_,
force_initial_facing_direction_,
force_face_left_,
identifier_,
        );
        
        
        ResultOfTaskWarpPedDirectlyIntoCover {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_look_at_coord(&self, entity_: u32,
x_: f32,
y_: f32,
z_: f32,
duration_: i32,
flags_: i32,
priority_: i32) -> ResultOfTaskLookAtCoord {
    unsafe {
        let mut entity_ = entity_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut duration_ = duration_;
let mut flags_ = flags_;
let mut priority_ = priority_;
        let success = sdk::natives::task_look_at_coord(
            entity_,
x_,
y_,
z_,
duration_,
flags_,
priority_,
        );
        
        
        ResultOfTaskLookAtCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_anim_looped(&self, entity_: u32,
looped_: bool,
priority_: i32,
secondary_: bool) -> ResultOfSetAnimLooped {
    unsafe {
        let mut entity_ = entity_;
let mut looped_ = looped_;
let mut priority_ = priority_;
let mut secondary_ = secondary_;
        let success = sdk::natives::set_anim_looped(
            entity_,
looped_,
priority_,
secondary_,
        );
        
        
        ResultOfSetAnimLooped {
            success,
            ret: (),
            
        }
    }
}

    fn native_waypoint_playback_get_is_paused(&self, p0_: i32) -> ResultOfWaypointPlaybackGetIsPaused {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::waypoint_playback_get_is_paused(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfWaypointPlaybackGetIsPaused {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_task_move_network_state(&self, ped_: u32) -> ResultOfGetTaskMoveNetworkState {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut ped_ = ped_;
        let success = sdk::natives::get_task_move_network_state(
            native_return.pin_mut(),
ped_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetTaskMoveNetworkState {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_throw_projectile(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
ignore_collision_entity_index_: i32,
create_invincible_projectile_: bool) -> ResultOfTaskThrowProjectile {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut ignore_collision_entity_index_ = ignore_collision_entity_index_;
let mut create_invincible_projectile_ = create_invincible_projectile_;
        let success = sdk::natives::task_throw_projectile(
            ped_,
x_,
y_,
z_,
ignore_collision_entity_index_,
create_invincible_projectile_,
        );
        
        
        ResultOfTaskThrowProjectile {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_react_and_flee_ped(&self, ped_: u32,
flee_target_: u32) -> ResultOfTaskReactAndFleePed {
    unsafe {
        let mut ped_ = ped_;
let mut flee_target_ = flee_target_;
        let success = sdk::natives::task_react_and_flee_ped(
            ped_,
flee_target_,
        );
        
        
        ResultOfTaskReactAndFleePed {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_anim_on_running_scenario(&self, ped_: u32,
anim_dict_: Option<String>,
anim_name_: Option<String>) -> ResultOfPlayAnimOnRunningScenario {
    unsafe {
        let mut ped_ = ped_;
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
        let success = sdk::natives::play_anim_on_running_scenario(
            ped_,
anim_dict_.as_ref().unwrap(),
anim_name_.as_ref().unwrap(),
        );
        
        
        ResultOfPlayAnimOnRunningScenario {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_cuffed(&self, ped_: u32) -> ResultOfIsPedCuffed {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_cuffed(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedCuffed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_seek_cover_from_pos(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
duration_: i32,
allow_peeking_and_firing_: bool) -> ResultOfTaskSeekCoverFromPos {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut duration_ = duration_;
let mut allow_peeking_and_firing_ = allow_peeking_and_firing_;
        let success = sdk::natives::task_seek_cover_from_pos(
            ped_,
x_,
y_,
z_,
duration_,
allow_peeking_and_firing_,
        );
        
        
        ResultOfTaskSeekCoverFromPos {
            success,
            ret: (),
            
        }
    }
}

    fn native_delete_patrol_route(&self, patrol_route_: Option<String>) -> ResultOfDeletePatrolRoute {
    unsafe {
        let mut patrol_route_ = sdk_helpers::create_c_string_ptr(patrol_route_);
        let success = sdk::natives::delete_patrol_route(
            patrol_route_.as_ref().unwrap(),
        );
        
        
        ResultOfDeletePatrolRoute {
            success,
            ret: (),
            
        }
    }
}

    fn native_play_entity_scripted_anim(&self, entity_: u32,
priority_low_data_: i32,
priority_mid_data_: i32,
priority_high_data_: i32,
blend_in_delta_: f32,
blend_out_delta_: f32) -> ResultOfPlayEntityScriptedAnim {
    unsafe {
        let mut entity_ = entity_;
let mut priority_low_data_ = priority_low_data_;
let mut priority_mid_data_ = priority_mid_data_;
let mut priority_high_data_ = priority_high_data_;
let mut blend_in_delta_ = blend_in_delta_;
let mut blend_out_delta_ = blend_out_delta_;
        let success = sdk::natives::play_entity_scripted_anim(
            &mut priority_low_data_,
&mut priority_mid_data_,
&mut priority_high_data_,
entity_,
blend_in_delta_,
blend_out_delta_,
        );
        let priority_low_data_ = priority_low_data_;
let priority_mid_data_ = priority_mid_data_;
let priority_high_data_ = priority_high_data_;
        
        ResultOfPlayEntityScriptedAnim {
            success,
            ret: (),
            priority_low_data_,
priority_mid_data_,
priority_high_data_
        }
    }
}

    fn native_set_ped_path_can_use_ladders(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedPathCanUseLadders {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_path_can_use_ladders(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedPathCanUseLadders {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_script_task_status(&self, ped_: u32,
task_hash_: u32) -> ResultOfGetScriptTaskStatus {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut task_hash_ = task_hash_;
        let success = sdk::natives::get_script_task_status(
            &mut native_return,
ped_,
task_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetScriptTaskStatus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_scenario_occupied(&self, x_: f32,
y_: f32,
z_: f32,
max_range_: f32,
only_users_actually_at_scenario_: bool) -> ResultOfIsScenarioOccupied {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut max_range_ = max_range_;
let mut only_users_actually_at_scenario_ = only_users_actually_at_scenario_;
        let success = sdk::natives::is_scenario_occupied(
            &mut native_return,
x_,
y_,
z_,
max_range_,
only_users_actually_at_scenario_,
        );
        let native_return = native_return;
        
        ResultOfIsScenarioOccupied {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_exit_cover(&self, ped_: u32,
exit_type_: i32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfTaskExitCover {
    unsafe {
        let mut ped_ = ped_;
let mut exit_type_ = exit_type_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::task_exit_cover(
            ped_,
exit_type_,
x_,
y_,
z_,
        );
        
        
        ResultOfTaskExitCover {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_aim_gun_scripted(&self, ped_: u32,
script_task_: u32,
disable_blocking_clip_: bool,
instant_blend_to_aim_: bool) -> ResultOfTaskAimGunScripted {
    unsafe {
        let mut ped_ = ped_;
let mut script_task_ = script_task_;
let mut disable_blocking_clip_ = disable_blocking_clip_;
let mut instant_blend_to_aim_ = instant_blend_to_aim_;
        let success = sdk::natives::task_aim_gun_scripted(
            ped_,
script_task_,
disable_blocking_clip_,
instant_blend_to_aim_,
        );
        
        
        ResultOfTaskAimGunScripted {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_shuffle_to_next_vehicle_seat(&self, ped_: u32,
vehicle_: u32,
use_alternate_shuffle_: bool) -> ResultOfTaskShuffleToNextVehicleSeat {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut use_alternate_shuffle_ = use_alternate_shuffle_;
        let success = sdk::natives::task_shuffle_to_next_vehicle_seat(
            ped_,
vehicle_,
use_alternate_shuffle_,
        );
        
        
        ResultOfTaskShuffleToNextVehicleSeat {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_sweep_aim_position(&self, ped_: u32,
anim_dict_: Option<String>,
low_anim_name_: Option<String>,
med_anim_name_: Option<String>,
hi_anim_name_: Option<String>,
runtime_: i32,
x_: f32,
y_: f32,
z_: f32,
turn_rate_: f32,
blend_in_duration_: f32) -> ResultOfTaskSweepAimPosition {
    unsafe {
        let mut ped_ = ped_;
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut low_anim_name_ = sdk_helpers::create_c_string_ptr(low_anim_name_);
let mut med_anim_name_ = sdk_helpers::create_c_string_ptr(med_anim_name_);
let mut hi_anim_name_ = sdk_helpers::create_c_string_ptr(hi_anim_name_);
let mut runtime_ = runtime_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut turn_rate_ = turn_rate_;
let mut blend_in_duration_ = blend_in_duration_;
        let success = sdk::natives::task_sweep_aim_position(
            ped_,
anim_dict_.as_ref().unwrap(),
low_anim_name_.as_ref().unwrap(),
med_anim_name_.as_ref().unwrap(),
hi_anim_name_.as_ref().unwrap(),
runtime_,
x_,
y_,
z_,
turn_rate_,
blend_in_duration_,
        );
        
        
        ResultOfTaskSweepAimPosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_combat_hated_targets_around_ped(&self, ped_: u32,
radius_: f32,
combat_flags_: i32) -> ResultOfTaskCombatHatedTargetsAroundPed {
    unsafe {
        let mut ped_ = ped_;
let mut radius_ = radius_;
let mut combat_flags_ = combat_flags_;
        let success = sdk::natives::task_combat_hated_targets_around_ped(
            ped_,
radius_,
combat_flags_,
        );
        
        
        ResultOfTaskCombatHatedTargetsAroundPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_waypoint_playback_override_speed(&self, p0_: i32,
p1_: f32,
p2_: bool) -> ResultOfWaypointPlaybackOverrideSpeed {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::waypoint_playback_override_speed(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfWaypointPlaybackOverrideSpeed {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_everyone_leave_vehicle(&self, vehicle_: u32) -> ResultOfTaskEveryoneLeaveVehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::task_everyone_leave_vehicle(
            vehicle_,
        );
        
        
        ResultOfTaskEveryoneLeaveVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_assisted_movement_request_route(&self, route_: Option<String>) -> ResultOfAssistedMovementRequestRoute {
    unsafe {
        let mut route_ = sdk_helpers::create_c_string_ptr(route_);
        let success = sdk::natives::assisted_movement_request_route(
            route_.as_ref().unwrap(),
        );
        
        
        ResultOfAssistedMovementRequestRoute {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_play_anim_advanced(&self, ped_: u32,
anim_dict_: Option<String>,
anim_name_: Option<String>,
pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
rot_x_: f32,
rot_y_: f32,
rot_z_: f32,
anim_enter_speed_: f32,
anim_exit_speed_: f32,
duration_: i32,
flag_: i32,
anim_time_: f32,
rot_order_: i32,
ik_flags_: i32) -> ResultOfTaskPlayAnimAdvanced {
    unsafe {
        let mut ped_ = ped_;
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut anim_name_ = sdk_helpers::create_c_string_ptr(anim_name_);
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
let mut anim_enter_speed_ = anim_enter_speed_;
let mut anim_exit_speed_ = anim_exit_speed_;
let mut duration_ = duration_;
let mut flag_ = flag_;
let mut anim_time_ = anim_time_;
let mut rot_order_ = rot_order_;
let mut ik_flags_ = ik_flags_;
        let success = sdk::natives::task_play_anim_advanced(
            ped_,
anim_dict_.as_ref().unwrap(),
anim_name_.as_ref().unwrap(),
pos_x_,
pos_y_,
pos_z_,
rot_x_,
rot_y_,
rot_z_,
anim_enter_speed_,
anim_exit_speed_,
duration_,
flag_,
anim_time_,
rot_order_,
ik_flags_,
        );
        
        
        ResultOfTaskPlayAnimAdvanced {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_flush_route(&self, ) -> ResultOfTaskFlushRoute {
    unsafe {
        
        let success = sdk::natives::task_flush_route(
            
        );
        
        
        ResultOfTaskFlushRoute {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_task_move_network_anim_set(&self, ped_: u32,
clip_set_: u32,
unk_variable_clip_set_: u32) -> ResultOfSetTaskMoveNetworkAnimSet {
    unsafe {
        let mut ped_ = ped_;
let mut clip_set_ = clip_set_;
let mut unk_variable_clip_set_ = unk_variable_clip_set_;
        let success = sdk::natives::set_task_move_network_anim_set(
            ped_,
clip_set_,
unk_variable_clip_set_,
        );
        
        
        ResultOfSetTaskMoveNetworkAnimSet {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_seek_cover_from_ped(&self, ped_: u32,
target_: u32,
duration_: i32,
allow_peeking_and_firing_: bool) -> ResultOfTaskSeekCoverFromPed {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
let mut duration_ = duration_;
let mut allow_peeking_and_firing_ = allow_peeking_and_firing_;
        let success = sdk::natives::task_seek_cover_from_ped(
            ped_,
target_,
duration_,
allow_peeking_and_firing_,
        );
        
        
        ResultOfTaskSeekCoverFromPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_desired_move_blend_ratio(&self, ped_: u32) -> ResultOfGetPedDesiredMoveBlendRatio {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_ped_desired_move_blend_ratio(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetPedDesiredMoveBlendRatio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_vehicle_subtask_attack_ped(&self, ped_: u32,
target_: u32) -> ResultOfAddVehicleSubtaskAttackPed {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
        let success = sdk::natives::add_vehicle_subtask_attack_ped(
            ped_,
target_,
        );
        
        
        ResultOfAddVehicleSubtaskAttackPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_aim_gun_scripted_with_target(&self, ped_: u32,
target_: u32,
x_: f32,
y_: f32,
z_: f32,
gun_task_type_: i32,
disable_blocking_clip_: bool,
force_aim_: bool) -> ResultOfTaskAimGunScriptedWithTarget {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut gun_task_type_ = gun_task_type_;
let mut disable_blocking_clip_ = disable_blocking_clip_;
let mut force_aim_ = force_aim_;
        let success = sdk::natives::task_aim_gun_scripted_with_target(
            ped_,
target_,
x_,
y_,
z_,
gun_task_type_,
disable_blocking_clip_,
force_aim_,
        );
        
        
        ResultOfTaskAimGunScriptedWithTarget {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_task_move_network_signal_float_lerp_rate(&self, ped_: u32,
signal_name_: Option<String>,
value_: f32) -> ResultOfSetTaskMoveNetworkSignalFloatLerpRate {
    unsafe {
        let mut ped_ = ped_;
let mut signal_name_ = sdk_helpers::create_c_string_ptr(signal_name_);
let mut value_ = value_;
        let success = sdk::natives::set_task_move_network_signal_float_lerp_rate(
            ped_,
signal_name_.as_ref().unwrap(),
value_,
        );
        
        
        ResultOfSetTaskMoveNetworkSignalFloatLerpRate {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_driveby_task_underneath_driving_task(&self, ped_: u32) -> ResultOfIsDrivebyTaskUnderneathDrivingTask {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_driveby_task_underneath_driving_task(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsDrivebyTaskUnderneathDrivingTask {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_path_climb_cost_modifier(&self, ped_: u32,
modifier_: f32) -> ResultOfSetPedPathClimbCostModifier {
    unsafe {
        let mut ped_ = ped_;
let mut modifier_ = modifier_;
        let success = sdk::natives::set_ped_path_climb_cost_modifier(
            ped_,
modifier_,
        );
        
        
        ResultOfSetPedPathClimbCostModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_perform_sequence_from_progress(&self, ped_: u32,
task_index_: i32,
progress1_: i32,
progress2_: i32) -> ResultOfTaskPerformSequenceFromProgress {
    unsafe {
        let mut ped_ = ped_;
let mut task_index_ = task_index_;
let mut progress1_ = progress1_;
let mut progress2_ = progress2_;
        let success = sdk::natives::task_perform_sequence_from_progress(
            ped_,
task_index_,
progress1_,
progress2_,
        );
        
        
        ResultOfTaskPerformSequenceFromProgress {
            success,
            ret: (),
            
        }
    }
}

    fn native_waypoint_playback_start_aiming_at_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
p4_: bool) -> ResultOfWaypointPlaybackStartAimingAtCoord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p4_ = p4_;
        let success = sdk::natives::waypoint_playback_start_aiming_at_coord(
            ped_,
x_,
y_,
z_,
p4_,
        );
        
        
        ResultOfWaypointPlaybackStartAimingAtCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_climb(&self, ped_: u32,
use_player_launch_force_: bool) -> ResultOfTaskClimb {
    unsafe {
        let mut ped_ = ped_;
let mut use_player_launch_force_ = use_player_launch_force_;
        let success = sdk::natives::task_climb(
            ped_,
use_player_launch_force_,
        );
        
        
        ResultOfTaskClimb {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_waypoint_playback_pause(&self, vehicle_: u32) -> ResultOfVehicleWaypointPlaybackPause {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::vehicle_waypoint_playback_pause(
            vehicle_,
        );
        
        
        ResultOfVehicleWaypointPlaybackPause {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_perform_sequence_locally(&self, ped_: u32,
task_sequence_id_: i32) -> ResultOfTaskPerformSequenceLocally {
    unsafe {
        let mut ped_ = ped_;
let mut task_sequence_id_ = task_sequence_id_;
        let success = sdk::natives::task_perform_sequence_locally(
            ped_,
task_sequence_id_,
        );
        
        
        ResultOfTaskPerformSequenceLocally {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_chat_to_ped(&self, ped_: u32,
target_: u32,
flags_: i32,
go_to_location_x_: f32,
go_to_location_y_: f32,
go_to_location_z_: f32,
heading_degs_: f32,
idle_time_: f32) -> ResultOfTaskChatToPed {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
let mut flags_ = flags_;
let mut go_to_location_x_ = go_to_location_x_;
let mut go_to_location_y_ = go_to_location_y_;
let mut go_to_location_z_ = go_to_location_z_;
let mut heading_degs_ = heading_degs_;
let mut idle_time_ = idle_time_;
        let success = sdk::natives::task_chat_to_ped(
            ped_,
target_,
flags_,
go_to_location_x_,
go_to_location_y_,
go_to_location_z_,
heading_degs_,
idle_time_,
        );
        
        
        ResultOfTaskChatToPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_high_fall_task(&self, ped_: u32,
min_time_: i32,
max_time_: i32,
entry_type_: i32) -> ResultOfSetHighFallTask {
    unsafe {
        let mut ped_ = ped_;
let mut min_time_ = min_time_;
let mut max_time_ = max_time_;
let mut entry_type_ = entry_type_;
        let success = sdk::natives::set_high_fall_task(
            ped_,
min_time_,
max_time_,
entry_type_,
        );
        
        
        ResultOfSetHighFallTask {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_path_can_use_climbovers(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedPathCanUseClimbovers {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_path_can_use_climbovers(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedPathCanUseClimbovers {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_patrol_route_node(&self, node_id_: i32,
node_type_: Option<String>,
pos_x_: f32,
pos_y_: f32,
pos_z_: f32,
heading_x_: f32,
heading_y_: f32,
heading_z_: f32,
duration_: i32) -> ResultOfAddPatrolRouteNode {
    unsafe {
        let mut node_id_ = node_id_;
let mut node_type_ = sdk_helpers::create_c_string_ptr(node_type_);
let mut pos_x_ = pos_x_;
let mut pos_y_ = pos_y_;
let mut pos_z_ = pos_z_;
let mut heading_x_ = heading_x_;
let mut heading_y_ = heading_y_;
let mut heading_z_ = heading_z_;
let mut duration_ = duration_;
        let success = sdk::natives::add_patrol_route_node(
            node_id_,
node_type_.as_ref().unwrap(),
pos_x_,
pos_y_,
pos_z_,
heading_x_,
heading_y_,
heading_z_,
duration_,
        );
        
        
        ResultOfAddPatrolRouteNode {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_play_phone_gesture_animation(&self, ped_: u32,
anim_dict_: Option<String>,
animation_: Option<String>,
bone_mask_type_: Option<String>,
blend_in_duration_: f32,
blend_out_duration_: f32,
is_looping_: bool,
hold_last_frame_: bool) -> ResultOfTaskPlayPhoneGestureAnimation {
    unsafe {
        let mut ped_ = ped_;
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut animation_ = sdk_helpers::create_c_string_ptr(animation_);
let mut bone_mask_type_ = sdk_helpers::create_c_string_ptr(bone_mask_type_);
let mut blend_in_duration_ = blend_in_duration_;
let mut blend_out_duration_ = blend_out_duration_;
let mut is_looping_ = is_looping_;
let mut hold_last_frame_ = hold_last_frame_;
        let success = sdk::natives::task_play_phone_gesture_animation(
            ped_,
anim_dict_.as_ref().unwrap(),
animation_.as_ref().unwrap(),
bone_mask_type_.as_ref().unwrap(),
blend_in_duration_,
blend_out_duration_,
is_looping_,
hold_last_frame_,
        );
        
        
        ResultOfTaskPlayPhoneGestureAnimation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_can_play_ambient_idles(&self, ped_: u32,
block_idle_clips_: bool,
remove_idle_clip_if_playing_: bool) -> ResultOfSetPedCanPlayAmbientIdles {
    unsafe {
        let mut ped_ = ped_;
let mut block_idle_clips_ = block_idle_clips_;
let mut remove_idle_clip_if_playing_ = remove_idle_clip_if_playing_;
        let success = sdk::natives::set_ped_can_play_ambient_idles(
            ped_,
block_idle_clips_,
remove_idle_clip_if_playing_,
        );
        
        
        ResultOfSetPedCanPlayAmbientIdles {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_being_arrested(&self, ped_: u32) -> ResultOfIsPedBeingArrested {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_being_arrested(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedBeingArrested {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_set_blocking_of_non_temporary_events(&self, ped_: u32,
toggle_: bool) -> ResultOfTaskSetBlockingOfNonTemporaryEvents {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::task_set_blocking_of_non_temporary_events(
            ped_,
toggle_,
        );
        
        
        ResultOfTaskSetBlockingOfNonTemporaryEvents {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_stand_still(&self, ped_: u32,
time_: i32) -> ResultOfTaskStandStill {
    unsafe {
        let mut ped_ = ped_;
let mut time_ = time_;
        let success = sdk::natives::task_stand_still(
            ped_,
time_,
        );
        
        
        ResultOfTaskStandStill {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_task_move_network_active(&self, ped_: u32) -> ResultOfIsTaskMoveNetworkActive {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_task_move_network_active(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsTaskMoveNetworkActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_plane_taxi(&self, pilot_: u32,
aircraft_: u32,
x_: f32,
y_: f32,
z_: f32,
cruise_speed_: f32,
target_reached_: f32) -> ResultOfTaskPlaneTaxi {
    unsafe {
        let mut pilot_ = pilot_;
let mut aircraft_ = aircraft_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut cruise_speed_ = cruise_speed_;
let mut target_reached_ = target_reached_;
        let success = sdk::natives::task_plane_taxi(
            pilot_,
aircraft_,
x_,
y_,
z_,
cruise_speed_,
target_reached_,
        );
        
        
        ResultOfTaskPlaneTaxi {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_set_sphere_defensive_area(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOfTaskSetSphereDefensiveArea {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::task_set_sphere_defensive_area(
            ped_,
x_,
y_,
z_,
radius_,
        );
        
        
        ResultOfTaskSetSphereDefensiveArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_achieve_heading(&self, ped_: u32,
heading_: f32,
timeout_: i32) -> ResultOfTaskAchieveHeading {
    unsafe {
        let mut ped_ = ped_;
let mut heading_ = heading_;
let mut timeout_ = timeout_;
        let success = sdk::natives::task_achieve_heading(
            ped_,
heading_,
timeout_,
        );
        
        
        ResultOfTaskAchieveHeading {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_combat_ped_timed(&self, ped_: u32,
target_: u32,
time_: i32,
flags_: i32) -> ResultOfTaskCombatPedTimed {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
let mut time_ = time_;
let mut flags_ = flags_;
        let success = sdk::natives::task_combat_ped_timed(
            ped_,
target_,
time_,
flags_,
        );
        
        
        ResultOfTaskCombatPedTimed {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_mission_ped_target(&self, ped_: u32,
vehicle_: u32,
ped_target_: u32,
mission_type_: i32,
max_speed_: f32,
driving_style_: i32,
min_distance_: f32,
straight_line_distance_: f32,
drive_against_traffic_: bool) -> ResultOfTaskVehicleMissionPedTarget {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut ped_target_ = ped_target_;
let mut mission_type_ = mission_type_;
let mut max_speed_ = max_speed_;
let mut driving_style_ = driving_style_;
let mut min_distance_ = min_distance_;
let mut straight_line_distance_ = straight_line_distance_;
let mut drive_against_traffic_ = drive_against_traffic_;
        let success = sdk::natives::task_vehicle_mission_ped_target(
            ped_,
vehicle_,
ped_target_,
mission_type_,
max_speed_,
driving_style_,
min_distance_,
straight_line_distance_,
drive_against_traffic_,
        );
        
        
        ResultOfTaskVehicleMissionPedTarget {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_smart_flee_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
distance_: f32,
time_: i32,
prefer_pavements_: bool,
quit_if_out_of_range_: bool) -> ResultOfTaskSmartFleeCoord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut distance_ = distance_;
let mut time_ = time_;
let mut prefer_pavements_ = prefer_pavements_;
let mut quit_if_out_of_range_ = quit_if_out_of_range_;
        let success = sdk::natives::task_smart_flee_coord(
            ped_,
x_,
y_,
z_,
distance_,
time_,
prefer_pavements_,
quit_if_out_of_range_,
        );
        
        
        ResultOfTaskSmartFleeCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_clear_defensive_area(&self, ped_: u32) -> ResultOfTaskClearDefensiveArea {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::task_clear_defensive_area(
            ped_,
        );
        
        
        ResultOfTaskClearDefensiveArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_open_vehicle_door(&self, ped_: u32,
vehicle_: u32,
time_out_: i32,
seat_: i32,
speed_: f32) -> ResultOfTaskOpenVehicleDoor {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut time_out_ = time_out_;
let mut seat_ = seat_;
let mut speed_ = speed_;
        let success = sdk::natives::task_open_vehicle_door(
            ped_,
vehicle_,
time_out_,
seat_,
speed_,
        );
        
        
        ResultOfTaskOpenVehicleDoor {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_plant_bomb(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
heading_: f32) -> ResultOfTaskPlantBomb {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
        let success = sdk::natives::task_plant_bomb(
            ped_,
x_,
y_,
z_,
heading_,
        );
        
        
        ResultOfTaskPlantBomb {
            success,
            ret: (),
            
        }
    }
}

    fn native_update_task_aim_gun_scripted_target(&self, ped_: u32,
target_: u32,
x_: f32,
y_: f32,
z_: f32,
disable_blocking_clip_: bool) -> ResultOfUpdateTaskAimGunScriptedTarget {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut disable_blocking_clip_ = disable_blocking_clip_;
        let success = sdk::natives::update_task_aim_gun_scripted_target(
            ped_,
target_,
x_,
y_,
z_,
disable_blocking_clip_,
        );
        
        
        ResultOfUpdateTaskAimGunScriptedTarget {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_go_to_entity_while_aiming_at_entity(&self, ped_: u32,
entity_to_walk_to_: u32,
entity_to_aim_at_: u32,
speed_: f32,
shootat_entity_: bool,
target_radius_: f32,
slow_distance_: f32,
use_nav_mesh_: bool,
instant_blend_to_aim_: bool,
firing_pattern_: u32) -> ResultOfTaskGoToEntityWhileAimingAtEntity {
    unsafe {
        let mut ped_ = ped_;
let mut entity_to_walk_to_ = entity_to_walk_to_;
let mut entity_to_aim_at_ = entity_to_aim_at_;
let mut speed_ = speed_;
let mut shootat_entity_ = shootat_entity_;
let mut target_radius_ = target_radius_;
let mut slow_distance_ = slow_distance_;
let mut use_nav_mesh_ = use_nav_mesh_;
let mut instant_blend_to_aim_ = instant_blend_to_aim_;
let mut firing_pattern_ = firing_pattern_;
        let success = sdk::natives::task_go_to_entity_while_aiming_at_entity(
            ped_,
entity_to_walk_to_,
entity_to_aim_at_,
speed_,
shootat_entity_,
target_radius_,
slow_distance_,
use_nav_mesh_,
instant_blend_to_aim_,
firing_pattern_,
        );
        
        
        ResultOfTaskGoToEntityWhileAimingAtEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_use_nearest_scenario_chain_to_coord_warp(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32,
time_to_leave_: i32) -> ResultOfTaskUseNearestScenarioChainToCoordWarp {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut time_to_leave_ = time_to_leave_;
        let success = sdk::natives::task_use_nearest_scenario_chain_to_coord_warp(
            ped_,
x_,
y_,
z_,
radius_,
time_to_leave_,
        );
        
        
        ResultOfTaskUseNearestScenarioChainToCoordWarp {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_anim_task(&self, entity_: u32,
anim_dictionary_: Option<String>,
animation_name_: Option<String>,
blend_delta_: f32) -> ResultOfStopAnimTask {
    unsafe {
        let mut entity_ = entity_;
let mut anim_dictionary_ = sdk_helpers::create_c_string_ptr(anim_dictionary_);
let mut animation_name_ = sdk_helpers::create_c_string_ptr(animation_name_);
let mut blend_delta_ = blend_delta_;
        let success = sdk::natives::stop_anim_task(
            entity_,
anim_dictionary_.as_ref().unwrap(),
animation_name_.as_ref().unwrap(),
blend_delta_,
        );
        
        
        ResultOfStopAnimTask {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_waypoint_progress(&self, vehicle_: u32) -> ResultOfGetVehicleWaypointProgress {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_waypoint_progress(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleWaypointProgress {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_warp_ped_into_vehicle(&self, ped_: u32,
vehicle_: u32,
seat_: i32) -> ResultOfTaskWarpPedIntoVehicle {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut seat_ = seat_;
        let success = sdk::natives::task_warp_ped_into_vehicle(
            ped_,
vehicle_,
seat_,
        );
        
        
        ResultOfTaskWarpPedIntoVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_aim_gun_at_entity(&self, ped_: u32,
entity_: u32,
duration_: i32,
instant_blend_to_aim_: bool) -> ResultOfTaskAimGunAtEntity {
    unsafe {
        let mut ped_ = ped_;
let mut entity_ = entity_;
let mut duration_ = duration_;
let mut instant_blend_to_aim_ = instant_blend_to_aim_;
        let success = sdk::natives::task_aim_gun_at_entity(
            ped_,
entity_,
duration_,
instant_blend_to_aim_,
        );
        
        
        ResultOfTaskAimGunAtEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_get_off_boat(&self, ped_: u32,
boat_: u32) -> ResultOfTaskGetOffBoat {
    unsafe {
        let mut ped_ = ped_;
let mut boat_ = boat_;
        let success = sdk::natives::task_get_off_boat(
            ped_,
boat_,
        );
        
        
        ResultOfTaskGetOffBoat {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_task_rappel_down_wall_state(&self, ped_: u32) -> ResultOfGetTaskRappelDownWallState {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_task_rappel_down_wall_state(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetTaskRappelDownWallState {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_waypoint_recording(&self, name_: Option<String>) -> ResultOfRequestWaypointRecording {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::request_waypoint_recording(
            name_.as_ref().unwrap(),
        );
        
        
        ResultOfRequestWaypointRecording {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_use_nearest_scenario_chain_to_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
max_range_: f32,
time_to_leave_: i32) -> ResultOfTaskUseNearestScenarioChainToCoord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut max_range_ = max_range_;
let mut time_to_leave_ = time_to_leave_;
        let success = sdk::natives::task_use_nearest_scenario_chain_to_coord(
            ped_,
x_,
y_,
z_,
max_range_,
time_to_leave_,
        );
        
        
        ResultOfTaskUseNearestScenarioChainToCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_swap_weapon(&self, ped_: u32,
draw_weapon_: bool) -> ResultOfTaskSwapWeapon {
    unsafe {
        let mut ped_ = ped_;
let mut draw_weapon_ = draw_weapon_;
        let success = sdk::natives::task_swap_weapon(
            ped_,
draw_weapon_,
        );
        
        
        ResultOfTaskSwapWeapon {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_mounted_weapon_task_underneath_driving_task(&self, ped_: u32) -> ResultOfIsMountedWeaponTaskUnderneathDrivingTask {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_mounted_weapon_task_underneath_driving_task(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsMountedWeaponTaskUnderneathDrivingTask {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_open_patrol_route(&self, patrol_route_: Option<String>) -> ResultOfOpenPatrolRoute {
    unsafe {
        let mut patrol_route_ = sdk_helpers::create_c_string_ptr(patrol_route_);
        let success = sdk::natives::open_patrol_route(
            patrol_route_.as_ref().unwrap(),
        );
        
        
        ResultOfOpenPatrolRoute {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_go_to_coord_and_aim_at_hated_entities_near_coord(&self, ped_handle_: u32,
go_to_location_x_: f32,
go_to_location_y_: f32,
go_to_location_z_: f32,
focus_location_x_: f32,
focus_location_y_: f32,
focus_location_z_: f32,
speed_: f32,
shoot_at_enemies_: bool,
distance_to_stop_at_: f32,
no_roads_distance_: f32,
use_nav_mesh_: bool,
nav_flags_: i32,
task_flags_: i32,
firing_pattern_: u32) -> ResultOfTaskGoToCoordAndAimAtHatedEntitiesNearCoord {
    unsafe {
        let mut ped_handle_ = ped_handle_;
let mut go_to_location_x_ = go_to_location_x_;
let mut go_to_location_y_ = go_to_location_y_;
let mut go_to_location_z_ = go_to_location_z_;
let mut focus_location_x_ = focus_location_x_;
let mut focus_location_y_ = focus_location_y_;
let mut focus_location_z_ = focus_location_z_;
let mut speed_ = speed_;
let mut shoot_at_enemies_ = shoot_at_enemies_;
let mut distance_to_stop_at_ = distance_to_stop_at_;
let mut no_roads_distance_ = no_roads_distance_;
let mut use_nav_mesh_ = use_nav_mesh_;
let mut nav_flags_ = nav_flags_;
let mut task_flags_ = task_flags_;
let mut firing_pattern_ = firing_pattern_;
        let success = sdk::natives::task_go_to_coord_and_aim_at_hated_entities_near_coord(
            ped_handle_,
go_to_location_x_,
go_to_location_y_,
go_to_location_z_,
focus_location_x_,
focus_location_y_,
focus_location_z_,
speed_,
shoot_at_enemies_,
distance_to_stop_at_,
no_roads_distance_,
use_nav_mesh_,
nav_flags_,
task_flags_,
firing_pattern_,
        );
        
        
        ResultOfTaskGoToCoordAndAimAtHatedEntitiesNearCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_waypoint_distance_along_route(&self, name_: Option<String>,
point_: i32) -> ResultOfGetWaypointDistanceAlongRoute {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut point_ = point_;
        let success = sdk::natives::get_waypoint_distance_along_route(
            &mut native_return,
name_.as_ref().unwrap(),
point_,
        );
        let native_return = native_return;
        
        ResultOfGetWaypointDistanceAlongRoute {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_task_move_network_signal_bool(&self, ped_: u32,
signal_name_: Option<String>) -> ResultOfGetTaskMoveNetworkSignalBool {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut signal_name_ = sdk_helpers::create_c_string_ptr(signal_name_);
        let success = sdk::natives::get_task_move_network_signal_bool(
            &mut native_return,
ped_,
signal_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfGetTaskMoveNetworkSignalBool {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_scripted_cover_point_exist_at_coords(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfDoesScriptedCoverPointExistAtCoords {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::does_scripted_cover_point_exist_at_coords(
            &mut native_return,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOfDoesScriptedCoverPointExistAtCoords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_update_task_hands_up_duration(&self, ped_: u32,
duration_: i32) -> ResultOfUpdateTaskHandsUpDuration {
    unsafe {
        let mut ped_ = ped_;
let mut duration_ = duration_;
        let success = sdk::natives::update_task_hands_up_duration(
            ped_,
duration_,
        );
        
        
        ResultOfUpdateTaskHandsUpDuration {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_goto_entity_aiming(&self, ped_: u32,
target_: u32,
distance_to_stop_at_: f32,
start_aiming_dist_: f32) -> ResultOfTaskGotoEntityAiming {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
let mut distance_to_stop_at_ = distance_to_stop_at_;
let mut start_aiming_dist_ = start_aiming_dist_;
        let success = sdk::natives::task_goto_entity_aiming(
            ped_,
target_,
distance_to_stop_at_,
start_aiming_dist_,
        );
        
        
        ResultOfTaskGotoEntityAiming {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_active_in_scenario(&self, ped_: u32) -> ResultOfIsPedActiveInScenario {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_active_in_scenario(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedActiveInScenario {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_stealth_kill(&self, killer_: u32,
target_: u32,
stealth_kill_action_result_hash_: u32,
desired_move_blend_ratio_: f32,
stealth_flags_: i32) -> ResultOfTaskStealthKill {
    unsafe {
        let mut killer_ = killer_;
let mut target_ = target_;
let mut stealth_kill_action_result_hash_ = stealth_kill_action_result_hash_;
let mut desired_move_blend_ratio_ = desired_move_blend_ratio_;
let mut stealth_flags_ = stealth_flags_;
        let success = sdk::natives::task_stealth_kill(
            killer_,
target_,
stealth_kill_action_result_hash_,
desired_move_blend_ratio_,
stealth_flags_,
        );
        
        
        ResultOfTaskStealthKill {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_tasks_immediately(&self, ped_: u32) -> ResultOfClearPedTasksImmediately {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_tasks_immediately(
            ped_,
        );
        
        
        ResultOfClearPedTasksImmediately {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_expected_clone_next_task_move_network_state(&self, ped_: u32,
state_: Option<String>) -> ResultOfSetExpectedCloneNextTaskMoveNetworkState {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut state_ = sdk_helpers::create_c_string_ptr(state_);
        let success = sdk::natives::set_expected_clone_next_task_move_network_state(
            &mut native_return,
ped_,
state_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfSetExpectedCloneNextTaskMoveNetworkState {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_still(&self, ped_: u32) -> ResultOfIsPedStill {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_still(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedStill {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_heli_chase(&self, pilot_: u32,
entity_to_follow_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfTaskHeliChase {
    unsafe {
        let mut pilot_ = pilot_;
let mut entity_to_follow_ = entity_to_follow_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::task_heli_chase(
            pilot_,
entity_to_follow_,
x_,
y_,
z_,
        );
        
        
        ResultOfTaskHeliChase {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_toggle_duck(&self, ped_: u32,
toggle_type_: i32) -> ResultOfTaskToggleDuck {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_type_ = toggle_type_;
        let success = sdk::natives::task_toggle_duck(
            ped_,
toggle_type_,
        );
        
        
        ResultOfTaskToggleDuck {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_stand_guard(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
heading_: f32,
scenario_name_: Option<String>) -> ResultOfTaskStandGuard {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut scenario_name_ = sdk_helpers::create_c_string_ptr(scenario_name_);
        let success = sdk::natives::task_stand_guard(
            ped_,
x_,
y_,
z_,
heading_,
scenario_name_.as_ref().unwrap(),
        );
        
        
        ResultOfTaskStandGuard {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_cover_point(&self, coverpoint_: u32) -> ResultOfRemoveCoverPoint {
    unsafe {
        let mut coverpoint_ = coverpoint_;
        let success = sdk::natives::remove_cover_point(
            coverpoint_,
        );
        
        
        ResultOfRemoveCoverPoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_patrol_route(&self, ) -> ResultOfCreatePatrolRoute {
    unsafe {
        
        let success = sdk::natives::create_patrol_route(
            
        );
        
        
        ResultOfCreatePatrolRoute {
            success,
            ret: (),
            
        }
    }
}

    fn native_close_patrol_route(&self, ) -> ResultOfClosePatrolRoute {
    unsafe {
        
        let success = sdk::natives::close_patrol_route(
            
        );
        
        
        ResultOfClosePatrolRoute {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_task_active(&self, ped_: u32,
task_index_: i32) -> ResultOfGetIsTaskActive {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut task_index_ = task_index_;
        let success = sdk::natives::get_is_task_active(
            &mut native_return,
ped_,
task_index_,
        );
        let native_return = native_return;
        
        ResultOfGetIsTaskActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_task_move_network_signal_bool(&self, ped_: u32,
signal_name_: Option<String>,
value_: bool) -> ResultOfSetTaskMoveNetworkSignalBool {
    unsafe {
        let mut ped_ = ped_;
let mut signal_name_ = sdk_helpers::create_c_string_ptr(signal_name_);
let mut value_ = value_;
        let success = sdk::natives::set_task_move_network_signal_bool(
            ped_,
signal_name_.as_ref().unwrap(),
value_,
        );
        
        
        ResultOfSetTaskMoveNetworkSignalBool {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_go_to_coord_while_aiming_at_entity(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
aim_at_i_d_: u32,
move_blend_ratio_: f32,
shoot_: bool,
target_radius_: f32,
slow_distance_: f32,
use_nav_mesh_: bool,
nav_flags_: i32,
instant_blend_to_aim_: bool,
firing_pattern_: u32,
time_: i32) -> ResultOfTaskGoToCoordWhileAimingAtEntity {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut aim_at_i_d_ = aim_at_i_d_;
let mut move_blend_ratio_ = move_blend_ratio_;
let mut shoot_ = shoot_;
let mut target_radius_ = target_radius_;
let mut slow_distance_ = slow_distance_;
let mut use_nav_mesh_ = use_nav_mesh_;
let mut nav_flags_ = nav_flags_;
let mut instant_blend_to_aim_ = instant_blend_to_aim_;
let mut firing_pattern_ = firing_pattern_;
let mut time_ = time_;
        let success = sdk::natives::task_go_to_coord_while_aiming_at_entity(
            ped_,
x_,
y_,
z_,
aim_at_i_d_,
move_blend_ratio_,
shoot_,
target_radius_,
slow_distance_,
use_nav_mesh_,
nav_flags_,
instant_blend_to_aim_,
firing_pattern_,
time_,
        );
        
        
        ResultOfTaskGoToCoordWhileAimingAtEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_parachute_to_target(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfTaskParachuteToTarget {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::task_parachute_to_target(
            ped_,
x_,
y_,
z_,
        );
        
        
        ResultOfTaskParachuteToTarget {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_heli_escort_heli(&self, pilot_: u32,
heli1_: u32,
heli2_: u32,
offset_x_: f32,
offset_y_: f32,
offset_z_: f32) -> ResultOfTaskHeliEscortHeli {
    unsafe {
        let mut pilot_ = pilot_;
let mut heli1_ = heli1_;
let mut heli2_ = heli2_;
let mut offset_x_ = offset_x_;
let mut offset_y_ = offset_y_;
let mut offset_z_ = offset_z_;
        let success = sdk::natives::task_heli_escort_heli(
            pilot_,
heli1_,
heli2_,
offset_x_,
offset_y_,
offset_z_,
        );
        
        
        ResultOfTaskHeliEscortHeli {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_task_move_network_event(&self, ped_: u32,
event_name_: Option<String>) -> ResultOfGetTaskMoveNetworkEvent {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut event_name_ = sdk_helpers::create_c_string_ptr(event_name_);
        let success = sdk::natives::get_task_move_network_event(
            &mut native_return,
ped_,
event_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfGetTaskMoveNetworkEvent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_waypoint_recording_get_closest_waypoint(&self, name_: Option<String>,
x_: f32,
y_: f32,
z_: f32,
point_: i32) -> ResultOfWaypointRecordingGetClosestWaypoint {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut point_ = point_;
        let success = sdk::natives::waypoint_recording_get_closest_waypoint(
            &mut native_return,
&mut point_,
name_.as_ref().unwrap(),
x_,
y_,
z_,
        );
        let native_return = native_return;
let point_ = point_;
        
        ResultOfWaypointRecordingGetClosestWaypoint {
            success,
            ret: native_return,
            point_
        }
    }
}

    fn native_task_climb_ladder(&self, ped_: u32,
fast_: bool) -> ResultOfTaskClimbLadder {
    unsafe {
        let mut ped_ = ped_;
let mut fast_ = fast_;
        let success = sdk::natives::task_climb_ladder(
            ped_,
fast_,
        );
        
        
        ResultOfTaskClimbLadder {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_playing_phone_gesture_anim(&self, ped_: u32) -> ResultOfIsPlayingPhoneGestureAnim {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_playing_phone_gesture_anim(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPlayingPhoneGestureAnim {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_go_to_coord_any_means_extra_params_with_cruise_speed(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
move_blend_ratio_: f32,
vehicle_: u32,
use_long_range_vehicle_pathing_: bool,
driving_flags_: i32,
max_range_to_shoot_targets_: f32,
extra_veh_to_target_dist_to_prefer_vehicle_: f32,
drive_straight_line_distance_: f32,
extra_flags_: i32,
cruise_speed_: f32,
target_arrive_dist_: f32) -> ResultOfTaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut move_blend_ratio_ = move_blend_ratio_;
let mut vehicle_ = vehicle_;
let mut use_long_range_vehicle_pathing_ = use_long_range_vehicle_pathing_;
let mut driving_flags_ = driving_flags_;
let mut max_range_to_shoot_targets_ = max_range_to_shoot_targets_;
let mut extra_veh_to_target_dist_to_prefer_vehicle_ = extra_veh_to_target_dist_to_prefer_vehicle_;
let mut drive_straight_line_distance_ = drive_straight_line_distance_;
let mut extra_flags_ = extra_flags_;
let mut cruise_speed_ = cruise_speed_;
let mut target_arrive_dist_ = target_arrive_dist_;
        let success = sdk::natives::task_go_to_coord_any_means_extra_params_with_cruise_speed(
            ped_,
x_,
y_,
z_,
move_blend_ratio_,
vehicle_,
use_long_range_vehicle_pathing_,
driving_flags_,
max_range_to_shoot_targets_,
extra_veh_to_target_dist_to_prefer_vehicle_,
drive_straight_line_distance_,
extra_flags_,
cruise_speed_,
target_arrive_dist_,
        );
        
        
        ResultOfTaskGoToCoordAnyMeansExtraParamsWithCruiseSpeed {
            success,
            ret: (),
            
        }
    }
}

    fn native_update_task_sweep_aim_position(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfUpdateTaskSweepAimPosition {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::update_task_sweep_aim_position(
            ped_,
x_,
y_,
z_,
        );
        
        
        ResultOfUpdateTaskSweepAimPosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_wander_standard(&self, ped_: u32,
heading_: f32,
flags_: i32) -> ResultOfTaskWanderStandard {
    unsafe {
        let mut ped_ = ped_;
let mut heading_ = heading_;
let mut flags_ = flags_;
        let success = sdk::natives::task_wander_standard(
            ped_,
heading_,
flags_,
        );
        
        
        ResultOfTaskWanderStandard {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_use_mobile_phone(&self, ped_: u32,
use_phone_: bool,
desired_phone_mode_: i32) -> ResultOfTaskUseMobilePhone {
    unsafe {
        let mut ped_ = ped_;
let mut use_phone_ = use_phone_;
let mut desired_phone_mode_ = desired_phone_mode_;
        let success = sdk::natives::task_use_mobile_phone(
            ped_,
use_phone_,
desired_phone_mode_,
        );
        
        
        ResultOfTaskUseMobilePhone {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_patrol(&self, ped_: u32,
patrol_route_name_: Option<String>,
alert_state_: i32,
can_chat_to_peds_: bool,
use_head_look_at_: bool) -> ResultOfTaskPatrol {
    unsafe {
        let mut ped_ = ped_;
let mut patrol_route_name_ = sdk_helpers::create_c_string_ptr(patrol_route_name_);
let mut alert_state_ = alert_state_;
let mut can_chat_to_peds_ = can_chat_to_peds_;
let mut use_head_look_at_ = use_head_look_at_;
        let success = sdk::natives::task_patrol(
            ped_,
patrol_route_name_.as_ref().unwrap(),
alert_state_,
can_chat_to_peds_,
use_head_look_at_,
        );
        
        
        ResultOfTaskPatrol {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_plane_land(&self, pilot_: u32,
plane_: u32,
runway_start_x_: f32,
runway_start_y_: f32,
runway_start_z_: f32,
runway_end_x_: f32,
runway_end_y_: f32,
runway_end_z_: f32) -> ResultOfTaskPlaneLand {
    unsafe {
        let mut pilot_ = pilot_;
let mut plane_ = plane_;
let mut runway_start_x_ = runway_start_x_;
let mut runway_start_y_ = runway_start_y_;
let mut runway_start_z_ = runway_start_z_;
let mut runway_end_x_ = runway_end_x_;
let mut runway_end_y_ = runway_end_y_;
let mut runway_end_z_ = runway_end_z_;
        let success = sdk::natives::task_plane_land(
            pilot_,
plane_,
runway_start_x_,
runway_start_y_,
runway_start_z_,
runway_end_x_,
runway_end_y_,
runway_end_z_,
        );
        
        
        ResultOfTaskPlaneLand {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_enter_vehicle(&self, ped_: u32,
vehicle_: u32,
timeout_: i32,
seat_: i32,
speed_: f32,
flag_: i32,
override_entry_clipset_name_: Option<String>) -> ResultOfTaskEnterVehicle {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut timeout_ = timeout_;
let mut seat_ = seat_;
let mut speed_ = speed_;
let mut flag_ = flag_;
let mut override_entry_clipset_name_ = sdk_helpers::create_c_string_ptr(override_entry_clipset_name_);
        let success = sdk::natives::task_enter_vehicle(
            ped_,
vehicle_,
timeout_,
seat_,
speed_,
flag_,
override_entry_clipset_name_.as_ref().unwrap(),
        );
        
        
        ResultOfTaskEnterVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_submarine_goto_and_stop(&self, ped_: u32,
submarine_: u32,
x_: f32,
y_: f32,
z_: f32,
autopilot_: bool) -> ResultOfTaskSubmarineGotoAndStop {
    unsafe {
        let mut ped_ = ped_;
let mut submarine_ = submarine_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut autopilot_ = autopilot_;
        let success = sdk::natives::task_submarine_goto_and_stop(
            ped_,
submarine_,
x_,
y_,
z_,
autopilot_,
        );
        
        
        ResultOfTaskSubmarineGotoAndStop {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_parachute_task_target(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfSetParachuteTaskTarget {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_parachute_task_target(
            ped_,
x_,
y_,
z_,
        );
        
        
        ResultOfSetParachuteTaskTarget {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_driveby_task_underneath_driving_task(&self, ped_: u32) -> ResultOfClearDrivebyTaskUnderneathDrivingTask {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_driveby_task_underneath_driving_task(
            ped_,
        );
        
        
        ResultOfClearDrivebyTaskUnderneathDrivingTask {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_temp_action(&self, driver_: u32,
vehicle_: u32,
action_: i32,
time_: i32) -> ResultOfTaskVehicleTempAction {
    unsafe {
        let mut driver_ = driver_;
let mut vehicle_ = vehicle_;
let mut action_ = action_;
let mut time_ = time_;
        let success = sdk::natives::task_vehicle_temp_action(
            driver_,
vehicle_,
action_,
time_,
        );
        
        
        ResultOfTaskVehicleTempAction {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_running(&self, ped_: u32) -> ResultOfIsPedRunning {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_running(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedRunning {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_navmesh_route_distance_remaining(&self, ped_: u32,
distance_remaining_: f32,
is_path_ready_: bool) -> ResultOfGetNavmeshRouteDistanceRemaining {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut distance_remaining_ = distance_remaining_;
let mut is_path_ready_ = is_path_ready_;
        let success = sdk::natives::get_navmesh_route_distance_remaining(
            &mut native_return,
&mut distance_remaining_,
&mut is_path_ready_,
ped_,
        );
        let native_return = native_return;
let distance_remaining_ = distance_remaining_;
let is_path_ready_ = is_path_ready_;
        
        ResultOfGetNavmeshRouteDistanceRemaining {
            success,
            ret: native_return,
            distance_remaining_,
is_path_ready_
        }
    }
}

    fn native_task_guard_sphere_defensive_area(&self, ped_: u32,
defend_position_x_: f32,
defend_position_y_: f32,
defend_position_z_: f32,
heading_: f32,
max_patrol_proximity_: f32,
time_: i32,
x_: f32,
y_: f32,
z_: f32,
defensive_area_radius_: f32) -> ResultOfTaskGuardSphereDefensiveArea {
    unsafe {
        let mut ped_ = ped_;
let mut defend_position_x_ = defend_position_x_;
let mut defend_position_y_ = defend_position_y_;
let mut defend_position_z_ = defend_position_z_;
let mut heading_ = heading_;
let mut max_patrol_proximity_ = max_patrol_proximity_;
let mut time_ = time_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut defensive_area_radius_ = defensive_area_radius_;
        let success = sdk::natives::task_guard_sphere_defensive_area(
            ped_,
defend_position_x_,
defend_position_y_,
defend_position_z_,
heading_,
max_patrol_proximity_,
time_,
x_,
y_,
z_,
defensive_area_radius_,
        );
        
        
        ResultOfTaskGuardSphereDefensiveArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_waypoint_recording_loaded(&self, name_: Option<String>) -> ResultOfGetIsWaypointRecordingLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::get_is_waypoint_recording_loaded(
            &mut native_return,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfGetIsWaypointRecordingLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_task_vehicle_chase_behavior_flag(&self, ped_: u32,
flag_: i32,
set_: bool) -> ResultOfSetTaskVehicleChaseBehaviorFlag {
    unsafe {
        let mut ped_ = ped_;
let mut flag_ = flag_;
let mut set_ = set_;
        let success = sdk::natives::set_task_vehicle_chase_behavior_flag(
            ped_,
flag_,
set_,
        );
        
        
        ResultOfSetTaskVehicleChaseBehaviorFlag {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_mounted_weapon_target(&self, shooting_ped_: u32,
target_ped_: u32,
target_vehicle_: u32,
x_: f32,
y_: f32,
z_: f32,
task_mode_: i32,
ignore_target_veh_dead_check_: bool) -> ResultOfSetMountedWeaponTarget {
    unsafe {
        let mut shooting_ped_ = shooting_ped_;
let mut target_ped_ = target_ped_;
let mut target_vehicle_ = target_vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut task_mode_ = task_mode_;
let mut ignore_target_veh_dead_check_ = ignore_target_veh_dead_check_;
        let success = sdk::natives::set_mounted_weapon_target(
            shooting_ped_,
target_ped_,
target_vehicle_,
x_,
y_,
z_,
task_mode_,
ignore_target_veh_dead_check_,
        );
        
        
        ResultOfSetMountedWeaponTarget {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_writhe(&self, ped_: u32,
target_: u32,
min_fire_loops_: i32,
start_state_: i32,
force_shoot_on_ground_: bool,
shoot_from_ground_timer_: i32) -> ResultOfTaskWrithe {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
let mut min_fire_loops_ = min_fire_loops_;
let mut start_state_ = start_state_;
let mut force_shoot_on_ground_ = force_shoot_on_ground_;
let mut shoot_from_ground_timer_ = shoot_from_ground_timer_;
        let success = sdk::natives::task_writhe(
            ped_,
target_,
min_fire_loops_,
start_state_,
force_shoot_on_ground_,
shoot_from_ground_timer_,
        );
        
        
        ResultOfTaskWrithe {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_task_move_network_state_transition(&self, ped_: u32,
name_: Option<String>) -> ResultOfRequestTaskMoveNetworkStateTransition {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::request_task_move_network_state_transition(
            &mut native_return,
ped_,
name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfRequestTaskMoveNetworkStateTransition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_ped_slide_to_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
heading_: f32,
speed_: f32) -> ResultOfTaskPedSlideToCoord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut speed_ = speed_;
        let success = sdk::natives::task_ped_slide_to_coord(
            ped_,
x_,
y_,
z_,
heading_,
speed_,
        );
        
        
        ResultOfTaskPedSlideToCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_guard_assigned_defensive_area(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
heading_: f32,
max_patrol_proximity_: f32,
timer_: i32) -> ResultOfTaskGuardAssignedDefensiveArea {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut max_patrol_proximity_ = max_patrol_proximity_;
let mut timer_ = timer_;
        let success = sdk::natives::task_guard_assigned_defensive_area(
            ped_,
x_,
y_,
z_,
heading_,
max_patrol_proximity_,
timer_,
        );
        
        
        ResultOfTaskGuardAssignedDefensiveArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_parachute(&self, ped_: u32,
give_parachute_item_: bool,
instant_: bool) -> ResultOfTaskParachute {
    unsafe {
        let mut ped_ = ped_;
let mut give_parachute_item_ = give_parachute_item_;
let mut instant_ = instant_;
        let success = sdk::natives::task_parachute(
            ped_,
give_parachute_item_,
instant_,
        );
        
        
        ResultOfTaskParachute {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_leave_vehicle(&self, ped_: u32,
vehicle_: u32,
flags_: i32) -> ResultOfTaskLeaveVehicle {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut flags_ = flags_;
        let success = sdk::natives::task_leave_vehicle(
            ped_,
vehicle_,
flags_,
        );
        
        
        ResultOfTaskLeaveVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_seek_cover_to_cover_point(&self, ped_: u32,
coverpoint_: u32,
x_: f32,
y_: f32,
z_: f32,
time_: i32,
allow_peeking_and_firing_: bool) -> ResultOfTaskSeekCoverToCoverPoint {
    unsafe {
        let mut ped_ = ped_;
let mut coverpoint_ = coverpoint_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut time_ = time_;
let mut allow_peeking_and_firing_ = allow_peeking_and_firing_;
        let success = sdk::natives::task_seek_cover_to_cover_point(
            ped_,
coverpoint_,
x_,
y_,
z_,
time_,
allow_peeking_and_firing_,
        );
        
        
        ResultOfTaskSeekCoverToCoverPoint {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_move_blend_ratio_running(&self, ped_: u32) -> ResultOfIsMoveBlendRatioRunning {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_move_blend_ratio_running(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsMoveBlendRatioRunning {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_assisted_movement_set_route_properties(&self, route_: Option<String>,
props_: i32) -> ResultOfAssistedMovementSetRouteProperties {
    unsafe {
        let mut route_ = sdk_helpers::create_c_string_ptr(route_);
let mut props_ = props_;
        let success = sdk::natives::assisted_movement_set_route_properties(
            route_.as_ref().unwrap(),
props_,
        );
        
        
        ResultOfAssistedMovementSetRouteProperties {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_move_network_advanced_by_name(&self, ped_: u32,
network_: Option<String>,
x_: f32,
y_: f32,
z_: f32,
rot_x_: f32,
rot_y_: f32,
rot_z_: f32,
rot_order_: i32,
blend_duration_: f32,
allow_override_clone_update_: bool,
anim_dict_: Option<String>,
flags_: i32) -> ResultOfTaskMoveNetworkAdvancedByName {
    unsafe {
        let mut ped_ = ped_;
let mut network_ = sdk_helpers::create_c_string_ptr(network_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
let mut rot_order_ = rot_order_;
let mut blend_duration_ = blend_duration_;
let mut allow_override_clone_update_ = allow_override_clone_update_;
let mut anim_dict_ = sdk_helpers::create_c_string_ptr(anim_dict_);
let mut flags_ = flags_;
        let success = sdk::natives::task_move_network_advanced_by_name(
            ped_,
network_.as_ref().unwrap(),
x_,
y_,
z_,
rot_x_,
rot_y_,
rot_z_,
rot_order_,
blend_duration_,
allow_override_clone_update_,
anim_dict_.as_ref().unwrap(),
flags_,
        );
        
        
        ResultOfTaskMoveNetworkAdvancedByName {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_task_move_network_signal_float(&self, ped_: u32,
signal_name_: Option<String>,
value_: f32) -> ResultOfSetTaskMoveNetworkSignalFloat {
    unsafe {
        let mut ped_ = ped_;
let mut signal_name_ = sdk_helpers::create_c_string_ptr(signal_name_);
let mut value_ = value_;
        let success = sdk::natives::set_task_move_network_signal_float(
            ped_,
signal_name_.as_ref().unwrap(),
value_,
        );
        
        
        ResultOfSetTaskMoveNetworkSignalFloat {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_cover_point(&self, x_: f32,
y_: f32,
z_: f32,
direction_: f32,
usage_: i32,
height_: i32,
arc_: i32,
is_priority_: bool) -> ResultOfAddCoverPoint {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut direction_ = direction_;
let mut usage_ = usage_;
let mut height_ = height_;
let mut arc_ = arc_;
let mut is_priority_ = is_priority_;
        let success = sdk::natives::add_cover_point(
            &mut native_return,
x_,
y_,
z_,
direction_,
usage_,
height_,
arc_,
is_priority_,
        );
        let native_return = native_return;
        
        ResultOfAddCoverPoint {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_go_straight_to_coord(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
speed_: f32,
timeout_: i32,
target_heading_: f32,
distance_to_slide_: f32) -> ResultOfTaskGoStraightToCoord {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut speed_ = speed_;
let mut timeout_ = timeout_;
let mut target_heading_ = target_heading_;
let mut distance_to_slide_ = distance_to_slide_;
        let success = sdk::natives::task_go_straight_to_coord(
            ped_,
x_,
y_,
z_,
speed_,
timeout_,
target_heading_,
distance_to_slide_,
        );
        
        
        ResultOfTaskGoStraightToCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_drive_task_driving_style(&self, ped_: u32,
driving_style_: i32) -> ResultOfSetDriveTaskDrivingStyle {
    unsafe {
        let mut ped_ = ped_;
let mut driving_style_ = driving_style_;
        let success = sdk::natives::set_drive_task_driving_style(
            ped_,
driving_style_,
        );
        
        
        ResultOfSetDriveTaskDrivingStyle {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_heli_mission(&self, pilot_: u32,
aircraft_: u32,
target_vehicle_: u32,
target_ped_: u32,
destination_x_: f32,
destination_y_: f32,
destination_z_: f32,
mission_flag_: i32,
max_speed_: f32,
radius_: f32,
target_heading_: f32,
max_height_: i32,
min_height_: i32,
slow_down_distance_: f32,
behavior_flags_: i32) -> ResultOfTaskHeliMission {
    unsafe {
        let mut pilot_ = pilot_;
let mut aircraft_ = aircraft_;
let mut target_vehicle_ = target_vehicle_;
let mut target_ped_ = target_ped_;
let mut destination_x_ = destination_x_;
let mut destination_y_ = destination_y_;
let mut destination_z_ = destination_z_;
let mut mission_flag_ = mission_flag_;
let mut max_speed_ = max_speed_;
let mut radius_ = radius_;
let mut target_heading_ = target_heading_;
let mut max_height_ = max_height_;
let mut min_height_ = min_height_;
let mut slow_down_distance_ = slow_down_distance_;
let mut behavior_flags_ = behavior_flags_;
        let success = sdk::natives::task_heli_mission(
            pilot_,
aircraft_,
target_vehicle_,
target_ped_,
destination_x_,
destination_y_,
destination_z_,
mission_flag_,
max_speed_,
radius_,
target_heading_,
max_height_,
min_height_,
slow_down_distance_,
behavior_flags_,
        );
        
        
        ResultOfTaskHeliMission {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_all_cover_blocking_areas(&self, ) -> ResultOfRemoveAllCoverBlockingAreas {
    unsafe {
        
        let success = sdk::natives::remove_all_cover_blocking_areas(
            
        );
        
        
        ResultOfRemoveAllCoverBlockingAreas {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_primary_vehicle_task(&self, vehicle_: u32) -> ResultOfClearPrimaryVehicleTask {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::clear_primary_vehicle_task(
            vehicle_,
        );
        
        
        ResultOfClearPrimaryVehicleTask {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_waypoint_playback_resume(&self, vehicle_: u32) -> ResultOfVehicleWaypointPlaybackResume {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::vehicle_waypoint_playback_resume(
            vehicle_,
        );
        
        
        ResultOfVehicleWaypointPlaybackResume {
            success,
            ret: (),
            
        }
    }
}

    fn native_control_mounted_weapon(&self, ped_: u32) -> ResultOfControlMountedWeapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::control_mounted_weapon(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfControlMountedWeapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_reset_scenario_groups_enabled(&self, ) -> ResultOfResetScenarioGroupsEnabled {
    unsafe {
        
        let success = sdk::natives::reset_scenario_groups_enabled(
            
        );
        
        
        ResultOfResetScenarioGroupsEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_anim_phase(&self, entity_: u32,
phase_: f32,
priority_: i32,
secondary_: bool) -> ResultOfSetAnimPhase {
    unsafe {
        let mut entity_ = entity_;
let mut phase_ = phase_;
let mut priority_ = priority_;
let mut secondary_ = secondary_;
        let success = sdk::natives::set_anim_phase(
            entity_,
phase_,
priority_,
secondary_,
        );
        
        
        ResultOfSetAnimPhase {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_walking(&self, ped_: u32) -> ResultOfIsPedWalking {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_walking(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedWalking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_in_writhe(&self, ped_: u32) -> ResultOfIsPedInWrithe {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_in_writhe(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedInWrithe {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_waypoint_playback_going_on_for_ped(&self, ped_: u32) -> ResultOfIsWaypointPlaybackGoingOnForPed {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_waypoint_playback_going_on_for_ped(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsWaypointPlaybackGoingOnForPed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_wander_in_area(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32,
radius_: f32,
minimal_length_: f32,
time_between_walks_: f32) -> ResultOfTaskWanderInArea {
    unsafe {
        let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut minimal_length_ = minimal_length_;
let mut time_between_walks_ = time_between_walks_;
        let success = sdk::natives::task_wander_in_area(
            ped_,
x_,
y_,
z_,
radius_,
minimal_length_,
time_between_walks_,
        );
        
        
        ResultOfTaskWanderInArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_ped_tasks(&self, ped_: u32) -> ResultOfClearPedTasks {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_tasks(
            ped_,
        );
        
        
        ResultOfClearPedTasks {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_drive_to_coord(&self, ped_: u32,
vehicle_: u32,
x_: f32,
y_: f32,
z_: f32,
speed_: f32,
p6_: i32,
vehicle_model_: u32,
driving_mode_: i32,
stop_range_: f32,
straight_line_distance_: f32) -> ResultOfTaskVehicleDriveToCoord {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut speed_ = speed_;
let mut p6_ = p6_;
let mut vehicle_model_ = vehicle_model_;
let mut driving_mode_ = driving_mode_;
let mut stop_range_ = stop_range_;
let mut straight_line_distance_ = straight_line_distance_;
        let success = sdk::natives::task_vehicle_drive_to_coord(
            ped_,
vehicle_,
x_,
y_,
z_,
speed_,
p6_,
vehicle_model_,
driving_mode_,
stop_range_,
straight_line_distance_,
        );
        
        
        ResultOfTaskVehicleDriveToCoord {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_path_can_drop_from_height(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedPathCanDropFromHeight {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_path_can_drop_from_height(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedPathCanDropFromHeight {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_goto_entity_offset(&self, ped_: u32,
entity_: u32,
time_: i32,
seek_radius_: f32,
seek_angle_deg_: f32,
move_blend_ratio_: f32,
goto_entity_offset_flags_: i32) -> ResultOfTaskGotoEntityOffset {
    unsafe {
        let mut ped_ = ped_;
let mut entity_ = entity_;
let mut time_ = time_;
let mut seek_radius_ = seek_radius_;
let mut seek_angle_deg_ = seek_angle_deg_;
let mut move_blend_ratio_ = move_blend_ratio_;
let mut goto_entity_offset_flags_ = goto_entity_offset_flags_;
        let success = sdk::natives::task_goto_entity_offset(
            ped_,
entity_,
time_,
seek_radius_,
seek_angle_deg_,
move_blend_ratio_,
goto_entity_offset_flags_,
        );
        
        
        ResultOfTaskGotoEntityOffset {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_aim_at_ped(&self, ped_: u32,
target_: u32) -> ResultOfTaskVehicleAimAtPed {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
        let success = sdk::natives::task_vehicle_aim_at_ped(
            ped_,
target_,
        );
        
        
        ResultOfTaskVehicleAimAtPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_strafing(&self, ped_: u32) -> ResultOfIsPedStrafing {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_strafing(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedStrafing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_update_task_sweep_aim_entity(&self, ped_: u32,
entity_: u32) -> ResultOfUpdateTaskSweepAimEntity {
    unsafe {
        let mut ped_ = ped_;
let mut entity_ = entity_;
        let success = sdk::natives::update_task_sweep_aim_entity(
            ped_,
entity_,
        );
        
        
        ResultOfUpdateTaskSweepAimEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_driveby_task_target(&self, shooting_ped_: u32,
target_ped_: u32,
target_vehicle_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfSetDrivebyTaskTarget {
    unsafe {
        let mut shooting_ped_ = shooting_ped_;
let mut target_ped_ = target_ped_;
let mut target_vehicle_ = target_vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_driveby_task_target(
            shooting_ped_,
target_ped_,
target_vehicle_,
x_,
y_,
z_,
        );
        
        
        ResultOfSetDrivebyTaskTarget {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_stay_in_cover(&self, ped_: u32) -> ResultOfTaskStayInCover {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::task_stay_in_cover(
            ped_,
        );
        
        
        ResultOfTaskStayInCover {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_waypoint_distance(&self, p0_: i32) -> ResultOfGetPedWaypointDistance {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_ped_waypoint_distance(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfGetPedWaypointDistance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_waypoint_playback_start_shooting_at_ped(&self, ped_: u32,
ped2_: u32,
p2_: bool,
p3_: bool) -> ResultOfWaypointPlaybackStartShootingAtPed {
    unsafe {
        let mut ped_ = ped_;
let mut ped2_ = ped2_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::waypoint_playback_start_shooting_at_ped(
            ped_,
ped2_,
p2_,
p3_,
        );
        
        
        ResultOfWaypointPlaybackStartShootingAtPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_pause(&self, ped_: u32,
ms_: i32) -> ResultOfTaskPause {
    unsafe {
        let mut ped_ = ped_;
let mut ms_ = ms_;
        let success = sdk::natives::task_pause(
            ped_,
ms_,
        );
        
        
        ResultOfTaskPause {
            success,
            ret: (),
            
        }
    }
}

    fn native_open_sequence_task(&self, task_sequence_id_: i32) -> ResultOfOpenSequenceTask {
    unsafe {
        let mut task_sequence_id_ = task_sequence_id_;
        let success = sdk::natives::open_sequence_task(
            &mut task_sequence_id_,
        );
        let task_sequence_id_ = task_sequence_id_;
        
        ResultOfOpenSequenceTask {
            success,
            ret: (),
            task_sequence_id_
        }
    }
}

    fn native_task_play_anim(&self, ped_: u32,
anim_dictionary_: Option<String>,
animation_name_: Option<String>,
blend_in_speed_: f32,
blend_out_speed_: f32,
duration_: i32,
flag_: i32,
playback_rate_: f32,
lock_x_: bool,
lock_y_: bool,
lock_z_: bool) -> ResultOfTaskPlayAnim {
    unsafe {
        let mut ped_ = ped_;
let mut anim_dictionary_ = sdk_helpers::create_c_string_ptr(anim_dictionary_);
let mut animation_name_ = sdk_helpers::create_c_string_ptr(animation_name_);
let mut blend_in_speed_ = blend_in_speed_;
let mut blend_out_speed_ = blend_out_speed_;
let mut duration_ = duration_;
let mut flag_ = flag_;
let mut playback_rate_ = playback_rate_;
let mut lock_x_ = lock_x_;
let mut lock_y_ = lock_y_;
let mut lock_z_ = lock_z_;
        let success = sdk::natives::task_play_anim(
            ped_,
anim_dictionary_.as_ref().unwrap(),
animation_name_.as_ref().unwrap(),
blend_in_speed_,
blend_out_speed_,
duration_,
flag_,
playback_rate_,
lock_x_,
lock_y_,
lock_z_,
        );
        
        
        ResultOfTaskPlayAnim {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_rappel_down_wall_using_clipset_override(&self, ped_: u32,
x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
min_z_: f32,
rope_handle_: i32,
clip_set_: Option<String>,
p10_: i32) -> ResultOfTaskRappelDownWallUsingClipsetOverride {
    unsafe {
        let mut ped_ = ped_;
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut min_z_ = min_z_;
let mut rope_handle_ = rope_handle_;
let mut clip_set_ = sdk_helpers::create_c_string_ptr(clip_set_);
let mut p10_ = p10_;
        let success = sdk::natives::task_rappel_down_wall_using_clipset_override(
            ped_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
min_z_,
rope_handle_,
clip_set_.as_ref().unwrap(),
p10_,
        );
        
        
        ResultOfTaskRappelDownWallUsingClipsetOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_scenario_type_enabled(&self, scenario_type_: Option<String>,
toggle_: bool) -> ResultOfSetScenarioTypeEnabled {
    unsafe {
        let mut scenario_type_ = sdk_helpers::create_c_string_ptr(scenario_type_);
let mut toggle_ = toggle_;
        let success = sdk::natives::set_scenario_type_enabled(
            scenario_type_.as_ref().unwrap(),
toggle_,
        );
        
        
        ResultOfSetScenarioTypeEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_set_decision_maker(&self, ped_: u32,
decision_maker_id_: u32) -> ResultOfTaskSetDecisionMaker {
    unsafe {
        let mut ped_ = ped_;
let mut decision_maker_id_ = decision_maker_id_;
        let success = sdk::natives::task_set_decision_maker(
            ped_,
decision_maker_id_,
        );
        
        
        ResultOfTaskSetDecisionMaker {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_waypoint_route_offset(&self, ped_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfSetPedWaypointRouteOffset {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_ped_waypoint_route_offset(
            &mut native_return,
ped_,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOfSetPedWaypointRouteOffset {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_stop_anim_playback(&self, entity_: u32,
priority_: i32,
secondary_: bool) -> ResultOfStopAnimPlayback {
    unsafe {
        let mut entity_ = entity_;
let mut priority_ = priority_;
let mut secondary_ = secondary_;
        let success = sdk::natives::stop_anim_playback(
            entity_,
priority_,
secondary_,
        );
        
        
        ResultOfStopAnimPlayback {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_synchronized_scene(&self, ped_: u32,
scene_: i32,
anim_dictionary_: Option<String>,
animation_name_: Option<String>,
blend_in_: f32,
blend_out_: f32,
flags_: i32,
ragdoll_blocking_flags_: i32,
mover_blend_delta_: f32,
ik_flags_: i32) -> ResultOfTaskSynchronizedScene {
    unsafe {
        let mut ped_ = ped_;
let mut scene_ = scene_;
let mut anim_dictionary_ = sdk_helpers::create_c_string_ptr(anim_dictionary_);
let mut animation_name_ = sdk_helpers::create_c_string_ptr(animation_name_);
let mut blend_in_ = blend_in_;
let mut blend_out_ = blend_out_;
let mut flags_ = flags_;
let mut ragdoll_blocking_flags_ = ragdoll_blocking_flags_;
let mut mover_blend_delta_ = mover_blend_delta_;
let mut ik_flags_ = ik_flags_;
        let success = sdk::natives::task_synchronized_scene(
            ped_,
scene_,
anim_dictionary_.as_ref().unwrap(),
animation_name_.as_ref().unwrap(),
blend_in_,
blend_out_,
flags_,
ragdoll_blocking_flags_,
mover_blend_delta_,
ik_flags_,
        );
        
        
        ResultOfTaskSynchronizedScene {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_mission_coors_target(&self, ped_: u32,
vehicle_: u32,
x_: f32,
y_: f32,
z_: f32,
mission_: i32,
cruise_speed_: f32,
driving_style_: i32,
target_reached_: f32,
straight_line_distance_: f32,
drive_against_traffic_: bool) -> ResultOfTaskVehicleMissionCoorsTarget {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut mission_ = mission_;
let mut cruise_speed_ = cruise_speed_;
let mut driving_style_ = driving_style_;
let mut target_reached_ = target_reached_;
let mut straight_line_distance_ = straight_line_distance_;
let mut drive_against_traffic_ = drive_against_traffic_;
        let success = sdk::natives::task_vehicle_mission_coors_target(
            ped_,
vehicle_,
x_,
y_,
z_,
mission_,
cruise_speed_,
driving_style_,
target_reached_,
straight_line_distance_,
drive_against_traffic_,
        );
        
        
        ResultOfTaskVehicleMissionCoorsTarget {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_move_blend_ratio_walking(&self, ped_: u32) -> ResultOfIsMoveBlendRatioWalking {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_move_blend_ratio_walking(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsMoveBlendRatioWalking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_combat_ped(&self, ped_: u32,
target_ped_: u32,
combat_flags_: i32,
threat_response_flags_: i32) -> ResultOfTaskCombatPed {
    unsafe {
        let mut ped_ = ped_;
let mut target_ped_ = target_ped_;
let mut combat_flags_ = combat_flags_;
let mut threat_response_flags_ = threat_response_flags_;
        let success = sdk::natives::task_combat_ped(
            ped_,
target_ped_,
combat_flags_,
threat_response_flags_,
        );
        
        
        ResultOfTaskCombatPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_next_desired_move_state(&self, next_move_state_: f32) -> ResultOfSetNextDesiredMoveState {
    unsafe {
        let mut next_move_state_ = next_move_state_;
        let success = sdk::natives::set_next_desired_move_state(
            next_move_state_,
        );
        
        
        ResultOfSetNextDesiredMoveState {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_hands_up(&self, ped_: u32,
duration_: i32,
facing_ped_: u32,
time_to_face_ped_: i32,
flags_: i32) -> ResultOfTaskHandsUp {
    unsafe {
        let mut ped_ = ped_;
let mut duration_ = duration_;
let mut facing_ped_ = facing_ped_;
let mut time_to_face_ped_ = time_to_face_ped_;
let mut flags_ = flags_;
        let success = sdk::natives::task_hands_up(
            ped_,
duration_,
facing_ped_,
time_to_face_ped_,
flags_,
        );
        
        
        ResultOfTaskHandsUp {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_path_may_enter_water(&self, ped_: u32,
may_enter_water_: bool) -> ResultOfSetPedPathMayEnterWater {
    unsafe {
        let mut ped_ = ped_;
let mut may_enter_water_ = may_enter_water_;
        let success = sdk::natives::set_ped_path_may_enter_water(
            ped_,
may_enter_water_,
        );
        
        
        ResultOfSetPedPathMayEnterWater {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_arrest_ped(&self, ped_: u32,
target_: u32) -> ResultOfTaskArrestPed {
    unsafe {
        let mut ped_ = ped_;
let mut target_ = target_;
        let success = sdk::natives::task_arrest_ped(
            ped_,
target_,
        );
        
        
        ResultOfTaskArrestPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_waypoint_playback_going_on_for_vehicle(&self, vehicle_: u32) -> ResultOfIsWaypointPlaybackGoingOnForVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_waypoint_playback_going_on_for_vehicle(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsWaypointPlaybackGoingOnForVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_plane_goto_precise_vtol(&self, ped_: u32,
vehicle_: u32,
x_: f32,
y_: f32,
z_: f32,
flight_height_: i32,
min_height_above_terrain_: i32,
use_desired_orientation_: bool,
desired_orientation_: f32,
autopilot_: bool) -> ResultOfTaskPlaneGotoPreciseVtol {
    unsafe {
        let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut flight_height_ = flight_height_;
let mut min_height_above_terrain_ = min_height_above_terrain_;
let mut use_desired_orientation_ = use_desired_orientation_;
let mut desired_orientation_ = desired_orientation_;
let mut autopilot_ = autopilot_;
        let success = sdk::natives::task_plane_goto_precise_vtol(
            ped_,
vehicle_,
x_,
y_,
z_,
flight_height_,
min_height_above_terrain_,
use_desired_orientation_,
desired_orientation_,
autopilot_,
        );
        
        
        ResultOfTaskPlaneGotoPreciseVtol {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_scenario_group_exist(&self, scenario_group_: Option<String>) -> ResultOfDoesScenarioGroupExist {
    unsafe {
        let mut native_return = Default::default();
let mut scenario_group_ = sdk_helpers::create_c_string_ptr(scenario_group_);
        let success = sdk::natives::does_scenario_group_exist(
            &mut native_return,
scenario_group_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfDoesScenarioGroupExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_task_start_scenario_at_position(&self, ped_: u32,
scenario_name_: Option<String>,
x_: f32,
y_: f32,
z_: f32,
heading_: f32,
duration_: i32,
sitting_scenario_: bool,
teleport_: bool) -> ResultOfTaskStartScenarioAtPosition {
    unsafe {
        let mut ped_ = ped_;
let mut scenario_name_ = sdk_helpers::create_c_string_ptr(scenario_name_);
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut duration_ = duration_;
let mut sitting_scenario_ = sitting_scenario_;
let mut teleport_ = teleport_;
        let success = sdk::natives::task_start_scenario_at_position(
            ped_,
scenario_name_.as_ref().unwrap(),
x_,
y_,
z_,
heading_,
duration_,
sitting_scenario_,
teleport_,
        );
        
        
        ResultOfTaskStartScenarioAtPosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_cover_blocking_areas_at_position(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfRemoveCoverBlockingAreasAtPosition {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::remove_cover_blocking_areas_at_position(
            x_,
y_,
z_,
        );
        
        
        ResultOfRemoveCoverBlockingAreasAtPosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_task_vehicle_follow(&self, driver_: u32,
vehicle_: u32,
target_entity_: u32,
speed_: f32,
driving_style_: i32,
min_distance_: i32) -> ResultOfTaskVehicleFollow {
    unsafe {
        let mut driver_ = driver_;
let mut vehicle_ = vehicle_;
let mut target_entity_ = target_entity_;
let mut speed_ = speed_;
let mut driving_style_ = driving_style_;
let mut min_distance_ = min_distance_;
        let success = sdk::natives::task_vehicle_follow(
            driver_,
vehicle_,
target_entity_,
speed_,
driving_style_,
min_distance_,
        );
        
        
        ResultOfTaskVehicleFollow {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_waypoint_recording(&self, name_: Option<String>) -> ResultOfRemoveWaypointRecording {
    unsafe {
        let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::remove_waypoint_recording(
            name_.as_ref().unwrap(),
        );
        
        
        ResultOfRemoveWaypointRecording {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_vehicle_high_detail_model(&self, vehicle_: u32) -> ResultOfRemoveVehicleHighDetailModel {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::remove_vehicle_high_detail_model(
            vehicle_,
        );
        
        
        ResultOfRemoveVehicleHighDetailModel {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_mod_gen9_exclusive(&self, vehicle_: u32,
mod_type_: i32,
mod_index_: i32) -> ResultOfIsVehicleModGen9Exclusive {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut mod_type_ = mod_type_;
let mut mod_index_ = mod_index_;
        let success = sdk::natives::is_vehicle_mod_gen9_exclusive(
            &mut native_return,
vehicle_,
mod_type_,
mod_index_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleModGen9Exclusive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_class_estimated_max_speed(&self, vehicle_class_: i32) -> ResultOfGetVehicleClassEstimatedMaxSpeed {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_class_ = vehicle_class_;
        let success = sdk::natives::get_vehicle_class_estimated_max_speed(
            &mut native_return,
vehicle_class_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleClassEstimatedMaxSpeed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_tyre_wear_rate(&self, vehicle_: u32,
wheel_index_: i32,
multiplier_: f32) -> ResultOfSetTyreWearRate {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut wheel_index_ = wheel_index_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_tyre_wear_rate(
            vehicle_,
wheel_index_,
multiplier_,
        );
        
        
        ResultOfSetTyreWearRate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_arrive_distance_override_for_vehicle_persuit_attack(&self, vehicle_: u32,
p1_: f32) -> ResultOfSetArriveDistanceOverrideForVehiclePersuitAttack {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_arrive_distance_override_for_vehicle_persuit_attack(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetArriveDistanceOverrideForVehiclePersuitAttack {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_has_been_driven_flag(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleHasBeenDrivenFlag {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_has_been_driven_flag(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleHasBeenDrivenFlag {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_set_override_extenable_side_ratio(&self, p0_: i32,
p1_: i32) -> ResultOfVehicleSetOverrideExtenableSideRatio {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::vehicle_set_override_extenable_side_ratio(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfVehicleSetOverrideExtenableSideRatio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_last_shunt_vehicle(&self, vehicle_: u32) -> ResultOfGetLastShuntVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_last_shunt_vehicle(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetLastShuntVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_vehicle_disabled_by_emp(&self, vehicle_: u32) -> ResultOfGetIsVehicleDisabledByEmp {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_is_vehicle_disabled_by_emp(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetIsVehicleDisabledByEmp {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_random_vehicle_model_in_memory(&self, p0_: bool,
model_hash_: u32,
success_indicator_: i32) -> ResultOfGetRandomVehicleModelInMemory {
    unsafe {
        let mut p0_ = p0_;
let mut model_hash_ = model_hash_;
let mut success_indicator_ = success_indicator_;
        let success = sdk::natives::get_random_vehicle_model_in_memory(
            &mut model_hash_,
&mut success_indicator_,
p0_,
        );
        let model_hash_ = model_hash_;
let success_indicator_ = success_indicator_;
        
        ResultOfGetRandomVehicleModelInMemory {
            success,
            ret: (),
            model_hash_,
success_indicator_
        }
    }
}

    fn native_set_vehicle_turret_target(&self, vehicle_: u32,
p1_: bool,
x_: f32,
y_: f32,
z_: f32,
p5_: bool) -> ResultOfSetVehicleTurretTarget {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p5_ = p5_;
        let success = sdk::natives::set_vehicle_turret_target(
            vehicle_,
p1_,
x_,
y_,
z_,
p5_,
        );
        
        
        ResultOfSetVehicleTurretTarget {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_should_lerp_from_ai_to_full_recording(&self, vehicle_: u32,
p1_: bool) -> ResultOfSetShouldLerpFromAiToFullRecording {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_should_lerp_from_ai_to_full_recording(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetShouldLerpFromAiToFullRecording {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_inactive_during_playback(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleInactiveDuringPlayback {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_inactive_during_playback(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleInactiveDuringPlayback {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_can_eject_passengers_if_locked(&self, p0_: i32,
p1_: i32) -> ResultOfSetVehicleCanEjectPassengersIfLocked {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_can_eject_passengers_if_locked(
            p0_,
p1_,
        );
        
        
        ResultOfSetVehicleCanEjectPassengersIfLocked {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_drops_money_when_blown_up(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleDropsMoneyWhenBlownUp {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_drops_money_when_blown_up(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleDropsMoneyWhenBlownUp {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_preload_mods_finished(&self, vehicle_: u32) -> ResultOfHasPreloadModsFinished {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::has_preload_mods_finished(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfHasPreloadModsFinished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_is_racing(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleIsRacing {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_is_racing(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleIsRacing {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_train_carriage(&self, train_: u32,
trailer_number_: i32) -> ResultOfGetTrainCarriage {
    unsafe {
        let mut native_return = Default::default();
let mut train_ = train_;
let mut trailer_number_ = trailer_number_;
        let success = sdk::natives::get_train_carriage(
            &mut native_return,
train_,
trailer_number_,
        );
        let native_return = native_return;
        
        ResultOfGetTrainCarriage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_submarine_number_of_air_leaks(&self, submarine_: u32) -> ResultOfGetSubmarineNumberOfAirLeaks {
    unsafe {
        let mut native_return = Default::default();
let mut submarine_ = submarine_;
        let success = sdk::natives::get_submarine_number_of_air_leaks(
            &mut native_return,
submarine_,
        );
        let native_return = native_return;
        
        ResultOfGetSubmarineNumberOfAirLeaks {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_rudder_broken(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleRudderBroken {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_rudder_broken(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleRudderBroken {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_heli_combat_offset(&self, vehicle_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfSetHeliCombatOffset {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_heli_combat_offset(
            vehicle_,
x_,
y_,
z_,
        );
        
        
        ResultOfSetHeliCombatOffset {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_vehicle_generator_area_of_interest(&self, ) -> ResultOfClearVehicleGeneratorAreaOfInterest {
    unsafe {
        
        let success = sdk::natives::clear_vehicle_generator_area_of_interest(
            
        );
        
        
        ResultOfClearVehicleGeneratorAreaOfInterest {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_boat_disable_avoidance(&self, vehicle_: u32,
p1_: bool) -> ResultOfSetBoatDisableAvoidance {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_boat_disable_avoidance(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetBoatDisableAvoidance {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_influences_wanted_level(&self, p0_: i32,
p1_: bool) -> ResultOfSetVehicleInfluencesWantedLevel {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_influences_wanted_level(
            p0_,
p1_,
        );
        
        
        ResultOfSetVehicleInfluencesWantedLevel {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_hydraulic_suspension_raise_factor(&self, vehicle_: u32,
wheel_id_: i32) -> ResultOfGetHydraulicSuspensionRaiseFactor {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut wheel_id_ = wheel_id_;
        let success = sdk::natives::get_hydraulic_suspension_raise_factor(
            &mut native_return,
vehicle_,
wheel_id_,
        );
        let native_return = native_return;
        
        ResultOfGetHydraulicSuspensionRaiseFactor {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_plane_section_damage_scale(&self, vehicle_: u32,
p1_: i32,
p2_: i32) -> ResultOfSetPlaneSectionDamageScale {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_plane_section_damage_scale(
            vehicle_,
p1_,
p2_,
        );
        
        
        ResultOfSetPlaneSectionDamageScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_start_parachuting(&self, vehicle_: u32,
active_: bool) -> ResultOfVehicleStartParachuting {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut active_ = active_;
        let success = sdk::natives::vehicle_start_parachuting(
            vehicle_,
active_,
        );
        
        
        ResultOfVehicleStartParachuting {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_can_deform_wheels(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleCanDeformWheels {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_can_deform_wheels(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleCanDeformWheels {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_pickup_rope_type(&self, p0_: i32,
p1_: i32) -> ResultOfSetCargobobPickupRopeType {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cargobob_pickup_rope_type(
            p0_,
p1_,
        );
        
        
        ResultOfSetCargobobPickupRopeType {
            success,
            ret: (),
            
        }
    }
}

    fn native_detach_vehicle_from_cargobob(&self, vehicle_: u32,
cargobob_: u32) -> ResultOfDetachVehicleFromCargobob {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut cargobob_ = cargobob_;
        let success = sdk::natives::detach_vehicle_from_cargobob(
            vehicle_,
cargobob_,
        );
        
        
        ResultOfDetachVehicleFromCargobob {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_total_duration_of_vehicle_recording(&self, recording_: i32,
script_: Option<String>) -> ResultOfGetTotalDurationOfVehicleRecording {
    unsafe {
        let mut native_return = Default::default();
let mut recording_ = recording_;
let mut script_ = sdk_helpers::create_c_string_ptr(script_);
        let success = sdk::natives::get_total_duration_of_vehicle_recording(
            &mut native_return,
recording_,
script_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfGetTotalDurationOfVehicleRecording {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_window_tint(&self, vehicle_: u32) -> ResultOfGetVehicleWindowTint {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_window_tint(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleWindowTint {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_allow_boat_boom_to_animate(&self, vehicle_: u32,
toggle_: bool) -> ResultOfAllowBoatBoomToAnimate {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::allow_boat_boom_to_animate(
            vehicle_,
toggle_,
        );
        
        
        ResultOfAllowBoatBoomToAnimate {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_all_garage_activity(&self, ) -> ResultOfStopAllGarageActivity {
    unsafe {
        
        let success = sdk::natives::stop_all_garage_activity(
            
        );
        
        
        ResultOfStopAllGarageActivity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_model_is_suppressed(&self, model_: u32,
suppressed_: bool) -> ResultOfSetVehicleModelIsSuppressed {
    unsafe {
        let mut model_ = model_;
let mut suppressed_ = suppressed_;
        let success = sdk::natives::set_vehicle_model_is_suppressed(
            model_,
suppressed_,
        );
        
        
        ResultOfSetVehicleModelIsSuppressed {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_total_duration_of_vehicle_recording_id(&self, id_: i32) -> ResultOfGetTotalDurationOfVehicleRecordingId {
    unsafe {
        let mut native_return = Default::default();
let mut id_ = id_;
        let success = sdk::natives::get_total_duration_of_vehicle_recording_id(
            &mut native_return,
id_,
        );
        let native_return = native_return;
        
        ResultOfGetTotalDurationOfVehicleRecordingId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_road_node_speed_zone(&self, speedzone_: i32) -> ResultOfRemoveRoadNodeSpeedZone {
    unsafe {
        let mut native_return = Default::default();
let mut speedzone_ = speedzone_;
        let success = sdk::natives::remove_road_node_speed_zone(
            &mut native_return,
speedzone_,
        );
        let native_return = native_return;
        
        ResultOfRemoveRoadNodeSpeedZone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_handling_override(&self, vehicle_: u32,
hash_: u32) -> ResultOfSetVehicleHandlingOverride {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut hash_ = hash_;
        let success = sdk::natives::set_vehicle_handling_override(
            vehicle_,
hash_,
        );
        
        
        ResultOfSetVehicleHandlingOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_short_slowdown_for_landing(&self, vehicle_: u32) -> ResultOfSetShortSlowdownForLanding {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_short_slowdown_for_landing(
            vehicle_,
        );
        
        
        ResultOfSetShortSlowdownForLanding {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_dont_process_vehicle_glass(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetDontProcessVehicleGlass {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_dont_process_vehicle_glass(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetDontProcessVehicleGlass {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_turret_speed_this_frame(&self, vehicle_: u32,
speed_: f32) -> ResultOfSetVehicleTurretSpeedThisFrame {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut speed_ = speed_;
        let success = sdk::natives::set_vehicle_turret_speed_this_frame(
            vehicle_,
speed_,
        );
        
        
        ResultOfSetVehicleTurretSpeedThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_fixed(&self, vehicle_: u32) -> ResultOfSetVehicleFixed {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_vehicle_fixed(
            vehicle_,
        );
        
        
        ResultOfSetVehicleFixed {
            success,
            ret: (),
            
        }
    }
}

    fn native_are_all_vehicle_windows_intact(&self, vehicle_: u32) -> ResultOfAreAllVehicleWindowsIntact {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::are_all_vehicle_windows_intact(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfAreAllVehicleWindowsIntact {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_can_use_hydraulics(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetCanUseHydraulics {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_can_use_hydraulics(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetCanUseHydraulics {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_extra_exist(&self, vehicle_: u32,
extra_id_: i32) -> ResultOfDoesExtraExist {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut extra_id_ = extra_id_;
        let success = sdk::natives::does_extra_exist(
            &mut native_return,
vehicle_,
extra_id_,
        );
        let native_return = native_return;
        
        ResultOfDoesExtraExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_in_burnout(&self, vehicle_: u32) -> ResultOfIsVehicleInBurnout {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_in_burnout(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleInBurnout {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_wheelie_enabled(&self, vehicle_: u32,
enabled_: bool) -> ResultOfSetWheelieEnabled {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut enabled_ = enabled_;
        let success = sdk::natives::set_wheelie_enabled(
            vehicle_,
enabled_,
        );
        
        
        ResultOfSetWheelieEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_vehicle_explosions_damage(&self, toggle_: bool) -> ResultOfSetDisableVehicleExplosionsDamage {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_vehicle_explosions_damage(
            toggle_,
        );
        
        
        ResultOfSetDisableVehicleExplosionsDamage {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_attached_to_tow_truck(&self, tow_truck_: u32,
vehicle_: u32) -> ResultOfIsVehicleAttachedToTowTruck {
    unsafe {
        let mut native_return = Default::default();
let mut tow_truck_ = tow_truck_;
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_attached_to_tow_truck(
            &mut native_return,
tow_truck_,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleAttachedToTowTruck {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_searchlight(&self, heli_: u32,
toggle_: bool,
can_be_used_by_a_i_: bool) -> ResultOfSetVehicleSearchlight {
    unsafe {
        let mut heli_ = heli_;
let mut toggle_ = toggle_;
let mut can_be_used_by_a_i_ = can_be_used_by_a_i_;
        let success = sdk::natives::set_vehicle_searchlight(
            heli_,
toggle_,
can_be_used_by_a_i_,
        );
        
        
        ResultOfSetVehicleSearchlight {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_train_cruise_speed(&self, train_: u32,
speed_: f32) -> ResultOfSetTrainCruiseSpeed {
    unsafe {
        let mut train_ = train_;
let mut speed_ = speed_;
        let success = sdk::natives::set_train_cruise_speed(
            train_,
speed_,
        );
        
        
        ResultOfSetTrainCruiseSpeed {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_vehicle_on_to_trailer(&self, vehicle_: u32,
trailer_: u32,
offset_x_: f32,
offset_y_: f32,
offset_z_: f32,
coords_x_: f32,
coords_y_: f32,
coords_z_: f32,
rotation_x_: f32,
rotation_y_: f32,
rotation_z_: f32,
disable_collisions_: f32) -> ResultOfAttachVehicleOnToTrailer {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut trailer_ = trailer_;
let mut offset_x_ = offset_x_;
let mut offset_y_ = offset_y_;
let mut offset_z_ = offset_z_;
let mut coords_x_ = coords_x_;
let mut coords_y_ = coords_y_;
let mut coords_z_ = coords_z_;
let mut rotation_x_ = rotation_x_;
let mut rotation_y_ = rotation_y_;
let mut rotation_z_ = rotation_z_;
let mut disable_collisions_ = disable_collisions_;
        let success = sdk::natives::attach_vehicle_on_to_trailer(
            vehicle_,
trailer_,
offset_x_,
offset_y_,
offset_z_,
coords_x_,
coords_y_,
coords_z_,
rotation_x_,
rotation_y_,
rotation_z_,
disable_collisions_,
        );
        
        
        ResultOfAttachVehicleOnToTrailer {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_cargobob_have_pick_up_rope(&self, cargobob_: u32) -> ResultOfDoesCargobobHavePickUpRope {
    unsafe {
        let mut native_return = Default::default();
let mut cargobob_ = cargobob_;
        let success = sdk::natives::does_cargobob_have_pick_up_rope(
            &mut native_return,
cargobob_,
        );
        let native_return = native_return;
        
        ResultOfDoesCargobobHavePickUpRope {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_custom_path_node_streaming_radius(&self, vehicle_: u32,
p1_: f32) -> ResultOfSetVehicleCustomPathNodeStreamingRadius {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_custom_path_node_streaming_radius(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetVehicleCustomPathNodeStreamingRadius {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_friction_override(&self, vehicle_: u32,
friction_: f32) -> ResultOfSetVehicleFrictionOverride {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut friction_ = friction_;
        let success = sdk::natives::set_vehicle_friction_override(
            vehicle_,
friction_,
        );
        
        
        ResultOfSetVehicleFrictionOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_can_leak_petrol(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleCanLeakPetrol {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_can_leak_petrol(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleCanLeakPetrol {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_convertible_roof_latch_state(&self, vehicle_: u32,
state_: bool) -> ResultOfSetConvertibleRoofLatchState {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::set_convertible_roof_latch_state(
            vehicle_,
state_,
        );
        
        
        ResultOfSetConvertibleRoofLatchState {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_has_unbreakable_lights(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleHasUnbreakableLights {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_has_unbreakable_lights(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleHasUnbreakableLights {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_open_rear_doors_on_explosion(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetOpenRearDoorsOnExplosion {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_open_rear_doors_on_explosion(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetOpenRearDoorsOnExplosion {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_set_enable_ramp_car_side_impulse(&self, p0_: i32,
p1_: i32) -> ResultOfVehicleSetEnableRampCarSideImpulse {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::vehicle_set_enable_ramp_car_side_impulse(
            p0_,
p1_,
        );
        
        
        ResultOfVehicleSetEnableRampCarSideImpulse {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_vehicle_asset_loaded(&self, vehicle_asset_: i32) -> ResultOfHasVehicleAssetLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_asset_ = vehicle_asset_;
        let success = sdk::natives::has_vehicle_asset_loaded(
            &mut native_return,
vehicle_asset_,
        );
        let native_return = native_return;
        
        ResultOfHasVehicleAssetLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_playback_going_on_for_vehicle(&self, vehicle_: u32) -> ResultOfIsPlaybackGoingOnForVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_playback_going_on_for_vehicle(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsPlaybackGoingOnForVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_trailer_vehicle(&self, vehicle_: u32,
trailer_: u32) -> ResultOfGetVehicleTrailerVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut trailer_ = trailer_;
        let success = sdk::natives::get_vehicle_trailer_vehicle(
            &mut native_return,
&mut trailer_,
vehicle_,
        );
        let native_return = native_return;
let trailer_ = trailer_;
        
        ResultOfGetVehicleTrailerVehicle {
            success,
            ret: native_return,
            trailer_
        }
    }
}

    fn native_set_vehicle_stays_frozen_when_cleaned_up(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleStaysFrozenWhenCleanedUp {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_stays_frozen_when_cleaned_up(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleStaysFrozenWhenCleanedUp {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_use_alternate_handling(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleUseAlternateHandling {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_use_alternate_handling(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleUseAlternateHandling {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_wheels_retracted(&self, vehicle_: u32) -> ResultOfGetIsWheelsRetracted {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_is_wheels_retracted(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetIsWheelsRetracted {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_allow_homing_missle_lockon_synced(&self, vehicle_: u32,
can_be_locked_on_: bool,
p2_: bool) -> ResultOfSetVehicleAllowHomingMissleLockonSynced {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut can_be_locked_on_ = can_be_locked_on_;
let mut p2_ = p2_;
        let success = sdk::natives::set_vehicle_allow_homing_missle_lockon_synced(
            vehicle_,
can_be_locked_on_,
p2_,
        );
        
        
        ResultOfSetVehicleAllowHomingMissleLockonSynced {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_high_detail(&self, vehicle_: u32) -> ResultOfIsVehicleHighDetail {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_high_detail(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleHighDetail {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_mod_kit(&self, vehicle_: u32,
mod_kit_: i32) -> ResultOfSetVehicleModKit {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut mod_kit_ = mod_kit_;
        let success = sdk::natives::set_vehicle_mod_kit(
            vehicle_,
mod_kit_,
        );
        
        
        ResultOfSetVehicleModKit {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_playback_recorded_vehicle_update(&self, vehicle_: u32,
p1_: bool) -> ResultOfForcePlaybackRecordedVehicleUpdate {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::force_playback_recorded_vehicle_update(
            vehicle_,
p1_,
        );
        
        
        ResultOfForcePlaybackRecordedVehicleUpdate {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_exclude_from_pickup_entity(&self, p0_: i32,
p1_: i32) -> ResultOfSetCargobobExcludeFromPickupEntity {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cargobob_exclude_from_pickup_entity(
            p0_,
p1_,
        );
        
        
        ResultOfSetCargobobExcludeFromPickupEntity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_act_as_if_high_speed_for_frag_smashing(&self, vehicle_: u32,
p1_: bool) -> ResultOfSetVehicleActAsIfHighSpeedForFragSmashing {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_act_as_if_high_speed_for_frag_smashing(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetVehicleActAsIfHighSpeedForFragSmashing {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_headlight_shadows(&self, vehicle_: u32,
p1_: i32) -> ResultOfSetVehicleHeadlightShadows {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_headlight_shadows(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetVehicleHeadlightShadows {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_extra_colours(&self, vehicle_: u32,
pearlescent_color_: i32,
wheel_color_: i32) -> ResultOfSetVehicleExtraColours {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut pearlescent_color_ = pearlescent_color_;
let mut wheel_color_ = wheel_color_;
        let success = sdk::natives::set_vehicle_extra_colours(
            vehicle_,
pearlescent_color_,
wheel_color_,
        );
        
        
        ResultOfSetVehicleExtraColours {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_doors_locked_for_all_teams(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleDoorsLockedForAllTeams {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_doors_locked_for_all_teams(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleDoorsLockedForAllTeams {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_rotation_of_vehicle_recording_at_time(&self, recording_: i32,
time_: f32,
script_: Option<String>) -> ResultOfGetRotationOfVehicleRecordingAtTime {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut recording_ = recording_;
let mut time_ = time_;
let mut script_ = sdk_helpers::create_c_string_ptr(script_);
        let success = sdk::natives::get_rotation_of_vehicle_recording_at_time(
            native_return.pin_mut(),
recording_,
time_,
script_.as_ref().unwrap(),
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetRotationOfVehicleRecordingAtTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_can_engine_missfire(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleCanEngineMissfire {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_can_engine_missfire(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleCanEngineMissfire {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_active_for_ped_navigation(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleActiveForPedNavigation {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_active_for_ped_navigation(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleActiveForPedNavigation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_weapon_blade_forces(&self, toggle_: bool) -> ResultOfSetDisableWeaponBladeForces {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_weapon_blade_forces(
            toggle_,
        );
        
        
        ResultOfSetDisableWeaponBladeForces {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_recording_id(&self, recording_: i32,
script_: Option<String>) -> ResultOfGetVehicleRecordingId {
    unsafe {
        let mut native_return = Default::default();
let mut recording_ = recording_;
let mut script_ = sdk_helpers::create_c_string_ptr(script_);
        let success = sdk::natives::get_vehicle_recording_id(
            &mut native_return,
recording_,
script_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfGetVehicleRecordingId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_using_vehicle_door(&self, vehicle_: u32,
doord_: i32) -> ResultOfGetPedUsingVehicleDoor {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut doord_ = doord_;
        let success = sdk::natives::get_ped_using_vehicle_door(
            &mut native_return,
vehicle_,
doord_,
        );
        let native_return = native_return;
        
        ResultOfGetPedUsingVehicleDoor {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_train_track_spawn_frequency(&self, track_index_: i32,
frequency_: i32) -> ResultOfSetTrainTrackSpawnFrequency {
    unsafe {
        let mut track_index_ = track_index_;
let mut frequency_ = frequency_;
        let success = sdk::natives::set_train_track_spawn_frequency(
            track_index_,
frequency_,
        );
        
        
        ResultOfSetTrainTrackSpawnFrequency {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_vehicle_wheels(&self, vehicle_: u32,
toggle_: bool) -> ResultOfResetVehicleWheels {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::reset_vehicle_wheels(
            vehicle_,
toggle_,
        );
        
        
        ResultOfResetVehicleWheels {
            success,
            ret: (),
            
        }
    }
}

    fn native_delete_script_vehicle_generator(&self, vehicle_generator_: i32) -> ResultOfDeleteScriptVehicleGenerator {
    unsafe {
        let mut vehicle_generator_ = vehicle_generator_;
        let success = sdk::natives::delete_script_vehicle_generator(
            vehicle_generator_,
        );
        
        
        ResultOfDeleteScriptVehicleGenerator {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_reduce_grip(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleReduceGrip {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_reduce_grip(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleReduceGrip {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_seat_free(&self, vehicle_: u32,
seat_index_: i32,
is_task_running_: bool) -> ResultOfIsVehicleSeatFree {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut seat_index_ = seat_index_;
let mut is_task_running_ = is_task_running_;
        let success = sdk::natives::is_vehicle_seat_free(
            &mut native_return,
vehicle_,
seat_index_,
is_task_running_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleSeatFree {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_allow_train_to_be_removed_by_population(&self, p0_: i32) -> ResultOfAllowTrainToBeRemovedByPopulation {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::allow_train_to_be_removed_by_population(
            p0_,
        );
        
        
        ResultOfAllowTrainToBeRemovedByPopulation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_respects_locks_when_has_driver(&self, vehicle_: u32,
p1_: bool) -> ResultOfSetVehicleRespectsLocksWhenHasDriver {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_respects_locks_when_has_driver(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetVehicleRespectsLocksWhenHasDriver {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_plane_aileron(&self, vehicle_: u32,
p1_: bool,
p2_: bool) -> ResultOfDisablePlaneAileron {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::disable_plane_aileron(
            vehicle_,
p1_,
p2_,
        );
        
        
        ResultOfDisablePlaneAileron {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_density_multiplier_this_frame(&self, multiplier_: f32) -> ResultOfSetVehicleDensityMultiplierThisFrame {
    unsafe {
        let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_vehicle_density_multiplier_this_frame(
            multiplier_,
        );
        
        
        ResultOfSetVehicleDensityMultiplierThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_engine_on(&self, vehicle_: u32,
value_: bool,
instantly_: bool,
disable_auto_start_: bool) -> ResultOfSetVehicleEngineOn {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut value_ = value_;
let mut instantly_ = instantly_;
let mut disable_auto_start_ = disable_auto_start_;
        let success = sdk::natives::set_vehicle_engine_on(
            vehicle_,
value_,
instantly_,
disable_auto_start_,
        );
        
        
        ResultOfSetVehicleEngineOn {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_number_of_passengers(&self, vehicle_: u32,
include_driver_: bool,
include_dead_occupants_: bool) -> ResultOfGetVehicleNumberOfPassengers {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut include_driver_ = include_driver_;
let mut include_dead_occupants_ = include_dead_occupants_;
        let success = sdk::natives::get_vehicle_number_of_passengers(
            &mut native_return,
vehicle_,
include_driver_,
include_dead_occupants_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleNumberOfPassengers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_anchor_boat_here_ignore_players(&self, vehicle_: u32) -> ResultOfCanAnchorBoatHereIgnorePlayers {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::can_anchor_boat_here_ignore_players(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfCanAnchorBoatHereIgnorePlayers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_disable_pretend_occupants(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetDisablePretendOccupants {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_pretend_occupants(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetDisablePretendOccupants {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_door_lock_status(&self, vehicle_: u32) -> ResultOfGetVehicleDoorLockStatus {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_door_lock_status(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleDoorLockStatus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_vehicle_have_weapons(&self, vehicle_: u32) -> ResultOfDoesVehicleHaveWeapons {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::does_vehicle_have_weapons(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfDoesVehicleHaveWeapons {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_bring_vehicle_to_halt(&self, vehicle_: u32,
distance_: f32,
duration_: i32,
p3_: bool) -> ResultOfBringVehicleToHalt {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut distance_ = distance_;
let mut duration_ = duration_;
let mut p3_ = p3_;
        let success = sdk::natives::bring_vehicle_to_halt(
            vehicle_,
distance_,
duration_,
p3_,
        );
        
        
        ResultOfBringVehicleToHalt {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_far_draw_vehicles(&self, toggle_: bool) -> ResultOfSetFarDrawVehicles {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_far_draw_vehicles(
            toggle_,
        );
        
        
        ResultOfSetFarDrawVehicles {
            success,
            ret: (),
            
        }
    }
}

    fn native_can_anchor_boat_here(&self, vehicle_: u32) -> ResultOfCanAnchorBoatHere {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::can_anchor_boat_here(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfCanAnchorBoatHere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_disable_bmx_extra_trick_forces(&self, p0_: i32) -> ResultOfSetDisableBmxExtraTrickForces {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_disable_bmx_extra_trick_forces(
            p0_,
        );
        
        
        ResultOfSetDisableBmxExtraTrickForces {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_explode_from_body_damage_on_collision(&self, vehicle_: u32,
value_: f32) -> ResultOfSetDisableExplodeFromBodyDamageOnCollision {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut value_ = value_;
        let success = sdk::natives::set_disable_explode_from_body_damage_on_collision(
            vehicle_,
value_,
        );
        
        
        ResultOfSetDisableExplodeFromBodyDamageOnCollision {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_generates_engine_shocking_events(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleGeneratesEngineShockingEvents {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_generates_engine_shocking_events(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleGeneratesEngineShockingEvents {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_bumper_bouncing(&self, vehicle_: u32,
front_bumper_: bool) -> ResultOfIsVehicleBumperBouncing {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut front_bumper_ = front_bumper_;
        let success = sdk::natives::is_vehicle_bumper_bouncing(
            &mut native_return,
vehicle_,
front_bumper_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleBumperBouncing {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_hydraulics_control(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetHydraulicsControl {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_hydraulics_control(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetHydraulicsControl {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_set_ramp_and_ramming_cars_take_damage(&self, vehicle_: u32,
toggle_: bool) -> ResultOfVehicleSetRampAndRammingCarsTakeDamage {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::vehicle_set_ramp_and_ramming_cars_take_damage(
            vehicle_,
toggle_,
        );
        
        
        ResultOfVehicleSetRampAndRammingCarsTakeDamage {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_layout_hash(&self, vehicle_: u32) -> ResultOfGetVehicleLayoutHash {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_layout_hash(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleLayoutHash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_any_ped_rappelling_from_heli(&self, vehicle_: u32) -> ResultOfIsAnyPedRappellingFromHeli {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_any_ped_rappelling_from_heli(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsAnyPedRappellingFromHeli {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_class(&self, vehicle_: u32) -> ResultOfGetVehicleClass {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_class(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleClass {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_stopped_at_traffic_lights(&self, vehicle_: u32) -> ResultOfIsVehicleStoppedAtTrafficLights {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_stopped_at_traffic_lights(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleStoppedAtTrafficLights {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_increase_wheel_crush_damage(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetIncreaseWheelCrushDamage {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_increase_wheel_crush_damage(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetIncreaseWheelCrushDamage {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_vehicle_to_tow_truck(&self, tow_truck_: u32,
vehicle_: u32,
rear_: bool,
hook_offset_x_: f32,
hook_offset_y_: f32,
hook_offset_z_: f32) -> ResultOfAttachVehicleToTowTruck {
    unsafe {
        let mut tow_truck_ = tow_truck_;
let mut vehicle_ = vehicle_;
let mut rear_ = rear_;
let mut hook_offset_x_ = hook_offset_x_;
let mut hook_offset_y_ = hook_offset_y_;
let mut hook_offset_z_ = hook_offset_z_;
        let success = sdk::natives::attach_vehicle_to_tow_truck(
            tow_truck_,
vehicle_,
rear_,
hook_offset_x_,
hook_offset_y_,
hook_offset_z_,
        );
        
        
        ResultOfAttachVehicleToTowTruck {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_wheels_can_break(&self, vehicle_: u32,
enabled_: bool) -> ResultOfSetVehicleWheelsCanBreak {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut enabled_ = enabled_;
        let success = sdk::natives::set_vehicle_wheels_can_break(
            vehicle_,
enabled_,
        );
        
        
        ResultOfSetVehicleWheelsCanBreak {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_playback_recorded_vehicle_using_ai(&self, vehicle_: u32,
recording_: i32,
script_: Option<String>,
speed_: f32,
driving_style_: i32) -> ResultOfStartPlaybackRecordedVehicleUsingAi {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut recording_ = recording_;
let mut script_ = sdk_helpers::create_c_string_ptr(script_);
let mut speed_ = speed_;
let mut driving_style_ = driving_style_;
        let success = sdk::natives::start_playback_recorded_vehicle_using_ai(
            vehicle_,
recording_,
script_.as_ref().unwrap(),
speed_,
driving_style_,
        );
        
        
        ResultOfStartPlaybackRecordedVehicleUsingAi {
            success,
            ret: (),
            
        }
    }
}

    fn native_toggle_vehicle_mod(&self, vehicle_: u32,
mod_type_: i32,
toggle_: bool) -> ResultOfToggleVehicleMod {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut mod_type_ = mod_type_;
let mut toggle_ = toggle_;
        let success = sdk::natives::toggle_vehicle_mod(
            vehicle_,
mod_type_,
toggle_,
        );
        
        
        ResultOfToggleVehicleMod {
            success,
            ret: (),
            
        }
    }
}

    fn native_transform_to_car(&self, vehicle_: u32,
no_animation_: bool) -> ResultOfTransformToCar {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut no_animation_ = no_animation_;
        let success = sdk::natives::transform_to_car(
            vehicle_,
no_animation_,
        );
        
        
        ResultOfTransformToCar {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_plane_engine_health(&self, vehicle_: u32,
health_: f32) -> ResultOfSetPlaneEngineHealth {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut health_ = health_;
        let success = sdk::natives::set_plane_engine_health(
            vehicle_,
health_,
        );
        
        
        ResultOfSetPlaneEngineHealth {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_trailer_inverse_mass_scale(&self, vehicle_: u32,
p1_: f32) -> ResultOfSetTrailerInverseMassScale {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_trailer_inverse_mass_scale(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetTrailerInverseMassScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_neon_enabled(&self, vehicle_: u32,
index_: i32,
toggle_: bool) -> ResultOfSetVehicleNeonEnabled {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut index_ = index_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_neon_enabled(
            vehicle_,
index_,
toggle_,
        );
        
        
        ResultOfSetVehicleNeonEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_model_number_of_seats(&self, model_hash_: u32) -> ResultOfGetVehicleModelNumberOfSeats {
    unsafe {
        let mut native_return = Default::default();
let mut model_hash_ = model_hash_;
        let success = sdk::natives::get_vehicle_model_number_of_seats(
            &mut native_return,
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleModelNumberOfSeats {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_garbage_trucks(&self, toggle_: bool) -> ResultOfSetGarbageTrucks {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_garbage_trucks(
            toggle_,
        );
        
        
        ResultOfSetGarbageTrucks {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_has_been_owned_by_player(&self, vehicle_: u32,
owned_: bool) -> ResultOfSetVehicleHasBeenOwnedByPlayer {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut owned_ = owned_;
        let success = sdk::natives::set_vehicle_has_been_owned_by_player(
            vehicle_,
owned_,
        );
        
        
        ResultOfSetVehicleHasBeenOwnedByPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_disable_towing(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleDisableTowing {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_disable_towing(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleDisableTowing {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_livery(&self, vehicle_: u32) -> ResultOfGetVehicleLivery {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_livery(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleLivery {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_cargobob_pick_up_entity(&self, p0_: i32,
p1_: i32) -> ResultOfCanCargobobPickUpEntity {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::can_cargobob_pick_up_entity(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfCanCargobobPickUpEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_will_tell_others_to_hurry(&self, vehicle_: u32,
p1_: bool) -> ResultOfSetVehicleWillTellOthersToHurry {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_will_tell_others_to_hurry(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetVehicleWillTellOthersToHurry {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_num_of_broken_loosen_parts(&self, vehicle_: u32) -> ResultOfGetVehicleNumOfBrokenLoosenParts {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_num_of_broken_loosen_parts(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleNumOfBrokenLoosenParts {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_road_node_speed_zone(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
speed_: f32,
p5_: bool) -> ResultOfAddRoadNodeSpeedZone {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut speed_ = speed_;
let mut p5_ = p5_;
        let success = sdk::natives::add_road_node_speed_zone(
            &mut native_return,
x_,
y_,
z_,
radius_,
speed_,
p5_,
        );
        let native_return = native_return;
        
        ResultOfAddRoadNodeSpeedZone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_are_any_vehicle_seats_free(&self, vehicle_: u32) -> ResultOfAreAnyVehicleSeatsFree {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::are_any_vehicle_seats_free(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfAreAnyVehicleSeatsFree {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_disable_hover_mode_flight(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetDisableHoverModeFlight {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_hover_mode_flight(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetDisableHoverModeFlight {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_position_in_recording(&self, vehicle_: u32) -> ResultOfGetPositionInRecording {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_position_in_recording(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetPositionInRecording {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_timed_explosion(&self, vehicle_: u32,
ped_: u32,
toggle_: bool) -> ResultOfSetVehicleTimedExplosion {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_timed_explosion(
            vehicle_,
ped_,
toggle_,
        );
        
        
        ResultOfSetVehicleTimedExplosion {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_drift_tyres_set(&self, vehicle_: u32) -> ResultOfGetDriftTyresSet {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_drift_tyres_set(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetDriftTyresSet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_class_max_acceleration(&self, vehicle_class_: i32) -> ResultOfGetVehicleClassMaxAcceleration {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_class_ = vehicle_class_;
        let success = sdk::natives::get_vehicle_class_max_acceleration(
            &mut native_return,
vehicle_class_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleClassMaxAcceleration {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_door_allowed_to_be_broken_off(&self, vehicle_: u32,
door_id_: i32,
is_breakable_: bool) -> ResultOfSetDoorAllowedToBeBrokenOff {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut door_id_ = door_id_;
let mut is_breakable_ = is_breakable_;
        let success = sdk::natives::set_door_allowed_to_be_broken_off(
            vehicle_,
door_id_,
is_breakable_,
        );
        
        
        ResultOfSetDoorAllowedToBeBrokenOff {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_trailer_attachment_enabled(&self, p0_: i32,
p1_: i32) -> ResultOfSetTrailerAttachmentEnabled {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_trailer_attachment_enabled(
            p0_,
p1_,
        );
        
        
        ResultOfSetTrailerAttachmentEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_vehicle_stuck_check_with_warp(&self, p0_: i32,
p1_: f32,
p2_: i32,
p3_: bool,
p4_: bool,
p5_: bool,
p6_: i32) -> ResultOfAddVehicleStuckCheckWithWarp {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::add_vehicle_stuck_check_with_warp(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        
        
        ResultOfAddVehicleStuckCheckWithWarp {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_can_be_used_by_fleeing_peds(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleCanBeUsedByFleeingPeds {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_can_be_used_by_fleeing_peds(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleCanBeUsedByFleeingPeds {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_vehicle_recording_been_loaded(&self, recording_: i32,
script_: Option<String>) -> ResultOfHasVehicleRecordingBeenLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut recording_ = recording_;
let mut script_ = sdk_helpers::create_c_string_ptr(script_);
        let success = sdk::natives::has_vehicle_recording_been_loaded(
            &mut native_return,
recording_,
script_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfHasVehicleRecordingBeenLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_shuffle_seat(&self, vehicle_: u32,
seat_index_: i32) -> ResultOfCanShuffleSeat {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut seat_index_ = seat_index_;
        let success = sdk::natives::can_shuffle_seat(
            &mut native_return,
vehicle_,
seat_index_,
        );
        let native_return = native_return;
        
        ResultOfCanShuffleSeat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_flight_nozzle_position(&self, vehicle_: u32,
angle_ratio_: f32) -> ResultOfSetVehicleFlightNozzlePosition {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut angle_ratio_ = angle_ratio_;
        let success = sdk::natives::set_vehicle_flight_nozzle_position(
            vehicle_,
angle_ratio_,
        );
        
        
        ResultOfSetVehicleFlightNozzlePosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_render_train_as_derailed(&self, train_: u32,
toggle_: bool) -> ResultOfSetRenderTrainAsDerailed {
    unsafe {
        let mut train_ = train_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_render_train_as_derailed(
            train_,
toggle_,
        );
        
        
        ResultOfSetRenderTrainAsDerailed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_is_considered_by_player(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleIsConsideredByPlayer {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_is_considered_by_player(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleIsConsideredByPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_vehicle_turret_movement_this_frame(&self, vehicle_: u32) -> ResultOfDisableVehicleTurretMovementThisFrame {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::disable_vehicle_turret_movement_this_frame(
            vehicle_,
        );
        
        
        ResultOfDisableVehicleTurretMovementThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_submarine_surface_mode(&self, vehicle_: u32,
toggle_: bool) -> ResultOfForceSubmarineSurfaceMode {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::force_submarine_surface_mode(
            vehicle_,
toggle_,
        );
        
        
        ResultOfForceSubmarineSurfaceMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_colour_combination(&self, vehicle_: u32,
color_combination_: i32) -> ResultOfSetVehicleColourCombination {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut color_combination_ = color_combination_;
        let success = sdk::natives::set_vehicle_colour_combination(
            vehicle_,
color_combination_,
        );
        
        
        ResultOfSetVehicleColourCombination {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_num_mod_kits(&self, vehicle_: u32) -> ResultOfGetNumModKits {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_num_mod_kits(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetNumModKits {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_allow_vehicle_explodes_on_contact(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetAllowVehicleExplodesOnContact {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_allow_vehicle_explodes_on_contact(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetAllowVehicleExplodesOnContact {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_all_vehicle_generators_active(&self, ) -> ResultOfSetAllVehicleGeneratorsActive {
    unsafe {
        
        let success = sdk::natives::set_all_vehicle_generators_active(
            
        );
        
        
        ResultOfSetAllVehicleGeneratorsActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_lights(&self, vehicle_: u32,
state_: i32) -> ResultOfSetVehicleLights {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::set_vehicle_lights(
            vehicle_,
state_,
        );
        
        
        ResultOfSetVehicleLights {
            success,
            ret: (),
            
        }
    }
}

    fn native_close_bomb_bay_doors(&self, vehicle_: u32) -> ResultOfCloseBombBayDoors {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::close_bomb_bay_doors(
            vehicle_,
        );
        
        
        ResultOfCloseBombBayDoors {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_occupants_take_explosive_damage(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleOccupantsTakeExplosiveDamage {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_occupants_take_explosive_damage(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleOccupantsTakeExplosiveDamage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ambient_vehicle_neon_enabled(&self, p0_: bool) -> ResultOfSetAmbientVehicleNeonEnabled {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_ambient_vehicle_neon_enabled(
            p0_,
        );
        
        
        ResultOfSetAmbientVehicleNeonEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_current_time_in_slip_stream(&self, vehicle_: u32) -> ResultOfGetVehicleCurrentTimeInSlipStream {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_current_time_in_slip_stream(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleCurrentTimeInSlipStream {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_custom_secondary_colour(&self, vehicle_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOfSetVehicleCustomSecondaryColour {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::set_vehicle_custom_secondary_colour(
            vehicle_,
r_,
g_,
b_,
        );
        
        
        ResultOfSetVehicleCustomSecondaryColour {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_has_rocket_boost(&self, vehicle_: u32) -> ResultOfGetHasRocketBoost {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_has_rocket_boost(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetHasRocketBoost {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_combat_mode(&self, toggle_: bool) -> ResultOfSetVehicleCombatMode {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_combat_mode(
            toggle_,
        );
        
        
        ResultOfSetVehicleCombatMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_stabilise_entity_attached_to_heli(&self, vehicle_: u32,
entity_: u32,
p2_: f32) -> ResultOfStabiliseEntityAttachedToHeli {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut entity_ = entity_;
let mut p2_ = p2_;
        let success = sdk::natives::stabilise_entity_attached_to_heli(
            vehicle_,
entity_,
p2_,
        );
        
        
        ResultOfStabiliseEntityAttachedToHeli {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_can_be_targetted(&self, vehicle_: u32,
state_: bool) -> ResultOfSetVehicleCanBeTargetted {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::set_vehicle_can_be_targetted(
            vehicle_,
state_,
        );
        
        
        ResultOfSetVehicleCanBeTargetted {
            success,
            ret: (),
            
        }
    }
}

    fn native_find_handler_vehicle_container_is_attached_to(&self, entity_: u32) -> ResultOfFindHandlerVehicleContainerIsAttachedTo {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
        let success = sdk::natives::find_handler_vehicle_container_is_attached_to(
            &mut native_return,
entity_,
        );
        let native_return = native_return;
        
        ResultOfFindHandlerVehicleContainerIsAttachedTo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_disable_vehicle_petrol_tank_damage(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetDisableVehiclePetrolTankDamage {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_vehicle_petrol_tank_damage(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetDisableVehiclePetrolTankDamage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_forklift_fork_height(&self, vehicle_: u32,
height_: f32) -> ResultOfSetForkliftForkHeight {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut height_ = height_;
        let success = sdk::natives::set_forklift_fork_height(
            vehicle_,
height_,
        );
        
        
        ResultOfSetForkliftForkHeight {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_random_vehicle_in_sphere(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
model_hash_: u32,
flags_: i32) -> ResultOfGetRandomVehicleInSphere {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut model_hash_ = model_hash_;
let mut flags_ = flags_;
        let success = sdk::natives::get_random_vehicle_in_sphere(
            &mut native_return,
x_,
y_,
z_,
radius_,
model_hash_,
flags_,
        );
        let native_return = native_return;
        
        ResultOfGetRandomVehicleInSphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_tyre_wear_rate_scale(&self, vehicle_: u32,
wheel_index_: i32,
multiplier_: f32) -> ResultOfSetTyreWearRateScale {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut wheel_index_ = wheel_index_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_tyre_wear_rate_scale(
            vehicle_,
wheel_index_,
multiplier_,
        );
        
        
        ResultOfSetTyreWearRateScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_this_model_a_quadbike(&self, model_: u32) -> ResultOfIsThisModelAquadbike {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_this_model_a_quadbike(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOfIsThisModelAquadbike {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_reduced_suspension_force(&self, vehicle_: u32,
enable_: bool) -> ResultOfSetReducedSuspensionForce {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut enable_ = enable_;
        let success = sdk::natives::set_reduced_suspension_force(
            vehicle_,
enable_,
        );
        
        
        ResultOfSetReducedSuspensionForce {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_outriggers_deployed(&self, vehicle_: u32) -> ResultOfGetOutriggersDeployed {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_outriggers_deployed(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetOutriggersDeployed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_enveff_scale(&self, vehicle_: u32,
fade_: f32) -> ResultOfSetVehicleEnveffScale {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut fade_ = fade_;
        let success = sdk::natives::set_vehicle_enveff_scale(
            vehicle_,
fade_,
        );
        
        
        ResultOfSetVehicleEnveffScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_door_auto_lock(&self, vehicle_: u32,
door_id_: i32,
toggle_: bool) -> ResultOfSetVehicleDoorAutoLock {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut door_id_ = door_id_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_door_auto_lock(
            vehicle_,
door_id_,
toggle_,
        );
        
        
        ResultOfSetVehicleDoorAutoLock {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_number_of_vehicle_colours(&self, vehicle_: u32) -> ResultOfGetNumberOfVehicleColours {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_number_of_vehicle_colours(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetNumberOfVehicleColours {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_extra_colours(&self, vehicle_: u32,
pearlescent_color_: i32,
wheel_color_: i32) -> ResultOfGetVehicleExtraColours {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut pearlescent_color_ = pearlescent_color_;
let mut wheel_color_ = wheel_color_;
        let success = sdk::natives::get_vehicle_extra_colours(
            &mut pearlescent_color_,
&mut wheel_color_,
vehicle_,
        );
        let pearlescent_color_ = pearlescent_color_;
let wheel_color_ = wheel_color_;
        
        ResultOfGetVehicleExtraColours {
            success,
            ret: (),
            pearlescent_color_,
wheel_color_
        }
    }
}

    fn native_attach_vehicle_to_trailer(&self, vehicle_: u32,
trailer_: u32,
radius_: f32) -> ResultOfAttachVehicleToTrailer {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut trailer_ = trailer_;
let mut radius_ = radius_;
        let success = sdk::natives::attach_vehicle_to_trailer(
            vehicle_,
trailer_,
radius_,
        );
        
        
        ResultOfAttachVehicleToTrailer {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_rocket_boost_active(&self, vehicle_: u32) -> ResultOfIsRocketBoostActive {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_rocket_boost_active(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsRocketBoostActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_parachute_deployed(&self, vehicle_: u32) -> ResultOfIsVehicleParachuteDeployed {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_parachute_deployed(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleParachuteDeployed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_xenon_light_color_index(&self, vehicle_: u32) -> ResultOfGetVehicleXenonLightColorIndex {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_xenon_light_color_index(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleXenonLightColorIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_submarine_is_under_design_depth(&self, submarine_: u32) -> ResultOfGetSubmarineIsUnderDesignDepth {
    unsafe {
        let mut native_return = Default::default();
let mut submarine_ = submarine_;
        let success = sdk::natives::get_submarine_is_under_design_depth(
            &mut native_return,
submarine_,
        );
        let native_return = native_return;
        
        ResultOfGetSubmarineIsUnderDesignDepth {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_strong(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleStrong {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_strong(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleStrong {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_door_fully_open(&self, vehicle_: u32,
door_id_: i32) -> ResultOfIsVehicleDoorFullyOpen {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut door_id_ = door_id_;
        let success = sdk::natives::is_vehicle_door_fully_open(
            &mut native_return,
vehicle_,
door_id_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleDoorFullyOpen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_heli_tail_boom_can_break_off(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetHeliTailBoomCanBreakOff {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_heli_tail_boom_can_break_off(
            &mut native_return,
vehicle_,
toggle_,
        );
        let native_return = native_return;
        
        ResultOfSetHeliTailBoomCanBreakOff {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_start_playback_recorded_vehicle(&self, vehicle_: u32,
recording_: i32,
script_: Option<String>,
p3_: bool) -> ResultOfStartPlaybackRecordedVehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut recording_ = recording_;
let mut script_ = sdk_helpers::create_c_string_ptr(script_);
let mut p3_ = p3_;
        let success = sdk::natives::start_playback_recorded_vehicle(
            vehicle_,
recording_,
script_.as_ref().unwrap(),
p3_,
        );
        
        
        ResultOfStartPlaybackRecordedVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_heli_main_rotor_health(&self, vehicle_: u32,
health_: f32) -> ResultOfSetHeliMainRotorHealth {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut health_ = health_;
        let success = sdk::natives::set_heli_main_rotor_health(
            vehicle_,
health_,
        );
        
        
        ResultOfSetHeliMainRotorHealth {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_homing_lockedonto_state(&self, p0_: i32,
p1_: i32) -> ResultOfSetVehicleHomingLockedontoState {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_homing_lockedonto_state(
            p0_,
p1_,
        );
        
        
        ResultOfSetVehicleHomingLockedontoState {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_ai_can_use_exclusive_seats(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleAiCanUseExclusiveSeats {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_ai_can_use_exclusive_seats(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleAiCanUseExclusiveSeats {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_vehicle_to_cargobob(&self, vehicle_: u32,
cargobob_: u32,
p2_: i32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfAttachVehicleToCargobob {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut cargobob_ = cargobob_;
let mut p2_ = p2_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::attach_vehicle_to_cargobob(
            vehicle_,
cargobob_,
p2_,
x_,
y_,
z_,
        );
        
        
        ResultOfAttachVehicleToCargobob {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_use_boost_button_for_wheel_retract(&self, toggle_: bool) -> ResultOfSetVehicleUseBoostButtonForWheelRetract {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_use_boost_button_for_wheel_retract(
            toggle_,
        );
        
        
        ResultOfSetVehicleUseBoostButtonForWheelRetract {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_plane_landing_gear_intact(&self, plane_: u32) -> ResultOfIsPlaneLandingGearIntact {
    unsafe {
        let mut native_return = Default::default();
let mut plane_ = plane_;
        let success = sdk::natives::is_plane_landing_gear_intact(
            &mut native_return,
plane_,
        );
        let native_return = native_return;
        
        ResultOfIsPlaneLandingGearIntact {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_transform_to_submarine_uses_alternate_input(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetTransformToSubmarineUsesAlternateInput {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_transform_to_submarine_uses_alternate_input(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetTransformToSubmarineUsesAlternateInput {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_model(&self, vehicle_: u32,
model_: u32) -> ResultOfIsVehicleModel {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut model_ = model_;
        let success = sdk::natives::is_vehicle_model(
            &mut native_return,
vehicle_,
model_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleModel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_formation_leader(&self, vehicle_: u32,
x_: f32,
y_: f32,
z_: f32,
p4_: f32) -> ResultOfSetFormationLeader {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p4_ = p4_;
        let success = sdk::natives::set_formation_leader(
            vehicle_,
x_,
y_,
z_,
p4_,
        );
        
        
        ResultOfSetFormationLeader {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_can_save_in_garage(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleCanSaveInGarage {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_can_save_in_garage(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleCanSaveInGarage {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_num_of_broken_off_parts(&self, vehicle_: u32) -> ResultOfGetVehicleNumOfBrokenOffParts {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_num_of_broken_off_parts(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleNumOfBrokenOffParts {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_steer_bias(&self, vehicle_: u32,
value_: f32) -> ResultOfSetVehicleSteerBias {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut value_ = value_;
        let success = sdk::natives::set_vehicle_steer_bias(
            vehicle_,
value_,
        );
        
        
        ResultOfSetVehicleSteerBias {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_current_playback_for_vehicle(&self, vehicle_: u32) -> ResultOfGetCurrentPlaybackForVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_current_playback_for_vehicle(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetCurrentPlaybackForVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ground_effect_reduces_drag(&self, toggle_: bool) -> ResultOfSetGroundEffectReducesDrag {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_ground_effect_reduces_drag(
            toggle_,
        );
        
        
        ResultOfSetGroundEffectReducesDrag {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_alarm_activated(&self, vehicle_: u32) -> ResultOfIsVehicleAlarmActivated {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_alarm_activated(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleAlarmActivated {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_special_flight_mode_target_ratio(&self, vehicle_: u32,
target_ratio_: f32) -> ResultOfSetSpecialFlightModeTargetRatio {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut target_ratio_ = target_ratio_;
        let success = sdk::natives::set_special_flight_mode_target_ratio(
            vehicle_,
target_ratio_,
        );
        
        
        ResultOfSetSpecialFlightModeTargetRatio {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_mod_color1(&self, vehicle_: u32,
paint_type_: i32,
color_: i32,
pearlescent_color_: i32) -> ResultOfSetVehicleModColor1 {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut paint_type_ = paint_type_;
let mut color_ = color_;
let mut pearlescent_color_ = pearlescent_color_;
        let success = sdk::natives::set_vehicle_mod_color1(
            vehicle_,
paint_type_,
color_,
pearlescent_color_,
        );
        
        
        ResultOfSetVehicleModColor1 {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_vehicle_petroltank_fire_culprit(&self, vehicle_: u32) -> ResultOfClearVehiclePetroltankFireCulprit {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::clear_vehicle_petroltank_fire_culprit(
            vehicle_,
        );
        
        
        ResultOfClearVehiclePetroltankFireCulprit {
            success,
            ret: (),
            
        }
    }
}

    fn native_release_preload_mods(&self, vehicle_: u32) -> ResultOfReleasePreloadMods {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::release_preload_mods(
            vehicle_,
        );
        
        
        ResultOfReleasePreloadMods {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_weapon_restricted_ammo(&self, vehicle_: u32,
weapon_index_: i32,
capacity_: i32) -> ResultOfSetVehicleWeaponRestrictedAmmo {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut weapon_index_ = weapon_index_;
let mut capacity_ = capacity_;
        let success = sdk::natives::set_vehicle_weapon_restricted_ammo(
            vehicle_,
weapon_index_,
capacity_,
        );
        
        
        ResultOfSetVehicleWeaponRestrictedAmmo {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_mod_identifier_hash(&self, vehicle_: u32,
mod_type_: i32,
mod_index_: i32) -> ResultOfGetVehicleModIdentifierHash {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut mod_type_ = mod_type_;
let mut mod_index_ = mod_index_;
        let success = sdk::natives::get_vehicle_mod_identifier_hash(
            &mut native_return,
vehicle_,
mod_type_,
mod_index_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleModIdentifierHash {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_weapon_damage_scale(&self, vehicle_: u32,
multiplier_: f32) -> ResultOfSetVehicleWeaponDamageScale {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_vehicle_weapon_damage_scale(
            &mut native_return,
vehicle_,
multiplier_,
        );
        let native_return = native_return;
        
        ResultOfSetVehicleWeaponDamageScale {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_this_model_a_boat(&self, model_: u32) -> ResultOfIsThisModelAboat {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_this_model_a_boat(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOfIsThisModelAboat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_engine_health(&self, vehicle_: u32,
health_: f32) -> ResultOfSetVehicleEngineHealth {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut health_ = health_;
        let success = sdk::natives::set_vehicle_engine_health(
            vehicle_,
health_,
        );
        
        
        ResultOfSetVehicleEngineHealth {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_vehicle_petrol_tank_fires(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetDisableVehiclePetrolTankFires {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_vehicle_petrol_tank_fires(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetDisableVehiclePetrolTankFires {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_bumper_broken_off(&self, vehicle_: u32,
front_bumper_: bool) -> ResultOfIsVehicleBumperBrokenOff {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut front_bumper_ = front_bumper_;
        let success = sdk::natives::is_vehicle_bumper_broken_off(
            &mut native_return,
vehicle_,
front_bumper_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleBumperBrokenOff {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_vehicles_from_generators_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
p6_: i32) -> ResultOfRemoveVehiclesFromGeneratorsInArea {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut p6_ = p6_;
        let success = sdk::natives::remove_vehicles_from_generators_in_area(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
p6_,
        );
        
        
        ResultOfRemoveVehiclesFromGeneratorsInArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_window_intact(&self, vehicle_: u32,
window_index_: i32) -> ResultOfIsVehicleWindowIntact {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut window_index_ = window_index_;
        let success = sdk::natives::is_vehicle_window_intact(
            &mut native_return,
vehicle_,
window_index_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleWindowIntact {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_wheel_type(&self, vehicle_: u32,
wheel_type_: i32) -> ResultOfSetVehicleWheelType {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut wheel_type_ = wheel_type_;
        let success = sdk::natives::set_vehicle_wheel_type(
            vehicle_,
wheel_type_,
        );
        
        
        ResultOfSetVehicleWheelType {
            success,
            ret: (),
            
        }
    }
}

    fn native_instantly_fill_vehicle_population(&self, ) -> ResultOfInstantlyFillVehiclePopulation {
    unsafe {
        
        let success = sdk::natives::instantly_fill_vehicle_population(
            
        );
        
        
        ResultOfInstantlyFillVehiclePopulation {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_producing_slip_stream(&self, vehicle_: u32) -> ResultOfIsVehicleProducingSlipStream {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_producing_slip_stream(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleProducingSlipStream {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_mod_color2_name(&self, vehicle_: u32) -> ResultOfGetVehicleModColor2Name {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_mod_color2_name(
            native_return.pin_mut(),
vehicle_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetVehicleModColor2Name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_on_ground_properly(&self, vehicle_: u32,
p1_: f32) -> ResultOfSetVehicleOnGroundProperly {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_on_ground_properly(
            &mut native_return,
vehicle_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfSetVehicleOnGroundProperly {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_transform_rate_for_animation(&self, vehicle_: u32,
transform_rate_: f32) -> ResultOfSetTransformRateForAnimation {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut transform_rate_ = transform_rate_;
        let success = sdk::natives::set_transform_rate_for_animation(
            vehicle_,
transform_rate_,
        );
        
        
        ResultOfSetTransformRateForAnimation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_wanted_cones_response(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetDisableWantedConesResponse {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_wanted_cones_response(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetDisableWantedConesResponse {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_stolen(&self, vehicle_: u32) -> ResultOfIsVehicleStolen {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_stolen(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleStolen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_class_max_braking(&self, vehicle_class_: i32) -> ResultOfGetVehicleClassMaxBraking {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_class_ = vehicle_class_;
        let success = sdk::natives::get_vehicle_class_max_braking(
            &mut native_return,
vehicle_class_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleClassMaxBraking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_driveable(&self, vehicle_: u32,
is_on_fire_check_: bool) -> ResultOfIsVehicleDriveable {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut is_on_fire_check_ = is_on_fire_check_;
        let success = sdk::natives::is_vehicle_driveable(
            &mut native_return,
vehicle_,
is_on_fire_check_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleDriveable {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_number_of_vehicle_number_plates(&self, ) -> ResultOfGetNumberOfVehicleNumberPlates {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_number_of_vehicle_number_plates(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetNumberOfVehicleNumberPlates {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_can_be_visibly_damaged(&self, vehicle_: u32,
state_: bool) -> ResultOfSetVehicleCanBeVisiblyDamaged {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::set_vehicle_can_be_visibly_damaged(
            vehicle_,
state_,
        );
        
        
        ResultOfSetVehicleCanBeVisiblyDamaged {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_plane_propeller_health(&self, plane_: u32,
health_: f32) -> ResultOfSetPlanePropellerHealth {
    unsafe {
        let mut native_return = Default::default();
let mut plane_ = plane_;
let mut health_ = health_;
        let success = sdk::natives::set_plane_propeller_health(
            &mut native_return,
plane_,
health_,
        );
        let native_return = native_return;
        
        ResultOfSetPlanePropellerHealth {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_siren_on(&self, vehicle_: u32) -> ResultOfIsVehicleSirenOn {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_siren_on(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleSirenOn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_vehicle_set_parachute_model_override(&self, vehicle_: u32,
model_hash_: u32) -> ResultOfVehicleSetParachuteModelOverride {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut model_hash_ = model_hash_;
        let success = sdk::natives::vehicle_set_parachute_model_override(
            vehicle_,
model_hash_,
        );
        
        
        ResultOfVehicleSetParachuteModelOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_force_vehicle_engine_damage_by_bullet(&self, p0_: i32,
p1_: bool) -> ResultOfSetForceVehicleEngineDamageByBullet {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_force_vehicle_engine_damage_by_bullet(
            p0_,
p1_,
        );
        
        
        ResultOfSetForceVehicleEngineDamageByBullet {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_damage_scale(&self, vehicle_: u32,
p1_: f32) -> ResultOfSetVehicleDamageScale {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_damage_scale(
            &mut native_return,
vehicle_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfSetVehicleDamageScale {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_vehicle_allow_rappel(&self, vehicle_: u32) -> ResultOfDoesVehicleAllowRappel {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::does_vehicle_allow_rappel(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfDoesVehicleAllowRappel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_police_focus_will_track_vehicle(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetPoliceFocusWillTrackVehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_police_focus_will_track_vehicle(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetPoliceFocusWillTrackVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_deformation_at_pos(&self, vehicle_: u32,
offset_x_: f32,
offset_y_: f32,
offset_z_: f32) -> ResultOfGetVehicleDeformationAtPos {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut vehicle_ = vehicle_;
let mut offset_x_ = offset_x_;
let mut offset_y_ = offset_y_;
let mut offset_z_ = offset_z_;
        let success = sdk::natives::get_vehicle_deformation_at_pos(
            native_return.pin_mut(),
vehicle_,
offset_x_,
offset_y_,
offset_z_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetVehicleDeformationAtPos {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_colours(&self, vehicle_: u32,
color_primary_: i32,
color_secondary_: i32) -> ResultOfSetVehicleColours {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut color_primary_ = color_primary_;
let mut color_secondary_ = color_secondary_;
        let success = sdk::natives::set_vehicle_colours(
            vehicle_,
color_primary_,
color_secondary_,
        );
        
        
        ResultOfSetVehicleColours {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_class_max_agility(&self, vehicle_class_: i32) -> ResultOfGetVehicleClassMaxAgility {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_class_ = vehicle_class_;
        let success = sdk::natives::get_vehicle_class_max_agility(
            &mut native_return,
vehicle_class_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleClassMaxAgility {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_individual_plane_propeller(&self, vehicle_: u32,
propeller_: i32) -> ResultOfDisableIndividualPlanePropeller {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut propeller_ = propeller_;
        let success = sdk::natives::disable_individual_plane_propeller(
            vehicle_,
propeller_,
        );
        
        
        ResultOfDisableIndividualPlanePropeller {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_has_kers(&self, vehicle_: u32) -> ResultOfGetVehicleHasKers {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_has_kers(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleHasKers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_doors_locked_for_player(&self, vehicle_: u32,
player_: u32,
toggle_: bool) -> ResultOfSetVehicleDoorsLockedForPlayer {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut player_ = player_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_doors_locked_for_player(
            vehicle_,
player_,
toggle_,
        );
        
        
        ResultOfSetVehicleDoorsLockedForPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_can_leak_oil(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleCanLeakOil {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_can_leak_oil(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleCanLeakOil {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_enable_empty_crowding_vehicles_removal(&self, toggle_: bool) -> ResultOfNetworkEnableEmptyCrowdingVehiclesRemoval {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::network_enable_empty_crowding_vehicles_removal(
            toggle_,
        );
        
        
        ResultOfNetworkEnableEmptyCrowdingVehiclesRemoval {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_mod_slot_name(&self, vehicle_: u32,
mod_type_: i32) -> ResultOfGetModSlotName {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut vehicle_ = vehicle_;
let mut mod_type_ = mod_type_;
        let success = sdk::natives::get_mod_slot_name(
            native_return.pin_mut(),
vehicle_,
mod_type_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetModSlotName {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_can_vehicle_be_placed_here(&self, vehicle_: u32,
x_: f32,
y_: f32,
z_: f32,
rot_x_: f32,
rot_y_: f32,
rot_z_: f32,
p7_: i32,
p8_: i32) -> ResultOfGetCanVehicleBePlacedHere {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut rot_x_ = rot_x_;
let mut rot_y_ = rot_y_;
let mut rot_z_ = rot_z_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::get_can_vehicle_be_placed_here(
            &mut native_return,
vehicle_,
x_,
y_,
z_,
rot_x_,
rot_y_,
rot_z_,
p7_,
p8_,
        );
        let native_return = native_return;
        
        ResultOfGetCanVehicleBePlacedHere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_can_respray_vehicle(&self, vehicle_: u32,
state_: bool) -> ResultOfSetCanResprayVehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::set_can_respray_vehicle(
            vehicle_,
state_,
        );
        
        
        ResultOfSetCanResprayVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_a_convertible(&self, vehicle_: u32,
p1_: bool) -> ResultOfIsVehicleAconvertible {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::is_vehicle_a_convertible(
            &mut native_return,
vehicle_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleAconvertible {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_wheels_retracted_instantly(&self, vehicle_: u32) -> ResultOfSetWheelsRetractedInstantly {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_wheels_retracted_instantly(
            vehicle_,
        );
        
        
        ResultOfSetWheelsRetractedInstantly {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_model_acceleration_max_mods(&self, model_hash_: u32) -> ResultOfGetVehicleModelAccelerationMaxMods {
    unsafe {
        let mut native_return = Default::default();
let mut model_hash_ = model_hash_;
        let success = sdk::natives::get_vehicle_model_acceleration_max_mods(
            &mut native_return,
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleModelAccelerationMaxMods {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_extra_broken_off(&self, vehicle_: u32,
extra_id_: i32) -> ResultOfIsExtraBrokenOff {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut extra_id_ = extra_id_;
        let success = sdk::natives::is_extra_broken_off(
            &mut native_return,
vehicle_,
extra_id_,
        );
        let native_return = native_return;
        
        ResultOfIsExtraBrokenOff {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_fake_suspension_lowering_amount(&self, vehicle_: u32) -> ResultOfGetFakeSuspensionLoweringAmount {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_fake_suspension_lowering_amount(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetFakeSuspensionLoweringAmount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_model_max_traction(&self, model_hash_: u32) -> ResultOfGetVehicleModelMaxTraction {
    unsafe {
        let mut native_return = Default::default();
let mut model_hash_ = model_hash_;
        let success = sdk::natives::get_vehicle_model_max_traction(
            &mut native_return,
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleModelMaxTraction {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_estimated_max_speed(&self, vehicle_: u32) -> ResultOfGetVehicleEstimatedMaxSpeed {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_estimated_max_speed(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleEstimatedMaxSpeed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_glider_active(&self, vehicle_: u32,
state_: bool) -> ResultOfSetGliderActive {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::set_glider_active(
            vehicle_,
state_,
        );
        
        
        ResultOfSetGliderActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_playback_recorded_vehicle(&self, vehicle_: u32) -> ResultOfStopPlaybackRecordedVehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::stop_playback_recorded_vehicle(
            vehicle_,
        );
        
        
        ResultOfStopPlaybackRecordedVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_vehicle_combat_angled_avoidance_area(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32) -> ResultOfAddVehicleCombatAngledAvoidanceArea {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::add_vehicle_combat_angled_avoidance_area(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        let native_return = native_return;
        
        ResultOfAddVehicleCombatAngledAvoidanceArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_vehicle_custom_primary_colour(&self, vehicle_: u32) -> ResultOfClearVehicleCustomPrimaryColour {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::clear_vehicle_custom_primary_colour(
            vehicle_,
        );
        
        
        ResultOfClearVehicleCustomPrimaryColour {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_tyre_health(&self, vehicle_: u32,
wheel_index_: i32) -> ResultOfGetTyreHealth {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut wheel_index_ = wheel_index_;
        let success = sdk::natives::get_tyre_health(
            &mut native_return,
vehicle_,
wheel_index_,
        );
        let native_return = native_return;
        
        ResultOfGetTyreHealth {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_weapon_disabled(&self, weapon_hash_: u32,
vehicle_: u32,
owner_: u32) -> ResultOfIsVehicleWeaponDisabled {
    unsafe {
        let mut native_return = Default::default();
let mut weapon_hash_ = weapon_hash_;
let mut vehicle_ = vehicle_;
let mut owner_ = owner_;
        let success = sdk::natives::is_vehicle_weapon_disabled(
            &mut native_return,
weapon_hash_,
vehicle_,
owner_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleWeaponDisabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_tank_turret_position(&self, vehicle_: u32,
position_: f32,
p2_: bool) -> ResultOfSetVehicleTankTurretPosition {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut position_ = position_;
let mut p2_ = p2_;
        let success = sdk::natives::set_vehicle_tank_turret_position(
            vehicle_,
position_,
p2_,
        );
        
        
        ResultOfSetVehicleTankTurretPosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_pickup_magnet_ensure_pickup_entity_upright(&self, vehicle_: u32,
p1_: bool) -> ResultOfSetCargobobPickupMagnetEnsurePickupEntityUpright {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cargobob_pickup_magnet_ensure_pickup_entity_upright(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetCargobobPickupMagnetEnsurePickupEntityUpright {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_force_dont_detach_vehicle(&self, cargobob_: u32,
toggle_: bool) -> ResultOfSetCargobobForceDontDetachVehicle {
    unsafe {
        let mut cargobob_ = cargobob_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_cargobob_force_dont_detach_vehicle(
            cargobob_,
toggle_,
        );
        
        
        ResultOfSetCargobobForceDontDetachVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_stopped(&self, vehicle_: u32) -> ResultOfIsVehicleStopped {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_stopped(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleStopped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_time_position_in_recording(&self, vehicle_: u32) -> ResultOfGetTimePositionInRecording {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_time_position_in_recording(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetTimePositionInRecording {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entity_attached_to_handler_frame(&self, vehicle_: u32,
entity_: u32) -> ResultOfIsEntityAttachedToHandlerFrame {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut entity_ = entity_;
        let success = sdk::natives::is_entity_attached_to_handler_frame(
            &mut native_return,
vehicle_,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsEntityAttachedToHandlerFrame {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_window_tint(&self, vehicle_: u32,
tint_: i32) -> ResultOfSetVehicleWindowTint {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut tint_ = tint_;
        let success = sdk::natives::set_vehicle_window_tint(
            vehicle_,
tint_,
        );
        
        
        ResultOfSetVehicleWindowTint {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_vehicle_have_stuck_vehicle_check(&self, vehicle_: u32) -> ResultOfDoesVehicleHaveStuckVehicleCheck {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::does_vehicle_have_stuck_vehicle_check(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfDoesVehicleHaveStuckVehicleCheck {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_tail_lights(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleTailLights {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_tail_lights(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleTailLights {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_additional_rotation_for_recorded_vehicle_playback(&self, vehicle_: u32,
x_: f32,
y_: f32,
z_: f32,
p4_: i32) -> ResultOfSetAdditionalRotationForRecordedVehiclePlayback {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut p4_ = p4_;
        let success = sdk::natives::set_additional_rotation_for_recorded_vehicle_playback(
            vehicle_,
x_,
y_,
z_,
p4_,
        );
        
        
        ResultOfSetAdditionalRotationForRecordedVehiclePlayback {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_model_value(&self, vehicle_model_: u32) -> ResultOfGetVehicleModelValue {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_model_ = vehicle_model_;
        let success = sdk::natives::get_vehicle_model_value(
            &mut native_return,
vehicle_model_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleModelValue {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mission_train_coords(&self, train_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfSetMissionTrainCoords {
    unsafe {
        let mut train_ = train_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_mission_train_coords(
            train_,
x_,
y_,
z_,
        );
        
        
        ResultOfSetMissionTrainCoords {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_taxi_lights(&self, vehicle_: u32,
state_: bool) -> ResultOfSetTaxiLights {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::set_taxi_lights(
            vehicle_,
state_,
        );
        
        
        ResultOfSetTaxiLights {
            success,
            ret: (),
            
        }
    }
}

    fn native_are_wings_of_plane_intact(&self, plane_: u32) -> ResultOfAreWingsOfPlaneIntact {
    unsafe {
        let mut native_return = Default::default();
let mut plane_ = plane_;
        let success = sdk::natives::are_wings_of_plane_intact(
            &mut native_return,
plane_,
        );
        let native_return = native_return;
        
        ResultOfAreWingsOfPlaneIntact {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_can_break(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleCanBreak {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_can_break(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleCanBreak {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_peds_can_fall_off_this_vehicle_from_large_fall_damage(&self, vehicle_: u32,
toggle_: bool,
p2_: f32) -> ResultOfSetPedsCanFallOffThisVehicleFromLargeFallDamage {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
        let success = sdk::natives::set_peds_can_fall_off_this_vehicle_from_large_fall_damage(
            vehicle_,
toggle_,
p2_,
        );
        
        
        ResultOfSetPedsCanFallOffThisVehicleFromLargeFallDamage {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_boat_vehicle_model_agility(&self, model_hash_: u32) -> ResultOfGetBoatVehicleModelAgility {
    unsafe {
        let mut native_return = Default::default();
let mut model_hash_ = model_hash_;
        let success = sdk::natives::get_boat_vehicle_model_agility(
            &mut native_return,
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetBoatVehicleModelAgility {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_drift_tyres(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetDriftTyres {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_drift_tyres(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetDriftTyres {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_provides_cover(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleProvidesCover {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_provides_cover(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleProvidesCover {
            success,
            ret: (),
            
        }
    }
}

    fn native_delete_mission_train(&self, train_: u32) -> ResultOfDeleteMissionTrain {
    unsafe {
        let mut train_ = train_;
        let success = sdk::natives::delete_mission_train(
            &mut train_,
        );
        let train_ = train_;
        
        ResultOfDeleteMissionTrain {
            success,
            ret: (),
            train_
        }
    }
}

    fn native_set_invert_vehicle_controls(&self, vehicle_: u32,
state_: bool) -> ResultOfSetInvertVehicleControls {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::set_invert_vehicle_controls(
            vehicle_,
state_,
        );
        
        
        ResultOfSetInvertVehicleControls {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_vehicle_petroltank_set_on_fire_by_entity(&self, p0_: i32,
p1_: i32) -> ResultOfHasVehiclePetroltankSetOnFireByEntity {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::has_vehicle_petroltank_set_on_fire_by_entity(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfHasVehiclePetroltankSetOnFireByEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_use_double_click_for_car_jump(&self, toggle_: bool) -> ResultOfSetUseDoubleClickForCarJump {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_use_double_click_for_car_jump(
            toggle_,
        );
        
        
        ResultOfSetUseDoubleClickForCarJump {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_allow_no_passengers_lockon(&self, veh_: u32,
toggle_: bool) -> ResultOfSetVehicleAllowNoPassengersLockon {
    unsafe {
        let mut veh_ = veh_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_allow_no_passengers_lockon(
            veh_,
toggle_,
        );
        
        
        ResultOfSetVehicleAllowNoPassengersLockon {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_acceleration(&self, vehicle_: u32) -> ResultOfGetVehicleAcceleration {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_acceleration(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleAcceleration {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_no_explosion_damage_from_driver(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleNoExplosionDamageFromDriver {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_no_explosion_damage_from_driver(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleNoExplosionDamageFromDriver {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_livery2_count(&self, vehicle_: u32) -> ResultOfGetVehicleLivery2Count {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_livery2_count(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleLivery2Count {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_override_plane_damage_threhsold(&self, vehicle_: u32,
health_: f32) -> ResultOfOverridePlaneDamageThrehsold {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut health_ = health_;
        let success = sdk::natives::override_plane_damage_threhsold(
            vehicle_,
health_,
        );
        
        
        ResultOfOverridePlaneDamageThrehsold {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_left_vehicle_headlight_damaged(&self, vehicle_: u32) -> ResultOfGetIsLeftVehicleHeadlightDamaged {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_is_left_vehicle_headlight_damaged(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetIsLeftVehicleHeadlightDamaged {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_vehicle_custom_secondary_colour(&self, vehicle_: u32) -> ResultOfClearVehicleCustomSecondaryColour {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::clear_vehicle_custom_secondary_colour(
            vehicle_,
        );
        
        
        ResultOfClearVehicleCustomSecondaryColour {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_livery2(&self, vehicle_: u32) -> ResultOfGetVehicleLivery2 {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_livery2(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleLivery2 {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_roll_up_window(&self, vehicle_: u32,
window_index_: i32) -> ResultOfRollUpWindow {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut window_index_ = window_index_;
        let success = sdk::natives::roll_up_window(
            vehicle_,
window_index_,
        );
        
        
        ResultOfRollUpWindow {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_all_low_priority_vehicle_generators_active(&self, active_: bool) -> ResultOfSetAllLowPriorityVehicleGeneratorsActive {
    unsafe {
        let mut active_ = active_;
        let success = sdk::natives::set_all_low_priority_vehicle_generators_active(
            active_,
        );
        
        
        ResultOfSetAllLowPriorityVehicleGeneratorsActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_extra_colour6(&self, vehicle_: u32,
color_: i32) -> ResultOfSetVehicleExtraColour6 {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut color_ = color_;
        let success = sdk::natives::set_vehicle_extra_colour6(
            vehicle_,
color_,
        );
        
        
        ResultOfSetVehicleExtraColour6 {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_livery(&self, vehicle_: u32,
livery_: i32) -> ResultOfSetVehicleLivery {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut livery_ = livery_;
        let success = sdk::natives::set_vehicle_livery(
            vehicle_,
livery_,
        );
        
        
        ResultOfSetVehicleLivery {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_any_vehicle_near_point(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOfIsAnyVehicleNearPoint {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::is_any_vehicle_near_point(
            &mut native_return,
x_,
y_,
z_,
radius_,
        );
        let native_return = native_return;
        
        ResultOfIsAnyVehicleNearPoint {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_any_entity_attached_to_handler_frame(&self, vehicle_: u32) -> ResultOfIsAnyEntityAttachedToHandlerFrame {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_any_entity_attached_to_handler_frame(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsAnyEntityAttachedToHandlerFrame {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_mod_kit(&self, vehicle_: u32) -> ResultOfGetVehicleModKit {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_mod_kit(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleModKit {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pause_playback_recorded_vehicle(&self, vehicle_: u32) -> ResultOfPausePlaybackRecordedVehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::pause_playback_recorded_vehicle(
            vehicle_,
        );
        
        
        ResultOfPausePlaybackRecordedVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_this_model_an_amphibious_car(&self, model_: u32) -> ResultOfIsThisModelAnAmphibiousCar {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_this_model_an_amphibious_car(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOfIsThisModelAnAmphibiousCar {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_heli_landing_area_blocked(&self, vehicle_: u32) -> ResultOfIsHeliLandingAreaBlocked {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_heli_landing_area_blocked(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsHeliLandingAreaBlocked {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_entry_point_for_seat_clear(&self, ped_: u32,
vehicle_: u32,
seat_index_: i32,
side_: bool,
on_enter_: bool) -> ResultOfIsEntryPointForSeatClear {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut seat_index_ = seat_index_;
let mut side_ = side_;
let mut on_enter_ = on_enter_;
        let success = sdk::natives::is_entry_point_for_seat_clear(
            &mut native_return,
ped_,
vehicle_,
seat_index_,
side_,
on_enter_,
        );
        let native_return = native_return;
        
        ResultOfIsEntryPointForSeatClear {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_mission_train(&self, unk_variation_: i32,
x_: f32,
y_: f32,
z_: f32,
direction_: bool,
p5_: i32,
p6_: i32) -> ResultOfCreateMissionTrain {
    unsafe {
        let mut native_return = Default::default();
let mut unk_variation_ = unk_variation_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut direction_ = direction_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::create_mission_train(
            &mut native_return,
unk_variation_,
x_,
y_,
z_,
direction_,
p5_,
p6_,
        );
        let native_return = native_return;
        
        ResultOfCreateMissionTrain {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_track_vehicle_visibility(&self, vehicle_: u32) -> ResultOfTrackVehicleVisibility {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::track_vehicle_visibility(
            vehicle_,
        );
        
        
        ResultOfTrackVehicleVisibility {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_door_valid(&self, vehicle_: u32,
door_id_: i32) -> ResultOfGetIsDoorValid {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut door_id_ = door_id_;
        let success = sdk::natives::get_is_door_valid(
            &mut native_return,
vehicle_,
door_id_,
        );
        let native_return = native_return;
        
        ResultOfGetIsDoorValid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_forward_speed_xy(&self, vehicle_: u32,
speed_: f32) -> ResultOfSetVehicleForwardSpeedXy {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut speed_ = speed_;
        let success = sdk::natives::set_vehicle_forward_speed_xy(
            vehicle_,
speed_,
        );
        
        
        ResultOfSetVehicleForwardSpeedXy {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_slow_down_effect_disabled(&self, disabled_: bool) -> ResultOfSetSlowDownEffectDisabled {
    unsafe {
        let mut disabled_ = disabled_;
        let success = sdk::natives::set_slow_down_effect_disabled(
            disabled_,
        );
        
        
        ResultOfSetSlowDownEffectDisabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_boat_boom_position_ratio(&self, vehicle_: u32) -> ResultOfGetBoatBoomPositionRatio {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_boat_boom_position_ratio(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetBoatBoomPositionRatio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_playback_speed(&self, vehicle_: u32,
speed_: f32) -> ResultOfSetPlaybackSpeed {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut speed_ = speed_;
        let success = sdk::natives::set_playback_speed(
            vehicle_,
speed_,
        );
        
        
        ResultOfSetPlaybackSpeed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_pickup_magnet_reduced_strength(&self, cargobob_: u32,
p1_: f32) -> ResultOfSetCargobobPickupMagnetReducedStrength {
    unsafe {
        let mut cargobob_ = cargobob_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cargobob_pickup_magnet_reduced_strength(
            cargobob_,
p1_,
        );
        
        
        ResultOfSetCargobobPickupMagnetReducedStrength {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_override_vehicle_door_torque(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfSetOverrideVehicleDoorTorque {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_override_vehicle_door_torque(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfSetOverrideVehicleDoorTorque {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_tyres_can_burst(&self, vehicle_: u32) -> ResultOfGetVehicleTyresCanBurst {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_tyres_can_burst(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleTyresCanBurst {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_stuck_timer_up(&self, vehicle_: u32,
p1_: i32,
ms_: i32) -> ResultOfIsVehicleStuckTimerUp {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut ms_ = ms_;
        let success = sdk::natives::is_vehicle_stuck_timer_up(
            &mut native_return,
vehicle_,
p1_,
ms_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleStuckTimerUp {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_is_stolen(&self, vehicle_: u32,
is_stolen_: bool) -> ResultOfSetVehicleIsStolen {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut is_stolen_ = is_stolen_;
        let success = sdk::natives::set_vehicle_is_stolen(
            vehicle_,
is_stolen_,
        );
        
        
        ResultOfSetVehicleIsStolen {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_handbrake(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleHandbrake {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_handbrake(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleHandbrake {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_pickup_magnet_pull_rope_length(&self, vehicle_: u32,
p1_: f32) -> ResultOfSetCargobobPickupMagnetPullRopeLength {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cargobob_pickup_magnet_pull_rope_length(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetCargobobPickupMagnetPullRopeLength {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_colour_combination(&self, vehicle_: u32) -> ResultOfGetVehicleColourCombination {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_colour_combination(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleColourCombination {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_impatience_timer(&self, vehicle_: u32,
p1_: i32) -> ResultOfSetVehicleImpatienceTimer {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_impatience_timer(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetVehicleImpatienceTimer {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_container_to_handler_frame_when_lined_up(&self, vehicle_: u32,
entity_: u32) -> ResultOfAttachContainerToHandlerFrameWhenLinedUp {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut entity_ = entity_;
        let success = sdk::natives::attach_container_to_handler_frame_when_lined_up(
            vehicle_,
entity_,
        );
        
        
        ResultOfAttachContainerToHandlerFrameWhenLinedUp {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_vehicle_phone_explosive_device(&self, ) -> ResultOfHasVehiclePhoneExplosiveDevice {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_vehicle_phone_explosive_device(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfHasVehiclePhoneExplosiveDevice {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_mod(&self, vehicle_: u32,
mod_type_: i32,
mod_index_: i32,
custom_tires_: bool) -> ResultOfSetVehicleMod {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut mod_type_ = mod_type_;
let mut mod_index_ = mod_index_;
let mut custom_tires_ = custom_tires_;
        let success = sdk::natives::set_vehicle_mod(
            vehicle_,
mod_type_,
mod_index_,
custom_tires_,
        );
        
        
        ResultOfSetVehicleMod {
            success,
            ret: (),
            
        }
    }
}

    fn native_pop_out_vehicle_windscreen(&self, vehicle_: u32) -> ResultOfPopOutVehicleWindscreen {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::pop_out_vehicle_windscreen(
            vehicle_,
        );
        
        
        ResultOfPopOutVehicleWindscreen {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_vehicle_route_history(&self, vehicle_: u32) -> ResultOfClearVehicleRouteHistory {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::clear_vehicle_route_history(
            vehicle_,
        );
        
        
        ResultOfClearVehicleRouteHistory {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_pickup_magnet_reduced_falloff(&self, cargobob_: u32,
p1_: f32) -> ResultOfSetCargobobPickupMagnetReducedFalloff {
    unsafe {
        let mut cargobob_ = cargobob_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cargobob_pickup_magnet_reduced_falloff(
            cargobob_,
p1_,
        );
        
        
        ResultOfSetCargobobPickupMagnetReducedFalloff {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_reduce_grip_level(&self, vehicle_: u32,
val_: i32) -> ResultOfSetVehicleReduceGripLevel {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut val_ = val_;
        let success = sdk::natives::set_vehicle_reduce_grip_level(
            vehicle_,
val_,
        );
        
        
        ResultOfSetVehicleReduceGripLevel {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_heli_control_lagging_rate_scalar(&self, helicopter_: u32,
multiplier_: f32) -> ResultOfSetHeliControlLaggingRateScalar {
    unsafe {
        let mut helicopter_ = helicopter_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_heli_control_lagging_rate_scalar(
            helicopter_,
multiplier_,
        );
        
        
        ResultOfSetHeliControlLaggingRateScalar {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_cargobob_have_pickup_magnet(&self, cargobob_: u32) -> ResultOfDoesCargobobHavePickupMagnet {
    unsafe {
        let mut native_return = Default::default();
let mut cargobob_ = cargobob_;
        let success = sdk::natives::does_cargobob_have_pickup_magnet(
            &mut native_return,
cargobob_,
        );
        let native_return = native_return;
        
        ResultOfDoesCargobobHavePickupMagnet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_tyre_fixed(&self, vehicle_: u32,
tyre_index_: i32) -> ResultOfSetVehicleTyreFixed {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut tyre_index_ = tyre_index_;
        let success = sdk::natives::set_vehicle_tyre_fixed(
            vehicle_,
tyre_index_,
        );
        
        
        ResultOfSetVehicleTyreFixed {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_tyre_wear_rate(&self, vehicle_: u32,
wheel_index_: i32) -> ResultOfGetTyreWearRate {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut wheel_index_ = wheel_index_;
        let success = sdk::natives::get_tyre_wear_rate(
            &mut native_return,
vehicle_,
wheel_index_,
        );
        let native_return = native_return;
        
        ResultOfGetTyreWearRate {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_playback_to_use_ai_try_to_revert_back_later(&self, vehicle_: u32,
time_: i32,
driving_style_: i32,
p3_: bool) -> ResultOfSetPlaybackToUseAiTryToRevertBackLater {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut time_ = time_;
let mut driving_style_ = driving_style_;
let mut p3_ = p3_;
        let success = sdk::natives::set_playback_to_use_ai_try_to_revert_back_later(
            vehicle_,
time_,
driving_style_,
p3_,
        );
        
        
        ResultOfSetPlaybackToUseAiTryToRevertBackLater {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_homing_lockedonto_state(&self, p0_: i32) -> ResultOfGetVehicleHomingLockedontoState {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_vehicle_homing_lockedonto_state(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleHomingLockedontoState {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_stop_instantly_when_player_inactive(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleStopInstantlyWhenPlayerInactive {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_stop_instantly_when_player_inactive(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleStopInstantlyWhenPlayerInactive {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_hover_mode_wing_ratio(&self, vehicle_: u32,
ratio_: f32) -> ResultOfSetHoverModeWingRatio {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut ratio_ = ratio_;
        let success = sdk::natives::set_hover_mode_wing_ratio(
            vehicle_,
ratio_,
        );
        
        
        ResultOfSetHoverModeWingRatio {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_petrol_tank_health(&self, vehicle_: u32,
health_: f32) -> ResultOfSetVehiclePetrolTankHealth {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut health_ = health_;
        let success = sdk::natives::set_vehicle_petrol_tank_health(
            vehicle_,
health_,
        );
        
        
        ResultOfSetVehiclePetrolTankHealth {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_custom_primary_colour(&self, vehicle_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOfSetVehicleCustomPrimaryColour {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::set_vehicle_custom_primary_colour(
            vehicle_,
r_,
g_,
b_,
        );
        
        
        ResultOfSetVehicleCustomPrimaryColour {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_does_vehicle_have_tombstone(&self, vehicle_: u32) -> ResultOfGetDoesVehicleHaveTombstone {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_does_vehicle_have_tombstone(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetDoesVehicleHaveTombstone {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_explodes_on_high_explosion_damage(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleExplodesOnHighExplosionDamage {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_explodes_on_high_explosion_damage(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleExplodesOnHighExplosionDamage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_exta_pickup_range(&self, p0_: i32,
p1_: i32) -> ResultOfSetCargobobExtaPickupRange {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cargobob_exta_pickup_range(
            p0_,
p1_,
        );
        
        
        ResultOfSetCargobobExtaPickupRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_bike_easy_to_land(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetBikeEasyToLand {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_bike_easy_to_land(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetBikeEasyToLand {
            success,
            ret: (),
            
        }
    }
}

    fn native_delete_all_trains(&self, ) -> ResultOfDeleteAllTrains {
    unsafe {
        
        let success = sdk::natives::delete_all_trains(
            
        );
        
        
        ResultOfDeleteAllTrains {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_tank_stationary(&self, vehicle_: u32,
p1_: bool) -> ResultOfSetVehicleTankStationary {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_tank_stationary(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetVehicleTankStationary {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_tyre_health(&self, vehicle_: u32,
wheel_index_: i32,
health_: f32) -> ResultOfSetTyreHealth {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut wheel_index_ = wheel_index_;
let mut health_ = health_;
        let success = sdk::natives::set_tyre_health(
            vehicle_,
wheel_index_,
health_,
        );
        
        
        ResultOfSetTyreHealth {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_shoot_at_target(&self, driver_: u32,
entity_: u32,
x_target_: f32,
y_target_: f32,
z_target_: f32) -> ResultOfSetVehicleShootAtTarget {
    unsafe {
        let mut driver_ = driver_;
let mut entity_ = entity_;
let mut x_target_ = x_target_;
let mut y_target_ = y_target_;
let mut z_target_ = z_target_;
        let success = sdk::natives::set_vehicle_shoot_at_target(
            driver_,
entity_,
x_target_,
y_target_,
z_target_,
        );
        
        
        ResultOfSetVehicleShootAtTarget {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_taxi_light_on(&self, vehicle_: u32) -> ResultOfIsTaxiLightOn {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_taxi_light_on(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsTaxiLightOn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_are_plane_propellers_intact(&self, plane_: u32) -> ResultOfArePlanePropellersIntact {
    unsafe {
        let mut native_return = Default::default();
let mut plane_ = plane_;
        let success = sdk::natives::are_plane_propellers_intact(
            &mut native_return,
plane_,
        );
        let native_return = native_return;
        
        ResultOfArePlanePropellersIntact {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_disable_map_collision(&self, vehicle_: u32) -> ResultOfSetDisableMapCollision {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_disable_map_collision(
            vehicle_,
        );
        
        
        ResultOfSetDisableMapCollision {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_set_enable_normalise_ramp_car_vertical_veloctiy(&self, p0_: i32,
p1_: i32) -> ResultOfVehicleSetEnableNormaliseRampCarVerticalVeloctiy {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::vehicle_set_enable_normalise_ramp_car_vertical_veloctiy(
            p0_,
p1_,
        );
        
        
        ResultOfVehicleSetEnableNormaliseRampCarVerticalVeloctiy {
            success,
            ret: (),
            
        }
    }
}

    fn native_preload_vehicle_mod(&self, vehicle_: u32,
mod_type_: i32,
mod_index_: i32) -> ResultOfPreloadVehicleMod {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut mod_type_ = mod_type_;
let mut mod_index_ = mod_index_;
        let success = sdk::natives::preload_vehicle_mod(
            vehicle_,
mod_type_,
mod_index_,
        );
        
        
        ResultOfPreloadVehicleMod {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_boat_anchor(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetBoatAnchor {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_boat_anchor(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetBoatAnchor {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_neon_colour(&self, vehicle_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOfGetVehicleNeonColour {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::get_vehicle_neon_colour(
            &mut r_,
&mut g_,
&mut b_,
vehicle_,
        );
        let r_ = r_;
let g_ = g_;
let b_ = b_;
        
        ResultOfGetVehicleNeonColour {
            success,
            ret: (),
            r_,
g_,
b_
        }
    }
}

    fn native_set_vehicle_dont_terminate_task_when_achieved(&self, vehicle_: u32) -> ResultOfSetVehicleDontTerminateTaskWhenAchieved {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_vehicle_dont_terminate_task_when_achieved(
            vehicle_,
        );
        
        
        ResultOfSetVehicleDontTerminateTaskWhenAchieved {
            success,
            ret: (),
            
        }
    }
}

    fn native_fix_vehicle_window(&self, vehicle_: u32,
window_index_: i32) -> ResultOfFixVehicleWindow {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut window_index_ = window_index_;
        let success = sdk::natives::fix_vehicle_window(
            vehicle_,
window_index_,
        );
        
        
        ResultOfFixVehicleWindow {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_mod(&self, vehicle_: u32,
mod_type_: i32) -> ResultOfGetVehicleMod {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut mod_type_ = mod_type_;
        let success = sdk::natives::get_vehicle_mod(
            &mut native_return,
vehicle_,
mod_type_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleMod {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_doors_shut(&self, vehicle_: u32,
close_instantly_: bool) -> ResultOfSetVehicleDoorsShut {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut close_instantly_ = close_instantly_;
        let success = sdk::natives::set_vehicle_doors_shut(
            vehicle_,
close_instantly_,
        );
        
        
        ResultOfSetVehicleDoorsShut {
            success,
            ret: (),
            
        }
    }
}

    fn native_explode_vehicle_in_cutscene(&self, vehicle_: u32,
p1_: bool) -> ResultOfExplodeVehicleInCutscene {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::explode_vehicle_in_cutscene(
            vehicle_,
p1_,
        );
        
        
        ResultOfExplodeVehicleInCutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_should_reset_turret_in_scripted_cameras(&self, vehicle_: u32,
should_reset_: bool) -> ResultOfSetShouldResetTurretInScriptedCameras {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut should_reset_ = should_reset_;
        let success = sdk::natives::set_should_reset_turret_in_scripted_cameras(
            vehicle_,
should_reset_,
        );
        
        
        ResultOfSetShouldResetTurretInScriptedCameras {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_position_offset_for_recorded_vehicle_playback(&self, vehicle_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfSetPositionOffsetForRecordedVehiclePlayback {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_position_offset_for_recorded_vehicle_playback(
            vehicle_,
x_,
y_,
z_,
        );
        
        
        ResultOfSetPositionOffsetForRecordedVehiclePlayback {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_dirt_level(&self, vehicle_: u32,
dirt_level_: f32) -> ResultOfSetVehicleDirtLevel {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut dirt_level_ = dirt_level_;
        let success = sdk::natives::set_vehicle_dirt_level(
            vehicle_,
dirt_level_,
        );
        
        
        ResultOfSetVehicleDirtLevel {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_extended_removal_range(&self, vehicle_: u32,
range_: i32) -> ResultOfSetVehicleExtendedRemovalRange {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut range_ = range_;
        let success = sdk::natives::set_vehicle_extended_removal_range(
            vehicle_,
range_,
        );
        
        
        ResultOfSetVehicleExtendedRemovalRange {
            success,
            ret: (),
            
        }
    }
}

    fn native_roll_down_window(&self, vehicle_: u32,
window_index_: i32) -> ResultOfRollDownWindow {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut window_index_ = window_index_;
        let success = sdk::natives::roll_down_window(
            vehicle_,
window_index_,
        );
        
        
        ResultOfRollDownWindow {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_speed_boost_effect_disabled(&self, disabled_: bool) -> ResultOfSetSpeedBoostEffectDisabled {
    unsafe {
        let mut disabled_ = disabled_;
        let success = sdk::natives::set_speed_boost_effect_disabled(
            disabled_,
        );
        
        
        ResultOfSetSpeedBoostEffectDisabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_pick_up_rope_for_cargobob(&self, cargobob_: u32,
state_: i32) -> ResultOfCreatePickUpRopeForCargobob {
    unsafe {
        let mut cargobob_ = cargobob_;
let mut state_ = state_;
        let success = sdk::natives::create_pick_up_rope_for_cargobob(
            cargobob_,
state_,
        );
        
        
        ResultOfCreatePickUpRopeForCargobob {
            success,
            ret: (),
            
        }
    }
}

    fn native_detach_container_from_handler_frame(&self, vehicle_: u32) -> ResultOfDetachContainerFromHandlerFrame {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::detach_container_from_handler_frame(
            vehicle_,
        );
        
        
        ResultOfDetachContainerFromHandlerFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_stop_bringing_vehicle_to_halt(&self, vehicle_: u32) -> ResultOfStopBringingVehicleToHalt {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::stop_bringing_vehicle_to_halt(
            vehicle_,
        );
        
        
        ResultOfStopBringingVehicleToHalt {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_door_open(&self, vehicle_: u32,
door_id_: i32,
loose_: bool,
open_instantly_: bool) -> ResultOfSetVehicleDoorOpen {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut door_id_ = door_id_;
let mut loose_ = loose_;
let mut open_instantly_ = open_instantly_;
        let success = sdk::natives::set_vehicle_door_open(
            vehicle_,
door_id_,
loose_,
open_instantly_,
        );
        
        
        ResultOfSetVehicleDoorOpen {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_number_plate_text(&self, vehicle_: u32) -> ResultOfGetVehicleNumberPlateText {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_number_plate_text(
            native_return.pin_mut(),
vehicle_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetVehicleNumberPlateText {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_extra_colour5(&self, vehicle_: u32,
color_: i32) -> ResultOfGetVehicleExtraColour5 {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut color_ = color_;
        let success = sdk::natives::get_vehicle_extra_colour5(
            &mut color_,
vehicle_,
        );
        let color_ = color_;
        
        ResultOfGetVehicleExtraColour5 {
            success,
            ret: (),
            color_
        }
    }
}

    fn native_get_vehicle_petrol_tank_health(&self, vehicle_: u32) -> ResultOfGetVehiclePetrolTankHealth {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_petrol_tank_health(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehiclePetrolTankHealth {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_allow_homing_missle_lockon(&self, vehicle_: u32,
toggle_: bool,
p2_: bool) -> ResultOfSetVehicleAllowHomingMissleLockon {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
let mut p2_ = p2_;
        let success = sdk::natives::set_vehicle_allow_homing_missle_lockon(
            vehicle_,
toggle_,
p2_,
        );
        
        
        ResultOfSetVehicleAllowHomingMissleLockon {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_playback_recorded_vehicle_with_flags(&self, vehicle_: u32,
recording_: i32,
script_: Option<String>,
flags_: i32,
time_: i32,
driving_style_: i32) -> ResultOfStartPlaybackRecordedVehicleWithFlags {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut recording_ = recording_;
let mut script_ = sdk_helpers::create_c_string_ptr(script_);
let mut flags_ = flags_;
let mut time_ = time_;
let mut driving_style_ = driving_style_;
        let success = sdk::natives::start_playback_recorded_vehicle_with_flags(
            vehicle_,
recording_,
script_.as_ref().unwrap(),
flags_,
time_,
driving_style_,
        );
        
        
        ResultOfStartPlaybackRecordedVehicleWithFlags {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_extra(&self, vehicle_: u32,
extra_id_: i32,
disable_: bool) -> ResultOfSetVehicleExtra {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut extra_id_ = extra_id_;
let mut disable_ = disable_;
        let success = sdk::natives::set_vehicle_extra(
            vehicle_,
extra_id_,
disable_,
        );
        
        
        ResultOfSetVehicleExtra {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_cop_vehicle_in_area3d(&self, x1_: f32,
x2_: f32,
y1_: f32,
y2_: f32,
z1_: f32,
z2_: f32) -> ResultOfIsCopVehicleInArea3d {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut x2_ = x2_;
let mut y1_ = y1_;
let mut y2_ = y2_;
let mut z1_ = z1_;
let mut z2_ = z2_;
        let success = sdk::natives::is_cop_vehicle_in_area3d(
            &mut native_return,
x1_,
x2_,
y1_,
y2_,
z1_,
z2_,
        );
        let native_return = native_return;
        
        ResultOfIsCopVehicleInArea3d {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_this_model_a_car(&self, model_: u32) -> ResultOfIsThisModelAcar {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_this_model_a_car(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOfIsThisModelAcar {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_heli_resist_to_explosion(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetHeliResistToExplosion {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_heli_resist_to_explosion(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetHeliResistToExplosion {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_trailer_parent_vehicle(&self, trailer_: u32) -> ResultOfGetVehicleTrailerParentVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut trailer_ = trailer_;
        let success = sdk::natives::get_vehicle_trailer_parent_vehicle(
            &mut native_return,
trailer_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleTrailerParentVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_random_trains(&self, toggle_: bool) -> ResultOfSetRandomTrains {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_random_trains(
            toggle_,
        );
        
        
        ResultOfSetRandomTrains {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_allow_ramming_soop_or_ramp(&self, p0_: i32,
p1_: i32) -> ResultOfSetAllowRammingSoopOrRamp {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_allow_ramming_soop_or_ramp(
            p0_,
p1_,
        );
        
        
        ResultOfSetAllowRammingSoopOrRamp {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_mod_color2(&self, vehicle_: u32,
paint_type_: i32,
color_: i32) -> ResultOfGetVehicleModColor2 {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut paint_type_ = paint_type_;
let mut color_ = color_;
        let success = sdk::natives::get_vehicle_mod_color2(
            &mut paint_type_,
&mut color_,
vehicle_,
        );
        let paint_type_ = paint_type_;
let color_ = color_;
        
        ResultOfGetVehicleModColor2 {
            success,
            ret: (),
            paint_type_,
color_
        }
    }
}

    fn native_set_vehicle_mod_color2(&self, vehicle_: u32,
paint_type_: i32,
color_: i32) -> ResultOfSetVehicleModColor2 {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut paint_type_ = paint_type_;
let mut color_ = color_;
        let success = sdk::natives::set_vehicle_mod_color2(
            vehicle_,
paint_type_,
color_,
        );
        
        
        ResultOfSetVehicleModColor2 {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_weapon_restricted_ammo(&self, vehicle_: u32,
weapon_index_: i32) -> ResultOfGetVehicleWeaponRestrictedAmmo {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut weapon_index_ = weapon_index_;
        let success = sdk::natives::get_vehicle_weapon_restricted_ammo(
            &mut native_return,
vehicle_,
weapon_index_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleWeaponRestrictedAmmo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_vehicle_asset(&self, vehicle_hash_: u32,
vehicle_asset_: i32) -> ResultOfRequestVehicleAsset {
    unsafe {
        let mut vehicle_hash_ = vehicle_hash_;
let mut vehicle_asset_ = vehicle_asset_;
        let success = sdk::natives::request_vehicle_asset(
            vehicle_hash_,
vehicle_asset_,
        );
        
        
        ResultOfRequestVehicleAsset {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_rocket_boost_active(&self, vehicle_: u32,
active_: bool) -> ResultOfSetRocketBoostActive {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut active_ = active_;
        let success = sdk::natives::set_rocket_boost_active(
            vehicle_,
active_,
        );
        
        
        ResultOfSetRocketBoostActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_ped_stand_on_top(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetDisablePedStandOnTop {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_ped_stand_on_top(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetDisablePedStandOnTop {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_detonation_mode(&self, toggle_: bool) -> ResultOfSetVehicleDetonationMode {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_detonation_mode(
            toggle_,
        );
        
        
        ResultOfSetVehicleDetonationMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_vehicle_stuck_check(&self, vehicle_: u32) -> ResultOfRemoveVehicleStuckCheck {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::remove_vehicle_stuck_check(
            vehicle_,
        );
        
        
        ResultOfRemoveVehicleStuckCheck {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_custom_secondary_colour(&self, vehicle_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOfGetVehicleCustomSecondaryColour {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::get_vehicle_custom_secondary_colour(
            &mut r_,
&mut g_,
&mut b_,
vehicle_,
        );
        let r_ = r_;
let g_ = g_;
let b_ = b_;
        
        ResultOfGetVehicleCustomSecondaryColour {
            success,
            ret: (),
            r_,
g_,
b_
        }
    }
}

    fn native_suppress_neons_on_vehicle(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSuppressNeonsOnVehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::suppress_neons_on_vehicle(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSuppressNeonsOnVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_last_ped_in_vehicle_seat(&self, vehicle_: u32,
seat_index_: i32) -> ResultOfGetLastPedInVehicleSeat {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut seat_index_ = seat_index_;
        let success = sdk::natives::get_last_ped_in_vehicle_seat(
            &mut native_return,
vehicle_,
seat_index_,
        );
        let native_return = native_return;
        
        ResultOfGetLastPedInVehicleSeat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_random_boats(&self, toggle_: bool) -> ResultOfSetRandomBoats {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_random_boats(
            toggle_,
        );
        
        
        ResultOfSetRandomBoats {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_toggle_mod_on(&self, vehicle_: u32,
mod_type_: i32) -> ResultOfIsToggleModOn {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut mod_type_ = mod_type_;
        let success = sdk::natives::is_toggle_mod_on(
            &mut native_return,
vehicle_,
mod_type_,
        );
        let native_return = native_return;
        
        ResultOfIsToggleModOn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_hydraulic_suspension_raise_factor(&self, vehicle_: u32,
wheel_id_: i32,
value_: f32) -> ResultOfSetHydraulicSuspensionRaiseFactor {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut wheel_id_ = wheel_id_;
let mut value_ = value_;
        let success = sdk::natives::set_hydraulic_suspension_raise_factor(
            vehicle_,
wheel_id_,
value_,
        );
        
        
        ResultOfSetHydraulicSuspensionRaiseFactor {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_car_high_speed_bump_severity_multiplier(&self, multiplier_: f32) -> ResultOfSetCarHighSpeedBumpSeverityMultiplier {
    unsafe {
        let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_car_high_speed_bump_severity_multiplier(
            multiplier_,
        );
        
        
        ResultOfSetCarHighSpeedBumpSeverityMultiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_is_dummy(&self, p0_: i32) -> ResultOfGetVehicleIsDummy {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_vehicle_is_dummy(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleIsDummy {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_roll_down_windows(&self, vehicle_: u32) -> ResultOfRollDownWindows {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::roll_down_windows(
            vehicle_,
        );
        
        
        ResultOfRollDownWindows {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_bounds_affect_water_probes(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetBoundsAffectWaterProbes {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_bounds_affect_water_probes(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetBoundsAffectWaterProbes {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ignore_planes_small_pitch_change(&self, p0_: i32,
p1_: i32) -> ResultOfSetIgnorePlanesSmallPitchChange {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ignore_planes_small_pitch_change(
            p0_,
p1_,
        );
        
        
        ResultOfSetIgnorePlanesSmallPitchChange {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_weapon_can_target_objects(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleWeaponCanTargetObjects {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_weapon_can_target_objects(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleWeaponCanTargetObjects {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_bobblehead_velocity(&self, x_: f32,
y_: f32,
p2_: f32) -> ResultOfSetVehicleBobbleheadVelocity {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut p2_ = p2_;
        let success = sdk::natives::set_vehicle_bobblehead_velocity(
            x_,
y_,
p2_,
        );
        
        
        ResultOfSetVehicleBobbleheadVelocity {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_attached_to_cargobob(&self, cargobob_: u32) -> ResultOfGetVehicleAttachedToCargobob {
    unsafe {
        let mut native_return = Default::default();
let mut cargobob_ = cargobob_;
        let success = sdk::natives::get_vehicle_attached_to_cargobob(
            &mut native_return,
cargobob_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleAttachedToCargobob {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_pickup_rope_length_for_cargobob(&self, cargobob_: u32,
length1_: f32,
length2_: f32,
p3_: bool) -> ResultOfSetPickupRopeLengthForCargobob {
    unsafe {
        let mut cargobob_ = cargobob_;
let mut length1_ = length1_;
let mut length2_ = length2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_pickup_rope_length_for_cargobob(
            cargobob_,
length1_,
length2_,
p3_,
        );
        
        
        ResultOfSetPickupRopeLengthForCargobob {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_trailer_legs_lowered(&self, vehicle_: u32) -> ResultOfSetTrailerLegsLowered {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_trailer_legs_lowered(
            vehicle_,
        );
        
        
        ResultOfSetTrailerLegsLowered {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_livery_count(&self, vehicle_: u32) -> ResultOfGetVehicleLiveryCount {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_livery_count(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleLiveryCount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_open_bomb_bay_doors(&self, vehicle_: u32) -> ResultOfOpenBombBayDoors {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::open_bomb_bay_doors(
            vehicle_,
        );
        
        
        ResultOfOpenBombBayDoors {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_force_interiorlight(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleForceInteriorlight {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_force_interiorlight(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleForceInteriorlight {
            success,
            ret: (),
            
        }
    }
}

    fn native_unpause_playback_recorded_vehicle(&self, vehicle_: u32) -> ResultOfUnpausePlaybackRecordedVehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::unpause_playback_recorded_vehicle(
            vehicle_,
        );
        
        
        ResultOfUnpausePlaybackRecordedVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_force_fix_link_matrices(&self, vehicle_: u32) -> ResultOfSetForceFixLinkMatrices {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_force_fix_link_matrices(
            vehicle_,
        );
        
        
        ResultOfSetForceFixLinkMatrices {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_use_more_restrictive_spawn_checks(&self, vehicle_: u32,
p1_: bool) -> ResultOfSetVehicleUseMoreRestrictiveSpawnChecks {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_use_more_restrictive_spawn_checks(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetVehicleUseMoreRestrictiveSpawnChecks {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_mod_text_label(&self, vehicle_: u32,
mod_type_: i32,
mod_value_: i32) -> ResultOfGetModTextLabel {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut vehicle_ = vehicle_;
let mut mod_type_ = mod_type_;
let mut mod_value_ = mod_value_;
        let success = sdk::natives::get_mod_text_label(
            native_return.pin_mut(),
vehicle_,
mod_type_,
mod_value_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetModTextLabel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_handler_frame_lined_up_with_container(&self, vehicle_: u32,
entity_: u32) -> ResultOfIsHandlerFrameLinedUpWithContainer {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut entity_ = entity_;
        let success = sdk::natives::is_handler_frame_lined_up_with_container(
            &mut native_return,
vehicle_,
entity_,
        );
        let native_return = native_return;
        
        ResultOfIsHandlerFrameLinedUpWithContainer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_gravity(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleGravity {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_gravity(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleGravity {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_disable_height_map_avoidance(&self, vehicle_: u32,
p1_: bool) -> ResultOfSetVehicleDisableHeightMapAvoidance {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_disable_height_map_avoidance(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetVehicleDisableHeightMapAvoidance {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_undriveable(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleUndriveable {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_undriveable(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleUndriveable {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_vehicle_have_roof(&self, vehicle_: u32) -> ResultOfDoesVehicleHaveRoof {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::does_vehicle_have_roof(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfDoesVehicleHaveRoof {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_fullbeam(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleFullbeam {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_fullbeam(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleFullbeam {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_automatically_attaches(&self, vehicle_: u32,
p1_: bool,
p2_: i32) -> ResultOfSetVehicleAutomaticallyAttaches {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_vehicle_automatically_attaches(
            &mut native_return,
vehicle_,
p1_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfSetVehicleAutomaticallyAttaches {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_model_acceleration(&self, model_hash_: u32) -> ResultOfGetVehicleModelAcceleration {
    unsafe {
        let mut native_return = Default::default();
let mut model_hash_ = model_hash_;
        let success = sdk::natives::get_vehicle_model_acceleration(
            &mut native_return,
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleModelAcceleration {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_neon_enabled(&self, vehicle_: u32,
index_: i32) -> ResultOfGetVehicleNeonEnabled {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut index_ = index_;
        let success = sdk::natives::get_vehicle_neon_enabled(
            &mut native_return,
vehicle_,
index_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleNeonEnabled {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_sprayable(&self, vehicle_: u32) -> ResultOfIsVehicleSprayable {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_sprayable(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleSprayable {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_find_spawn_coordinates_for_heli(&self, ped_: u32) -> ResultOfFindSpawnCoordinatesForHeli {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut ped_ = ped_;
        let success = sdk::natives::find_spawn_coordinates_for_heli(
            native_return.pin_mut(),
ped_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfFindSpawnCoordinatesForHeli {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_neon_colour(&self, vehicle_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOfSetVehicleNeonColour {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::set_vehicle_neon_colour(
            vehicle_,
r_,
g_,
b_,
        );
        
        
        ResultOfSetVehicleNeonColour {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_hydraulic_vehicle_state(&self, vehicle_: u32,
state_: i32) -> ResultOfSetHydraulicVehicleState {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::set_hydraulic_vehicle_state(
            vehicle_,
state_,
        );
        
        
        ResultOfSetHydraulicVehicleState {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_retracting_weapon_blades(&self, toggle_: bool) -> ResultOfSetDisableRetractingWeaponBlades {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_retracting_weapon_blades(
            toggle_,
        );
        
        
        ResultOfSetDisableRetractingWeaponBlades {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_dirt_level(&self, vehicle_: u32) -> ResultOfGetVehicleDirtLevel {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_dirt_level(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleDirtLevel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_lock_on_target(&self, vehicle_: u32,
entity_: u32) -> ResultOfGetVehicleLockOnTarget {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut entity_ = entity_;
        let success = sdk::natives::get_vehicle_lock_on_target(
            &mut native_return,
&mut entity_,
vehicle_,
        );
        let native_return = native_return;
let entity_ = entity_;
        
        ResultOfGetVehicleLockOnTarget {
            success,
            ret: native_return,
            entity_
        }
    }
}

    fn native_raise_convertible_roof(&self, vehicle_: u32,
instantly_raise_: bool) -> ResultOfRaiseConvertibleRoof {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut instantly_raise_ = instantly_raise_;
        let success = sdk::natives::raise_convertible_roof(
            vehicle_,
instantly_raise_,
        );
        
        
        ResultOfRaiseConvertibleRoof {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_boat_sinks_when_wrecked(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetBoatSinksWhenWrecked {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_boat_sinks_when_wrecked(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetBoatSinksWhenWrecked {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_steering_bias_scalar(&self, p0_: i32,
p1_: f32) -> ResultOfSetVehicleSteeringBiasScalar {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_steering_bias_scalar(
            p0_,
p1_,
        );
        
        
        ResultOfSetVehicleSteeringBiasScalar {
            success,
            ret: (),
            
        }
    }
}

    fn native_detach_vehicle_from_trailer(&self, vehicle_: u32) -> ResultOfDetachVehicleFromTrailer {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::detach_vehicle_from_trailer(
            vehicle_,
        );
        
        
        ResultOfDetachVehicleFromTrailer {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_car_has_jump(&self, vehicle_: u32) -> ResultOfGetCarHasJump {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_car_has_jump(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetCarHasJump {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_number_plate_text_index(&self, vehicle_: u32,
plate_index_: i32) -> ResultOfSetVehicleNumberPlateTextIndex {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut plate_index_ = plate_index_;
        let success = sdk::natives::set_vehicle_number_plate_text_index(
            vehicle_,
plate_index_,
        );
        
        
        ResultOfSetVehicleNumberPlateTextIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_mod_modifier_value(&self, vehicle_: u32,
mod_type_: i32,
mod_index_: i32) -> ResultOfGetVehicleModModifierValue {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut mod_type_ = mod_type_;
let mut mod_index_ = mod_index_;
        let success = sdk::natives::get_vehicle_mod_modifier_value(
            &mut native_return,
vehicle_,
mod_type_,
mod_index_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleModModifierValue {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ambient_vehicle_range_multiplier_this_frame(&self, value_: f32) -> ResultOfSetAmbientVehicleRangeMultiplierThisFrame {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_ambient_vehicle_range_multiplier_this_frame(
            value_,
        );
        
        
        ResultOfSetAmbientVehicleRangeMultiplierThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_vehicle_secondary_colour_custom(&self, vehicle_: u32) -> ResultOfGetIsVehicleSecondaryColourCustom {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_is_vehicle_secondary_colour_custom(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetIsVehicleSecondaryColourCustom {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_disable_vehicle_engine_fires(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetDisableVehicleEngineFires {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_vehicle_engine_fires(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetDisableVehicleEngineFires {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_instant_fill_vehicle_population_finished(&self, ) -> ResultOfHasInstantFillVehiclePopulationFinished {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::has_instant_fill_vehicle_population_finished(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfHasInstantFillVehiclePopulationFinished {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_lower_forklift_forks(&self, forklift_: u32) -> ResultOfLowerForkliftForks {
    unsafe {
        let mut forklift_ = forklift_;
        let success = sdk::natives::lower_forklift_forks(
            forklift_,
        );
        
        
        ResultOfLowerForkliftForks {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_position_of_vehicle_recording_id_at_time(&self, id_: i32,
time_: f32) -> ResultOfGetPositionOfVehicleRecordingIdAtTime {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut id_ = id_;
let mut time_ = time_;
        let success = sdk::natives::get_position_of_vehicle_recording_id_at_time(
            native_return.pin_mut(),
id_,
time_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetPositionOfVehicleRecordingIdAtTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_number_of_vehicle_doors(&self, vehicle_: u32) -> ResultOfGetNumberOfVehicleDoors {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_number_of_vehicle_doors(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetNumberOfVehicleDoors {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_brake_lights(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleBrakeLights {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_brake_lights(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleBrakeLights {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_vehicle_mod(&self, vehicle_: u32,
mod_type_: i32) -> ResultOfRemoveVehicleMod {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut mod_type_ = mod_type_;
        let success = sdk::natives::remove_vehicle_mod(
            vehicle_,
mod_type_,
        );
        
        
        ResultOfRemoveVehicleMod {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_has_strong_axles(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleHasStrongAxles {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_has_strong_axles(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleHasStrongAxles {
            success,
            ret: (),
            
        }
    }
}

    fn native_modify_vehicle_top_speed(&self, vehicle_: u32,
value_: f32) -> ResultOfModifyVehicleTopSpeed {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut value_ = value_;
        let success = sdk::natives::modify_vehicle_top_speed(
            vehicle_,
value_,
        );
        
        
        ResultOfModifyVehicleTopSpeed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_lod_multiplier(&self, vehicle_: u32,
multiplier_: f32) -> ResultOfSetVehicleLodMultiplier {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_vehicle_lod_multiplier(
            vehicle_,
multiplier_,
        );
        
        
        ResultOfSetVehicleLodMultiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_door_shut(&self, vehicle_: u32,
door_id_: i32,
close_instantly_: bool) -> ResultOfSetVehicleDoorShut {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut door_id_ = door_id_;
let mut close_instantly_ = close_instantly_;
        let success = sdk::natives::set_vehicle_door_shut(
            vehicle_,
door_id_,
close_instantly_,
        );
        
        
        ResultOfSetVehicleDoorShut {
            success,
            ret: (),
            
        }
    }
}

    fn native_skip_time_in_playback_recorded_vehicle(&self, vehicle_: u32,
time_: f32) -> ResultOfSkipTimeInPlaybackRecordedVehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut time_ = time_;
        let success = sdk::natives::skip_time_in_playback_recorded_vehicle(
            vehicle_,
time_,
        );
        
        
        ResultOfSkipTimeInPlaybackRecordedVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_heli_can_pickup_entity_that_has_pick_up_disabled(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetHeliCanPickupEntityThatHasPickUpDisabled {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_heli_can_pickup_entity_that_has_pick_up_disabled(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetHeliCanPickupEntityThatHasPickUpDisabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_this_model_a_jetski(&self, model_: u32) -> ResultOfIsThisModelAjetski {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_this_model_a_jetski(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOfIsThisModelAjetski {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_deformation_fixed(&self, vehicle_: u32) -> ResultOfSetVehicleDeformationFixed {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_vehicle_deformation_fixed(
            vehicle_,
        );
        
        
        ResultOfSetVehicleDeformationFixed {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_vehicle_exist_with_decorator(&self, decorator_: Option<String>) -> ResultOfDoesVehicleExistWithDecorator {
    unsafe {
        let mut native_return = Default::default();
let mut decorator_ = sdk_helpers::create_c_string_ptr(decorator_);
        let success = sdk::natives::does_vehicle_exist_with_decorator(
            &mut native_return,
decorator_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfDoesVehicleExistWithDecorator {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_number_plate_text(&self, vehicle_: u32,
plate_text_: Option<String>) -> ResultOfSetVehicleNumberPlateText {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut plate_text_ = sdk_helpers::create_c_string_ptr(plate_text_);
        let success = sdk::natives::set_vehicle_number_plate_text(
            vehicle_,
plate_text_.as_ref().unwrap(),
        );
        
        
        ResultOfSetVehicleNumberPlateText {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_trailer_legs_raised(&self, vehicle_: u32) -> ResultOfSetTrailerLegsRaised {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_trailer_legs_raised(
            vehicle_,
        );
        
        
        ResultOfSetTrailerLegsRaised {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_damage_scales(&self, vehicle_: u32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32) -> ResultOfSetVehicleDamageScales {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::set_vehicle_damage_scales(
            vehicle_,
p1_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfSetVehicleDamageScales {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_doors_locked_for_non_script_players(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleDoorsLockedForNonScriptPlayers {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_doors_locked_for_non_script_players(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleDoorsLockedForNonScriptPlayers {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_pick_up_rope_for_cargobob(&self, cargobob_: u32) -> ResultOfRemovePickUpRopeForCargobob {
    unsafe {
        let mut cargobob_ = cargobob_;
        let success = sdk::natives::remove_pick_up_rope_for_cargobob(
            cargobob_,
        );
        
        
        ResultOfRemovePickUpRopeForCargobob {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_automatic_crash_task(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetDisableAutomaticCrashTask {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_automatic_crash_task(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetDisableAutomaticCrashTask {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_force_hd_vehicle(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetForceHdVehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_force_hd_vehicle(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetForceHdVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_engine_can_degrade(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleEngineCanDegrade {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_engine_can_degrade(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleEngineCanDegrade {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_causes_swerving(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleCausesSwerving {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_causes_swerving(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleCausesSwerving {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_vehicle_have_searchlight(&self, vehicle_: u32) -> ResultOfDoesVehicleHaveSearchlight {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::does_vehicle_have_searchlight(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfDoesVehicleHaveSearchlight {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_entity_attached_to_cargobob(&self, p0_: i32) -> ResultOfGetEntityAttachedToCargobob {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
        let success = sdk::natives::get_entity_attached_to_cargobob(
            &mut native_return,
p0_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityAttachedToCargobob {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_shunt_on_stick(&self, toggle_: bool) -> ResultOfSetVehicleShuntOnStick {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_shunt_on_stick(
            toggle_,
        );
        
        
        ResultOfSetVehicleShuntOnStick {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_vehicle_phone_explosive_device(&self, vehicle_: u32) -> ResultOfAddVehiclePhoneExplosiveDevice {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::add_vehicle_phone_explosive_device(
            vehicle_,
        );
        
        
        ResultOfAddVehiclePhoneExplosiveDevice {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_kers_allowed(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleKersAllowed {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_kers_allowed(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleKersAllowed {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_sub_throttle_for_time(&self, vehicle_: u32,
p1_: f32,
p2_: f32) -> ResultOfForceSubThrottleForTime {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::force_sub_throttle_for_time(
            vehicle_,
p1_,
p2_,
        );
        
        
        ResultOfForceSubThrottleForTime {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_pickup_magnet_active(&self, cargobob_: u32,
is_active_: bool) -> ResultOfSetCargobobPickupMagnetActive {
    unsafe {
        let mut cargobob_ = cargobob_;
let mut is_active_ = is_active_;
        let success = sdk::natives::set_cargobob_pickup_magnet_active(
            cargobob_,
is_active_,
        );
        
        
        ResultOfSetCargobobPickupMagnetActive {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_generator_area_of_interest(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32) -> ResultOfSetVehicleGeneratorAreaOfInterest {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
        let success = sdk::natives::set_vehicle_generator_area_of_interest(
            x_,
y_,
z_,
radius_,
        );
        
        
        ResultOfSetVehicleGeneratorAreaOfInterest {
            success,
            ret: (),
            
        }
    }
}

    fn native_have_vehicle_mods_streamed_in(&self, vehicle_: u32) -> ResultOfHaveVehicleModsStreamedIn {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::have_vehicle_mods_streamed_in(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfHaveVehicleModsStreamedIn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_flight_nozzle_position_immediate(&self, vehicle_: u32,
angle_: f32) -> ResultOfSetVehicleFlightNozzlePositionImmediate {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut angle_ = angle_;
        let success = sdk::natives::set_vehicle_flight_nozzle_position_immediate(
            vehicle_,
angle_,
        );
        
        
        ResultOfSetVehicleFlightNozzlePositionImmediate {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_landing_gear_state(&self, vehicle_: u32) -> ResultOfGetLandingGearState {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_landing_gear_state(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetLandingGearState {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_all_vehicles(&self, vehs_struct_: shared::MemoryBufferId) -> ResultOfGetAllVehicles {
    unsafe {
        let mut native_return = Default::default();
let mut vehs_struct_ = self.memory_buffers.borrow_mut().get_mut_ptr(vehs_struct_) as *mut c_void;
        let success = sdk::natives::get_all_vehicles(
            &mut native_return,
vehs_struct_,
        );
        let native_return = native_return;
let vehs_struct_ = 0;
        
        ResultOfGetAllVehicles {
            success,
            ret: native_return,
            vehs_struct_
        }
    }
}

    fn native_set_vehicle_countermeasure_ammo(&self, vehicle_: u32,
counter_measure_count_: i32) -> ResultOfSetVehicleCountermeasureAmmo {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut counter_measure_count_ = counter_measure_count_;
        let success = sdk::natives::set_vehicle_countermeasure_ammo(
            vehicle_,
counter_measure_count_,
        );
        
        
        ResultOfSetVehicleCountermeasureAmmo {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_pickup_magnet_set_ambient_mode(&self, vehicle_: u32,
p1_: bool,
p2_: bool) -> ResultOfSetCargobobPickupMagnetSetAmbientMode {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_cargobob_pickup_magnet_set_ambient_mode(
            vehicle_,
p1_,
p2_,
        );
        
        
        ResultOfSetCargobobPickupMagnetSetAmbientMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_act_as_if_has_siren_on(&self, vehicle_: u32,
p1_: bool) -> ResultOfSetVehicleActAsIfHasSirenOn {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_act_as_if_has_siren_on(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetVehicleActAsIfHasSirenOn {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_vehicle_horn(&self, vehicle_: u32,
duration_: i32,
mode_: u32,
forever_: bool) -> ResultOfStartVehicleHorn {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut duration_ = duration_;
let mut mode_ = mode_;
let mut forever_ = forever_;
        let success = sdk::natives::start_vehicle_horn(
            vehicle_,
duration_,
mode_,
forever_,
        );
        
        
        ResultOfStartVehicleHorn {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_plate_type(&self, vehicle_: u32) -> ResultOfGetVehiclePlateType {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_plate_type(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehiclePlateType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_bike_on_stand(&self, vehicle_: u32,
x_: f32,
y_: f32) -> ResultOfSetBikeOnStand {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
        let success = sdk::natives::set_bike_on_stand(
            vehicle_,
x_,
y_,
        );
        
        
        ResultOfSetBikeOnStand {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_num_vehicle_window_tints(&self, ) -> ResultOfGetNumVehicleWindowTints {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_num_vehicle_window_tints(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetNumVehicleWindowTints {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_vehicle_set_jet_wash_force_enabled(&self, p0_: i32) -> ResultOfVehicleSetJetWashForceEnabled {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::vehicle_set_jet_wash_force_enabled(
            p0_,
        );
        
        
        ResultOfVehicleSetJetWashForceEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_in_car_mod_shop(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleInCarModShop {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_in_car_mod_shop(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleInCarModShop {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_script_vehicle_generator(&self, x_: f32,
y_: f32,
z_: f32,
heading_: f32,
p4_: f32,
p5_: f32,
model_hash_: u32,
p7_: i32,
p8_: i32,
p9_: i32,
p10_: i32,
p11_: bool,
p12_: bool,
p13_: bool,
p14_: bool,
p15_: bool,
p16_: i32) -> ResultOfCreateScriptVehicleGenerator {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut model_hash_ = model_hash_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
let mut p10_ = p10_;
let mut p11_ = p11_;
let mut p12_ = p12_;
let mut p13_ = p13_;
let mut p14_ = p14_;
let mut p15_ = p15_;
let mut p16_ = p16_;
        let success = sdk::natives::create_script_vehicle_generator(
            &mut native_return,
x_,
y_,
z_,
heading_,
p4_,
p5_,
model_hash_,
p7_,
p8_,
p9_,
p10_,
p11_,
p12_,
p13_,
p14_,
p15_,
p16_,
        );
        let native_return = native_return;
        
        ResultOfCreateScriptVehicleGenerator {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_smash_vehicle_window(&self, vehicle_: u32,
window_index_: i32) -> ResultOfSmashVehicleWindow {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut window_index_ = window_index_;
        let success = sdk::natives::smash_vehicle_window(
            vehicle_,
window_index_,
        );
        
        
        ResultOfSmashVehicleWindow {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_big_vehicle(&self, vehicle_: u32) -> ResultOfIsBigVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_big_vehicle(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsBigVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_blip_throttle_randomly(&self, vehicle_: u32,
p1_: bool) -> ResultOfSetVehicleBlipThrottleRandomly {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_blip_throttle_randomly(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetVehicleBlipThrottleRandomly {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_in_vehicle_clipset_hash_for_seat(&self, vehicle_: u32,
p1_: i32) -> ResultOfGetInVehicleClipsetHashForSeat {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::get_in_vehicle_clipset_hash_for_seat(
            &mut native_return,
vehicle_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfGetInVehicleClipsetHashForSeat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_this_model_a_plane(&self, model_: u32) -> ResultOfIsThisModelAplane {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_this_model_a_plane(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOfIsThisModelAplane {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_max_traction(&self, vehicle_: u32) -> ResultOfGetVehicleMaxTraction {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_max_traction(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleMaxTraction {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_heli_blades_full_speed(&self, vehicle_: u32) -> ResultOfSetHeliBladesFullSpeed {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_heli_blades_full_speed(
            vehicle_,
        );
        
        
        ResultOfSetHeliBladesFullSpeed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_pickup_magnet_falloff(&self, cargobob_: u32,
p1_: f32) -> ResultOfSetCargobobPickupMagnetFalloff {
    unsafe {
        let mut cargobob_ = cargobob_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cargobob_pickup_magnet_falloff(
            cargobob_,
p1_,
        );
        
        
        ResultOfSetCargobobPickupMagnetFalloff {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_colours(&self, vehicle_: u32,
color_primary_: i32,
color_secondary_: i32) -> ResultOfGetVehicleColours {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut color_primary_ = color_primary_;
let mut color_secondary_ = color_secondary_;
        let success = sdk::natives::get_vehicle_colours(
            &mut color_primary_,
&mut color_secondary_,
vehicle_,
        );
        let color_primary_ = color_primary_;
let color_secondary_ = color_secondary_;
        
        ResultOfGetVehicleColours {
            success,
            ret: (),
            color_primary_,
color_secondary_
        }
    }
}

    fn native_is_this_model_an_amphibious_quadbike(&self, model_: u32) -> ResultOfIsThisModelAnAmphibiousQuadbike {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_this_model_an_amphibious_quadbike(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOfIsThisModelAnAmphibiousQuadbike {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_damage(&self, vehicle_: u32,
x_offset_: f32,
y_offset_: f32,
z_offset_: f32,
damage_: f32,
radius_: f32,
focus_on_model_: bool) -> ResultOfSetVehicleDamage {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut x_offset_ = x_offset_;
let mut y_offset_ = y_offset_;
let mut z_offset_ = z_offset_;
let mut damage_ = damage_;
let mut radius_ = radius_;
let mut focus_on_model_ = focus_on_model_;
        let success = sdk::natives::set_vehicle_damage(
            vehicle_,
x_offset_,
y_offset_,
z_offset_,
damage_,
radius_,
focus_on_model_,
        );
        
        
        ResultOfSetVehicleDamage {
            success,
            ret: (),
            
        }
    }
}

    fn native_attach_entity_to_cargobob(&self, p0_: i32,
p1_: i32,
p2_: i32,
p3_: i32,
p4_: i32,
p5_: i32) -> ResultOfAttachEntityToCargobob {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
        let success = sdk::natives::attach_entity_to_cargobob(
            p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
        );
        
        
        ResultOfAttachEntityToCargobob {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_vehicle_shunting(&self, vehicle_: u32) -> ResultOfGetIsVehicleShunting {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_is_vehicle_shunting(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetIsVehicleShunting {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_fleeing_vehicles_use_switched_off_nodes(&self, p0_: i32) -> ResultOfSetFleeingVehiclesUseSwitchedOffNodes {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_fleeing_vehicles_use_switched_off_nodes(
            p0_,
        );
        
        
        ResultOfSetFleeingVehiclesUseSwitchedOffNodes {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_doors_locked_for_all_players(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleDoorsLockedForAllPlayers {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_doors_locked_for_all_players(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleDoorsLockedForAllPlayers {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_wheels_can_break_off_when_blow_up(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleWheelsCanBreakOffWhenBlowUp {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_wheels_can_break_off_when_blow_up(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleWheelsCanBreakOffWhenBlowUp {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_ceiling_height(&self, vehicle_: u32,
height_: f32) -> ResultOfSetVehicleCeilingHeight {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut height_ = height_;
        let success = sdk::natives::set_vehicle_ceiling_height(
            vehicle_,
height_,
        );
        
        
        ResultOfSetVehicleCeilingHeight {
            success,
            ret: (),
            
        }
    }
}

    fn native_generate_vehicle_creation_pos_from_paths(&self, out_vec_: Option<shared::Vector3>,
p1_: i32,
out_vec1_: Option<shared::Vector3>,
p3_: i32,
p4_: i32,
p5_: i32,
p6_: i32,
p7_: i32,
p8_: i32) -> ResultOfGenerateVehicleCreationPosFromPaths {
    unsafe {
        let mut native_return = Default::default();
let mut out_vec_ = sdk_helpers::create_vector3_ptr(out_vec_);
let mut p1_ = p1_;
let mut out_vec1_ = sdk_helpers::create_vector3_ptr(out_vec1_);
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
        let success = sdk::natives::generate_vehicle_creation_pos_from_paths(
            &mut native_return,
out_vec_.pin_mut(),
out_vec1_.pin_mut(),
p1_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
        );
        let native_return = native_return;
let out_vec_ = sdk_helpers::read_cpp_vector3(out_vec_);
let out_vec1_ = sdk_helpers::read_cpp_vector3(out_vec1_);
        
        ResultOfGenerateVehicleCreationPosFromPaths {
            success,
            ret: native_return,
            out_vec_,
out_vec1_
        }
    }
}

    fn native_network_cap_empty_crowding_vehicles_removal(&self, p0_: i32) -> ResultOfNetworkCapEmptyCrowdingVehiclesRemoval {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::network_cap_empty_crowding_vehicles_removal(
            p0_,
        );
        
        
        ResultOfNetworkCapEmptyCrowdingVehiclesRemoval {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_playback_to_use_ai(&self, vehicle_: u32,
driving_style_: i32) -> ResultOfSetPlaybackToUseAi {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut driving_style_ = driving_style_;
        let success = sdk::natives::set_playback_to_use_ai(
            vehicle_,
driving_style_,
        );
        
        
        ResultOfSetPlaybackToUseAi {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_num_mod_colors(&self, paint_type_: i32,
p1_: bool) -> ResultOfGetNumModColors {
    unsafe {
        let mut native_return = Default::default();
let mut paint_type_ = paint_type_;
let mut p1_ = p1_;
        let success = sdk::natives::get_num_mod_colors(
            &mut native_return,
paint_type_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfGetNumModColors {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_door_latched(&self, vehicle_: u32,
door_id_: i32,
p2_: bool,
p3_: bool,
p4_: bool) -> ResultOfSetVehicleDoorLatched {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut door_id_ = door_id_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::set_vehicle_door_latched(
            vehicle_,
door_id_,
p2_,
p3_,
p4_,
        );
        
        
        ResultOfSetVehicleDoorLatched {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_livery2(&self, vehicle_: u32,
livery_: i32) -> ResultOfSetVehicleLivery2 {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut livery_ = livery_;
        let success = sdk::natives::set_vehicle_livery2(
            vehicle_,
livery_,
        );
        
        
        ResultOfSetVehicleLivery2 {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_vehicle_high_detail_model(&self, vehicle_: u32) -> ResultOfRequestVehicleHighDetailModel {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::request_vehicle_high_detail_model(
            vehicle_,
        );
        
        
        ResultOfRequestVehicleHighDetailModel {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_vehicle_window(&self, vehicle_: u32,
window_index_: i32) -> ResultOfRemoveVehicleWindow {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut window_index_ = window_index_;
        let success = sdk::natives::remove_vehicle_window(
            vehicle_,
window_index_,
        );
        
        
        ResultOfRemoveVehicleWindow {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_set_parachute_model_tint_index(&self, vehicle_: u32,
texture_variation_: i32) -> ResultOfVehicleSetParachuteModelTintIndex {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut texture_variation_ = texture_variation_;
        let success = sdk::natives::vehicle_set_parachute_model_tint_index(
            vehicle_,
texture_variation_,
        );
        
        
        ResultOfVehicleSetParachuteModelTintIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_in_submarine_mode(&self, vehicle_: u32) -> ResultOfIsVehicleInSubmarineMode {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_in_submarine_mode(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleInSubmarineMode {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_max_number_of_passengers(&self, vehicle_: u32) -> ResultOfGetVehicleMaxNumberOfPassengers {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_max_number_of_passengers(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleMaxNumberOfPassengers {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_can_adjust_ground_clearance(&self, vehicle_: u32,
p1_: bool) -> ResultOfSetCanAdjustGroundClearance {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_can_adjust_ground_clearance(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetCanAdjustGroundClearance {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_right_vehicle_headlight_damaged(&self, vehicle_: u32) -> ResultOfGetIsRightVehicleHeadlightDamaged {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_is_right_vehicle_headlight_damaged(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetIsRightVehicleHeadlightDamaged {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_enveff_scale(&self, vehicle_: u32) -> ResultOfGetVehicleEnveffScale {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_enveff_scale(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleEnveffScale {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_can_deploy_parachute(&self, vehicle_: u32) -> ResultOfGetVehicleCanDeployParachute {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_can_deploy_parachute(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleCanDeployParachute {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_visible(&self, vehicle_: u32) -> ResultOfIsVehicleVisible {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_visible(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleVisible {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_train_speed(&self, train_: u32,
speed_: f32) -> ResultOfSetTrainSpeed {
    unsafe {
        let mut train_ = train_;
let mut speed_ = speed_;
        let success = sdk::natives::set_train_speed(
            train_,
speed_,
        );
        
        
        ResultOfSetTrainSpeed {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_vehicle_phone_explosive_device(&self, ) -> ResultOfClearVehiclePhoneExplosiveDevice {
    unsafe {
        
        let success = sdk::natives::clear_vehicle_phone_explosive_device(
            
        );
        
        
        ResultOfClearVehiclePhoneExplosiveDevice {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_dip_straight_down_when_crashing_plane(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetDipStraightDownWhenCrashingPlane {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_dip_straight_down_when_crashing_plane(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetDipStraightDownWhenCrashingPlane {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_not_stealable_ambiently(&self, vehicle_: u32,
p1_: bool) -> ResultOfSetVehicleNotStealableAmbiently {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_not_stealable_ambiently(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetVehicleNotStealableAmbiently {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_goon_boss_vehicle(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetGoonBossVehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_goon_boss_vehicle(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetGoonBossVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_forward_speed(&self, vehicle_: u32,
speed_: f32) -> ResultOfSetVehicleForwardSpeed {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut speed_ = speed_;
        let success = sdk::natives::set_vehicle_forward_speed(
            vehicle_,
speed_,
        );
        
        
        ResultOfSetVehicleForwardSpeed {
            success,
            ret: (),
            
        }
    }
}

    fn native_skip_to_end_and_stop_playback_recorded_vehicle(&self, vehicle_: u32) -> ResultOfSkipToEndAndStopPlaybackRecordedVehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::skip_to_end_and_stop_playback_recorded_vehicle(
            vehicle_,
        );
        
        
        ResultOfSkipToEndAndStopPlaybackRecordedVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_this_model_a_train(&self, model_: u32) -> ResultOfIsThisModelAtrain {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_this_model_a_train(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOfIsThisModelAtrain {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_heli_tail_boom_health(&self, vehicle_: u32) -> ResultOfGetHeliTailBoomHealth {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_heli_tail_boom_health(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetHeliTailBoomHealth {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_vehicle_asset(&self, vehicle_asset_: i32) -> ResultOfRemoveVehicleAsset {
    unsafe {
        let mut vehicle_asset_ = vehicle_asset_;
        let success = sdk::natives::remove_vehicle_asset(
            vehicle_asset_,
        );
        
        
        ResultOfRemoveVehicleAsset {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_last_driven_vehicle(&self, vehicle_: u32) -> ResultOfSetLastDrivenVehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_last_driven_vehicle(
            vehicle_,
        );
        
        
        ResultOfSetLastDrivenVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_plane_turbulence_multiplier(&self, vehicle_: u32,
multiplier_: f32) -> ResultOfSetPlaneTurbulenceMultiplier {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_plane_turbulence_multiplier(
            vehicle_,
multiplier_,
        );
        
        
        ResultOfSetPlaneTurbulenceMultiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_mission_train(&self, train_: u32) -> ResultOfIsMissionTrain {
    unsafe {
        let mut native_return = Default::default();
let mut train_ = train_;
        let success = sdk::natives::is_mission_train(
            &mut native_return,
train_,
        );
        let native_return = native_return;
        
        ResultOfIsMissionTrain {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_max_braking(&self, vehicle_: u32) -> ResultOfGetVehicleMaxBraking {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_max_braking(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleMaxBraking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_detach_vehicle_from_any_cargobob(&self, vehicle_: u32) -> ResultOfDetachVehicleFromAnyCargobob {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::detach_vehicle_from_any_cargobob(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfDetachVehicleFromAnyCargobob {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_vehicle_engine_running(&self, vehicle_: u32) -> ResultOfGetIsVehicleEngineRunning {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_is_vehicle_engine_running(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetIsVehicleEngineRunning {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_hide_tombstone(&self, vehicle_: u32,
toggle_: bool) -> ResultOfHideTombstone {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::hide_tombstone(
            vehicle_,
toggle_,
        );
        
        
        ResultOfHideTombstone {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_heli_tail_rotor_health(&self, vehicle_: u32) -> ResultOfGetHeliTailRotorHealth {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_heli_tail_rotor_health(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetHeliTailRotorHealth {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_playback_using_ai_going_on_for_vehicle(&self, vehicle_: u32) -> ResultOfIsPlaybackUsingAiGoingOnForVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_playback_using_ai_going_on_for_vehicle(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsPlaybackUsingAiGoingOnForVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_are_folding_wings_deployed(&self, vehicle_: u32) -> ResultOfAreFoldingWingsDeployed {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::are_folding_wings_deployed(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfAreFoldingWingsDeployed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_detach_entity_from_cargobob(&self, cargobob_: u32,
entity_: u32) -> ResultOfDetachEntityFromCargobob {
    unsafe {
        let mut native_return = Default::default();
let mut cargobob_ = cargobob_;
let mut entity_ = entity_;
        let success = sdk::natives::detach_entity_from_cargobob(
            &mut native_return,
cargobob_,
entity_,
        );
        let native_return = native_return;
        
        ResultOfDetachEntityFromCargobob {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_vehicle(&self, model_hash_: u32,
x_: f32,
y_: f32,
z_: f32,
heading_: f32,
is_network_: bool,
b_script_host_veh_: bool,
p7_: bool) -> ResultOfCreateVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut model_hash_ = model_hash_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut heading_ = heading_;
let mut is_network_ = is_network_;
let mut b_script_host_veh_ = b_script_host_veh_;
let mut p7_ = p7_;
        let success = sdk::natives::create_vehicle(
            &mut native_return,
model_hash_,
x_,
y_,
z_,
heading_,
is_network_,
b_script_host_veh_,
p7_,
        );
        let native_return = native_return;
        
        ResultOfCreateVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_vehicle_recording(&self, recording_: i32,
script_: Option<String>) -> ResultOfRequestVehicleRecording {
    unsafe {
        let mut recording_ = recording_;
let mut script_ = sdk_helpers::create_c_string_ptr(script_);
        let success = sdk::natives::request_vehicle_recording(
            recording_,
script_.as_ref().unwrap(),
        );
        
        
        ResultOfRequestVehicleRecording {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_disable_collision_upon_creation(&self, vehicle_: u32,
disable_: bool) -> ResultOfSetVehicleDisableCollisionUponCreation {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut disable_ = disable_;
        let success = sdk::natives::set_vehicle_disable_collision_upon_creation(
            vehicle_,
disable_,
        );
        
        
        ResultOfSetVehicleDisableCollisionUponCreation {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_force_afterburner(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleForceAfterburner {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_force_afterburner(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleForceAfterburner {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_superdummy(&self, vehicle_: u32,
p1_: bool) -> ResultOfSetDisableSuperdummy {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_disable_superdummy(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetDisableSuperdummy {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_exclusive_driver_of_vehicle(&self, ped_: u32,
vehicle_: u32,
out_index_: i32) -> ResultOfIsPedExclusiveDriverOfVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut vehicle_ = vehicle_;
let mut out_index_ = out_index_;
        let success = sdk::natives::is_ped_exclusive_driver_of_vehicle(
            &mut native_return,
&mut out_index_,
ped_,
vehicle_,
        );
        let native_return = native_return;
let out_index_ = out_index_;
        
        ResultOfIsPedExclusiveDriverOfVehicle {
            success,
            ret: native_return,
            out_index_
        }
    }
}

    fn native_is_boat_anchored(&self, vehicle_: u32) -> ResultOfIsBoatAnchored {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_boat_anchored(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsBoatAnchored {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_on_all_wheels(&self, vehicle_: u32) -> ResultOfIsVehicleOnAllWheels {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_on_all_wheels(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleOnAllWheels {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_display_name_from_vehicle_model(&self, model_hash_: u32) -> ResultOfGetDisplayNameFromVehicleModel {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut model_hash_ = model_hash_;
        let success = sdk::natives::get_display_name_from_vehicle_model(
            native_return.pin_mut(),
model_hash_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetDisplayNameFromVehicleModel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_deploy_folding_wings(&self, vehicle_: u32,
deploy_: bool,
p2_: bool) -> ResultOfSetDeployFoldingWings {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut deploy_ = deploy_;
let mut p2_ = p2_;
        let success = sdk::natives::set_deploy_folding_wings(
            vehicle_,
deploy_,
p2_,
        );
        
        
        ResultOfSetDeployFoldingWings {
            success,
            ret: (),
            
        }
    }
}

    fn native_allow_ambient_vehicles_to_avoid_adverse_conditions(&self, vehicle_: u32) -> ResultOfAllowAmbientVehiclesToAvoidAdverseConditions {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::allow_ambient_vehicles_to_avoid_adverse_conditions(
            vehicle_,
        );
        
        
        ResultOfAllowAmbientVehiclesToAvoidAdverseConditions {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_force_low_lod_anchor_mode(&self, vehicle_: u32,
p1_: bool) -> ResultOfSetForceLowLodAnchorMode {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_force_low_lod_anchor_mode(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetForceLowLodAnchorMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_last_driven_vehicle(&self, ) -> ResultOfGetLastDrivenVehicle {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_last_driven_vehicle(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetLastDrivenVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_clear_freeze_waiting_on_collision_once_player_enters(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetClearFreezeWaitingOnCollisionOncePlayerEnters {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_clear_freeze_waiting_on_collision_once_player_enters(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetClearFreezeWaitingOnCollisionOncePlayerEnters {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_light_multiplier(&self, vehicle_: u32,
multiplier_: f32) -> ResultOfSetVehicleLightMultiplier {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_vehicle_light_multiplier(
            vehicle_,
multiplier_,
        );
        
        
        ResultOfSetVehicleLightMultiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_mod_variation(&self, vehicle_: u32,
mod_type_: i32) -> ResultOfGetVehicleModVariation {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut mod_type_ = mod_type_;
        let success = sdk::natives::get_vehicle_mod_variation(
            &mut native_return,
vehicle_,
mod_type_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleModVariation {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_random_vehicle_density_multiplier_this_frame(&self, multiplier_: f32) -> ResultOfSetRandomVehicleDensityMultiplierThisFrame {
    unsafe {
        let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_random_vehicle_density_multiplier_this_frame(
            multiplier_,
        );
        
        
        ResultOfSetRandomVehicleDensityMultiplierThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_wheel_type(&self, vehicle_: u32) -> ResultOfGetVehicleWheelType {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_wheel_type(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleWheelType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_mod_color1_name(&self, vehicle_: u32,
p1_: bool) -> ResultOfGetVehicleModColor1Name {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::get_vehicle_mod_color1_name(
            native_return.pin_mut(),
vehicle_,
p1_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetVehicleModColor1Name {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_stuck_on_roof(&self, vehicle_: u32) -> ResultOfIsVehicleStuckOnRoof {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_stuck_on_roof(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleStuckOnRoof {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_livery_name(&self, vehicle_: u32,
livery_index_: i32) -> ResultOfGetLiveryName {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut vehicle_ = vehicle_;
let mut livery_index_ = livery_index_;
        let success = sdk::natives::get_livery_name(
            native_return.pin_mut(),
vehicle_,
livery_index_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetLiveryName {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_random_vehicle_back_bumper_in_sphere(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: i32,
p5_: i32,
p6_: i32) -> ResultOfGetRandomVehicleBackBumperInSphere {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::get_random_vehicle_back_bumper_in_sphere(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        let native_return = native_return;
        
        ResultOfGetRandomVehicleBackBumperInSphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_this_model_a_bike(&self, model_: u32) -> ResultOfIsThisModelAbike {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_this_model_a_bike(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOfIsThisModelAbike {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_cheat_power_increase(&self, vehicle_: u32,
value_: f32) -> ResultOfSetVehicleCheatPowerIncrease {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut value_ = value_;
        let success = sdk::natives::set_vehicle_cheat_power_increase(
            vehicle_,
value_,
        );
        
        
        ResultOfSetVehicleCheatPowerIncrease {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_tyre_smoke_color(&self, vehicle_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOfSetVehicleTyreSmokeColor {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::set_vehicle_tyre_smoke_color(
            vehicle_,
r_,
g_,
b_,
        );
        
        
        ResultOfSetVehicleTyreSmokeColor {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_exclusive_driver(&self, vehicle_: u32,
ped_: u32,
index_: i32) -> ResultOfSetVehicleExclusiveDriver {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut ped_ = ped_;
let mut index_ = index_;
        let success = sdk::natives::set_vehicle_exclusive_driver(
            vehicle_,
ped_,
index_,
        );
        
        
        ResultOfSetVehicleExclusiveDriver {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_siren_audio_on(&self, vehicle_: u32) -> ResultOfIsVehicleSirenAudioOn {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_siren_audio_on(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleSirenAudioOn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_indicator_lights(&self, vehicle_: u32,
turn_signal_: i32,
toggle_: bool) -> ResultOfSetVehicleIndicatorLights {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut turn_signal_ = turn_signal_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_indicator_lights(
            vehicle_,
turn_signal_,
toggle_,
        );
        
        
        ResultOfSetVehicleIndicatorLights {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_tyre_smoke_color(&self, vehicle_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOfGetVehicleTyreSmokeColor {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::get_vehicle_tyre_smoke_color(
            &mut r_,
&mut g_,
&mut b_,
vehicle_,
        );
        let r_ = r_;
let g_ = g_;
let b_ = b_;
        
        ResultOfGetVehicleTyreSmokeColor {
            success,
            ret: (),
            r_,
g_,
b_
        }
    }
}

    fn native_get_vehicle_custom_primary_colour(&self, vehicle_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOfGetVehicleCustomPrimaryColour {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::get_vehicle_custom_primary_colour(
            &mut r_,
&mut g_,
&mut b_,
vehicle_,
        );
        let r_ = r_;
let g_ = g_;
let b_ = b_;
        
        ResultOfGetVehicleCustomPrimaryColour {
            success,
            ret: (),
            r_,
g_,
b_
        }
    }
}

    fn native_set_vehicle_doors_locked(&self, vehicle_: u32,
door_lock_status_: i32) -> ResultOfSetVehicleDoorsLocked {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut door_lock_status_ = door_lock_status_;
        let success = sdk::natives::set_vehicle_doors_locked(
            vehicle_,
door_lock_status_,
        );
        
        
        ResultOfSetVehicleDoorsLocked {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_use_desired_z_cruise_speed_for_landing(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetUseDesiredZcruiseSpeedForLanding {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_use_desired_z_cruise_speed_for_landing(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetUseDesiredZcruiseSpeedForLanding {
            success,
            ret: (),
            
        }
    }
}

    fn native_add_vehicle_upsidedown_check(&self, vehicle_: u32) -> ResultOfAddVehicleUpsidedownCheck {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::add_vehicle_upsidedown_check(
            vehicle_,
        );
        
        
        ResultOfAddVehicleUpsidedownCheck {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_extra_colour6(&self, vehicle_: u32,
color_: i32) -> ResultOfGetVehicleExtraColour6 {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut color_ = color_;
        let success = sdk::natives::get_vehicle_extra_colour6(
            &mut color_,
vehicle_,
        );
        let color_ = color_;
        
        ResultOfGetVehicleExtraColour6 {
            success,
            ret: (),
            color_
        }
    }
}

    fn native_set_vehicle_body_health(&self, vehicle_: u32,
value_: f32) -> ResultOfSetVehicleBodyHealth {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut value_ = value_;
        let success = sdk::natives::set_vehicle_body_health(
            vehicle_,
value_,
        );
        
        
        ResultOfSetVehicleBodyHealth {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_doors_locked_for_team(&self, vehicle_: u32,
team_: i32,
toggle_: bool) -> ResultOfSetVehicleDoorsLockedForTeam {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut team_ = team_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_doors_locked_for_team(
            vehicle_,
team_,
toggle_,
        );
        
        
        ResultOfSetVehicleDoorsLockedForTeam {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_task_vehicle_goto_plane_min_height_above_terrain(&self, plane_: u32,
height_: i32) -> ResultOfSetTaskVehicleGotoPlaneMinHeightAboveTerrain {
    unsafe {
        let mut plane_ = plane_;
let mut height_ = height_;
        let success = sdk::natives::set_task_vehicle_goto_plane_min_height_above_terrain(
            plane_,
height_,
        );
        
        
        ResultOfSetTaskVehicleGotoPlaneMinHeightAboveTerrain {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_door_damaged(&self, veh_: u32,
door_i_d_: i32) -> ResultOfIsVehicleDoorDamaged {
    unsafe {
        let mut native_return = Default::default();
let mut veh_ = veh_;
let mut door_i_d_ = door_i_d_;
        let success = sdk::natives::is_vehicle_door_damaged(
            &mut native_return,
veh_,
door_i_d_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleDoorDamaged {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_health_percentage(&self, vehicle_: u32,
max_engine_health_: f32,
max_petrol_tank_health_: f32,
max_body_health_: f32,
max_main_rotor_health_: f32,
max_tail_rotor_health_: f32,
max_unk_health_: f32) -> ResultOfGetVehicleHealthPercentage {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut max_engine_health_ = max_engine_health_;
let mut max_petrol_tank_health_ = max_petrol_tank_health_;
let mut max_body_health_ = max_body_health_;
let mut max_main_rotor_health_ = max_main_rotor_health_;
let mut max_tail_rotor_health_ = max_tail_rotor_health_;
let mut max_unk_health_ = max_unk_health_;
        let success = sdk::natives::get_vehicle_health_percentage(
            &mut native_return,
vehicle_,
max_engine_health_,
max_petrol_tank_health_,
max_body_health_,
max_main_rotor_health_,
max_tail_rotor_health_,
max_unk_health_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleHealthPercentage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_keep_engine_on_when_abandoned(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleKeepEngineOnWhenAbandoned {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_keep_engine_on_when_abandoned(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleKeepEngineOnWhenAbandoned {
            success,
            ret: (),
            
        }
    }
}

    fn native_start_vehicle_alarm(&self, vehicle_: u32) -> ResultOfStartVehicleAlarm {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::start_vehicle_alarm(
            vehicle_,
        );
        
        
        ResultOfStartVehicleAlarm {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_lights_state(&self, vehicle_: u32,
lights_on_: bool,
highbeams_on_: bool) -> ResultOfGetVehicleLightsState {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut lights_on_ = lights_on_;
let mut highbeams_on_ = highbeams_on_;
        let success = sdk::natives::get_vehicle_lights_state(
            &mut native_return,
&mut lights_on_,
&mut highbeams_on_,
vehicle_,
        );
        let native_return = native_return;
let lights_on_ = lights_on_;
let highbeams_on_ = highbeams_on_;
        
        ResultOfGetVehicleLightsState {
            success,
            ret: native_return,
            lights_on_,
highbeams_on_
        }
    }
}

    fn native_set_vehicle_neon_index_colour(&self, vehicle_: u32,
index_: i32) -> ResultOfSetVehicleNeonIndexColour {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut index_ = index_;
        let success = sdk::natives::set_vehicle_neon_index_colour(
            vehicle_,
index_,
        );
        
        
        ResultOfSetVehicleNeonIndexColour {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_carjack_mission_removal_parameters(&self, p0_: i32,
p1_: i32) -> ResultOfSetCarjackMissionRemovalParameters {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_carjack_mission_removal_parameters(
            p0_,
p1_,
        );
        
        
        ResultOfSetCarjackMissionRemovalParameters {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_tyre_burst(&self, vehicle_: u32,
wheel_i_d_: i32,
completely_: bool) -> ResultOfIsVehicleTyreBurst {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut wheel_i_d_ = wheel_i_d_;
let mut completely_ = completely_;
        let success = sdk::natives::is_vehicle_tyre_burst(
            &mut native_return,
vehicle_,
wheel_i_d_,
completely_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleTyreBurst {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_explode_vehicle(&self, vehicle_: u32,
is_audible_: bool,
is_invisible_: bool) -> ResultOfExplodeVehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut is_audible_ = is_audible_;
let mut is_invisible_ = is_invisible_;
        let success = sdk::natives::explode_vehicle(
            vehicle_,
is_audible_,
is_invisible_,
        );
        
        
        ResultOfExplodeVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_boat_capsized(&self, vehicle_: u32) -> ResultOfGetIsBoatCapsized {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_is_boat_capsized(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetIsBoatCapsized {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_max_speed(&self, vehicle_: u32,
speed_: f32) -> ResultOfSetVehicleMaxSpeed {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut speed_ = speed_;
        let success = sdk::natives::set_vehicle_max_speed(
            vehicle_,
speed_,
        );
        
        
        ResultOfSetVehicleMaxSpeed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_uses_mp_player_damage_multiplier(&self, p0_: i32,
p1_: i32) -> ResultOfSetVehicleUsesMpPlayerDamageMultiplier {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_uses_mp_player_damage_multiplier(
            p0_,
p1_,
        );
        
        
        ResultOfSetVehicleUsesMpPlayerDamageMultiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_in_vehicle_seat(&self, vehicle_: u32,
seat_index_: i32,
p2_: bool) -> ResultOfGetPedInVehicleSeat {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut seat_index_ = seat_index_;
let mut p2_ = p2_;
        let success = sdk::natives::get_ped_in_vehicle_seat(
            &mut native_return,
vehicle_,
seat_index_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfGetPedInVehicleSeat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_mission_train_as_no_longer_needed(&self, train_: u32,
p1_: bool) -> ResultOfSetMissionTrainAsNoLongerNeeded {
    unsafe {
        let mut train_ = train_;
let mut p1_ = p1_;
        let success = sdk::natives::set_mission_train_as_no_longer_needed(
            &mut train_,
p1_,
        );
        let train_ = train_;
        
        ResultOfSetMissionTrainAsNoLongerNeeded {
            success,
            ret: (),
            train_
        }
    }
}

    fn native_set_vehicle_interiorlight(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleInteriorlight {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_interiorlight(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleInteriorlight {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_lights_cutoff_distance_tweak(&self, distance_: f32) -> ResultOfSetLightsCutoffDistanceTweak {
    unsafe {
        let mut distance_ = distance_;
        let success = sdk::natives::set_lights_cutoff_distance_tweak(
            distance_,
        );
        
        
        ResultOfSetLightsCutoffDistanceTweak {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_heli_part_broken(&self, vehicle_: u32,
p1_: bool,
p2_: bool,
p3_: bool) -> ResultOfIsHeliPartBroken {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::is_heli_part_broken(
            &mut native_return,
vehicle_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOfIsHeliPartBroken {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_has_parachute(&self, vehicle_: u32) -> ResultOfGetVehicleHasParachute {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_has_parachute(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleHasParachute {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cargobob_pickup_magnet_strength(&self, cargobob_: u32,
strength_: f32) -> ResultOfSetCargobobPickupMagnetStrength {
    unsafe {
        let mut cargobob_ = cargobob_;
let mut strength_ = strength_;
        let success = sdk::natives::set_cargobob_pickup_magnet_strength(
            cargobob_,
strength_,
        );
        
        
        ResultOfSetCargobobPickupMagnetStrength {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_does_vehicle_have_damage_decals(&self, vehicle_: u32) -> ResultOfGetDoesVehicleHaveDamageDecals {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_does_vehicle_have_damage_decals(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetDoesVehicleHaveDamageDecals {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_players_last_vehicle(&self, vehicle_: u32) -> ResultOfSetPlayersLastVehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_players_last_vehicle(
            vehicle_,
        );
        
        
        ResultOfSetPlayersLastVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_boat_wrecked(&self, vehicle_: u32) -> ResultOfSetBoatWrecked {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_boat_wrecked(
            vehicle_,
        );
        
        
        ResultOfSetBoatWrecked {
            success,
            ret: (),
            
        }
    }
}

    fn native_transform_to_submarine(&self, vehicle_: u32,
no_animation_: bool) -> ResultOfTransformToSubmarine {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut no_animation_ = no_animation_;
        let success = sdk::natives::transform_to_submarine(
            &mut native_return,
vehicle_,
no_animation_,
        );
        let native_return = native_return;
        
        ResultOfTransformToSubmarine {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_will_force_other_vehicles_to_stop(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleWillForceOtherVehiclesToStop {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_will_force_other_vehicles_to_stop(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleWillForceOtherVehiclesToStop {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_individual_doors_locked(&self, vehicle_: u32,
door_id_: i32,
door_lock_status_: i32) -> ResultOfSetVehicleIndividualDoorsLocked {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut door_id_ = door_id_;
let mut door_lock_status_ = door_lock_status_;
        let success = sdk::natives::set_vehicle_individual_doors_locked(
            vehicle_,
door_id_,
door_lock_status_,
        );
        
        
        ResultOfSetVehicleIndividualDoorsLocked {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_this_model_a_bicycle(&self, model_: u32) -> ResultOfIsThisModelAbicycle {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_this_model_a_bicycle(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOfIsThisModelAbicycle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_model_max_braking_max_mods(&self, model_hash_: u32) -> ResultOfGetVehicleModelMaxBrakingMaxMods {
    unsafe {
        let mut native_return = Default::default();
let mut model_hash_ = model_hash_;
        let success = sdk::natives::get_vehicle_model_max_braking_max_mods(
            &mut native_return,
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleModelMaxBrakingMaxMods {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_name_debug(&self, vehicle_: u32,
name_: Option<String>) -> ResultOfSetVehicleNameDebug {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut name_ = sdk_helpers::create_c_string_ptr(name_);
        let success = sdk::natives::set_vehicle_name_debug(
            vehicle_,
name_.as_ref().unwrap(),
        );
        
        
        ResultOfSetVehicleNameDebug {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entry_point_position(&self, vehicle_: u32,
door_id_: i32) -> ResultOfGetEntryPointPosition {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut vehicle_ = vehicle_;
let mut door_id_ = door_id_;
        let success = sdk::natives::get_entry_point_position(
            native_return.pin_mut(),
vehicle_,
door_id_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetEntryPointPosition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_pickup_rope_length_without_creating_rope_for_cargobob(&self, p0_: i32,
p1_: i32,
p2_: i32) -> ResultOfSetPickupRopeLengthWithoutCreatingRopeForCargobob {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::set_pickup_rope_length_without_creating_rope_for_cargobob(
            p0_,
p1_,
p2_,
        );
        
        
        ResultOfSetPickupRopeLengthWithoutCreatingRopeForCargobob {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_searchlight_on(&self, vehicle_: u32) -> ResultOfIsVehicleSearchlightOn {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_searchlight_on(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleSearchlightOn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_all_vehicle_generators_active_in_area(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
toggle_: bool,
p7_: bool) -> ResultOfSetAllVehicleGeneratorsActiveInArea {
    unsafe {
        let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut toggle_ = toggle_;
let mut p7_ = p7_;
        let success = sdk::natives::set_all_vehicle_generators_active_in_area(
            x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
toggle_,
p7_,
        );
        
        
        ResultOfSetAllVehicleGeneratorsActiveInArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_swing_boat_boom_freely(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSwingBoatBoomFreely {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::swing_boat_boom_freely(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSwingBoatBoomFreely {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_hydraulic_wheel_state(&self, vehicle_: u32,
wheel_id_: i32,
state_: i32,
value_: f32,
p4_: i32) -> ResultOfSetHydraulicWheelState {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut wheel_id_ = wheel_id_;
let mut state_ = state_;
let mut value_ = value_;
let mut p4_ = p4_;
        let success = sdk::natives::set_hydraulic_wheel_state(
            vehicle_,
wheel_id_,
state_,
value_,
p4_,
        );
        
        
        ResultOfSetHydraulicWheelState {
            success,
            ret: (),
            
        }
    }
}

    fn native_detach_vehicle_from_tow_truck(&self, tow_truck_: u32,
vehicle_: u32) -> ResultOfDetachVehicleFromTowTruck {
    unsafe {
        let mut tow_truck_ = tow_truck_;
let mut vehicle_ = vehicle_;
        let success = sdk::natives::detach_vehicle_from_tow_truck(
            tow_truck_,
vehicle_,
        );
        
        
        ResultOfDetachVehicleFromTowTruck {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_broken_parts_dont_affect_ai_handling(&self, vehicle_: u32,
p1_: bool) -> ResultOfSetVehicleBrokenPartsDontAffectAiHandling {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_broken_parts_dont_affect_ai_handling(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetVehicleBrokenPartsDontAffectAiHandling {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_use_player_light_settings(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleUsePlayerLightSettings {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_use_player_light_settings(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleUsePlayerLightSettings {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_engine_health(&self, vehicle_: u32) -> ResultOfGetVehicleEngineHealth {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_engine_health(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleEngineHealth {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_remove_aggressive_carjack_mission(&self, p0_: i32) -> ResultOfSetVehicleRemoveAggressiveCarjackMission {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_vehicle_remove_aggressive_carjack_mission(
            p0_,
        );
        
        
        ResultOfSetVehicleRemoveAggressiveCarjackMission {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_limit_speed_when_player_inactive(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleLimitSpeedWhenPlayerInactive {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_limit_speed_when_player_inactive(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleLimitSpeedWhenPlayerInactive {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_vehicle_upsidedown_check(&self, vehicle_: u32) -> ResultOfRemoveVehicleUpsidedownCheck {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::remove_vehicle_upsidedown_check(
            vehicle_,
        );
        
        
        ResultOfRemoveVehicleUpsidedownCheck {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_random_vehicle_front_bumper_in_sphere(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: i32,
p5_: i32,
p6_: i32) -> ResultOfGetRandomVehicleFrontBumperInSphere {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
        let success = sdk::natives::get_random_vehicle_front_bumper_in_sphere(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
        );
        let native_return = native_return;
        
        ResultOfGetRandomVehicleFrontBumperInSphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_submarine_crush_depths(&self, vehicle_: u32,
p1_: bool,
depth1_: f32,
depth2_: f32,
depth3_: f32) -> ResultOfSetSubmarineCrushDepths {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut depth1_ = depth1_;
let mut depth2_ = depth2_;
let mut depth3_ = depth3_;
        let success = sdk::natives::set_submarine_crush_depths(
            vehicle_,
p1_,
depth1_,
depth2_,
depth3_,
        );
        
        
        ResultOfSetSubmarineCrushDepths {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_turret_hidden(&self, vehicle_: u32,
index_: i32,
toggle_: bool) -> ResultOfSetTurretHidden {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut index_ = index_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_turret_hidden(
            vehicle_,
index_,
toggle_,
        );
        
        
        ResultOfSetTurretHidden {
            success,
            ret: (),
            
        }
    }
}

    fn native_force_submarine_neurtal_buoyancy(&self, p0_: i32,
p1_: i32) -> ResultOfForceSubmarineNeurtalBuoyancy {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::force_submarine_neurtal_buoyancy(
            p0_,
p1_,
        );
        
        
        ResultOfForceSubmarineNeurtalBuoyancy {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_being_brought_to_halt(&self, vehicle_: u32) -> ResultOfIsVehicleBeingBroughtToHalt {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_being_brought_to_halt(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleBeingBroughtToHalt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_flying_vehicle_model_agility(&self, model_hash_: u32) -> ResultOfGetFlyingVehicleModelAgility {
    unsafe {
        let mut native_return = Default::default();
let mut model_hash_ = model_hash_;
        let success = sdk::natives::get_flying_vehicle_model_agility(
            &mut native_return,
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetFlyingVehicleModelAgility {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_override_nitrous_level(&self, vehicle_: u32,
toggle_: bool,
level_: f32,
power_: f32,
recharge_time_: f32,
disable_sound_: bool) -> ResultOfSetOverrideNitrousLevel {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
let mut level_ = level_;
let mut power_ = power_;
let mut recharge_time_ = recharge_time_;
let mut disable_sound_ = disable_sound_;
        let success = sdk::natives::set_override_nitrous_level(
            vehicle_,
toggle_,
level_,
power_,
recharge_time_,
disable_sound_,
        );
        
        
        ResultOfSetOverrideNitrousLevel {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_tyre_maximum_grip_difference_due_to_wear_rate(&self, vehicle_: u32,
wheel_index_: i32,
multiplier_: f32) -> ResultOfSetTyreMaximumGripDifferenceDueToWearRate {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut wheel_index_ = wheel_index_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_tyre_maximum_grip_difference_due_to_wear_rate(
            vehicle_,
wheel_index_,
multiplier_,
        );
        
        
        ResultOfSetTyreMaximumGripDifferenceDueToWearRate {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_individual_door_lock_status(&self, vehicle_: u32,
door_id_: i32) -> ResultOfGetVehicleIndividualDoorLockStatus {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut door_id_ = door_id_;
        let success = sdk::natives::get_vehicle_individual_door_lock_status(
            &mut native_return,
vehicle_,
door_id_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleIndividualDoorLockStatus {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_number_of_parked_vehicles(&self, value_: i32) -> ResultOfSetNumberOfParkedVehicles {
    unsafe {
        let mut value_ = value_;
        let success = sdk::natives::set_number_of_parked_vehicles(
            value_,
        );
        
        
        ResultOfSetNumberOfParkedVehicles {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_uses_large_rear_ramp(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleUsesLargeRearRamp {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_uses_large_rear_ramp(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleUsesLargeRearRamp {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_attached_pick_up_hook_position(&self, cargobob_: u32) -> ResultOfGetAttachedPickUpHookPosition {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut cargobob_ = cargobob_;
        let success = sdk::natives::get_attached_pick_up_hook_position(
            native_return.pin_mut(),
cargobob_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetAttachedPickUpHookPosition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_alarm(&self, vehicle_: u32,
state_: bool) -> ResultOfSetVehicleAlarm {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::set_vehicle_alarm(
            vehicle_,
state_,
        );
        
        
        ResultOfSetVehicleAlarm {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_vertical_flight_mode_transition(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetDisableVerticalFlightModeTransition {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_vertical_flight_mode_transition(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetDisableVerticalFlightModeTransition {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_in_garage_area(&self, garage_name_: Option<String>,
vehicle_: u32) -> ResultOfIsVehicleInGarageArea {
    unsafe {
        let mut native_return = Default::default();
let mut garage_name_ = sdk_helpers::create_c_string_ptr(garage_name_);
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_in_garage_area(
            &mut native_return,
garage_name_.as_ref().unwrap(),
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleInGarageArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_cargobob_pickup_rope_damping_multiplier(&self, p0_: i32,
p1_: i32) -> ResultOfSetCargobobPickupRopeDampingMultiplier {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cargobob_pickup_rope_damping_multiplier(
            p0_,
p1_,
        );
        
        
        ResultOfSetCargobobPickupRopeDampingMultiplier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_ready_for_cleanup(&self, p0_: i32) -> ResultOfSetVehicleReadyForCleanup {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_vehicle_ready_for_cleanup(
            p0_,
        );
        
        
        ResultOfSetVehicleReadyForCleanup {
            success,
            ret: (),
            
        }
    }
}

    fn native_control_landing_gear(&self, vehicle_: u32,
state_: i32) -> ResultOfControlLandingGear {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::control_landing_gear(
            vehicle_,
state_,
        );
        
        
        ResultOfControlLandingGear {
            success,
            ret: (),
            
        }
    }
}

    fn native_lock_doors_when_no_longer_needed(&self, vehicle_: u32) -> ResultOfLockDoorsWhenNoLongerNeeded {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::lock_doors_when_no_longer_needed(
            vehicle_,
        );
        
        
        ResultOfLockDoorsWhenNoLongerNeeded {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_are_bomb_bay_doors_open(&self, aircraft_: u32) -> ResultOfGetAreBombBayDoorsOpen {
    unsafe {
        let mut native_return = Default::default();
let mut aircraft_ = aircraft_;
        let success = sdk::natives::get_are_bomb_bay_doors_open(
            &mut native_return,
aircraft_,
        );
        let native_return = native_return;
        
        ResultOfGetAreBombBayDoorsOpen {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_detach_vehicle_from_any_tow_truck(&self, vehicle_: u32) -> ResultOfDetachVehicleFromAnyTowTruck {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::detach_vehicle_from_any_tow_truck(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfDetachVehicleFromAnyTowTruck {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_special_flight_mode_ratio(&self, vehicle_: u32,
ratio_: f32) -> ResultOfSetSpecialFlightModeRatio {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut ratio_ = ratio_;
        let success = sdk::natives::set_special_flight_mode_ratio(
            vehicle_,
ratio_,
        );
        
        
        ResultOfSetSpecialFlightModeRatio {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_position_of_vehicle_recording_at_time(&self, recording_: i32,
time_: f32,
script_: Option<String>) -> ResultOfGetPositionOfVehicleRecordingAtTime {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut recording_ = recording_;
let mut time_ = time_;
let mut script_ = sdk_helpers::create_c_string_ptr(script_);
        let success = sdk::natives::get_position_of_vehicle_recording_at_time(
            native_return.pin_mut(),
recording_,
time_,
script_.as_ref().unwrap(),
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetPositionOfVehicleRecordingAtTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_extra_turned_on(&self, vehicle_: u32,
extra_id_: i32) -> ResultOfIsVehicleExtraTurnedOn {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut extra_id_ = extra_id_;
        let success = sdk::natives::is_vehicle_extra_turned_on(
            &mut native_return,
vehicle_,
extra_id_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleExtraTurnedOn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_avoid_player_vehicle_riot_van_mission(&self, p0_: i32) -> ResultOfSetVehicleAvoidPlayerVehicleRiotVanMission {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_vehicle_avoid_player_vehicle_riot_van_mission(
            p0_,
        );
        
        
        ResultOfSetVehicleAvoidPlayerVehicleRiotVanMission {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_set_override_side_ratio(&self, p0_: i32,
p1_: i32) -> ResultOfVehicleSetOverrideSideRatio {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::vehicle_set_override_side_ratio(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfVehicleSetOverrideSideRatio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_vehicle_attached_to_cargobob(&self, cargobob_: u32,
vehicle_attached_: u32) -> ResultOfIsVehicleAttachedToCargobob {
    unsafe {
        let mut native_return = Default::default();
let mut cargobob_ = cargobob_;
let mut vehicle_attached_ = vehicle_attached_;
        let success = sdk::natives::is_vehicle_attached_to_cargobob(
            &mut native_return,
cargobob_,
vehicle_attached_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleAttachedToCargobob {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_disable_damage_with_picked_up_entity(&self, p0_: i32,
p1_: i32) -> ResultOfSetDisableDamageWithPickedUpEntity {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_disable_damage_with_picked_up_entity(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfSetDisableDamageWithPickedUpEntity {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_disable_random_trains_this_frame(&self, toggle_: bool) -> ResultOfSetDisableRandomTrainsThisFrame {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_disable_random_trains_this_frame(
            toggle_,
        );
        
        
        ResultOfSetDisableRandomTrainsThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_is_mercenary(&self, vehicle_: u32) -> ResultOfGetVehicleIsMercenary {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_is_mercenary(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleIsMercenary {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_door_broken(&self, vehicle_: u32,
door_id_: i32,
delete_door_: bool) -> ResultOfSetVehicleDoorBroken {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut door_id_ = door_id_;
let mut delete_door_ = delete_door_;
        let success = sdk::natives::set_vehicle_door_broken(
            vehicle_,
door_id_,
delete_door_,
        );
        
        
        ResultOfSetVehicleDoorBroken {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_explodes_on_explosion_damage_at_zero_body_health(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleExplodesOnExplosionDamageAtZeroBodyHealth {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_explodes_on_explosion_damage_at_zero_body_health(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleExplodesOnExplosionDamageAtZeroBodyHealth {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_vehicle_stuck_timer(&self, vehicle_: u32,
null_attributes_: i32) -> ResultOfResetVehicleStuckTimer {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut null_attributes_ = null_attributes_;
        let success = sdk::natives::reset_vehicle_stuck_timer(
            vehicle_,
null_attributes_,
        );
        
        
        ResultOfResetVehicleStuckTimer {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_has_muted_sirens(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleHasMutedSirens {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_has_muted_sirens(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleHasMutedSirens {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_script_vehicle_generator(&self, vehicle_generator_: i32,
enabled_: bool) -> ResultOfSetScriptVehicleGenerator {
    unsafe {
        let mut vehicle_generator_ = vehicle_generator_;
let mut enabled_ = enabled_;
        let success = sdk::natives::set_script_vehicle_generator(
            vehicle_generator_,
enabled_,
        );
        
        
        ResultOfSetScriptVehicleGenerator {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_random_boats_mp(&self, toggle_: bool) -> ResultOfSetRandomBoatsMp {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_random_boats_mp(
            toggle_,
        );
        
        
        ResultOfSetRandomBoatsMp {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_flight_nozzle_position(&self, plane_: u32) -> ResultOfGetVehicleFlightNozzlePosition {
    unsafe {
        let mut native_return = Default::default();
let mut plane_ = plane_;
        let success = sdk::natives::get_vehicle_flight_nozzle_position(
            &mut native_return,
plane_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleFlightNozzlePosition {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_request_vehicle_dial(&self, vehicle_: u32) -> ResultOfRequestVehicleDial {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::request_vehicle_dial(
            vehicle_,
        );
        
        
        ResultOfRequestVehicleDial {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_dont_allow_player_to_enter_vehicle_if_locked_for_player(&self, vehicle_: u32,
p1_: bool) -> ResultOfSetDontAllowPlayerToEnterVehicleIfLockedForPlayer {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_dont_allow_player_to_enter_vehicle_if_locked_for_player(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetDontAllowPlayerToEnterVehicleIfLockedForPlayer {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_class_max_traction(&self, vehicle_class_: i32) -> ResultOfGetVehicleClassMaxTraction {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_class_ = vehicle_class_;
        let success = sdk::natives::get_vehicle_class_max_traction(
            &mut native_return,
vehicle_class_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleClassMaxTraction {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_model_max_braking(&self, model_hash_: u32) -> ResultOfGetVehicleModelMaxBraking {
    unsafe {
        let mut native_return = Default::default();
let mut model_hash_ = model_hash_;
        let success = sdk::natives::get_vehicle_model_max_braking(
            &mut native_return,
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleModelMaxBraking {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_has_retractable_wheels(&self, vehicle_: u32) -> ResultOfGetHasRetractableWheels {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_has_retractable_wheels(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetHasRetractableWheels {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_this_model_a_heli(&self, model_: u32) -> ResultOfIsThisModelAheli {
    unsafe {
        let mut native_return = Default::default();
let mut model_ = model_;
        let success = sdk::natives::is_this_model_a_heli(
            &mut native_return,
model_,
        );
        let native_return = native_return;
        
        ResultOfIsThisModelAheli {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_steer_for_buildings(&self, vehicle_: u32,
p1_: i32) -> ResultOfSetVehicleSteerForBuildings {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_steer_for_buildings(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetVehicleSteerForBuildings {
            success,
            ret: (),
            
        }
    }
}

    fn native_lower_convertible_roof(&self, vehicle_: u32,
instantly_lower_: bool) -> ResultOfLowerConvertibleRoof {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut instantly_lower_ = instantly_lower_;
        let success = sdk::natives::lower_convertible_roof(
            vehicle_,
instantly_lower_,
        );
        
        
        ResultOfLowerConvertibleRoof {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_class_from_name(&self, model_hash_: u32) -> ResultOfGetVehicleClassFromName {
    unsafe {
        let mut native_return = Default::default();
let mut model_hash_ = model_hash_;
        let success = sdk::natives::get_vehicle_class_from_name(
            &mut native_return,
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleClassFromName {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_size(&self, vehicle_: u32,
out1_: Option<shared::Vector3>,
out2_: Option<shared::Vector3>) -> ResultOfGetVehicleSize {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut out1_ = sdk_helpers::create_vector3_ptr(out1_);
let mut out2_ = sdk_helpers::create_vector3_ptr(out2_);
        let success = sdk::natives::get_vehicle_size(
            out1_.pin_mut(),
out2_.pin_mut(),
vehicle_,
        );
        let out1_ = sdk_helpers::read_cpp_vector3(out1_);
let out2_ = sdk_helpers::read_cpp_vector3(out2_);
        
        ResultOfGetVehicleSize {
            success,
            ret: (),
            out1_,
out2_
        }
    }
}

    fn native_set_vehicle_active_during_playback(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleActiveDuringPlayback {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_active_during_playback(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleActiveDuringPlayback {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_script_rocket_boost_recharge_time(&self, vehicle_: u32,
seconds_: f32) -> ResultOfSetScriptRocketBoostRechargeTime {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut seconds_ = seconds_;
        let success = sdk::natives::set_script_rocket_boost_recharge_time(
            vehicle_,
seconds_,
        );
        
        
        ResultOfSetScriptRocketBoostRechargeTime {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_last_driven_vehicle(&self, ) -> ResultOfClearLastDrivenVehicle {
    unsafe {
        
        let success = sdk::natives::clear_last_driven_vehicle(
            
        );
        
        
        ResultOfClearLastDrivenVehicle {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_use_cutscene_wheel_compression(&self, p0_: u32,
p1_: bool,
p2_: bool,
p3_: bool) -> ResultOfSetVehicleUseCutsceneWheelCompression {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
        let success = sdk::natives::set_vehicle_use_cutscene_wheel_compression(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
        );
        let native_return = native_return;
        
        ResultOfSetVehicleUseCutsceneWheelCompression {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_used_for_pilot_school(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleUsedForPilotSchool {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_used_for_pilot_school(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleUsedForPilotSchool {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_plane_resist_to_explosion(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetPlaneResistToExplosion {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_plane_resist_to_explosion(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetPlaneResistToExplosion {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_formation_leader(&self, ) -> ResultOfResetFormationLeader {
    unsafe {
        
        let success = sdk::natives::reset_formation_leader(
            
        );
        
        
        ResultOfResetFormationLeader {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_pickup_magnet_set_targeted_mode(&self, vehicle_: u32,
cargobob_: u32) -> ResultOfSetCargobobPickupMagnetSetTargetedMode {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut cargobob_ = cargobob_;
        let success = sdk::natives::set_cargobob_pickup_magnet_set_targeted_mode(
            vehicle_,
cargobob_,
        );
        
        
        ResultOfSetCargobobPickupMagnetSetTargetedMode {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_vehicle_combat_avoidance_area(&self, p0_: i32) -> ResultOfRemoveVehicleCombatAvoidanceArea {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::remove_vehicle_combat_avoidance_area(
            p0_,
        );
        
        
        ResultOfRemoveVehicleCombatAvoidanceArea {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_turret_seat(&self, vehicle_: u32,
seat_index_: i32) -> ResultOfIsTurretSeat {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut seat_index_ = seat_index_;
        let success = sdk::natives::is_turret_seat(
            &mut native_return,
vehicle_,
seat_index_,
        );
        let native_return = native_return;
        
        ResultOfIsTurretSeat {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_pop_off_vehicle_roof_with_impulse(&self, vehicle_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfPopOffVehicleRoofWithImpulse {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::pop_off_vehicle_roof_with_impulse(
            vehicle_,
x_,
y_,
z_,
        );
        
        
        ResultOfPopOffVehicleRoofWithImpulse {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_num_vehicle_mods(&self, vehicle_: u32,
mod_type_: i32) -> ResultOfGetNumVehicleMods {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut mod_type_ = mod_type_;
        let success = sdk::natives::get_num_vehicle_mods(
            &mut native_return,
vehicle_,
mod_type_,
        );
        let native_return = native_return;
        
        ResultOfGetNumVehicleMods {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_boat_remains_anchored_while_player_is_driver(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetBoatRemainsAnchoredWhilePlayerIsDriver {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_boat_remains_anchored_while_player_is_driver(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetBoatRemainsAnchoredWhilePlayerIsDriver {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_xenon_light_color_index(&self, vehicle_: u32,
color_index_: i32) -> ResultOfSetVehicleXenonLightColorIndex {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut color_index_ = color_index_;
        let success = sdk::natives::set_vehicle_xenon_light_color_index(
            vehicle_,
color_index_,
        );
        
        
        ResultOfSetVehicleXenonLightColorIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_has_landing_gear(&self, vehicle_: u32) -> ResultOfGetVehicleHasLandingGear {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_has_landing_gear(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleHasLandingGear {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_copy_vehicle_damages(&self, source_vehicle_: u32,
target_vehicle_: u32) -> ResultOfCopyVehicleDamages {
    unsafe {
        let mut source_vehicle_ = source_vehicle_;
let mut target_vehicle_ = target_vehicle_;
        let success = sdk::natives::copy_vehicle_damages(
            source_vehicle_,
target_vehicle_,
        );
        
        
        ResultOfCopyVehicleDamages {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_cause_of_destruction(&self, vehicle_: u32) -> ResultOfGetVehicleCauseOfDestruction {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_cause_of_destruction(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleCauseOfDestruction {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_heli_main_rotor_health(&self, vehicle_: u32) -> ResultOfGetHeliMainRotorHealth {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_heli_main_rotor_health(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetHeliMainRotorHealth {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_brake(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleBrake {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_brake(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleBrake {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_aircraft_pilot_skill_noise_scalar(&self, vehicle_: u32,
p1_: f32) -> ResultOfSetAircraftPilotSkillNoiseScalar {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_aircraft_pilot_skill_noise_scalar(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetAircraftPilotSkillNoiseScalar {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_turret_movement(&self, vehicle_: u32,
turret_id_: i32) -> ResultOfSetDisableTurretMovement {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut turret_id_ = turret_id_;
        let success = sdk::natives::set_disable_turret_movement(
            vehicle_,
turret_id_,
        );
        
        
        ResultOfSetDisableTurretMovement {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_homing_lockon_state(&self, vehicle_: u32) -> ResultOfGetVehicleHomingLockonState {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_homing_lockon_state(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleHomingLockonState {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_enable_vehicle_slipstreaming(&self, toggle_: bool) -> ResultOfSetEnableVehicleSlipstreaming {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_enable_vehicle_slipstreaming(
            toggle_,
        );
        
        
        ResultOfSetEnableVehicleSlipstreaming {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_heli_turbulence_scalar(&self, vehicle_: u32,
p1_: f32) -> ResultOfSetHeliTurbulenceScalar {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_heli_turbulence_scalar(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetHeliTurbulenceScalar {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_vehicle_attached_to_trailer(&self, vehicle_: u32) -> ResultOfIsVehicleAttachedToTrailer {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::is_vehicle_attached_to_trailer(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfIsVehicleAttachedToTrailer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_boat_low_lod_anchor_distance(&self, vehicle_: u32,
value_: f32) -> ResultOfSetBoatLowLodAnchorDistance {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut value_ = value_;
        let success = sdk::natives::set_boat_low_lod_anchor_distance(
            vehicle_,
value_,
        );
        
        
        ResultOfSetBoatLowLodAnchorDistance {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_may_be_used_by_goto_point_any_means(&self, vehicle_: u32,
p1_: bool) -> ResultOfSetVehicleMayBeUsedByGotoPointAnyMeans {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_vehicle_may_be_used_by_goto_point_any_means(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetVehicleMayBeUsedByGotoPointAnyMeans {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_has_vehicle_been_hit_by_shunt(&self, vehicle_: u32) -> ResultOfGetHasVehicleBeenHitByShunt {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_has_vehicle_been_hit_by_shunt(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetHasVehicleBeenHitByShunt {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_mod_color1(&self, vehicle_: u32,
paint_type_: i32,
color_: i32,
pearlescent_color_: i32) -> ResultOfGetVehicleModColor1 {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut paint_type_ = paint_type_;
let mut color_ = color_;
let mut pearlescent_color_ = pearlescent_color_;
        let success = sdk::natives::get_vehicle_mod_color1(
            &mut paint_type_,
&mut color_,
&mut pearlescent_color_,
vehicle_,
        );
        let paint_type_ = paint_type_;
let color_ = color_;
let pearlescent_color_ = pearlescent_color_;
        
        ResultOfGetVehicleModColor1 {
            success,
            ret: (),
            paint_type_,
color_,
pearlescent_color_
        }
    }
}

    fn native_get_vehicle_bomb_ammo(&self, vehicle_: u32) -> ResultOfGetVehicleBombAmmo {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_bomb_ammo(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleBombAmmo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_delete_vehicle(&self, vehicle_: u32) -> ResultOfDeleteVehicle {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::delete_vehicle(
            &mut vehicle_,
        );
        let vehicle_ = vehicle_;
        
        ResultOfDeleteVehicle {
            success,
            ret: (),
            vehicle_
        }
    }
}

    fn native_set_parked_vehicle_density_multiplier_this_frame(&self, multiplier_: f32) -> ResultOfSetParkedVehicleDensityMultiplierThisFrame {
    unsafe {
        let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_parked_vehicle_density_multiplier_this_frame(
            multiplier_,
        );
        
        
        ResultOfSetParkedVehicleDensityMultiplierThisFrame {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_tyres_can_burst(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleTyresCanBurst {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_tyres_can_burst(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleTyresCanBurst {
            success,
            ret: (),
            
        }
    }
}

    fn native_network_use_high_precision_train_blending(&self, vehicle_: u32,
toggle_: bool) -> ResultOfNetworkUseHighPrecisionTrainBlending {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::network_use_high_precision_train_blending(
            vehicle_,
toggle_,
        );
        
        
        ResultOfNetworkUseHighPrecisionTrainBlending {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_both_vehicle_headlights_damaged(&self, vehicle_: u32) -> ResultOfGetBothVehicleHeadlightsDamaged {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_both_vehicle_headlights_damaged(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetBothVehicleHeadlightsDamaged {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_tyre_burst(&self, vehicle_: u32,
index_: i32,
on_rim_: bool,
p3_: f32) -> ResultOfSetVehicleTyreBurst {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut index_ = index_;
let mut on_rim_ = on_rim_;
let mut p3_ = p3_;
        let success = sdk::natives::set_vehicle_tyre_burst(
            vehicle_,
index_,
on_rim_,
p3_,
        );
        
        
        ResultOfSetVehicleTyreBurst {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_boat_ignore_land_probes(&self, p0_: i32,
p1_: i32) -> ResultOfSetBoatIgnoreLandProbes {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_boat_ignore_land_probes(
            p0_,
p1_,
        );
        
        
        ResultOfSetBoatIgnoreLandProbes {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_cargobob_pickup_magnet_pull_strength(&self, cargobob_: u32,
p1_: f32) -> ResultOfSetCargobobPickupMagnetPullStrength {
    unsafe {
        let mut cargobob_ = cargobob_;
let mut p1_ = p1_;
        let success = sdk::natives::set_cargobob_pickup_magnet_pull_strength(
            cargobob_,
p1_,
        );
        
        
        ResultOfSetCargobobPickupMagnetPullStrength {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_disable_heli_explode_from_body_damage(&self, p0_: i32,
p1_: i32) -> ResultOfSetDisableHeliExplodeFromBodyDamage {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_disable_heli_explode_from_body_damage(
            p0_,
p1_,
        );
        
        
        ResultOfSetDisableHeliExplodeFromBodyDamage {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_colours_which_can_be_set(&self, vehicle_: u32) -> ResultOfGetVehicleColoursWhichCanBeSet {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_colours_which_can_be_set(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleColoursWhichCanBeSet {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_detonate_vehicle_phone_explosive_device(&self, ) -> ResultOfDetonateVehiclePhoneExplosiveDevice {
    unsafe {
        
        let success = sdk::natives::detonate_vehicle_phone_explosive_device(
            
        );
        
        
        ResultOfDetonateVehiclePhoneExplosiveDevice {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_check_for_enough_room_for_ped(&self, vehicle_: u32,
p1_: bool) -> ResultOfSetCheckForEnoughRoomForPed {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_check_for_enough_room_for_ped(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetCheckForEnoughRoomForPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_script_ramp_impulse_scale(&self, vehicle_: u32,
impulse_scale_: f32) -> ResultOfSetScriptRampImpulseScale {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut impulse_scale_ = impulse_scale_;
        let success = sdk::natives::set_script_ramp_impulse_scale(
            vehicle_,
impulse_scale_,
        );
        
        
        ResultOfSetScriptRampImpulseScale {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_entity_attached_to_tow_truck(&self, tow_truck_: u32) -> ResultOfGetEntityAttachedToTowTruck {
    unsafe {
        let mut native_return = Default::default();
let mut tow_truck_ = tow_truck_;
        let success = sdk::natives::get_entity_attached_to_tow_truck(
            &mut native_return,
tow_truck_,
        );
        let native_return = native_return;
        
        ResultOfGetEntityAttachedToTowTruck {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_slipstreaming_should_time_out(&self, toggle_: bool) -> ResultOfSetVehicleSlipstreamingShouldTimeOut {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_slipstreaming_should_time_out(
            toggle_,
        );
        
        
        ResultOfSetVehicleSlipstreamingShouldTimeOut {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_use_higher_car_jump(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetUseHigherCarJump {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_use_higher_car_jump(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetUseHigherCarJump {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_is_vehicle_primary_colour_custom(&self, vehicle_: u32) -> ResultOfGetIsVehiclePrimaryColourCustom {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_is_vehicle_primary_colour_custom(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetIsVehiclePrimaryColourCustom {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_disable_vehcile_dynamic_ambient_scales(&self, vehicle_: u32,
p1_: i32,
p2_: i32) -> ResultOfDisableVehcileDynamicAmbientScales {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::disable_vehcile_dynamic_ambient_scales(
            vehicle_,
p1_,
p2_,
        );
        
        
        ResultOfDisableVehcileDynamicAmbientScales {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_rotation_of_vehicle_recording_id_at_time(&self, id_: i32,
time_: f32) -> ResultOfGetRotationOfVehicleRecordingIdAtTime {
    unsafe {
        let mut native_return = sdk::create_vector3().within_unique_ptr();
let mut id_ = id_;
let mut time_ = time_;
        let success = sdk::natives::get_rotation_of_vehicle_recording_id_at_time(
            native_return.pin_mut(),
id_,
time_,
        );
        let native_return = sdk_helpers::read_cpp_vector3(native_return);
        
        ResultOfGetRotationOfVehicleRecordingIdAtTime {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_vehicle_recording(&self, recording_: i32,
script_: Option<String>) -> ResultOfRemoveVehicleRecording {
    unsafe {
        let mut recording_ = recording_;
let mut script_ = sdk_helpers::create_c_string_ptr(script_);
        let success = sdk::natives::remove_vehicle_recording(
            recording_,
script_.as_ref().unwrap(),
        );
        
        
        ResultOfRemoveVehicleRecording {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_number_plate_text_index(&self, vehicle_: u32) -> ResultOfGetVehicleNumberPlateTextIndex {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_number_plate_text_index(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleNumberPlateTextIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_special_flight_mode_allowed(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetSpecialFlightModeAllowed {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_special_flight_mode_allowed(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetSpecialFlightModeAllowed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_out_of_control(&self, vehicle_: u32,
kill_driver_: bool,
explode_on_impact_: bool) -> ResultOfSetVehicleOutOfControl {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut kill_driver_ = kill_driver_;
let mut explode_on_impact_ = explode_on_impact_;
        let success = sdk::natives::set_vehicle_out_of_control(
            vehicle_,
kill_driver_,
explode_on_impact_,
        );
        
        
        ResultOfSetVehicleOutOfControl {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_vehicle_explosion_break_off_parts(&self, ) -> ResultOfDisableVehicleExplosionBreakOffParts {
    unsafe {
        
        let success = sdk::natives::disable_vehicle_explosion_break_off_parts(
            
        );
        
        
        ResultOfDisableVehicleExplosionBreakOffParts {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_body_health(&self, vehicle_: u32) -> ResultOfGetVehicleBodyHealth {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_body_health(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleBodyHealth {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_door_control(&self, vehicle_: u32,
door_id_: i32,
speed_: i32,
angle_: f32) -> ResultOfSetVehicleDoorControl {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut door_id_ = door_id_;
let mut speed_ = speed_;
let mut angle_ = angle_;
        let success = sdk::natives::set_vehicle_door_control(
            vehicle_,
door_id_,
speed_,
angle_,
        );
        
        
        ResultOfSetVehicleDoorControl {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_convertible_roof(&self, vehicle_: u32,
p1_: bool) -> ResultOfSetConvertibleRoof {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_convertible_roof(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetConvertibleRoof {
            success,
            ret: (),
            
        }
    }
}

    fn native_vehicle_set_extenable_side_target_ratio(&self, p0_: i32,
p1_: i32) -> ResultOfVehicleSetExtenableSideTargetRatio {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::vehicle_set_extenable_side_target_ratio(
            &mut native_return,
p0_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfVehicleSetExtenableSideTargetRatio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_color(&self, vehicle_: u32,
r_: i32,
g_: i32,
b_: i32) -> ResultOfGetVehicleColor {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut r_ = r_;
let mut g_ = g_;
let mut b_ = b_;
        let success = sdk::natives::get_vehicle_color(
            &mut r_,
&mut g_,
&mut b_,
vehicle_,
        );
        let r_ = r_;
let g_ = g_;
let b_ = b_;
        
        ResultOfGetVehicleColor {
            success,
            ret: (),
            r_,
g_,
b_
        }
    }
}

    fn native_set_vehicle_extra_colour5(&self, vehicle_: u32,
color_: i32) -> ResultOfSetVehicleExtraColour5 {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut color_ = color_;
        let success = sdk::natives::set_vehicle_extra_colour5(
            vehicle_,
color_,
        );
        
        
        ResultOfSetVehicleExtraColour5 {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_model_estimated_max_speed(&self, model_hash_: u32) -> ResultOfGetVehicleModelEstimatedMaxSpeed {
    unsafe {
        let mut native_return = Default::default();
let mut model_hash_ = model_hash_;
        let success = sdk::natives::get_vehicle_model_estimated_max_speed(
            &mut native_return,
model_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleModelEstimatedMaxSpeed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_swing_boat_boom_to_ratio(&self, vehicle_: u32,
ratio_: f32) -> ResultOfSwingBoatBoomToRatio {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut ratio_ = ratio_;
        let success = sdk::natives::swing_boat_boom_to_ratio(
            vehicle_,
ratio_,
        );
        
        
        ResultOfSwingBoatBoomToRatio {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_siren(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleSiren {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_siren(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleSiren {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_bomb_ammo(&self, vehicle_: u32,
bomb_count_: i32) -> ResultOfSetVehicleBombAmmo {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut bomb_count_ = bomb_count_;
        let success = sdk::natives::set_vehicle_bomb_ammo(
            vehicle_,
bomb_count_,
        );
        
        
        ResultOfSetVehicleBombAmmo {
            success,
            ret: (),
            
        }
    }
}

    fn native_disable_vehicle_weapon(&self, disabled_: bool,
weapon_hash_: u32,
vehicle_: u32,
owner_: u32) -> ResultOfDisableVehicleWeapon {
    unsafe {
        let mut disabled_ = disabled_;
let mut weapon_hash_ = weapon_hash_;
let mut vehicle_ = vehicle_;
let mut owner_ = owner_;
        let success = sdk::natives::disable_vehicle_weapon(
            disabled_,
weapon_hash_,
vehicle_,
owner_,
        );
        
        
        ResultOfDisableVehicleWeapon {
            success,
            ret: (),
            
        }
    }
}

    fn native_does_script_vehicle_generator_exist(&self, vehicle_generator_: i32) -> ResultOfDoesScriptVehicleGeneratorExist {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_generator_ = vehicle_generator_;
        let success = sdk::natives::does_script_vehicle_generator_exist(
            &mut native_return,
vehicle_generator_,
        );
        let native_return = native_return;
        
        ResultOfDoesScriptVehicleGeneratorExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_wheels_extended_instantly(&self, vehicle_: u32) -> ResultOfSetWheelsExtendedInstantly {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_wheels_extended_instantly(
            vehicle_,
        );
        
        
        ResultOfSetWheelsExtendedInstantly {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_doors_locked_for_player(&self, vehicle_: u32,
player_: u32) -> ResultOfGetVehicleDoorsLockedForPlayer {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut player_ = player_;
        let success = sdk::natives::get_vehicle_doors_locked_for_player(
            &mut native_return,
vehicle_,
player_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleDoorsLockedForPlayer {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_closest_vehicle(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
model_hash_: u32,
flags_: i32) -> ResultOfGetClosestVehicle {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut model_hash_ = model_hash_;
let mut flags_ = flags_;
        let success = sdk::natives::get_closest_vehicle(
            &mut native_return,
x_,
y_,
z_,
radius_,
model_hash_,
flags_,
        );
        let native_return = native_return;
        
        ResultOfGetClosestVehicle {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_are_plane_control_panels_intact(&self, vehicle_: u32,
p1_: bool) -> ResultOfArePlaneControlPanelsIntact {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::are_plane_control_panels_intact(
            &mut native_return,
vehicle_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfArePlaneControlPanelsIntact {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_distant_cars_enabled(&self, toggle_: bool) -> ResultOfSetDistantCarsEnabled {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::set_distant_cars_enabled(
            toggle_,
        );
        
        
        ResultOfSetDistantCarsEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_make_name_from_vehicle_model(&self, model_hash_: u32) -> ResultOfGetMakeNameFromVehicleModel {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut model_hash_ = model_hash_;
        let success = sdk::natives::get_make_name_from_vehicle_model(
            native_return.pin_mut(),
model_hash_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetMakeNameFromVehicleModel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_is_wanted(&self, vehicle_: u32,
state_: bool) -> ResultOfSetVehicleIsWanted {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut state_ = state_;
        let success = sdk::natives::set_vehicle_is_wanted(
            vehicle_,
state_,
        );
        
        
        ResultOfSetVehicleIsWanted {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_seat_warp_only(&self, vehicle_: u32,
seat_index_: i32) -> ResultOfIsSeatWarpOnly {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut seat_index_ = seat_index_;
        let success = sdk::natives::is_seat_warp_only(
            &mut native_return,
vehicle_,
seat_index_,
        );
        let native_return = native_return;
        
        ResultOfIsSeatWarpOnly {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_vehicle_countermeasure_ammo(&self, vehicle_: u32) -> ResultOfGetVehicleCountermeasureAmmo {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_countermeasure_ammo(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleCountermeasureAmmo {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_enable_vehicle_dynamic_ambient_scales(&self, vehicle_: u32) -> ResultOfEnableVehicleDynamicAmbientScales {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::enable_vehicle_dynamic_ambient_scales(
            vehicle_,
        );
        
        
        ResultOfEnableVehicleDynamicAmbientScales {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_aircraft_ignore_hightmap_optimisation(&self, vehicle_: u32,
p1_: i32) -> ResultOfSetAircraftIgnoreHightmapOptimisation {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut p1_ = p1_;
        let success = sdk::natives::set_aircraft_ignore_hightmap_optimisation(
            vehicle_,
p1_,
        );
        
        
        ResultOfSetAircraftIgnoreHightmapOptimisation {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_convertible_roof_state(&self, vehicle_: u32) -> ResultOfGetConvertibleRoofState {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_convertible_roof_state(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetConvertibleRoofState {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_bulldozer_arm_position(&self, vehicle_: u32,
position_: f32,
p2_: bool) -> ResultOfSetVehicleBulldozerArmPosition {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut position_ = position_;
let mut p2_ = p2_;
        let success = sdk::natives::set_vehicle_bulldozer_arm_position(
            vehicle_,
position_,
p2_,
        );
        
        
        ResultOfSetVehicleBulldozerArmPosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_global_position_offset_for_recorded_vehicle_playback(&self, vehicle_: u32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfSetGlobalPositionOffsetForRecordedVehiclePlayback {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::set_global_position_offset_for_recorded_vehicle_playback(
            vehicle_,
x_,
y_,
z_,
        );
        
        
        ResultOfSetGlobalPositionOffsetForRecordedVehiclePlayback {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_burnout(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleBurnout {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_burnout(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleBurnout {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_vehicle_needs_to_be_hotwired(&self, vehicle_: u32,
toggle_: bool) -> ResultOfSetVehicleNeedsToBeHotwired {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_vehicle_needs_to_be_hotwired(
            vehicle_,
toggle_,
        );
        
        
        ResultOfSetVehicleNeedsToBeHotwired {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_mod_kit_type(&self, vehicle_: u32) -> ResultOfGetVehicleModKitType {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
        let success = sdk::natives::get_vehicle_mod_kit_type(
            &mut native_return,
vehicle_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleModKitType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_car_boot_open(&self, vehicle_: u32) -> ResultOfSetCarBootOpen {
    unsafe {
        let mut vehicle_ = vehicle_;
        let success = sdk::natives::set_car_boot_open(
            vehicle_,
        );
        
        
        ResultOfSetCarBootOpen {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_heli_blades_speed(&self, vehicle_: u32,
speed_: f32) -> ResultOfSetHeliBladesSpeed {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut speed_ = speed_;
        let success = sdk::natives::set_heli_blades_speed(
            vehicle_,
speed_,
        );
        
        
        ResultOfSetHeliBladesSpeed {
            success,
            ret: (),
            
        }
    }
}

    fn native_switch_train_track(&self, track_id_: i32,
state_: bool) -> ResultOfSwitchTrainTrack {
    unsafe {
        let mut track_id_ = track_id_;
let mut state_ = state_;
        let success = sdk::natives::switch_train_track(
            track_id_,
state_,
        );
        
        
        ResultOfSwitchTrainTrack {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_heli_tail_rotor_health(&self, vehicle_: u32,
health_: f32) -> ResultOfSetHeliTailRotorHealth {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut health_ = health_;
        let success = sdk::natives::set_heli_tail_rotor_health(
            vehicle_,
health_,
        );
        
        
        ResultOfSetHeliTailRotorHealth {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_vehicle_door_angle_ratio(&self, vehicle_: u32,
door_id_: i32) -> ResultOfGetVehicleDoorAngleRatio {
    unsafe {
        let mut native_return = Default::default();
let mut vehicle_ = vehicle_;
let mut door_id_ = door_id_;
        let success = sdk::natives::get_vehicle_door_angle_ratio(
            &mut native_return,
vehicle_,
door_id_,
        );
        let native_return = native_return;
        
        ResultOfGetVehicleDoorAngleRatio {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_vehicle_tow_truck_arm_position(&self, vehicle_: u32,
position_: f32) -> ResultOfSetVehicleTowTruckArmPosition {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut position_ = position_;
        let success = sdk::natives::set_vehicle_tow_truck_arm_position(
            vehicle_,
position_,
        );
        
        
        ResultOfSetVehicleTowTruckArmPosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_rocket_boost_fill(&self, vehicle_: u32,
percentage_: f32) -> ResultOfSetRocketBoostFill {
    unsafe {
        let mut vehicle_ = vehicle_;
let mut percentage_ = percentage_;
        let success = sdk::natives::set_rocket_boost_fill(
            vehicle_,
percentage_,
        );
        
        
        ResultOfSetRocketBoostFill {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_deep_ocean_scaler(&self, ) -> ResultOfGetDeepOceanScaler {
    unsafe {
        let mut native_return = Default::default();
        let success = sdk::natives::get_deep_ocean_scaler(
            &mut native_return,
        );
        let native_return = native_return;
        
        ResultOfGetDeepOceanScaler {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_test_vertical_probe_against_all_water(&self, x_: f32,
y_: f32,
z_: f32,
flags_: i32,
water_height_: f32) -> ResultOfTestVerticalProbeAgainstAllWater {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut flags_ = flags_;
let mut water_height_ = water_height_;
        let success = sdk::natives::test_vertical_probe_against_all_water(
            &mut native_return,
&mut water_height_,
x_,
y_,
z_,
flags_,
        );
        let native_return = native_return;
let water_height_ = water_height_;
        
        ResultOfTestVerticalProbeAgainstAllWater {
            success,
            ret: native_return,
            water_height_
        }
    }
}

    fn native_set_calmed_wave_height_scaler(&self, height_: f32) -> ResultOfSetCalmedWaveHeightScaler {
    unsafe {
        let mut height_ = height_;
        let success = sdk::natives::set_calmed_wave_height_scaler(
            height_,
        );
        
        
        ResultOfSetCalmedWaveHeightScaler {
            success,
            ret: (),
            
        }
    }
}

    fn native_reset_deep_ocean_scaler(&self, ) -> ResultOfResetDeepOceanScaler {
    unsafe {
        
        let success = sdk::natives::reset_deep_ocean_scaler(
            
        );
        
        
        ResultOfResetDeepOceanScaler {
            success,
            ret: (),
            
        }
    }
}

    fn native_test_probe_against_all_water(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
flags_: i32,
water_height_: f32) -> ResultOfTestProbeAgainstAllWater {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut flags_ = flags_;
let mut water_height_ = water_height_;
        let success = sdk::natives::test_probe_against_all_water(
            &mut native_return,
&mut water_height_,
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
flags_,
        );
        let native_return = native_return;
let water_height_ = water_height_;
        
        ResultOfTestProbeAgainstAllWater {
            success,
            ret: native_return,
            water_height_
        }
    }
}

    fn native_get_water_height_no_waves(&self, x_: f32,
y_: f32,
z_: f32,
height_: f32) -> ResultOfGetWaterHeightNoWaves {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut height_ = height_;
        let success = sdk::natives::get_water_height_no_waves(
            &mut native_return,
&mut height_,
x_,
y_,
z_,
        );
        let native_return = native_return;
let height_ = height_;
        
        ResultOfGetWaterHeightNoWaves {
            success,
            ret: native_return,
            height_
        }
    }
}

    fn native_remove_extra_calming_quad(&self, calming_quad_: i32) -> ResultOfRemoveExtraCalmingQuad {
    unsafe {
        let mut calming_quad_ = calming_quad_;
        let success = sdk::natives::remove_extra_calming_quad(
            calming_quad_,
        );
        
        
        ResultOfRemoveExtraCalmingQuad {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_deep_ocean_scaler(&self, intensity_: f32) -> ResultOfSetDeepOceanScaler {
    unsafe {
        let mut intensity_ = intensity_;
        let success = sdk::natives::set_deep_ocean_scaler(
            intensity_,
        );
        
        
        ResultOfSetDeepOceanScaler {
            success,
            ret: (),
            
        }
    }
}

    fn native_modify_water(&self, x_: f32,
y_: f32,
radius_: f32,
height_: f32) -> ResultOfModifyWater {
    unsafe {
        let mut x_ = x_;
let mut y_ = y_;
let mut radius_ = radius_;
let mut height_ = height_;
        let success = sdk::natives::modify_water(
            x_,
y_,
radius_,
height_,
        );
        
        
        ResultOfModifyWater {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_water_height(&self, x_: f32,
y_: f32,
z_: f32,
height_: f32) -> ResultOfGetWaterHeight {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut height_ = height_;
        let success = sdk::natives::get_water_height(
            &mut native_return,
&mut height_,
x_,
y_,
z_,
        );
        let native_return = native_return;
let height_ = height_;
        
        ResultOfGetWaterHeight {
            success,
            ret: native_return,
            height_
        }
    }
}

    fn native_add_extra_calming_quad(&self, x_low_: f32,
y_low_: f32,
x_high_: f32,
y_high_: f32,
height_: f32) -> ResultOfAddExtraCalmingQuad {
    unsafe {
        let mut native_return = Default::default();
let mut x_low_ = x_low_;
let mut y_low_ = y_low_;
let mut x_high_ = x_high_;
let mut y_high_ = y_high_;
let mut height_ = height_;
        let success = sdk::natives::add_extra_calming_quad(
            &mut native_return,
x_low_,
y_low_,
x_high_,
y_high_,
height_,
        );
        let native_return = native_return;
        
        ResultOfAddExtraCalmingQuad {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_test_probe_against_water(&self, x1_: f32,
y1_: f32,
z1_: f32,
x2_: f32,
y2_: f32,
z2_: f32,
result_: Option<shared::Vector3>) -> ResultOfTestProbeAgainstWater {
    unsafe {
        let mut native_return = Default::default();
let mut x1_ = x1_;
let mut y1_ = y1_;
let mut z1_ = z1_;
let mut x2_ = x2_;
let mut y2_ = y2_;
let mut z2_ = z2_;
let mut result_ = sdk_helpers::create_vector3_ptr(result_);
        let success = sdk::natives::test_probe_against_water(
            &mut native_return,
result_.pin_mut(),
x1_,
y1_,
z1_,
x2_,
y2_,
z2_,
        );
        let native_return = native_return;
let result_ = sdk_helpers::read_cpp_vector3(result_);
        
        ResultOfTestProbeAgainstWater {
            success,
            ret: native_return,
            result_
        }
    }
}

    fn native_get_ammo_in_ped_weapon(&self, ped_: u32,
weaponhash_: u32) -> ResultOfGetAmmoInPedWeapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weaponhash_ = weaponhash_;
        let success = sdk::natives::get_ammo_in_ped_weapon(
            &mut native_return,
ped_,
weaponhash_,
        );
        let native_return = native_return;
        
        ResultOfGetAmmoInPedWeapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_weapon_time_between_shots(&self, weapon_hash_: u32) -> ResultOfGetWeaponTimeBetweenShots {
    unsafe {
        let mut native_return = Default::default();
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::get_weapon_time_between_shots(
            &mut native_return,
weapon_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetWeaponTimeBetweenShots {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_current_weapon_visible(&self, ped_: u32,
visible_: bool,
deselect_weapon_: bool,
p3_: bool,
p4_: bool) -> ResultOfSetPedCurrentWeaponVisible {
    unsafe {
        let mut ped_ = ped_;
let mut visible_ = visible_;
let mut deselect_weapon_ = deselect_weapon_;
let mut p3_ = p3_;
let mut p4_ = p4_;
        let success = sdk::natives::set_ped_current_weapon_visible(
            ped_,
visible_,
deselect_weapon_,
p3_,
p4_,
        );
        
        
        ResultOfSetPedCurrentWeaponVisible {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_selected_ped_weapon(&self, ped_: u32) -> ResultOfGetSelectedPedWeapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_selected_ped_weapon(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetSelectedPedWeapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_air_defence_sphere(&self, zone_id_: i32) -> ResultOfRemoveAirDefenceSphere {
    unsafe {
        let mut native_return = Default::default();
let mut zone_id_ = zone_id_;
        let success = sdk::natives::remove_air_defence_sphere(
            &mut native_return,
zone_id_,
        );
        let native_return = native_return;
        
        ResultOfRemoveAirDefenceSphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_weapon_component_active(&self, ped_: u32,
weapon_hash_: u32,
component_hash_: u32) -> ResultOfIsPedWeaponComponentActive {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut component_hash_ = component_hash_;
        let success = sdk::natives::is_ped_weapon_component_active(
            &mut native_return,
ped_,
weapon_hash_,
component_hash_,
        );
        let native_return = native_return;
        
        ResultOfIsPedWeaponComponentActive {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_weapon_component_type_model(&self, component_hash_: u32) -> ResultOfGetWeaponComponentTypeModel {
    unsafe {
        let mut native_return = Default::default();
let mut component_hash_ = component_hash_;
        let success = sdk::natives::get_weapon_component_type_model(
            &mut native_return,
component_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetWeaponComponentTypeModel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_ped_last_weapon_damage(&self, ped_: u32) -> ResultOfClearPedLastWeaponDamage {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::clear_ped_last_weapon_damage(
            ped_,
        );
        
        
        ResultOfClearPedLastWeaponDamage {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_current_ped_vehicle_weapon(&self, ped_: u32,
weapon_hash_: u32) -> ResultOfGetCurrentPedVehicleWeapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::get_current_ped_vehicle_weapon(
            &mut native_return,
&mut weapon_hash_,
ped_,
        );
        let native_return = native_return;
let weapon_hash_ = weapon_hash_;
        
        ResultOfGetCurrentPedVehicleWeapon {
            success,
            ret: native_return,
            weapon_hash_
        }
    }
}

    fn native_set_weapon_animation_override(&self, ped_: u32,
anim_style_: u32) -> ResultOfSetWeaponAnimationOverride {
    unsafe {
        let mut ped_ = ped_;
let mut anim_style_ = anim_style_;
        let success = sdk::natives::set_weapon_animation_override(
            ped_,
anim_style_,
        );
        
        
        ResultOfSetWeaponAnimationOverride {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_entity_been_damaged_by_weapon(&self, entity_: u32,
weapon_hash_: u32,
weapon_type_: i32) -> ResultOfHasEntityBeenDamagedByWeapon {
    unsafe {
        let mut native_return = Default::default();
let mut entity_ = entity_;
let mut weapon_hash_ = weapon_hash_;
let mut weapon_type_ = weapon_type_;
        let success = sdk::natives::has_entity_been_damaged_by_weapon(
            &mut native_return,
entity_,
weapon_hash_,
weapon_type_,
        );
        let native_return = native_return;
        
        ResultOfHasEntityBeenDamagedByWeapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_ammo(&self, ped_: u32,
weapon_hash_: u32,
ammo_: i32,
p3_: bool) -> ResultOfSetPedAmmo {
    unsafe {
        let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut ammo_ = ammo_;
let mut p3_ = p3_;
        let success = sdk::natives::set_ped_ammo(
            ped_,
weapon_hash_,
ammo_,
p3_,
        );
        
        
        ResultOfSetPedAmmo {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_infinite_ammo_clip(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedInfiniteAmmoClip {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_infinite_ammo_clip(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedInfiniteAmmoClip {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_all_air_defence_spheres(&self, ) -> ResultOfRemoveAllAirDefenceSpheres {
    unsafe {
        
        let success = sdk::natives::remove_all_air_defence_spheres(
            
        );
        
        
        ResultOfRemoveAllAirDefenceSpheres {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_weapon_component_from_ped(&self, ped_: u32,
weapon_hash_: u32,
component_hash_: u32) -> ResultOfRemoveWeaponComponentFromPed {
    unsafe {
        let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut component_hash_ = component_hash_;
        let success = sdk::natives::remove_weapon_component_from_ped(
            ped_,
weapon_hash_,
component_hash_,
        );
        
        
        ResultOfRemoveWeaponComponentFromPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_drops_inventory_weapon(&self, ped_: u32,
weapon_hash_: u32,
x_offset_: f32,
y_offset_: f32,
z_offset_: f32,
ammo_count_: i32) -> ResultOfSetPedDropsInventoryWeapon {
    unsafe {
        let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut x_offset_ = x_offset_;
let mut y_offset_ = y_offset_;
let mut z_offset_ = z_offset_;
let mut ammo_count_ = ammo_count_;
        let success = sdk::natives::set_ped_drops_inventory_weapon(
            ped_,
weapon_hash_,
x_offset_,
y_offset_,
z_offset_,
ammo_count_,
        );
        
        
        ResultOfSetPedDropsInventoryWeapon {
            success,
            ret: (),
            
        }
    }
}

    fn native_make_ped_reload(&self, ped_: u32) -> ResultOfMakePedReload {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::make_ped_reload(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfMakePedReload {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_ped_ammo_by_type(&self, ped_: u32,
ammo_type_hash_: u32,
ammo_: i32) -> ResultOfAddPedAmmoByType {
    unsafe {
        let mut ped_ = ped_;
let mut ammo_type_hash_ = ammo_type_hash_;
let mut ammo_ = ammo_;
        let success = sdk::natives::add_ped_ammo_by_type(
            ped_,
ammo_type_hash_,
ammo_,
        );
        
        
        ResultOfAddPedAmmoByType {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_stun_gun_finite_ammo(&self, p0_: i32,
p1_: i32) -> ResultOfSetPedStunGunFiniteAmmo {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_stun_gun_finite_ammo(
            p0_,
p1_,
        );
        
        
        ResultOfSetPedStunGunFiniteAmmo {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_weapon_tint_index(&self, ped_: u32,
weapon_hash_: u32) -> ResultOfGetPedWeaponTintIndex {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::get_ped_weapon_tint_index(
            &mut native_return,
ped_,
weapon_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetPedWeaponTintIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_ped_been_damaged_by_weapon(&self, ped_: u32,
weapon_hash_: u32,
weapon_type_: i32) -> ResultOfHasPedBeenDamagedByWeapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut weapon_type_ = weapon_type_;
        let success = sdk::natives::has_ped_been_damaged_by_weapon(
            &mut native_return,
ped_,
weapon_hash_,
weapon_type_,
        );
        let native_return = native_return;
        
        ResultOfHasPedBeenDamagedByWeapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ammo_in_clip(&self, ped_: u32,
weapon_hash_: u32,
ammo_: i32) -> ResultOfGetAmmoInClip {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut ammo_ = ammo_;
        let success = sdk::natives::get_ammo_in_clip(
            &mut native_return,
&mut ammo_,
ped_,
weapon_hash_,
        );
        let native_return = native_return;
let ammo_ = ammo_;
        
        ResultOfGetAmmoInClip {
            success,
            ret: native_return,
            ammo_
        }
    }
}

    fn native_get_weapon_damage(&self, weapon_hash_: u32,
component_hash_: u32) -> ResultOfGetWeaponDamage {
    unsafe {
        let mut native_return = Default::default();
let mut weapon_hash_ = weapon_hash_;
let mut component_hash_ = component_hash_;
        let success = sdk::natives::get_weapon_damage(
            &mut native_return,
weapon_hash_,
component_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetWeaponDamage {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_give_weapon_component_to_weapon_object(&self, weapon_object_: u32,
component_hash_: u32) -> ResultOfGiveWeaponComponentToWeaponObject {
    unsafe {
        let mut weapon_object_ = weapon_object_;
let mut component_hash_ = component_hash_;
        let success = sdk::natives::give_weapon_component_to_weapon_object(
            weapon_object_,
component_hash_,
        );
        
        
        ResultOfGiveWeaponComponentToWeaponObject {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_weapon_asset_loaded(&self, weapon_hash_: u32) -> ResultOfHasWeaponAssetLoaded {
    unsafe {
        let mut native_return = Default::default();
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::has_weapon_asset_loaded(
            &mut native_return,
weapon_hash_,
        );
        let native_return = native_return;
        
        ResultOfHasWeaponAssetLoaded {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_ammo_by_type(&self, ped_: u32,
ammo_type_hash_: u32) -> ResultOfGetPedAmmoByType {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut ammo_type_hash_ = ammo_type_hash_;
        let success = sdk::natives::get_ped_ammo_by_type(
            &mut native_return,
ped_,
ammo_type_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetPedAmmoByType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_current_ped_weapon(&self, ped_: u32,
weapon_hash_: u32,
p2_: bool) -> ResultOfGetCurrentPedWeapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut p2_ = p2_;
        let success = sdk::natives::get_current_ped_weapon(
            &mut native_return,
&mut weapon_hash_,
ped_,
p2_,
        );
        let native_return = native_return;
let weapon_hash_ = weapon_hash_;
        
        ResultOfGetCurrentPedWeapon {
            success,
            ret: native_return,
            weapon_hash_
        }
    }
}

    fn native_get_current_ped_weapon_entity_index(&self, ped_: u32,
p1_: i32) -> ResultOfGetCurrentPedWeaponEntityIndex {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::get_current_ped_weapon_entity_index(
            &mut native_return,
ped_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfGetCurrentPedWeaponEntityIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_weapon_damage_type(&self, weapon_hash_: u32) -> ResultOfGetWeaponDamageType {
    unsafe {
        let mut native_return = Default::default();
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::get_weapon_damage_type(
            &mut native_return,
weapon_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetWeaponDamageType {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_infinite_ammo(&self, ped_: u32,
toggle_: bool,
weapon_hash_: u32) -> ResultOfSetPedInfiniteAmmo {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::set_ped_infinite_ammo(
            ped_,
toggle_,
weapon_hash_,
        );
        
        
        ResultOfSetPedInfiniteAmmo {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_weapontype_slot(&self, weapon_hash_: u32) -> ResultOfGetWeapontypeSlot {
    unsafe {
        let mut native_return = Default::default();
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::get_weapontype_slot(
            &mut native_return,
weapon_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetWeapontypeSlot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_fire_air_defence_sphere_weapon_at_position(&self, zone_id_: i32,
x_: f32,
y_: f32,
z_: f32) -> ResultOfFireAirDefenceSphereWeaponAtPosition {
    unsafe {
        let mut zone_id_ = zone_id_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::fire_air_defence_sphere_weapon_at_position(
            zone_id_,
x_,
y_,
z_,
        );
        
        
        ResultOfFireAirDefenceSphereWeaponAtPosition {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_ped_armed(&self, ped_: u32,
type_flags_: i32) -> ResultOfIsPedArmed {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut type_flags_ = type_flags_;
        let success = sdk::natives::is_ped_armed(
            &mut native_return,
ped_,
type_flags_,
        );
        let native_return = native_return;
        
        ResultOfIsPedArmed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_weapon_damage_modifier(&self, weapon_hash_: u32,
damage_multiplier_: f32) -> ResultOfSetWeaponDamageModifier {
    unsafe {
        let mut weapon_hash_ = weapon_hash_;
let mut damage_multiplier_ = damage_multiplier_;
        let success = sdk::natives::set_weapon_damage_modifier(
            weapon_hash_,
damage_multiplier_,
        );
        
        
        ResultOfSetWeaponDamageModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_drops_weapons_when_dead(&self, ped_: u32,
toggle_: bool) -> ResultOfSetPedDropsWeaponsWhenDead {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_ped_drops_weapons_when_dead(
            ped_,
toggle_,
        );
        
        
        ResultOfSetPedDropsWeaponsWhenDead {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_weapon_high_detail_model(&self, weapon_object_: u32) -> ResultOfRequestWeaponHighDetailModel {
    unsafe {
        let mut weapon_object_ = weapon_object_;
        let success = sdk::natives::request_weapon_high_detail_model(
            weapon_object_,
        );
        
        
        ResultOfRequestWeaponHighDetailModel {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_weapon_from_ped(&self, ped_: u32,
weapon_hash_: u32) -> ResultOfRemoveWeaponFromPed {
    unsafe {
        let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::remove_weapon_from_ped(
            ped_,
weapon_hash_,
        );
        
        
        ResultOfRemoveWeaponFromPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_weapon_aoe_modifier(&self, weapon_hash_: u32,
multiplier_: f32) -> ResultOfSetWeaponAoeModifier {
    unsafe {
        let mut weapon_hash_ = weapon_hash_;
let mut multiplier_ = multiplier_;
        let success = sdk::natives::set_weapon_aoe_modifier(
            weapon_hash_,
multiplier_,
        );
        
        
        ResultOfSetWeaponAoeModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_flash_light_on(&self, ped_: u32) -> ResultOfIsFlashLightOn {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_flash_light_on(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsFlashLightOn {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_weapon_component_variant_extra_model(&self, component_hash_: u32,
extra_component_index_: i32) -> ResultOfGetWeaponComponentVariantExtraModel {
    unsafe {
        let mut native_return = Default::default();
let mut component_hash_ = component_hash_;
let mut extra_component_index_ = extra_component_index_;
        let success = sdk::natives::get_weapon_component_variant_extra_model(
            &mut native_return,
component_hash_,
extra_component_index_,
        );
        let native_return = native_return;
        
        ResultOfGetWeaponComponentVariantExtraModel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_cycle_vehicle_weapons_only(&self, ped_: u32) -> ResultOfSetPedCycleVehicleWeaponsOnly {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_cycle_vehicle_weapons_only(
            ped_,
        );
        
        
        ResultOfSetPedCycleVehicleWeaponsOnly {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_weapon_tint_index(&self, ped_: u32,
weapon_hash_: u32,
tint_index_: i32) -> ResultOfSetPedWeaponTintIndex {
    unsafe {
        let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut tint_index_ = tint_index_;
        let success = sdk::natives::set_ped_weapon_tint_index(
            ped_,
weapon_hash_,
tint_index_,
        );
        
        
        ResultOfSetPedWeaponTintIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_request_weapon_asset(&self, weapon_hash_: u32,
p1_: i32,
p2_: i32) -> ResultOfRequestWeaponAsset {
    unsafe {
        let mut weapon_hash_ = weapon_hash_;
let mut p1_ = p1_;
let mut p2_ = p2_;
        let success = sdk::natives::request_weapon_asset(
            weapon_hash_,
p1_,
p2_,
        );
        
        
        ResultOfRequestWeaponAsset {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_weapon_clip_size(&self, weapon_hash_: u32) -> ResultOfGetWeaponClipSize {
    unsafe {
        let mut native_return = Default::default();
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::get_weapon_clip_size(
            &mut native_return,
weapon_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetWeaponClipSize {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_max_ammo_by_type(&self, ped_: u32,
ammo_type_hash_: u32,
ammo_: i32) -> ResultOfGetMaxAmmoByType {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut ammo_type_hash_ = ammo_type_hash_;
let mut ammo_ = ammo_;
        let success = sdk::natives::get_max_ammo_by_type(
            &mut native_return,
&mut ammo_,
ped_,
ammo_type_hash_,
        );
        let native_return = native_return;
let ammo_ = ammo_;
        
        ResultOfGetMaxAmmoByType {
            success,
            ret: native_return,
            ammo_
        }
    }
}

    fn native_does_weapon_take_weapon_component(&self, weapon_hash_: u32,
component_hash_: u32) -> ResultOfDoesWeaponTakeWeaponComponent {
    unsafe {
        let mut native_return = Default::default();
let mut weapon_hash_ = weapon_hash_;
let mut component_hash_ = component_hash_;
        let success = sdk::natives::does_weapon_take_weapon_component(
            &mut native_return,
weapon_hash_,
component_hash_,
        );
        let native_return = native_return;
        
        ResultOfDoesWeaponTakeWeaponComponent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_weapon_object_component_tint_index(&self, weapon_object_: u32,
camo_component_hash_: u32,
color_index_: i32) -> ResultOfSetWeaponObjectComponentTintIndex {
    unsafe {
        let mut weapon_object_ = weapon_object_;
let mut camo_component_hash_ = camo_component_hash_;
let mut color_index_ = color_index_;
        let success = sdk::natives::set_weapon_object_component_tint_index(
            weapon_object_,
camo_component_hash_,
color_index_,
        );
        
        
        ResultOfSetWeaponObjectComponentTintIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_weapon_tint_count(&self, weapon_hash_: u32) -> ResultOfGetWeaponTintCount {
    unsafe {
        let mut native_return = Default::default();
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::get_weapon_tint_count(
            &mut native_return,
weapon_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetWeaponTintCount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_ammo_by_type(&self, ped_: u32,
ammo_type_hash_: u32,
ammo_: i32) -> ResultOfSetPedAmmoByType {
    unsafe {
        let mut ped_ = ped_;
let mut ammo_type_hash_ = ammo_type_hash_;
let mut ammo_ = ammo_;
        let success = sdk::natives::set_ped_ammo_by_type(
            ped_,
ammo_type_hash_,
ammo_,
        );
        
        
        ResultOfSetPedAmmoByType {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_weapon_component_variant_extra_count(&self, component_hash_: u32) -> ResultOfGetWeaponComponentVariantExtraCount {
    unsafe {
        let mut native_return = Default::default();
let mut component_hash_ = component_hash_;
        let success = sdk::natives::get_weapon_component_variant_extra_count(
            &mut native_return,
component_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetWeaponComponentVariantExtraCount {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_current_weapon_silenced(&self, ped_: u32) -> ResultOfIsPedCurrentWeaponSilenced {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_current_weapon_silenced(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedCurrentWeaponSilenced {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_give_loadout_to_ped(&self, ped_: u32,
loadout_hash_: u32) -> ResultOfGiveLoadoutToPed {
    unsafe {
        let mut ped_ = ped_;
let mut loadout_hash_ = loadout_hash_;
        let success = sdk::natives::give_loadout_to_ped(
            ped_,
loadout_hash_,
        );
        
        
        ResultOfGiveLoadoutToPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_drops_weapon(&self, ped_: u32) -> ResultOfSetPedDropsWeapon {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_ped_drops_weapon(
            ped_,
        );
        
        
        ResultOfSetPedDropsWeapon {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_last_weapon_impact_coord(&self, ped_: u32,
coords_: Option<shared::Vector3>) -> ResultOfGetPedLastWeaponImpactCoord {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut coords_ = sdk_helpers::create_vector3_ptr(coords_);
        let success = sdk::natives::get_ped_last_weapon_impact_coord(
            &mut native_return,
coords_.pin_mut(),
ped_,
        );
        let native_return = native_return;
let coords_ = sdk_helpers::read_cpp_vector3(coords_);
        
        ResultOfGetPedLastWeaponImpactCoord {
            success,
            ret: native_return,
            coords_
        }
    }
}

    fn native_hide_ped_weapon_for_scripted_cutscene(&self, ped_: u32,
toggle_: bool) -> ResultOfHidePedWeaponForScriptedCutscene {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::hide_ped_weapon_for_scripted_cutscene(
            ped_,
toggle_,
        );
        
        
        ResultOfHidePedWeaponForScriptedCutscene {
            success,
            ret: (),
            
        }
    }
}

    fn native_has_vehicle_got_projectile_attached(&self, driver_: u32,
vehicle_: u32,
weapon_hash_: u32,
p3_: i32) -> ResultOfHasVehicleGotProjectileAttached {
    unsafe {
        let mut native_return = Default::default();
let mut driver_ = driver_;
let mut vehicle_ = vehicle_;
let mut weapon_hash_ = weapon_hash_;
let mut p3_ = p3_;
        let success = sdk::natives::has_vehicle_got_projectile_attached(
            &mut native_return,
driver_,
vehicle_,
weapon_hash_,
p3_,
        );
        let native_return = native_return;
        
        ResultOfHasVehicleGotProjectileAttached {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_current_ped_vehicle_weapon(&self, ped_: u32,
weapon_hash_: u32) -> ResultOfSetCurrentPedVehicleWeapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::set_current_ped_vehicle_weapon(
            &mut native_return,
ped_,
weapon_hash_,
        );
        let native_return = native_return;
        
        ResultOfSetCurrentPedVehicleWeapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_weapon_got_weapon_component(&self, weapon_: u32,
component_hash_: u32) -> ResultOfHasWeaponGotWeaponComponent {
    unsafe {
        let mut native_return = Default::default();
let mut weapon_ = weapon_;
let mut component_hash_ = component_hash_;
        let success = sdk::natives::has_weapon_got_weapon_component(
            &mut native_return,
weapon_,
component_hash_,
        );
        let native_return = native_return;
        
        ResultOfHasWeaponGotWeaponComponent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_add_ammo_to_ped(&self, ped_: u32,
weapon_hash_: u32,
ammo_: i32) -> ResultOfAddAmmoToPed {
    unsafe {
        let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut ammo_ = ammo_;
        let success = sdk::natives::add_ammo_to_ped(
            ped_,
weapon_hash_,
ammo_,
        );
        
        
        ResultOfAddAmmoToPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_ammo_type_from_weapon(&self, ped_: u32,
weapon_hash_: u32) -> ResultOfGetPedAmmoTypeFromWeapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::get_ped_ammo_type_from_weapon(
            &mut native_return,
ped_,
weapon_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetPedAmmoTypeFromWeapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_max_range_of_current_ped_weapon(&self, ped_: u32) -> ResultOfGetMaxRangeOfCurrentPedWeapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_max_range_of_current_ped_weapon(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetMaxRangeOfCurrentPedWeapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_chance_of_firing_blanks(&self, ped_: u32,
x_bias_: f32,
y_bias_: f32) -> ResultOfSetPedChanceOfFiringBlanks {
    unsafe {
        let mut ped_ = ped_;
let mut x_bias_ = x_bias_;
let mut y_bias_ = y_bias_;
        let success = sdk::natives::set_ped_chance_of_firing_blanks(
            ped_,
x_bias_,
y_bias_,
        );
        
        
        ResultOfSetPedChanceOfFiringBlanks {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_lockon_distance_of_current_ped_weapon(&self, ped_: u32) -> ResultOfGetLockonDistanceOfCurrentPedWeapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::get_lockon_distance_of_current_ped_weapon(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfGetLockonDistanceOfCurrentPedWeapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_best_ped_weapon(&self, ped_: u32,
p1_: bool) -> ResultOfGetBestPedWeapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::get_best_ped_weapon(
            &mut native_return,
ped_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfGetBestPedWeapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_refill_ammo_instantly(&self, ped_: u32) -> ResultOfRefillAmmoInstantly {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::refill_ammo_instantly(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfRefillAmmoInstantly {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_ped_got_weapon(&self, ped_: u32,
weapon_hash_: u32,
p2_: bool) -> ResultOfHasPedGotWeapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut p2_ = p2_;
        let success = sdk::natives::has_ped_got_weapon(
            &mut native_return,
ped_,
weapon_hash_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfHasPedGotWeapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_air_defence_sphere(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
weapon_hash_: u32) -> ResultOfCreateAirDefenceSphere {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::create_air_defence_sphere(
            &mut native_return,
x_,
y_,
z_,
radius_,
p4_,
p5_,
p6_,
weapon_hash_,
        );
        let native_return = native_return;
        
        ResultOfCreateAirDefenceSphere {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_weapon_valid(&self, weapon_hash_: u32) -> ResultOfIsWeaponValid {
    unsafe {
        let mut native_return = Default::default();
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::is_weapon_valid(
            &mut native_return,
weapon_hash_,
        );
        let native_return = native_return;
        
        ResultOfIsWeaponValid {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_create_weapon_object(&self, weapon_hash_: u32,
ammo_count_: i32,
x_: f32,
y_: f32,
z_: f32,
show_world_model_: bool,
scale_: f32,
p7_: i32,
p8_: i32,
p9_: i32) -> ResultOfCreateWeaponObject {
    unsafe {
        let mut native_return = Default::default();
let mut weapon_hash_ = weapon_hash_;
let mut ammo_count_ = ammo_count_;
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut show_world_model_ = show_world_model_;
let mut scale_ = scale_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut p9_ = p9_;
        let success = sdk::natives::create_weapon_object(
            &mut native_return,
weapon_hash_,
ammo_count_,
x_,
y_,
z_,
show_world_model_,
scale_,
p7_,
p8_,
p9_,
        );
        let native_return = native_return;
        
        ResultOfCreateWeaponObject {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_weapon_object_camo_index(&self, weapon_object_: u32,
p1_: i32) -> ResultOfSetWeaponObjectCamoIndex {
    unsafe {
        let mut weapon_object_ = weapon_object_;
let mut p1_ = p1_;
        let success = sdk::natives::set_weapon_object_camo_index(
            weapon_object_,
p1_,
        );
        
        
        ResultOfSetWeaponObjectCamoIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_flash_light_active_history(&self, ped_: u32,
toggle_: bool) -> ResultOfSetFlashLightActiveHistory {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_flash_light_active_history(
            ped_,
toggle_,
        );
        
        
        ResultOfSetFlashLightActiveHistory {
            success,
            ret: (),
            
        }
    }
}

    fn native_create_air_defence_angled_area(&self, p0_: f32,
p1_: f32,
p2_: f32,
p3_: f32,
p4_: f32,
p5_: f32,
p6_: f32,
p7_: f32,
p8_: f32,
radius_: f32,
weapon_hash_: u32) -> ResultOfCreateAirDefenceAngledArea {
    unsafe {
        let mut native_return = Default::default();
let mut p0_ = p0_;
let mut p1_ = p1_;
let mut p2_ = p2_;
let mut p3_ = p3_;
let mut p4_ = p4_;
let mut p5_ = p5_;
let mut p6_ = p6_;
let mut p7_ = p7_;
let mut p8_ = p8_;
let mut radius_ = radius_;
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::create_air_defence_angled_area(
            &mut native_return,
p0_,
p1_,
p2_,
p3_,
p4_,
p5_,
p6_,
p7_,
p8_,
radius_,
weapon_hash_,
        );
        let native_return = native_return;
        
        ResultOfCreateAirDefenceAngledArea {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_weapon_component_tint_index(&self, ped_: u32,
weapon_hash_: u32,
camo_component_hash_: u32,
color_index_: i32) -> ResultOfSetPedWeaponComponentTintIndex {
    unsafe {
        let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut camo_component_hash_ = camo_component_hash_;
let mut color_index_ = color_index_;
        let success = sdk::natives::set_ped_weapon_component_tint_index(
            ped_,
weapon_hash_,
camo_component_hash_,
color_index_,
        );
        
        
        ResultOfSetPedWeaponComponentTintIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_weapon_camo_index(&self, ped_: u32,
weapon_hash_: u32) -> ResultOfGetPedWeaponCamoIndex {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::get_ped_weapon_camo_index(
            &mut native_return,
ped_,
weapon_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetPedWeaponCamoIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_max_ammo_in_clip(&self, ped_: u32,
weapon_hash_: u32,
p2_: bool) -> ResultOfGetMaxAmmoInClip {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut p2_ = p2_;
        let success = sdk::natives::get_max_ammo_in_clip(
            &mut native_return,
ped_,
weapon_hash_,
p2_,
        );
        let native_return = native_return;
        
        ResultOfGetMaxAmmoInClip {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_ammo_to_drop(&self, ped_: u32,
p1_: i32) -> ResultOfSetPedAmmoToDrop {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_ammo_to_drop(
            ped_,
p1_,
        );
        
        
        ResultOfSetPedAmmoToDrop {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_weapon_asset(&self, weapon_hash_: u32) -> ResultOfRemoveWeaponAsset {
    unsafe {
        let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::remove_weapon_asset(
            weapon_hash_,
        );
        
        
        ResultOfRemoveWeaponAsset {
            success,
            ret: (),
            
        }
    }
}

    fn native_clear_entity_last_weapon_damage(&self, entity_: u32) -> ResultOfClearEntityLastWeaponDamage {
    unsafe {
        let mut entity_ = entity_;
        let success = sdk::natives::clear_entity_last_weapon_damage(
            entity_,
        );
        
        
        ResultOfClearEntityLastWeaponDamage {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_current_ped_weapon(&self, ped_: u32,
weapon_hash_: u32,
b_force_in_hand_: bool) -> ResultOfSetCurrentPedWeapon {
    unsafe {
        let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut b_force_in_hand_ = b_force_in_hand_;
        let success = sdk::natives::set_current_ped_weapon(
            ped_,
weapon_hash_,
b_force_in_hand_,
        );
        
        
        ResultOfSetCurrentPedWeapon {
            success,
            ret: (),
            
        }
    }
}

    fn native_give_weapon_object_to_ped(&self, weapon_object_: u32,
ped_: u32) -> ResultOfGiveWeaponObjectToPed {
    unsafe {
        let mut weapon_object_ = weapon_object_;
let mut ped_ = ped_;
        let success = sdk::natives::give_weapon_object_to_ped(
            weapon_object_,
ped_,
        );
        
        
        ResultOfGiveWeaponObjectToPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_give_delayed_weapon_to_ped(&self, ped_: u32,
weapon_hash_: u32,
ammo_count_: i32,
b_force_in_hand_: bool) -> ResultOfGiveDelayedWeaponToPed {
    unsafe {
        let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut ammo_count_ = ammo_count_;
let mut b_force_in_hand_ = b_force_in_hand_;
        let success = sdk::natives::give_delayed_weapon_to_ped(
            ped_,
weapon_hash_,
ammo_count_,
b_force_in_hand_,
        );
        
        
        ResultOfGiveDelayedWeaponToPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_weapon_component_hud_stats(&self, component_hash_: u32,
out_data_: shared::MemoryBufferId) -> ResultOfGetWeaponComponentHudStats {
    unsafe {
        let mut native_return = Default::default();
let mut component_hash_ = component_hash_;
let mut out_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(out_data_) as *mut c_void;
        let success = sdk::natives::get_weapon_component_hud_stats(
            &mut native_return,
out_data_,
component_hash_,
        );
        let native_return = native_return;
let out_data_ = 0;
        
        ResultOfGetWeaponComponentHudStats {
            success,
            ret: native_return,
            out_data_
        }
    }
}

    fn native_get_weapon_object_component_tint_index(&self, weapon_object_: u32,
camo_component_hash_: u32) -> ResultOfGetWeaponObjectComponentTintIndex {
    unsafe {
        let mut native_return = Default::default();
let mut weapon_object_ = weapon_object_;
let mut camo_component_hash_ = camo_component_hash_;
        let success = sdk::natives::get_weapon_object_component_tint_index(
            &mut native_return,
weapon_object_,
camo_component_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetWeaponObjectComponentTintIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_can_ped_select_inventory_weapon(&self, ped_: u32,
weapon_hash_: u32,
toggle_: bool) -> ResultOfSetCanPedSelectInventoryWeapon {
    unsafe {
        let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_can_ped_select_inventory_weapon(
            ped_,
weapon_hash_,
toggle_,
        );
        
        
        ResultOfSetCanPedSelectInventoryWeapon {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_ped_shoot_ordnance_weapon(&self, ped_: u32,
p1_: f32) -> ResultOfSetPedShootOrdnanceWeapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::set_ped_shoot_ordnance_weapon(
            &mut native_return,
ped_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfSetPedShootOrdnanceWeapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_is_ped_weapon_ready_to_shoot(&self, ped_: u32) -> ResultOfIsPedWeaponReadyToShoot {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
        let success = sdk::natives::is_ped_weapon_ready_to_shoot(
            &mut native_return,
ped_,
        );
        let native_return = native_return;
        
        ResultOfIsPedWeaponReadyToShoot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_can_use_weapon_on_parachute(&self, weapon_hash_: u32) -> ResultOfCanUseWeaponOnParachute {
    unsafe {
        let mut native_return = Default::default();
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::can_use_weapon_on_parachute(
            &mut native_return,
weapon_hash_,
        );
        let native_return = native_return;
        
        ResultOfCanUseWeaponOnParachute {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_give_weapon_to_ped(&self, ped_: u32,
weapon_hash_: u32,
ammo_count_: i32,
is_hidden_: bool,
b_force_in_hand_: bool) -> ResultOfGiveWeaponToPed {
    unsafe {
        let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut ammo_count_ = ammo_count_;
let mut is_hidden_ = is_hidden_;
let mut b_force_in_hand_ = b_force_in_hand_;
        let success = sdk::natives::give_weapon_to_ped(
            ped_,
weapon_hash_,
ammo_count_,
is_hidden_,
b_force_in_hand_,
        );
        
        
        ResultOfGiveWeaponToPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_weapontype_group(&self, weapon_hash_: u32) -> ResultOfGetWeapontypeGroup {
    unsafe {
        let mut native_return = Default::default();
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::get_weapontype_group(
            &mut native_return,
weapon_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetWeapontypeGroup {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_has_ped_got_weapon_component(&self, ped_: u32,
weapon_hash_: u32,
component_hash_: u32) -> ResultOfHasPedGotWeaponComponent {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut component_hash_ = component_hash_;
        let success = sdk::natives::has_ped_got_weapon_component(
            &mut native_return,
ped_,
weapon_hash_,
component_hash_,
        );
        let native_return = native_return;
        
        ResultOfHasPedGotWeaponComponent {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_enable_laser_sight_rendering(&self, toggle_: bool) -> ResultOfEnableLaserSightRendering {
    unsafe {
        let mut toggle_ = toggle_;
        let success = sdk::natives::enable_laser_sight_rendering(
            toggle_,
        );
        
        
        ResultOfEnableLaserSightRendering {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_weapon_object_from_ped(&self, ped_: u32,
p1_: bool) -> ResultOfGetWeaponObjectFromPed {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::get_weapon_object_from_ped(
            &mut native_return,
ped_,
p1_,
        );
        let native_return = native_return;
        
        ResultOfGetWeaponObjectFromPed {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_weapon_object_tint_index(&self, weapon_: u32) -> ResultOfGetWeaponObjectTintIndex {
    unsafe {
        let mut native_return = Default::default();
let mut weapon_ = weapon_;
        let success = sdk::natives::get_weapon_object_tint_index(
            &mut native_return,
weapon_,
        );
        let native_return = native_return;
        
        ResultOfGetWeaponObjectTintIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_does_air_defence_sphere_exist(&self, zone_id_: i32) -> ResultOfDoesAirDefenceSphereExist {
    unsafe {
        let mut native_return = Default::default();
let mut zone_id_ = zone_id_;
        let success = sdk::natives::does_air_defence_sphere_exist(
            &mut native_return,
zone_id_,
        );
        let native_return = native_return;
        
        ResultOfDoesAirDefenceSphereExist {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_flash_light_fade_distance(&self, distance_: f32) -> ResultOfSetFlashLightFadeDistance {
    unsafe {
        let mut native_return = Default::default();
let mut distance_ = distance_;
        let success = sdk::natives::set_flash_light_fade_distance(
            &mut native_return,
distance_,
        );
        let native_return = native_return;
        
        ResultOfSetFlashLightFadeDistance {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_ped_gadget(&self, ped_: u32,
gadget_hash_: u32,
p2_: bool) -> ResultOfSetPedGadget {
    unsafe {
        let mut ped_ = ped_;
let mut gadget_hash_ = gadget_hash_;
let mut p2_ = p2_;
        let success = sdk::natives::set_ped_gadget(
            ped_,
gadget_hash_,
p2_,
        );
        
        
        ResultOfSetPedGadget {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_weapon_hud_stats(&self, weapon_hash_: u32,
out_data_: shared::MemoryBufferId) -> ResultOfGetWeaponHudStats {
    unsafe {
        let mut native_return = Default::default();
let mut weapon_hash_ = weapon_hash_;
let mut out_data_ = self.memory_buffers.borrow_mut().get_mut_ptr(out_data_) as *mut c_void;
        let success = sdk::natives::get_weapon_hud_stats(
            &mut native_return,
out_data_,
weapon_hash_,
        );
        let native_return = native_return;
let out_data_ = 0;
        
        ResultOfGetWeaponHudStats {
            success,
            ret: native_return,
            out_data_
        }
    }
}

    fn native_give_weapon_component_to_ped(&self, ped_: u32,
weapon_hash_: u32,
component_hash_: u32) -> ResultOfGiveWeaponComponentToPed {
    unsafe {
        let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut component_hash_ = component_hash_;
        let success = sdk::natives::give_weapon_component_to_ped(
            ped_,
weapon_hash_,
component_hash_,
        );
        
        
        ResultOfGiveWeaponComponentToPed {
            success,
            ret: (),
            
        }
    }
}

    fn native_is_air_defence_sphere_in_area(&self, x_: f32,
y_: f32,
z_: f32,
radius_: f32,
out_zone_id_: i32) -> ResultOfIsAirDefenceSphereInArea {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
let mut radius_ = radius_;
let mut out_zone_id_ = out_zone_id_;
        let success = sdk::natives::is_air_defence_sphere_in_area(
            &mut native_return,
&mut out_zone_id_,
x_,
y_,
z_,
radius_,
        );
        let native_return = native_return;
let out_zone_id_ = out_zone_id_;
        
        ResultOfIsAirDefenceSphereInArea {
            success,
            ret: native_return,
            out_zone_id_
        }
    }
}

    fn native_get_max_ammo(&self, ped_: u32,
weapon_hash_: u32,
ammo_: i32) -> ResultOfGetMaxAmmo {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut ammo_ = ammo_;
        let success = sdk::natives::get_max_ammo(
            &mut native_return,
&mut ammo_,
ped_,
weapon_hash_,
        );
        let native_return = native_return;
let ammo_ = ammo_;
        
        ResultOfGetMaxAmmo {
            success,
            ret: native_return,
            ammo_
        }
    }
}

    fn native_set_ammo_in_clip(&self, ped_: u32,
weapon_hash_: u32,
ammo_: i32) -> ResultOfSetAmmoInClip {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut ammo_ = ammo_;
        let success = sdk::natives::set_ammo_in_clip(
            &mut native_return,
ped_,
weapon_hash_,
ammo_,
        );
        let native_return = native_return;
        
        ResultOfSetAmmoInClip {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_eqipped_weapon_start_spinning_at_full_speed(&self, ped_: u32) -> ResultOfSetEqippedWeaponStartSpinningAtFullSpeed {
    unsafe {
        let mut ped_ = ped_;
        let success = sdk::natives::set_eqipped_weapon_start_spinning_at_full_speed(
            ped_,
        );
        
        
        ResultOfSetEqippedWeaponStartSpinningAtFullSpeed {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_pickup_ammo_amount_scaler(&self, p0_: f32) -> ResultOfSetPickupAmmoAmountScaler {
    unsafe {
        let mut p0_ = p0_;
        let success = sdk::natives::set_pickup_ammo_amount_scaler(
            p0_,
        );
        
        
        ResultOfSetPickupAmmoAmountScaler {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_weapon_effect_duration_modifier(&self, p0_: u32,
p1_: f32) -> ResultOfSetWeaponEffectDurationModifier {
    unsafe {
        let mut p0_ = p0_;
let mut p1_ = p1_;
        let success = sdk::natives::set_weapon_effect_duration_modifier(
            p0_,
p1_,
        );
        
        
        ResultOfSetWeaponEffectDurationModifier {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_player_targettable_for_air_defence_sphere(&self, player_: u32,
zone_id_: i32,
enable_: bool) -> ResultOfSetPlayerTargettableForAirDefenceSphere {
    unsafe {
        let mut player_ = player_;
let mut zone_id_ = zone_id_;
let mut enable_ = enable_;
        let success = sdk::natives::set_player_targettable_for_air_defence_sphere(
            player_,
zone_id_,
enable_,
        );
        
        
        ResultOfSetPlayerTargettableForAirDefenceSphere {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_can_ped_select_all_weapons(&self, ped_: u32,
toggle_: bool) -> ResultOfSetCanPedSelectAllWeapons {
    unsafe {
        let mut ped_ = ped_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_can_ped_select_all_weapons(
            ped_,
toggle_,
        );
        
        
        ResultOfSetCanPedSelectAllWeapons {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_ped_weapontype_in_slot(&self, ped_: u32,
weapon_slot_: u32) -> ResultOfGetPedWeapontypeInSlot {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weapon_slot_ = weapon_slot_;
        let success = sdk::natives::get_ped_weapontype_in_slot(
            &mut native_return,
ped_,
weapon_slot_,
        );
        let native_return = native_return;
        
        ResultOfGetPedWeapontypeInSlot {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_weapon_component_tint_index(&self, ped_: u32,
weapon_hash_: u32,
camo_component_hash_: u32) -> ResultOfGetPedWeaponComponentTintIndex {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut camo_component_hash_ = camo_component_hash_;
        let success = sdk::natives::get_ped_weapon_component_tint_index(
            &mut native_return,
ped_,
weapon_hash_,
camo_component_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetPedWeaponComponentTintIndex {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_all_ped_weapons(&self, ped_: u32,
p1_: bool) -> ResultOfRemoveAllPedWeapons {
    unsafe {
        let mut ped_ = ped_;
let mut p1_ = p1_;
        let success = sdk::natives::remove_all_ped_weapons(
            ped_,
p1_,
        );
        
        
        ResultOfRemoveAllPedWeapons {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_weapontype_model(&self, weapon_hash_: u32) -> ResultOfGetWeapontypeModel {
    unsafe {
        let mut native_return = Default::default();
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::get_weapontype_model(
            &mut native_return,
weapon_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetWeapontypeModel {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_ped_original_ammo_type_from_weapon(&self, ped_: u32,
weapon_hash_: u32) -> ResultOfGetPedOriginalAmmoTypeFromWeapon {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
        let success = sdk::natives::get_ped_original_ammo_type_from_weapon(
            &mut native_return,
ped_,
weapon_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetPedOriginalAmmoTypeFromWeapon {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_is_ped_gadget_equipped(&self, ped_: u32,
gadget_hash_: u32) -> ResultOfGetIsPedGadgetEquipped {
    unsafe {
        let mut native_return = Default::default();
let mut ped_ = ped_;
let mut gadget_hash_ = gadget_hash_;
        let success = sdk::natives::get_is_ped_gadget_equipped(
            &mut native_return,
ped_,
gadget_hash_,
        );
        let native_return = native_return;
        
        ResultOfGetIsPedGadgetEquipped {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_remove_weapon_component_from_weapon_object(&self, object_: u32,
component_hash_: u32) -> ResultOfRemoveWeaponComponentFromWeaponObject {
    unsafe {
        let mut object_ = object_;
let mut component_hash_ = component_hash_;
        let success = sdk::natives::remove_weapon_component_from_weapon_object(
            object_,
component_hash_,
        );
        
        
        ResultOfRemoveWeaponComponentFromWeaponObject {
            success,
            ret: (),
            
        }
    }
}

    fn native_set_weapon_object_tint_index(&self, weapon_: u32,
tint_index_: i32) -> ResultOfSetWeaponObjectTintIndex {
    unsafe {
        let mut weapon_ = weapon_;
let mut tint_index_ = tint_index_;
        let success = sdk::natives::set_weapon_object_tint_index(
            weapon_,
tint_index_,
        );
        
        
        ResultOfSetWeaponObjectTintIndex {
            success,
            ret: (),
            
        }
    }
}

    fn native_explode_projectiles(&self, ped_: u32,
weapon_hash_: u32,
p2_: bool) -> ResultOfExplodeProjectiles {
    unsafe {
        let mut ped_ = ped_;
let mut weapon_hash_ = weapon_hash_;
let mut p2_ = p2_;
        let success = sdk::natives::explode_projectiles(
            ped_,
weapon_hash_,
p2_,
        );
        
        
        ResultOfExplodeProjectiles {
            success,
            ret: (),
            
        }
    }
}

    fn native_remove_all_projectiles_of_type(&self, weapon_hash_: u32,
explode_: bool) -> ResultOfRemoveAllProjectilesOfType {
    unsafe {
        let mut weapon_hash_ = weapon_hash_;
let mut explode_ = explode_;
        let success = sdk::natives::remove_all_projectiles_of_type(
            weapon_hash_,
explode_,
        );
        
        
        ResultOfRemoveAllProjectilesOfType {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_zone_at_coords(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfGetZoneAtCoords {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::get_zone_at_coords(
            &mut native_return,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOfGetZoneAtCoords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_zone_popschedule(&self, zone_id_: i32) -> ResultOfGetZonePopschedule {
    unsafe {
        let mut native_return = Default::default();
let mut zone_id_ = zone_id_;
        let success = sdk::natives::get_zone_popschedule(
            &mut native_return,
zone_id_,
        );
        let native_return = native_return;
        
        ResultOfGetZonePopschedule {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_clear_popschedule_override_vehicle_model(&self, schedule_id_: i32) -> ResultOfClearPopscheduleOverrideVehicleModel {
    unsafe {
        let mut schedule_id_ = schedule_id_;
        let success = sdk::natives::clear_popschedule_override_vehicle_model(
            schedule_id_,
        );
        
        
        ResultOfClearPopscheduleOverrideVehicleModel {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_zone_scumminess(&self, zone_id_: i32) -> ResultOfGetZoneScumminess {
    unsafe {
        let mut native_return = Default::default();
let mut zone_id_ = zone_id_;
        let success = sdk::natives::get_zone_scumminess(
            &mut native_return,
zone_id_,
        );
        let native_return = native_return;
        
        ResultOfGetZoneScumminess {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_override_popschedule_vehicle_model(&self, schedule_id_: i32,
vehicle_hash_: u32) -> ResultOfOverridePopscheduleVehicleModel {
    unsafe {
        let mut schedule_id_ = schedule_id_;
let mut vehicle_hash_ = vehicle_hash_;
        let success = sdk::natives::override_popschedule_vehicle_model(
            schedule_id_,
vehicle_hash_,
        );
        
        
        ResultOfOverridePopscheduleVehicleModel {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_hash_of_map_area_at_coords(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfGetHashOfMapAreaAtCoords {
    unsafe {
        let mut native_return = Default::default();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::get_hash_of_map_area_at_coords(
            &mut native_return,
x_,
y_,
z_,
        );
        let native_return = native_return;
        
        ResultOfGetHashOfMapAreaAtCoords {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_get_zone_from_name_id(&self, zone_name_: Option<String>) -> ResultOfGetZoneFromNameId {
    unsafe {
        let mut native_return = Default::default();
let mut zone_name_ = sdk_helpers::create_c_string_ptr(zone_name_);
        let success = sdk::natives::get_zone_from_name_id(
            &mut native_return,
zone_name_.as_ref().unwrap(),
        );
        let native_return = native_return;
        
        ResultOfGetZoneFromNameId {
            success,
            ret: native_return,
            
        }
    }
}

    fn native_set_zone_enabled(&self, zone_id_: i32,
toggle_: bool) -> ResultOfSetZoneEnabled {
    unsafe {
        let mut zone_id_ = zone_id_;
let mut toggle_ = toggle_;
        let success = sdk::natives::set_zone_enabled(
            zone_id_,
toggle_,
        );
        
        
        ResultOfSetZoneEnabled {
            success,
            ret: (),
            
        }
    }
}

    fn native_get_name_of_zone(&self, x_: f32,
y_: f32,
z_: f32) -> ResultOfGetNameOfZone {
    unsafe {
        let mut native_return = sdk::natives::create_null_c_string_ptr().within_unique_ptr();
let mut x_ = x_;
let mut y_ = y_;
let mut z_ = z_;
        let success = sdk::natives::get_name_of_zone(
            native_return.pin_mut(),
x_,
y_,
z_,
        );
        let native_return = sdk_helpers::read_c_string_ptr(native_return);
        
        ResultOfGetNameOfZone {
            success,
            ret: native_return,
            
        }
    }
}

}
